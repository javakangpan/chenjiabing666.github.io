<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>觅</title>
  <subtitle>爱生活爱编码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2017-04-20T06:55:40.717Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JQuery干货篇之选择元素</title>
    <link href="http://chenjiabing666.github.io/2017/04/20/JQuery%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0/"/>
    <id>http://chenjiabing666.github.io/2017/04/20/JQuery干货篇之选择元素/</id>
    <published>2017-04-20T06:55:07.000Z</published>
    <updated>2017-04-20T06:55:40.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery-干货篇之选择元素"><a href="#JQuery-干货篇之选择元素" class="headerlink" title="JQuery 干货篇之选择元素"></a>JQuery 干货篇之选择元素</h1><h2 id="实验的HTML-CSS的代码"><a href="#实验的HTML-CSS的代码" class="headerlink" title="实验的HTML+CSS的代码"></a>实验的HTML+CSS的代码</h2><blockquote>
<p><strong>html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.2.1.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Jacqui's Flower Shop<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"oblock"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dtable"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"row1"</span> <span class="attr">class</span>=<span class="string">"drow"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"astor.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"astor"</span>&gt;</span>Astor:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"astor"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"daffodil.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"daffodil"</span>&gt;</span>Daffodil:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"daffodil"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"rose.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"rose"</span>&gt;</span>Rose:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"rose"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"row2"</span> <span class="attr">class</span>=<span class="string">"drow"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"peony.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"peony"</span>&gt;</span>Peony:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"peony"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"primula.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"primula"</span>&gt;</span>Primula:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"primula"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dcell"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"snowdrop.png"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"snowdrop"</span>&gt;</span>Snowdrop:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"snowdrop"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">required</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"buttonDiv"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Place Order<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>css</strong></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">70px</span>;</div><div class="line">    <span class="attribute">border</span>: thick double black;</div><div class="line">    <span class="attribute">margin-left</span>: auto;</div><div class="line">    <span class="attribute">margin-right</span>: auto;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">font-size</span>: x-large;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span>;</div><div class="line">    <span class="attribute">color</span>: darkgreen;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"border.png"</span>);</div><div class="line">    <span class="attribute">background-size</span>: contain;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.dtable</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.drow</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.dcell</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.dcell</span> &gt; * &#123;</div><div class="line">    <span class="attribute">vertical-align</span>: middle</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">2em</span>;</div><div class="line">    <span class="attribute">text-align</span>: right;</div><div class="line">    <span class="attribute">border</span>: thin solid black;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">label</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">5em</span>;</div><div class="line">    <span class="attribute">padding-left</span>: .<span class="number">5em</span>;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#buttonDiv</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#oblock</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin-left</span>: auto;</div><div class="line">    <span class="attribute">margin-right</span>: auto;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">700px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.hover</span>&#123;</div><div class="line">    <span class="attribute">background</span>: blue;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><blockquote>
<ul>
<li><code>:animated</code> :选择正在处理动画的元素</li>
<li><code>:first</code>    :选择第一个元素</li>
<li><code>:last</code>     :选择最后一个元素</li>
<li><code>:eq(n)</code>    :选择第n个元素(从0开始)</li>
<li><code>:even</code>    :选择序号为偶数的元素</li>
<li><code>:odd</code>      :选择序号为奇数的元素</li>
<li><code>:gt(n)</code>    :选择序号<strong>大于</strong>n的元素</li>
<li><code>:lt(n)</code>    :选择序号小于n的元素</li>
<li><code>:text</code>     :选择所有的文本输入框</li>
<li><code>:contains(text)</code>   :选择包含指定文本的元素</li>
<li><code>file</code>     :选择所有文件上传输入框</li>
<li><code>:button</code>   :选择所有的按钮</li>
<li><code>:checkbox</code>  :选择所有的复选框</li>
<li><code>:hidden</code>     :选择隐藏的元素</li>
</ul>
<p><strong>实例</strong></p>
<blockquote>
<p><code>$(&quot;img:odd&quot;).css(&quot;border&quot;,&quot;thick double red&quot;);</code>选择序号为奇数的<code>img</code>元素<br><code>$(&quot;img:first&quot;).css(&quot;border&quot;,&quot;thick double red&quot;)</code>  选择第一个<code>img</code>元素</p>
</blockquote>
</blockquote>
<h2 id="JQuery对象的方法"><a href="#JQuery对象的方法" class="headerlink" title="JQuery对象的方法"></a>JQuery对象的方法</h2><blockquote>
<ul>
<li><code>context</code> 选择元素时使用的上下文对象</li>
</ul>
<blockquote>
<p><code>$(&quot;img:odd&quot;).context.TagName;</code></p>
</blockquote>
<ul>
<li><code>each(function())</code> 在每个选中的元素上运行给定的函数</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;$(&quot;img&quot;).each(function(index,elem)&#123;</div><div class="line">        &gt;&gt;console.log(ele.TagName+&quot;   &quot;+elem.id);//这里的index表示每一个元素的索引，elem表示每一个元素的htmlElement对象，并不是jquery对象</div><div class="line">        &gt;&gt;&#125;)</div><div class="line">&gt;&gt;</div></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>index(jquery) || index(selector)  返回给定jquery对象在住对象中的序号，或者返回给定选择器参数的索引</li>
</ul>
<blockquote>
<p><code>$(&quot;img&quot;).index(&quot;img[src=*astor]&quot;)</code> </p>
</blockquote>
<ul>
<li>length || size()  返回的时jquery对象个数</li>
</ul>
<blockquote>
<p><code>$(&quot;img:odd&quot;).length</code></p>
</blockquote>
<ul>
<li>toArray()  返回一个有jquery对象中包含的htmlEelments数组</li>
</ul>
<blockquote>
<p><code>var content=$(&quot;img:odd&quot;).toArray()</code>  这里content返回的htmlElements数组</p>
</blockquote>
</blockquote>
<h2 id="把jquery当成数组"><a href="#把jquery当成数组" class="headerlink" title="把jquery当成数组"></a>把jquery当成数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> content=$(<span class="string">"img:odd"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;content.length;i++)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(content[i].TagName+<span class="string">"    "</span>+content[i].src);    <span class="comment">//这里的content[i]就是htmlElement数组了，$(content[i])就变成了Jquery对象了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><blockquote>
<p><strong><code>add</code>函数允许我们添加更多的项，常用的有<code>add(htmlElement[])</code>,<code>add(selector)</code>,<code>add(jquery)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img:odd"</span>).add(<span class="string">"img:even"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> jq=$(<span class="string">"img[src*=astor]"</span>);</div><div class="line">$(<span class="string">"img:even"</span>).add(jq).add(<span class="string">"img:even"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> label=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"label"</span>);</div><div class="line">$(<span class="string">"img:odd"</span>).add(label).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);</div></pre></td></tr></table></figure>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><blockquote>
<p><strong>用来获取特定的一组子元素</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).slice(<span class="number">0</span>,<span class="number">3</span>).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);   <span class="comment">//获取0-2的元素</span></div><div class="line"></div><div class="line"> $(<span class="string">"img"</span>).slice(<span class="number">3</span>).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);   <span class="comment">//获取3-结束</span></div></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote>
<p><strong>filter可以将不满足指定条件的元素剔除，常用的方法有<code>filter(jquery)</code>,<code>filter(htmlElement)</code>,<code>filter(function(index))</code>,<code>filter(selector)</code></strong></p>
<p><strong>实例</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//这里填入的参数selector</span></div><div class="line">$(<span class="string">"label"</span>).filter(<span class="string">"[for*=p]"</span>).css(<span class="string">"background-color"</span>,<span class="string">'blue'</span>).css(<span class="string">"font-size"</span>,<span class="string">'20px'</span>).css(<span class="string">"border"</span>,<span class="string">"2px solid red"</span>);</div><div class="line">    </div><div class="line">     $(<span class="string">"img"</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;     <span class="comment">//index是每一个元素的索引，如果返回的是true就会选定，false就会剔除这个元素</span></div><div class="line">       <span class="keyword">if</span>(index==<span class="number">4</span>)</div><div class="line">       &#123;</div><div class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">   &#125;).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div><div class="line">   </div><div class="line">   </div><div class="line">   <span class="keyword">var</span> elem=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"label"</span>)[<span class="number">1</span>];    <span class="comment">//只选择第二个label</span></div><div class="line">   $(<span class="string">"label"</span>).filter(elem).css(<span class="string">"font-size"</span>,<span class="string">'30px'</span>)     <span class="comment">//这里填入的参数是htmlElement对象</span></div></pre></td></tr></table></figure>
<h2 id="not"><a href="#not" class="headerlink" title="not"></a>not</h2><blockquote>
<p><strong><code>not</code>方法是<code>filter</code>方法的补充，主要是删除匹配条件的元素，而<code>filter</code>则是保留满足匹配条件的元素，常用的方法有<code>not(selector)</code>,<code>not(htmlElement)</code>,<code>not(jquery)</code>,<code>not(function(index))</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"label"</span>).not(<span class="string">"[for*=p]"</span>).css(<span class="string">"background-color"</span>,<span class="string">'red'</span>);    <span class="comment">//选择for不带p的label元素</span></div><div class="line"></div><div class="line">   $(<span class="string">"label"</span>).not(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;   <span class="comment">//哪个元素返回true就删除，false保留</span></div><div class="line">       <span class="keyword">if</span>(index==<span class="number">0</span>)</div><div class="line">           <span class="keyword">return</span> <span class="literal">true</span>;      <span class="comment">//这里就会删除第一个label元素，保留后面的元素</span></div><div class="line">       <span class="keyword">else</span></div><div class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">   &#125;).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</div></pre></td></tr></table></figure>
<h2 id="has"><a href="#has" class="headerlink" title="has"></a>has</h2><blockquote>
<p><strong>选择拥有指定后代的选择器</strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).has(<span class="string">"img[src*=astor]"</span>).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);  <span class="comment">//选择子代拥有img属性src带有astor的div.dcell元素</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> s=$(<span class="string">"[for*=astor]"</span>);</div><div class="line">$(<span class="string">"div.dcell"</span>).has(s).css(<span class="string">"border"</span>,<span class="string">"thick double red"</span>);   <span class="comment">//参数为jquery对象</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote>
<p><strong>以一个函数为参数，map方法能够帮助我们灵活的处理一个<code>jquery</code>对象，从而得到满足需要的一个<code>jquery</code>对象。针对源<code>jquery</code>对象中的每一个元素都调用一次这个函数，而函数返回的<code>HtmlElement</code>对象将会变成一个<code>jquery</code>对象，参数是<code>function(index,elem)</code>,其中`index是序号，elem是jquery对象中的每一个HTMLElelments对象，这里必须要有返回值，不然没有意义</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> elem.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];   <span class="comment">//这里的elem是$(div.dcell)中的每一个HtmlElement对象，返回的是img元素</span></div><div class="line">&#125;).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);      <span class="comment">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(index==<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> elem;   <span class="comment">//返回的是第二个img的HtmlElement对象，但是经过map的包装就会变成jquery对象</span></div><div class="line"></div><div class="line">&#125;).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);      <span class="comment">//可以很清楚的看到这里返回的htmlElement对象变成了Jquery对象，因为调用了函数css</span></div></pre></td></tr></table></figure>
<h2 id="is"><a href="#is" class="headerlink" title="is"></a>is</h2><blockquote>
<p><strong><code>is</code>方法确定<code>jquery</code>对象中的某个或者某些元素是否满足测试条件，其中的形式有<code>is(selector)</code>,<code>is(HtmlElement)</code>,<code>is(jquery)</code>,<code>is(function(index))</code>如果结果集中至少有一个元素匹配指定的条件，那么就返回<code>true</code>,否则<code>false</code></strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log($(<span class="string">"img"</span>).is(<span class="string">"[src*=astor]"</span>));<span class="comment">//这里是判断img中的src属性有没有astor字段的，如果存在返回true</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).is(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> c=$(<span class="string">"img"</span>).is(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;    <span class="comment">//函数中如果至少有一个返回true，那么就会返回true，index是索引</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAttribute(<span class="string">'src'</span>)==<span class="string">'rose.png'</span>;   <span class="comment">//判断属性</span></div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(c);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><blockquote>
<p><strong>当我们调用方法链来修改结果集的时候，<code>jquery</code>维护者一个历史结果集的查找，我们可以利用<code>end</code>回退到历史的结果集中,<code>end</code>用来扔掉当前的结果集，返回到上一层结果集</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).filter(<span class="string">"[src*=astor]"</span>).end().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//这里回退到$("img")这个结果集中</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"div.dcell"</span>).find(<span class="string">"img"</span>).filter(<span class="string">":odd"</span>).filter(<span class="string">":eq(0)"</span>).end().end().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>); <span class="comment">//这里调用了两个end将结果集回退到$("div.dcell").find("img")中</span></div></pre></td></tr></table></figure>
<h2 id="addBack"><a href="#addBack" class="headerlink" title="addBack"></a>addBack</h2><blockquote>
<p><strong>得到当前结果集和上一个结果集的合集</strong></p>
<blockquote>
<p><strong>实例</strong></p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).children(<span class="string">"img"</span>).addBack().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//这里得到的是$("div.dcell")和$("div.dcell").children("img")的合集，并且应用css</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).slice(<span class="number">0</span>,<span class="number">3</span>).filter(<span class="string">"[src*=astor]"</span>).addBack().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//$("img").slice(0,3)和$("img").slice(0,3).filter("[src*=astor]")的合集</span></div><div class="line"></div><div class="line"><span class="comment">//这里的选择器参数过滤的是原结果集，相当于$("img").slice(0,3).filter("[src*=daff]")，</span></div><div class="line">$(<span class="string">"img"</span>).slice(<span class="number">0</span>,<span class="number">3</span>).filter(<span class="string">"[src*=astor]"</span>).addBack(<span class="string">"[src*=daff]"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div></pre></td></tr></table></figure>
<h2 id="children"><a href="#children" class="headerlink" title="children"></a>children</h2><blockquote>
<p><strong><code>children</code>是用来访问子元素的，形式有childern(),children(selector),其中第一个是用来得到结果集中所有的子元素，第二个是用来过滤得到的子元素，保留满足<code>selector</code>的子元素</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).children().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//得到所有div.dcell的子元素，包括其中的img和input元素</span></div><div class="line"></div><div class="line">$(<span class="string">"div.dcell"</span>).children(<span class="string">"img"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);<span class="comment">//得到所有子元素中的img元素</span></div></pre></td></tr></table></figure>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><blockquote>
<p><strong><code>find</code>是用来得到结果集中的所有的后代元素，这里是后代元素，并不是只有子元素，还包括孙子。。。，形式有<code>find()</code>,<code>find(selector)</code>,<code>find(htmlElement)</code>,<code>find(jquery)</code>,<code>find(htmlElment[])</code>，这里会自动去掉含有重复的元素，因此可以用来过滤元素</strong></p>
<p><strong>实例</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.dcell"</span>).find(<span class="string">"img"</span>);   <span class="comment">//找到div.dcell的后代元素img</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> content=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</div><div class="line">$(<span class="string">"div.dcell"</span>).find(content).filter(<span class="string">":first"</span>).css(<span class="string">"font-size"</span>,<span class="string">'1.5em'</span>);<span class="comment">//找到div.dcell后代元素中的input元素</span></div></pre></td></tr></table></figure>
<h2 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h2><blockquote>
<p><strong>选取结果集中的父元素，这里表示一层关系就是父元素，并不是祖先元素，形式有<code>parent()</code>,<code>parent(selector)</code></strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).parent();   <span class="comment">//选取img的父元素</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).parent(<span class="string">":first"</span>);   <span class="comment">//选取img父元素中的第一个元素</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="parents"><a href="#parents" class="headerlink" title="parents"></a>parents</h2><blockquote>
<p><strong>选取祖先元素，包括父元素，形式有<code>parents()</code>,<code>parents(selector)</code></strong></p>
<p><strong>实例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).parents().each(<span class="function"><span class="keyword">function</span>(<span class="params">index,elem</span>)</span>&#123;    <span class="comment">//选取所有的祖先元素</span></div><div class="line">    <span class="built_in">console</span>.log(elem.TagName+<span class="string">"   "</span>+elem.id);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).parents(<span class="string">"div.dcell"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//选择所有的div.dcell元素</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="parentsUntil"><a href="#parentsUntil" class="headerlink" title="parentsUntil"></a>parentsUntil</h2><blockquote>
<p><strong>选择祖先元素，知道找到这个当前祖先元素匹配参数选择器为止,<code>parentsUntil(selector)</code>,<code>parentsUntil(selector,selector)</code>，其中带有两个参数选择器中的第二个参数是用来筛选所得到的结果集，第一个是用来定位直到这个元素为止</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).parentsUntil(<span class="string">"div.drow"</span>);<span class="comment">//找img的祖先元素，直到div.drow为止，不包括div.drow</span></div><div class="line"></div><div class="line"> $(<span class="string">"img"</span>).parentsUntil(<span class="string">"div.drow"</span>,<span class="string">":first"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);  <span class="comment">//这里选择了结果集中的第一个元素应用了样式</span></div></pre></td></tr></table></figure>
<h2 id="closest"><a href="#closest" class="headerlink" title="closest"></a>closest</h2><blockquote>
<p><strong>得到结果集中元素的祖先元素中匹配<code>selector</code>选择器最接近的那个祖先元素，形式为<code>closest(selector)</code>,<code>closest(selctor,context)</code>,<code>closest(htmlElemtent)</code>,<code>closest(jquery)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="string">"img"</span>).closest(<span class="string">"div.drow"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,elem</span>) </span>&#123;   <span class="comment">//选择满足div.drow的祖先元素，这里的最接近就是辈分最接近，这里的两个class=drow的div都是最接近的，因为这俩个是同级的关系</span></div><div class="line">        <span class="built_in">console</span>.log(elem.tagName+<span class="string">"    "</span>+elem.id);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> jq=$(<span class="string">"#row1,#row2,form"</span>);   <span class="comment">//传入jquery对象</span></div><div class="line">    $(<span class="string">"img"</span>).filter(<span class="string">"[src*=astor]"</span>).closest(jq).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,elem</span>) </span>&#123;   <span class="comment">//这里选取的是最接近第一张图的祖先元素，当然是&lt;div id="row1"&gt;</span></div><div class="line">        <span class="built_in">console</span>.log(elem.tagName+<span class="string">"   "</span>+elem.id);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h2 id="offestParent"><a href="#offestParent" class="headerlink" title="offestParent"></a>offestParent</h2><blockquote>
<p><strong>得到距离最近的祖先定位元素，使用<code>fixed</code>,<code>absolute</code>,<code>relative</code>定位的元素，形式为<code>offestParent()</code></strong></p>
</blockquote>
<h2 id="siblings"><a href="#siblings" class="headerlink" title="siblings"></a>siblings</h2><blockquote>
<p><strong>得到所有的兄弟元素，可选的<code>selector</code>用来过滤结果，形式为<code>siblings()</code>,<code>siblings(selector)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"img"</span>).siblings().css(<span class="string">"font-size"</span>,<span class="string">'1.4em'</span>);<span class="comment">// 得到img的所有兄弟元素，这里是input</span></div><div class="line"></div><div class="line">$(<span class="string">"img"</span>).siblings(<span class="string">":last"</span>);     <span class="comment">//得到img所有兄弟元素中的最后一个元素</span></div></pre></td></tr></table></figure>
<h2 id="prev"><a href="#prev" class="headerlink" title="prev"></a>prev</h2><blockquote>
<p><strong>得到上一个兄弟元素，形式为<code>prev()</code>,<code>prev(selector)</code>，其中的<code>selector</code>是用来过滤结果的</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).prev().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//这里得到input的上一个元素Label元素</span></div></pre></td></tr></table></figure>
<h2 id="prevAll"><a href="#prevAll" class="headerlink" title="prevAll"></a>prevAll</h2><blockquote>
<p><strong>得到当前元素的所有的上面的兄弟元素，形式为<code>prevALl()</code>,<code>prevAll(selector)</code></strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).prevAll().css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//得到input上面的所有的兄弟元素</span></div><div class="line"></div><div class="line">$(<span class="string">"input"</span>).prev(<span class="string">"img"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);   <span class="comment">//得到input上面的所有的img元素</span></div></pre></td></tr></table></figure>
<h3 id="prevUntil"><a href="#prevUntil" class="headerlink" title="prevUntil"></a>prevUntil</h3><blockquote>
<p><strong>这个和parentsUntil一样，直到匹配<code>selector</code>就结束了，不包括</strong></p>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input"</span>).prevUntil(<span class="string">"i"</span>).css(<span class="string">"border"</span>,<span class="string">'thick double red'</span>);</div></pre></td></tr></table></figure>
<h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><blockquote>
<p><strong>选择当前元素下面的一个兄弟元素，和<code>prev</code>一样</strong></p>
</blockquote>
<h2 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll"></a>nextAll</h2><blockquote>
<p><strong>选择当前元素下面的所有兄弟元素，和<code>prevAll</code>一样</strong></p>
</blockquote>
<h2 id="nextUntil"><a href="#nextUntil" class="headerlink" title="nextUntil"></a>nextUntil</h2><blockquote>
<p><strong>和<code>prevUntil</code>一样</strong></p>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JQuery-干货篇之选择元素&quot;&gt;&lt;a href=&quot;#JQuery-干货篇之选择元素&quot; class=&quot;headerlink&quot; title=&quot;JQuery 干货篇之选择元素&quot;&gt;&lt;/a&gt;JQuery 干货篇之选择元素&lt;/h1&gt;&lt;h2 id=&quot;实验的HTML-CSS的代
    
    </summary>
    
      <category term="JQuery学习" scheme="http://chenjiabing666.github.io/categories/JQuery%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JQuery" scheme="http://chenjiabing666.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>SQL干货篇三</title>
    <link href="http://chenjiabing666.github.io/2017/04/16/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B8%89/"/>
    <id>http://chenjiabing666.github.io/2017/04/16/SQL干货篇三/</id>
    <published>2017-04-16T14:36:33.000Z</published>
    <updated>2017-04-16T14:37:37.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL干货篇三"><a href="#SQL干货篇三" class="headerlink" title="SQL干货篇三"></a>SQL干货篇三</h1><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><blockquote>
<ul>
<li><strong><code>create view &lt;视图名&gt;[(列名),(列名)...] as &lt;子查询&gt; [with check option]</code></strong></li>
<li><strong>子查询可以是select语句或者包含order by子句，具体情况而定，视图名是一定要有的，列名可以省略，如果省略的话则是由子查询中的目标列的相关字段组成，当然也可以自己指定，with check option表示如果视图或者参照表执行insert,update,delete时，那么视图或者参照表会随着变化，也就是两个绑定在一起的意思，当然也可以选择不用，那么视图的增删改就和参照表没有关系了</strong><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><strong>建立在一个表上</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> IS_student <span class="keyword">as</span> <span class="keyword">select</span> Sno,Sname,Sage <span class="keyword">where</span> Sdept=<span class="string">'IS'</span></div><div class="line"><span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span> ;   <span class="comment">/*将所有的IS系的学生学号建立一个视图IS_student,其中的列名是Sno,Sname,Sage*/</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>建立在多个表上</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> IS_Grade(Sno,Sname,Grade) </div><div class="line"><span class="keyword">as</span> <span class="keyword">select</span> student.Sno,Sname,Grade <span class="keyword">from</span> student,SC</div><div class="line"><span class="keyword">where</span> Sdept=<span class="string">'IS'</span> <span class="keyword">and</span> student.Sno=SC.Sno;           <span class="comment">/*建立在两个表上的视图，可以看出这里已经指出指定的列名，但是这个列名并不是固定的，可以根据具体的含义来指定*/</span></div></pre></td></tr></table></figure></p>
<p><strong>定义一个带有表达式的视图</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> BT_S(Sno,Sname,Sbirth) </div><div class="line"><span class="keyword">as</span> <span class="keyword">select</span> Sno,Sname,<span class="number">2014</span>-Sage <span class="keyword">from</span> student    <span class="comment">/*这里的2014-Sage是用来计算出生日期的*/</span></div><div class="line"><span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</div></pre></td></tr></table></figure></p>
<p><strong>聚集函数的视图</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">create view BT(Sno,Gavg) </div><div class="line">as select Sno,AVG(Grade) from SC Group by Sno;  /*这里的AVG(Grade)是用来计算平均成绩的，Group by是用来根据学号分组，这里就是求同一个人的多门学科的平均成绩*/</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><blockquote>
<ul>
<li><strong><code>Drop view &lt;视图名&gt;&lt;CASCADE]</code>,这里的CASCADE表示如果还导出了其他的视图，那么加上CASCADE就会全部删除</strong></li>
</ul>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>Drop view IS_Sdept;</code> 删除视图</li>
<li><code>Drop view IS_Sdept CASCADE;</code>  删除视图和其导出视图</li>
</ul>
</blockquote>
<h2 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h2><blockquote>
<p><strong>查询视图和查询表是一样的，请参照我前两章讲的<a href="https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/">SQL语法</a></strong></p>
</blockquote>
<h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><blockquote>
<p><strong>视图的更新包括insert,delete,update,这个和基本表的操作是一样的</strong></p>
<p><strong>注意：</strong></p>
<blockquote>
<ul>
<li>并不是所有的视图都可以更新的,比如上面根据学生多科平均成绩建立的视图，这里如果将视图中的平均成绩更新了，那么参照表的数据就不能对应的更新了，这就会不允许更新，当然这是在添加了<code>with check option</code>语句的情况下</li>
<li>如果添加了<code>with check option</code>语句,那么对视图的更新就会对应转换成对基本表的更新</li>
<li>各个系统对视图的更新还有进一步的规定，比如DB2规定：<blockquote>
<ul>
<li>如果视图是由两个以上的基本表导出，那么就不可以更新</li>
<li>如果视图来自字段或者表达式，那么就不允许对此视图执行<code>insert</code>,<code>update</code>,但是可以执行<code>delete</code></li>
<li>如果定义中有order by子句，那么不可以更新视图</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL干货篇三&quot;&gt;&lt;a href=&quot;#SQL干货篇三&quot; class=&quot;headerlink&quot; title=&quot;SQL干货篇三&quot;&gt;&lt;/a&gt;SQL干货篇三&lt;/h1&gt;&lt;h2 id=&quot;创建视图&quot;&gt;&lt;a href=&quot;#创建视图&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>java连接mysql初探篇</title>
    <link href="http://chenjiabing666.github.io/2017/04/16/java%E8%BF%9E%E6%8E%A5mysql%E5%88%9D%E6%8E%A2%E7%AF%87/"/>
    <id>http://chenjiabing666.github.io/2017/04/16/java连接mysql初探篇/</id>
    <published>2017-04-16T06:13:04.000Z</published>
    <updated>2017-04-16T06:14:02.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java连接mysql"><a href="#java连接mysql" class="headerlink" title="java连接mysql"></a>java连接mysql</h1><h2 id="基本连接"><a href="#基本连接" class="headerlink" title="基本连接"></a>基本连接</h2><blockquote>
<ul>
<li><p><strong>加载驱动:</strong> <code>Class.forName(com.mysql.jdbc.Driver)</code></p>
</li>
<li><p><strong>建立连接:<code>Connection conn=DriverManager.getConnection(url,user,password)</code></strong></p>
<blockquote>
<p>其中<code>url=&quot;jdbc:mysql://localhost:3306/java_demo&quot;</code>,这里的<code>java_demo</code>是自己创建的数据库的名字,<code>user</code>是<code>mysql</code>数据库的管理员，<code>password</code>是密码<br><strong>下面直接连接数据库，返回的是接口Connection对象</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Connection conn;</div><div class="line">    String driver=<span class="string">"com.mysql.jdbc.Driver"</span>;   <span class="comment">//驱动名称</span></div><div class="line">    String url=<span class="string">"jdbc:mysql://localhost:3306/java_demo"</span>;   <span class="comment">//url</span></div><div class="line">    String user=<span class="string">"root"</span>;</div><div class="line">    String password=<span class="string">"root"</span>;    <span class="comment">//管理员和密码都是root</span></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        Class.forName(driver);    <span class="comment">//加载驱动，但是会有ClassNotFoundException异常，因此要避免异常</span></div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            conn = Dri verManager.getConnection(url, user, password);   <span class="comment">//获得数据库连接</span></div><div class="line">            <span class="keyword">return</span> conn;    <span class="comment">//返回conn</span></div><div class="line">             </div><div class="line">        &#125;<span class="keyword">catch</span>(SQLException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        </div><div class="line">    &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">//如果出现异常就会返回null</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><blockquote>
<ul>
<li><p>**首先根据所得的<code>Connection</code>对象创建<code>Statement</code>对象：<code>Statement statement = connection.createStatement()</code>;</p>
</li>
<li><p><strong>写查询语句：<code>String sql=&quot;select * from student;&quot;</code>这里是查询所有student中的数据，详细内容请看我的<a href="https://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/">SQL干货篇二</a></strong></p>
</li>
<li><p><strong>创建ResultSet对象存储查询结果:<code>ResultSet res=statement.executeQuery(sql)</code>,详细的内容请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/ResultSet.html" target="_blank" rel="external">官方文档ResultSet详细用法</a></strong></p>
</li>
</ul>
</blockquote>
<p><strong>代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String sql=<span class="string">"select * from student"</span>;</div><div class="line"><span class="keyword">if</span>(!conn.isClosed())</div><div class="line">&#123;</div><div class="line">    Statement statement=conn.createStatement();   <span class="comment">//这里的conn是上面连接数据库的返回的Connection对象</span></div><div class="line">    ResultSet res=statement.executeQuery(sql);   <span class="comment">//执行查询，注意这里只能是executeQuery，Statement还有一些执行mysql函数，但是都不适合查询，后面会详细说</span></div><div class="line">    <span class="keyword">while</span>(res.next())    <span class="comment">//如果res结果中还有元素，那么返回true，否则返回的是false,用来判断是否res中还有结果</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id=res.getInt(<span class="string">"id"</span>);    <span class="comment">//得到id,这里的id是student表中的属性名 对应的时int BigInt smallint.....</span></div><div class="line">        String name=res.getString(<span class="string">"name"</span>);  <span class="comment">//得到姓名，对应的是mysql中的Char varChar类型</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>当然上面只是对于基本的查询数据，在一些项目中根本用不到，因为不太灵活，上面的方法只适合全局查询，并不适合在项目中根据条件查询，下面介绍预编译sql语句的接口<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/sql/PreparedStatement.html" target="_blank" rel="external">PrepareStatement</a></strong></p>
<ul>
<li><p><strong>首先编写sql语句:<code>sql=&quot;select * from student where id=?;&quot;;</code>,这里的<code>?</code>表示一个占位，将条件在后面给出，但是这里一定要用<code>?</code></strong></p>
</li>
<li><p><strong>创建对象：<code>PrepareStatement pre=conn.preparestatement(sql);</code>这里传入参数<code>sql</code></strong></p>
</li>
<li><p><strong>设置<code>sql</code>中的条件语句，填补占位<code>?</code>的值:pre.setInt(1,1);这里的<code>SetInt</code>设置<code>id</code>值的为1，因为这的<code>id</code>是<code>int</code>类型的，第一个参数是表示<code>prepareindex</code>，就是表示第一个占位<code>?</code>,当然第二个就是2,其中还有<code>SetString(prepareindex String var)</code>,用来给定表中的<code>char</code>后者<code>varchar</code>类型的值</strong></p>
</li>
</ul>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!connection.isClosed())</div><div class="line">                &#123;</div><div class="line">                    String sql=<span class="string">"select * from course where id=?,name=?"</span>;      </div><div class="line">                    PreparedStatement preparedStatement=connection.prepareStatement(sql);</div><div class="line">                    preparedStatement.setInt(<span class="number">1</span>,<span class="number">1</span>);    <span class="comment">//给定条件中的值</span></div><div class="line">                    prepareStatement.setString(<span class="number">2</span>,<span class="string">"jack"</span>);  <span class="comment">//为第二个？赋值</span></div><div class="line">                    ResultSet res=preparedStatement.executeQuery();    <span class="comment">//执行查询，返回的仍然是ResultSet对象</span></div><div class="line">                    <span class="keyword">while</span>(res.next())</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">int</span> id=res.getInt(<span class="string">"id"</span>);</div><div class="line">                        String name=res.getString(<span class="string">"name"</span>);</div><div class="line">                        System.out.println(id+<span class="string">"--"</span>+name);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><blockquote>
<p><strong>插入数据和上面的两种方法基本是一样的，不同的是<code>mysql</code>语句不同，还有的就是执行语句改成了<code>executeUpdate(sql)</code>，下面的代码值给出了预编译对象的方法，另外一种的方法使用范围并不是很大，只要把上面的查询改为<code>executeUpdate</code>即可</strong></p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(MemoBean memo)</span> </span>&#123;</div><div class="line">       String sql = <span class="string">"insert into student (username, title, content, momotype, memotime) values (?, ?, ?, ?, ?);"</span>;</div><div class="line">       Connection conn = getConnection();</div><div class="line">       PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           ps = conn.prepareStatement(sql);</div><div class="line">           ps.setString(<span class="number">1</span>, memo.getUsername());     <span class="comment">//设值value中的值 </span></div><div class="line">           ps.setString(<span class="number">2</span>, memo.getTitle());</div><div class="line">           ps.setString(<span class="number">3</span>, memo.getContent());</div><div class="line">           ps.setString(<span class="number">4</span>, memo.getMemotype());</div><div class="line">           ps.setString(<span class="number">5</span>, memo.getMemotime());</div><div class="line">           <span class="keyword">return</span> ps.executeUpdate();     <span class="comment">//这里使用的是excuteUpdate</span></div><div class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   ps.close();   <span class="comment">//关闭预编译对象</span></div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException e) &#123; </div><div class="line">                   e.printStackTrace();   </div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   conn.close();       <span class="comment">//关闭Connection对象</span></div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; </div><div class="line">       <span class="keyword">return</span> -<span class="number">1</span>;          <span class="comment">//没有插入成功返回-1</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><blockquote>
<p><strong>这里是同样的思路，和插入的基本是一样，只需要改变sql语句即可</strong></p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MemoBean memo)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"update student set username=?,title=?,content=?,momotype=?,memotime=? where id=?;"</span>;<span class="comment">//查询语句</span></div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ps = connection.prepareStatement(sql);</div><div class="line">            ps.setString(<span class="number">1</span>, memo.getUsername());    <span class="comment">//设置条件语句中的值</span></div><div class="line">            ps.setString(<span class="number">2</span>, memo.getTitle()); </div><div class="line">            ps.setString(<span class="number">3</span>, memo.getContent());</div><div class="line">            ps.setString(<span class="number">4</span>, memo.getMemotype());</div><div class="line">            ps.setString(<span class="number">5</span>, memo.getMemotime());</div><div class="line">            ps.setInt(<span class="number">6</span>,memo.getId());</div><div class="line">            <span class="keyword">return</span> ps.executeUpdate();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    ps.close();</div><div class="line">                &#125;<span class="keyword">catch</span> (SQLException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    connection.close();</div><div class="line">                &#125;<span class="keyword">catch</span> (SQLException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="最后说"><a href="#最后说" class="headerlink" title="最后说"></a>最后说</h2><blockquote>
<ul>
<li><p><strong>上面的代码是从自己项目中截取的一部分代码，这个是比较适用于面向对象的，也是最常用的对于目前来看</strong></p>
</li>
<li><p><strong>上面只是给出了查询，插入，更新，因为这是最常用到的方法，其中还有创建表，删除表，当然还有一些他的，这里的创建表直接用<code>execute(sql)</code>即可执行，删除表也是用<code>execute(sql)</code>即可执行，当然如果要按照指定的条件删除，那么可以使用预编译对象执行</strong></p>
</li>
<li><p><strong>其中<code>executeUpdate(sql)</code>适用于<code>create</code>,<code>insert</code>,<code>update</code>,<code>delete</code>,但是<code>executeQuery(sql)</code>适用于<code>select</code>,具体见官方文档</strong></p>
</li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java连接mysql&quot;&gt;&lt;a href=&quot;#java连接mysql&quot; class=&quot;headerlink&quot; title=&quot;java连接mysql&quot;&gt;&lt;/a&gt;java连接mysql&lt;/h1&gt;&lt;h2 id=&quot;基本连接&quot;&gt;&lt;a href=&quot;#基本连接&quot; class=&quot;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java数据库操作" scheme="http://chenjiabing666.github.io/tags/java%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux干货篇一</title>
    <link href="http://chenjiabing666.github.io/2017/04/13/Linux%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2017/04/13/Linux干货篇一/</id>
    <published>2017-04-13T04:29:34.000Z</published>
    <updated>2017-04-13T04:32:08.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux干货篇一"><a href="#Linux干货篇一" class="headerlink" title="Linux干货篇一"></a>Linux干货篇一</h1><h2 id="虚拟机的安装-VMware"><a href="#虚拟机的安装-VMware" class="headerlink" title="虚拟机的安装(VMware)"></a>虚拟机的安装(VMware)</h2><blockquote>
<ol>
<li><strong>选择文件-&gt;新建虚拟机</strong></li>
<li>选择<strong>自定义</strong></li>
<li>设置安装来源，选择<strong>稍后安装</strong></li>
<li>选择安装的操作系统，选择<strong>Linux</strong>,然后选择自己安装的对应版本即可</li>
<li>设置虚拟机的安装路径，自己选择</li>
<li>指定磁盘容量，选择默认20G,然后选择<strong>将虚拟磁盘存储为单个文件</strong></li>
<li>设置cpu数量，内存大小，默认即可</li>
<li>设置Linux安装镜像文件路径</li>
<li>点击开启虚拟机即可根据对应的设置安装</li>
</ol>
</blockquote>
<h2 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h2><blockquote>
<ul>
<li><code>/boot</code>:存放系统引导时所需要的文件，包括Linux内核以及引导程序(BootLoader)</li>
<li><code>/bin</code>:存放可执行程序</li>
<li><code>/etc</code>:存放系统配置文件</li>
<li><code>/home</code>:普通用户的主目录所在位置</li>
<li><code>/lib</code>:存放基本的共享文件和内核模块</li>
<li><code>/mnt(mount)</code>:用户为需要挂载的文件系统提供挂载点</li>
<li><code>/proc(process)</code>:存放与内核进程有关的信息</li>
<li><code>/root</code>:根用户的主目录</li>
<li><code>/tmp(temporary)</code>:存放临时性文件</li>
<li><code>/usr(user)</code>:存放可共享的只读文件</li>
<li><code>/var(variable)</code>:存放各类的数据文件</li>
</ul>
</blockquote>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><h4 id="重要选项"><a href="#重要选项" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-a(all)</code> 列出目录中的所有项，包括”.”开头的隐藏文件</li>
<li><code>-l(list)</code> 以列表的方式显示文件</li>
<li><code>-R(recursive)</code>  用于递归列出子目录中的内容，如果在选择的目录下还有子文件夹，那么可以列出子文件夹中的文件</li>
<li><code>-d</code>仅仅列出目录本身的信息<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4></li>
<li><code>ls -al /etc</code>     以列表的方式列出ect目录下的所有文件</li>
</ul>
</blockquote>
<h2 id="pwd-显示当前路径"><a href="#pwd-显示当前路径" class="headerlink" title="pwd   显示当前路径"></a>pwd   显示当前路径</h2><h2 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd(切换目录)"></a>cd(切换目录)</h2><blockquote>
<ul>
<li><code>cd ..</code>   跳闸到当前目录的上一级</li>
<li><code>cd ~</code>    跳转到当前用户的主目录</li>
</ul>
</blockquote>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><blockquote>
<ul>
<li><code>cd /tmp/testdir</code>   跳转到tmp文件下的testdir目录</li>
</ul>
</blockquote>
<h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><blockquote>
<p><strong>获取关于某文件的基本信息，包括创建的信息，大小，时间。。。。</strong></p>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>stat test</code>    查看test文件的基本信息</li>
</ul>
</blockquote>
<h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><blockquote>
<p><strong>创建或者更新一个文件的访问和修改的时间，如果一个文件存在，那么更新这个文件的创建时间，但是文件的内容不会改变，如果文件不存在，那么就会在当前目录下创建一个文件</strong></p>
</blockquote>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>touch /tmp/testdir/test</code>    在指定路径下创建一个test文件，如果存在那么会更新创建的时间，可以使用stat命令查看创建时间</li>
</ul>
</blockquote>
<h2 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir(创建目录)"></a>mkdir(创建目录)</h2><blockquote>
<ul>
<li><code>mkdir /tmp/testdir/test_file</code>    在/tmp/testdir目录下创建一个test_file文件夹</li>
</ul>
</blockquote>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><blockquote>
<p><strong>移动或者重命名文件或目录</strong></p>
</blockquote>
<h4 id="重要选项-1"><a href="#重要选项-1" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>b(backup)</code>:若存在同名文件，覆盖前先备份原来的文件</li>
<li><code>f(force)</code>:强制覆盖同名的文件</li>
</ul>
</blockquote>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir /tmp/testdir    //创建一个目录testdir</div><div class="line">touch test1 test2     //创建两个文件test1  test2</div><div class="line">mv -b test1 test2     //移动test1为test2,这里会先备份原来的test2为test2~</div><div class="line"></div><div class="line">mv -b test1 /tmp/testdir1/test    //移动文件到指定目录下</div></pre></td></tr></table></figure>
<h2 id="cp-copy"><a href="#cp-copy" class="headerlink" title="cp(copy)"></a>cp(copy)</h2><blockquote>
<p><strong>复制文件和目录</strong></p>
</blockquote>
<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><blockquote>
<ul>
<li><code>-b</code>: 若存在同名文件，覆盖前先备份</li>
<li><code>-f</code> :强制覆盖同名文件</li>
<li><code>-r</code> : 以递归的方式复制文件，就是复制文件夹，如果不使用这个，那么文件夹就无法复制</li>
</ul>
</blockquote>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>cp /tmp/testdir tmp/testdir1</code>  复制文件夹，这里表示不能复制，因此要加上-r选项才能复制文件夹 -&gt;  </li>
<li><code>cp -r /tmp/testdir /tmp/testdir1</code>   可以复制，复制到/tmp文件夹下命名为testdir1</li>
<li><code>cp -b /tmp/testdir/test1  /tmp/testdir1/test</code>    将文件test1复制到testdir1文件夹下命名为test</li>
</ul>
</blockquote>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><blockquote>
<p><strong>删除命令</strong></p>
</blockquote>
<h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><blockquote>
<ul>
<li><code>-f</code> 强制删除</li>
<li><code>-r</code> 删除文件夹（递归删除）</li>
</ul>
</blockquote>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>rm -rf /tmp/testdir</code>   强制删除testdir目录</li>
</ul>
</blockquote>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><blockquote>
<p><strong>删除目录，但是要求目录必须是空的，这里实用性不大，一般用rm -r</strong></p>
</blockquote>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><blockquote>
<p><strong>查看文件内容</strong></p>
</blockquote>
<h4 id="重要选项-2"><a href="#重要选项-2" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-n</code> 显示行数</li>
</ul>
</blockquote>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>cat -n /tmp/testdir/test</code>    查看文件test的内容，显示行数</li>
</ul>
</blockquote>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><blockquote>
<p><strong>分屏显示文件内容，首先显示一屏后如果还有内容，按回车键在显示下一行，按Space显示下一屏的内容</strong></p>
</blockquote>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>more /tmp/testdir/test</code></li>
</ul>
</blockquote>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><blockquote>
<p><strong>显示文本文件结尾的部分，默认显示最后10行</strong></p>
</blockquote>
<h4 id="重要选项-3"><a href="#重要选项-3" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-n</code> 指定显示的行数</li>
</ul>
</blockquote>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><blockquote>
<p><strong>显示开头的内容，与<code>tail</code>类似</strong></p>
</blockquote>
<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><blockquote>
<p><strong>一次显示文本文件的行数，单词数，字节数</strong></p>
</blockquote>
<h4 id="重要选项-4"><a href="#重要选项-4" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-c</code>  显示文件字节数</li>
<li><code>-l(line)</code>   显示文件行数</li>
<li><code>-w(word)</code>   显示文件单词数</li>
</ul>
</blockquote>
<h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>wc -cl  /tmp/testdir/test</code>   查看文件的字数和文件的行数</li>
</ul>
</blockquote>
<h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p><strong>查看或者修改系统命令</strong></p>
<h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>date</code>  查看系统时间</li>
<li><code>date 09012017</code>    修改系统时间为2017-09-01</li>
</ul>
</blockquote>
<h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p><strong>列出当前系统的登录用户</strong></p>
<h4 id="重要选项-5"><a href="#重要选项-5" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-r</code> 显示系统当前的运行级</li>
<li><code>-q</code> 显示当前所有登录的用户名称和在线人数</li>
</ul>
</blockquote>
<h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p><strong>关闭重启系统</strong></p>
<h4 id="重要选项-6"><a href="#重要选项-6" class="headerlink" title="重要选项"></a>重要选项</h4><blockquote>
<ul>
<li><code>-r(reboot)</code>  重启系统</li>
<li><code>-h(halt)</code>   关闭系统</li>
<li><code>-P(poweroff)</code>  关闭系统同时关闭电源</li>
</ul>
</blockquote>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>上面选项均可给出数字参数指定多少分钟之后执行操作</strong></p>
<h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>shutdown -h 10</code>    设置10分钟后关闭系统</li>
</ul>
</blockquote>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p><strong>清楚当前终端的屏幕内容</strong></p>
<h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p><strong>显示命令的使用手册，按上下键移动光标，Q键退出</strong></p>
<h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>man cat</code>     快速查询cat命令的手册</li>
</ul>
</blockquote>
<h2 id="histroy"><a href="#histroy" class="headerlink" title="histroy"></a>histroy</h2><p><strong>查看shell命令的历史记录</strong></p>
<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><code>histroy 5</code>  显示最近的5条记录</li>
</ul>
</blockquote>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p><strong>调用<code>vim</code>编辑器，按<code>i</code>键插入，<code>w</code>键保存，<code>q</code>键退出，<code>wq</code>保存后退出</strong></p>
<blockquote>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux干货篇一&quot;&gt;&lt;a href=&quot;#Linux干货篇一&quot; class=&quot;headerlink&quot; title=&quot;Linux干货篇一&quot;&gt;&lt;/a&gt;Linux干货篇一&lt;/h1&gt;&lt;h2 id=&quot;虚拟机的安装-VMware&quot;&gt;&lt;a href=&quot;#虚拟机的安装-VMwar
    
    </summary>
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SQL干货篇二</title>
    <link href="http://chenjiabing666.github.io/2017/04/09/SQL%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%BA%8C/"/>
    <id>http://chenjiabing666.github.io/2017/04/09/SQL干货篇二/</id>
    <published>2017-04-09T15:13:13.000Z</published>
    <updated>2017-04-09T15:21:08.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL干货篇之查询数据"><a href="#SQL干货篇之查询数据" class="headerlink" title="SQL干货篇之查询数据"></a>SQL干货篇之查询数据</h1><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><blockquote>
<p><strong>只在一个表中查询数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">where</span> Sno=<span class="string">'13143'</span>;   //根据学号查询数据</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><blockquote>
<p><strong>同时查询多个表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> student.Sno,student.Sname,Grade</div><div class="line"><span class="keyword">FROM</span> student,SC <span class="keyword">where</span> Grade&gt;=<span class="number">90</span>;</div></pre></td></tr></table></figure></p>
<p><strong>说明：这是在学生表student和成绩表SC中查询成绩大于90的学生姓名和学号,因为这里Sno,Sname在两个表中都存在，因此要指定查询哪一个表中的数据，而Grade只在SC表中出现，因此不用指明哪张表</strong></p>
</blockquote>
<h2 id="模糊查找"><a href="#模糊查找" class="headerlink" title="模糊查找"></a>模糊查找</h2><blockquote>
<p><strong>说明：模糊查找用<code>like</code>和<code>not like</code>进行查找</strong></p>
<ul>
<li><code>SELECT * FROM student where Sname like &#39;刘%&#39;;</code>查询所有姓刘的学生</li>
<li><code>SELECT * FROM student where Sname like &#39;%加%&#39;</code>查询名字中含有加字的学生信息，不固定加字的位置，在任意位置都能查到，这里一般搜索引擎都用是用这种模糊查找的方法来匹配搜索项</li>
<li><code>SELECT * FROM student where Sname like &#39;欧阳_&#39;;</code>查找以姓欧阳并且名字为<strong>三</strong>个字的学生信息</li>
<li><code>SELECT * FROM student WHERE Sname like &#39;_阳&#39;;</code>查找所有姓名为两个字并且第二个字为<strong>阳</strong>的学生信息</li>
<li><code>SELECT * FROM student where Sname like &#39;_阳%&#39;;</code>查询所有姓名中第二个字为<strong>阳</strong>的学生信息</li>
<li><code>SELECT * FROM Course where Cname like &#39;\_IS&#39; ESCAPE &#39;\&#39;;</code>查询课程名字为<strong>_is</strong>的课程信息，这里如果要查询的字符串本省就含有通配符”<code>%</code>“或者”<code>_</code>“，这时就要使用<code>ESCAPE&lt;转码字符&gt;</code>来对字符进行转义了，这里的转码字符可以是任意的，但是我们通常都是用<code>\</code>,上面的查询语句中的<code>\</code>就是转码字符</li>
</ul>
</blockquote>
<h2 id="空值查询"><a href="#空值查询" class="headerlink" title="空值查询"></a>空值查询</h2><blockquote>
<p><strong>判断数据是否为空用<code>is not null</code>和<code>is null</code></strong><br><code>SELECT * FROM student where Sname is null</code>;查询姓名为空的学生信息</p>
</blockquote>
<h2 id="多重条件的查询"><a href="#多重条件的查询" class="headerlink" title="多重条件的查询"></a>多重条件的查询</h2><blockquote>
<p><strong>多重条件的查询用AND和OR,其区别不用多说了</strong><br><code>SELECT Sname FROM student where Sdept=&#39;IS&#39; and Sage&gt;20;</code>查找院系是IS并且年龄超过20岁的学生姓名</p>
</blockquote>
<h2 id="ORDER-BY子句-排序"><a href="#ORDER-BY子句-排序" class="headerlink" title="ORDER BY子句(排序)"></a>ORDER BY子句(排序)</h2><blockquote>
<p><strong>用户可以使用ORDER BY子句对数据进行升序(<code>ASC</code>)或者降序(<code>DESC</code>)排列</strong></p>
<ul>
<li><code>SELECT * FROM student where Sage&gt;20 ORDER BY Sno DESC;</code>查询年龄超过20岁的学生信息，并且按照降序排列输出</li>
<li><code>SELECT * FROM student ORDER BY Sdept,Sage DESC;</code>查询全体学生情况，查询结果按照所在系的系号升序排列，同一系的按照年龄降序排列</li>
</ul>
</blockquote>
<h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><blockquote>
<ul>
<li><code>COUNT(*)</code>   统计元组个数</li>
<li><code>COUNT(DISTINCT|ALL &lt;列名&gt;)</code>  计算一列中值的个数，其中DISTINCT表示去除重复的元素，ALL则保留所有的元素</li>
<li><code>SUM(DISTINCT|ALL &lt;列名&gt;)</code>   计算一列值的总和</li>
<li><code>AVG(DISTINCT|ALL&lt;列名&gt;)</code>     计算一列中的平均值</li>
<li><code>MAX(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最大值</li>
<li><code>MIN(DISTINCT|ALL&lt;列名&gt; )</code>    求一列中的最小值</li>
</ul>
</blockquote>
<p><strong>实例：</strong></p>
<blockquote>
<ul>
<li><code>select count(*) from student;</code>     查询学生总数</li>
<li><code>select count(DISTINCT Sdept);</code>     查询总共有多少系</li>
<li><code>select AVG(Grade) from SC;</code>        查询学生的平均分</li>
<li><code>select SUM(Grade) from SC;</code>         查询学生的总分</li>
<li><code>select MAX(Grade) from SC where Cno=&#39;1&#39;;</code>    查询课程1的最高分</li>
<li><code>select MIN(Grade) from SC where Cno=&#39;1&#39;;</code>     查询课程1的最低分</li>
</ul>
</blockquote>
<p><strong>注意：<code>where</code>子句中不能用聚集函数，只有在<code>select</code>子句和<code>Group by</code>子句中才能使用聚集函数</strong></p>
<h2 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h2><ul>
<li><strong>GROUP BY子句将查询结果按某一列或者多列的值分组，值相等的为一组。</strong></li>
<li><strong>对查询结果分组的目的是为了细化聚集函数的对象。如果未对查询结果进行分组，那么聚集函数将会作用于整个查询结果，分组后聚集函数将会作用于每一组，即每一组都有一个函数值</strong></li>
</ul>
<blockquote>
<p><strong>实例：</strong></p>
<ul>
<li><code>select Cno,Count(Sno) from SC Group by Cno;</code>      求各个课程号以及相应的选课人数</li>
<li><code>select Cno as &#39;课程号&#39;,count(Sno) as &#39;选课人数&#39; from sc group by Cno;</code>求各个课程号以及相应的选课人数</li>
<li><code>select Cno,count(Sno),AVG(Grade) from sc group by Cno Having AVG(Grade)&gt;80;</code>  查询课程平均分大于80分的课程号和所选学生人数,这里是先分组后然后对这些组进行筛选就用<code>Having</code>子句进行条件筛选，<strong>不能使用<code>where</code>子句进行筛选</strong>,当然这里的sleect子句中的AVG(Grade)可以去掉,可以写成<code>select Cno,count(Sno) from sc group by Cno Having AVG(Grade)&gt;80;</code></li>
<li><code>select Sno from sc Group by Sno having count(*)&gt;2;</code>   查询选修了两门以上课程的学生学号</li>
<li><code>select Sno,AVG(Grade) from sc Group by Sno;</code> 查询每一个学生选修课程的平均成绩,这里先按照学号进行分组，然后对每一个分组进行求平均成绩</li>
</ul>
<p><strong>注意：这里的如果使用了聚集函数，那么select子句中出现的选项一定要在聚集函数或者Group by子句中出现，否则就会出现错误，如：<code>select Sno,count(Cno) from sc;</code>这条语句就是错误的，因为<code>Sno</code>没有出现在聚集函数或者<code>Group by</code>子句中，如果改成<code>select Sno,count(Cno) from SC Group by Sno;</code>就正确了,因为Sno出现在了<code>Group by</code>子句中了</strong></p>
</blockquote>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><blockquote>
<p><strong>如果一个查询涉及两个以上的表则称之为连接查询，连接查询包括等值连接查询，自然连接查询，自身连接查询，非等值连接查询，外连接查询，复合条件查询</strong></p>
<h3 id="等值和非等值连接查询"><a href="#等值和非等值连接查询" class="headerlink" title="等值和非等值连接查询"></a>等值和非等值连接查询</h3><p><strong>当连接运算符为=时为等值连接查询，否则为非等值连接查询</strong></p>
<p><strong>实例：</strong></p>
<ul>
<li><code>select student.*,SC.* from student,SC where student.Sno=SC.Sno;</code>查询每个学生及其选修课程的情况</li>
</ul>
<h3 id="自然连接查询"><a href="#自然连接查询" class="headerlink" title="自然连接查询"></a>自然连接查询</h3><p><strong>在等值连接的基础上去掉相等的属性组就是自然连接查询</strong></p>
<p><strong>实例：</strong><br><code>select student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade from student,SC where student.Sno=SC.Sno;</code></p>
</blockquote>
<h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><blockquote>
<p><strong>在<code>SQL</code>语言中一个<code>SELECT-FROM-WHERE</code>语句称为一个</strong>查询块<strong>，将一个查询块嵌套在另外一个查询块的<code>WHERE</code>子句或<code>HAVING</code>短语的条件查询称之为嵌套查询</strong><br><strong>实例：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> SNAME <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> SNO <span class="keyword">IN</span>    <span class="comment">/*外层查询*/</span></div><div class="line">(<span class="keyword">SELECT</span> SNO <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> CNO=<span class="string">'2'</span>);    <span class="comment">/*内层查询或者子查询*/</span></div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong></p>
<ul>
<li>这里的查询条件Sno只能有一个，并且外层查询的where子句中出现的Sno属性要和内层查询select语句中的Sno属性要对应。</li>
<li>子查询中不能使用<code>ORDER BY</code>子句，<code>ORDER BY</code>子句只能对最终的查询结果排序</li>
</ul>
</blockquote>
<h3 id="带有IN谓词的嵌套查询"><a href="#带有IN谓词的嵌套查询" class="headerlink" title="带有IN谓词的嵌套查询"></a>带有IN谓词的嵌套查询</h3><blockquote>
<p><strong>实例：</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SELECT Sno,Sname,Sdept from student where Sdept IN</div><div class="line">(SELECT Sdept From student Where Sname='刘晨');</div><div class="line">```  </div><div class="line"></div><div class="line">**查询与刘晨在同一个系的学生信息,当然本例中也可以用自身连接查询来完成，如下：**</div><div class="line"></div><div class="line">```sql</div><div class="line">select first.Sno,first.Sname,first.Sdept </div><div class="line">from student first,student second</div><div class="line">where first.Sdept=second.Sdept and second.Sname='刘晨';</div></pre></td></tr></table></figure>
<h3 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Cno <span class="keyword">from</span> sc x <span class="keyword">where</span> Grade &gt;</div><div class="line">(<span class="keyword">select</span> <span class="keyword">AVG</span>(Grade) <span class="keyword">from</span> sc y <span class="keyword">where</span> x.Sno=y.Sno);</div></pre></td></tr></table></figure>
<p><strong>查询了所有学生成绩超过选修课程平均成绩的课程号</strong></p>
<h3 id="带有ANY或者ALL的谓词子查询"><a href="#带有ANY或者ALL的谓词子查询" class="headerlink" title="带有ANY或者ALL的谓词子查询"></a>带有ANY或者ALL的谓词子查询</h3><blockquote>
<p><strong><code>ANY</code>表示查询条件只要满足其中一个即可，而<code>ALL</code>表示查询条件要满足所有的才行</strong><br><strong>实例：</strong></p>
<ul>
<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ANY(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系<strong>任意</strong>一个学生年龄小的学生姓名和年龄,这里只要满足比一个学生的年龄小即可</li>
<li><code>SELECT SNAME,SAGE FROM STUDENT WHERE SAGE&lt;ALL(SELECT SAGE FROM STUDENT WHERE SDEPT=&#39;CS&#39;) AND SDEPT!=&#39;CS&#39;;</code>查询非计算机系的比计算机系的所有学生年龄小的学生信息，这里要满足比所有的学生信息都要小，<strong>就是比计算机系年龄最小的都要小</strong></li>
</ul>
</blockquote>
<h3 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h3><blockquote>
<p><strong><code>EXISTS</code>表示存在的意思，带有<code>EXISTS</code>的子查询步返回任何的数据，只产生逻辑真或者假</strong></p>
<ul>
<li><code>SELECT Sname From student where EXISTS (SELECT Sname from SC where Sno=student.Sno and Cno=&#39;2&#39;);</code>查询选择课程2的学生姓名，这里只判断是否存在这样的学生，如果子查询中没有找到课程2这项，那么查到的就是空,子查询只判断是否为true or false,当然还有<code>NOT EXISTS</code></li>
</ul>
</blockquote>
<h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><blockquote>
<p><strong>集合操作包括并操作<code>UNION</code>、交操作<code>INTERSECT</code>、差操作<code>EXCEPT</code></strong></p>
<p><strong>实例：</strong></p>
<ul>
<li><code>select * from student where Sdept= &#39;CS&#39; UNION select * from student where Sage&gt;19;</code>查找计算机系的学生以及年龄不大于19岁的学生信息，这里<code>UNION</code>会自动去掉重复的元组，如果想要保留<strong>全部</strong>的数据需要用<code>UNION ALL</code></li>
<li><code>select Sno from SC where Cno=&#39;1&#39; UNION select Sno from SC where Cno=&#39;2&#39;;</code>查询选修课程1或者选修课程2的学生学号，这里并集就是去掉重复的元组，使用<code>UNION ALL</code> 可以保留</li>
<li><code>select Sno from SC where Cno=&#39;1&#39; Intersect select Sno from SC where Cno=&#39;2&#39;;</code>查询同时选修课程1和课程2的学生学号</li>
</ul>
</blockquote>
<h3 id="基于派生表的查询"><a href="#基于派生表的查询" class="headerlink" title="基于派生表的查询"></a>基于派生表的查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> Sno,Cno <span class="keyword">from</span> SC,(<span class="keyword">select</span> Sno,<span class="keyword">AVG</span>(Grade) <span class="keyword">from</span> SC <span class="keyword">Group</span> <span class="keyword">by</span> Sno) </div><div class="line"><span class="keyword">AS</span> AVG_SC(avg_Sno,avg_grade)</div><div class="line"><span class="keyword">where</span> SC.Sno=AVG_SC.avg_Sno <span class="keyword">and</span> SC.Grade&gt;=AVG_SC.avg_grade;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>这里的From子句中将会派生出一个AVG_SC表,该表由avg_Sno、avg_grade组成，主查询将SC表和AVG_SC表进行连接，选出修课成绩大于其平均成绩的课程号</strong></p>
<p><strong>注意：如果子查询中没有聚集函数，那么派生表不用指定属性列，子查询后面的列名为其属性，如下：</strong></p>
<blockquote>
<p><code>select Sname from student,(select Sno From SC where Cno=&#39;1&#39;) AS SCI where student.Sno=SCI.Sno;</code>这里的SCI默认的列属性名是Sno，AS关键词可以省略，但是必须要为派生表指定一个别名。</p>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL干货篇之查询数据&quot;&gt;&lt;a href=&quot;#SQL干货篇之查询数据&quot; class=&quot;headerlink&quot; title=&quot;SQL干货篇之查询数据&quot;&gt;&lt;/a&gt;SQL干货篇之查询数据&lt;/h1&gt;&lt;h2 id=&quot;单表查询&quot;&gt;&lt;a href=&quot;#单表查询&quot; class=&quot;
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>java干货篇之文字特效</title>
    <link href="http://chenjiabing666.github.io/2017/04/09/java%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%96%87%E5%AD%97%E7%89%B9%E6%95%88/"/>
    <id>http://chenjiabing666.github.io/2017/04/09/java干货篇之文字特效/</id>
    <published>2017-04-09T08:15:16.000Z</published>
    <updated>2017-04-09T08:15:55.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java干货篇文字特效"><a href="#java干货篇文字特效" class="headerlink" title="java干货篇文字特效"></a>java干货篇文字特效</h1><h2 id="立体效果的文字"><a href="#立体效果的文字" class="headerlink" title="立体效果的文字"></a>立体效果的文字</h2><p><strong>主要使用了Graphics类中的setFont和setColor的方法，绘制多层字然后加上平移一个坐标即可实现多重叠加的效果,让人看起来就像是立体一样,详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/039" target="_blank" rel="external">源码</a></strong></p>
<h2 id="阴影效果的文字"><a href="#阴影效果的文字" class="headerlink" title="阴影效果的文字"></a>阴影效果的文字</h2><p><strong>和面一样，只是平移的方式有些不同，详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/040" target="_blank" rel="external">源码</a></strong></p>
<h2 id="倾斜效果的文字"><a href="#倾斜效果的文字" class="headerlink" title="倾斜效果的文字"></a>倾斜效果的文字</h2><p><strong>主要使用的时Graphics2D类的shear方法，使绘图上下文倾斜，详情见<a href="https://github.com/chenjiabing666/java_provide/tree/master/041" target="_blank" rel="external">源码</a></strong><br><strong><code>public abstract void shear(double shx,double shy)</code>其中shx表示在正x轴方向移动坐标的乘数，可以作为其y坐标的函数</strong></p>
<h2 id="渐变效果的文字"><a href="#渐变效果的文字" class="headerlink" title="渐变效果的文字"></a>渐变效果的文字</h2><p><strong>主要使用了Graphics2D中的setPaint的方法,详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/042" target="_blank" rel="external">源码</a></strong><br><strong><code>public abstract void setPaint(Paint paint)</code>paint封装了渐变颜色的Paint对象</strong><br><strong>其中Paint对象的创建是由<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/GradientPaint.html" target="_blank" rel="external">GradientPaint</a>初始化的,其中的构造函数如下：<code>GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2)</code></strong></p>
<h2 id="会变色的文字"><a href="#会变色的文字" class="headerlink" title="会变色的文字"></a>会变色的文字</h2><p><strong>这个主要使用了多线程的方式实现的，用多线程改变Color方法中的RGB的值,用Random在指定范围内任意取值然后组成了不同的颜色，详情请见<a href="https://github.com/chenjiabing666/java_provide/tree/master/043" target="_blank" rel="external">源码</a></strong></p>
<h2 id="水印文字特效-源码"><a href="#水印文字特效-源码" class="headerlink" title="水印文字特效(源码)"></a>水印文字特效(<a href="https://github.com/chenjiabing666/java_provide/tree/master/044" target="_blank" rel="external">源码</a>)</h2><p><strong>水印文字主要通过改变了文字的透明度实现的，将文字绘制在图片上，然后改变图片的透明度，主要使用了Graphaics2D中的setComposite方法，定义如下：</strong><br><strong><code>public abstract void setComposite(Composite comp)</code>，其中Comp是<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/AlphaComposite.html" target="_blank" rel="external">AlphaComposite</a>对象，可以使用以下两种方式创建</strong></p>
<blockquote>
<ul>
<li><code>AlphaComposite alpha=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f)</code>获得一个SRC_OVER规则的对象</li>
<li><code>AlphaComposite alpha=AlphaComposite.SC_OVER.driver(0.3f)</code>同上</li>
</ul>
</blockquote>
<h2 id="动态绘制文本-源码"><a href="#动态绘制文本-源码" class="headerlink" title="动态绘制文本(源码)"></a>动态绘制文本(<a href="https://github.com/chenjiabing666/java_provide/tree/master/046" target="_blank" rel="external">源码</a>)</h2><p><strong>主要使用BufferedReader缓冲流从指定文件中读取一个字符，然后使用线程一个一个的绘制在画板上，中间sleep了400ms，这样就能展示出动态的效果，还使用了System类的getProperty方法获得项目的路径,以下提供了两种方法读取文件，更多的读取方法请看我的<a href="https://chenjiabing666.github.io/2017/03/25/java%E4%B8%AD%E7%9A%84IO%E6%93%8D%E4%BD%9C/">博客文章</a></strong></p>
<blockquote>
<ul>
<li><code>BufferedReader read=new BufferedReader(new FileReader(pathname))</code></li>
<li><code>BufferedReader read=new BufferedReader(new InputStreamReader(in))</code></li>
</ul>
</blockquote>
<p><strong>由于都是比较简单的代码，这里不再贴出来le，有想要看的朋友，请点击上面的源码</strong></p>
<blockquote>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java干货篇文字特效&quot;&gt;&lt;a href=&quot;#java干货篇文字特效&quot; class=&quot;headerlink&quot; title=&quot;java干货篇文字特效&quot;&gt;&lt;/a&gt;java干货篇文字特效&lt;/h1&gt;&lt;h2 id=&quot;立体效果的文字&quot;&gt;&lt;a href=&quot;#立体效果的文字&quot; c
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java图形与文本处理" scheme="http://chenjiabing666.github.io/tags/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>swing干货系列之JTextField</title>
    <link href="http://chenjiabing666.github.io/2017/04/08/Swing%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97%E4%B9%8BJTextField/"/>
    <id>http://chenjiabing666.github.io/2017/04/08/Swing干货系列之JTextField/</id>
    <published>2017-04-08T12:32:04.000Z</published>
    <updated>2017-04-08T13:02:57.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swing系列之JTextField-单行文本框"><a href="#Swing系列之JTextField-单行文本框" class="headerlink" title="Swing系列之JTextField(单行文本框)"></a>Swing系列之JTextField(单行文本框)</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li><code>JTextField</code>是一个轻量级组件，它允许编辑单行文本。</li>
<li><p><code>JTextField</code> 具有建立字符串的方法，此字符串用作针对被激发的操作事件的命令字符串。<code>java.awt.TextField</code> 把字段文本用作针对 <code>ActionEvent</code> 的命令字符串。如果通过 setActionCommand 方法设置的命令字符串不为 null，则 JTextField 将使用该字符串来保持与 java.awt.TextField 的兼容性，否则将使用字段文本来保持兼容性。</p>
</li>
<li><p><code>setEchoChar</code> 和 <code>getEchoChar</code> 方法不是直接提供的，以避免可插入的外观的新实现意外公开密码字符。为了提供类似密码的服务，单独的类 <code>JPasswordField</code> 扩展了 <code>JTextField</code>，从而通过可插入外观独立地提供此服务。</p>
</li>
<li><code>JTextField</code> 的水平对齐方式可以设置为左对齐、前端对齐、居中对齐、右对齐或尾部对齐。右对齐/尾部对齐在所需的字段文本尺寸小于为它分配的尺寸时使用。这是由 setHorizontalAlignment 和 <code>getHorizontalAlignment</code> 方法确定的。默认情况下为前端对齐。</li>
<li>文本字段如何使用 VK_ENTER 事件取决于文本字段是否具有任何操作侦听器。如果具有操作侦听器，则 VK_ENTER 导致侦听器获取一个 ActionEvent，并使用 VK_ENTER 事件。这与 AWT 文本字段处理 VK_ENTER 事件的方式是兼容的。如果文本字段没有操作侦听器，则从 1.3 版本开始不使用 VK_ENTER 事件。而是处理祖先组件的绑定，这将启用 JFC/Swing 的默认按钮特性。</li>
<li>Swing 不是线程安全的</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul>
<li><code>JTextField()</code> 构造一个新的 TextField</li>
<li><code>JTextField(Document doc, String text, int columns)</code>  构造一个新的 JTextField，它使用给定文本存储模型和给定的列数。</li>
<li><code>JTextField(int columns)</code>  构造一个具有指定列数的新的空 TextField。</li>
<li><code>JTextField(String text)</code>构造一个用指定文本初始化的新 TextField。</li>
<li><code>JTextField(String text, int columns)</code>   构造一个用指定文本和列初始化的新 TextField。</li>
</ul>
<h2 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h2><ul>
<li><p><code>get/setHorizontalAlignment(int alignment</code>) 设置/得到文本的水平对齐方式。其中水平的对齐方式有：JTextField.LEFT</p>
<blockquote>
<ol>
<li><code>JTextField.CENTER</code></li>
<li><code>JTextField.RIGHT</code></li>
<li><code>JTextField.LEADING</code> (the default)</li>
<li><code>JTextField.TRAILING</code></li>
</ol>
</blockquote>
</li>
<li><p><code>setFont(Font font)</code>   设置字体</p>
</li>
<li><code>setScrollOffset(int scrollOffset)</code>  获取滚动偏移量（以像素为单位）。</li>
<li><code>setDocument(Document doc)</code>  将编辑器与一个文本文档关联，这里的意思就是将此文本框与一个文本文档关联，这将会保持内容一致，如果一个改变了，另外一个也会改变。</li>
<li><code>setInputVerifier(verifier)</code>    设置验证方式，如果此文本不能通过验证那么就不能将焦点聚焦到下一个组件上，就会一直聚焦到这个文本框上</li>
<li><code>setDragEnabled(boolean x)</code>   设置在文本框中是否能够拖放文本,为true则是能够，这里的意思就是能够将文本选中后能不能将文本拖走</li>
<li><code>addActionListener(ActionListener action)</code>   添加监听机制，输入文本按回车即可触发，和按钮的监听机制相同</li>
<li><code>write(InfileWriter writer)</code>  将文本框中的内容输入到文件中</li>
<li><code>addKeyListener(KeyListener event)</code>   添加键盘监听，在文本框中输入内容时会触发键盘，其中有按下，释放，键入的动作，详情见<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/awt/event/KeyListener.html" target="_blank" rel="external">官方文档</a></li>
<li><code>addCaretListener(CareListener event)</code>  添加一个侦听文本组件插入符的位置更改的侦听器，只要鼠标指针的位置改变就会触发</li>
</ul>
<h2 id="一个简单的实例"><a href="#一个简单的实例" class="headerlink" title="一个简单的实例"></a>一个简单的实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">text</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JTextField textField1;</div><div class="line">    <span class="keyword">private</span> JTextField textField2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        text my = <span class="keyword">new</span> text();</div><div class="line">        my.setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">text</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//this.setBounds(100,100,300,200);</span></div><div class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">2</span>, <span class="number">1</span>));</div><div class="line">        textField1 = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</div><div class="line">        textField2 = <span class="keyword">new</span> JTextField();</div><div class="line">        panel.add(textField1);</div><div class="line">        panel.add(textField2);</div><div class="line">        <span class="keyword">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class="line">        <span class="keyword">this</span>.pack();</div><div class="line">        InputVerifier verifier = <span class="keyword">new</span> InputVerifier() &#123;    <span class="comment">//添加验证方式</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(JComponent input)</span> </span>&#123;     <span class="comment">//重载函数</span></div><div class="line">                <span class="keyword">boolean</span> value;</div><div class="line">                textField1 = (JTextField) input;    <span class="comment">//将input组件强制转化为JTextField类型的单行文本框</span></div><div class="line">                <span class="keyword">return</span> textField1.getText().equals(<span class="string">"pass"</span>);  <span class="comment">//判断是否输入的时pass,如果不是就会验证错误</span></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        textField1.setInputVerifier(verifier);   <span class="comment">//设置验证方式</span></div><div class="line">        textField1.setHorizontalAlignment(JTextField.CENTER);   <span class="comment">//设置水平对齐方式</span></div><div class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD + Font.ITALIC, <span class="number">20</span>);</div><div class="line">        textField1.setFont(font);   <span class="comment">//设置字体</span></div><div class="line">        textField1.setDragEnabled(<span class="keyword">true</span>);  <span class="comment">//设置在单行文本框中能够拖放文本，如果为false则不能够拖放文本</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关联文本文档"><a href="#关联文本文档" class="headerlink" title="关联文本文档"></a>关联文本文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Container;</div><div class="line"><span class="keyword">import</span> java.awt.GridLayout;</div><div class="line"><span class="comment">/*from   w  ww.jav  a  2s . co m*/</span></div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JLabel;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">import</span> javax.swing.text.Document;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">  JLabel nameLabel = <span class="keyword">new</span> JLabel(<span class="string">"Name:"</span>);</div><div class="line">  JLabel mirroredNameLabel = <span class="keyword">new</span> JLabel(<span class="string">"Mirrored:"</span>);</div><div class="line">  JTextField name = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</div><div class="line">  JTextField mirroredName = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</div><div class="line">    <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>, <span class="number">0</span>));</div><div class="line"></div><div class="line">    Container contentPane = <span class="keyword">this</span>.getContentPane();</div><div class="line">    contentPane.add(nameLabel);</div><div class="line">    contentPane.add(name);</div><div class="line">    contentPane.add(mirroredNameLabel);</div><div class="line">    contentPane.add(mirroredName);</div><div class="line"></div><div class="line">    Document nameModel = name.getDocument();    <span class="comment">//得到文本框的文本文档，将之与第二个文本框关联</span></div><div class="line">    mirroredName.setDocument(nameModel);           <span class="comment">//两个文本框中的内容相互关联，这样只需要在一个里面输入文本，同时也会在另外一个文本框中显示</span></div><div class="line">    </div><div class="line">    pack();</div><div class="line">    setVisible(<span class="keyword">true</span>);    </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Main frame = <span class="keyword">new</span> Main();</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：这里是将两个文本框相关联，这样就能达到一个文本框输入的同时，另外一个也会同时更新内容</strong></p>
</blockquote>
<h2 id="Action-Listener-动作监听机制"><a href="#Action-Listener-动作监听机制" class="headerlink" title="Action Listener(动作监听机制)"></a>Action Listener(动作监听机制)</h2><p><strong>输入文本后按回车即可触发</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="comment">//from  w  w  w. ja va2s  .c o m</span></div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line">    JFrame frame = <span class="keyword">new</span> JFrame();</div><div class="line">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    JTextField jTextField1 = <span class="keyword">new</span> JTextField();</div><div class="line"></div><div class="line">    jTextField1.setText(<span class="string">"jTextField1"</span>);</div><div class="line">    <span class="comment">//添加监听机制</span></div><div class="line">    jTextField1.addActionListener(<span class="keyword">new</span>   java.awt.event.ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"action"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    frame.add(jTextField1);</div><div class="line"></div><div class="line">    frame.setSize(<span class="number">300</span>, <span class="number">200</span>);</div><div class="line">    frame.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="验证文本内容"><a href="#验证文本内容" class="headerlink" title="验证文本内容"></a>验证文本内容</h2><p><strong>使用<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/InputVerifier.html#InputVerifier(" target="_blank" rel="external">InputVerifier</a>)验证</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> javax.swing.InputVerifier;</div><div class="line"><span class="keyword">import</span> javax.swing.JComponent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">    JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">"Verifier Sample"</span>);</div><div class="line">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    JTextField textField1 = <span class="keyword">new</span> JTextField();</div><div class="line">    JTextField textField2 = <span class="keyword">new</span> JTextField();</div><div class="line">    InputVerifier verifier = <span class="keyword">new</span> InputVerifier() &#123;     <span class="comment">//创建一个验证</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(JComponent comp)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> returnValue;</div><div class="line">        JTextField textField = (JTextField) comp;      <span class="comment">//强制转换，将控件类型的comp转换成JTextFiled类型的</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          Integer.parseInt(textField.getText());    <span class="comment">//将输入的内容转化程int类型，如果输入的字符串不是十进制的话就会触发                                                          //NumberFormateException错误</span></div><div class="line">          returnValue = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;   </div><div class="line">          returnValue = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> returnValue;        <span class="comment">//如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</span></div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    textField1.setInputVerifier(verifier);</div><div class="line">    frame.add(textField1, BorderLayout.NORTH);</div><div class="line">    frame.add(textField2, BorderLayout.CENTER);</div><div class="line">    frame.setSize(<span class="number">300</span>, <span class="number">100</span>);</div><div class="line">    frame.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：如果返回false的话，那么指针就会一直聚焦在此文本框中，不能移动到其他的组件上</strong></p>
</blockquote>
<h2 id="将文本框中的内容保存到文件中"><a href="#将文本框中的内容保存到文件中" class="headerlink" title="将文本框中的内容保存到文件中"></a>将文本框中的内容保存到文件中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JTextField textField;</div><div class="line">    <span class="keyword">private</span> FileWriter writer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Main my = <span class="keyword">new</span> Main();</div><div class="line">        my.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> BorderLayout());</div><div class="line">        JButton button = <span class="keyword">new</span> JButton(<span class="string">"运行"</span>);</div><div class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"name"</span>);</div><div class="line">        textField = <span class="keyword">new</span> JTextField();</div><div class="line">        panel.add(label, BorderLayout.WEST);</div><div class="line">        panel.add(textField, BorderLayout.CENTER);</div><div class="line">        String filename = <span class="string">"text.txt"</span>;</div><div class="line">        button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;    <span class="comment">//添加一个按钮触发装置，这里只要点击一下anniu就会将文本框中的内容输入到文件中</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    writer = <span class="keyword">new</span> FileWriter(filename, <span class="keyword">false</span>);   <span class="comment">//创建一个写入文件的对象，这里的false表示不在文件的末尾添加</span></div><div class="line">                    textField.write(writer);     <span class="comment">//将单行文本中输入的内容写入到文件中</span></div><div class="line">                    writer.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">                    e1.printStackTrace();</div><div class="line">                    System.out.println(<span class="string">"false"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        panel.add(button, BorderLayout.SOUTH);</div><div class="line">        <span class="keyword">this</span>.getContentPane().add(panel, BorderLayout.CENTER);</div><div class="line">        <span class="keyword">this</span>.pack();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：这里使用的是<code>FileWriter</code>类将内容写入到文件中，详情请看我的上一篇<a href="https://chenjiabing666.github.io/2017/03/25/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%80/">文章</a></strong></p>
</blockquote>
<h2 id="复制、粘贴、剪切文本"><a href="#复制、粘贴、剪切文本" class="headerlink" title="复制、粘贴、剪切文本"></a>复制、粘贴、剪切文本</h2><blockquote>
<p><strong>这里使用的时<code>copy()</code>、<code>paste()</code>、<code>cut()</code>函数</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.FlowLayout;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> JTextField textField = <span class="keyword">new</span> JTextField(<span class="number">15</span>);</div><div class="line">    JButton buttonCut = <span class="keyword">new</span> JButton(<span class="string">"Cut"</span>);</div><div class="line">    JButton buttonPaste = <span class="keyword">new</span> JButton(<span class="string">"Paste"</span>);</div><div class="line">    JButton buttonCopy = <span class="keyword">new</span> JButton(<span class="string">"Copy"</span>);</div><div class="line"></div><div class="line">    JFrame jfrm = <span class="keyword">new</span> JFrame(<span class="string">"Cut, Copy, and Paste"</span>);</div><div class="line">    jfrm.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line">    jfrm.setSize(<span class="number">230</span>, <span class="number">150</span>);</div><div class="line">    jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    buttonCut.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent le)</span> </span>&#123;</div><div class="line">        textField.cut();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    buttonPaste.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent le)</span> </span>&#123;</div><div class="line">        textField.paste();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    buttonCopy.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent le)</span> </span>&#123;</div><div class="line">        textField.copy();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    textField.addCaretListener(<span class="keyword">new</span> CaretListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caretUpdate</span><span class="params">(CaretEvent ce)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"All text: "</span> + textField.getText());</div><div class="line">        <span class="keyword">if</span> (textField.getSelectedText() != <span class="keyword">null</span>)</div><div class="line">          System.out.println(<span class="string">"Selected text: "</span> + textField.getSelectedText());</div><div class="line">        <span class="keyword">else</span></div><div class="line">          System.out.println(<span class="string">"Selected text: "</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    jfrm.add(textField);</div><div class="line">    jfrm.add(buttonCut);</div><div class="line">    jfrm.add(buttonPaste);</div><div class="line">    jfrm.add(buttonCopy);</div><div class="line">    jfrm.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明：这里使用的时用三个按钮监听操作，只需要按住对应的按钮就会触发机制</strong></p>
</blockquote>
<h2 id="添加键盘监听机制"><a href="#添加键盘监听机制" class="headerlink" title="添加键盘监听机制"></a>添加键盘监听机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.Dimension;</div><div class="line"><span class="keyword">import</span> java.awt.FlowLayout;</div><div class="line"><span class="keyword">import</span> java.awt.HeadlessException;</div><div class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JLabel;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> <span class="keyword">throws</span> HeadlessException </span>&#123;</div><div class="line">    setSize(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT));</div><div class="line"></div><div class="line">    JLabel usernameLabel = <span class="keyword">new</span> JLabel(<span class="string">"Username: "</span>);</div><div class="line">    JTextField usernameTextField = <span class="keyword">new</span> JTextField();</div><div class="line">    usernameTextField.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">100</span>, <span class="number">20</span>));</div><div class="line">    add(usernameLabel);</div><div class="line">    add(usernameTextField);</div><div class="line"></div><div class="line">    usernameTextField.addKeyListener(<span class="keyword">new</span> KeyAdapter() &#123;   <span class="comment">//创建机制</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;        <span class="comment">//重载函数，释放按键触发</span></div><div class="line">        JTextField textField = (JTextField) e.getSource();  <span class="comment">//得到最初发生event的组件对象,既是文本框对象</span></div><div class="line">        String text = textField.getText();</div><div class="line">        textField.setText(text.toUpperCase());      <span class="comment">//将所有的小写字母转换成大写字母</span></div><div class="line">      &#125;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;           <span class="comment">//键入时触发</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;       <span class="comment">//释放按键时触发的函数</span></div><div class="line">      &#125;   </div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Main().setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="添加插入符位置变化的监听机制"><a href="#添加插入符位置变化的监听机制" class="headerlink" title="添加插入符位置变化的监听机制"></a>添加插入符位置变化的监听机制</h2><p><strong>使用的是<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/event/CaretListener.html" target="_blank" rel="external">CareListener</a>类来实现</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zzk;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.awt.Font;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics2D;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">import</span> javax.swing.JTextField;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.event.CaretListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockwiseTextFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JTextField textField;</div><div class="line">    ClockwiseTextPanel clockwiseTextPanel = <span class="keyword">new</span> ClockwiseTextPanel(); <span class="comment">// 创建面板类的实例</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; <span class="comment">// 主方法</span></div><div class="line">        ClockwiseTextFrame frame = <span class="keyword">new</span> ClockwiseTextFrame(); <span class="comment">// 创建窗体类的实例</span></div><div class="line">        frame.setVisible(<span class="keyword">true</span>); <span class="comment">// 显示窗体</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClockwiseTextFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(); <span class="comment">// 调用超类的构造方法</span></div><div class="line">        setTitle(<span class="string">"顺时针旋转文字"</span>); <span class="comment">// 窗体标题</span></div><div class="line">        setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">340</span>, <span class="number">240</span>); <span class="comment">// 窗体的显示位置和大小</span></div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class="comment">// 窗体关闭方式</span></div><div class="line">        add(clockwiseTextPanel); <span class="comment">// 将面板类的实例添加到窗体容器中</span></div><div class="line">        textField = <span class="keyword">new</span> JTextField();</div><div class="line">        textField.addCaretListener(<span class="keyword">new</span> CaretListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">caretUpdate</span><span class="params">(CaretEvent arg0)</span> </span>&#123;</div><div class="line">                String text = textField.getText();<span class="comment">// 获取文本框字符串</span></div><div class="line">                clockwiseTextPanel.setText(text);<span class="comment">// 为面板中的text变量赋值</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        getContentPane().add(textField, BorderLayout.SOUTH);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ClockwiseTextPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123; <span class="comment">// 创建内部面板类</span></div><div class="line">        <span class="keyword">private</span> String text;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClockwiseTextPanel</span><span class="params">()</span> </span>&#123;</div><div class="line">            setOpaque(<span class="keyword">false</span>);<span class="comment">// 设置面板为透明</span></div><div class="line">            setLayout(<span class="keyword">null</span>);<span class="comment">// 设置为绝对布局</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> text; <span class="comment">// 获得成员变量的值</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.text = text;<span class="comment">// 为成员变量赋值</span></div><div class="line">            repaint();<span class="comment">// 调整paint()方法</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;<span class="comment">// 重写paint()方法</span></div><div class="line">            Graphics2D g2 = (Graphics2D) g;<span class="comment">// 获得Graphics2D的实例</span></div><div class="line">            <span class="keyword">int</span> width = getWidth();<span class="comment">// 获得面板的宽度</span></div><div class="line">            <span class="keyword">int</span> height = getHeight();<span class="comment">// 获得面板的高度</span></div><div class="line">            <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">char</span>[] array = text.toCharArray();<span class="comment">// 将文本转换为字符数组</span></div><div class="line">                <span class="keyword">int</span> len = array.length * <span class="number">5</span>;<span class="comment">// 定义圆的半径，同时可以调整文字的距离</span></div><div class="line">                Font font = <span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD, <span class="number">22</span>);<span class="comment">// 创建字体</span></div><div class="line">                g2.setFont(font);<span class="comment">// 设置字体</span></div><div class="line">                <span class="keyword">double</span> angle = <span class="number">0</span>;<span class="comment">// 定义初始角度</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;<span class="comment">// 遍历字符串中的字符</span></div><div class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                        g2.setColor(Color.BLUE);<span class="comment">// 第一个字符用蓝色</span></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        g2.setColor(Color.BLACK);<span class="comment">// 其他字符用黑色</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">int</span> x = (<span class="keyword">int</span>) (len * Math.sin(Math.toRadians(angle + <span class="number">270</span>)));<span class="comment">// 计算每个文字的横坐标位置</span></div><div class="line">                    <span class="keyword">int</span> y = (<span class="keyword">int</span>) (len * Math.cos(Math.toRadians(angle + <span class="number">270</span>)));<span class="comment">// 计算每个文字的纵坐标位置</span></div><div class="line">                    g2.drawString(array[i] + <span class="string">""</span>, width / <span class="number">2</span> + x, height / <span class="number">2</span> - y);<span class="comment">// 绘制字符</span></div><div class="line">                    angle = angle + <span class="number">360</span>d / array.length;<span class="comment">// 改变角度</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<ul>
<li><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/javax/swing/JTextField.html#setScrollOffset(int" target="_blank" rel="external">官方网站</a>)</li>
<li><a href="http://www.java2s.com/Tutorials/Java/Java_Swing/0820__Java_Swing_JTextField.htm" target="_blank" rel="external">英文文档</a></li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swing系列之JTextField-单行文本框&quot;&gt;&lt;a href=&quot;#Swing系列之JTextField-单行文本框&quot; class=&quot;headerlink&quot; title=&quot;Swing系列之JTextField(单行文本框)&quot;&gt;&lt;/a&gt;Swing系列之JText
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="swing" scheme="http://chenjiabing666.github.io/tags/swing/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬取豆瓣全站</title>
    <link href="http://chenjiabing666.github.io/2017/04/08/scrapy%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%85%A8%E7%AB%99/"/>
    <id>http://chenjiabing666.github.io/2017/04/08/scrapy爬取豆瓣全站/</id>
    <published>2017-04-08T06:24:26.000Z</published>
    <updated>2017-04-08T06:36:20.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy爬取豆瓣读书全站"><a href="#Scrapy爬取豆瓣读书全站" class="headerlink" title="Scrapy爬取豆瓣读书全站"></a>Scrapy爬取豆瓣读书全站</h1><h2 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h2><blockquote>
<p>首先打开<a href="https://book.douban.com/tag/?icn=index-nav" target="_blank" rel="external">豆瓣读书中的分类浏览</a>，可以看到其中有很多的分类</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/2.bmp" alt="分类"></p>
<p>豆瓣应该是一个比较好爬的网站，所有的数据都不是<code>ajax</code>加载的，我们打开谷歌的<code>F12</code>或者是火狐的<code>FireBug</code>可以很轻松的找到每一个分类的链接</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/NonName.bmp" alt="url所在地"></p>
<p>这里我们使用scrapy中的一个<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/link-extractors.html" target="_blank" rel="external">linkextractors库</a>,这个库的作用是会根据提供的限制，自动爬取和深入每一个页面并且提取需要的链接，如果想要找到每一个分类的url,只需<code>Rule(LinkExtractor(allow=&#39;/tag/&#39;,restrict_xpaths=&quot;//div[@class=&#39;article&#39;]&quot;),follow=True),</code>这里的allow是一个<code>正则表达式</code>，用来筛选分类url,<code>restrict_xpaths</code>是限制在哪个结构中筛选url,这里限制的是在<code>&lt;div class=&#39;article&#39;&gt;</code>这个盒模型中，<code>follow</code>表示是否深入，这里当然是要深入,这里就能得到每一个分类url了，自己可以在<code>回调函数</code>中测试下，输入所得的url,可以使用<code>respose.url</code></p>
<p>得到所有的分类url，就可以继续深入到每一步作品所在的页面了，如下图!</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/3.bmp" alt="作品网页"><br>但是我们需要不止是这一页，我们要爬的时全站，因此这里必须实现翻页，我们可以看到页面底部清楚的写着下一页，我们通过解析页面同样可以得到url,如下图所示</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/6.bmp" alt="翻页url"><br>可以看到所有的url的规则，我们就可以用正则表达式限制，以获取我们的需要，我们可以写出翻页的代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rule(LinkExtractor(allow=<span class="string">"\?start=\d+\&amp;type="</span>,restrict_xpaths=<span class="string">"//div[@class='pa&gt;ginator']"</span>),follow=<span class="keyword">True</span>),</div></pre></td></tr></table></figure>
<blockquote>
<p>最后一步就是打开每一部书的网页得到所需的信息了，我们就可以通过这里通过解析网页还是可以很清楚的知道url,这里就不再详细的说怎么解析了，这里可以看到所有的url都在<code>li</code>标签中，如下图</p>
<blockquote>
<p><img src="http://ono60m7tl.bkt.clouddn.com/4.bmp" alt="url"></p>
</blockquote>
<p>我们打开<code>li</code>标签可以很清楚的看大url的规律，因此这里还是用到上面说的库解析深入，连同上面的代码如下</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Rule(LinkExtractor(allow=<span class="string">'/tag/'</span>,restrict_xpaths=<span class="string">"/ /div[@class='article']"</span>),follow=<span class="keyword">True</span>),<span class="comment">#第一步</span></div><div class="line">Rule(LinkExtractor(allow=<span class="string">"\?start=\d+\&amp;type="</span>,restrict_xpaths=<span class="string">"//div[@class='pa&gt;ginator']"</span>),follow=<span class="keyword">True</span>),  <span class="comment">#第二步翻翻页</span></div><div class="line">Rule(LinkExtractor(allow=<span class="string">"/subject/\d+/$"</span>,restrict_&gt;xpaths=<span class="string">"//ul[@class='subject-list']"</span>),callback=<span class="string">'parse_item'</span>)<span class="comment">#得到所需网页的url</span></div></pre></td></tr></table></figure>
<blockquote>
<p>到了这里总算是大功告成了，下面就需要解析自己的所需要的信息了,这里附上网页</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/5.bmp" alt="图片"><br>下面就是写自己解析代码了，这里就不需要详细的说了，详细内容请看<a href="https://github.com/chenjiabing666/douban_book_spider" target="_blank" rel="external">源码</a>,值得注意的是爬取的网页速度不要太快，豆瓣会禁IP的，这里可以采用一些反爬虫措施,如请求头的更换，ip地址的更换，下一篇会详细解说。</p>
</blockquote>
<h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><blockquote>
<p><strong><a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html#" target="_blank" rel="external">scrapy中文文档</a></strong></p>
<p><strong>最后附上本人的<a href="https://github.com/chenjiabing666" target="_blank" rel="external">github地址</a>,不要忘了给个star哦</strong></p>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scrapy爬取豆瓣读书全站&quot;&gt;&lt;a href=&quot;#Scrapy爬取豆瓣读书全站&quot; class=&quot;headerlink&quot; title=&quot;Scrapy爬取豆瓣读书全站&quot;&gt;&lt;/a&gt;Scrapy爬取豆瓣读书全站&lt;/h1&gt;&lt;h2 id=&quot;分析网页&quot;&gt;&lt;a href=&quot;#分
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>SQL干货篇一</title>
    <link href="http://chenjiabing666.github.io/2017/04/06/SQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://chenjiabing666.github.io/2017/04/06/SQL基本操作/</id>
    <published>2017-04-06T14:33:37.000Z</published>
    <updated>2017-04-06T14:47:15.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL系列之基本操作"><a href="#SQL系列之基本操作" class="headerlink" title="SQL系列之基本操作"></a>SQL系列之基本操作</h1><h2 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h2><blockquote>
<p><strong>CREATE TABLE <name><br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]],<br>[&lt;列名&gt;&lt;数据类型&gt;[表级完整性约束条件]]……</name></strong></p>
<p><strong>实例</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(Sno <span class="built_in">CHAR</span>(<span class="number">9</span>) PRIMARY <span class="keyword">KEY</span>,</div><div class="line">Sname <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</div><div class="line">Ssex <span class="built_in">CHAR</span>(<span class="number">2</span>),</div><div class="line">Sage <span class="built_in">SMALLINT</span>,</div><div class="line">Sdept <span class="built_in">CHAR</span>(<span class="number">20</span>));</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>其中<code>student</code>是表名，<code>Sno</code>,<code>Sname</code>,<code>Ssex</code>,<code>Sage</code>,<code>Sdept</code>都是列名，后面的<code>CHAR</code>都是数据类型,这里的<code>PRIMARY KEY</code>是将<code>Sno</code>定义为主键,<code>UNIQUE</code>是将<code>Sname</code>定义为唯一的也就是后面插入数据的时候不能有重复的名字</strong></p>
<p><strong>拓展</strong>：主键的定义是在多个候选码中找出那个能够唯一识别一组数据的列名，如果需要两个列名才能识别一组数据，那么可以将这两个列名都定义为主键：<code>PRIMARY KEY(Sno,Sname)</code></p>
</blockquote>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><blockquote>
<ul>
<li><code>DROP TABLE NAME;</code>只能删除没有被其他表引用，或者没有建立视图的，这里的引用可以是作为被参照表或者作为参照表</li>
<li><code>DROP TABLE NAME CASCADE</code>;将全部删除，包括基本表和视图</li>
</ul>
</blockquote>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><blockquote>
<h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a><strong>添加列</strong></h3><blockquote>
<p><strong><code>alter table 表名 add 列名 列数据类型 [after 插入位置]</code></strong></p>
</blockquote>
<p><strong>例子</strong></p>
<blockquote>
<ul>
<li><code>alter table student add grade smallint;</code> //将grade插入到student表中的末尾一列，这里不加after默认的是在末尾添加</li>
<li><code>alter table studnet add grade smallint after Sname;</code> //这里将grade插入到表中Sname列的后面</li>
</ul>
</blockquote>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p><strong><code>alter table 表名 drop 列名</code></strong></p>
<p><code>alter table student drop Sname</code>;   //输出Sname那一列</p>
<h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><p><strong><code>alter table 表名 change 列名称 列新名称 新数据类型;</code></strong></p>
<p><strong>实例</strong></p>
<ul>
<li>alter table student change Sname name char(10) not null;    //修改列名Sname为name,并且还可以修改其中的数据类型，如果想要保持不变，就保持原型。</li>
</ul>
<h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p><strong><code>alter table 表名 rename 新表名;</code></strong></p>
<p><strong>实例：</strong><br><code>alter table student rename STUDENT;</code>   //将表名改为STUDENT </p>
</blockquote>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><blockquote>
<p><strong><code>INSERT INTO table_name(列名,列名，列名....)VALUES(DATA);</code></strong>   //这里的data一定要对应每一列的数据类型，当然如果要想要插入所有的数据，就不需要列出所有的列名了</p>
<p><strong>例子:</strong></p>
<blockquote>
<ul>
<li><code>INSERT INTO student(Sno,Sname,Sage,Ssex)values(&#39;201215124&#39;,&#39;jack&#39;,34,&#39;男&#39;);</code>   //这里是插入表中的一些列的数据，并且对应了数据类型</li>
<li><code>INSERT INTO student values(&#39;201215124&#39;,&#39;男&#39;,&#39;jack&#39;,34,&#39;IS&#39;);</code>     //这里是按照表中的列名顺序插入数据的</li>
</ul>
</blockquote>
</blockquote>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><blockquote>
<p><strong><code>update 表名称 set 列名称=新值 where 更新条件;</code></strong></p>
<p><strong>实例：</strong></p>
<blockquote>
<ul>
<li><code>update student set Sage=Sage+1 where Sno=&#39;12134&#39;;</code>          //将Sno为12134的那一列数据的年龄加一</li>
</ul>
</blockquote>
</blockquote>
<h2 id="删除表中的数据"><a href="#删除表中的数据" class="headerlink" title="删除表中的数据"></a>删除表中的数据</h2><blockquote>
<p><strong><code>delete from 表名称 where 删除条件;</code></strong></p>
<p><strong>实例：</strong></p>
<blockquote>
<ul>
<li>delete from student where Sno=’121314125’;                //删除Sno为121314125的那一行数据</li>
</ul>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQL系列之基本操作&quot;&gt;&lt;a href=&quot;#SQL系列之基本操作&quot; class=&quot;headerlink&quot; title=&quot;SQL系列之基本操作&quot;&gt;&lt;/a&gt;SQL系列之基本操作&lt;/h1&gt;&lt;h2 id=&quot;新建表&quot;&gt;&lt;a href=&quot;#新建表&quot; class=&quot;header
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>swing布局管理器</title>
    <link href="http://chenjiabing666.github.io/2017/04/05/java%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2017/04/05/java布局管理器/</id>
    <published>2017-04-05T15:06:08.000Z</published>
    <updated>2017-04-06T11:42:07.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swing系列之布局管理器"><a href="#Swing系列之布局管理器" class="headerlink" title="Swing系列之布局管理器"></a>Swing系列之布局管理器</h1><h2 id="流布局-FlowLayout-默认的JApplet-JPanel-JScrollPane"><a href="#流布局-FlowLayout-默认的JApplet-JPanel-JScrollPane" class="headerlink" title="流布局(FlowLayout)默认的JApplet,JPanel,JScrollPane"></a>流布局(<code>FlowLayout</code>)默认的<code>JApplet</code>,<code>JPanel</code>,<code>JScrollPane</code></h2><blockquote>
<p>流布局是相对比较简单的一种布局管理器，也是最常用的布局管理器。在流布局中放置控件时，将按照控件的添加顺序，依次将控件从左到右进行摆放，并且在一行的最后会进行自动换行放置 。在一行中，控件是默认<strong>居中</strong>放置的。</p>
<p>布局管理器也是通过构造器来创建的。流布局是通过FlowLayout 类来创建，FlowLayout类具有三种构造器。首先是无参构造器， 使用无参构造器能够创建一个默认的以居中对齐方式，控件间水 平和垂直间距为5个像素的流布局。</p>
<p>FlowLayout类还具有一个需要整型参数的构造器，使用该构造器能够创建一个指定对齐方式的流布局管理器，它的控件间水平和垂直间距仍然是默认的5个像素。流布局管理器的对齐方式如下所示。</p>
<ul>
<li><code>LEFT</code>    左对齐方式</li>
<li><code>CENTER</code>    居中对齐方式</li>
<li><code>RIGHT</code>    右对齐方式</li>
<li><code>LEADING</code>    控件与容器开始边对齐</li>
<li><code>TRAILING</code>    </li>
</ul>
<p><strong>构造函数：</strong></p>
<ol>
<li><code>FlowLayout()</code>,生成一个默认的FlowLayout布局。默认情况下，组件居中，间隙为5个像素。</li>
<li><code>FlowLayout(int aligment)</code>,设定每珩的组件的对齐方式。<code>alignment</code>取值可以为<code>FlowLayout.LEFT</code>,<code>FlowLayout.CENTER</code>,<code>FlowLayout.RIGHT</code>。</li>
<li><code>FlowLayout(int aligment,int horz, int vert)</code>,设定对齐方式，并设定组件的水平间距horz和垂直间距vert，用超类Container的方法<code>setLayout()</code>为容器设定布局。例如，代码<code>setLayout(new FlowLayout())</code>为容器设定 FlowLayout布局。将组件加入容器的方法是add(组件名)。</li>
</ol>
<p><strong>常用的函数：</strong><br><strong><code>getAlignment</code>方法和<code>setAlignment</code>方法分别获取和设置流布局管理器的对齐方式。 <code>getHgap</code>方法和<code>setHgap</code>方法分别获取和设置流布局管理器中控件和控件之间的水平间距。getVgap方法和<code>setVgap</code>方法分别获取和 设置流布局管理器中控件和控件之间的垂直间距。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Chenjiabing on 2017/4/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuJu</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        JFrame frame=<span class="keyword">new</span> JFrame();</div><div class="line">        FlowLayout flowLayout=<span class="keyword">new</span> FlowLayout(FlowLayout.LEFT);</div><div class="line">        JPanel panel=<span class="keyword">new</span> JPanel(flowLayout);</div><div class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">400</span>);</div><div class="line">        flowLayout.setHgap(<span class="number">20</span>);  <span class="comment">//设置水平间距</span></div><div class="line">        flowLayout.setVgap(<span class="number">20</span>); <span class="comment">//控件之间的垂直间距</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</div><div class="line">        &#123;</div><div class="line">            JButton button=<span class="keyword">new</span> JButton(<span class="string">"按钮"</span>);</div><div class="line">            panel.add(button);</div><div class="line">        &#125;</div><div class="line">        frame.getContentPane().add(panel);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="网格布局-GridLayout"><a href="#网格布局-GridLayout" class="headerlink" title="网格布局(GridLayout)"></a>网格布局(<code>GridLayout</code>)</h2><blockquote>
<ul>
<li><p>网络布局也是一种比较常见的布局管理器。使用网格布局管理器后，会将所有的控件尽量按照给出的行数和列数来排列，同时网格布局管理器也会对控件进行尺寸的调整，使所有的控件具有相同的尺寸。在网格布局中，也会尽量使使用的空间成矩形的形式来显示。当窗体发生大小变化时，所有的空间也将自动改变大小来填充窗体。</p>
</li>
<li><p>网格布局是通过<code>GridLayout</code>类来创建的。GridLayout类具有三个构造器，使用无参构造器将创建具有默认行和默认列的网格布局。在创建网格布局管理器时最常用的就是具有两个整型参数的构造器，第一个参数表示网格布局管理器的行数，第二个参数表示网格布局管理器的列数。还有一个具有四个参数的构造器，除了可以定义行数和列数外，还可以定义控件间水平间距和垂直间距。</p>
</li>
<li><p><code>GridLayout</code>类中还定义了一些方法来对创建的网格布局进行操作 。<code>getRows</code>方法和<code>setRows</code>方法分别是获取和设置网格布局的行数。<code>getColumns</code>方法和<code>setColumns</code>方法分别是获取和设置网格布局 的列数。<code>getHgap</code>方法和<code>setHgap</code>方法分别是获取和设置网格布局 中控件间水平间距。<code>getVgap</code>方法和<code>setVgap</code>方法分别是获取和设 置网络布局中的控件间垂直间距。</p>
</li>
</ul>
<p><strong>构造函数：</strong></p>
<ol>
<li><code>GridLayout()</code>,生成一个单列的GridLayout布局。默认情况下，无间隙。<br>1.<code>GridLayout(int row,int col)</code>,设定一个有行<code>row</code>和列`col的GridLayout布局。</li>
<li>GridLayout(int row,int col,int horz,int vert),设定布局的行数和列数、组件的水平间距和垂直间距</li>
</ol>
<p><strong>代码大概和上面的设置一样，这里注意的是，网格布局是以行为基准的，如果定义的控件多了或者少了，不会改变行的数量，会根据情况改变列的数量</strong></p>
</blockquote>
<h2 id="边框布局-BorderLayout-默认的是JWindow、JFrame-JDialog"><a href="#边框布局-BorderLayout-默认的是JWindow、JFrame-JDialog" class="headerlink" title="边框布局(BorderLayout)默认的是JWindow、JFrame,JDialog"></a>边框布局(BorderLayout)默认的是<code>JWindow</code>、<code>JFrame</code>,<code>JDialog</code></h2><blockquote>
<ul>
<li><p>上面学习的流布局和网格布局具有很多相似的地方，但是边框布局就和他们存在很大的不同。在使用边框布局时，通常都会由程序员来为控件指定在容器中的位置。边框布局将容器分为五个部分，包括东南西北中五部分。在每一个部分中只能放置一个控件 ，所以如果控件超过五个将不能完全显示。在使用边框布局时需 要注意的是，当容器的大小发生变化时，四周的控件是不会发生变化的，只有中间的控件将发生变化。</p>
</li>
<li><p>边框布局是通过BorderLayout类创建的。BorderLayout类具有两个构造器，一个是无参构造器，另一个是指定控件间间距的构造器，通常使用无参构造器来创建边框布局管理器。</p>
</li>
<li><p>在前面将控件添加到容器中都是通过add方法，将控件作为add方法的参 数来进行添加的。但是在向边框布局容器中添加控件时，这样是不完全 的。在向边框布局容器中添加控件是使用具有两个参数的add方法。其中 第一个参数表示要添加的控件，第二个参数表示要添加到边框布局中的 哪一个位置。边框布局的位置表示是通过常量来表示的，具体常量如下所示</p>
</li>
</ul>
<blockquote>
<ul>
<li><code>NORTH</code>    容器顶部</li>
<li><code>SOUTH</code>    容器底部</li>
<li><code>WEST</code>    容器左边</li>
<li><code>EAST</code>    容器右边</li>
<li><code>CENTER</code>    容器的中央</li>
</ul>
</blockquote>
<p><strong>构造函数：</strong></p>
<ol>
<li><code>BorderLayout()</code>,生成一个默认的<code>BorderLayout</code>布局。默认情况下，没有间隙。</li>
<li><code>BorderLayout(int horz,int vert)</code>,设定组件之间的水平间距和垂直间距。</li>
</ol>
<p><strong>注意这里还有一些常用的方法，就是设置水平和垂直的间距，上面已经赘述过了，这里就不再详说了</strong></p>
</blockquote>
<h2 id="空布局-null"><a href="#空布局-null" class="headerlink" title="空布局(null)"></a>空布局(<code>null</code>)</h2><blockquote>
<p>空布局就是没有使用布局管理器，在空布局的情况下将根据控件的自身信息来为控件指定位置。这就使得控件的布局更加灵活，与此同时给开发人员带来了更大的工作量。</p>
</blockquote>
<p>空布局是不需要使用类来创建的，只需要在程序指定布局管理器 为null。将控件添加到空布局容器中时，仍然是使用<code>add</code>方法。因 为这里使用的是空布局管理器，所以在添加控件之前，要对控件 进行设置操作。设置操作是通过setBounds方法来完成的， setBounds方法的基本语法格式如下所示。</p>
<blockquote>
<p><code>public void setBounds(int x,int y,int width,int height);</code></p>
<p>其中x和y表示的是控件最左上侧的坐标，从而也固定了该控件的 位置。<code>width</code>和<code>height</code>表示的是空间的宽度和高度，从而也指定了<br>控件的大小。</p>
<p><strong>示例代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;frame.setLayout(<span class="keyword">null</span>);<span class="comment">//布局管理器设置为null</span></div><div class="line">    JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"First Name:"</span>);</div><div class="line">    label.setBounds(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">20</span>);<span class="comment">//四个参数分别是x,y坐标和label的宽和高</span></div><div class="line">    JTextField textField = <span class="keyword">new</span> JTextField();</div><div class="line">    textField.setBounds(<span class="number">124</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">20</span>);</div><div class="line">    frame.add(label);</div><div class="line">    frame.add(textField);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="BoxLayout"><a href="#BoxLayout" class="headerlink" title="BoxLayout"></a>BoxLayout</h2><blockquote>
<p><code>BoxLayout</code>是一种能够实现所有的控件水平放置和垂直放置，因为用到的不多，这里就简单的说一下<br><strong>构造函数</strong>：<code>public BoxLayout(Container target,int axis)</code>:其中<code>axis</code>表示放置的样式，主要有两种常用到的:</p>
<ul>
<li><code>X_AXIS</code>:指定组件应该从左到右放置。</li>
<li><code>Y_AXIS</code>：指定组件从上到下放置</li>
</ul>
<p><strong>代码</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> oracle.jrockit.jfr.JFR;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuJu</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        JFrame frame = <span class="keyword">new</span> JFrame();</div><div class="line">        <span class="comment">// frame.setLayout(new BorderLayout(frame.getComponentCount(),BoxLayout.Y_AXIS));</span></div><div class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</div><div class="line">        BoxLayout boxLayout = <span class="keyword">new</span> BoxLayout(panel, BoxLayout.X_AXIS);</div><div class="line">        panel.setLayout(boxLayout);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            JButton button = <span class="keyword">new</span> JButton(<span class="string">"cma"</span>);</div><div class="line">            panel.add(button);</div><div class="line">        &#125;</div><div class="line">        frame.getContentPane().add(panel, BorderLayout.CENTER);</div><div class="line">        <span class="comment">// System.out.println(boxLayout.getTarget());</span></div><div class="line">        frame.pack();</div><div class="line">        <span class="comment">//frame.setSize(300,200);</span></div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swing系列之布局管理器&quot;&gt;&lt;a href=&quot;#Swing系列之布局管理器&quot; class=&quot;headerlink&quot; title=&quot;Swing系列之布局管理器&quot;&gt;&lt;/a&gt;Swing系列之布局管理器&lt;/h1&gt;&lt;h2 id=&quot;流布局-FlowLayout-默认的JAp
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="swing" scheme="http://chenjiabing666.github.io/tags/swing/"/>
    
  </entry>
  
  <entry>
    <title>java图像处理干货篇一</title>
    <link href="http://chenjiabing666.github.io/2017/04/04/java%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    <id>http://chenjiabing666.github.io/2017/04/04/java图像处理干货篇/</id>
    <published>2017-04-04T12:17:07.000Z</published>
    <updated>2017-04-09T07:04:17.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java图像处理干货篇"><a href="#java图像处理干货篇" class="headerlink" title="java图像处理干货篇"></a>java图像处理干货篇</h1><h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2><blockquote>
<p>绘制图像主要用到的是Graphics类中drawImage方法，当然Graphics2D中也有相应的方法</p>
<blockquote>
<p>主要的用法：</p>
<ul>
<li><code>public abstract boolean drawImage(Image img,x,y,ImageObserver observer)</code>:img是<code>Image</code>对象，x,y起始坐标,<code>observer</code>是观察对象</li>
<li><code>drawImage(Image img,int x,int y,int width,int height,Imageobersver observer)</code>:<code>width</code>和<code>height</code>是指定图像的宽度和高度，主要的作用是放大和缩小图像</li>
<li><code>drawImage(Image img,int dx1,int dy1,int dx2,int dx2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer)</code>:主要用来翻转图形,通过互换源矩形的第一个和第二个角的x坐标可以实现水平翻转，通过互换源矩形的第一个和第二个角的y坐标可以实现垂直翻转</li>
</ul>
</blockquote>
</blockquote>
<h2 id="翻转图像"><a href="#翻转图像" class="headerlink" title="翻转图像"></a>翻转图像</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zzk;</div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.Image;</div><div class="line"><span class="keyword">import</span> java.awt.Toolkit;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartImageFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Image img = <span class="keyword">null</span>;  <span class="comment">// 声明图像对象</span></div><div class="line">    <span class="keyword">private</span> PartImagePanel imagePanel = <span class="keyword">null</span>;  <span class="comment">// 声明图像面板对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dx1, dy1, dx2, dy2;   <span class="comment">// 目标矩形第一个角与第二个角的X、Y坐标</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sx1, sy1, sx2, sy2;   <span class="comment">// 源矩形第一个角与第二个角的X、Y坐标</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        PartImageFrame frame = <span class="keyword">new</span> PartImageFrame();</div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PartImageFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        URL imgUrl = PartImageFrame.class.getResource(<span class="string">"/img/image.jpg"</span>);<span class="comment">// 获取图片资源的路径</span></div><div class="line">        img = Toolkit.getDefaultToolkit().getImage(imgUrl); <span class="comment">// 获取图像资源</span></div><div class="line">        dx2 = sx2 = <span class="number">340</span>; <span class="comment">// 初始化图像大小</span></div><div class="line">        dy2 = sy2 = <span class="number">200</span>; <span class="comment">// 初始化图像大小</span></div><div class="line">        imagePanel = <span class="keyword">new</span> PartImagePanel();  <span class="comment">// 创建图像面板对象</span></div><div class="line">        <span class="keyword">this</span>.setBounds(<span class="number">200</span>, <span class="number">160</span>, <span class="number">355</span>, <span class="number">276</span>); <span class="comment">// 设置窗体大小和位置</span></div><div class="line">        <span class="keyword">this</span>.add(imagePanel); <span class="comment">// 在窗体中部位置添加图像面板对象</span></div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class="comment">// 设置窗体关闭模式</span></div><div class="line">        <span class="keyword">this</span>.setTitle(<span class="string">"翻转图像"</span>); <span class="comment">// 设置窗体标题</span></div><div class="line">        <span class="keyword">final</span> JPanel panel = <span class="keyword">new</span> JPanel();</div><div class="line">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class="line">        <span class="keyword">final</span> JButton btn_h = <span class="keyword">new</span> JButton();</div><div class="line">        btn_h.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                <span class="comment">// 下面3行代码用于交换sx1和sx2的值</span></div><div class="line">                <span class="keyword">int</span> x = sx1;</div><div class="line">                sx1 = sx2;</div><div class="line">                sx2 = x;</div><div class="line">                imagePanel.repaint();  <span class="comment">// 重新调用面板类的paint()方法</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        btn_h.setText(<span class="string">"水平翻转"</span>);</div><div class="line">        panel.add(btn_h);</div><div class="line">        <span class="keyword">final</span> JButton btn_v = <span class="keyword">new</span> JButton();</div><div class="line">        btn_v.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                <span class="comment">// 下面3行代码用于交换sy1和sy2的值</span></div><div class="line">                <span class="keyword">int</span> y = sy1;</div><div class="line">                sy1 = sy2;</div><div class="line">                sy2 = y;</div><div class="line">                imagePanel.repaint();<span class="comment">// 重新调用面板类的paint()方法</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        btn_v.setText(<span class="string">"垂直翻转"</span>);</div><div class="line">        panel.add(btn_v);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 创建面板类</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PartImagePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">            g.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.getWidth(), <span class="keyword">this</span>.getHeight());<span class="comment">// 清除绘图上下文的内容</span></div><div class="line">            g.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, <span class="keyword">this</span>);<span class="comment">// 绘制图像</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h2><blockquote>
<p>主要用到的是<code>Graphics2D</code>类中的<code>rotate</code>函数，定义如下:<code>public abstract void rotate(double theta)</code>: <code>theta</code>是角度，以弧度为单位<br><strong>代码如下</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.zzk;</div><div class="line">import java.awt.*;</div><div class="line">import java.net.URL;</div><div class="line">import javax.swing.*;</div><div class="line">public class RotateImageFrame extends JFrame &#123;</div><div class="line">    private Image img = null;</div><div class="line">    private RotatePanel rotatePanel = null;</div><div class="line">    public RotateImageFrame() &#123;</div><div class="line">        URL imgUrl = RotateImageFrame.class.getResource(&quot;/img/image.jpg&quot;);// 获取图片资源的路径</div><div class="line">        img = Toolkit.getDefaultToolkit().getImage(imgUrl);   // 获取图片资源</div><div class="line">        rotatePanel = new RotatePanel();  // 创建旋转图像的面板对象</div><div class="line">        this.setBounds(150, 120, 380, 310);                 // 设置窗体大小和位置</div><div class="line">        add(rotatePanel);// 在窗体上放置图像面板</div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // 设置窗体关闭模式</div><div class="line">        this.setTitle(&quot;旋转图像&quot;);                     // 设置窗体标题</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        new RotateImageFrame().setVisible(true);</div><div class="line">    &#125;</div><div class="line">    class RotatePanel extends JPanel &#123;</div><div class="line">        public void paint(Graphics g) &#123;</div><div class="line">            Graphics2D g2 = (Graphics2D) g;         // 获得Graphics2D对象</div><div class="line">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class="line">            g2.rotate(Math.toRadians(10));                 // 将图片旋转10度</div><div class="line">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class="line">            g2.rotate(Math.toRadians(10));                // 将图片旋转10度</div><div class="line">            g2.drawImage(img, 80, 10, 260, 150, this);      // 绘制指定大小的图片</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="倾斜图像"><a href="#倾斜图像" class="headerlink" title="倾斜图像"></a>倾斜图像</h2><blockquote>
<p>主要用到的是<code>Graphics2D</code>中的<code>shear</code>函数定义如：<code>public abstract void shear(doubel shx,double shy)</code>:<code>shx</code>是在正x轴上移动坐标的乘数，它可以作为其纵坐标的值,shy是在正y轴方形移动坐标的乘数，它可以作为其x坐标的函数。<br><strong>本人的理解：<br>倾斜画布，如果shx&gt;0就是向正方向平移，平移的长度为shx*height(图形纵坐标的值，如果是矩形就是乘以矩形的高)<br>相同的对于shy是乘以矩形宽</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zzk;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShearImageFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Image img;</div><div class="line">	<span class="keyword">private</span> ShearImagePanel canvasPanel = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ShearImageFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        URL imgUrl = ShearImageFrame.class.getResource(<span class="string">"/img/image.jpg"</span>);<span class="comment">// 获取图片资源的路径</span></div><div class="line">        img = Toolkit.getDefaultToolkit().getImage(imgUrl);  <span class="comment">// 获取图片资源</span></div><div class="line">        canvasPanel = <span class="keyword">new</span> ShearImagePanel();     <span class="comment">// 创建绘制倾斜图像的面板对象</span></div><div class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">360</span>, <span class="number">240</span>);                <span class="comment">// 设置窗体大小和位置</span></div><div class="line">        add(canvasPanel);<span class="comment">// 在窗体上添加面板对象</span></div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class="comment">// 设置窗体关闭模式</span></div><div class="line">        <span class="keyword">this</span>.setTitle(<span class="string">"倾斜图像"</span>);                    <span class="comment">// 设置窗体标题</span></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">new</span> ShearImageFrame().setVisible(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">ShearImagePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;<span class="comment">// 绘制倾斜图像的面板类</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">			Graphics2D g2=(Graphics2D) g;<span class="comment">// 获得Graphics2D对象</span></div><div class="line">			g2.shear(<span class="number">0</span>, -<span class="number">0.5</span>);<span class="comment">// 倾斜图像</span></div><div class="line">			g2.drawImage(img, <span class="number">10</span>, <span class="number">20</span>, <span class="number">220</span>, <span class="number">160</span>, <span class="keyword">this</span>);     <span class="comment">// 绘制指定大小的图片</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="裁剪图片"><a href="#裁剪图片" class="headerlink" title="裁剪图片"></a>裁剪图片</h2><blockquote>
<p><code>public BufferedImage createScreenCapture(Rectangle screenRect)</code>:返回的是一个BufferedImage对象，参数是Rectangle对象，这个函数是Robot类中的，主要用于裁剪图形</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zzk;</div><div class="line"><span class="keyword">import</span> java.awt.AWTException;</div><div class="line"><span class="keyword">import</span> java.awt.BasicStroke;</div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics2D;</div><div class="line"><span class="keyword">import</span> java.awt.Image;</div><div class="line"><span class="keyword">import</span> java.awt.Rectangle;</div><div class="line"><span class="keyword">import</span> java.awt.Robot;</div><div class="line"><span class="keyword">import</span> java.awt.Toolkit;</div><div class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.MouseMotionAdapter;</div><div class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">import</span> javax.swing.JSplitPane;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CutImageFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Image img = <span class="keyword">null</span>; <span class="comment">// 声明图像对象</span></div><div class="line">    <span class="keyword">private</span> OldImagePanel oldImagePanel = <span class="keyword">null</span>; <span class="comment">// 声明图像面板对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pressPanelX = <span class="number">0</span>, pressPanelY = <span class="number">0</span>;<span class="comment">// 鼠标按下点的X、Y坐标 </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pressX = <span class="number">0</span>, pressY = <span class="number">0</span>;<span class="comment">// 鼠标按下点在屏幕上的X、Y坐标</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> releaseX = <span class="number">0</span>, releaseY = <span class="number">0</span>;<span class="comment">// 鼠标释放点在屏幕上的X、Y坐标</span></div><div class="line">    <span class="keyword">private</span> Robot robot = <span class="keyword">null</span>;  <span class="comment">// 声明Robot对象</span></div><div class="line">    <span class="keyword">private</span> BufferedImage buffImage = <span class="keyword">null</span>; <span class="comment">// 声明缓冲图像对象</span></div><div class="line">    <span class="keyword">private</span> CutImagePanel cutImagePanel = <span class="keyword">new</span> CutImagePanel(); <span class="comment">// 创建绘制裁剪结果的面板</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;  <span class="comment">// 声明标记变量，为true时显示选择区域的矩形，否则不显示</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        CutImageFrame frame = <span class="keyword">new</span> CutImageFrame();</div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CutImageFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        URL imgUrl = CutImageFrame.class.getResource(<span class="string">"/img/image.jpg"</span>);<span class="comment">// 获取图片资源的路径</span></div><div class="line">        img = Toolkit.getDefaultToolkit().getImage(imgUrl); <span class="comment">// 获取图像资源</span></div><div class="line">        oldImagePanel = <span class="keyword">new</span> OldImagePanel(); <span class="comment">// 创建图像面板对象</span></div><div class="line">        <span class="keyword">this</span>.setBounds(<span class="number">200</span>, <span class="number">160</span>, <span class="number">355</span>, <span class="number">276</span>); <span class="comment">// 设置窗体大小和位置</span></div><div class="line">        <span class="keyword">final</span> JSplitPane splitPane = <span class="keyword">new</span> JSplitPane();</div><div class="line">        splitPane.setDividerLocation((<span class="keyword">this</span>.getWidth() / <span class="number">2</span>) - <span class="number">10</span>);</div><div class="line">        getContentPane().add(splitPane, BorderLayout.CENTER);</div><div class="line">        splitPane.setLeftComponent(oldImagePanel);</div><div class="line">        splitPane.setRightComponent(cutImagePanel);</div><div class="line">        oldImagePanel.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(<span class="keyword">final</span> MouseEvent e)</span> </span>&#123;  <span class="comment">// 鼠标键按下事件</span></div><div class="line">                pressPanelX = e.getX(); <span class="comment">// 获得鼠标按下点的X坐标 </span></div><div class="line">                pressPanelY = e.getY();<span class="comment">// 获得鼠标按下点的Y坐标 </span></div><div class="line">                pressX = e.getXOnScreen() + <span class="number">1</span>;<span class="comment">// 鼠标按下点在屏幕上的X坐标加1，即去除选择线</span></div><div class="line">                pressY = e.getYOnScreen() + <span class="number">1</span>;<span class="comment">// 鼠标按下点在屏幕上的Y坐标加1，即去除选择线</span></div><div class="line">                flag = <span class="keyword">true</span>;<span class="comment">// 为标记变量赋值为true</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(<span class="keyword">final</span> MouseEvent e)</span> </span>&#123; <span class="comment">// 鼠标键释放事件</span></div><div class="line">                releaseX = e.getXOnScreen() - <span class="number">1</span>;<span class="comment">// 鼠标释放点在屏幕上的X坐标减1，即去除选择线</span></div><div class="line">                    releaseY = e.getYOnScreen() - <span class="number">1</span>;<span class="comment">// 鼠标释放点在屏幕上的Y坐标减1，即去除选择线</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                    robot = <span class="keyword">new</span> Robot();<span class="comment">// 创建Robot对象</span></div><div class="line">                    <span class="keyword">if</span> (releaseX - pressX &gt; <span class="number">0</span> &amp;&amp; releaseY - pressY &gt; <span class="number">0</span>) &#123;</div><div class="line">                        Rectangle rect = <span class="keyword">new</span> Rectangle(pressX, pressY, releaseX</div><div class="line">                                - pressX, releaseY - pressY);<span class="comment">// 创建Rectangle对象</span></div><div class="line">                        buffImage = robot.createScreenCapture(rect);<span class="comment">// 获得缓冲图像对象</span></div><div class="line">                        cutImagePanel.repaint(); <span class="comment">// 调用CutImagePanel面板的paint()方法</span></div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (AWTException e1) &#123;</div><div class="line">                    e1.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                flag = <span class="keyword">false</span>;<span class="comment">// 为标记变量赋值为false</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        oldImagePanel.addMouseMotionListener(<span class="keyword">new</span> MouseMotionAdapter() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(<span class="keyword">final</span> MouseEvent e)</span> </span>&#123;<span class="comment">// 鼠标拖动事件</span></div><div class="line">                <span class="keyword">if</span> (flag) &#123;</div><div class="line">                    releaseX = e.getXOnScreen();<span class="comment">// 获得鼠标释放点在屏幕上的X坐标</span></div><div class="line">                    releaseY = e.getYOnScreen();<span class="comment">// 获得鼠标释放点在屏幕上的Y坐标</span></div><div class="line">                    oldImagePanel.repaint();<span class="comment">// 调用OldImagePanel面板的paint()方法</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class="comment">// 设置窗体关闭模式</span></div><div class="line">        <span class="keyword">this</span>.setTitle(<span class="string">"裁剪图片"</span>); <span class="comment">// 设置窗体标题</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OldImagePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;<span class="comment">// 创建绘制原图像的面板类</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">            Graphics2D g2 = (Graphics2D) g;</div><div class="line">            g2.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.getWidth(), <span class="keyword">this</span>.getHeight(), <span class="keyword">this</span>);<span class="comment">// 绘制图像</span></div><div class="line">            g2.setColor(Color.WHITE);</div><div class="line">            <span class="keyword">if</span> (flag) &#123;</div><div class="line">                <span class="keyword">float</span>[] arr = &#123;<span class="number">5.0f</span>&#125;; <span class="comment">// 创建虚线模式的数组</span></div><div class="line">                BasicStroke stroke = <span class="keyword">new</span> BasicStroke(<span class="number">1</span>, BasicStroke.CAP_BUTT,</div><div class="line">                        BasicStroke.JOIN_BEVEL, <span class="number">1.0f</span>, arr, <span class="number">0</span>); <span class="comment">// 创建宽度是1的平头虚线笔画对象</span></div><div class="line">                g2.setStroke(stroke);<span class="comment">// 设置笔画对象</span></div><div class="line">                g2.drawRect(pressPanelX, pressPanelY, releaseX - pressX,</div><div class="line">                        releaseY - pressY);<span class="comment">// 绘制矩形选区</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CutImagePanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;<span class="comment">// 创建绘制裁剪结果的面板类</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">            g.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.getWidth(), <span class="keyword">this</span>.getHeight());<span class="comment">// 清除绘图上下文的内容</span></div><div class="line">            g.drawImage(buffImage, <span class="number">0</span>, <span class="number">0</span>, releaseX - pressX, releaseY - pressY,</div><div class="line">                    <span class="keyword">this</span>);<span class="comment">// 绘制图像</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="调整图片的亮度"><a href="#调整图片的亮度" class="headerlink" title="调整图片的亮度"></a>调整图片的亮度</h2><blockquote>
<p><code>RescaleOp</code>类中的<code>filter</code>方法原缓冲图像进行重缩放，定义如下<br><code>public abstract BufferedImage filter(BufferedImage src,BufferedImage dst)</code>:src是要过滤的源对象，dst是目标对象，或则为null</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zzk;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.Image;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</div><div class="line"><span class="keyword">import</span> java.awt.image.RescaleOp;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageBrightenFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> BufferedImage image;<span class="comment">// 用于调整亮度的缓冲图像对象</span></div><div class="line">    <span class="keyword">private</span> BufferedImage oldImage;<span class="comment">// 用于存放调整亮度之前的原缓冲图像对象</span></div><div class="line">    <span class="keyword">private</span> ImageBrightenPanel imageBrightenPanel = <span class="keyword">new</span> ImageBrightenPanel();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        ImageBrightenFrame frame = <span class="keyword">new</span> ImageBrightenFrame();</div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageBrightenFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">357</span>, <span class="number">276</span>);</div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        setTitle(<span class="string">"调整图片的亮度"</span>);</div><div class="line">        Image img = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            img = ImageIO.read(<span class="keyword">new</span> File(<span class="string">"src/img/image.jpg"</span>));  <span class="comment">// 创建图像对象</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        image = <span class="keyword">new</span> BufferedImage(img.getWidth(<span class="keyword">this</span>), img.getHeight(<span class="keyword">this</span>),</div><div class="line">        BufferedImage.TYPE_INT_RGB);<span class="comment">// 创建缓冲图像对象</span></div><div class="line">        image.getGraphics().drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);<span class="comment">// 在缓冲图像对象上绘制图像</span></div><div class="line">        oldImage = image;<span class="comment">// 存储原来的图像对象，用于以后的恢复操作</span></div><div class="line">        getContentPane().add(imageBrightenPanel, BorderLayout.CENTER);</div><div class="line">        </div><div class="line">        <span class="keyword">final</span> JPanel panel = <span class="keyword">new</span> JPanel();</div><div class="line">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> JButton button = <span class="keyword">new</span> JButton();</div><div class="line">        button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                <span class="keyword">float</span> a = <span class="number">1.0f</span>;<span class="comment">// 定义缩放因子</span></div><div class="line">                <span class="keyword">float</span> b = <span class="number">5.0f</span>;<span class="comment">// 定义偏移量</span></div><div class="line">                RescaleOp op = <span class="keyword">new</span> RescaleOp(a,b,<span class="keyword">null</span>);<span class="comment">// 创建具有指定缩放因子和偏移量的 RescaleOp对象</span></div><div class="line">                image = op.filter(image, <span class="keyword">null</span>);<span class="comment">// 对源图像中的数据进行逐像素重缩放，达到变亮的效果</span></div><div class="line">                repaint();<span class="comment">// 重新绘制图像</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        button.setText(<span class="string">"变    亮"</span>);</div><div class="line">        panel.add(button);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> JButton button_3 = <span class="keyword">new</span> JButton();</div><div class="line">        button_3.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                <span class="keyword">float</span> a = <span class="number">1.0f</span>;<span class="comment">// 定义缩放因子</span></div><div class="line">                <span class="keyword">float</span> b = -<span class="number">5.0f</span>;<span class="comment">// 定义偏移量</span></div><div class="line">                RescaleOp op = <span class="keyword">new</span> RescaleOp(a,b,<span class="keyword">null</span>);<span class="comment">// 创建具有指定缩放因子和偏移量的 RescaleOp对象</span></div><div class="line">                image = op.filter(image, <span class="keyword">null</span>);<span class="comment">// 对源图像中的数据进行逐像素重缩放，达到变暗的效果</span></div><div class="line">                repaint();<span class="comment">// 重新绘制图像</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        button_3.setText(<span class="string">"变    暗"</span>);</div><div class="line">        panel.add(button_3);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> JButton button_2 = <span class="keyword">new</span> JButton();</div><div class="line">        button_2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                image = oldImage;  <span class="comment">// 获得变亮前的图像</span></div><div class="line">                imageBrightenPanel.repaint();<span class="comment">// 重新绘制原图像，即恢复为变亮前的图像</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        button_2.setText(<span class="string">"恢    复"</span>);</div><div class="line">        panel.add(button_2);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> JButton button_1 = <span class="keyword">new</span> JButton();</div><div class="line">        button_1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        button_1.setText(<span class="string">"退    出"</span>);</div><div class="line">        panel.add(button_1);</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ImageBrightenPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (image != <span class="keyword">null</span>) &#123;</div><div class="line">                g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);  <span class="comment">// 将缓冲图像对象绘制到面板上</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p><strong>补充说明：这里的<code>RescaleOp</code>类可以调整色数，其原理是每一个样本值乘以一个缩放因子然后加上偏移量就是缩放的数，如果要变亮的话就将偏移量为正，反之为负，这里将缩放因子设置为1.0f是因为不想那么快速的变亮，如果你设置的大一点，就会很快变得很亮，反之亦然</strong></p>
</blockquote>
</blockquote>
<h2 id="转换彩色图片为灰色图片"><a href="#转换彩色图片为灰色图片" class="headerlink" title="转换彩色图片为灰色图片"></a>转换彩色图片为灰色图片</h2><blockquote>
<p>主要使用<code>ColorConvertOp</code>类，其构造函数如下<br><code>public ColorConvertOp(ColorSpace src,ColorSpace dst,RenderingHints hints)</code>:src是原颜色空间对象，dst是目标颜色空间对象，hints是用于控制颜色转换的RenderingHints对象，可以为null<br>使用<code>ColorConvertOp</code>类中的<code>filter</code>方法将彩色图像转换成灰色图像，定义如下：<br><code>public final BufferedImage filter(BufferedImage src,BufferedImage dst)</code>:scr要过滤的对象，dst目标空间对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zzk;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.Image;</div><div class="line"><span class="keyword">import</span> java.awt.color.ColorSpace;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</div><div class="line"><span class="keyword">import</span> java.awt.image.ColorConvertOp;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JPanel;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiColorToGrayFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> BufferedImage image;</div><div class="line">    <span class="keyword">private</span> ColorToGrayPanel colorToGrayPanel = <span class="keyword">new</span> ColorToGrayPanel();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        MultiColorToGrayFrame frame = <span class="keyword">new</span> MultiColorToGrayFrame();</div><div class="line">        frame.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiColorToGrayFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">357</span>, <span class="number">276</span>);</div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        setTitle(<span class="string">"彩色图像转换为灰度"</span>);</div><div class="line">        Image img = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            img = ImageIO.read(<span class="keyword">new</span> File(<span class="string">"src/img/image.jpg"</span>));  <span class="comment">// 创建图像对象</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        image = <span class="keyword">new</span> BufferedImage(img.getWidth(<span class="keyword">this</span>), img.getHeight(<span class="keyword">this</span>),</div><div class="line">                BufferedImage.TYPE_INT_RGB);<span class="comment">// 创建缓冲图像对象</span></div><div class="line">        image.getGraphics().drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);<span class="comment">// 在缓冲图像对象上绘制图像</span></div><div class="line">        </div><div class="line">        getContentPane().add(colorToGrayPanel, BorderLayout.CENTER);</div><div class="line">        </div><div class="line">        <span class="keyword">final</span> JPanel panel = <span class="keyword">new</span> JPanel();</div><div class="line">        getContentPane().add(panel, BorderLayout.SOUTH);</div><div class="line">        </div><div class="line">        <span class="keyword">final</span> JButton button = <span class="keyword">new</span> JButton();</div><div class="line">        button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                ColorSpace colorSpace1 = ColorSpace.getInstance(ColorSpace.CS_GRAY);<span class="comment">// 创建内置线性为灰度的颜色空间</span></div><div class="line">                ColorSpace colorSpace2 = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);<span class="comment">// 创建内置线性为 RGB的颜色空间</span></div><div class="line">                ColorConvertOp op = <span class="keyword">new</span> ColorConvertOp(colorSpace1,colorSpace2,</div><div class="line">                        <span class="keyword">null</span>);<span class="comment">// 创建进行颜色转换的对象</span></div><div class="line">                image = op.filter(image, <span class="keyword">null</span>);<span class="comment">// 对缓冲图像进行颜色转换</span></div><div class="line">            repaint();<span class="comment">// 重新绘制图像</span></div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line">        button.setText(<span class="string">"转换为灰度"</span>);</div><div class="line">        panel.add(button);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> JButton button_1 = <span class="keyword">new</span> JButton();</div><div class="line">        button_1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(<span class="keyword">final</span> ActionEvent e)</span> </span>&#123;</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        button_1.setText(<span class="string">"退    出"</span>);</div><div class="line">        panel.add(button_1);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ColorToGrayPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (image != <span class="keyword">null</span>) &#123;</div><div class="line">                g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);  <span class="comment">// 将缓冲图像对象绘制到面板上</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>补充说明：这里的<code>image.getGraphics().drawImage(img, 0, 0, null)</code>可以删除的，因为这里Graphics类中的drawImage可以直接绘制BufferedImage类型的缓冲图像，下面会给出一段代码做个示范</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Chenjiabing on 2017/4/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span>  <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BufferedImage image=<span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> Graphics2D graphics2D=<span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> draw my_draw=<span class="keyword">new</span> draw();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        demo my=<span class="keyword">new</span> demo();</div><div class="line">        my.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">demo</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">1000</span>);</div><div class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                image= ImageIO.read(<span class="keyword">new</span> File(<span class="string">"src/img/image.jpg"</span>));</div><div class="line">                <span class="comment">//graphics2D=image.createGraphics();</span></div><div class="line">                <span class="comment">//graphics2D.drawImage(image,0,0,null);</span></div><div class="line">                <span class="comment">// image.getGraphics().drawImage(image,0,0,null);</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (IOException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(<span class="string">"error"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.getContentPane().add(my_draw);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">draw</span> <span class="keyword">extends</span> <span class="title">JPanel</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span></div><div class="line">        &#123;</div><div class="line">            g.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,image.getWidth(),image.getHeight(),<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote>
<p><strong>从文件中读取图像的方法</strong></p>
<blockquote>
<ul>
<li>URL imgUrl = CutImageFrame.class.getResource(“/img/image.jpg”);//得到的是URL<br>  img = Toolkit.getDefaultToolkit().getImage(imgUrl);  //得到的是Image对象，同样的想要得到BufferedImage对象可以进行转     化</li>
<li><code>Image img=ImageIo(new File(&quot;path&quot;));</code>这里得到的是Image对象，如果想要得到BufferedImage对象，可以用BufferedImage的构造方法BufferedImage(int width,int height,)</li>
</ul>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java图像处理干货篇&quot;&gt;&lt;a href=&quot;#java图像处理干货篇&quot; class=&quot;headerlink&quot; title=&quot;java图像处理干货篇&quot;&gt;&lt;/a&gt;java图像处理干货篇&lt;/h1&gt;&lt;h2 id=&quot;绘制图像&quot;&gt;&lt;a href=&quot;#绘制图像&quot; class=&quot;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java图形与文本处理" scheme="http://chenjiabing666.github.io/tags/java%E5%9B%BE%E5%BD%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib绘制图形基础</title>
    <link href="http://chenjiabing666.github.io/2017/04/01/matplotlib%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%E5%9F%BA%E7%A1%80/"/>
    <id>http://chenjiabing666.github.io/2017/04/01/matplotlib绘制图形基础/</id>
    <published>2017-04-01T03:46:34.000Z</published>
    <updated>2017-04-01T03:49:03.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matplotlib绘制基本图形"><a href="#matplotlib绘制基本图形" class="headerlink" title="matplotlib绘制基本图形"></a>matplotlib绘制基本图形</h1><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">x=np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>) <span class="comment">#创建一个0-10之间以1为间隔的numpy数组</span></div><div class="line">y=x+<span class="number">10</span>   </div><div class="line">plt.plot(x,y,color=<span class="string">'red'</span>,linestyle=<span class="string">'--'</span>,marker=<span class="string">'&gt;'</span>,linewidth=<span class="number">3</span>,label=<span class="string">'example one'</span>)  <span class="comment">#绘制图形</span></div><div class="line">plt.savefig(<span class="string">'first.png'</span>,dpi=<span class="number">50</span>)  <span class="comment">#保存图形，dpi表示</span></div><div class="line">plt.legend()   <span class="comment">#显示图例</span></div><div class="line">plt.show()   <span class="comment">#显示图形</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>图形展示</strong><br><img src="http://ono60m7tl.bkt.clouddn.com/first.png" alt="折线图"><br><strong>说明</strong><br>plt.plot()可以直接绘制折线，其中marker是折线上的标记，linewidth是折线的宽度，label是图例，如果要想显示就要设置plt.legend(),linestyle是折线的风格，color是颜色</p>
</blockquote>
<h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">slices = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>]   <span class="comment">#指定每一个切片的大小，这里就是每块的比例</span></div><div class="line">activities = [<span class="string">'sleeping'</span>,<span class="string">'eating'</span>,<span class="string">'working'</span>,<span class="string">'playing'</span>]   <span class="comment">#指定标签</span></div><div class="line">cols = [<span class="string">'c'</span>,<span class="string">'m'</span>,<span class="string">'r'</span>,<span class="string">'b'</span>]   <span class="comment">#y颜色</span></div><div class="line"></div><div class="line">plt.pie(slices,   </div><div class="line">        labels=activities,</div><div class="line">        colors=cols,   <span class="comment">#指定每一个区块的颜色</span></div><div class="line">        startangle=<span class="number">90</span>,     <span class="comment">#开始角度，默认是0度，从x轴开始，90度从y轴开始</span></div><div class="line">        shadow= <span class="keyword">True</span>,    <span class="comment">#阴影效果</span></div><div class="line">        explode=(<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>),     <span class="comment">#拉出第二个切片，如果全为0就不拉出，这里的数字是相对与圆心的距离</span></div><div class="line">        autopct=<span class="string">'%1.1f%%'</span>)       <span class="comment">#显示百分比</span></div><div class="line">plt.title(<span class="string">'Interesting Graph\nCheck it out'</span>)  <span class="comment">#设置标题</span></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>图片展示</strong><br><img src="http://ono60m7tl.bkt.clouddn.com/second.png" alt="饼状图"></p>
</blockquote>
<h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">x=np.random.rand(<span class="number">1000</span>)</div><div class="line">y=np.random.rand(len(x))</div><div class="line">plt.scatter(x,y,color=<span class="string">'r'</span>,alpha=<span class="number">0.3</span>,label=<span class="string">'example one'</span>,marker=<span class="string">'o'</span>)  <span class="comment">#绘图</span></div><div class="line">plt.legend()</div><div class="line"><span class="comment">#plt.axis([0,2,0,2]) #设置坐标的范围</span></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>图片展示</strong><br><img src="http://ono60m7tl.bkt.clouddn.com/third.png" alt="散点图"></p>
</blockquote>
<h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">x=np.random.randint(<span class="number">1</span>,<span class="number">1000</span>,<span class="number">200</span>)</div><div class="line">axis=plt.gca()   <span class="comment">#得到当前的绘图对象</span></div><div class="line">axis.hist(x,bins=<span class="number">35</span>,facecolor=<span class="string">'r'</span>,normed=<span class="keyword">True</span>,histtype=<span class="string">'bar'</span>,alpha=<span class="number">0.5</span>)<span class="comment">#bins表示直方图的个数，histtype表示直方图的样式，normed如果为True就将直方归一化，显示概率密度，默认是False</span></div><div class="line">axis.set_xlabel(<span class="string">"Values"</span>)  <span class="comment">#设置x的标签</span></div><div class="line">axis.set_ylabel(<span class="string">"Frequency"</span>)   </div><div class="line">axis.set_title(<span class="string">"HIST"</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>图片展示</strong><br><img src="http://ono60m7tl.bkt.clouddn.com/four.png" alt="直方图"></p>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;matplotlib绘制基本图形&quot;&gt;&lt;a href=&quot;#matplotlib绘制基本图形&quot; class=&quot;headerlink&quot; title=&quot;matplotlib绘制基本图形&quot;&gt;&lt;/a&gt;matplotlib绘制基本图形&lt;/h1&gt;&lt;h2 id=&quot;折线图&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="python数据挖掘与分析" scheme="http://chenjiabing666.github.io/categories/python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="matplotlib" scheme="http://chenjiabing666.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Swing干货系列之JSplitPane(分割面板)</title>
    <link href="http://chenjiabing666.github.io/2017/03/28/Swing%E4%B8%AD%E7%9A%84JSplitPane/"/>
    <id>http://chenjiabing666.github.io/2017/03/28/Swing中的JSplitPane/</id>
    <published>2017-03-28T14:49:39.000Z</published>
    <updated>2017-03-29T07:16:29.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swing中的JSplitPane-分割面板"><a href="#Swing中的JSplitPane-分割面板" class="headerlink" title="Swing中的JSplitPane(分割面板)"></a>Swing中的JSplitPane(分割面板)</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p><code>JSplitPane</code> 用于分隔两个（只能两个）<code>Component</code>。两个 <code>Component</code> 图形化分隔以外观实现为基础，并且这两个 <code>Component</code> 可以由用户交互式调整大小。有关如何使用 <code>JSplitPane</code> 的信息，请参阅 <a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">The Java Tutorial</a> 中的 How to Use Split Panes 一节。</p>
<p>使用 <code>JSplitPane.HORIZONTAL_SPLIT</code> 可让分隔窗格中的两个 Component 从左到右排列，或者使用 <code>JSplitPane.VERTICAL_SPLIT</code> 使其从上到下排列。改变 Component 大小的首选方式是调用 <code>setDividerLocation</code>，其中 <code>location</code> 是新的 x 或 y 位置，具体取决于 JSplitPane 的方向。</p>
<p>要将 Component 调整到其首选大小，可调用 <code>resetToPreferredSizes</code>。</p>
<p>当用户调整 Component 的大小时，Component 的最小大小用于确定 Component 能够设置的最大/最小位置。如果两个组件的最小大小大于分隔窗格的大小，则分隔条将不允许您调整其大小。改变 JComponent 最小大小，请参阅 <a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">JComponent.setMinimumSize(java.awt.Dimension)</a>。</p>
<p>当用户调整分隔窗格大小时，新的空间以 resizeWeight 为基础在两个组件之间分配。默认情况下，值为 0 表示右边/底部的组件获得所有空间，而值为 1 表示左边/顶部的组件获得所有空间。<br><strong>补充说明：</strong></p>
<blockquote>
<p>这里的<code>JComponebt.SetMinimumSize(java.awt.Dimension)</code>:用于设置组件的最小值，这里的Dimension是一个封装组件的高度和宽度的一个类，其中的一个构造函数就是<code>Dimension(int width,int height)</code>,详情见<a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">文档</a>，当然有设置最小的就有设置最大的啊，详情看文档吧</p>
</blockquote>
</blockquote>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><blockquote>
<ul>
<li><code>public JSplitPanel()</code>:创建一个配置为将其子组件水平排列、无连续布局、为组件使用两个按钮的新 JSplitPane</li>
<li><code>public JSplitPanel(int newOrientation)</code>:创建一个指定方向的分割板，这里的<code>newOrientation</code>可以设置两个值， <code>VERTICAL_SPLIT</code>(设置分割板为上下布局),<code>HORIZONTAL_SPLIT</code>(设置分隔板左右布局)</li>
<li><code>public JSplitPane(int newOrientation,Component newLeftComponent,Component newRightComponent)</code>:创建一个具有指定方向和不连续重绘的指定组件的新 JSplitPane。</li>
<li><code>public JSplitPane(int newOrientation,boolean newContinuousLayout,Component newLeftComponent,Component newRightComponent)</code>:创建一个具有指定方向、重绘方式和指定组件的新 JSplitPane。</li>
</ul>
</blockquote>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><blockquote>
<ul>
<li><code>setContinuousLayout(boolean newContinuousLayout)</code>:设置是否连续重新显示组件，如果为false就会发现在调整面板的过程中会显示一道黑线，只有当停下的时候才能正常的显示，默认是<code>false</code></li>
<li><code>setDividerSize(int newSize)</code>:设置分割条的大小<br>*　<code>setDividerLocation(double size)</code>:设置分隔条的位置,这里的size是小数，个人觉得官方文档好像这里有点对劲，相当于占整个面板的百分比</li>
<li><code>setLeftComponent(Componentcomp)</code>/<code>setTopComponent(Component comp)</code>: 将组件设置到分隔条的上面或者左边。</li>
<li><code>setRightComponent(Component comp)</code>/<code>setBottomComponent(Component comp)</code>:将组件设置到分隔条的下面或者右边。</li>
<li><code>setOneTouchExpandable(boolean newValue)</code>:设置 oneTouchExpandable 属性的值，要使 JSplitPane 在分隔条上提供一个 UI 小部件来快速展开/折叠分隔条，此属性必须为 true。</li>
</ul>
<p><strong>补充说明：</strong></p>
<blockquote>
<p>上面只是常用的几个函数，具体的请看官方文档，注意这里的setLeftComponent的四个设置组件的函数要根据分隔板的分布来确定</p>
</blockquote>
</blockquote>
<h1 id="开始撸代码"><a href="#开始撸代码" class="headerlink" title="开始撸代码"></a>开始撸代码</h1><blockquote>
<p><strong>初步实现(创建两个按钮实现分隔板的布局)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JComponent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JSplitPane;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line">    JFrame horizontalFrame = <span class="keyword">new</span> JFrame();</div><div class="line">    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    JComponent topButton = <span class="keyword">new</span> JButton(<span class="string">"Left"</span>);</div><div class="line">    JComponent bottomButton = <span class="keyword">new</span> JButton(<span class="string">"Right"</span>);</div><div class="line">    <span class="keyword">final</span> JSplitPane splitPane = <span class="keyword">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class="line"></div><div class="line">    splitPane.setTopComponent(topButton);</div><div class="line">    splitPane.setBottomComponent(bottomButton);</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">    horizontalFrame.add(splitPane, BorderLayout.CENTER);</div><div class="line">    horizontalFrame.setSize(<span class="number">150</span>, <span class="number">150</span>);</div><div class="line">    horizontalFrame.setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    splitPane.setDividerLocation(<span class="number">0.5</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>更进一步(两种布局的操作)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JComponent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JSplitPane;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line">    JFrame horizontalFrame = <span class="keyword">new</span> JFrame();</div><div class="line">    horizontalFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    </div><div class="line">    </div><div class="line">    JComponent leftButton = <span class="keyword">new</span> JButton(<span class="string">"Left"</span>);</div><div class="line">    JComponent rightButton = <span class="keyword">new</span> JButton(<span class="string">"Right"</span>);</div><div class="line">    JSplitPane splitPane = <span class="keyword">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class="line">    splitPane.setLeftComponent(leftButton);</div><div class="line">    splitPane.setRightComponent(rightButton);</div><div class="line">    </div><div class="line">    horizontalFrame.add(splitPane, BorderLayout.CENTER);</div><div class="line">    horizontalFrame.setSize(<span class="number">150</span>, <span class="number">150</span>);</div><div class="line">    horizontalFrame.setVisible(<span class="keyword">true</span>);</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>嵌套分隔板</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.swing.JApplet;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JLabel;</div><div class="line"><span class="keyword">import</span> javax.swing.JSplitPane;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> HORIZSPLIT = JSplitPane.HORIZONTAL_SPLIT;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> VERTSPLIT = JSplitPane.VERTICAL_SPLIT;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> continuousLayout = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"></div><div class="line">    JLabel label1 = <span class="keyword">new</span> JLabel(<span class="string">"a"</span>);</div><div class="line">    JLabel label2 = <span class="keyword">new</span> JLabel(<span class="string">"b"</span>);</div><div class="line">    JLabel label3 = <span class="keyword">new</span> JLabel(<span class="string">"c"</span>);</div><div class="line">    JSplitPane splitPane1 = <span class="keyword">new</span> JSplitPane(VERTSPLIT, continuousLayout, label1, label2);</div><div class="line">    splitPane1.setOneTouchExpandable(<span class="keyword">true</span>);</div><div class="line">    splitPane1.setDividerSize(<span class="number">2</span>);</div><div class="line">    splitPane1.setDividerLocation(<span class="number">0.5</span>);</div><div class="line"></div><div class="line">    JSplitPane splitPane2 = <span class="keyword">new</span> JSplitPane(HORIZSPLIT, splitPane1, label3);<span class="comment">//将分隔板和一个label放在第二个分割板中实现嵌套</span></div><div class="line">    splitPane2.setOneTouchExpandable(<span class="keyword">true</span>);</div><div class="line">    splitPane2.setDividerLocation(<span class="number">0.4</span>);</div><div class="line">    splitPane2.setDividerSize(<span class="number">2</span>);</div><div class="line"></div><div class="line">    JFrame frame = <span class="keyword">new</span> JFrame();</div><div class="line">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    frame.add(splitPane2);</div><div class="line">    frame.pack();</div><div class="line">    frame.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>事件监听</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.BorderLayout;</div><div class="line"><span class="keyword">import</span> java.beans.PropertyChangeEvent;</div><div class="line"><span class="keyword">import</span> java.beans.PropertyChangeListener;</div><div class="line"><span class="comment">// w  w  w . j a  va2s .  co m</span></div><div class="line"><span class="keyword">import</span> javax.swing.JButton;</div><div class="line"><span class="keyword">import</span> javax.swing.JComponent;</div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JSplitPane;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">    JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">"Property Split"</span>);</div><div class="line">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    JSplitPane splitPane = <span class="keyword">new</span> JSplitPane(JSplitPane.VERTICAL_SPLIT);</div><div class="line">    splitPane.setContinuousLayout(<span class="keyword">true</span>);</div><div class="line">    splitPane.setOneTouchExpandable(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    JComponent topComponent = <span class="keyword">new</span> JButton(<span class="string">"A"</span>);</div><div class="line">    splitPane.setTopComponent(topComponent);</div><div class="line"></div><div class="line">    JComponent bottomComponent = <span class="keyword">new</span> JButton(<span class="string">"B"</span>);</div><div class="line">    splitPane.setBottomComponent(bottomComponent);</div><div class="line"></div><div class="line">    PropertyChangeListener propertyChangeListener = <span class="keyword">new</span> PropertyChangeListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">propertyChange</span><span class="params">(PropertyChangeEvent changeEvent)</span> </span>&#123;</div><div class="line">        JSplitPane sourceSplitPane = (JSplitPane) changeEvent.getSource();</div><div class="line">        String propertyName = changeEvent.getPropertyName();</div><div class="line">        <span class="keyword">if</span> (propertyName.equals(JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY)) &#123;</div><div class="line">          <span class="keyword">int</span> current = sourceSplitPane.getDividerLocation();</div><div class="line">          System.out.println(<span class="string">"Current: "</span> + current);</div><div class="line">          Integer last = (Integer) changeEvent.getNewValue();</div><div class="line">          System.out.println(<span class="string">"Last: "</span> + last);</div><div class="line">          Integer priorLast = (Integer) changeEvent.getOldValue();</div><div class="line">          System.out.println(<span class="string">"Prior last: "</span> + priorLast);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    splitPane.addPropertyChangeListener(propertyChangeListener);</div><div class="line"></div><div class="line">    frame.add(splitPane, BorderLayout.CENTER);</div><div class="line">    frame.setSize(<span class="number">300</span>, <span class="number">150</span>);</div><div class="line">    frame.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>说明</strong><br>无论 <code>bean</code> 何时更改 <code>bound</code> 属性，都会激发一个 <code>PropertyChange</code> 事件。可以向源 <code>bean</code> 注册一个 <code>PropertyChangeListener</code>，以便获得所有绑定 (<code>bound</code>) 属性更改的通知。</p>
<h3 id="类-PropertyChangeEvent"><a href="#类-PropertyChangeEvent" class="headerlink" title="类 PropertyChangeEvent"></a>类 <a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">PropertyChangeEvent</a></h3><p>无论 bean 何时更改 “bound” 或 “constrained” 属性，都会提交一个 “PropertyChange” 事件。PropertyChangeEvent 对象被作为参数发送给 PropertyChangeListener 和 VetoableChangeListener 方法。<br>通常 PropertyChangeEvent 还附带名称和已更改属性的旧值和新值。如果新值是基本类型（比如 int 或 boolean），则必须将它包装为相应的 java.lang.* Object 类型（比如 Integer 或 Boolean）。<br>如果旧值和新值的真实值是未知的，则可能为它们提供 null 值。<br>事件源可能发送一个 null 对象作为名称，以指示其属性的任意事件集已更改。在这种情况下，旧值和新值应该仍然为 null。<br><code>getSource()</code>:返回最初未变化的对象，未Object类型的,因此这里需要强制转换成<code>JSplitPanel</code></p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">官方文档</a></li>
<li><a href="http://www.java2s.com/Tutorials/Java/Java_Swing/1310__Java_Swing_JSplitPane.htm" target="_blank" rel="external">英文Swing教程</a></li>
</ul>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swing中的JSplitPane-分割面板&quot;&gt;&lt;a href=&quot;#Swing中的JSplitPane-分割面板&quot; class=&quot;headerlink&quot; title=&quot;Swing中的JSplitPane(分割面板)&quot;&gt;&lt;/a&gt;Swing中的JSplitPane(分
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="swing" scheme="http://chenjiabing666.github.io/tags/swing/"/>
    
  </entry>
  
  <entry>
    <title>Swing干货系列之JSlider(滑块)</title>
    <link href="http://chenjiabing666.github.io/2017/03/27/Swing-%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97%E4%B9%8BJSlider/"/>
    <id>http://chenjiabing666.github.io/2017/03/27/Swing-干货系列之JSlider/</id>
    <published>2017-03-27T13:43:22.000Z</published>
    <updated>2017-04-06T09:35:41.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swing干货系列之JSlider-滑块"><a href="#Swing干货系列之JSlider-滑块" class="headerlink" title="Swing干货系列之JSlider(滑块)"></a>Swing干货系列之JSlider(滑块)</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p>一个让用户以图形方式在有界区间内通过移动滑块来选择值的组件。</p>
<p>滑块可以显示主刻度标记以及主刻度之间的次刻度标记。刻度标记之间的值的个数由 <code>setMajorTickSpacing</code>和 <code>setMinorTickSpacing</code> 来控制。刻度标记的绘制由 setPaintTicks 控制。</p>
<p>滑块也可以在固定时间间隔（或在任意位置）沿滑块刻度打印文本标签。标签的绘制由 <code>setLabelTable</code> 和 <code>setPaintLabels</code> 控制。</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>JSlider()</code>:创建一个空值的滑块组件，但是默认的刻度是100，其中如果获得其值的话可以很清楚的看见</li>
<li><code>JSlider(BoundedRangeModel brm)</code>:使用指定的 <code>BoundedRangeModel</code> 创建一个水平滑块</li>
<li><code>JSlider(int min,int max)</code>:创建一个带有最小值和最大值得滑块</li>
<li><code>JSlider(int min,int max,int value)</code>:创建一个带有最小值，最大值和当前值的滑块</li>
</ul>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ol>
<li><code>getValue(int x)</code>/<code>setValue(int x)</code>:得到和设置当前值</li>
<li><code>getPaintsLabels()</code>:return <code>boolean</code> 告知是否绘制了签</li>
<li><code>SetFont(Font font)</code>:设置组件的字体，其中Font类的font对象是参数</li>
<li><code>setInverted(boolean b)</code>:反转滑块的刻度</li>
<li><code>setMaximum(int maximum)</code> ：设置最大值</li>
<li><code>setMinimum(int min)</code>:设置最小值</li>
<li><code>setMinorTickSpacing(int n)</code> :设置次刻度，就是主刻度中间不用标记数值的刻度</li>
<li><code>setMajorTickSpacing(int n)</code>:设置主刻度</li>
<li><code>setPaintTicks(boolean b)</code>:确定是否在滑块下面显示刻度线，如果为false表示不显示</li>
<li><code>setPaintLabels(boolean b)</code>:确定是否在刻度线下绘制数值，默认不绘制<br><strong>以上只是列了几个常用的函数，详情见<a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">官方文档</a></strong></li>
</ol>
</blockquote>
<h3 id="下面撸个代码试试身手"><a href="#下面撸个代码试试身手" class="headerlink" title="下面撸个代码试试身手"></a>下面撸个代码试试身手</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 2017/3/27.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java_swing</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> JSlider points = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Java_swing</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        setTitle(<span class="string">"记事本"</span>);</div><div class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">        setSize(<span class="number">300</span>, <span class="number">400</span>);</div><div class="line"><span class="comment">//        points=new JSlider();</span></div><div class="line">        points = <span class="keyword">new</span> JSlider(<span class="number">0</span>, <span class="number">50</span>, <span class="number">5</span>);</div><div class="line">        points.setMinorTickSpacing(<span class="number">5</span>);<span class="comment">//设置次要的间隔，每个一个间隔，这个显示时中间不标记数值</span></div><div class="line">        points.setMajorTickSpacing(<span class="number">10</span>);<span class="comment">//显示主要的刻度线，每个两个间隔，这个设置了，如果setPaintLabels为true就会显示数值</span></div><div class="line">        points.setPaintTicks(<span class="keyword">true</span>);  <span class="comment">//确定是否显示刻度线</span></div><div class="line">        points.setPaintLabels(<span class="keyword">true</span>); <span class="comment">//确定是否显示刻度的值</span></div><div class="line">        <span class="comment">//points.setInverted(true);//指定为true反转刻 度</span></div><div class="line">        points.setSnapToTicks(<span class="keyword">true</span>);</div><div class="line">        points.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> value = points.getValue();</div><div class="line">                System.out.println(value);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        getContentPane().add(points, BorderLayout.CENTER);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Java_swing my = <span class="keyword">new</span> Java_swing();</div><div class="line">        my.setVisible(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Change-Listener-一个监听机制"><a href="#Change-Listener-一个监听机制" class="headerlink" title="Change Listener(一个监听机制)"></a>Change Listener(一个监听机制)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Dimension;</div><div class="line"><span class="comment">/*from  w  ww  .  ja  v a 2 s  .c o  m*/</span></div><div class="line"><span class="keyword">import</span> javax.swing.JFrame;</div><div class="line"><span class="keyword">import</span> javax.swing.JSlider;</div><div class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</div><div class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    JFrame f = <span class="keyword">new</span> JFrame();</div><div class="line">    <span class="keyword">final</span> JSlider slider = <span class="keyword">new</span> JSlider(<span class="number">0</span>, <span class="number">150</span>, <span class="number">0</span>);</div><div class="line">    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    slider.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">150</span>, <span class="number">30</span>));</div><div class="line">    </div><div class="line">    <span class="comment">//添加change Listener,当然这里的和JButton的也是一样，可以在一个类中实现</span></div><div class="line">    slider.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> value = slider.getValue();</div><div class="line">        <span class="keyword">if</span> (value == <span class="number">0</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"0"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; <span class="number">0</span> &amp;&amp; value &lt;= <span class="number">30</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"value &gt; 0 &amp;&amp; value &lt;= 30"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; <span class="number">30</span> &amp;&amp; value &lt; <span class="number">80</span>) &#123;</div><div class="line">          System.out.println(<span class="string">"value &gt; 30 &amp;&amp; value &lt; 80"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          System.out.println(<span class="string">"max"</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    f.add(slider);</div><div class="line">    f.pack();</div><div class="line">    f.setLocationRelativeTo(<span class="keyword">null</span>);</div><div class="line">    f.setVisible(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>当然以上只是JSlider的一部分内容，还有的后面会陆续更新</strong><br><strong>本文参考的文章：</strong></p>
<blockquote>
<blockquote>
<ul>
<li><a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">中文文档</a></li>
<li><a href="http://www.java2s.com/Tutorials/Java/Java_Swing/0970__Java_Swing_JSlider.htm" target="_blank" rel="external">英文文档</a></li>
</ul>
</blockquote>
</blockquote>
<p><strong>福利时间，博主写了一个小例子，想要的朋友可以参见<a href="https://github.com/chenjiabing666/Java_demo/tree/master/031" target="_blank" rel="external">github</a>,不要忘了随手点个赞哦！！！</strong></p>
<blockquote>
<blockquote>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swing干货系列之JSlider-滑块&quot;&gt;&lt;a href=&quot;#Swing干货系列之JSlider-滑块&quot; class=&quot;headerlink&quot; title=&quot;Swing干货系列之JSlider(滑块)&quot;&gt;&lt;/a&gt;Swing干货系列之JSlider(滑块)&lt;/h1
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="swing" scheme="http://chenjiabing666.github.io/tags/swing/"/>
    
  </entry>
  
  <entry>
    <title>scrapy设置请求池</title>
    <link href="http://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%B1%A0/"/>
    <id>http://chenjiabing666.github.io/2017/03/26/scrapy设置请求池/</id>
    <published>2017-03-26T06:20:10.000Z</published>
    <updated>2017-03-27T03:31:34.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy设置”请求池”"><a href="#scrapy设置”请求池”" class="headerlink" title="scrapy设置”请求池”"></a>scrapy设置”请求池”</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p>相信大家有时候爬虫发出请求的时候会被ban，返回的是403错误，这个就是请求头的问题，其实在python发出请求时，使用的是默认的自己的请求头，网站管理者肯定会不允许机器访问的，但是有些比较low的网站还是可以访问的，有时候网站管理者看到同一个请求头在一秒内请求多次，傻子都知道这是机器在访问，因此会被ban掉，这时就需要设置请求池了，这个和ip代理池是一个概念</p>
<h2 id="爬虫请求常见的错误"><a href="#爬虫请求常见的错误" class="headerlink" title="爬虫请求常见的错误"></a>爬虫请求常见的错误</h2><blockquote>
<p>200：请求成功      处理方式：获得响应的内容，进行处理<br>201：请求完成，结果是创建了新资源。新创建资源的 URI 可在响应的实体中得到    处理方式：爬虫中不会遇到<br>202：请求被接受，但处理尚未完成    处理方式：阻塞等待<br>204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。    处理方式：丢弃<br>300：该状态码不被 HTTP/1.0 的应用程序直接使用， 只是作为 3XX 类型回应的默认解释。存在多个可用的被请求资源。    处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃<br>301：请求到的资源都会分配一个永久的 URL，这样就可以在将来通过该 URL 来访问此资源    处理方式：重定向到分配的 URL<br>302：请求到的资源在一个不同的 URL 处临时保存     处理方式：重定向到临时的 URL<br>304 请求的资源未更新     处理方式：丢弃<br>400 非法请求     处理方式：丢弃<br>401 未授权     处理方式：丢弃<br>403 禁止     处理方式：丢弃<br>404 没有找到     处理方式：丢弃<br>5XX 回应代码以“5”开头的状态码表示服务器端发现自己出现错误，不能继续执行请求    处理方式：丢弃</p>
</blockquote>
</blockquote>
<h2 id="话不多说直接撸代码"><a href="#话不多说直接撸代码" class="headerlink" title="话不多说直接撸代码"></a>话不多说直接撸代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> log</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> scrapy.downloadermiddlewares.useragent <span class="keyword">import</span> UserAgentMiddleware</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotateUserAgentMiddleware</span><span class="params">(UserAgentMiddleware)</span>:</span></div><div class="line"><span class="comment"># for more user agent strings,you can find it in http://www.useragentstring.com/pages/useragentstring.php</span></div><div class="line">user_agent_list = [</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>,</div><div class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 "</span></div><div class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span></div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">    ua = random.choice(self.user_agent_list)</div><div class="line">    <span class="keyword">if</span> ua:</div><div class="line">        <span class="comment"># 显示当前使用的useragent</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"********Current UserAgent:%s************"</span> % ua</div><div class="line">        <span class="comment"># 记录</span></div><div class="line">        log.msg(<span class="string">'Current UserAgent: '</span> + ua)</div><div class="line">        request.headers.setdefault(<span class="string">'User-Agent'</span>, ua)</div></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<blockquote>
<p>这里的思路就是在下载器中间件中对request设置请求，这里是使用<code>request.headers.setdefault(&quot;User-Agent&quot;,user_agent)</code>这个函数设置请求头，对于下载器中间件在我博客前面的文章已经有说明，想要了解的请<a href="https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/">点击</a></p>
</blockquote>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<blockquote>
<p>这里还要说明的是设置了请求池还要在配置文件settins中设置一下，具体设置方法和设置代理ip一样，详情请看<a href="https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/">scrapy代理ip的设置</a></p>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持</p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;scrapy设置”请求池”&quot;&gt;&lt;a href=&quot;#scrapy设置”请求池”&quot; class=&quot;headerlink&quot; title=&quot;scrapy设置”请求池”&quot;&gt;&lt;/a&gt;scrapy设置”请求池”&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; cla
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy中使用cookie免于验证登录和模拟登录</title>
    <link href="http://chenjiabing666.github.io/2017/03/26/Scrapy%E4%B8%AD%E4%BD%BF%E7%94%A8cookie%E5%85%8D%E4%BA%8E%E9%AA%8C%E8%AF%81%E7%99%BB%E5%BD%95%E5%92%8C%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
    <id>http://chenjiabing666.github.io/2017/03/26/Scrapy中使用cookie免于验证登录和模拟登录/</id>
    <published>2017-03-26T05:30:53.000Z</published>
    <updated>2017-03-27T03:32:05.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy中使用cookie免于验证登录和模拟登录"><a href="#Scrapy中使用cookie免于验证登录和模拟登录" class="headerlink" title="Scrapy中使用cookie免于验证登录和模拟登录"></a>Scrapy中使用cookie免于验证登录和模拟登录</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p><code>python</code>爬虫我认为最困难的问题一个是ip代理，另外一个就是模拟登录了，更操蛋的就是模拟登录了之后还有验证码，真的是不让人省心，不过既然有了反爬虫，那么就有反反爬虫的策略，这里就先介绍一个cookie模拟登陆，后续还有<code>seleminum+phantomjs</code>模拟浏览器登录的文章。还不知道cookie是什么朋友们，可以<a href="http://bubkoo.com/2014/04/21/http-cookies-explained/" target="_blank" rel="external">点击这里</a></p>
<h2 id="cookie提取方法："><a href="#cookie提取方法：" class="headerlink" title="cookie提取方法："></a>cookie提取方法：</h2><blockquote>
<p>打开谷歌浏览器或者火狐浏览器，如果是谷歌浏览器的按<code>F12</code>这个键就会跳出来浏览器控制台，然后点击<code>Network</code>，之后就是刷新网页开始抓包了，之后在抓到的页面中随便打开一个，就能看到cokie了，但是这里的cookie并不符合python中的格式，因此需要转换格式，下面提供了转换的代码</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">transCookie</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cookie)</span>:</span></div><div class="line">    self.cookie = cookie</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stringToDict</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    将从浏览器上Copy来的cookie字符串转化为Scrapy能使用的Dict</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    itemDict = &#123;&#125;</div><div class="line">    items = self.cookie.split(<span class="string">';'</span>)</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</div><div class="line">        key = item.split(<span class="string">'='</span>)[<span class="number">0</span>].replace(<span class="string">' '</span>, <span class="string">''</span>)</div><div class="line">        value = item.split(<span class="string">'='</span>)[<span class="number">1</span>]</div><div class="line">        itemDict[key] = value</div><div class="line">    <span class="keyword">return</span> itemDict</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">cookie = <span class="string">"你复制的cookie"</span></div><div class="line">trans = transCookie(cookie)</div><div class="line"><span class="keyword">print</span> trans.stringToDict()</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h2><blockquote>
<p>只需要将你网页上的cookie复制到上述代码中直接运行就可以了</p>
</blockquote>
<h2 id="使用cookie操作scrapy"><a href="#使用cookie操作scrapy" class="headerlink" title="使用cookie操作scrapy"></a>使用cookie操作scrapy</h2><blockquote>
<h3 id="直接撸代码"><a href="#直接撸代码" class="headerlink" title="直接撸代码"></a>直接撸代码</h3></blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.conf <span class="keyword">import</span> settings <span class="comment">#从settings文件中导入Cookie，这里也可以室友from scrapy.conf import settings.COOKIE</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">name = <span class="string">"demo"</span></div><div class="line"><span class="comment">#allowed_domains = ["csdn.com"]</span></div><div class="line">start_urls = [<span class="string">"http://write.blog.csdn.net/postlist"</span>]</div><div class="line">cookie = settings[<span class="string">'COOKIE'</span>]  <span class="comment"># 带着Cookie向网页发请求\</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Connection'</span>: <span class="string">'keep - alive'</span>,  <span class="comment"># 保持链接状态</span></div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">yield</span> scrapy.Request(url=self.start_urls[<span class="number">0</span>],headers=self.headers,cookies=self.cookie)<span class="comment"># 这里带着cookie发出请求</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="keyword">print</span> response.body</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote>
<p>这里是scrapy工程目录下spiders目录下的主要的解析网页的py文件相信学过scrapy的应该不会陌生，上述代码中的cookie值是放在Settings文件中的，因此使用的时候需要导入，当然你也可以直接将cookie粘贴到这个文件中</p>
</blockquote>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<p>虽说这里使用直接使用cookie可以省去很多麻烦，但是cookie的生命周期特别的短，不过小型的项目足够使用了，向那些需要爬两三天甚至几个月的项目就不适用了，因此在隔一段时间就要重新换cookie的值，虽说有很多麻烦，但是我还是比较喜欢这种方法的，因为可以省去不少脑筋</p>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>本人秉着方便他人的想法才开始写技术文章的，因为对于自学的人来说想要找到系统的学习教程很困难，这一点我深有体会，我也是在不断的摸索中才小有所成，如果你们觉得我写的不错就帮我推广一下，让更多的人看到。另外如果有什么错误的地方也要及时联系我，方便我改进，谢谢大家对我的支持。</p>
</blockquote>
</blockquote>
<h3 id="最后欢迎大家看看我的其他scrapy文章"><a href="#最后欢迎大家看看我的其他scrapy文章" class="headerlink" title="最后欢迎大家看看我的其他scrapy文章"></a>最后欢迎大家看看我的其他scrapy文章</h3><blockquote>
<ul>
<li><a href="https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/">scrapy设置代理ip</a></li>
<li><a href="https://chenjiabing666.github.io/2017/03/25/scrapy%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2/">scrapy架构初探</a></li>
<li><a href="https://chenjiabing666.github.io/2017/03/25/scrapy%E5%88%9D%E8%AF%95/">scrapy初试</a></li>
<li><a href="https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/">scrapy下载器中间件</a></li>
</ul>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scrapy中使用cookie免于验证登录和模拟登录&quot;&gt;&lt;a href=&quot;#Scrapy中使用cookie免于验证登录和模拟登录&quot; class=&quot;headerlink&quot; title=&quot;Scrapy中使用cookie免于验证登录和模拟登录&quot;&gt;&lt;/a&gt;Scrapy中使
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy设置代理ip</title>
    <link href="http://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/"/>
    <id>http://chenjiabing666.github.io/2017/03/26/scrapy设置代理ip/</id>
    <published>2017-03-25T16:49:29.000Z</published>
    <updated>2017-03-27T03:31:13.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy代理的设置"><a href="#scrapy代理的设置" class="headerlink" title="scrapy代理的设置"></a>scrapy代理的设置</h1><blockquote>
<p>在我的上一篇文章介绍了<a href="https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/">scrapy下载器中间件的使用</a>,这里的scrapy<code>IP</code>的代理就是用这个原理实现的，重写了下载器中间件的<code>process_request(self,request,spider)</code>这个函数,这个函数的主要作用就是对request进行处理。</p>
<blockquote>
<h3 id="话不多说直接撸代码"><a href="#话不多说直接撸代码" class="headerlink" title="话不多说直接撸代码"></a>话不多说直接撸代码</h3></blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random  </div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">proxMiddleware</span><span class="params">(object)</span>:</span></div><div class="line"><span class="comment">#proxy_list=[&#123;'http': 'http://123.157.146.116:8123'&#125;, &#123;'http': 'http://116.55.16.233:8998'&#125;, &#123;'http': 'http://115.85.233.94:80'&#125;, &#123;'http': 'http://180.76.154.5:8888'&#125;, &#123;'http': 'http://139.213.135.81:80'&#125;, &#123;'http': 'http://124.88.67.14:80'&#125;, &#123;'http': 'http://106.46.136.90:808'&#125;, &#123;'http': 'http://106.46.136.226:808'&#125;, &#123;'http': 'http://124.88.67.21:843'&#125;, &#123;'http': 'http://113.245.84.253:8118'&#125;, &#123;'http': 'http://124.88.67.10:80'&#125;, &#123;'http': 'http://171.38.141.12:8123'&#125;, &#123;'http': 'http://124.88.67.52:843'&#125;, &#123;'http': 'http://106.46.136.237:808'&#125;, &#123;'http': 'http://106.46.136.105:808'&#125;, &#123;'http': 'http://106.46.136.190:808'&#125;, &#123;'http': 'http://106.46.136.186:808'&#125;, &#123;'http': 'http://101.81.120.58:8118'&#125;, &#123;'http': 'http://106.46.136.250:808'&#125;, &#123;'http': 'http://106.46.136.8:808'&#125;, &#123;'http': 'http://111.78.188.157:8998'&#125;, &#123;'http': 'http://106.46.136.139:808'&#125;, &#123;'http': 'http://101.53.101.172:9999'&#125;, &#123;'http': 'http://27.159.125.68:8118'&#125;, &#123;'http': 'http://183.32.88.133:808'&#125;, &#123;'http': 'http://171.38.37.193:8123'&#125;]</span></div><div class="line">proxy_list=[</div><div class="line">    <span class="string">"http://180.76.154.5:8888"</span>,</div><div class="line">    <span class="string">"http://14.109.107.1:8998"</span>,</div><div class="line">    <span class="string">"http://106.46.136.159:808"</span>,</div><div class="line">    <span class="string">"http://175.155.24.107:808"</span>,</div><div class="line">    <span class="string">"http://124.88.67.10:80"</span>,</div><div class="line">    <span class="string">"http://124.88.67.14:80"</span>,</div><div class="line">    <span class="string">"http://58.23.122.79:8118"</span>,</div><div class="line">    <span class="string">"http://123.157.146.116:8123"</span>,</div><div class="line">    <span class="string">"http://124.88.67.21:843"</span>,</div><div class="line">    <span class="string">"http://106.46.136.226:808"</span>,</div><div class="line">    <span class="string">"http://101.81.120.58:8118"</span>,</div><div class="line">    <span class="string">"http://180.175.145.148:808"</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request,spider)</span>:</span></div><div class="line">    <span class="comment"># if not request.meta['proxies']:</span></div><div class="line">    ip = random.choice(self.proxy_list)</div><div class="line">    <span class="keyword">print</span> ip</div><div class="line">    <span class="comment">#print 'ip=' %ip</span></div><div class="line">    request.meta[<span class="string">'proxy'</span>] = ip</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<h2 id="主要的原理："><a href="#主要的原理：" class="headerlink" title="主要的原理："></a>主要的原理：</h2><blockquote>
<p>给出一个代理列表，然后在这个列表中随机取出一个代理，设置在request中，其中<code>request.meta[&#39;proxy&#39;]</code>就是设置代理的格式</p>
</blockquote>
</blockquote>
<p><strong>但是现在主要的问题就是没有代理ip可用，如果去买的话又太贵了，自己玩玩买代理不值当，所以只好自己写爬虫去爬取免费的代理了，但是免费的代理存活的时间是有限的，这是个非常麻烦的事情，我提供的方法就是实现自己的一个ip代理池，每天定时更新自己的代理池，具体的实现方法会在下一篇文章中介绍，现在提供一段代码用来爬<br>取西刺网站的代理</strong></p>
<h2 id="直接撸代码，接招吧"><a href="#直接撸代码，接招吧" class="headerlink" title="直接撸代码，接招吧"></a>直接撸代码，接招吧</h2></blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> Queue</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get_ips</span><span class="params">()</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page)</span>:</span></div><div class="line">    self.ips=[]</div><div class="line">    self.urls=[]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(page):</div><div class="line">        self.urls.append(<span class="string">"http://www.xicidaili.com/nn/"</span> + str(i))</div><div class="line">    self.header = &#123;<span class="string">"User-Agent"</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>&#125;</div><div class="line">    <span class="comment">#self.file=open("ips",'w')</span></div><div class="line">    self.q=Queue.Queue()</div><div class="line">    self.Lock=threading.Lock()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ips</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> self.urls:</div><div class="line">        res = requests.get(url, headers=self.header)</div><div class="line">        soup = BeautifulSoup(res.text, <span class="string">'lxml'</span>)</div><div class="line">        ips = soup.find_all(<span class="string">'tr'</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ips)):</div><div class="line">            ip = ips[i]</div><div class="line">            tds = ip.find_all(<span class="string">"td"</span>)</div><div class="line">            ip_temp = <span class="string">"http://"</span> + tds[<span class="number">1</span>].contents[<span class="number">0</span>] + <span class="string">":"</span> + tds[<span class="number">2</span>].contents[<span class="number">0</span>]</div><div class="line">            <span class="comment"># print str(ip_temp)</span></div><div class="line">            self.q.put(str(ip_temp))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">review_ips</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> self.q.empty():</div><div class="line">        ip=self.q.get()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            proxy=&#123;<span class="string">"http"</span>: ip&#125;</div><div class="line">            <span class="comment">#print proxy</span></div><div class="line">            res = requests.get(<span class="string">"http://www.baidu.com"</span>, proxies=proxy,timeout=<span class="number">5</span>)</div><div class="line">            self.Lock.acquire()</div><div class="line">            <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</div><div class="line">                self.ips.append(ip)</div><div class="line">                <span class="keyword">print</span> ip</div><div class="line">                self.Lock.release()</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">            <span class="comment">#print 'error'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></div><div class="line">    self.get_ips()</div><div class="line">    threads=[]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</div><div class="line">        threads.append(threading.Thread(target=self.review_ips,args=[]))</div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">        t.start()</div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">        t.join()</div><div class="line">    <span class="keyword">return</span> self.ips</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip</span><span class="params">()</span>:</span></div><div class="line">my=Get_ips(<span class="number">4</span>)</div><div class="line"><span class="keyword">return</span> my.main()</div><div class="line">get_ip()</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<h3 id="实现的原理"><a href="#实现的原理" class="headerlink" title="实现的原理"></a>实现的原理</h3><blockquote>
<p>这里用到了BeautifulSoup解析页面，然后将提取到的代理交给队列，然后再通过共享队列分配给线程，这里主要开启线程通过设置代理ip访问一个网站，因为访问网站的时间比较长，因此要开起多个线程，相信大家能够学习设置代理ip了应该都是比较上手的了，这里具体的代码就不一一解释了，如果代码有什么问题可以及时联系我，我的联系方式在<strong>关于我</strong>的一栏中有提到</p>
</blockquote>
</blockquote>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote>
<p>想要ip应用起来，还要在配置文件<code>settings</code>中添加<code>DOWNLOADER_MIDDLEWARES = {
&#39;demo.proxy.proxMiddleware&#39;:400
}</code>这里的demo是工程的名字，proxy是py文件的名,proxMiddleware是类的名字</p>
<blockquote>
<p>当然这里可能你觉得proxy_list写在这里有点冗余，你可以在配置文件中定义，然后将配置文件的内容<code>import</code>到py文件中</p>
</blockquote>
</blockquote>
<p><strong>以上全是博主慢慢摸索出来的，可以说自学一门技术真的很难，学习python爬虫已经有两三个月了，可以说全是自己通过看项目，网上查资料才有了今天的成功，不过现在还有几个问题没有解决，就是分布式爬虫、移动端爬取，博主接下来就要主攻这两个方面，学好之后会在自己的博客上分享学习心得的，因为网上没有系统的学习教程，对于自学的人来说实在是太痛苦了</strong></p>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;scrapy代理的设置&quot;&gt;&lt;a href=&quot;#scrapy代理的设置&quot; class=&quot;headerlink&quot; title=&quot;scrapy代理的设置&quot;&gt;&lt;/a&gt;scrapy代理的设置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在我的上一篇文章介绍了&lt;a href=&quot;h
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy的下载器中间件</title>
    <link href="http://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://chenjiabing666.github.io/2017/03/25/scrapy的下载器中间件/</id>
    <published>2017-03-25T07:04:08.000Z</published>
    <updated>2017-03-25T07:08:40.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy中的下载器中间件"><a href="#scrapy中的下载器中间件" class="headerlink" title="scrapy中的下载器中间件"></a>scrapy中的下载器中间件</h1><h2 id="下载中间件"><a href="#下载中间件" class="headerlink" title="下载中间件"></a>下载中间件</h2><blockquote>
<p>下载器中间件是介于Scrapy的request/response处理的钩子框架。 是用于全局修改Scrapy request和response的一个轻量、底层的系统。</p>
<blockquote>
<h2 id="编写下载器中间件"><a href="#编写下载器中间件" class="headerlink" title="编写下载器中间件"></a>编写下载器中间件</h2><blockquote>
<h3 id="1-process-request-request-spider"><a href="#1-process-request-request-spider" class="headerlink" title="1. process_request(request, spider)"></a>1. <code>process_request(request, spider)</code></h3><p>当每个<code>request</code>通过下载中间件时，该方法被调用。<br><code>process_request()</code> 必须返回其中之一: 返回 <code>None</code> 、返回一个 <code>Response</code> 对象、返回一个 <code>Request</code>对象或<code>raise IgnoreRequest</code> 。</p>
<p>如果其返回 <code>None</code> ，Scrapy将继续处理该<code>request</code>，执行其他的中间件的相应方法，直到合适的下载器处理函数(<code>download handler</code>)被调用， 该<code>request</code>被执行(其<code>response</code>被下载)。</p>
<p>如果其返回 <code>Response</code> 对象，Scrapy将不会调用 任何 其他的 <code>process_request()</code> 或 <code>process_exception()</code> 方法，或相应地下载函数； 其将返回该<code>response</code>。 已安装的中间件的 <code>process_response()</code> 方法则会在每个<code>response</code>返回时被调用。</p>
<p>如果其返回 <code>Request</code> 对象，Scrapy则停止调用 <code>process_request</code>方法并重新调度返回的<code>request</code>。当新返回的<code>request</code>被执行后， 相应地中间件链将会根据下载的<code>response</code>被调用。</p>
<p>如果其<code>raise</code>一个 <code>IgnoreRequest</code> 异常，则安装的下载中间件的 <code>process_exception()</code> 方法会被调用。如果没有任何一个方法处理该异常， 则<code>request</code>的<code>errback(Request.errback)</code>方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</p>
<p>参数:    </p>
<blockquote>
<ul>
<li><code>request</code> (<code>Request</code> 对象) – 处理的<code>request</code></li>
<li><code>spider</code> (<code>Spider</code> 对象) – 该<code>request</code>对应的<code>spider</code></li>
</ul>
</blockquote>
<h3 id="2-process-response-request-response-spider"><a href="#2-process-response-request-response-spider" class="headerlink" title="2. process_response(request, response, spider)"></a>2. <code>process_response(request, response, spider)</code></h3><blockquote>
<p><code>process_response()</code> 必须返回以下之一: 返回一个 <code>Response</code>对象、 返回一个<code>Request</code> 对象或<code>raise</code>一个 <code>IgnoreRequest</code> 异常。</p>
<p>如果其返回一个 <code>Response</code> (可以与传入的<code>response</code>相同，也可以是全新的对象)， 该<code>response</code>会被在链中的其他中间件的 <code>process_response()</code> 方法处理。</p>
<p>如果其返回一个 <code>Request</code> 对象，则中间件链停止， 返回的<code>request</code>会被重新调度下载。处理类似于 <code>process_request()</code> 返回<code>request</code>所做的那样。</p>
<p>如果其抛出一个 <code>IgnoreRequest</code> 异常，则调用<code>request的errback(Request.errback)。</code> 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</p>
<p>参数:    </p>
<blockquote>
<blockquote>
<ul>
<li><code>request</code> (<code>Request</code>对象) – <code>response</code>所对应的request</li>
<li><code>response</code> (<code>Response</code> 对象) – 被处理的response</li>
<li><code>spider</code> (<code>Spider</code> 对象) – <code>response</code>所对应的<code>spider</code></li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<h3 id="3-process-exception-request-exception-spider"><a href="#3-process-exception-request-exception-spider" class="headerlink" title="3.process_exception(request, exception, spider)"></a>3.<code>process_exception(request, exception, spider)</code></h3><blockquote>
<p>当下载处理器(<code>download handler</code>)或 <code>process_request()</code> (下载中间件)抛出异常(包括 <code>IgnoreRequest</code> 异常)时， Scrapy调用 <code>process_exception()</code> 。</p>
<p><code>process_exception()</code> 应该返回以下之一: 返回 <code>None</code> 、 一个 <code>Response</code> 对象、或者一个 <code>Request</code> 对象。</p>
<p>如果其返回 <code>None</code> ，Scrapy将会继续处理该异常，接着调用已安装的其他中间件的 <code>process_exception()</code> 方法，直到所有中间件都被调用完毕，则调用默认的异常处理。</p>
<p>如果其返回一个 <code>Response</code> 对象，则已安装的中间件链的 <code>process_response()</code> 方法被调用。Scrapy将不会调用任何其他中间件的 <code>process_exception()</code> 方法。</p>
<p>如果其返回一个 <code>Request</code> 对象， 则返回的<code>request</code>将会被重新调用下载。这将停止中间件的 <code>process_exception()</code> 方法执行，就如返回一个<code>response</code>的那样。</p>
<p>参数:    </p>
<blockquote>
<ul>
<li><code>request</code> (是 <code>Request</code> 对象) – 产生异常的<code>request</code></li>
<li><code>exception</code> (<code>Exception</code> 对象) – 抛出的异常</li>
<li><code>spider</code> (<code>Spider</code> 对象) – <code>request</code>对应的<code>spider</code></li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote>
<p>总的来说下载器中间件就是起到处理request请求并且返回response的作用，一切从网页爬取的url发起的请求会组成一个请求队列，然后一个一个排队经过下载器中间件，之后下载器中间件会对request做出相应的处理，比如添加请求头，添加代理等等，然后通过process_response返回一个response，之后就是用得到的response做出相应的分析，当然这里的内容页可以不实现，但是如果要爬取大型的网站，会遇到被ban的可能就要在下载器中间件这里着手，设置一些相应的请求头，ip代理等等内容。<br><strong>以上纯属个人逐渐摸索总结出来的内容，如果有什么错误欢迎指正</strong></p>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;scrapy中的下载器中间件&quot;&gt;&lt;a href=&quot;#scrapy中的下载器中间件&quot; class=&quot;headerlink&quot; title=&quot;scrapy中的下载器中间件&quot;&gt;&lt;/a&gt;scrapy中的下载器中间件&lt;/h1&gt;&lt;h2 id=&quot;下载中间件&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy初试</title>
    <link href="http://chenjiabing666.github.io/2017/03/25/scrapy%E5%88%9D%E8%AF%95/"/>
    <id>http://chenjiabing666.github.io/2017/03/25/scrapy初试/</id>
    <published>2017-03-25T06:21:21.000Z</published>
    <updated>2017-03-27T03:30:06.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrapy初试"><a href="#scrapy初试" class="headerlink" title="scrapy初试"></a>scrapy初试</h1><blockquote>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><blockquote>
<p>打开<code>cmd</code>，在终端输入<code>scrapy startproject tutorial</code>,这里将在指定的文件夹下创建一个<code>scrapy</code>工程</p>
</blockquote>
<h2 id="其中将会创建以下的文件："><a href="#其中将会创建以下的文件：" class="headerlink" title="其中将会创建以下的文件："></a>其中将会创建以下的文件：</h2><blockquote>
<ul>
<li><code>scrapy.cfg</code>: 项目的配置文件</li>
<li><code>tutorial/</code>: 该项目的python模块。之后您将在此加入代码。</li>
<li><code>tutorial/items.py</code>: 项目中的item文件.</li>
<li><code>tutorial/pipelines.py</code>: 项目中的pipelines文件.</li>
<li><code>tutorial/settings.py</code>: 项目的设置文件.</li>
<li><code>tutorial/spiders/</code>: 放置spider代码的目录.</li>
</ul>
</blockquote>
<p>定义item</p>
<blockquote>
<p><code>Item</code>是保存爬取到的数据的容器；其使用方法和<code>python</code>字典类似， 并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。</p>
<p>类似在<code>ORM</code>中做的一样，您可以通过创建一个 <code>scrapy.Item</code> 类， 并且定义类型为 <code>scrapy.Field</code>的类属性来定义一个<code>Item</code>。 (如果不了解<code>ORM</code>, 不用担心，您会发现这个步骤非常简单)</p>
<p>首先根据需要从<code>dmoz.org</code>获取到的数据对<code>item</code>进行建模。 我们需要从<code>dmoz</code>中获取名字，<code>url</code>，以及网站的描述。 对此，在<code>item</code>中定义相应的字段。编辑 <code>tutorial</code> 目录中的 <code>items.py</code> 文件:</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">title = scrapy.Field()</div><div class="line">link = scrapy.Field()</div><div class="line">desc = scrapy.Field()</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>一开始这看起来可能有点复杂，但是通过定义item， 您可以很方便的使用Scrapy的其他方法。而这些方法需要知道您的item的定义.</p>
</blockquote>
<h2 id="编写第一个爬虫"><a href="#编写第一个爬虫" class="headerlink" title="编写第一个爬虫"></a>编写第一个爬虫</h2><blockquote>
<blockquote>
<p>在工程的根目录下打开终端输入<code>scrapy genspider demo douban.com</code><br>这里的<code>demo</code>是<code>spders</code>文件下的主要<code>py</code>文件<br><code>douban.com</code>是要爬取的域名，会在<code>demo.py</code>中的 <code>allowed_domains</code>中显示，主要的功能就是限制爬取的<code>url</code></p>
<h3 id="spider代码中内容解析"><a href="#spider代码中内容解析" class="headerlink" title="spider代码中内容解析"></a>spider代码中内容解析</h3><ul>
<li><code>name</code>: 用于区别<code>Spider</code>。 该名字必须是唯一的，您不可以为不同的<code>Spider</code>设定相同的名字。</li>
<li><code>start_urls</code>: 包含了<code>Spider</code>在启动时进行爬取的<code>url</code>列表。 因此，第一个被获取到的页面将是其中之一。 后续的<code>URL</code>则从初始的<code>URL</code>获取到的数据中提取。</li>
<li><code>parse()</code> 是spider的一个方法。 被调用时，每个初始<code>URL</code>完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(<code>response data</code>)，提取数据(生成<code>item</code>)以及生成需要进一步处理的<code>URL</code>的 <code>Request</code>对象。</li>
</ul>
</blockquote>
<h3 id="以下是spider目录下的demo-py的代码"><a href="#以下是spider目录下的demo-py的代码" class="headerlink" title="以下是spider目录下的demo.py的代码"></a>以下是spider目录下的demo.py的代码</h3></blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">name = <span class="string">"dmoz"</span></div><div class="line">allowed_domains = [<span class="string">"dmoz.org"</span>]</div><div class="line">start_urls = [</div><div class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</div><div class="line">    <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    filename = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(response.body)</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="spider的爬取"><a href="#spider的爬取" class="headerlink" title="spider的爬取"></a>spider的爬取</h2><blockquote>
<p>进入工程的根目录下打开终端输入：<code>scrapy crawl dmoz</code></p>
</blockquote>
<h2 id="spider中的数据存取"><a href="#spider中的数据存取" class="headerlink" title="spider中的数据存取"></a>spider中的数据存取</h2><blockquote>
<p>在工程的根目录下打开终端输入<code>scrapy crawl dmoz -o items.json</code><br>这里是将数据存储到<code>json</code>文件中</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;scrapy初试&quot;&gt;&lt;a href=&quot;#scrapy初试&quot; class=&quot;headerlink&quot; title=&quot;scrapy初试&quot;&gt;&lt;/a&gt;scrapy初试&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=
    
    </summary>
    
      <category term="Scrapy学习" scheme="http://chenjiabing666.github.io/categories/Scrapy%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="scrapy" scheme="http://chenjiabing666.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>java中的IO操作</title>
    <link href="http://chenjiabing666.github.io/2017/03/25/java%E4%B8%AD%E7%9A%84IO%E6%93%8D%E4%BD%9C/"/>
    <id>http://chenjiabing666.github.io/2017/03/25/java中的IO操作/</id>
    <published>2017-03-25T05:52:53.000Z</published>
    <updated>2017-03-27T03:28:49.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java中IO操作"><a href="#java中IO操作" class="headerlink" title="java中IO操作"></a>java中IO操作</h1><h2 id="读取文件中的内容"><a href="#读取文件中的内容" class="headerlink" title="读取文件中的内容"></a>读取文件中的内容</h2><blockquote>
<h4 id="使用Scanner读取文本中的内容"><a href="#使用Scanner读取文本中的内容" class="headerlink" title="使用Scanner读取文本中的内容"></a>使用<code>Scanner</code>读取文本中的内容</h4><blockquote>
<p>相信大家都知道<code>Scanner console=new Scanner(System.in)</code>是用来读取控制台上输入的内容，但是这里是用来读取文件的内容，原理是一样的，只是对象不同罢了，这里用到的是<code>File</code>对象，用来创建一个文件对象</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Scanner input=<span class="keyword">new</span> Scanner(<span class="keyword">new</span>                         File(<span class="string">"hello.txt"</span>));<span class="comment">//创建一个对象input</span></div><div class="line"><span class="keyword">while</span>(input.hasNextLine()) <span class="comment">//这里用来判断是否还有内容，    以免读到最后发生错误</span></div><div class="line">&#123;</div><div class="line">String content=input.nextLine();</div><div class="line">System.out.println(content);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>这里顺便补充一下<code>Scannner</code>中的几个函数：</p>
<blockquote>
<ol>
<li><code>nextLine()</code>:读取一行的内容，包括空格，换行</li>
<li><code>nextInt()</code>:读取一个整型内容</li>
<li><code>nexDouble()</code>:读取一个双精度的浮点数</li>
<li><code>next()</code>:读取下一个内容，无论什么类型，其中遇到空格和换行默认是一个标记（即是跳过）和<code>nextLine()</code>类似</li>
<li><code>hasNext()</code>:用来判断文件中的还有下一个内容，无论什么类型的</li>
<li><code>hasNextInt()</code></li>
<li><code>hasNextDouble()</code>://相似，不在赘述</li>
</ol>
</blockquote>
</blockquote>
<h3 id="使用FileReader读取"><a href="#使用FileReader读取" class="headerlink" title="使用FileReader读取"></a>使用<code>FileReader</code>读取</h3><blockquote>
<p>用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 <code>FileInputStream</code>上构造一个 <code>InputStreamReader</code>。<br>FileReader 用于读取字符流。要读取原始字节流，请考虑使用 FileInputStream。</p>
</blockquote>
</blockquote>
<pre><code>//这里使用new File创建一个对象，同样的也可以直接将文件的绝对路径传入
FileReader file=new FileReader(new File(&quot;hello.txt&quot;));
while(file.ready())   //用来判断是否还有字符可读
        {
        int content=file.read();   //这里的read是读取将单个字符 返回的是int，即是ascii码,这里官方文档说返回的是读取的字符数，但是我实验了一下返回的ascii码
        System.out.println((char)content);  //所以要将ascii码转换成字符
        }
        file.close();
</code></pre><blockquote>
<blockquote>
<blockquote>
<p>常用的几个方法：</p>
<blockquote>
<ol>
<li><code>read()</code>: return int 上面介绍过</li>
<li><code>read(char[] cbuf,int int length)</code>:将内容读入到一个<code>char</code>类型的数组，<code>length</code>是读取的字符数，<code>offest</code>是偏移量</li>
</ol>
</blockquote>
</blockquote>
</blockquote>
<h3 id="使用BufferedReader的类实现高效的读取文件"><a href="#使用BufferedReader的类实现高效的读取文件" class="headerlink" title="使用BufferedReader的类实现高效的读取文件"></a>使用<code>BufferedReader</code>的类实现高效的读取文件</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传入一个reader创建一个对象</span></div><div class="line">        BufferedReader file= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"hello.txt"</span>));  </div><div class="line">        System.out.println(file.skip(<span class="number">3</span>));<span class="comment">//实现将指针跳过3个字符</span></div><div class="line">        System.out.println((<span class="keyword">char</span>)file.read()); <span class="comment">//read的方法，和FileReader中的read一样</span></div><div class="line">        String line=file.readLine();   <span class="comment">//读取一行</span></div><div class="line">        System.out.println(line);</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>常用的方法：</p>
<blockquote>
<ol>
<li><code>readLine()</code></li>
<li><code>read()</code>：如果到了末尾返回-1</li>
<li><code>read(char [],int off,int length)</code>:和FileReader中的一样</li>
<li><code>ready()</code>:判断是否还可以读取，一般和read配对使用</li>
<li><code>skip(long n)</code>:跳过的字符数</li>
<li><code>close()</code></li>
</ol>
</blockquote>
</blockquote>
</blockquote>
<h2 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h2><blockquote>
<h3 id="用FileWriter写入文件"><a href="#用FileWriter写入文件" class="headerlink" title="用FileWriter写入文件"></a>用<code>FileWriter</code>写入文件</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*创建将对象f传入FileWriter,其中Filewriter有两个参数，第一个是File对象后者是一个String(即是文件的路径），第二个参数是boolean类型的，表示是否在文件的末尾追加内容，默认的是false表示不用在末尾追加，如果想要在末尾追加要写入另外一个参数true,当然这里可以用更加简洁的方式创建：FileWriter file=new FileWriter("hello.txt",false);</span></div><div class="line">*/</div><div class="line">FileWriter file=<span class="keyword">new</span> FileWriter(f,<span class="keyword">true</span>);</div><div class="line">file.write(<span class="string">"chenjiabing"</span>);<span class="comment">//写入函数write</span></div><div class="line">file.close();  <span class="comment">//最后必须关闭文件的输入流，否则写入将会失败，这里不想c和c++</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其中Filewriter中的方法还有</p>
<blockquote>
<ol>
<li><code>flush</code>：刷新缓存流</li>
<li><code>close</code></li>
<li><code>append()</code>:当前的领会的就是写入数组:<code>append(Arrays.toString(list))</code>;</li>
<li><code>getEncoding()</code>:返回此流使用的字符编码</li>
</ol>
</blockquote>
</blockquote>
<h3 id="用PrintStream写入文件"><a href="#用PrintStream写入文件" class="headerlink" title="用PrintStream写入文件"></a>用<code>PrintStream</code>写入文件</h3><blockquote>
<p>这里同样的是和<code>System.out.println()</code>一样的原理，<code>System.out.println</code>只是内部实现了<code>PrintStream</code>，这里是用来将指定的内容写入到文件中而已</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PrintStream output=<span class="keyword">new</span> PrintStream(<span class="keyword">new</span>     File(<span class="string">"hello.txt"</span>));</div><div class="line"><span class="comment">//创建一个写入的对象output</span></div><div class="line">output.print(<span class="string">"flan"</span>);</div><div class="line">output.println(<span class="string">"vmlkfamla"</span>);</div><div class="line">output.println(<span class="string">"vmslfkmadvmfs;dm"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<h2 id="这里是用BufferedWriter类写入文件-一个高效的写入方式"><a href="#这里是用BufferedWriter类写入文件-一个高效的写入方式" class="headerlink" title="这里是用BufferedWriter类写入文件(一个高效的写入方式)"></a>这里是用<code>BufferedWriter</code>类写入文件(一个高效的写入方式)</h2><blockquote>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><blockquote>
<p>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。<br>可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。<br>该类提供了 <code>newLine()</code> 方法，它使用平台自己的行分隔符概念，此概念由系统属性 line.separator 定义。并非所有平台都使用新行符 (‘\n’) 来终止各行。因此调用此方法来终止每个输出行要优于直接写入新行符。<br>通常 <code>Writer</code> 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 <code>BufferedWriter</code> 包装所有其 <code>write()</code> 操作可能开销很高的 <code>Writer</code>（如 <code>FileWriters</code> 和 <code>OutputStreamWriters</code>）。例如，</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>PrintWriter out= new PrintWriter(new BufferedWriter(new FileWriter(&quot;foo.out&quot;)));
</code></pre><p>将缓冲 <code>PrintWriter</code>对文件的输出。如果没有缓冲，则每次调用 <code>print()</code> 方法会导致将字符转换为字节，然后立即入到文件，而这是极其低效的。</p>
<blockquote>
<blockquote>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3></blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">BufferedWriter input=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"hello.txt"</span>));</div><div class="line">        input.write(<span class="string">"这是一个文件读入的方法"</span>);</div><div class="line">        input.newLine();</div><div class="line">        input.write(<span class="string">"一个高效的方法"</span>);</div><div class="line">        input.close();</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<h3 id="其他的方法"><a href="#其他的方法" class="headerlink" title="其他的方法"></a>其他的方法</h3><blockquote>
<ol>
<li><code>close()</code></li>
<li><code>flush()</code></li>
<li><code>newLine()</code>:写入一个换行，因为每一个操作系统上的换行符可能不一样，不能系统的都用”\n”表示</li>
<li><code>write()</code><blockquote>
<p>详情参见<code>API</code></p>
</blockquote>
</li>
</ol>
</blockquote>
</blockquote>
</blockquote>
<p><em>版权信息所有者：chenjiabing</em><br><em>如若转载请标明出处：chenjiabing666.github.io6</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java中IO操作&quot;&gt;&lt;a href=&quot;#java中IO操作&quot; class=&quot;headerlink&quot; title=&quot;java中IO操作&quot;&gt;&lt;/a&gt;java中IO操作&lt;/h1&gt;&lt;h2 id=&quot;读取文件中的内容&quot;&gt;&lt;a href=&quot;#读取文件中的内容&quot; class=&quot;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
