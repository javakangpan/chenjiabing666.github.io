<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-12-03T14:38:00.847Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springBoot集成RestTemplate</title>
    <link href="http://chenjiabing666.github.io/2018/12/03/springBoot%E9%9B%86%E6%88%90RestTemplate/"/>
    <id>http://chenjiabing666.github.io/2018/12/03/springBoot集成RestTemplate/</id>
    <published>2018-12-03T14:36:42.000Z</published>
    <updated>2018-12-03T14:38:00.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成RestTemplate"><a href="#SpringBoot集成RestTemplate" class="headerlink" title="SpringBoot集成RestTemplate"></a>SpringBoot集成RestTemplate</h1><h2 id="构造restful风格的api"><a href="#构造restful风格的api" class="headerlink" title="构造restful风格的api"></a>构造restful风格的api</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepetController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> DeptService deptService;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Id查找</div><div class="line">	 * <span class="doctag">@param</span> id </div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">		Dept dept = deptService.getDeptById(id);</div><div class="line">		<span class="keyword">return</span> dept;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 分页获取列表</div><div class="line">	 * <span class="doctag">@param</span> pageNum</div><div class="line">	 * <span class="doctag">@param</span> pageSize</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDeptList</span><span class="params">(Integer pageNum,Integer pageSize)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> deptService.getDeptList(pageNum,pageSize);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加dept</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">addDepet</span><span class="params">(@RequestBody Dept dept)</span></span>&#123;</div><div class="line">		Dept dept1=deptService.addDept(dept);</div><div class="line">		<span class="keyword">return</span> dept1;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改dept</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@PutMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modifyDept</span><span class="params">(@RequestBody Dept dept)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> deptService.modifyDept(dept);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Id删除</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@DeleteMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">		<span class="keyword">return</span> deptService.deleteDept(id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><ul>
<li>在使用之前需要在配置文件中注入，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(factory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</div><div class="line">        factory.setReadTimeout(<span class="number">5000</span>);<span class="comment">//单位为ms</span></div><div class="line">        factory.setConnectTimeout(<span class="number">5000</span>);<span class="comment">//单位为ms</span></div><div class="line">        <span class="keyword">return</span> factory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注入之后即可直接使用了</li>
</ul>
<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="GET（获取数据）"><a href="#GET（获取数据）" class="headerlink" title="GET（获取数据）"></a>GET（获取数据）</h3><h4 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h4><ul>
<li>安全幂等操作</li>
<li>先创建一个GET请求的controller，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过get请求方式</div><div class="line"> * <span class="doctag">@param</span> id </div><div class="line"> * <span class="doctag">@param</span> name</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span>String name)</span>&#123;</div><div class="line">	Dept dept=<span class="keyword">new</span> Dept();</div><div class="line">	dept.setDepetId(id);</div><div class="line">	dept.setDepetName(name);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h4><ul>
<li><code>public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用RestTemplate的getForObject()发出get请求</div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name) <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	<span class="comment">//使用一个Map封装Get请求的参数，其中key一定要和uri中的占位符一致</span></div><div class="line">	Map&lt;String, Object&gt; params=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">	params.put(<span class="string">"id"</span>, id);</div><div class="line">	params.put(<span class="string">"name"</span>, name);</div><div class="line">	Dept dept = restTemplate.getForObject(URL_PRFIX+<span class="string">"&#123;id&#125;/&#123;name&#125;"</span>, Dept.class,params);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>public &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用RestTemplate的getForObject()发出get请求</div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name) <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	<span class="comment">//直接在uri中拼接参数</span></div><div class="line">	Dept dept = restTemplate.getForObject(URL_PRFIX+id+<span class="string">"/"</span>+name, Dept.class);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用RestTemplate的getForObject()发出get请求</div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name) <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	<span class="comment">//使用&#123;id&#125;作为一个占位符，第三个参数是用来设置这个占位符的值，当然可以有多个占位符</span></div><div class="line">	Dept dept = restTemplate.getForObject(URL_PRFIX+<span class="string">"&#123;id&#125;/&#123;name&#125;"</span>, Dept.class, id,name);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>以上三种形式的请求都是大同小异的，只是入参的方式不同罢了</li>
</ul>
<h3 id="POST（新建、添加）"><a href="#POST（新建、添加）" class="headerlink" title="POST（新建、添加）"></a>POST（新建、添加）</h3><ul>
<li>不安全</li>
<li><code>public &lt;T&gt; T postForObject(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</code><ul>
<li>第一个参数是请求的uri</li>
<li>第二个参数是添加的数据</li>
<li>第三个是返回的数据类型</li>
</ul>
</li>
<li><code>public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType,Map&lt;String, ?&gt; uriVariables)</code><ul>
<li>前三个参数同上</li>
<li>第四个参数是用来封装过滤参数的（?后面的）</li>
</ul>
</li>
<li><code>public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType,Object... uriVariables)</code><ul>
<li>同上</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 新建数据</div><div class="line"> */</div><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/dept"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(@RequestBody Dept dept)</span> <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	Dept dept2 = restTemplate.postForObject(<span class="keyword">new</span> URI(URL_PRFIX), dept, Dept.class);</div><div class="line">	<span class="keyword">return</span> dept2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PUT（更新）"><a href="#PUT（更新）" class="headerlink" title="PUT（更新）"></a>PUT（更新）</h3><ul>
<li><code>public void put(URI url, @Nullable Object request)</code><ul>
<li>第一个参数是地址</li>
<li>第二个参数是更新需要提交的数据</li>
</ul>
</li>
<li><code>public void put(String url, @Nullable Object request, Object... uriVariables)</code><ul>
<li>前两个参数同上</li>
<li>第二个参数是封装需要过滤的数据（？后面的数据）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新数据</div><div class="line"> * <span class="doctag">@param</span> dept</div><div class="line"> * <span class="doctag">@throws</span> RestClientException</div><div class="line"> * <span class="doctag">@throws</span> URISyntaxException</div><div class="line"> */</div><div class="line"><span class="meta">@PutMapping</span>(<span class="string">"/dept"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyDept</span><span class="params">(@RequestBody Dept dept)</span> <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	restTemplate.put(<span class="keyword">new</span> URI(URL_PRFIX), dept);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DELETE（删除）"><a href="#DELETE（删除）" class="headerlink" title="DELETE（删除）"></a>DELETE（删除）</h3><ul>
<li><code>public void delete(URI url)</code><ul>
<li>第一个参数是地址</li>
</ul>
</li>
<li><code>public void delete(String url, Object... uriVariables)</code><ul>
<li>第一个参数是地址</li>
<li>第二个参数是过滤参数（？后面的）</li>
</ul>
</li>
<li><code>public void delete(String url, Map&lt;String, ?&gt; uriVariables)</code><ul>
<li>第二个参数是过滤参数（？后面的）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除数据</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> */</div><div class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</div><div class="line">	restTemplate.delete(URL_PRFIX+<span class="string">"/&#123;id&#125;"</span>, id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html" target="_blank" rel="external">RESTful API 最佳实践</a></li>
<li><p><a href="https://www.cnblogs.com/softidea/p/5977375.html" target="_blank" rel="external">https://www.cnblogs.com/softidea/p/5977375.html</a></p>
</li>
<li><p><a href="https://blog.csdn.net/itguangit/article/details/80198895" target="_blank" rel="external">https://blog.csdn.net/itguangit/article/details/80198895</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot集成RestTemplate&quot;&gt;&lt;a href=&quot;#SpringBoot集成RestTemplate&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot集成RestTemplate&quot;&gt;&lt;/a&gt;SpringBoot集成Re
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>java nio</title>
    <link href="http://chenjiabing666.github.io/2018/12/01/java-nio/"/>
    <id>http://chenjiabing666.github.io/2018/12/01/java-nio/</id>
    <published>2018-12-01T14:05:47.000Z</published>
    <updated>2018-12-01T14:06:56.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓冲区（Buffer）"><a href="#缓冲区（Buffer）" class="headerlink" title="缓冲区（Buffer）"></a>缓冲区（Buffer）</h2><ul>
<li>负责数据的存取，实际上就是一个数组，用于存储不同的数据</li>
<li>除了布尔类型之后，其他类型都有，最常用的就是<code>ByteBuffer</code></li>
</ul>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul>
<li><code>allocate(int capacity)</code>： 分配指定大小的缓冲区（非直接缓冲区）</li>
<li><code>allocateDirect(int capacity)</code>： 分配指定大小的缓冲区（直接缓冲区）</li>
<li><code>put()</code>：向缓冲区中存储数据</li>
<li><code>get(byte[] dst)</code>：从缓冲区获取数据，这里的dst的容量必须和缓冲区的大小一致</li>
<li><code>get(byte[] dst,int offest,int length)</code> ：读取指定长度的内容到dst中，这里的dst容量没有要求</li>
<li><code>flip()</code>： 缓冲区从写模式切换到读模式</li>
<li><code>clear()</code>：清空缓冲区，数据依然存在，只是处于一个“被遗忘”状态，改变的只是<code>limit</code>和<code>position</code></li>
<li><code>array()</code> ：返回实现此缓冲区的 byte 数组 </li>
<li><code>mark()</code>： 标记当前位置（position）</li>
<li><code>reset()</code>：恢复到mark的位置</li>
</ul>
<h3 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h3><ul>
<li><code>capacity</code>：容量，表示缓冲区的最大容量，一旦声明不能改变</li>
<li><code>limit</code>： 界限，缓冲区中可以操作的数据的大小，实际存储数据的大小，limit之后的数据不能进行读写</li>
<li><code>position</code>：位置，表示缓冲区中正在操作数据的位置</li>
<li><code>position&lt;=limit&lt;=capacity</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">	String str=<span class="string">"abcd"</span>;</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//分配1024个字节大小的缓冲区</span></div><div class="line">	buffer.put(str.getBytes());  <span class="comment">//写入数据</span></div><div class="line">	System.out.println(buffer.capacity());  <span class="comment">//容量 1024</span></div><div class="line">	System.out.println(buffer.limit()); <span class="comment">//界限，1024</span></div><div class="line">	System.out.println(buffer.position());  <span class="comment">//正在操作数据的位置  0</span></div><div class="line">	</div><div class="line">	buffer.flip();   <span class="comment">//切换到读模式，读取数据的时候一定要切换，否则将会没有界限</span></div><div class="line">	</div><div class="line">	System.out.println(buffer.capacity());  <span class="comment">//容量 1024</span></div><div class="line">	System.out.println(buffer.limit()); <span class="comment">//界限，4，允许读取的位置只能到4，因为就存储了这么多的数据</span></div><div class="line">	System.out.println(buffer.position());  <span class="comment">//正在操作数据的位置  0</span></div><div class="line">	System.err.println(buffer.get(<span class="number">4</span>));   <span class="comment">//超出界限了，下标记从0开始，0&lt;=index&lt;limit</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取缓冲区中的数据到指定的字节数组中</div><div class="line"> * 1、字节数组的大小一定要和buffer.limit()一样大小，否则会报错</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">	String str=<span class="string">"abcdefg"</span>;</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//申请空间大小</span></div><div class="line">	buffer.put(str.getBytes());  <span class="comment">//存入数据</span></div><div class="line">	buffer.flip();   <span class="comment">//切换到读模式</span></div><div class="line">	<span class="comment">//申请一个字节数组和实际数据一样大,这里必须和缓冲区的实际数据大小一样，否则将会报错</span></div><div class="line">	<span class="keyword">byte</span>[] dst=<span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()]; </div><div class="line">	buffer.get(dst);   <span class="comment">//读取缓冲区的数据到dst字节数组中</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(dst));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取一个字节</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">	String str=<span class="string">"abcdefg"</span>;</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">10</span>);  <span class="comment">//申请空间大小</span></div><div class="line">	buffer.put(str.getBytes());  <span class="comment">//存入数据</span></div><div class="line">	buffer.flip();   <span class="comment">//切换到读模式</span></div><div class="line">	System.out.println((<span class="keyword">char</span>)buffer.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试remark和reset</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 测试remark和rest</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">		ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">		String str=<span class="string">"abcdcdscdscds"</span>;</div><div class="line">		buffer.put(str.getBytes());   <span class="comment">//向缓冲区中写入数据</span></div><div class="line">		buffer.flip();  <span class="comment">//切换到读的模式</span></div><div class="line">		<span class="keyword">byte</span>[] dst=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];   <span class="comment">//创建byte数组</span></div><div class="line">		System.out.println(<span class="string">"---------------------读取两个字节的数据----------------------------"</span>);</div><div class="line">		buffer.get(dst,<span class="number">0</span>,<span class="number">2</span>);   <span class="comment">//读取两个字节长度的数据到dst中，此时的position的位置位2</span></div><div class="line">		System.out.println(<span class="keyword">new</span> String(dst));</div><div class="line">		System.out.println(<span class="string">"----------------------标记此时的位置------------------------------"</span>);</div><div class="line">		buffer.mark();  <span class="comment">//标记位置，此时的position的位置位2</span></div><div class="line">		System.out.println(<span class="string">"---------------------继续读取两个字节的数据----------------------------"</span>);</div><div class="line">		buffer.get(dst,buffer.position(),<span class="number">2</span>);  <span class="comment">//继续从当前位置读取两个字节到dst中</span></div><div class="line">		System.out.println(<span class="keyword">new</span> String(dst));</div><div class="line">		System.out.println(buffer.position());  <span class="comment">//此时的position的位置为4</span></div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"---------------------重置缓冲区到remark的位置----------------------------"</span>);</div><div class="line">		buffer.reset();  <span class="comment">//重置缓冲区到rmark的位置</span></div><div class="line">		System.out.println(buffer.position());   <span class="comment">//此时的position为2</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="直接缓冲区"><a href="#直接缓冲区" class="headerlink" title="直接缓冲区"></a>直接缓冲区</h3><ul>
<li>直接字节缓冲区可以通过调用此类的 <code>allocateDirect()</code>工厂方法 来创建。此方法返回的 缓冲区进行分配和取消分配所需成本通常高于非直接缓冲区 。直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此，它们对应用程序的内存需求量造成的影响可能并不明显。所以，建议将直接缓冲区主要分配给那些易受基础系统的机 本机 I/O 操作影响的大型、持久的缓冲区。一般情况下，最好仅在直接缓冲区能在程序性能方面带来明显好处时分配它们。</li>
<li><img src="http://upload-images.jianshu.io/upload_images/8244809-fcb728300855e16b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接缓冲区"></li>
</ul>
<h3 id="非直接缓冲区"><a href="#非直接缓冲区" class="headerlink" title="非直接缓冲区"></a>非直接缓冲区</h3><ul>
<li>在JVM中内存中创建，在每次调用基础操作系统的一个本机IO之前或者之后，虚拟机都会将缓冲区的内容复制到中间缓冲区（或者从中间缓冲区复制内容），缓冲区的内容驻留在JVM内，因此销毁容易，但是占用JVM内存开销，处理过程中有复制操作。</li>
<li><p><img src="http://upload-images.jianshu.io/upload_images/8244809-7cb17b790f670380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非直接缓冲区"></p>
<ul>
<li>写入步骤如下：<ol>
<li>创建一个临时的直接ByteBuffer对象。</li>
<li>将非直接缓冲区的内容复制到临时缓冲中。</li>
<li>使用临时缓冲区执行低层次I/O操作。</li>
<li>临时缓冲区对象离开作用域，并最终成为被回收的无用数据。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="通道（Channel）"><a href="#通道（Channel）" class="headerlink" title="通道（Channel）"></a>通道（Channel）</h2><ul>
<li>通道是双向的，流是单向的</li>
<li>通道相当于输出和输入流</li>
<li>主要的实现类如下：<ul>
<li><code>FileChannel</code>：文件的操作</li>
<li><code>SocketChannel</code>：TCP</li>
<li><code>ServerSocketChannel</code>：TCP</li>
<li><code>DatagramChannel</code>：UDP</li>
</ul>
</li>
</ul>
<h3 id="获取通道"><a href="#获取通道" class="headerlink" title="获取通道"></a>获取通道</h3><ol>
<li>本地IO，提供了<code>getChannel()</code>方法获取通道<ol>
<li><code>FileInputStream</code></li>
<li><code>FileOutputStram</code></li>
<li><code>RandomAccessFile</code></li>
</ol>
</li>
<li>在JDK1.7中的NIO，针对各个通道提供了静态方法<code>open()</code></li>
<li>在JDK1.7中的NIO的Files工具类的<code>newByteChannel()</code></li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>利用通道实现文件的复制（非直接缓冲区）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用getChannel获取通道,实现文件的复制</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	FileInputStream inputStream=<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"C:/images/lifecrystal.png"</span>));</div><div class="line">	FileOutputStream outputStream=<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"C:/images/2.png"</span>));</div><div class="line">	</div><div class="line">	FileChannel inchannel = inputStream.getChannel();  <span class="comment">//获取通道，用于读取</span></div><div class="line">	FileChannel outchannel=outputStream.getChannel();  <span class="comment">//获取通道，用于写入</span></div><div class="line">	</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//申请缓冲区</span></div><div class="line">	<span class="comment">//将通道中的数据写入缓冲区</span></div><div class="line">	<span class="keyword">while</span> (inchannel.read(buffer)!=-<span class="number">1</span>) &#123;</div><div class="line">		buffer.flip(); <span class="comment">//切换到读模式</span></div><div class="line">		<span class="comment">//将缓冲区中的数据写入通道</span></div><div class="line">		outchannel.write(buffer);  </div><div class="line">		buffer.clear();  <span class="comment">//清空缓冲区，继续读取数据</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//关闭通道</span></div><div class="line">	inchannel.close();</div><div class="line">	outchannel.close();</div><div class="line">	inputStream.close();</div><div class="line">	outchannel.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用直接缓冲区完成文件的复制，使用open()的方法获取通道</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用直接缓冲区完成文件的复制</div><div class="line">	 * 使用open()的方法获取通道</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="comment">//获取一个读取数据的通道，使用的读模式</span></div><div class="line">		FileChannel inchannel=FileChannel.open(Paths.get(<span class="string">"C:/images/2.png"</span>), StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * StandardOpenOption.CREATE : 如果文件不存在，那么就创建，如果存在将会覆盖，不报错</div><div class="line">		 * StandardOpenOption.CREATE_NEW ： 如果不存在就创建，如果存在，将会报错</div><div class="line">		 */</div><div class="line">		FileChannel outchannel=FileChannel.open(Paths.get(<span class="string">"C:/images/3.png"</span>), StandardOpenOption.CREATE,StandardOpenOption.WRITE,StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		<span class="comment">//创建一个内存映射文件，操作直接缓冲区，和allocatDirect()一样，MapMode.READ_ONLY表示只读的模式，用于读取</span></div><div class="line">		MappedByteBuffer inMappedBuff = inchannel.map(MapMode.READ_ONLY, <span class="number">0</span>, inchannel.size());</div><div class="line">		</div><div class="line">		<span class="comment">//创建一个内容映射文件，MapMode.READ_WRITE表示读写模式，可以读写</span></div><div class="line">		MappedByteBuffer outMappedBuffer = outchannel.map(MapMode.READ_WRITE, <span class="number">0</span>, inchannel.size());</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span>[] dst=<span class="keyword">new</span> <span class="keyword">byte</span>[inMappedBuff.limit()];</div><div class="line">		<span class="comment">//将数据读入到dst中</span></div><div class="line">		inMappedBuff.get(dst);</div><div class="line">		</div><div class="line">		<span class="comment">//将数据从dst中读取到outMappedBuffer</span></div><div class="line">		outMappedBuffer.put(dst);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="通道之间指定进行数据传输"><a href="#通道之间指定进行数据传输" class="headerlink" title="通道之间指定进行数据传输"></a>通道之间指定进行数据传输</h3><ul>
<li><code>transferTo(long position,long count,WritableByteChannel target)</code>:将数据从通道写入可写的通道target中</li>
<li><code>transferFrom(ReadableByteChannel from,long position,long count)</code>：将数据从通道from中读取到通道中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 通道之间直接进行传输</div><div class="line">	 * 	1、transferTo(long position,long count,WritableByteChannel target):将数据从通道写入可写的通道target中</div><div class="line">	 * 	2、transferFrom(ReadableByteChannel from,long position,long count)：将数据从通道from中读取到通道中</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="comment">//获取一个读取数据的通道，使用的读模式</span></div><div class="line">		FileChannel inchannel = FileChannel.open(Paths.get(<span class="string">"C:/images/2.png"</span>),</div><div class="line">				StandardOpenOption.READ);</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * StandardOpenOption.CREATE : 如果文件不存在，那么就创建，如果存在将会覆盖，不报错</div><div class="line">		 * StandardOpenOption.CREATE_NEW ： 如果不存在就创建，如果存在，将会报错</div><div class="line">		 */</div><div class="line">		FileChannel outchannel=FileChannel.open(Paths.get(<span class="string">"C:/images/4.png"</span>), StandardOpenOption.CREATE,StandardOpenOption.WRITE,StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		<span class="comment">//将通道inchannel中的数据直接写入outchannel中</span></div><div class="line">		inchannel.transferTo(<span class="number">0</span>, inchannel.size(), outchannel);</div><div class="line">		</div><div class="line">		<span class="comment">//和上面一样的效果</span></div><div class="line"><span class="comment">//		outchannel.transferFrom(inchannel, 0, inchannel.size());</span></div><div class="line">		</div><div class="line">		inchannel.close();</div><div class="line">		outchannel.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="分散读取"><a href="#分散读取" class="headerlink" title="分散读取"></a>分散读取</h3><ul>
<li>将通道中的数据分散到各个缓冲区中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 分散读取：将通道中的数据写入各个缓冲区中，是按照顺序写入的，第一个缓冲区写满才会写入第二个缓冲区</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建读写模式的RandomAccessFile</span></div><div class="line">	RandomAccessFile accessFile=<span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"C:/images/2.png"</span>), <span class="string">"rw"</span>);</div><div class="line">	FileChannel inchannel=accessFile.getChannel(); <span class="comment">//读取</span></div><div class="line">	</div><div class="line">	ByteBuffer buffer1=ByteBuffer.allocate(<span class="number">10</span>); <span class="comment">//第一个缓冲区，10个字节大小</span></div><div class="line">	ByteBuffer buffer2=ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//第二个缓冲区</span></div><div class="line">	</div><div class="line">	ByteBuffer[] dst=&#123;buffer1,buffer2&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//分散读取</span></div><div class="line">	inchannel.read(dst);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (ByteBuffer byteBuffer : dst) &#123;</div><div class="line">		byteBuffer.flip();  <span class="comment">//切换到读的模式</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//输出第一个缓冲区的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer1.array()));</div><div class="line">	</div><div class="line">	<span class="comment">//输出第二个缓冲区中的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer2.array()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="聚集写入"><a href="#聚集写入" class="headerlink" title="聚集写入"></a>聚集写入</h3><ul>
<li>将各个缓冲区的数据读入到通道中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建读写模式的RandomAccessFile</span></div><div class="line">	RandomAccessFile accessFile=<span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"C:/images/2.png"</span>), <span class="string">"rw"</span>);</div><div class="line">	FileChannel inchannel=accessFile.getChannel(); <span class="comment">//读取</span></div><div class="line">	</div><div class="line">	ByteBuffer buffer1=ByteBuffer.allocate(<span class="number">10</span>); <span class="comment">//第一个缓冲区，10个字节大小</span></div><div class="line">	ByteBuffer buffer2=ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//第二个缓冲区</span></div><div class="line">	</div><div class="line">	ByteBuffer[] dst=&#123;buffer1,buffer2&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//分散读取</span></div><div class="line">	inchannel.read(dst);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (ByteBuffer byteBuffer : dst) &#123;</div><div class="line">		byteBuffer.flip();  <span class="comment">//切换到读的模式</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//输出第一个缓冲区的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer1.array()));</div><div class="line">	</div><div class="line">	<span class="comment">//输出第二个缓冲区中的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer2.array()));</div><div class="line">	</div><div class="line">	System.out.println(<span class="string">"---------------------聚集写入-------------------"</span>);</div><div class="line">	</div><div class="line">	RandomAccessFile accessFile2=<span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"C:/images/6.png"</span>), <span class="string">"rw"</span>);</div><div class="line">	FileChannel outChannel=accessFile2.getChannel();   <span class="comment">//写入数据的通道</span></div><div class="line">	<span class="comment">//聚集写入，将数据从各个缓冲区中写入到通道中</span></div><div class="line">	outChannel.write(dst); </div><div class="line">	</div><div class="line">	inchannel.close();</div><div class="line">	outChannel.close();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="NIO阻塞式"><a href="#NIO阻塞式" class="headerlink" title="NIO阻塞式"></a>NIO阻塞式</h3><ul>
<li>阻塞或者不阻塞是针对<code>SocketChannel</code>，<code>ServerSocketChannel</code></li>
<li>NIO中的套接字可以轻松在阻塞和非阻塞之间切换，这里我们使用NIO实现阻塞式的TCP数据传输</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 客户端使用SocketChannel</div><div class="line">	 * 客户端使用SocketChannel中的write()方法向服务端发送数据，使用read()读取服务端返回的反馈</div><div class="line">	 * 在数据发送完成之后如果不调用shutdownOutput告知服务端数据已传送完成，那么将会一直阻塞下去</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClient</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//获取通道</span></div><div class="line">		SocketChannel clientChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">9898</span>));</div><div class="line">		</div><div class="line">		FileChannel inchannel = FileChannel.open(Paths.get(<span class="string">"C:/images/2.png"</span>), StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//循环读取本地图片，并且发送到服务端</span></div><div class="line">		<span class="comment">//1、先使用FileChannel将数据读取到缓冲区中</span></div><div class="line">		<span class="comment">//2、再使用SocketChannel的write方法将缓冲区的数据发送到服务端</span></div><div class="line">		<span class="keyword">while</span>(inchannel.read(buffer)!=-<span class="number">1</span>)&#123;</div><div class="line">			buffer.flip(); <span class="comment">//切换读模式</span></div><div class="line">			clientChannel.write(buffer);  <span class="comment">//发送数据</span></div><div class="line">			buffer.clear(); <span class="comment">//清空缓冲区</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//告诉服务端数据已经传送完成，否则将会一直阻塞</span></div><div class="line">		clientChannel.shutdownOutput();  </div><div class="line">		</div><div class="line">		<span class="comment">//接收服务端的反馈</span></div><div class="line">		<span class="comment">//使用read()方法接收服务端的反馈，将其读入到缓冲区中</span></div><div class="line">		<span class="keyword">while</span>(clientChannel.read(buffer)&gt;<span class="number">0</span>)&#123;</div><div class="line">			buffer.flip();  <span class="comment">//切换读模式</span></div><div class="line">			System.out.println(<span class="string">"服务端："</span>+<span class="keyword">new</span> String(buffer.array()));</div><div class="line">			buffer.clear();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//关闭通道</span></div><div class="line">		inchannel.close();</div><div class="line">		clientChannel.close();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 服务端使用ServerSocketChannel</div><div class="line">	 * 服务端使用SocketChannel的read()方法读取客户端发送的数据，使用write()方法向客户端返回数据</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testServer</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//获取服务端的通道</span></div><div class="line">		ServerSocketChannel serverChannel = ServerSocketChannel.open();</div><div class="line">		</div><div class="line">		<span class="comment">//绑定连接</span></div><div class="line">		serverChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</div><div class="line">		</div><div class="line">		<span class="comment">//获取客户端的连接通道</span></div><div class="line">		SocketChannel clientChannel = serverChannel.accept();</div><div class="line">		</div><div class="line">		<span class="comment">//申请缓冲区</span></div><div class="line">		ByteBuffer byteBuffer=ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">		FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"C:/images/12.png"</span>), StandardOpenOption.WRITE,StandardOpenOption.CREATE);</div><div class="line">		</div><div class="line">		<span class="comment">//循环接收客户端发送过来的数据，并且将其保存在本地</span></div><div class="line">		<span class="keyword">while</span>(clientChannel.read(byteBuffer)&gt;<span class="number">0</span>)&#123;</div><div class="line">			byteBuffer.flip(); <span class="comment">//切换读模式</span></div><div class="line">			outChannel.write(byteBuffer);  <span class="comment">//写入到本地</span></div><div class="line">			byteBuffer.clear(); <span class="comment">//清空缓冲区</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//服务端发送反馈信息给客户端，使用的还是SocketChannel的write方法</span></div><div class="line">		byteBuffer.put(<span class="string">"服务端接收数据成功"</span>.getBytes());</div><div class="line">		byteBuffer.flip(); <span class="comment">//切换模式</span></div><div class="line">		clientChannel.write(byteBuffer);</div><div class="line">		clientChannel.shutdownOutput();  <span class="comment">//告知客户端传输完成</span></div><div class="line">		</div><div class="line">		<span class="comment">//关闭通道</span></div><div class="line">		outChannel.close();</div><div class="line">		clientChannel.close();</div><div class="line">		serverChannel.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="Selector（选择器）"><a href="#Selector（选择器）" class="headerlink" title="Selector（选择器）"></a>Selector（选择器）</h2><ul>
<li>总的来说，选择器是对通道进行监听，这样就会避免阻塞的发生，实现了多路复用</li>
</ul>
<h3 id="SelectionKey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h3><ul>
<li><p>某个Channel成功连接到另一个服务器称为“ <strong>连接就绪</strong> ”。一个Server Socket Channel准备好接收新进入的连接称为“ <strong>接收就绪</strong> ”。一个有数据可读的通道可以说是“ <strong>读就绪</strong> ”。等待写数据的通道可以说是“ <strong>写就绪</strong> ”。 </p>
</li>
<li><p>选择器是用来轮询监听通道的状态，其中有四种状态如下：</p>
<ul>
<li><code>SelectionKey.OP_CONNECT</code>：连接就绪</li>
<li><code>SelectionKey.OP_ACCEPT</code>：接收就绪</li>
<li><code>SelectionKey.OP_READ</code>：读就绪</li>
<li><code>SelectionKey.OP_WRITE</code>：写就绪</li>
</ul>
</li>
</ul>
<h3 id="NIO非阻塞式"><a href="#NIO非阻塞式" class="headerlink" title="NIO非阻塞式"></a>NIO非阻塞式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 客户端需要使用configureBlocking(false)设置成非阻塞模式的</div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClient</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	<span class="comment">//获取通道</span></div><div class="line">	SocketChannel client = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">9898</span>));</div><div class="line">	<span class="comment">//切换成非阻塞模式</span></div><div class="line">	client.configureBlocking(<span class="keyword">false</span>);</div><div class="line">	</div><div class="line">	ByteBuffer buf=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//申请缓冲区</span></div><div class="line">	</div><div class="line">	Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">	<span class="keyword">while</span>(scanner.hasNext())&#123;</div><div class="line">		String line=scanner.next();  <span class="comment">//读取控制台输入的内容</span></div><div class="line">		buf.put((<span class="keyword">new</span> Date().toString()+<span class="string">"\n"</span>+line).getBytes());  <span class="comment">//向缓冲区写入数据</span></div><div class="line">		buf.flip(); <span class="comment">//切换到读模式</span></div><div class="line">		client.write(buf);  <span class="comment">//向服务端发送数据</span></div><div class="line">		buf.clear();  <span class="comment">//清空缓存区</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	scanner.close();</div><div class="line">	client.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 服务端</div><div class="line"> * 1、将通道注册到选择器中，并且指定监听的事件</div><div class="line"> * 2、程序每次都会轮询的从选择器中选择事件，可以选择不同状态的通道进行操作</div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testServer</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	<span class="comment">//获取通道</span></div><div class="line">	ServerSocketChannel server = ServerSocketChannel.open();</div><div class="line">	</div><div class="line">	<span class="comment">//绑定端口</span></div><div class="line">	server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</div><div class="line">	</div><div class="line">	<span class="comment">//配置非阻塞</span></div><div class="line">	server.configureBlocking(<span class="keyword">false</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取选择器</span></div><div class="line">	Selector selector = Selector.open();</div><div class="line">	</div><div class="line">	<span class="comment">//将通道注册到选择器上，并且知道指定监听的事件为"接收就绪"</span></div><div class="line">	server.register(selector, SelectionKey.OP_ACCEPT);</div><div class="line">	</div><div class="line">	<span class="comment">//轮询式获取选择器上已经准备就绪的事件</span></div><div class="line">	<span class="keyword">while</span>(selector.select()&gt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="comment">//获取当前选择器中所有的选择键(已经准备就绪的)</span></div><div class="line">		Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</div><div class="line">		</div><div class="line">		<span class="comment">//获取迭代器</span></div><div class="line">		Iterator&lt;SelectionKey&gt; iterator = keys.iterator();</div><div class="line">		</div><div class="line">		<span class="comment">//迭代器遍历所有的选择键</span></div><div class="line">		<span class="keyword">while</span>(iterator.hasNext())&#123;</div><div class="line">			<span class="comment">//获取当前选择键</span></div><div class="line">			SelectionKey key = iterator.next();</div><div class="line">			iterator.remove(); <span class="comment">//删除选择键</span></div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (key.isAcceptable()) &#123;  <span class="comment">//如果接收就绪了 </span></div><div class="line">				SocketChannel client = server.accept();  <span class="comment">//获取SocketChannel</span></div><div class="line">				client.configureBlocking(<span class="keyword">false</span>);  <span class="comment">//设置非阻塞模式</span></div><div class="line">				client.register(selector, SelectionKey.OP_READ);  <span class="comment">//将此通道注册到选择器中，指定监听的事件是读就绪</span></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())&#123;  <span class="comment">//如果读就绪</span></div><div class="line">				SocketChannel client = (SocketChannel) key.channel();  <span class="comment">//读就绪了，那么可以获取通道直接读取数据</span></div><div class="line">				ByteBuffer buf=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//声明一个缓冲区</span></div><div class="line">				<span class="comment">//循环接收客户端的到缓冲区中</span></div><div class="line">				<span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">				<span class="keyword">while</span>((len=client.read(buf))&gt;<span class="number">0</span>)&#123;</div><div class="line">					buf.flip();</div><div class="line">					System.out.println(<span class="keyword">new</span> String(buf.array(),<span class="number">0</span>,len));</div><div class="line">					buf.clear();</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;  <span class="comment">//如果写就绪</span></div><div class="line">				</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;  <span class="comment">//如果连接就绪</span></div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	server.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.cnblogs.com/tengpan-cn/p/5809273.html" target="_blank" rel="external">https://www.cnblogs.com/tengpan-cn/p/5809273.html</a></li>
<li><a href="http://ifeve.com/overview/" target="_blank" rel="external">并发编程网</a></li>
<li><a href="http://www.cnblogs.com/snailclimb/p/9086334.html" target="_blank" rel="external">http://www.cnblogs.com/snailclimb/p/9086334.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓冲区（Buffer）&quot;&gt;&lt;a href=&quot;#缓冲区（Buffer）&quot; class=&quot;headerlink&quot; title=&quot;缓冲区（Buffer）&quot;&gt;&lt;/a&gt;缓冲区（Buffer）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;负责数据的存取，实际上就是一个数组，用于存储不同的数据&lt;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件之Rabbitmq</title>
    <link href="http://chenjiabing666.github.io/2018/11/15/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BRabbitmq/"/>
    <id>http://chenjiabing666.github.io/2018/11/15/消息中间件之Rabbitmq/</id>
    <published>2018-11-15T14:15:01.000Z</published>
    <updated>2018-11-15T14:16:19.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ【消息中间件】"><a href="#RabbitMQ【消息中间件】" class="headerlink" title="RabbitMQ【消息中间件】"></a>RabbitMQ【消息中间件】</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>RabbitMQ是实现AMQP（高级消息队列协议）的消息中间件的一种，最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</li>
<li>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</li>
<li><strong>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</strong></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><code>docker pull rabbitmq:3.7-management</code></li>
<li><code>docker run --name rabbitmq -p 15672:15672 -p 5672:5672 -d df80af9ca0c9</code></li>
<li>安装运行成功之后访问：<code>http://[ip]:15672</code>即可登录</li>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/rabbit1.png?raw=true" alt="示例图"></li>
</ul>
<h2 id="四种类型的交换器（exchange）"><a href="#四种类型的交换器（exchange）" class="headerlink" title="四种类型的交换器（exchange）"></a>四种类型的交换器（exchange）</h2><ul>
<li><a href="https://baijiahao.baidu.com/s?id=1577456875919174629&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">https://baijiahao.baidu.com/s?id=1577456875919174629&amp;wfr=spider&amp;for=pc</a></li>
</ul>
<h3 id="direct（点对点、单播，直连）"><a href="#direct（点对点、单播，直连）" class="headerlink" title="direct（点对点、单播，直连）"></a>direct（点对点、单播，直连）</h3><ul>
<li>直连型交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应队列的 </li>
</ul>
<h3 id="fanout（扇形，广播模式，订阅模式）"><a href="#fanout（扇形，广播模式，订阅模式）" class="headerlink" title="fanout（扇形，广播模式，订阅模式）"></a>fanout（扇形，广播模式，订阅模式）</h3><ul>
<li>扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列。不同于直连交换机，路由键在此类型上不启任务作用。如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的发送给这所有的N个队列</li>
<li>路由键对这个交换机 不起作用，只要发送给扇形交换机的消息，那么都会发送给和其绑定的所有队列</li>
</ul>
<h3 id="topic（主题）"><a href="#topic（主题）" class="headerlink" title="topic（主题）"></a>topic（主题）</h3><ul>
<li><p>直连交换机的<code>routing_key</code>方案非常简单，如果我们希望一条消息发送给多个队列，那么这个交换机需要绑定上非常多的<code>routing_key</code>，假设每个交换机上都绑定一堆的<code>routing_key</code>连接到各个队列上。那么消息的管理就会异常地困难。</p>
</li>
<li><p>所以<code>RabbitMQ</code>提供了一种主题交换机，发送到主题交换机上的消息需要携带指定规则的<code>routing_key</code>，主题交换机会根据这个规则将数据发送到对应的(多个)队列上。</p>
<p>主题交换机的<code>routing_key</code>需要有一定的规则，交换机和队列的<code>binding_key</code>需要采用<code>*.#.*.....</code>的格式，每个部分用<code>.</code>分开，其中：</p>
<ul>
<li><code>*</code>表示一个<strong>单词</strong><ul>
<li><code>rabbit.*</code>能够匹配到<code>rabbit.new</code></li>
<li><code>rabbit.*</code>不能够匹配到<code>rabbit.new.old</code></li>
</ul>
</li>
<li><code>#</code>表示任意数量（零个或多个）<strong>单词</strong>。<ul>
<li><code>rabbit.#</code>能够匹配到<code>rabbit.new</code></li>
<li><code>rabbit.#</code>能够匹配到<code>rabbit.new.old</code></li>
</ul>
</li>
<li>假设有一条消息的<code>routing_key</code>为<code>fast.rabbit.white</code>,那么带有这样<code>binding_key</code>的几个队列都会接收这条消息</li>
</ul>
</li>
<li><p><img src="http://upload-images.jianshu.io/upload_images/1479657-48e5409a26f0c75b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ul>
<h3 id="header（头，首部）"><a href="#header（头，首部）" class="headerlink" title="header（头，首部）"></a>header（头，首部）</h3><ul>
<li>类似主题交换机，但是头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。 </li>
<li>此交换机有个重要参数：”x-match”</li>
<li>当”x-match”为“any”时，消息头的任意一个值被匹配就可以满足条件</li>
</ul>
<h3 id="交换机属性"><a href="#交换机属性" class="headerlink" title="交换机属性"></a>交换机属性</h3><ul>
<li>除交换机类型外，在声明交换机时还可以附带许多其他的属性，其中最重要的几个分别是：<ul>
<li><code>Name</code>：交换机名称</li>
<li><code>Durability</code>：是否持久化。如果持久性，则RabbitMQ重启后，交换机还存在</li>
<li><code>Auto-delete</code>：当所有与之绑定的消息队列都完成了对此交换机的使用后，删掉它</li>
</ul>
</li>
</ul>
<h2 id="Queue【队列】"><a href="#Queue【队列】" class="headerlink" title="Queue【队列】"></a>Queue【队列】</h2><ul>
<li>基本的属性如下：<ul>
<li><code>name</code>：名称</li>
<li><code>durable</code>：是否持久化，如果不持久化，那么重启后将会不存在</li>
<li><code>exclusive</code>：独享（只被一个连接（connection）使用，而且当连接关闭后队列即被删除） </li>
<li><code>autoDelete</code>：自动删除，当最后一个消费者退订后即被删除 </li>
<li><code>arguments</code>：其他</li>
</ul>
</li>
</ul>
<h2 id="springBoot整合RabbitMQ"><a href="#springBoot整合RabbitMQ" class="headerlink" title="springBoot整合RabbitMQ"></a>springBoot整合RabbitMQ</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- rabbitmq启动器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置连接信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring.rabbitmq.host=192.168.0.86    ## 主机地址</div><div class="line">spring.rabbitmq.port=5672           ## 端口</div><div class="line">spring.rabbitmq.username=admin     ## 用户名</div><div class="line">spring.rabbitmq.password=123456    ## 密码</div><div class="line">spring.rabbitmq.virtual-host=/    ## 虚拟主机，这里的用户名和密码一定要对这个虚拟主机有权限</div></pre></td></tr></table></figure>
<ul>
<li>配置一个Topic交换机和对应的队列，配置类如下，会自动创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Topic交换机的配置类</div><div class="line"> * 1、配置完成之后，当使用到的时候会自动创建，不需要手动的创建，当然使用rabbitAdmin也是可以手动创建的</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span>   <span class="comment">//指定这是一个配置类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建队列 queue1</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue_1"</span>,<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建队列 queue2</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Queue <span class="title">queue2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//指定名称和持久化</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue_2"</span>,<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建topic交换机</div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topic1</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"topic_1"</span>); </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将交换机topic1和队列queue1通过路邮键message_1绑定在一起</div><div class="line">	 * <span class="doctag">@param</span> topic1 交换机1 ，这里通过名称匹配，因为是通过<span class="doctag">@Bean</span>自动注入的</div><div class="line">	 * <span class="doctag">@param</span> queue1 队列1  这里通过名称匹配，因为是通过<span class="doctag">@Bean</span>自动注入的</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Binding <span class="title">bindTopic1AndQueu1</span><span class="params">(TopicExchange topic1,Queue queue1 )</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> BindingBuilder.bind(queue1).to(topic1).with(<span class="string">"message_1"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将交换机topic1和队列queue2通过路邮键message_2绑定在一起</div><div class="line">	 * <span class="doctag">@param</span> topic1</div><div class="line">	 * <span class="doctag">@param</span> queue1</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Binding <span class="title">bindTopic1AndQueu2</span><span class="params">(TopicExchange topic1,Queue queue2 )</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> BindingBuilder.bind(queue2).to(topic1).with(<span class="string">"message_2"</span>);</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动类添加注解<code>@EnableRabbit</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableRabbit</span>             <span class="comment">//开启rabbitmq</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span>  </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//继承SpringBootServletInitializer实现war包的发布</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(DemoApplication.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>发送消息和接受消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitServiceImpl</span> <span class="keyword">implements</span> <span class="title">RabbitServie</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate发送消息;</div><div class="line"></div><div class="line">    <span class="comment">//使用rabbitTemplate发送消息</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</div><div class="line">		Map&lt;String, Object&gt; map=<span class="keyword">new</span> HashedMap();</div><div class="line">		map.put(<span class="string">"name"</span>, <span class="string">"陈加兵"</span>);</div><div class="line">		rabbitTemplate.convertAndSend(<span class="string">"topic_1"</span>, <span class="string">"message_1"</span>, map);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">//使用rabbitTemplate接收消息</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		Map&lt;String, Object&gt; map=(Map&lt;String, Object&gt;) rabbitTemplate.receiveAndConvert(<span class="string">"queue_1"</span>);</div><div class="line">		System.out.println(map);</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RabbitTemplate"><a href="#RabbitTemplate" class="headerlink" title="RabbitTemplate"></a>RabbitTemplate</h3><ul>
<li>springBoot自动注入，直接使用即可</li>
<li><strong>实体类发送消息之前一定需要序列化</strong></li>
<li><strong>用于发送和接收消息</strong></li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li><code>void convertAndSend(String exchange, String routingKey, final Object object)</code> ：发送消息<ul>
<li><code>exchange</code>：交换机</li>
<li><code>routingKey</code>：路由键</li>
<li><code>object</code> ：需要发送的对象</li>
</ul>
</li>
<li><code>Object receiveAndConvert(String queueName)</code>：接收指定队列的消息<ul>
<li><code>queueName</code>：消息队列的名字</li>
</ul>
</li>
</ul>
<h3 id="RabbitAdmin"><a href="#RabbitAdmin" class="headerlink" title="RabbitAdmin"></a>RabbitAdmin</h3><ul>
<li>springBoot已经为我们自动注入了AmqpAdmin，用于创建交换机、队列、绑定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@ConditionalOnSingleCandidate</span>(ConnectionFactory.class)</div><div class="line">	<span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.rabbitmq"</span>, name = <span class="string">"dynamic"</span>, matchIfMissing = <span class="keyword">true</span>)</div><div class="line">	<span class="meta">@ConditionalOnMissingBean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> AmqpAdmin <span class="title">amqpAdmin</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RabbitAdmin(connectionFactory);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span> <span class="comment">// springBoot测试类，可以自定义测试类，不过需要引用这两个注解</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> AmqpAdmin amqpAdmin;   <span class="comment">//自动注入即可</span></div><div class="line">    </div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</div><div class="line">		DirectExchange directExchange = <span class="keyword">new</span> DirectExchange(<span class="string">"test_direct"</span>);</div><div class="line">		Queue queue = <span class="keyword">new</span> Queue(<span class="string">"direct_1"</span>, <span class="keyword">true</span>);</div><div class="line">		<span class="comment">// 创建一个直连的交换机</span></div><div class="line">		amqpAdmin.declareExchange(directExchange);</div><div class="line">		<span class="comment">// 创建一个队列</span></div><div class="line">		amqpAdmin.declareQueue(queue);</div><div class="line">		</div><div class="line">		<span class="comment">//创建绑定关系</span></div><div class="line">		amqpAdmin.declareBinding(BindingBuilder.bind(queue)</div><div class="line">				.to(directExchange).with(<span class="string">"direct_message"</span>));</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="消息监听"><a href="#消息监听" class="headerlink" title="消息监听"></a>消息监听</h3><ul>
<li>消息监听使用的注解是<code>@RabbitListener</code>，可以监听指定的队列，一旦这个队列中有消息了，那么就会执行</li>
<li>在启动类上添加<code>@EnableRabbit</code>开启基于注解的rabbit的消息监听</li>
</ul>
<h4 id="RabbitListener"><a href="#RabbitListener" class="headerlink" title="@RabbitListener"></a>@RabbitListener</h4><ul>
<li>消息监听的注解，可以监听一个或者多个队列，一旦队列中有了信息，那么就会执行，一旦被执行就意味着这条消息被消费了（不一定，后面会讲到消息确认机制，这里是默认会被消费的）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * rabbitmq的消息处理类</div><div class="line"> * <span class="doctag">@author</span> 陈加兵</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>  <span class="comment">//注入</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 使用<span class="doctag">@RabbitListener</span>这个注解监听指定的队列，一旦这个队列有了消息，那么将会执行</div><div class="line">	 * <span class="doctag">@param</span> log 消息的内容，如果接收的消息内容是log对象，那么将会被反序列化，存入这个log中</div><div class="line">	 * 消息一旦被监听到了并且被执行了，那么这条队列的消息将会被删除了</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Log log)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"------接收到消息----"</span>);</div><div class="line">		System.out.println(<span class="string">"消息内容为："</span>+log);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 使用org.springframework.amqp.core.Message对象来接收消息，可以显示消息头一些信息</div><div class="line">	 * <span class="doctag">@param</span> message</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received1</span><span class="params">(Message message)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"------接收到消息1----"</span>);</div><div class="line">		<span class="keyword">byte</span>[] body=message.getBody();</div><div class="line">		System.out.println(message.getMessageProperties());  </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="RabbitHandler"><a href="#RabbitHandler" class="headerlink" title="@RabbitHandler"></a>@RabbitHandler</h4><ul>
<li><code>@RabbitListener</code> 可以标注在类上面，需配合 @RabbitHandler 注解一起使用</li>
<li><code>@RabbitListener</code>标注在类上面表示当有收到消息的时候，就交给 @RabbitHandler 的方法处理，具体使用哪个方法处理，根据 MessageConverter 转换后的参数类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理消息的类，使用<span class="doctag">@RabbitListener</span>监听队列，结合<span class="doctag">@RabbitHandler</span>处理不同内容类型的消息</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)   <span class="comment">//监听direct_1这个队列的消息</span></div><div class="line"><span class="meta">@Component</span>   <span class="comment">//注入</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMessage</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 定义处理的方法是接收内容的类型为Log类型</div><div class="line">	 * <span class="doctag">@param</span> log</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receivedLog</span><span class="params">(Log log)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"接收了log对象"</span>);</div><div class="line">		System.out.println(log);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 定义接收内容为User类型的消息</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receivedMap</span><span class="params">(User user)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"接收了user对象"</span>);</div><div class="line">		System.out.println(user);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消息确认（SpringBoot整合）"><a href="#消息确认（SpringBoot整合）" class="headerlink" title="消息确认（SpringBoot整合）"></a>消息确认（SpringBoot整合）</h2><ul>
<li><p>消息确认可以分为<strong>事务模式</strong>（类似jdbc的操作），<strong>confirm</strong>模式（可以使用异步回调模式，更加高效）</p>
</li>
<li><p>rabbitmq默认是自动确认的，即是一条消息被发送了或者被消费了，无论你生产者或者消费者有没有发送或者消费成功，那么都是自动确认为已发送或者已接收了，但是在业务中接收了一条消息不一定就是成功消费了，如果这个业务没有正常完成，我们希望的是能够消息回滚，就像是mysql的事务机制，因此此时我们就需要手动确认这条消息被消费了，而不是自动确认</p>
</li>
<li>消息确认可以分为事务模式（类似jdbc的操作），confirm模式，具体的可以参考<a href="https://blog.csdn.net/u013256816/article/details/55515234" target="_blank" rel="external">https://blog.csdn.net/u013256816/article/details/55515234</a></li>
</ul>
<h3 id="confirm模式"><a href="#confirm模式" class="headerlink" title="confirm模式"></a>confirm模式</h3><ul>
<li><p>confirm不同于事务模式的地方是可以使用异步的确认模式</p>
</li>
<li><p>在配置文件中配置，如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 开启发送确认</div><div class="line">spring.rabbitmq.publisher-confirms=true</div><div class="line"># 开启发送失败退回</div><div class="line">spring.rabbitmq.publisher-returns=true</div><div class="line"># 开启ACK，开启之后只有手动提交才会消费消息</div><div class="line">spring.rabbitmq.listener.direct.acknowledge-mode=manual</div><div class="line">spring.rabbitmq.listener.simple.acknowledge-mode=manual</div></pre></td></tr></table></figure>
<h4 id="发送消息的确认"><a href="#发送消息的确认" class="headerlink" title="发送消息的确认"></a>发送消息的确认</h4><ul>
<li><code>ConfirmCallback</code> ： 这个是rabbitmq的确认的回调接口，当消息发送之后，会异步调用实现这个接口的方法</li>
<li><code>ReturnCallback</code> ：这个是rabbitmq的失败回调接口，当消息发送失败之后，会异步调用实现这个接口的方法</li>
<li>一个消息的发送的业务类如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 消息发送的业务层</div><div class="line"> * 		SendMessageService ： 发送消息的接口</div><div class="line"> * 		ConfirmCallback ： 消息发送成功的回调接口</div><div class="line"> * 		ReturnCallback ： 消息发送失败的回调接口（找不到对应的路由或者因为各种原因消息没有成功投递到rabbitmq中都会出发回调）</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月15日 下午4:45:37</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageServiceImpl</span> <span class="keyword">implements</span> <span class="title">SendMessageService</span>,<span class="title">ConfirmCallback</span>,<span class="title">ReturnCallback</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate;   <span class="comment">//注入rabbitMq的template，用于发送和消费消息</span></div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Logger logger=LoggerFactory.getLogger(SendMessageServiceImpl.class);   <span class="comment">//日志</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 消息发送失败的回调方法,实现ReturnCallback接口的方法</div><div class="line">	 * 	1、消息没有投递成功,包括没有找到对应的队列或者路由键</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode,</span></span></div><div class="line">			String replyText, String exchange, String routingKey) &#123;</div><div class="line">			logger.info(<span class="string">"返回的失败代码="</span>+replyCode+<span class="string">"  返回的失败信息="</span>+replyText);</div><div class="line">			logger.info(<span class="string">"交换机="</span>+exchange+<span class="string">"   绑定的路由键="</span>+routingKey);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 消息发送确认的回调方法</div><div class="line">	 * 如果消息没有到exchange,则confirm回调,ack=false</div><div class="line">	 * 如果消息到达exchange,则confirm回调,ack=true</div><div class="line">	 * 判断消息有没有成功发送，只需要判断ack的值，correlationData是发送消息的时候传递过来的值（String）</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack,</span></span></div><div class="line">			String cause) &#123;</div><div class="line">		<span class="comment">//如果ack==true，表示消息发送成功</span></div><div class="line">		<span class="keyword">if</span> (ack) &#123;</div><div class="line">			logger.info(<span class="string">"消息发送成功,下面开始处理业务。。。。。。。。。。。。。。。"</span>);</div><div class="line">			logger.info(<span class="string">"correlationData="</span>+correlationData);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			logger.info(<span class="string">"消息发送失败。。。。。。。。。。。。。。。。"</span>);</div><div class="line">			logger.info(<span class="string">"cause="</span>+cause);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 发送消息的方法</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Log log)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);   <span class="comment">//设置</span></div><div class="line">		rabbitTemplate.setReturnCallback(<span class="keyword">this</span>);</div><div class="line">		CorrelationData data=<span class="keyword">new</span> CorrelationData();   </div><div class="line">		data.setId(<span class="string">"success"</span>);   <span class="comment">//定义内容，在消息发送成功的回调方法中可以获取这个值</span></div><div class="line">		rabbitTemplate.convertAndSend(<span class="string">"amq.direct"</span>, <span class="string">"message"</span>, log,data);  <span class="comment">//发送消息</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="消费消息的确认"><a href="#消费消息的确认" class="headerlink" title="消费消息的确认"></a>消费消息的确认</h4><ul>
<li>开启ack之后，默认是不会自动消费的，只有手动ack才会被消费</li>
<li>手动ack和nack使用的类是<code>com.rabbitmq.client.Channel</code><ul>
<li><code>channel.basicAck()</code> ：手动ack<ul>
<li><code>deliveryTag</code>：该消息的index</li>
<li><code>multiple</code>：是否批量，如果为<code>true</code>将一次性ack所有小于deliveryTag的消息，如果为<code>false</code>，那么将ack当前的消息</li>
</ul>
</li>
<li><code>channel.basicNack(deliveryTag, multiple, requeue)</code><ul>
<li><code>deliveryTag</code>：该消息的index</li>
<li><code>multiple</code>：是否批量，如果为<code>true</code>将一次性ack所有小于deliveryTag的消息，如果为<code>false</code>，那么将ack当前的消息</li>
<li><code>requeue</code>：被丢弃消息是否重新进入队列，如果是true将会重新进入队列</li>
</ul>
</li>
</ul>
</li>
<li>实例如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</div><div class="line"><span class="keyword">import</span> com.techwells.demo.domain.Log;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 监听队列direct_1</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月15日 下午6:55:56</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivedMessageHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Logger logger=LoggerFactory.getLogger(ReceivedMessageHandler.class);</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 接收消息类型为Log的消息</div><div class="line">	 * 如果不手动提交的话，默认是不会被自动确认消费的，只有手动提交了，才会被真正的消费</div><div class="line">	 * <span class="doctag">@param</span> log   消息的实体类</div><div class="line">	 * <span class="doctag">@param</span> channel  </div><div class="line">	 * <span class="doctag">@param</span> message  rabbitmq的Message类</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span>  <span class="comment">//处理消息</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Log log,Channel channel,Message message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		logger.info(<span class="string">"成功接收到消息........"</span>+log);</div><div class="line">		channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);   <span class="comment">//手动提交ack，消费消息</span></div><div class="line"><span class="comment">//		channel.basicNack(message.getMessageProperties().getDeliveryTag(), true, true);</span></div><div class="line">		logger.info(<span class="string">"成功被消费。。。。。。。。。。"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 处理消息类型为String类型的消息</div><div class="line">	 * <span class="doctag">@param</span> str</div><div class="line">	 * <span class="doctag">@param</span> channel</div><div class="line">	 * <span class="doctag">@param</span> message</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span>  <span class="comment">//处理消息</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStringMessage</span><span class="params">(String str,Channel channel,Message message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		logger.info(<span class="string">"成功接收到消息........"</span>+str);</div><div class="line">		channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">true</span>);   <span class="comment">//nack，不消费这条消息，一般是业务失败才会不消费</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://www.kancloud.cn/yunxifd/rabbitmq/96997" target="_blank" rel="external">https://www.kancloud.cn/yunxifd/rabbitmq/96997</a></p>
<p>2、<a href="http://rabbitmq.mr-ping.com/" target="_blank" rel="external">中文文档</a></p>
<p>3、<a href="https://www.cnblogs.com/ityouknow/p/6120544.html" target="_blank" rel="external">https://www.cnblogs.com/ityouknow/p/6120544.html</a></p>
<p>4、<a href="https://my.oschina.net/lzhaoqiang/blog/670749" target="_blank" rel="external">事务</a></p>
<p>5、<a href="https://www.xncoding.com/2017/08/06/spring/sb-rabbitmq.html" target="_blank" rel="external">ACK</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RabbitMQ【消息中间件】&quot;&gt;&lt;a href=&quot;#RabbitMQ【消息中间件】&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ【消息中间件】&quot;&gt;&lt;/a&gt;RabbitMQ【消息中间件】&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java自定义注解</title>
    <link href="http://chenjiabing666.github.io/2018/11/03/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>http://chenjiabing666.github.io/2018/11/03/java自定义注解/</id>
    <published>2018-11-03T14:50:08.000Z</published>
    <updated>2018-11-07T14:23:31.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义注解【Annotation】"><a href="#自定义注解【Annotation】" class="headerlink" title="自定义注解【Annotation】"></a>自定义注解【Annotation】</h1><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><ul>
<li>表示需要在什么级别保存该注解信息 。分为如下三类：<ul>
<li><code>@Retention(RetentionPolicy.SOURCE)</code>：注解仅存在于源码中，在class字节码文件中不包含 </li>
<li><code>@Retention(RetentionPolicy.CLASS)</code>：默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得 </li>
<li><code>@Retention(RetentionPolicy.RUNTIME)</code>： 注解会在class字节码文件中存在，在运行时可以通过反射获取到 </li>
</ul>
</li>
</ul>
<h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><ul>
<li>注解的作用目标 </li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>作用域</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@Target(ElementType.TYPE)</code></td>
<td>接口、类、枚举、注解</td>
</tr>
<tr>
<td><code>@Target(ElementType.FIELD)</code></td>
<td>字段、枚举的常量</td>
</tr>
<tr>
<td><code>@Target(ElementType.METHOD)</code></td>
<td>方法</td>
</tr>
<tr>
<td><code>@Target(ElementType.PARAMETER)</code></td>
<td>方法参数</td>
</tr>
<tr>
<td><code>@Target(ElementType.CONSTRUCTOR)</code></td>
<td>构造函数</td>
</tr>
<tr>
<td><code>@Target(ElementType.LOCAL_VARIABLE)</code></td>
<td>局部变量</td>
</tr>
<tr>
<td><code>@Target(ElementType.ANNOTATION_TYPE)</code></td>
<td>注解</td>
</tr>
<tr>
<td><code>@Target(ElementType.PACKAGE)</code></td>
<td>包</td>
</tr>
</tbody>
</table>
<h3 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h3><ul>
<li>注解包含在javadoc中 </li>
</ul>
<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><ul>
<li>注解可以被继承 </li>
</ul>
<h2 id="关于注解的反射方法"><a href="#关于注解的反射方法" class="headerlink" title="关于注解的反射方法"></a>关于注解的反射方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取某个类型的注解</span></div><div class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 获取所有注解(包括父类中被Inherited修饰的注解)</span></div><div class="line"><span class="keyword">public</span> Annotation[] getAnnotations(); </div><div class="line"></div><div class="line"><span class="comment">// 获取声明的注解(但是不包括父类中被Inherited修饰的注解)</span></div><div class="line"><span class="keyword">public</span> Annotation[] getDeclaredAnnotations();</div><div class="line"></div><div class="line"><span class="comment">// 判断某个对象上是否被某个注解进行标注</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 获取某个类声明的所有字段</span></div><div class="line"><span class="keyword">public</span> Field[] <span class="title">getDeclaredFields</span><span class="params">()</span> <span class="keyword">throws</span> SecurityException;</div><div class="line"></div><div class="line"><span class="comment">// 获取某个方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="五种通知"><a href="#五种通知" class="headerlink" title="五种通知"></a>五种通知</h2><ul>
<li><code>@Before</code>：前置通知，在调用目标方法之前执行通知定义的任务</li>
<li><code>@After</code>：后置通知，在目标方法执行结束后，无论执行结果如何（异常或者正常执行）都执行通知定义的任务</li>
<li><code>@After-returning</code>：后置通知，在目标方法执行结束后，如果执行成功（没有异常），则执行通知定义的任务</li>
<li><code>@After-throwing</code>：异常通知，如果目标方法执行过程中抛出异常，则执行通知定义的任务</li>
<li><code>@Around</code>：环绕通知，在目标方法执行前和执行后，都需要执行通知定义的任务</li>
</ul>
<h2 id="JoinPoint-对象"><a href="#JoinPoint-对象" class="headerlink" title="JoinPoint 对象"></a>JoinPoint 对象</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Signature getSignature();</code></td>
<td>获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息</td>
</tr>
<tr>
<td><code>Object[] getArgs();</code></td>
<td>获取传入目标方法的参数对象</td>
</tr>
<tr>
<td><code>Object getTarget();</code></td>
<td>获取被代理的对象</td>
</tr>
<tr>
<td><code>Object getThis();</code></td>
<td>获取代理对象</td>
</tr>
</tbody>
</table>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul>
<li>使用springBoot，需要 添加aop相关的依赖，如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- springBoot的aop功能启动器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul>
<li>实际的生产环境中会对每个都记录日志，比如xxx用户执行了xxx操作，这些日志如果都使用一个方法的话，未免太不雅，此时我们可以定义一个注解，使用spring中的aop，在方法执行成功之后记录日志信息，步骤如下：</li>
<li>定义一个注解，使用<code>@Interface</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义日志的注解，作用在方法上</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月3日 上午11:53:59</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)  <span class="comment">//作用在方法上面</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)   <span class="comment">//程序运行  </span></div><div class="line"><span class="meta">@Documented</span>  </div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InsertLog &#123;</div><div class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;   <span class="comment">//用户名</span></div><div class="line">	<span class="function">String <span class="title">operation</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">//操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义一个注解的实现类，使用aop实现该注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>   <span class="comment">//注入</span></div><div class="line"><span class="meta">@Aspect</span>   <span class="comment">//切面</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertLogAnnotation</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> LogService logService;   <span class="comment">//日志的service，用来记录日志</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 1、<span class="doctag">@pointCut</span>：定义切入点，其中支持多种表达式来匹配切入点，这里的annotation是用来匹配注解的</div><div class="line">	 * 2、<span class="doctag">@annotation</span>的参数必须和这个方法的参数字段相同，因为这里表示的扫描的哪个注解</div><div class="line">	 * 3、这个切入点的 意思：只要被`<span class="doctag">@InsertLog</span>`这个注解标注的都会被扫描到成为切入点</div><div class="line">	 * <span class="doctag">@param</span> log  注解的对象</div><div class="line">	 */</div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"@annotation(log)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertLog</span><span class="params">(InsertLog log)</span></span>&#123;&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * `<span class="doctag">@AfterReturning</span>`:定义后置通知，只有程序执行成功才会调用该注解，用来添加操作的日志</div><div class="line">	 * `insertLog(log)`: 这里的log一定要和上面定义切入点(<span class="doctag">@Pointcut</span>)中的参数字段一样</div><div class="line">	 * <span class="doctag">@param</span> point JoinPoint对象，可以获取一些切面信息，比如调用的类，调用的方法名称</div><div class="line">	 * <span class="doctag">@param</span> log  该注解的对象，可以获取注解中参数的内容</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="meta">@AfterReturning</span>(<span class="string">"insertLog(log)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SystemLog</span><span class="params">(JoinPoint point,InsertLog log)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//获取注解中的参数内容</span></div><div class="line">		String name=log.name();  <span class="comment">//姓名</span></div><div class="line">		String operation=log.operation();  <span class="comment">//操作</span></div><div class="line">		</div><div class="line">		Log log2=<span class="keyword">new</span> Log();</div><div class="line">		log2.setName(name);</div><div class="line">		log2.setOperation(operation);</div><div class="line">		logService.addLog(log2);  <span class="comment">//添加到日志中</span></div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>此时就已经完成了，我们只需要将该注解添加到需要记录日志的方法上即可，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@InsertLog</span>(name=<span class="string">"陈加兵"</span>,operation=<span class="string">"删除用户"</span>)  <span class="comment">//使用日志注解，在程序执行成功之后记录日志</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">deleteUserById</span><span class="params">(Integer userId)</span> </span>&#123;</div><div class="line">	System.out.println(<span class="string">"删除成功"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>完整的项目截图如下：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/chenjiabing666/BlogImage/master/annotation.png" alt="注解截图"></p>
<h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><ul>
<li>可以定义一个注解实现性能监控，设置一个环绕通知即可，在程序执行开始和结束之后统计时间即可</li>
<li>定义一个注解，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 性能监控的注解</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月3日 下午1:08:30</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)  <span class="comment">//作用在方法上面</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)   <span class="comment">//程序运行  </span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CapabilityMonitor &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义注解的实现类，使用切面的环绕通知</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 性能监控注解的实现类</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月3日 下午1:09:40</div><div class="line"> */</div><div class="line"><span class="meta">@Aspect</span>    <span class="comment">//切面</span></div><div class="line"><span class="meta">@Component</span>   <span class="comment">//注入</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CapabilityMonitorAnnotationImpl</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Logger logger=LoggerFactory.getLogger(CapabilityMonitorAnnotationImpl.class);  <span class="comment">//selfj的日志信息</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 定义切入点，只要方法体上有这个注解</div><div class="line">	 * <span class="doctag">@param</span> capabilityMonitor  注解的对象</div><div class="line">	 */</div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"@annotation(capabilityMonitor)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">capabilityMonitor</span><span class="params">(CapabilityMonitor capabilityMonitor)</span></span>&#123;&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 环绕通知，在方法执行之前和之后都执行</div><div class="line">	 * capabilityMonitor(capabilityMonitor)：这里的参数一定要和切入点（`<span class="doctag">@Pointcut</span>("<span class="doctag">@annotation</span>(capabilityMonitor)")`）的参数相同</div><div class="line">	 * <span class="doctag">@param</span> point</div><div class="line">	 * <span class="doctag">@param</span> capabilityMonitor  注解的对象</div><div class="line">	 * <span class="doctag">@throws</span> Throwable </div><div class="line">	 */</div><div class="line">	<span class="meta">@Around</span>(<span class="string">"capabilityMonitor(capabilityMonitor)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProceedingJoinPoint point,CapabilityMonitor capabilityMonitor)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">		Long startTime=System.currentTimeMillis();  <span class="comment">//开始时间</span></div><div class="line">		Object[] args=point.getArgs(); <span class="comment">//获取目标方法执行的参数数组</span></div><div class="line">		Object returnValues=point.proceed(args);   <span class="comment">//执行目标方法</span></div><div class="line">		Long endTime=System.currentTimeMillis();  <span class="comment">//结束时间</span></div><div class="line">		logger.info(<span class="string">"程序执行的时间："</span>+((endTime-startTime)/<span class="number">1000.0</span>));   <span class="comment">//输出程序执行的时间，秒位单位</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出错误日志到文件中"><a href="#输出错误日志到文件中" class="headerlink" title="输出错误日志到文件中"></a>输出错误日志到文件中</h3><ul>
<li>定义日志注解，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 输出日志信息到日志文件的注解</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月7日 下午5:52:55</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)  <span class="comment">//作用在方法上面</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)   <span class="comment">//程序运行  </span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PrintLog &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注解的实现类，结合aop实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintLogAnnotationImpl</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 定义切入点，凡是方法体上标注<span class="doctag">@PrintLog</span>这个注解都会被增强</div><div class="line">	 * <span class="doctag">@param</span> printLog</div><div class="line">	 */</div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"@annotation(printLog)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">(PrintLog printLog)</span></span>&#123;&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在程序之后执行并且在出现异常的时候才会执行</div><div class="line">	 * <span class="doctag">@param</span> point  JoinPoint对象，用于获取切入点的信息，比如被增加的类，被增强的方法名称、方法传入的参数等信息</div><div class="line">	 * <span class="doctag">@param</span> printLog  注解的接口信息，可以获取接口的信息</div><div class="line">	 * <span class="doctag">@param</span> message   异常信息</div><div class="line">	 */</div><div class="line">	<span class="meta">@AfterThrowing</span>(value=<span class="string">"printLog(printLog)"</span>,throwing=<span class="string">"message"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">(JoinPoint point,PrintLog printLog,Throwable message)</span></span>&#123;</div><div class="line">		Class targetCls=point.getTarget().getClass();  <span class="comment">//获取目标类</span></div><div class="line">		Logger logger = LoggerFactory.getLogger(targetCls);</div><div class="line">		logger.error(<span class="string">"异常信息："</span>,message);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>只需要在方法上标注这个注解，只要是遇到异常信息，就会自动写入日志文件中</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://shouce.jb51.net/spring/aop.html" target="_blank" rel="external">aop的相关知识点</a></li>
<li><a href="https://chenjiabing666.github.io/2018/05/21/Spring%E4%B9%8BAOP/">spring aop</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义注解【Annotation】&quot;&gt;&lt;a href=&quot;#自定义注解【Annotation】&quot; class=&quot;headerlink&quot; title=&quot;自定义注解【Annotation】&quot;&gt;&lt;/a&gt;自定义注解【Annotation】&lt;/h1&gt;&lt;h2 id=&quot;元注解&quot;&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Swagger</title>
    <link href="http://chenjiabing666.github.io/2018/10/22/SpringBoot%E6%95%B4%E5%90%88Swagger/"/>
    <id>http://chenjiabing666.github.io/2018/10/22/SpringBoot整合Swagger/</id>
    <published>2018-10-22T15:22:23.000Z</published>
    <updated>2018-10-24T14:44:41.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合Swagger"><a href="#SpringBoot整合Swagger" class="headerlink" title="SpringBoot整合Swagger"></a>SpringBoot整合Swagger</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</div><div class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Swagger的配置类</div><div class="line"> * <span class="doctag">@author</span> 陈加兵</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建用户API文档</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createRestUserApi</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">				.groupName(<span class="string">"user"</span>)  </div><div class="line">				.apiInfo(apiInfo())   <span class="comment">//api的信息</span></div><div class="line">				.select()</div><div class="line">				.apis(RequestHandlerSelectors</div><div class="line">						.basePackage(<span class="string">"cn.tedu.mycat.controller"</span>))   <span class="comment">//添加包扫描</span></div><div class="line">				.paths(PathSelectors.any()).build();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建API信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">				.title(<span class="string">"api文档的标题"</span>)   <span class="comment">//标题</span></div><div class="line">				.description(<span class="string">"api文档的描述"</span>)  <span class="comment">//描述  </span></div><div class="line">				.contact(    <span class="comment">//添加开发者的一些信息</span></div><div class="line">						<span class="keyword">new</span> Contact(<span class="string">"爱撒谎的男孩"</span>, <span class="string">"https://chenjiabing666.github.io"</span>,</div><div class="line">								<span class="string">"18796327106@163.com"</span>)).version(<span class="string">"1.0"</span>).build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><ul>
<li>在springBoot的启动类上添加一个注解即可配置成功：<code>@EnableSwagger2</code></li>
</ul>
<h2 id="访问api的路径"><a href="#访问api的路径" class="headerlink" title="访问api的路径"></a>访问api的路径</h2><ul>
<li><code>http://ip/projectName/swagger-ui.html</code> ：html的页面</li>
<li><code>http://localhost:8080/demo/v2/api-docs</code>：这个是json数据的页面</li>
</ul>
<h2 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h2><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><ul>
<li>标注在类上，用来对这个类进行说明的</li>
<li><strong>如果想要生成文档，必须在类或者接口上标注</strong></li>
<li>属性如下：</li>
</ul>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>备注</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>url的路径值</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td>如果设置这个值、value的值会被覆盖</td>
<td></td>
</tr>
<tr>
<td><strong>description</strong></td>
<td>对api资源的描述</td>
<td></td>
</tr>
<tr>
<td>basePath</td>
<td>基本路径可以不配置</td>
<td></td>
</tr>
<tr>
<td><strong>position</strong></td>
<td>如果配置多个Api 想改变显示的顺序位置</td>
<td></td>
</tr>
<tr>
<td>produces</td>
<td>For example, “application/json, application/xml”</td>
<td></td>
</tr>
<tr>
<td>consumes</td>
<td>For example, “application/json, application/xml”</td>
<td></td>
</tr>
<tr>
<td>protocols</td>
<td>Possible values: http, https, ws, wss.</td>
<td></td>
</tr>
<tr>
<td><strong>authorizations</strong></td>
<td>高级特性认证时配置</td>
<td></td>
</tr>
<tr>
<td><strong>hidden</strong></td>
<td>配置为true 将在文档中隐藏</td>
</tr>
</tbody>
</table>
<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><ul>
<li>用在API方法上，对该API做注释，说明API的作用</li>
<li>不需要多讲，看源码，使用默认的value属性即可，说明该方法的作用</li>
<li>属性如下：</li>
</ul>
<table>
<thead>
<tr>
<th>value</th>
<th>url的路径值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>tags</td>
<td>如果设置这个值、value的值会被覆盖</td>
<td></td>
</tr>
<tr>
<td>notes</td>
<td>对api资源的描述</td>
<td></td>
</tr>
<tr>
<td>response</td>
<td>返回的对象，<strong>在文档中点击Model可以获取该配置的内容</strong></td>
<td></td>
</tr>
<tr>
<td>responseContainer</td>
<td>这些对象是有效的 “List”, “Set” or “Map”.，其他无效</td>
<td></td>
</tr>
<tr>
<td>responseReference</td>
<td>可以不配置</td>
<td></td>
</tr>
<tr>
<td>httpMethod</td>
<td>可以接受 “GET”, “HEAD”, “POST”, “PUT”, “DELETE”, “OPTIONS” and “PATCH”</td>
<td></td>
</tr>
<tr>
<td>position</td>
<td>如果配置多个Api 想改变显示的顺序位置</td>
<td></td>
</tr>
<tr>
<td>produces</td>
<td>同 Api中的定义</td>
<td></td>
</tr>
<tr>
<td>consumes</td>
<td>同 Api中的定义</td>
<td></td>
</tr>
<tr>
<td>protocols</td>
<td>同 Api中的定义</td>
<td></td>
</tr>
<tr>
<td>authorizations</td>
<td>同 Api中的定义</td>
<td></td>
</tr>
<tr>
<td>hidden</td>
<td>是否隐藏，true 或者false ，这个可以隐藏后台接口</td>
<td></td>
</tr>
<tr>
<td>code</td>
<td>http的状态码 默认 200</td>
<td></td>
</tr>
<tr>
<td>extensions</td>
<td>扩展属性</td>
</tr>
</tbody>
</table>
<h3 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a>@ApiImplicitParams</h3><ul>
<li>用来包含API的一组参数注解，可以简单的理解为参数注解的集合声明</li>
<li><strong>很重要，这个注解其中包含接口入参的详细说明</strong></li>
<li>内容是集合</li>
</ul>
<h3 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a>@ApiImplicitParam</h3><ul>
<li>用在<code>@ApiImplicitParams</code>注解中，也可以单独使用，说明一个请求参数的各个方面 </li>
<li>详细的属性使用说明如下：<ul>
<li><code>name</code>：属性的字段名称，相当于form表单中的name，这个就是入参的字段</li>
<li><code>dataType</code>：参数的类型，标识，字符串</li>
<li><code>value</code>：该参数的描述</li>
<li><code>required</code>：是否必填，布尔值</li>
<li><code>defaultValue</code>：缺省值，会在文档中缺省填入，这样更方面造数据，不需要调用接口的去填值了</li>
<li><code>paramType</code>：指定参数的入参数方式（也就是请求参数的位置），其中有四种常用的，如下：<ul>
<li><code>query</code></li>
<li><code>path</code></li>
<li><code>body</code></li>
<li><code>form</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="paramType属性的详细说明"><a href="#paramType属性的详细说明" class="headerlink" title="paramType属性的详细说明"></a>paramType属性的详细说明</h4><ul>
<li><code>query</code>：必须要和入参的字段一样，也可以使用<code>@RequestParam()</code>指定</li>
<li><code>path</code>：用于Restful的风格的url，请求的参数写在路径上，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ApiOperation</span>(value=<span class="string">"根据用户Id获取用户信息"</span>,response=User.class,hidden=<span class="keyword">false</span>)</div><div class="line">	<span class="meta">@ApiImplicitParams</span>(&#123;</div><div class="line">			<span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"path"</span>, name = <span class="string">"id"</span>, dataType=<span class="string">"Integer"</span>, required = <span class="keyword">false</span>, value = <span class="string">"用户的id"</span>, defaultValue = <span class="string">"1"</span>)</div><div class="line">	&#125;)</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/user/get/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">"陈加兵"</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>body</code>：以流的形式提交 仅支持POST </li>
<li><code>form</code>：以表单的形式提交</li>
</ul>
<h2 id="导出到markdown文件"><a href="#导出到markdown文件" class="headerlink" title="导出到markdown文件"></a>导出到markdown文件</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- swagger自动生成文档依赖 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--导出到markdown文件的依赖 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.swagger2markup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger2markup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.netzwerg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>paleo-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/main/webapp/WEB-INF/lib/paleo-core-0.11.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nl.jworks.markdown_to_asciidoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>markdown_to_asciidoc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/main/webapp/WEB-INF/lib/markdown_to_asciidoc-1.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>由于需要<code>paleo-core</code>和<code>markdown_to_asciidoc</code>，但是这两个依赖使用maven不能自动导入，只能使用本地jar的方式了</li>
</ul>
<h3 id="添加一个测试类"><a href="#添加一个测试类" class="headerlink" title="添加一个测试类"></a>添加一个测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.nio.file.Path;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> io.github.swagger2markup.GroupBy;</div><div class="line"><span class="keyword">import</span> io.github.swagger2markup.Language;</div><div class="line"><span class="keyword">import</span> io.github.swagger2markup.Swagger2MarkupConfig;</div><div class="line"><span class="keyword">import</span> io.github.swagger2markup.Swagger2MarkupConverter;</div><div class="line"><span class="keyword">import</span> io.github.swagger2markup.builder.Swagger2MarkupConfigBuilder;</div><div class="line"><span class="keyword">import</span> io.github.swagger2markup.markup.builder.MarkupLanguage;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 生成Markdown文件的类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	    Path outputFile = Paths.get(<span class="string">"build/swagger"</span>);   <span class="comment">//指定生成的目录和文件的名称swagger.md</span></div><div class="line">	    Swagger2MarkupConfig config = <span class="keyword">new</span> Swagger2MarkupConfigBuilder()</div><div class="line">	            .withMarkupLanguage(MarkupLanguage.MARKDOWN)</div><div class="line">	            .withOutputLanguage(Language.ZH)</div><div class="line">	            .withPathsGroupedBy(GroupBy.TAGS)</div><div class="line">	            .withGeneratedExamples()</div><div class="line">	            .withoutInlineSchema()</div><div class="line">	            .build();</div><div class="line">	    Swagger2MarkupConverter converter = Swagger2MarkupConverter.from(<span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/demo/v2/api-docs"</span>))   <span class="comment">//url是可以访问的在线json数据的url</span></div><div class="line">	            .withConfig(config)</div><div class="line">	            .build();</div><div class="line">	    converter.toFile(outputFile);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>一定要保证这里的链接可以访问，因此可以把项目启动起来之后再执行这个测试类，将会在项目的build目录下生成对应的文档</strong></li>
<li><strong>如果需要生成其他的文档，可以使用Typora导出到pdf或者doc文件</strong></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><p><a href="https://my.oschina.net/zzuqiang/blog/793606" target="_blank" rel="external">https://my.oschina.net/zzuqiang/blog/793606</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_37512634/article/details/78984397" target="_blank" rel="external">https://blog.csdn.net/qq_37512634/article/details/78984397</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot整合Swagger&quot;&gt;&lt;a href=&quot;#SpringBoot整合Swagger&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合Swagger&quot;&gt;&lt;/a&gt;SpringBoot整合Swagger&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程</title>
    <link href="http://chenjiabing666.github.io/2018/10/21/Shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://chenjiabing666.github.io/2018/10/21/Shell编程/</id>
    <published>2018-10-21T09:42:59.000Z</published>
    <updated>2018-10-21T09:44:05.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>定义变量：<code>name=&quot;陈加兵&quot;</code></li>
<li>撤销变量：<code>unset name</code></li>
<li>声明静态变量：<code>readonly name=&quot;陈加兵&quot;</code><ul>
<li>静态变量不能<code>unset</code>，否则报错</li>
</ul>
</li>
<li>使用变量：<code>${}或者$变量</code><ul>
<li><code>echo &quot;姓名：${name}&quot;</code>或者<code>echo &quot;姓名：$name&quot;</code></li>
</ul>
</li>
<li>系统环境变量：<code>export A=&quot;陈加兵&quot;</code><ul>
<li><code>vim /etc/profile</code>，在末尾添加即可</li>
<li><code>source /etc/profile</code> ，让环境配置立即生效，否则只能重启系统才能生效</li>
<li>shell中使用环境变量：<code>$name</code></li>
</ul>
</li>
</ul>
<h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><ul>
<li>基本语法：<ul>
<li><code>$n</code>（功能描述： n 为数字， $0 代表命令本身， $1-$9 代表第一到第九个参数，十以上 的参数，十以上的参数需要用大括号包含，如${10}）</li>
<li><code>$*</code>功能描述：这个变量代表命令行中所有的参数， $*把所有的参数看成一个整体，不包含命令本身</li>
<li><code>$@</code> 功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待 ，不包含命令本身</li>
<li><code>$#</code>功能描述：这个变量代表命令行中所有参数的个数，不包含命令的本身</li>
</ul>
</li>
</ul>
<h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="$*与$@的区别"></a>$*与$@的区别</h3><ul>
<li><strong><code>$*</code>和<code>$@</code>都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以$1 $2 …$n的形式输出所有参数 </strong></li>
<li><strong>当它们被双引号“”包含时， <code>$*</code>会将所有的参数作为一个整体，以“$1 $2 …$n”的形 式输出所有参数； “$@”会将各个参数分开，以“$1” “$2”…”$n”的形式输出所有参数 </strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">for i in &quot;$*&quot;</div><div class="line">#$*中的所有参数看成是一个整体，所以这个 for 循环只会循环一次</div><div class="line">do</div><div class="line">echo &quot;The parameters is: $i&quot;</div><div class="line">done</div><div class="line">x=1</div><div class="line">for y in &quot;$@&quot;</div><div class="line">#$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次</div><div class="line">do</div><div class="line">echo &quot;The parameter$x is: $y&quot;</div><div class="line">x=$(( $x +1 ))</div><div class="line">done</div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><strong>输出输入的的参数 1，参数 2，所有参数，参数个数，其中的脚本<code>first.shell</code>如下</strong>    </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># 输出命令本身和前两个参数</div><div class="line">echo &quot;$0 $1 $2&quot;</div><div class="line"># 输出所有的参数，不包含命令本身</div><div class="line">echo &quot;$*&quot;</div><div class="line"># 输出所有的参数，不包含命令本身</div><div class="line">echo &quot;$@&quot;</div><div class="line">#输出参数的个数，不包含命令本身</div><div class="line">echo &quot;$#&quot;</div></pre></td></tr></table></figure>
<ul>
<li>执行该脚本<code>./first.shell 1 2</code></li>
</ul>
<h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><ul>
<li><code>$?</code>：最后一次执行命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行，如果这个变量的值为非0（具体哪个值是由命令自己决定），则证明上一个命令执行不正确了.<ul>
<li>这样如果需要判断上一个执行的状态才能进行下一步的操作，那么只需要判断这个是是否为0即可</li>
</ul>
</li>
<li><code>$$</code>：输出当前进行的进程Id（PID）</li>
<li><code>$!</code>：后台运行的最后一个进程的PID</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">echo &quot;$$&quot;</div><div class="line">./helloworld.sh &amp;</div><div class="line">echo &quot;$!&quot;</div><div class="line">echo &quot;$?</div></pre></td></tr></table></figure>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li><code>&quot;$((运算式))&quot;或&quot;$[运算式]&quot;</code><ul>
<li><code>echo &quot;$((1+2))&quot;</code></li>
<li><code>echo &quot;$[1+2]&quot;</code></li>
</ul>
</li>
<li><code>expr m + n</code> ：其中这个表达式需要用单引号括起来才能执行<ul>
<li>注意 <code>expr</code> 运算符间要有空格   ，即是m，n和运算符<code>+</code>要有空格</li>
<li><code>expr \*, /, % 乘，除，取余</code>，注意其中的乘需要转义，否则不能参与运算</li>
</ul>
</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A=$[(1+2)*4*4]</div><div class="line">echo &quot;$&#123;A&#125;&quot;</div><div class="line">unset A</div></pre></td></tr></table></figure>
<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li><code>[ condition ]</code>  ：<strong>注意 condition 前后要有空格 </strong></li>
</ul>
<h3 id="常用判断条件"><a href="#常用判断条件" class="headerlink" title="常用判断条件"></a>常用判断条件</h3><ul>
<li>两个整数之间比较<ul>
<li><code>=</code>字符串比较 </li>
<li><code>-lt</code> 小于 </li>
<li><code>-le</code>小于等于 </li>
<li><code>-eq</code> 等于    </li>
<li><code>-gt</code> 大于 </li>
<li><code>-ge</code> 大于等于 </li>
<li><code>-ne</code> 不等于    </li>
</ul>
</li>
<li>按照文件权限比较<ul>
<li><code>-r</code>有读的权限 </li>
<li><code>-w</code> 有写的权限 </li>
<li><code>-x</code> 有执行的权限    </li>
</ul>
</li>
<li>按照文件类型进行判断 <ul>
<li><code>-f</code> 文件存在并且是一个常规的文件 </li>
<li><code>-e</code> 文件存在 </li>
<li><code>-d</code> 文件存在并是一个目录    </li>
</ul>
</li>
</ul>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><ul>
<li>23 是否大于等于 22：<code>[ 23 -ge 22 ]</code></li>
<li>student.txt 是否具有写权限 ：<code>[ -w student.txt ]</code></li>
<li>/root/install.log 目录中的文件是否存在 ：<code>[ -e /root/install.log ]</code></li>
</ul>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断式 ];then</div><div class="line">程序</div><div class="line">fi</div><div class="line"></div><div class="line"># 或者</div><div class="line">if [ 条件判断式 ]</div><div class="line">then</div><div class="line">程序</div><div class="line">fi</div></pre></td></tr></table></figure>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><ul>
<li><code>if-else</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ -e /usr/local/shell/five.shell ] </div><div class="line"> then </div><div class="line">        echo &quot;陈加兵&quot; </div><div class="line">fi</div></pre></td></tr></table></figure>
<ul>
<li><code>if-elseif-els</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">A=$[(1+2)*4]</div><div class="line"></div><div class="line">if [ $&#123;A&#125; -gt 10 ]</div><div class="line">then</div><div class="line">        echo &quot;$&#123;A&#125;大于10&quot;</div><div class="line">elif [ $&#123;A&#125; -lt 10 ]</div><div class="line">then</div><div class="line">        echo &quot;$&#123;A&#125;小于10&quot;</div><div class="line">else</div><div class="line">        echo &quot;$&#123;A&#125;等于10&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><h4 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">case $变量名 in</div><div class="line">&quot;值 1&quot;）</div><div class="line">如果变量的值等于值 1，则执行程序 1</div><div class="line">;;</div><div class="line">&quot;值 2&quot;）</div><div class="line">如果变量的值等于值 2，则执行程序 2</div><div class="line">;;</div><div class="line">…省略其他分支…</div><div class="line">*）</div><div class="line">如果变量的值都不是以上的值，则执行此程序</div><div class="line">;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 获取控制台输入的第一个参数，不是命令本身</div><div class="line">A=$1</div><div class="line"></div><div class="line">case $&#123;A&#125; in</div><div class="line"></div><div class="line">&quot;1&quot;)</div><div class="line">        echo &quot;1&quot;</div><div class="line"></div><div class="line">;;</div><div class="line"></div><div class="line">&quot;2&quot;)</div><div class="line">        echo &quot;2&quot;</div><div class="line">;;</div><div class="line"></div><div class="line">&quot;3&quot;)</div><div class="line">        echo &quot;3&quot;</div><div class="line">;;</div><div class="line">##结束标记</div><div class="line">esac</div></pre></td></tr></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h4><ul>
<li>语法一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for 变量 in 值 1 值 2 值 3…</div><div class="line">do</div><div class="line">程序</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>语法二<ul>
<li>双括号</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for (( 初始值;循环控制条件;变量变化 ))</div><div class="line">do</div><div class="line">程序</div><div class="line">done</div></pre></td></tr></table></figure>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 接受控制台输入的值并且循环输出</div><div class="line">for i in &quot;$*&quot;</div><div class="line">        do</div><div class="line">                echo &quot;The num is $&#123;i&#125;&quot;</div><div class="line">        done</div><div class="line"></div><div class="line">for j in &quot;$@&quot;</div><div class="line">        do</div><div class="line">                echo &quot;The num is $j&quot;</div><div class="line">        done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sum=0;</div><div class="line"># 这里的for循环一定要加双括号</div><div class="line">for((i=1;i&lt;=100;i++)) </div><div class="line">        do</div><div class="line">                sum=$[$i+$sum]</div><div class="line">        done</div><div class="line">echo &quot;从1加到100的和为：$sum&quot;</div></pre></td></tr></table></figure>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while [ 条件判断式 ]</div><div class="line">do</div><div class="line">程序</div><div class="line">done</div></pre></td></tr></table></figure>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">i=1</div><div class="line">sum=0</div><div class="line">while [ $i -le 100 ]</div><div class="line">	do </div><div class="line">		sum=$[$i+$sum]</div><div class="line">		i=$[$i+1]</div><div class="line">	done</div><div class="line"></div><div class="line">echo &quot;从1加到100的值为：$sum&quot;</div></pre></td></tr></table></figure>
<h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><h3 id="基本语法-6"><a href="#基本语法-6" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li><code>read [选项][参数]</code><ul>
<li><code>-p</code>：指定读取值时的提示符；</li>
<li><code>-t</code>：指定读取值时等待的时间（秒）。    </li>
</ul>
</li>
</ul>
<h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -t 7 -p &quot;请在控制台输入数字，等待时间7秒：&quot; NUM</div><div class="line"></div><div class="line">echo &quot;用户输入的数字为：$NUM&quot;</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul>
<li>系统函数是系统自带的一些函数，只需要直接调用即可，不需要自己调用</li>
<li><code>basename</code> ：去掉文件的路径，直接输出文件的名称<ul>
<li><code>basename /usr/local/shell/first.shell</code> ：直接输出first.shell</li>
<li><code>basename /usr/local/shell/first.shell .shell</code> ：直接输出<code>first</code>，去掉了文件的后缀<code>.shell</code></li>
</ul>
</li>
<li><code>dirname</code>：去掉文件的名称，直接输出文件的路径<ul>
<li><code>dirname /usr/local/first.shell</code> ：直接输出  <code>/usr/local/</code></li>
</ul>
</li>
</ul>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><ul>
<li>格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[ function ] funname[()]</div><div class="line">&#123;</div><div class="line">Action;</div><div class="line">[return int;]</div><div class="line">&#125;</div><div class="line"></div><div class="line"># d调用</div><div class="line">funname</div></pre></td></tr></table></figure>
<ul>
<li>实例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">function sum()</div><div class="line">&#123;</div><div class="line">    sum=0;</div><div class="line">    sum=$[$1+$2]</div><div class="line">    echo &quot;两数之和为：$sum&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">## 读取控制台输入的数字</div><div class="line">read -p &quot;输入第一个数：&quot; n1</div><div class="line">read -p &quot;输入第二个数&quot; n2</div><div class="line"></div><div class="line">## 调用函数</div><div class="line">sum $n1 $n2</div></pre></td></tr></table></figure>
<h2 id="定时任务调度-crond"><a href="#定时任务调度-crond" class="headerlink" title="定时任务调度 crond"></a>定时任务调度 crond</h2><h2 id="自动安装Nginx"><a href="#自动安装Nginx" class="headerlink" title="自动安装Nginx"></a>自动安装Nginx</h2><ul>
<li>本人写了一个自动安装Nginx的脚本，适合Centos的安装，亲测有用，<a href="http://ono60m7tl.bkt.clouddn.com/auto_install_nginx.sh" target="_blank" rel="external">点击下载</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">## NGINX安装的路径</div><div class="line">NGINX_PATH=/usr/local/myNginx/</div><div class="line"></div><div class="line">## 自动安装Nginx的函数</div><div class="line">function install_nginx()</div><div class="line">&#123;	</div><div class="line">	## 创建目录，如果文件夹不存在，那么需要新建文件夹</div><div class="line">	if [ -d $NGINX_PATH ]</div><div class="line">		then</div><div class="line">		echo &quot;文件件已经存在，开始安装&quot;</div><div class="line">	else</div><div class="line">		mkdir -p $NGINX_PATH</div><div class="line">	fi</div><div class="line">	</div><div class="line">	## 切换到安装目录</div><div class="line">	cd $NGINX_PATH</div><div class="line">	</div><div class="line">	## 下载Nginx的压缩包,因为网络不稳定，因此需要开启无限循环下载</div><div class="line">	while [ true ]</div><div class="line">		do</div><div class="line">			wget http://nginx.org/download/nginx-1.12.2.tar.gz</div><div class="line">			</div><div class="line">			## 判断下载命令是否执行成功,下载失败之后直接中断脚本的运行</div><div class="line">			if [ $? -eq 0 ]</div><div class="line">				then</div><div class="line">					echo &quot;=======================文件下载成功，现在开始解压文件了===========================&quot;</div><div class="line">					tar -zvxf nginx-1.12.2.tar.gz</div><div class="line">					## 解压缩成功，那么需要删除这个压缩包了</div><div class="line">					rm -f nginx-1.12.2.tar.gz</div><div class="line">					#文件下载成功当然可以跳出循环了，执行下面的步骤</div><div class="line">					break</div><div class="line">			fi</div><div class="line"></div><div class="line">		done</div><div class="line">	</div><div class="line"></div><div class="line">	## 安装依赖</div><div class="line">	yum -y install pcre*</div><div class="line">	yum -y install openssl*</div><div class="line"></div><div class="line">	## 进入解压缩的文件目录</div><div class="line">	cd nginx-1.12.2</div><div class="line">	</div><div class="line">	## 执行安装的命令</div><div class="line">	./configure</div><div class="line"></div><div class="line">	## 判断上面的命令执行是否成功,如果执行失败需要安装对应的依赖才能编译</div><div class="line">	if [ !$? -eq 0 ]</div><div class="line">		then</div><div class="line">			echo &quot;==========================执行./configure这个命令失败,开始安装对应的依赖了========================================&quot;</div><div class="line">			 yum -y install gcc make gcc-c++ openssl-devel</div><div class="line">			</div><div class="line">	fi</div><div class="line"></div><div class="line">	## 此时到了这里，肯定是可以编译了</div><div class="line">	make install</div><div class="line">	# 检测上面的编译是否成功，如果编译成功，那么就安装成功了</div><div class="line">	if [ $? -eq 0 ]</div><div class="line">		then </div><div class="line">			echo &quot;=========================安装成功==========================&quot;</div><div class="line">	else</div><div class="line">		echo &quot;======================================安装失败==============================&quot;</div><div class="line">	fi	</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">##安装wget</div><div class="line">yum install -y wget</div><div class="line">if [ !$? -eq 0]</div><div class="line">	then</div><div class="line">		exit</div><div class="line">fi</div><div class="line"></div><div class="line">#调用函数</div><div class="line">install_nginx</div></pre></td></tr></table></figure>
<h2 id="自动安装JDK"><a href="#自动安装JDK" class="headerlink" title="自动安装JDK"></a>自动安装JDK</h2><ul>
<li>wget下载jdk的时候有点问题，需要动态验证，因此这里使用的链接是<code>wget --no-cookies --no-check-certificate --header &quot;Cookie:gpw_e24=http%3a%2f%2fwww.oracle.com%2ftechnetwork%2fjava%2fjavase%2fdownloads%2fjdk8-downloads-2133151.html;oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz</code></li>
<li>可以直接替换后面的链接为对应的jdk版本即可</li>
<li><a href="http://ono60m7tl.bkt.clouddn.com/auto_install_jdk.sh" target="_blank" rel="external">点击下载</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">## 文件夹的路径</div><div class="line">JDK_PATH=/usr/local/java/jdk</div><div class="line"># 解压缩之后的jdk的路径，jdk就在这个文件夹下面</div><div class="line">JDK_INSTALL_PATH=/usr/local/java/jdk/jdk-8u181-linux-x64</div><div class="line">## 自动安装jdk的函数</div><div class="line">function install_jdk()</div><div class="line">&#123;</div><div class="line">        if [ -d $JDK_PATH ]</div><div class="line">                then</div><div class="line">                        echo &quot;==============================jdk的安装目录已经存在，现在开始安装======================================&quot;</div><div class="line">                else</div><div class="line">                        mkdir -p $JDK_PATH</div><div class="line">                        echo &quot;==============================新建JDK的安装目录成功========================================================&quot;</div><div class="line">        fi      </div><div class="line"></div><div class="line">        ## 切换到安装目录</div><div class="line">        cd $JDK_PATH</div><div class="line"></div><div class="line">        ## 安装目录创建成功，开始下载文件了，这里下载的是jdk的1.8版本</div><div class="line">        while [ true ]</div><div class="line">                do</div><div class="line">                        wget --no-cookies --no-check-certificate --header &quot;Cookie:gpw_e24=http%3a%2f%2fwww.oracle.com%2ftechnetwork%2fjava%2fjavase%2fdownloads%2fjdk8-downloads-2133151.html;oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz</div><div class="line">                        # 检查是否下载成功，如果下载成功，那么可以跳出这个循环,下载失败继续下载</div><div class="line">                        if [ $? -eq 0 ]</div><div class="line">                                then</div><div class="line">					## 下载成功之后，需要解压缩文件</div><div class="line">					tar -xzvf jdk-8u181-linux-x64.tar.gz</div><div class="line">					## 删除压缩包</div><div class="line">					rm -f jdk-8u181-linux-x64.tar.gz</div><div class="line">                                        break</div><div class="line">                        fi</div><div class="line"></div><div class="line">                done</div><div class="line"></div><div class="line">	</div><div class="line">	## 下载成功之后需要为其中的所有文件赋予可执行的权限</div><div class="line">	cd $JDK_INSTALL_PATH</div><div class="line"></div><div class="line">	for file in $JDK_INSTALL_PATH/*</div><div class="line">		do</div><div class="line">			## 如果是文件夹，那么需要为这个文件夹下的所有文件都赋予权限</div><div class="line">			if [ -d $file ]</div><div class="line">				then</div><div class="line">					chmod a+x $file/*</div><div class="line">			else</div><div class="line">				chmod a+x $file</div><div class="line">			fi		</div><div class="line">		done</div><div class="line">&#125;	</div><div class="line">	</div><div class="line"></div><div class="line">## 安装tomcat</div><div class="line"></div><div class="line">## Tomcat的安装路径</div><div class="line">TOMCAT_PATH=/usr/local/java/tomcat8/</div><div class="line">TOMCAT_INSTALL_PATH=/usr/local/java/tomcat8/apache-tomcat-8.5.34</div><div class="line"></div><div class="line">function install_tomcat8()</div><div class="line">&#123;</div><div class="line">	if [ -d $TOMCAT_PATH ]</div><div class="line">		then</div><div class="line">			echo &quot;=================TOMCAT的安装路径已经存在=========================&quot;</div><div class="line">	else</div><div class="line">		echo &quot;==========================TOMCAT的安装路径不存在==========================&quot;</div><div class="line">		mkdir -p $TOMCAT_PATH</div><div class="line">	fi	</div><div class="line"></div><div class="line">	cd $TOMCAT_PATH</div><div class="line">	while [ true ]</div><div class="line">		do	</div><div class="line">			wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz</div><div class="line">			if [ $? -eq 0 ]</div><div class="line">				then</div><div class="line">				tar -xzvf apache-tomcat-8.5.34.tar.gz</div><div class="line">				rm -f apache-tomcat-8.5.34.tar.gz</div><div class="line">				break</div><div class="line">			fi</div><div class="line">		done</div><div class="line">	</div><div class="line">	</div><div class="line">	for file in $TOMCAT_INSTALL_PATH/*</div><div class="line">		do</div><div class="line">			if [ -d $file ]</div><div class="line">				then</div><div class="line">					cd $file</div><div class="line">					num=`ls | wc -l`</div><div class="line">		</div><div class="line">					if [ $num -eq 0 ]</div><div class="line">						then</div><div class="line">							continue</div><div class="line">					fi</div><div class="line">					chmod a+x *</div><div class="line">			else</div><div class="line">					chmod a+x $file</div><div class="line">			fi</div><div class="line">		done</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">install_jdk</div><div class="line">install_tomcat8</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shell编程&quot;&gt;&lt;a href=&quot;#Shell编程&quot; class=&quot;headerlink&quot; title=&quot;Shell编程&quot;&gt;&lt;/a&gt;Shell编程&lt;/h1&gt;&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变
    
    </summary>
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker安装服务</title>
    <link href="http://chenjiabing666.github.io/2018/10/09/docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/"/>
    <id>http://chenjiabing666.github.io/2018/10/09/docker安装服务/</id>
    <published>2018-10-08T16:47:55.000Z</published>
    <updated>2018-12-02T15:47:43.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker安装Nginx"><a href="#docker安装Nginx" class="headerlink" title="docker安装Nginx"></a>docker安装Nginx</h2><p>1、<code>docker pull nginx</code> ：下载nginx</p>
<p>2、<code>docker run --name mynginx -d nginx</code>： 运行nginx实例</p>
<p>3、新建nginx目录在本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/</div><div class="line">mkdir nginx</div></pre></td></tr></table></figure>
<p>3、复制nginx的目录到本地，命令如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//复制配置文件到本地</div><div class="line">docker cp mynginx:/etc/nginx /usr/share/nginx/conf/</div><div class="line"></div><div class="line">//复制html目录到本地</div><div class="line">docker cp mynginx:/usr/share/nginx/html /usr/share/nginx/html</div><div class="line"></div><div class="line">//复制日志到到本地</div><div class="line">docker cp mynginx:/var/log/nginx /usr/share/nginx/logs</div></pre></td></tr></table></figure>
<p>4、挂载目录并且启动nginx，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run  --name mynginx -p 80:80 -v /usr/share/nginx/html:/usr/share/nginx/html -v /usr/share/nginx/conf:/etc/nginx -v /usr/share/nginx/logs:/var/log/nginx/  -d nginx</div></pre></td></tr></table></figure>
<p>5、安装完成，此时的docker容器中的nginx的html路径就和本地的<code>/usr/share/nginx/html</code>对应了，如果需要建立目录，只需要在本地目录下建立就会自动更新到容器中</p>
<h2 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h2><ul>
<li><code>docker pull tomcat:8-jre8</code>  ： 现在镜像（tomcat8，jdk的版本8）</li>
<li>运行实例：<code>docker run --name tom -d -p 8081:8080 41a54fe1f79d</code></li>
<li>复制配置到本地（建立/usr/local/tomcat文件夹）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker cp tom:/usr/local/tomcat/conf /usr/local/tomcat/conf</div><div class="line">docker cp tom:/usr/local/tomcat/lib /usr/local/tomcat/lib</div><div class="line">docker cp tom:/usr/local/tomcat/webapps /usr/local/tomcat/webapps</div><div class="line">docker cp tom:/usr/local/tomcat/bin /usr/local/tomcat/bin</div><div class="line">docker cp tom:/usr/local/tomcat/work /usr/local/tomcat/work</div><div class="line">docker cp tom:/usr/local/tomcat/temp /usr/local/tomcat/temp</div><div class="line">docker cp tom:/usr/local/tomcat/logs /usr/local/tomcat/logs</div></pre></td></tr></table></figure>
<ul>
<li>挂载目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name tom -p 8081:8080 -v /usr/local/tomcat/conf:/usr/local/tomcat/conf -v /usr/local/tomcat/lib:/usr/local/tomcat/lib -v /usr/local/tomcat/webapps:/usr/local/tomcat/webapps -v /usr/local/tomcat/bin:/usr/local/tomcat/bin -v /usr/local/tomcat/work:/usr/local/tomcat/work -v /usr/local/tomcat/temp:/usr/local/tomcat/temp -v /usr/local/tomcat/logs:/usr/local/tomcat/logs -d 41a54fe1f79d</div></pre></td></tr></table></figure>
<ul>
<li>完成，此时目录已经挂载完成，能够同步更新了</li>
</ul>
<h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><ul>
<li>下载：<code>docker pull mysql:5.7.24</code></li>
<li>启动：<code>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=12345 -d 702fb0b7837f</code></li>
<li>复制文件夹</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker cp mysql:/sbin /usr/local/mysql/bin</div><div class="line">docker cp mysql:/var/lib/mysql /usr/local/mysql/data</div><div class="line">docker cp mysql:/etc/mysql /usr/local/mysql/conf</div></pre></td></tr></table></figure>
<ul>
<li>挂载运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name mysql -p 3306:3306 -v /usr/local/mysql/bin:/sbin -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/conf:/etc/mysql  -e MYSQL_ROOT_PASSWORD=12345 -d 702fb0b7837f</div></pre></td></tr></table></figure>
<h3 id="配置参数详解"><a href="#配置参数详解" class="headerlink" title="配置参数详解"></a>配置参数详解</h3><ul>
<li><a href="https://www.cnblogs.com/wyy123/p/6092976.html" target="_blank" rel="external">https://www.cnblogs.com/wyy123/p/6092976.html</a></li>
<li><a href="http://www.cnblogs.com/Ray-xujianguo/p/3322455.html" target="_blank" rel="external">http://www.cnblogs.com/Ray-xujianguo/p/3322455.html</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line">default-character-set=utf8</div><div class="line"></div><div class="line"></div><div class="line"># SERVER SECTION</div><div class="line"># ----------------------------------------------------------------------</div><div class="line">#</div><div class="line"># The following options will be read by the MySQL Server. Make sure that</div><div class="line"># you have installed the server correctly (see above) so it reads this </div><div class="line"># file.</div><div class="line">#</div><div class="line">[mysqld]</div><div class="line"></div><div class="line"># The TCP/IP Port the MySQL Server will listen on</div><div class="line">port=3306</div><div class="line"></div><div class="line"></div><div class="line">#Path to installation directory. All paths are usually resolved relative to this.</div><div class="line">#basedir=&quot;E:/Java/Mysql/&quot;</div><div class="line"></div><div class="line">#Path to the database root</div><div class="line">datadir=&quot;/usr/local/mysql/data&quot;</div><div class="line"></div><div class="line"># The default character set that will be used when a new schema or table is</div><div class="line"># created and no character set is defined</div><div class="line">character-set-server=utf8</div><div class="line"></div><div class="line"># The default storage engine that will be used when create new tables when</div><div class="line">default-storage-engine=INNODB</div><div class="line"></div><div class="line"># Set the SQL mode to strict</div><div class="line">sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</div><div class="line"></div><div class="line"># The maximum amount of concurrent sessions the MySQL server will</div><div class="line"># allow. One of these connections will be reserved for a user with</div><div class="line"># SUPER privileges to allow the administrator to login even if the</div><div class="line"># connection limit has been reached.</div><div class="line">max_connections=1000</div><div class="line"></div><div class="line"># Query cache is used to cache SELECT results and later return them</div><div class="line"># without actual executing the same query once again. Having the query</div><div class="line"># cache enabled may result in significant speed improvements, if your</div><div class="line"># have a lot of identical queries and rarely changing tables. See the</div><div class="line"># &quot;Qcache_lowmem_prunes&quot; status variable to check if the current value</div><div class="line"># is high enough for your load.</div><div class="line"># Note: In case your tables change very often or if your queries are</div><div class="line"># textually different every time, the query cache may result in a</div><div class="line"># slowdown instead of a performance improvement.</div><div class="line">query_cache_size=0</div><div class="line"></div><div class="line"># The number of open tables for all threads. Increasing this value</div><div class="line"># increases the number of file descriptors that mysqld requires.</div><div class="line"># Therefore you have to make sure to set the amount of open files</div><div class="line"># allowed to at least 4096 in the variable &quot;open-files-limit&quot; in</div><div class="line"># section [mysqld_safe]</div><div class="line">#table_cache=256</div><div class="line"></div><div class="line"># Maximum size for internal (in-memory) temporary tables. If a table</div><div class="line"># grows larger than this value, it is automatically converted to disk</div><div class="line"># based table This limitation is for a single table. There can be many</div><div class="line"># of them.</div><div class="line">tmp_table_size=35M</div><div class="line"></div><div class="line"></div><div class="line"># How many threads we should keep in a cache for reuse. When a client</div><div class="line"># disconnects, the client&apos;s threads are put in the cache if there aren&apos;t</div><div class="line"># more than thread_cache_size threads from before.  This greatly reduces</div><div class="line"># the amount of thread creations needed if you have a lot of new</div><div class="line"># connections. (Normally this doesn&apos;t give a notable performance</div><div class="line"># improvement if you have a good thread implementation.)</div><div class="line">thread_cache_size=8</div><div class="line"></div><div class="line">#*** MyISAM Specific options</div><div class="line"></div><div class="line"># The maximum size of the temporary file MySQL is allowed to use while</div><div class="line"># recreating the index (during REPAIR, ALTER TABLE or LOAD DATA INFILE.</div><div class="line"># If the file-size would be bigger than this, the index will be created</div><div class="line"># through the key cache (which is slower).</div><div class="line">myisam_max_sort_file_size=100G</div><div class="line"></div><div class="line"># If the temporary file used for fast index creation would be bigger</div><div class="line"># than using the key cache by the amount specified here, then prefer the</div><div class="line"># key cache method.  This is mainly used to force long character keys in</div><div class="line"># large tables to use the slower key cache method to create the index.</div><div class="line">myisam_sort_buffer_size=69M</div><div class="line"></div><div class="line"># Size of the Key Buffer, used to cache index blocks for MyISAM tables.</div><div class="line"># Do not set it larger than 30% of your available memory, as some memory</div><div class="line"># is also required by the OS to cache rows. Even if you&apos;re not using</div><div class="line"># MyISAM tables, you should still set it to 8-64M as it will also be</div><div class="line"># used for internal temporary disk tables.</div><div class="line">key_buffer_size=55M</div><div class="line"></div><div class="line"># Size of the buffer used for doing full table scans of MyISAM tables.</div><div class="line"># Allocated per thread, if a full scan is needed.</div><div class="line">read_buffer_size=64K</div><div class="line">read_rnd_buffer_size=256K</div><div class="line"></div><div class="line"># This buffer is allocated when MySQL needs to rebuild the index in</div><div class="line"># REPAIR, OPTIMZE, ALTER table statements as well as in LOAD DATA INFILE</div><div class="line"># into an empty table. It is allocated per thread so be careful with</div><div class="line"># large settings.</div><div class="line">sort_buffer_size=256K</div><div class="line"></div><div class="line">#*** INNODB Specific options ***</div><div class="line"></div><div class="line"></div><div class="line"># Use this option if you have a MySQL server with InnoDB support enabled</div><div class="line"># but you do not plan to use it. This will save memory and disk space</div><div class="line"># and speed up some things.</div><div class="line">#skip-innodb</div><div class="line"></div><div class="line"># Additional memory pool that is used by InnoDB to store metadata</div><div class="line"># information.  If InnoDB requires more memory for this purpose it will</div><div class="line"># start to allocate it from the OS.  As this is fast enough on most</div><div class="line"># recent operating systems, you normally do not need to change this</div><div class="line"># value. SHOW INNODB STATUS will display the current amount used.</div><div class="line">#innodb_additional_mem_pool_size=3M</div><div class="line"></div><div class="line"># If set to 1, InnoDB will flush (fsync) the transaction logs to the</div><div class="line"># disk at each commit, which offers full ACID behavior. If you are</div><div class="line"># willing to compromise this safety, and you are running small</div><div class="line"># transactions, you may set this to 0 or 2 to reduce disk I/O to the</div><div class="line"># logs. Value 0 means that the log is only written to the log file and</div><div class="line"># the log file flushed to disk approximately once per second. Value 2</div><div class="line"># means the log is written to the log file at each commit, but the log</div><div class="line"># file is only flushed to disk approximately once per second.</div><div class="line">#innodb_flush_log_at_trx_commit=1</div><div class="line"></div><div class="line"># The size of the buffer InnoDB uses for buffering log data. As soon as</div><div class="line"># it is full, InnoDB will have to flush it to disk. As it is flushed</div><div class="line"># once per second anyway, it does not make sense to have it very large</div><div class="line"># (even with long transactions).</div><div class="line">#innodb_log_buffer_size=2M</div><div class="line"></div><div class="line"># InnoDB, unlike MyISAM, uses a buffer pool to cache both indexes and</div><div class="line"># row data. The bigger you set this the less disk I/O is needed to</div><div class="line"># access data in tables. On a dedicated database server you may set this</div><div class="line"># parameter up to 80% of the machine physical memory size. Do not set it</div><div class="line"># too large, though, because competition of the physical memory may</div><div class="line"># cause paging in the operating system.  Note that on 32bit systems you</div><div class="line"># might be limited to 2-3.5G of user level memory per process, so do not</div><div class="line"># set it too high.</div><div class="line">#innodb_buffer_pool_size=107M</div><div class="line"></div><div class="line"># Size of each log file in a log group. You should set the combined size</div><div class="line"># of log files to about 25%-100% of your buffer pool size to avoid</div><div class="line"># unneeded buffer pool flush activity on log file overwrite. However,</div><div class="line"># note that a larger logfile size will increase the time needed for the</div><div class="line"># recovery process.</div><div class="line">#innodb_log_file_size=54M</div><div class="line"></div><div class="line"># Number of threads allowed inside the InnoDB kernel. The optimal value</div><div class="line"># depends highly on the application, hardware as well as the OS</div><div class="line"># scheduler properties. A too high value may lead to thread thrashing.</div><div class="line">#innodb_thread_concurrency=18</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;docker安装Nginx&quot;&gt;&lt;a href=&quot;#docker安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;docker安装Nginx&quot;&gt;&lt;/a&gt;docker安装Nginx&lt;/h2&gt;&lt;p&gt;1、&lt;code&gt;docker pull nginx&lt;
    
    </summary>
    
      <category term="docker" scheme="http://chenjiabing666.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://chenjiabing666.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>数据库中间件之Mycat</title>
    <link href="http://chenjiabing666.github.io/2018/10/07/Mycat/"/>
    <id>http://chenjiabing666.github.io/2018/10/07/Mycat/</id>
    <published>2018-10-07T12:57:37.000Z</published>
    <updated>2018-10-07T13:03:14.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mycat入门"><a href="#Mycat入门" class="headerlink" title="Mycat入门"></a>Mycat入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><a href="https://github.com/MyCATApache/Mycat-download" target="_blank" rel="external">点击下载</a></li>
<li>配置java环境</li>
<li>配置mysql数据库</li>
<li><strong>打开<code>conf/wrapper.conf</code>文件，将其中的<code>wrapper.java.command</code>的值改成服务器上的jdk地址，如<code>wrapper.java.command=/usr/local/jdk/jdk1.8.0_172/bin/java</code></strong> </li>
<li>为bin文件夹中的所有内容赋予执行的权限:<code>chmod a+x *</code></li>
<li>修改<code>schemal.xml</code>文件中的内容，填上对应的表，数据节点，数据主机的内容</li>
<li>启动 ：<code>./mycat start</code> (后台启动)、<code>./mycat console</code>（前台启动）</li>
<li>开启服务器的8086端口</li>
<li>使用navicat连接mycat，端口是8086</li>
</ul>
<h3 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">./mycat start 启动</div><div class="line"></div><div class="line">./mycat stop 停止</div><div class="line"></div><div class="line">./mycat console 前台运行</div><div class="line"></div><div class="line">./mycat install 添加到系统自动启动（暂未实现）</div><div class="line"></div><div class="line">./mycat remove 取消随系统自动启动（暂未实现）</div><div class="line"></div><div class="line">./mycat restart 重启服务</div><div class="line"></div><div class="line">./mycat pause 暂停</div><div class="line"></div><div class="line">./mycat status 查看启动状态</div></pre></td></tr></table></figure>
<h2 id="数据库切分"><a href="#数据库切分" class="headerlink" title="数据库切分"></a>数据库切分</h2><ul>
<li>数据库切分分为垂直切分，水平切分</li>
</ul>
<h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><ul>
<li>一个数据库由很多表的构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同 的数据库上面，这样也就将数据或者说压力分担到不同的库上面 。</li>
<li>比如商城项目可以根据不同的业务将表分成用户表、订单表等，这些表分布在不同的数据库中，从而实现了垂直切分</li>
<li>优点：<ul>
<li>拆分后业务清晰，拆分规则明确。    </li>
<li>系统之间整合或扩展容易    </li>
<li>数据维护简单。    </li>
</ul>
</li>
<li>缺点：<ul>
<li>部分业务表无法 join，只能通过接口方式解决，提高了系统复杂度。    </li>
<li>受每种业务不同的限制存在单库性能瓶颈，不易数据扩展跟性能提高。    </li>
<li>事务处理复杂。    </li>
</ul>
</li>
<li><strong>由于垂直切分是按照业务的分类将表分散到不同的库，所以有些业务表会过于庞大，存在单库读写与存储瓶 颈，所以就需要水平拆分来做解决。</strong>    </li>
</ul>
<h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><ul>
<li>水平拆分不是将表做分类，而是按照某个字段的某种规则来分散到多个库之中，每个表中 包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行的切分，就是将表中的某些行切分 到一个数据库，而另外的某些行又切分到其他的数据库中    </li>
<li>拆分规则：<ul>
<li>按照用户 ID 求模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中。</li>
<li>按照日期，将不同月甚至日的数据分散到不同的库中。</li>
<li>按照某个特定的字段求摸，或者根据特定范围段分散到不同的库中。    </li>
</ul>
</li>
<li>优点：<ul>
<li>拆分规则抽象好，join 操作基本可以数据库做。</li>
<li>不存在单库大数据，高并发的性能瓶颈。</li>
<li>应用端改造较少。 </li>
<li>提高了系统的稳定性跟负载能力。    </li>
</ul>
</li>
<li>缺点：<ul>
<li>拆分规则难以抽象。 </li>
<li>分片事务一致性难以解决。 </li>
<li>数据多次扩展难度跟维护量极大。 </li>
<li>跨库 join 性能较差。    </li>
</ul>
</li>
</ul>
<h3 id="垂直拆分和水平拆分的共同缺点"><a href="#垂直拆分和水平拆分的共同缺点" class="headerlink" title="垂直拆分和水平拆分的共同缺点"></a>垂直拆分和水平拆分的共同缺点</h3><ul>
<li>引入分布式事务的问题。 </li>
<li>跨节点 Join 的问题。 </li>
<li>跨节点合并排序分页问题。 </li>
<li>多数据源管理问题。    </li>
</ul>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h2 id="sql防火墙配置"><a href="#sql防火墙配置" class="headerlink" title="sql防火墙配置"></a>sql防火墙配置</h2><ul>
<li>在server.xml中配置</li>
</ul>
<h2 id="Mycat配置"><a href="#Mycat配置" class="headerlink" title="Mycat配置"></a>Mycat配置</h2><h3 id="schema（逻辑库）"><a href="#schema（逻辑库）" class="headerlink" title="schema（逻辑库）"></a>schema（逻辑库）</h3><ul>
<li><p>一个标签，定义一个逻辑数据库。可以同时指定多个标签来指定不同的逻辑库</p>
</li>
<li><p>标签体的属性如下：</p>
<ul>
<li><code>dataNode</code>：字符串，该属性用于绑定逻辑库到某个具体的 database 上 ，多个值用逗号分隔</li>
<li><code>checkSQLschema</code>：布尔值，当该值设置为 true 时，如果我们执行语句<strong>select * from TESTDB.travelrecord;</strong>则 MyCat 会把语句修改 为<strong>select * from travelrecord;</strong> ，设置这个属性为true，可以在navicat中直接查看逻辑表中的所有数据，否则将会报异常（Table ‘testdb.travelrecord’ doesn’ t exist）   </li>
<li><code>sqlMaxLimit</code>：当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应 的值。例如设置值为 100，执行<strong>select * from TESTDB.travelrecord;</strong>的效果为和执行<strong>select * from TESTDB.travelrecord limit 100;</strong>相同。 设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还 是建议加上一个值，用于减少过多的数据返回.当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。 需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。    </li>
</ul>
</li>
</ul>
<h3 id="table-逻辑表"><a href="#table-逻辑表" class="headerlink" title="table (逻辑表)"></a>table (逻辑表)</h3><ul>
<li>属性如下：</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>String</th>
<th>定义逻辑表的表名，这个名字就如同我在数据库中执行 create table 命令指定的名字一样，同个 schema 标 签中定义的名字必须唯一</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataNode</td>
<td>String</td>
<td>定义这个逻辑表所属的 dataNode, 该属性的值需要和 dataNode 标签中 name 属性的值相互对应。多个值用逗号分隔</td>
</tr>
<tr>
<td>rule</td>
<td>String</td>
<td>该属性用于指定逻辑表要使用的规则名字，规则名字在 rule.xml 中定义，必须与 tableRule 标签中 name 属 性属性值一一对应</td>
</tr>
<tr>
<td>ruleRequired</td>
<td>boolean</td>
<td>该属性用于指定表是否绑定分片规则，如果配置为 true，但没有配置具体 rule 的话 ，程序会报错。</td>
</tr>
<tr>
<td>primaryKey</td>
<td>String</td>
<td>该逻辑表对应真实表的主键，例如：分片的规则是使用非主键进行分片的，那么在使用主键查询的时候，就 会发送查询语句到所有配置的 DN 上，如果使用该属性配置真实表的主键。难么 MyCat 会缓存主键与具体 DN 的 信息，那么再次使用非主键进行查询的时候就不会进行广播式的查询，就会直接发送语句给具体的 DN，但是尽管 配置该属性，如果缓存并没有命中的话，还是会发送语句给具体的 DN，来获得数据。<strong>如果没有指定，那么默认使用的是主键字段是id</strong></td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td>该属性定义了逻辑表的类型，目前逻辑表只有“全局表”和”普通表”两种类型。对应的配置： 1、全局表：global。 2、 普通表：不指定该值为 globla 的所有表</td>
</tr>
<tr>
<td>autoIncrement</td>
<td>boolean</td>
<td>mysql 对非自增长主键，使用 last_insert_id()是不会返回结果的，只会返回 0。所以，只有定义了自增长主 键的表才可以用 last_insert_id()返回主键值。 mycat 目前提供了自增长主键功能，但是如果对应的 mysql 节点上数据表，没有定义 auto_increment，那 么在 mycat 层调用 last_insert_id()也是不会返回结果的。 由于 insert 操作的时候没有带入分片键，mycat 会先取下这个表对应的全局序列，然后赋值给分片键。这样 才能正常的插入到数据库中，最后使用 last_insert_id()才会返回插入的分片键值。 如果要使用这个功能最好配合使用数据库模式的全局序列。 75 使用 autoIncrement=“true” 指定这个表有使用自增长主键，这样 mycat 才会不抛出分片键找不到的异 常。 使用 autoIncrement=“false” 来禁用这个功能，当然你也可以直接删除掉这个属性。默认就是禁用的。</td>
</tr>
<tr>
<td>subTables</td>
<td>String</td>
<td></td>
</tr>
<tr>
<td>needAddLimit</td>
<td>boolean</td>
<td>指定表是否需要自动的在每个语句后面加上 limit 限制。由于使用了分库分表，数据量有时会特别巨大。这时 候执行查询语句，如果恰巧又忘记了加上数量限制的话。那么查询所有的数据出来，也够等上一小会儿的。 所以，mycat 就自动的为我们加上 LIMIT 100。当然，如果语句中有 limit，就不会在次添加了。 这个属性默认为 true,你也可以设置成 false`禁用掉默认行为。</td>
</tr>
</tbody>
</table>
<h3 id="dataNode"><a href="#dataNode" class="headerlink" title="dataNode"></a>dataNode</h3><ul>
<li>数据节点，用来设置</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>String</th>
<th>定义数据节点的名字，这个名字需要是唯一的，我们需要在 table 标签上应用这个名字，来建立表与分片对 应的关系</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataHost</td>
<td>String</td>
<td>该属性用于定义该分片属于哪个数据库实例的，属性值是引用 dataHost 标签上定义的 name 属性。</td>
</tr>
<tr>
<td>database</td>
<td>String</td>
<td>该属性用于定义该分片属性哪个具体数据库实例上的具体库，因为这里使用两个纬度来定义分片，就是：实 例+具体的库。因为每个库上建立的表和表结构是一样的。所以这样做就可以轻松的对表进行水平拆分</td>
</tr>
</tbody>
</table>
<h3 id="dataHost"><a href="#dataHost" class="headerlink" title="dataHost"></a>dataHost</h3><ul>
<li><p>作为 Schema.xml 中最后的一个标签，该标签在 mycat 逻辑库中也是作为最底层的标签存在，直接定义了具 体的数据库实例、读写分离配置和心跳语句。现在我们就解析下这个标签。    </p>
</li>
<li><p>配置如下：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>String</th>
<th>唯一标识 dataHost 标签，供上层的标签使用。</th>
</tr>
</thead>
<tbody>
<tr>
<td>maxCon</td>
<td>Integer</td>
<td>指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的 writeHost、 readHost 标签都会使用这个属 性的值来实例化出连接池的最大连接数</td>
</tr>
<tr>
<td>minCon</td>
<td>Integer</td>
<td>指定每个读写实例连接池的最小连接，初始化连接池的大小</td>
</tr>
<tr>
<td>balance</td>
<td>Integer</td>
<td>负载均衡类型，目前的取值有 3 种： 1. balance=”0”, 不开启读写分离机制，所有读操作都发送到当前可用的 writeHost 上。 2. balance=”1”，全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡，简单的说，当双 主双从模式(M1-&gt;S1，M2-&gt;S2，并且 M1 与 M2 互为主备)，正常情况下，M2,S1,S2 都参与 select 语句的负载 均衡。 3. balance=”2”，所有读操作都随机的在 writeHost、 readhost 上分发。 4. balance=”3”，所有读请求随机的分发到 wiriterHost 对应的 readhost 执行，writerHost 不负担读压 力，注意 balance=3 只在 1.4 及其以后版本有，1.3 没有。</td>
</tr>
<tr>
<td>writeType</td>
<td>Integer</td>
<td>负载均衡类型，目前的取值有 3 种： 1. writeType=”0”, 所有写操作发送到配置的第一个 writeHost，第一个挂了切到还生存的第二个 writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties . 2. writeType=”1”，所有写操作都随机的发送到配置的 writeHost，1.5 以后废弃不推荐。</td>
</tr>
<tr>
<td>dbType</td>
<td>String</td>
<td>指定后端连接的数据库类型，目前支持二进制的 mysql 协议，还有其他使用 JDBC 连接的数据库。例如： mongodb、 oracle、 spark 等。</td>
</tr>
<tr>
<td>dbDriver</td>
<td>String</td>
<td>指定连接后端数据库使用的 Driver，目前可选的值有 native 和 JDBC。使用 native 的话，因为这个值执行的 是二进制的 mysql 协议，所以可以使用 mysql 和 maridb。其他类型的数据库则需要使用 JDBC 驱动来支持。 从 1.6 版本开始支持 postgresql 的 native 原始协议。 如果使用 JDBC 的话需要将符合 JDBC 4 标准的驱动 JAR 包放到 MYCAT\lib 目录下，并检查驱动 JAR 包中 包括如下目录结构的文件：META-INF\services\java.sql.Driver。在这个文件内写上具体的 Driver 类名，例如： com.mysql.jdbc.Driver。</td>
</tr>
<tr>
<td>switchType</td>
<td>Integer</td>
<td>-1 表示不自动切换 1 默认值，自动切换 2 基于 MySQL 主从同步的状态决定是否切换 心跳语句为 show slave status 3 基于 MySQL galary cluster 的切换机制（适合集群）（1.4.1） 心跳语句为 show status like ‘wsrep%’.    这个和writeType结合使用</td>
</tr>
</tbody>
</table>
<h3 id="heartbeat"><a href="#heartbeat" class="headerlink" title="heartbeat"></a>heartbeat</h3><ul>
<li>这个标签内指明用于和后端数据库进行心跳检查的语句。例如,MYSQL 可以使用<code>select user()</code>，Oracle 可以 使用 <code>select 1 from dual</code>等。 这个标签还有一个 <code>connectionInitSql</code>属性，主要是当使用 Oracla 数据库时，需要执行的初始化 SQL 语句就 这个放到这里面来。例如：alter session set nls_date_format=’yyyy-mm-dd hh24:mi:ss’ <strong>1.4 主从切换的语句必须是：show slave status</strong>    </li>
</ul>
<h3 id="writeHost-、-readHost"><a href="#writeHost-、-readHost" class="headerlink" title="writeHost 、 readHost"></a>writeHost 、 readHost</h3><ul>
<li>这两个标签都指定后端数据库的相关配置给 mycat，用于实例化后端连接池。唯一不同的是，writeHost 指 定写实例、 readHost 指定读实例，组着这些读写实例来满足系统的要求    </li>
<li>在一个 dataHost 内可以定义多个 writeHost 和 readHost。但是，如果 writeHost 指定的后端数据库宕机， 那么这个 writeHost 绑定的所有 readHost 都将不可用。另一方面，由于这个 writeHost 宕机系统会自动的检测 到，并切换到备用的 writeHost 上去   </li>
<li>这两个标签的属性相同，这里就一起介绍。    </li>
</ul>
<table>
<thead>
<tr>
<th>host</th>
<th>String</th>
<th>用于标识不同实例，一般 writeHost 我们使用<em>M1，readHost 我们用</em>S1。</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>String</td>
<td>后端实例连接地址，如果是使用 native 的 dbDriver，则一般为 address:port 这种形式。用 JDBC 或其他的 dbDriver，则需要特殊指定。当使用 JDBC 时则可以这么写：jdbc:mysql://localhost:3306/。</td>
</tr>
<tr>
<td>password</td>
<td>String</td>
<td>后端存储实例需要的用户名字  ,即是指向mysql的密码</td>
</tr>
<tr>
<td>user</td>
<td>String</td>
<td>后端存储实例需要的密码    ，即是指向mysql的用户</td>
</tr>
<tr>
<td>weight</td>
<td>String</td>
<td>权重 配置在 readhost 中作为读节点的权重（1.4 以后）</td>
</tr>
<tr>
<td>usingDecrypt</td>
<td>String</td>
<td>是否对密码加密默认 0 否 如需要开启配置 1，同时使用加密程序对密码加密</td>
</tr>
</tbody>
</table>
<h3 id="childTable"><a href="#childTable" class="headerlink" title="childTable"></a>childTable</h3><ul>
<li>childTable 标签用于定义 E-R 分片的子表。通过标签上的属性与父表进行关联。    </li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>String</th>
<th>定义子表的表名。</th>
</tr>
</thead>
<tbody>
<tr>
<td>joinKey</td>
<td>String</td>
<td>插入子表的时候会使用这个列的值查找父表存储的数据节点</td>
</tr>
<tr>
<td>parentKey</td>
<td>String</td>
<td>属性指定的值一般为与父表建立关联关系的列名。程序首先获取 joinkey 的值，再通过 parentKey 属性指定 的列名产生查询语句，通过执行该语句得到父表存储在哪个分片上。从而确定子表存储的位置。</td>
</tr>
<tr>
<td>primaryKey</td>
<td>String</td>
<td>同 table 标签所描述的</td>
</tr>
<tr>
<td>needAddLimit</td>
<td>boolean</td>
<td>同 table 标签所描述的</td>
</tr>
<tr>
<td>autoIncrement</td>
<td>boolean</td>
<td>设置是否主键自增</td>
</tr>
</tbody>
</table>
<h3 id="server-xml中的标签"><a href="#server-xml中的标签" class="headerlink" title="server.xml中的标签"></a>server.xml中的标签</h3><h4 id="设置用户"><a href="#设置用户" class="headerlink" title="设置用户"></a>设置用户</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">		user标签可以设置登录的用户，可以指定多个</div><div class="line">		</div><div class="line">		&lt;property name="password"&gt;： 设置该用户登录的密码</div><div class="line">		</div><div class="line">		&lt;property name="schemas"&gt; ：设置该用户可以访问的逻辑库，如果有多个，那么需要使用逗号分隔</div><div class="line">		</div><div class="line">		&lt;property name="readOnly"&gt;true&lt;/property&gt; ： 设置该用户是否对逻辑库为只读权限</div><div class="line">		</div><div class="line">		&lt;property name="benchmark"&gt;11111&lt;/property&gt;： mycat 连接服务降级处理：benchmark 基准, 当前端的整体 connection 数达到基准值是, 对来自该账户的请求开始拒绝连接， 0 或不设</div><div class="line">表示不限制</div><div class="line">		</div><div class="line">		&lt;property name="usingDecrypt"&gt;1&lt;/property&gt;：是否对密码加密默认 0 否 如需要开启配置 1，同时使用加密程序对密码加密</div><div class="line">		</div><div class="line">		privileges 子节点：对用户的 schema 及 下级的 table 进行精细化的 DML 权限控制，privileges 节点中的 check 属性是用</div><div class="line">于标识是否开启 DML 权限检查， 默认 false 标识不检查，当然 privileges 节点不配置，等同 check=false,</div><div class="line">由于 Mycat 一个用户的 schemas 属性可配置多个 schema ，所以 privileges 的下级节点 schema 节点同样</div><div class="line">可配置多个，对多库多表进行细粒度的 DML 权限控制</div><div class="line"></div><div class="line">				schema 标签： 指定逻辑库的名称，用来选择对应的表，可以有多个</div><div class="line"></div><div class="line">        				dml：设置对指定表的crud操作，分别是insert,update,select,delete，对应的如果是0表示禁止，1表示不禁止</div><div class="line">		</div><div class="line">		</div><div class="line">		</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 表级 DML 权限设置 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 		</span></div><div class="line">		&lt;privileges check="false"&gt;</div><div class="line">			&lt;schema name="TESTDB" dml="0110" &gt;</div><div class="line">				&lt;table name="tb01" dml="0000"&gt;&lt;/table&gt;</div><div class="line">				&lt;table name="tb02" dml="1111"&gt;&lt;/table&gt;</div><div class="line">			&lt;/schema&gt;</div><div class="line">			</div><div class="line">			&lt;schema name="TESTDB" dml="0110" &gt;</div><div class="line">				&lt;table name="tb01" dml="0000"&gt;&lt;/table&gt;</div><div class="line">				&lt;table name="tb02" dml="1111"&gt;&lt;/table&gt;</div><div class="line">			&lt;/schema&gt;</div><div class="line">			</div><div class="line">		&lt;/privileges&gt;		</div><div class="line">		 --&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="system标签"><a href="#system标签" class="headerlink" title="system标签"></a>system标签</h4><ul>
<li>这个标签内嵌套的所有 property 标签都与系统配置有关，请注意，下面我会省去标签 property 直接使用这 个标签的 name 属性内的值来介绍这个属性的作用。    </li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>charset</td>
<td>字符集设置。</td>
<td>配置字符集的时候一定要坚持 mycat 的字符集与数据库端的字符集是一致的，可以通过变量来查询。比如<code>&lt;property name=&quot;charset&quot;&gt;utf8&lt;/property&gt;</code></td>
</tr>
<tr>
<td>defaultSqlParser</td>
<td>1.3 解析器默认为 fdbparser，1.4 默认为 druidparser，1.4 以后 fdbparser 作废。</td>
<td>由于 mycat 最初是时候 Foundation DB 的 sql 解析器，而后才添加的 Druid 的解析器。所以这个属性用来 指定默认的解析器。目前的可用的取值有：druidparser 和 fdbparser。使用的时候可以选择其中的一种，目前一 般都使用 druidparser</td>
</tr>
<tr>
<td>processors</td>
<td></td>
<td>这个属性主要用于指定系统可用的线程数，默认值为机器 CPU 核心线程数。 主要影响 processorBufferPool、 processorBufferLocalPercent、 processorExecutor 属性。 NIOProcessor 的个数也是由这个属性定义的，所以调优的时候可以适当的调高这个属性。</td>
</tr>
<tr>
<td>processorBufferChunk</td>
<td></td>
<td>这个属性指定每次分配 Socket Direct Buffer 的大小，默认是 4096 个字节。这个属性也影响 buffer pool 的 长度。如果一次性获取的数过大 buffer 不够用 经常出现警告，则可以适当调大。</td>
</tr>
<tr>
<td>processorBufferPool</td>
<td></td>
<td>这个属性指定 bufferPool 计算 比例值。由于每次执行 NIO 读、写操作都需要使用到 buffer，系统初始化的 时候会建立一定长度的 buffer 池来加快读、写的效率，减少建立 buffer 的时间。 Mycat 中有两个主要的 buffer 池: - BufferPool - ThreadLocalPool BufferPool 由 ThreadLocalPool 组合而成，每次从 BufferPool 中获取 buffer 都会优先获取 ThreadLocalPool 中的 buffer，未命中之后才会去获取 BufferPool 中的 buffer。也就是说 ThreadLocalPool 是 作为 BufferPool 的二级缓存，每个线程内部自己使用的。当然，这其中还有一些限制条件需要线程的名字是由$_ 开头。然而，BufferPool 上的 buffer 则是每个 NIOProcessor 都共享的。 默认这个属性的值为： 默认 bufferChunkSize(4096) <em> processors 属性 </em> 1000 BufferPool 的总长度 = bufferPool / bufferChunk。 若 bufferPool 不是 bufferChunk 的整数倍，则总长度为前面计算得出的商 + 1 假设系统线程数为 4，其他都为属性的默认值，则： bufferPool ＝ 4096 <em> 4 </em> 1000 BufferPool 的总长度 : 4000 = 16384000 / 4096</td>
</tr>
<tr>
<td>processorBufferLocalPercent</td>
<td></td>
<td>前面提到了 ThreadLocalPool。这个属性就是用来控制分配这个 pool 的大小用的，但其也并不是一个准确 的值，也是一个比例值。这个属性默认值为 100。 线程缓存百分比 = bufferLocalPercent / processors 属性。 例如，系统可以同时运行 4 个线程，使用默认值，则根据公式每个线程的百分比为 25。最后根据这个百分比 来计算出具体的 ThreadLocalPool 的长度公式如下： ThreadLocalPool 的长度 = 线程缓存百分比 <em> BufferPool 长度 / 100 假设 BufferPool 的长度为 4000，其他保持默认值。 那么最后每个线程建立上的 ThreadLocalPool 的长度为： 1000 = 25 </em> 4000 / 100</td>
</tr>
<tr>
<td>processorExecutor</td>
<td></td>
<td>这个属性主要用于指定 NIOProcessor 上共享的 businessExecutor 固定线程池大小。 mycat 在需要处理一 些异步逻辑的时候会把任务提交到这个线程池中。新版本中这个连接池的使用频率不是很大了，可以设置一个较 小的值</td>
</tr>
<tr>
<td><strong>sequnceHandlerType</strong></td>
<td></td>
<td>指定使用 Mycat 全局序列的类型。 0 为本地文件方式，1 为数据库方式，2 为时间戳序列方式，3 为分布式 ZK ID 生成器，4 为 zk 递增 id 生成。</td>
</tr>
<tr>
<td><strong>handleDistributedTransactions</strong></td>
<td></td>
<td>分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志</td>
</tr>
</tbody>
</table>
<h2 id="全局表"><a href="#全局表" class="headerlink" title="全局表"></a>全局表</h2><ul>
<li>mycat中使用type定义全局表和普通表(<code>type=global</code>)，没有定义type的类型的都是普通表，是需要分片的</li>
<li>全局表适合那些数据量比较少的，变动不是很频繁的</li>
<li>全局表的插入，更新操作会实时在所有节点上执行，保持各个分片的数据一致性。没有太激烈的update操作。</li>
<li><strong>全局表查询只从一个节点获取</strong></li>
<li><strong>全局表可以和任何一个表进行JOIN操作</strong></li>
<li>需要注意的是，全局表每个分片节点上都要有运行创建表的 DDL 语句。    </li>
</ul>
<h2 id="Mycat的跨分片join"><a href="#Mycat的跨分片join" class="headerlink" title="Mycat的跨分片join"></a>Mycat的跨分片join</h2><ul>
<li>同一个分片的数据可以任意的join，join的数量也没有限制，但是不同分片的数据跨分片join的话，是查询不到结果的</li>
</ul>
<h3 id="全局表-1"><a href="#全局表-1" class="headerlink" title="全局表"></a>全局表</h3><ul>
<li>全局表在每一个分片上都保持着相同的数据，因此全局表可以和任意的表跨分片join</li>
</ul>
<h3 id="ER-join"><a href="#ER-join" class="headerlink" title="ER join"></a>ER join</h3><ul>
<li>我们可以根据ER关系设置每张表的关系，比如订单表依赖于用户表，我们可以设置ER join方式的，那么会根据外键（joinKey）的值和相关依赖的表分配在同一个分片上，那么就可以join了</li>
<li><strong>支持多表join</strong></li>
<li>配置如下（其中childTable中也可以嵌套childTable）：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_user"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2,dn3"</span> <span class="attr">rule</span>=<span class="string">"auto-sharding-long"</span> <span class="attr">primaryKey</span>=<span class="string">"id"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--订单表，</span></div><div class="line">			joinKey是t_order和t_user关联的外键关系，</div><div class="line">			parentKey指定的是t_user表中的主键</div><div class="line">			primaryKey：指定的是t_order的主键</div><div class="line">			autoIncrement：设置是否主键自增</div><div class="line">--&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">"t_order"</span> <span class="attr">joinKey</span>=<span class="string">"user_id"</span> <span class="attr">parentKey</span>=<span class="string">"id"</span> <span class="attr">primaryKey</span>=<span class="string">"id"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Share-Join"><a href="#Share-Join" class="headerlink" title="Share Join"></a>Share Join</h3><h2 id="mycat自增主键的配置（数据库方式）"><a href="#mycat自增主键的配置（数据库方式）" class="headerlink" title="mycat自增主键的配置（数据库方式）"></a>mycat自增主键的配置（数据库方式）</h2><ul>
<li>在mycat中并没有实现mysql的自增主键的配置，如果需要实现的话，需要自己配置。</li>
<li>自增主键的方式配置有多种方式，比如本地方式，数据库方式，ZK方式，时间戳的方式，这里我们测试的是数据库的方式。</li>
</ul>
<h3 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h3><p>1、修改<code>server.xml</code>中生成方式为数据库生成的方式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--将sequnceHandlerType设置为1--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sequnceHandlerType"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、在<code>schema.xml</code>中，table中增加属性<code>autoIncrement</code>值为<code>true</code>，添加<code>mycat_sequence</code>表 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"Test"</span> <span class="attr">checkSQLschema</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- auto sharding by id (long)</span></div><div class="line"> 		rule:指定分片的规则为根据Id自动分片</div><div class="line">		primaryKey： 指定主键</div><div class="line">		autoIncrement： 指定自增长，一定要为true</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_item"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2,dn3"</span> <span class="attr">rule</span>=<span class="string">"auto-sharding-long"</span> <span class="attr">primaryKey</span>=<span class="string">"id"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span>  /&gt;</span></div><div class="line">    	<span class="comment">&lt;!--指定自增长的表，数据节点为dn1--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"mycat_sequence"</span> <span class="attr">primaryKey</span>=<span class="string">"name"</span> <span class="attr">dataNode</span>=<span class="string">"dn1"</span> /&gt;</span></div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"db1"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn2"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"db2"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn3"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"db3"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>3、在数据节点<code>dn1</code>的数据库<code>db1</code>中新建<code>mycat_sequence</code>的表，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、name：sequence：名称</div><div class="line"></div><div class="line">2、currenct_value：当前value</div><div class="line"></div><div class="line">3、increment：增长步长</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> MYCAT_SEQUENCE;   </div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MYCAT_SEQUENCE(   </div><div class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </div><div class="line">    current_value <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </div><div class="line">    <span class="keyword">increment</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>,  </div><div class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">name</span>)  </div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</div></pre></td></tr></table></figure>
<p>4、在db1数据中创建存储函数，用来维持自增长</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 获取当前sequence的值 (返回当前值,增量)  </span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_currval;  </div><div class="line">DELIMITER $  </div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_currval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf8  </div><div class="line"><span class="keyword">DETERMINISTIC</span>  </div><div class="line"><span class="keyword">BEGIN</span>  </div><div class="line"><span class="keyword">DECLARE</span> retval <span class="built_in">VARCHAR</span>(<span class="number">64</span>);  </div><div class="line"><span class="keyword">SET</span> retval=<span class="string">"-999999999,null"</span>;  </div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="keyword">CAST</span>(current_value <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="string">","</span>,<span class="keyword">CAST</span>(<span class="keyword">increment</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>)) <span class="keyword">INTO</span> retval <span class="keyword">FROM</span> MYCAT_SEQUENCE <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name;  </div><div class="line">RETURN retval;  </div><div class="line"><span class="keyword">END</span> $  </div><div class="line">DELIMITER ;  </div><div class="line">      </div><div class="line"><span class="comment">-- 设置sequence值  </span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_setval;  </div><div class="line">DELIMITER $  </div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_setval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>),<span class="keyword">value</span> <span class="built_in">INTEGER</span>) <span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf8  </div><div class="line"><span class="keyword">DETERMINISTIC</span>  </div><div class="line"><span class="keyword">BEGIN</span>  </div><div class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE  </div><div class="line"><span class="keyword">SET</span> current_value = <span class="keyword">value</span>  </div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name;  </div><div class="line">RETURN mycat_seq_currval(seq_name);  </div><div class="line"><span class="keyword">END</span> $  </div><div class="line">DELIMITER ;  </div><div class="line">    </div><div class="line"><span class="comment">-- 获取下一个sequence值  </span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mycat_seq_nextval;  </div><div class="line">DELIMITER $  </div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_nextval(seq_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf8  </div><div class="line"><span class="keyword">DETERMINISTIC</span>  </div><div class="line"><span class="keyword">BEGIN</span>  </div><div class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE  </div><div class="line"><span class="keyword">SET</span> current_value = current_value + <span class="keyword">increment</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = seq_name;  </div><div class="line">RETURN mycat_seq_currval(seq_name);  </div><div class="line"><span class="keyword">END</span> $  </div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure>
<p>5、在<code>mycat_sequence</code>表中插入数据，用来记录<code>t_item</code>表的自增长数据，名称必须全部大写</p>
<p>​    1、<strong>当然这里一条数据就代表一张表自增长，如果想要其他的表也能自增长，那么直接添加即可</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> MYCAT_SEQUENCE(<span class="keyword">name</span>, current_value, <span class="keyword">increment</span>) <span class="keyword">VALUES</span> (<span class="string">'T_TIEM'</span>, <span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>6、在<code>conf/sequence_db_conf.properties</code>的文件中添加依赖全局序列，增加序列，与table名称相同全大写 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># T_ITEM是自增长的表，dn1是mycat_sequence所在的数据节点，之后每添加一张自增长的表，只需要在其中添加即可</div><div class="line">T_ITEM=dn1</div></pre></td></tr></table></figure>
<p>7、测试，向t_item表中添加数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_item(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">"chenjiabing"</span>);</div></pre></td></tr></table></figure>
<p>8、测试使用mybatis添加数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Insert</span>(<span class="string">"INSERT into t_item(name) values(#&#123;name&#125;)"</span>)</div><div class="line"><span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)   <span class="comment">//自增长主键返回</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="http://deweing.github.io/2016/06/28/mycat-auto-increment/" target="_blank" rel="external">http://deweing.github.io/2016/06/28/mycat-auto-increment/</a></li>
</ul>
<h2 id="Java操作Mycat"><a href="#Java操作Mycat" class="headerlink" title="Java操作Mycat"></a>Java操作Mycat</h2><ul>
<li>只需要将连接mysql的端口改成<strong>8066</strong>即可，其他的就像是操作mysql一样</li>
</ul>
<h2 id="Mycat的事务处理"><a href="#Mycat的事务处理" class="headerlink" title="Mycat的事务处理"></a>Mycat的事务处理</h2><ul>
<li>Mycat 目前没有出来跨分片的事务强一致性支持，目前单库内部可以保证事务的完整性，如果跨库事务， 在执行的时候任何分片出错，可以保证所有分片回滚，但是一旦应用发起 commit 指令，无法保证所有分片都成 功，考虑到某个分片挂的可能性不大所以称为弱 XA。    </li>
<li>也就是说，我们在单体应用中可以正常使用spring提供的事务管理器进行事务的管理，在处理出现异常的时候也是可以回滚的。</li>
</ul>
<h2 id="Mycat查询"><a href="#Mycat查询" class="headerlink" title="Mycat查询"></a>Mycat查询</h2><h3 id="非分片字段查询"><a href="#非分片字段查询" class="headerlink" title="非分片字段查询"></a>非分片字段查询</h3><ul>
<li>如果查询条件中有分片字段的话，那么mycat就可以轻松的根据分片规则找到对应的数据节点，然后在对应节点中查询，比如使用的是id取模分片规则，那么此时的id就是分片字段，一旦查询条件中有id这个字段的，就可以根据id的值定位到指定的节点中查询，否则将会在每个节点中执行sql语句，然后将每个节点的返回结果汇总返回</li>
</ul>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ul>
<li>mycat针对分页查询的执行逻辑如下：<ul>
<li>根据sql语句的过滤条件到每个数据节点筛选数据，筛选完成之后返回各个节点的分页数据</li>
<li>mycat会判断哪个节点先返回数据，真正返回给客户端的就是<strong>先返回数据</strong>的那个节点上的数据库中</li>
</ul>
</li>
<li><strong>根据上面的分析，我们可以判断分页查询的数据每次都是不同的，不同数据节点的返回速度决定着分页查询的数据显示。</strong></li>
<li><strong>解决办法：在分页查询的时候必要的时候进行排序，这样返回的结果才是正确的，不然每次返回的结果可能不同，比如<code>select * from t_item order by id desc limit 1,29</code></strong></li>
</ul>
<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><ul>
<li>mycat 的排序查询的执行逻辑如下：<ul>
<li>将sql语句发送到各个节点进行筛选数据，返回数据给mycat</li>
<li>mycat获取到各个节点的数据的时候会根据 不同的排序规则（升序，降序）对全部节点的数据重新排序，最后所有数据排序完成的结果就是正确的结果</li>
</ul>
</li>
</ul>
<h3 id="分页排序查询"><a href="#分页排序查询" class="headerlink" title="分页排序查询"></a>分页排序查询</h3><h2 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.cnblogs.com/jpfss/p/8194111.html" target="_blank" rel="external">https://www.cnblogs.com/jpfss/p/8194111.html</a></li>
<li><a href="http://ono60m7tl.bkt.clouddn.com/Mycat_V1.6.0.pdf" target="_blank" rel="external">Mycat权威指南</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mycat入门&quot;&gt;&lt;a href=&quot;#Mycat入门&quot; class=&quot;headerlink&quot; title=&quot;Mycat入门&quot;&gt;&lt;/a&gt;Mycat入门&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>springBoot整合dubbo</title>
    <link href="http://chenjiabing666.github.io/2018/10/03/springBoot%E6%95%B4%E5%90%88dubbo/"/>
    <id>http://chenjiabing666.github.io/2018/10/03/springBoot整合dubbo/</id>
    <published>2018-10-03T09:34:00.000Z</published>
    <updated>2018-10-03T09:34:45.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合dubbo"><a href="#SpringBoot整合dubbo" class="headerlink" title="SpringBoot整合dubbo"></a>SpringBoot整合dubbo</h1><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><ul>
<li>创建springBoot项目，导入dubbo依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加dubbo的启动器, 其中已经添加了zookepper的依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置dubbo的连接和zookeeper的连接，在application.properties中添加如下配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 启动的端口号</div><div class="line">server.port=8001</div><div class="line">server.servlet.context-path=/provider</div><div class="line"># 暴露的服务名称</div><div class="line">dubbo.application.name=user-service</div><div class="line"># zookeeper注册中心的地址</div><div class="line">dubbo.registry.address=zookeeper://39.105.123.197:2181</div></pre></td></tr></table></figure>
<ul>
<li>在主配置类上添加<code>@EnableDubbo</code>注解，开启dubbo</li>
</ul>
<h2 id="暴露服务"><a href="#暴露服务" class="headerlink" title="暴露服务"></a>暴露服务</h2><ul>
<li>在spring中使用的<code>&lt;dubbo:service&gt;</code>暴露服务，但是在springBoot中只需要使用dubbo的注解<code>@Service</code>（com.alibaba.dubbo.config.annotation.Service）即可自动暴露。如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</div><div class="line"><span class="keyword">import</span> cn.tedu.demo.beans.User;</div><div class="line"><span class="keyword">import</span> cn.tedu.demo.service.UserService;</div><div class="line"></div><div class="line"><span class="meta">@Service</span> <span class="comment">//暴露服务,只需要在对应的服务类上添加这个注解即可</span></div><div class="line"><span class="meta">@Component</span>   <span class="comment">//注入到IOC容器中</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer userId)</span> </span>&#123;</div><div class="line">		User user=<span class="keyword">new</span> User();</div><div class="line">		user.setAge(<span class="number">22</span>);</div><div class="line">		user.setUserId(userId);</div><div class="line">		user.setUserName(<span class="string">"陈加兵"</span>);</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="引用服务"><a href="#引用服务" class="headerlink" title="引用服务"></a>引用服务</h2><ul>
<li>在spring的配置文件中使用<code>&lt;dubbo:reference&gt;</code>引用服务，但是在springBoot中只需要使用dubbo的注解<code>@Reference</code>即可引用对应的服务</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">	<span class="meta">@Reference</span>  <span class="comment">//消费者引用提供者提供的服务，相当于&lt;dubbo:reference&gt;</span></div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/user/get/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer userId)</span>&#123;</div><div class="line">		<span class="keyword">return</span> userService.getUser(userId);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="maven聚合springBoot项目"><a href="#maven聚合springBoot项目" class="headerlink" title="maven聚合springBoot项目"></a>maven聚合springBoot项目</h2><ul>
<li><p><a href="http://ono60m7tl.bkt.clouddn.com/demo-parent.zip" target="_blank" rel="external">项目地址-点击下载</a></p>
</li>
<li><p>创建<code>demo-parent</code>父项目管理版本，但是在springBoot项目中也是使用父项目管理的，因此我们需要在父项目中使用springBoot的依赖管理的starter来替代之前的parent</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--之前的parent，在springBoot创建的时候将会添加，但是这里不需要</span></div><div class="line">&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;2.0.5.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath /&gt; </div><div class="line">&lt;/parent&gt;</div><div class="line">--&gt;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">springBoot-version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">springBoot-version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 直接使用这个依赖管理springBoot的版本即可 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springBoot-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>demo-parent</code>新建module</li>
<li>在新的module的pom.xml直接添加springBoot的启动器即可，不用指定版本</li>
</ul>
<h3 id="maven创建springBoot工程"><a href="#maven创建springBoot工程" class="headerlink" title="maven创建springBoot工程"></a>maven创建springBoot工程</h3><p>1、新建一个module，打包方式为jar</p>
<p>2、添加依赖，如下（直接添加依赖，因为父工程demo-parent已经管理了版本）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、在<code>src/main/resources</code>包的下新建springBoot的配置文件application.properties</p>
<p>4、新建一个启动类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//标记为springBoot的启动类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="maven打包springBoot注意"><a href="#maven打包springBoot注意" class="headerlink" title="maven打包springBoot注意"></a>maven打包springBoot注意</h3><p>1、在pom文件中添加如下依赖（如果不添加如下依赖，可能打出的jar包运行将会报错找不到主程序清单）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;finalName&gt;batman-web&lt;/finalName&gt; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>           </div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>             </div><div class="line">				<span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot整合dubbo&quot;&gt;&lt;a href=&quot;#SpringBoot整合dubbo&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合dubbo&quot;&gt;&lt;/a&gt;SpringBoot整合dubbo&lt;/h1&gt;&lt;h2 id=&quot;搭建项目&quot;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>mysql索引优化详解</title>
    <link href="http://chenjiabing666.github.io/2018/09/07/mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
    <id>http://chenjiabing666.github.io/2018/09/07/mysql索引优化详解/</id>
    <published>2018-09-06T16:31:32.000Z</published>
    <updated>2018-09-06T16:32:13.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><ul>
<li>使用explain能够知道自己写的sql语句在mysql中到底是怎样运行的，到底扫描了多少行，是否使用了索引，返回的结果如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+<span class="comment">------+-------------+-----------+------+---------------+------+---------+------+------+-------+</span></div><div class="line">| id   | select_type | table     | type | possible_keys | key  | key_len | ref  | rows | Extra |</div><div class="line">+<span class="comment">------+-------------+-----------+------+---------------+------+---------+------+------+-------+</span></div><div class="line">|    1 | SIMPLE      | t_blogger | ALL  | NULL          | NULL | NULL    | NULL |    2 |       |</div><div class="line">+<span class="comment">------+-------------+-----------+------+---------------+------+---------+------+------+-------+</span></div></pre></td></tr></table></figure>
<ul>
<li>下面将会针对上面的值详细讲解</li>
</ul>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><ul>
<li>sql执行查询的序列号，决定了查询中select子句的查询顺序，分为三种情况，如下：</li>
</ul>
<h4 id="id相同"><a href="#id相同" class="headerlink" title="id相同"></a>id相同</h4><ul>
<li>查询的select子句从<strong>上到到下</strong>执行，如下：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">MariaDB [db_blog3]&gt; explain select * from t_blog ,t_blogger;</div><div class="line"></div><div class="line">+------+-------------+-----------+------+---------------+------+---------+------+------+------------------------------------+</div><div class="line">| id   | select_type | table     | type | possible_keys | key  | key_len | ref  | rows | Extra                              |</div><div class="line">+------+-------------+-----------+------+---------------+------+---------+------+------+------------------------------------+</div><div class="line">|    1 | SIMPLE      | t_blogger | ALL  | NULL          | NULL | NULL    | NULL |    2 |                                    |</div><div class="line">|    1 | SIMPLE      | t_blog    | ALL  | NULL          | NULL | NULL    | NULL |   16 | Using join buffer (flat, BNL join) |</div><div class="line">+------+-------------+-----------+------+---------------+------+---------+------+------+------------------------------------+</div></pre></td></tr></table></figure>
<ul>
<li>那么执行的孙顺序就是先查询<code>t_blogger</code>，之后查询<code>t_blog</code></li>
</ul>
<h4 id="id不同"><a href="#id不同" class="headerlink" title="id不同"></a>id不同</h4><ul>
<li>id的值越大优先级越高，就先执行，剩下相同的id的值，按照顺序从上到下执行</li>
</ul>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><ul>
<li>select语句执行查询的表，如果是使用联合查询的，那么会使用这个值可能是虚拟的表</li>
</ul>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h3><ul>
<li>全部使用了索引，并且如果是复合索引，一定要按照复合索引的顺序查询，这样才能达到最高效的查询，如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 为user表创建组合索引 index_nameAgePos</span></div><div class="line"></div><div class="line"><span class="comment">-- 全值匹配的实例 ,查询的条件的顺序必须和创建索引的顺序一致</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> age=<span class="number">22</span> <span class="keyword">and</span> pos=<span class="string">"1"</span></div></pre></td></tr></table></figure>
<h3 id="最佳左前缀法则"><a href="#最佳左前缀法则" class="headerlink" title="最佳左前缀法则"></a>最佳左前缀法则</h3><ul>
<li><strong>如果使用了组合索引（索引了多列） ，那么一定查询要从最左前列开始并且不能跳过索引中的列</strong></li>
<li>比如<code>index_nameAgePos</code>这个索引，实例如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 全值匹配，最为高效</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> age=<span class="number">22</span> <span class="keyword">and</span> pos=<span class="string">"1"</span>  </div><div class="line"></div><div class="line"><span class="comment">-- 去掉最后一个，使用前两个，那么前两个索引会有效，使用了部分索引</span></div><div class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> age=<span class="number">22</span></div><div class="line"></div><div class="line"><span class="comment">-- 去掉后面两个，只是用第一个，索引依然有效，使用了第一个索引的类，部分索引</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span></div><div class="line"></div><div class="line"><span class="comment">-- 去掉第一个，使用后面两个索引查询，没有使用做前缀，索引失效，</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">and</span> age=<span class="number">22</span> <span class="keyword">and</span> pos=<span class="string">"1"</span>  </div><div class="line"></div><div class="line"><span class="comment">-- 去掉中间的一个，只使用第一个和第三个,中间断了，不能查找到索引，索引失效，即使有了做前缀依然会失效</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> pos=<span class="string">"1"</span></div></pre></td></tr></table></figure>
<ul>
<li>通过上面的例子得出：<strong>使用组合索引的时候，一定要带上左前缀，并且不能跳过中间的索引，否则将会索引失效</strong></li>
</ul>
<h3 id="不在索引上列上做任何操作"><a href="#不在索引上列上做任何操作" class="headerlink" title="不在索引上列上做任何操作"></a>不在索引上列上做任何操作</h3><ul>
<li>不要在索引列上做任何的操作，包括<strong>计算、函数、自动或者手动类型的转换</strong>，这样都会导致索引失效</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="number">2000</span>  <span class="comment">---- 我们知道name是一个varchar类型的，但是用name=2000虽然能够查到，但是在内部其实是将name转换成了数值类型，因此不能使用索引</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">left</span>(<span class="keyword">name</span>,<span class="number">4</span>)=<span class="string">"TOm"</span>    <span class="comment">-- 这里将对name使用了left这个函数，索引失效</span></div></pre></td></tr></table></figure>
<h3 id="不能使用索引中范围条件右边的列（范围之后的索引全失效）"><a href="#不能使用索引中范围条件右边的列（范围之后的索引全失效）" class="headerlink" title="不能使用索引中范围条件右边的列（范围之后的索引全失效）"></a>不能使用索引中范围条件右边的列（范围之后的索引全失效）</h3><ul>
<li>在使用组合索引的时候，一旦索引中有列使用了<strong>范围查询</strong>（&gt;=…in….like,between子句），那么在其右边的索引将会失效</li>
<li>假设创建了组合索引，顺序为<strong>name，age，address</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-- age使用了范围查询，那么在其右边的address将不会使用索引查询，但是name和age使用了索引</div><div class="line">explain select age from user where name=<span class="string">"JOhn"</span> and age&gt;<span class="number">22</span> and address=<span class="string">"江苏"</span>；</div></pre></td></tr></table></figure>
<h3 id="使用覆盖索引，少使用select"><a href="#使用覆盖索引，少使用select" class="headerlink" title="使用覆盖索引，少使用select*"></a>使用覆盖索引，少使用select*</h3><ul>
<li>需要用到什么数据就查询什么数据，这样可以减少网络的传输和mysql的全表扫描</li>
<li><strong>尽量使用覆盖索引，比如索引为<code>name，age，address</code>的组合索引，那么尽量覆盖这三个字段之中的值，mysql将会直接在索引上取值（using index）。并且返回值不包含不是索引的字段</strong></li>
</ul>
<h3 id="mysql在使用不等于-或者-lt-gt-的时候无法使用导致全表扫描"><a href="#mysql在使用不等于-或者-lt-gt-的时候无法使用导致全表扫描" class="headerlink" title="mysql在使用不等于(!=或者&lt;&gt;)的时候无法使用导致全表扫描"></a>mysql在使用不等于(!=或者&lt;&gt;)的时候无法使用导致全表扫描</h3><ul>
<li>在查询的时候，如果对索引使用不等于的操作将会导致索引失效，进行全表扫描</li>
</ul>
<h3 id="在使用or的时候，前后两个都是索引的时候才会生效"><a href="#在使用or的时候，前后两个都是索引的时候才会生效" class="headerlink" title="在使用or的时候，前后两个都是索引的时候才会生效"></a>在使用or的时候，前后两个都是索引的时候才会生效</h3><ul>
<li>比如我们创建组合索引<code>name，age，address</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"John"</span> <span class="keyword">or</span> age=<span class="number">22</span>;  <span class="comment">-- name和age都是索引，生效</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"John"</span> <span class="keyword">or</span> pos=<span class="number">22</span>;    <span class="comment">-- pos不是索引，因此导致全表扫描，索引失效</span></div></pre></td></tr></table></figure>
<h3 id="is-null和is-not-null-导致索引失效"><a href="#is-null和is-not-null-导致索引失效" class="headerlink" title="is null和is not null 导致索引失效"></a>is null和is not null 导致索引失效</h3><ul>
<li>索引条件一旦是is null或者is not null 将会导致索引失效</li>
</ul>
<h3 id="like使用-开头的将会导致索引失效"><a href="#like使用-开头的将会导致索引失效" class="headerlink" title="like使用%开头的将会导致索引失效"></a>like使用%开头的将会导致索引失效</h3><ul>
<li>如果使用模糊查找的时候，使用<code>%a%</code>的时候将会导致索引失效</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a%"</span>;   <span class="comment">--  索引失效</span></div><div class="line"></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"a%"</span>;  <span class="comment">-- 索引生效、</span></div><div class="line"></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a"</span>;  <span class="comment">--- 索引失效</span></div></pre></td></tr></table></figure>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>需求就需要使用<code>%$%</code>查询，那么我们如何解决索引失效？我们可以使用覆盖索引避免索引失效</li>
<li>假设我们的索引为<code>name，age</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%aa%"</span>;   <span class="comment">-- 索引失效，没有使用覆盖索引而是select*</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a%"</span> ;   <span class="comment">-- 索引生效，使用了覆盖索引，返回索引列name</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%aa%"</span>  <span class="comment">-- 索引生效，name和age都是索引</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> naem，pos <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a"</span>  <span class="comment">-- 索引失效，pos不是索引</span></div></pre></td></tr></table></figure>
<h3 id="字符串不加单引号导致索引失效"><a href="#字符串不加单引号导致索引失效" class="headerlink" title="字符串不加单引号导致索引失效"></a>字符串不加单引号导致索引失效</h3><ul>
<li><code>select * from user where pos=2000</code>，将会导致name这个索引失效，因为mysql在底层会自动为name这个字段进行类型转换</li>
</ul>
<h3 id="单表查询优化"><a href="#单表查询优化" class="headerlink" title="单表查询优化"></a>单表查询优化</h3><ul>
<li>在经常查询或者排序的字段建立索引</li>
</ul>
<h3 id="两表查询优化"><a href="#两表查询优化" class="headerlink" title="两表查询优化"></a>两表查询优化</h3><ul>
<li>我们一般会使用联合查询，比如left Join，right Join</li>
<li>我们在不建立索引的情况下，如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 没有索引，全表扫描</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">left</span> <span class="keyword">join</span> image <span class="keyword">on</span> user.url=image.url</div></pre></td></tr></table></figure>
<ul>
<li>那么我们这个索引应该建在哪张表上呢？我们验证之后知道，应该在image表中对url建立索引</li>
<li><strong>总结：左连接在右边的表上加索引，右连接在左表添加索引</strong></li>
</ul>
<h3 id="三表查询优化"><a href="#三表查询优化" class="headerlink" title="三表查询优化"></a>三表查询优化</h3><ul>
<li>三表建立索引，依然按照左连接在右表上建立索引，右连接在左表上建立索引。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 没有建立索引，全表扫描</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">left</span> jon t2 t1.name=t2.name <span class="keyword">left</span> <span class="keyword">join</span> t3 t2.url=t3.url</div></pre></td></tr></table></figure>
<ul>
<li><strong>我们可以在<code>t2</code>的表上为<code>name</code>字段建立索引，在<code>t3</code>表上为<code>url</code>字段建立索引</strong>，那么将会使用索引查询</li>
</ul>
<h3 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a>小表驱动大表</h3><ul>
<li>在链接查询的时候，比如<code>left Join</code>，这种查询是左边的表驱动右边的表，那么我们应该小表驱动大表的策略，对于左连接的时候，左边的表应该是小表，右连接反之</li>
</ul>
<h3 id="order-by-排序的索引生效"><a href="#order-by-排序的索引生效" class="headerlink" title="order by 排序的索引生效"></a>order by 排序的索引生效</h3><ul>
<li><p>假设组合索引为<code>name，age，address</code></p>
</li>
<li><p>对于order by排序问题，只有满足以下两种情况才会使用索引排序（using index)</p>
<ul>
<li><strong>对于组合索引，order by 语句使用最左前缀查询</strong><ul>
<li><code>select * from user order by name</code>： 使用索引</li>
<li><code>select * from user order by age</code>： 不使用索引</li>
<li><code>select * from user order by name,age</code>： 使用索引，因为排序规则一样并且是左前缀查询</li>
<li><code>select * from user order by name asc,age desc</code>：不使用索引，因为排序规则不同，即使使用了最佳左前缀</li>
</ul>
</li>
<li>使用<code>where</code>子句与<code>order by</code>子句条件列组合满足索引最左前缀查询<ul>
<li><code>select * from user where name=&quot;John&quot; order by age</code> ： 使用索引，因为where中的name和order by中的age组合在一起符合最佳左前缀原则</li>
<li><code>select * from user where age=22 order by address</code>：不使用索引</li>
</ul>
</li>
</ul>
</li>
<li><strong>总结：order by排序应该遵循最佳左前缀查询，如果是使用多个索引字段进行排序，那么排序的规则必须相同（同是升序或者降序）</strong></li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>使用最佳左前缀</li>
<li>提高<code>sort_buffer_size</code>的值：不管是使用单路排序还是双路排序，提高这个参数都会提高查询效率</li>
<li>提高<code>max_length_for_sort_data</code>的值：提高这个参数的值，会增加使用单路排序算法的概率，但是如果设置的太高，数据总容量超出sort_buffer_size的概率增大，明显症状是磁盘I/O活动和低的处理器使用率</li>
</ul>
<p>### </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Explain&quot;&gt;&lt;a href=&quot;#Explain&quot; class=&quot;headerlink&quot; title=&quot;Explain&quot;&gt;&lt;/a&gt;Explain&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用explain能够知道自己写的sql语句在mysql中到底是怎样运行的，到底扫描了多
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>spring的Bean加载过程</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/Bean%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/Bean加载过程/</id>
    <published>2018-09-02T11:45:16.000Z</published>
    <updated>2018-09-02T11:48:23.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-Bean加载过程"><a href="#spring-Bean加载过程" class="headerlink" title="spring Bean加载过程"></a>spring Bean加载过程</h1><p>1、<strong>找准入口  ,使用ClassPathXmlApplicationContext加载配置文件，用于加载classPath下的配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一行，执行完成之后就完成了spring配置文件的加载，刷新spring上下文</span></div><div class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"classpath:spring-mvc.xml"</span>);</div><div class="line"><span class="comment">//获取实例Bean</span></div><div class="line">Person person=context.getBean(<span class="string">"person"</span>,Person.class);</div></pre></td></tr></table></figure>
<p><strong>ClassPathXmlApplicationContext</strong>的继承关系如下：</p>
<p><img src="https://images2015.cnblogs.com/blog/801753/201702/801753-20170201125310058-568989522.png" alt="https://images2015.cnblogs.com/blog/801753/201702/801753-20170201125310058-568989522.png"></p>
<p>2、<strong>现在开始仔细分析第一句，可以看出第一句就已经完成了spring配置文件的加载</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"classpath:spring-mvc.xml"</span>);</div></pre></td></tr></table></figure>
<p>3、<strong>查看classPathXmlApplicationContext的源码，下面表格是对象</strong></p>
<table>
<thead>
<tr>
<th><strong>对象名</strong></th>
<th><strong>类  型</strong></th>
<th><strong>作  用</strong></th>
<th><strong>归属类</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>configResources</td>
<td>Resource[]</td>
<td>配置文件资源对象数组</td>
<td>ClassPathXmlApplicationContext</td>
</tr>
<tr>
<td>configLocations</td>
<td>String[]</td>
<td>配置文件字符串数组，存储配置文件路径</td>
<td>AbstractRefreshableConfigApplicationContext</td>
</tr>
<tr>
<td>beanFactory</td>
<td>DefaultListableBeanFactory</td>
<td>上下文使用的Bean工厂</td>
<td>AbstractRefreshableApplicationContext</td>
</tr>
<tr>
<td>beanFactoryMonitor</td>
<td>Object</td>
<td>Bean工厂使用的同步监视器</td>
<td>AbstractRefreshableApplicationContext</td>
</tr>
<tr>
<td>id</td>
<td>String</td>
<td>上下文使用的唯一Id，标识此ApplicationContext</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>parent</td>
<td>ApplicationContext</td>
<td>父级ApplicationContext</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>beanFactoryPostProcessors</td>
<td><code>List&lt;BeanFactoryPostProcessor&gt;</code></td>
<td>存储BeanFactoryPostProcessor接口，Spring提供的一个扩展点</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>startupShutdownMonitor</td>
<td>Object</td>
<td>refresh方法和destory方法公用的一个监视器，避免两个方法同时执行</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>shutdownHook</td>
<td>Thread</td>
<td>Spring提供的一个钩子，JVM停止执行时会运行Thread里面的方法</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>resourcePatternResolver</td>
<td>ResourcePatternResolver</td>
<td>上下文使用的资源格式解析器</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>lifecycleProcessor</td>
<td>LifecycleProcessor</td>
<td>用于管理Bean生命周期的生命周期处理器接口</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>messageSource</td>
<td>MessageSource</td>
<td>用于实现国际化的一个接口</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>applicationEventMulticaster</td>
<td>ApplicationEventMulticaster</td>
<td>Spring提供的事件管理机制中的事件多播器接口</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>applicationListeners</td>
<td>Set<applicationlistener></applicationlistener></td>
<td>Spring提供的事件管理机制中的应用监听器</td>
<td>AbstractApplicationContext</td>
</tr>
</tbody>
</table>
<p>4、<strong>从构造方法可以看出，加载spring配置文件实际调用的是如下构造方法：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, ApplicationContext parent)</span></span></div><div class="line">			<span class="keyword">throws</span> BeansException &#123;</div><div class="line">		<span class="comment">//设置父级的ApplicationContext，null</span></div><div class="line">		<span class="keyword">super</span>(parent);</div><div class="line">    	<span class="comment">//1.设置配置文件的路径， 2. 将路径中的占位符$&#123;placeholder&#125;使用系统的变量替换</span></div><div class="line">		setConfigLocations(configLocations);</div><div class="line">		<span class="keyword">if</span> (refresh) &#123;</div><div class="line">			refresh();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>5、<strong>进入<code>setConfigLocations(configLocations);</code>的源码，这个方法是父类AbstractRefreshableConfigApplicationContext中的方法</strong></p>
<pre><code>1. 设置配置文件的路径
2. 替换路径中的占位符`${placeholder}`为系统变量中的值
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//locations : 配置文件路径-+</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(String[] locations)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//断言</span></div><div class="line">			Assert.noNullElements(locations, <span class="string">"Config locations must not be null"</span>);</div><div class="line">            <span class="comment">//存储配置文件路径的数组，存储去掉占位符后的文件路径数组</span></div><div class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</div><div class="line">            <span class="comment">//遍历locations，解析占位符</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</div><div class="line">                	<span class="comment">//调用resolvePath解析占位符</span></div><div class="line">				<span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>6、<strong>进入<code>resolvePath</code>的源码可以知道，实际上执行的是<code>AbstractPropertyResolver</code>的<code>doResolvePlaceholders</code>方法，如下</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* text : 需要解析的路径</div><div class="line">* PropertyPlaceholderHelper ： 这个是解析系统占位符的辅助类，主要用来将占位符替换成系统的环境变量</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doResolvePlaceholders</span><span class="params">(String text, PropertyPlaceholderHelper helper)</span> </span>&#123;</div><div class="line">    	<span class="comment">//调用PropertyPlaceholderHelper类中的replacePlaceholders方法</span></div><div class="line">		<span class="keyword">return</span> helper.replacePlaceholders(text, <span class="keyword">new</span> PropertyPlaceholderHelper.PlaceholderResolver() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholder</span><span class="params">(String placeholderName)</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> getPropertyAsRawString(placeholderName);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>7、<strong>进入<code>PropertyHelpe</code>r中的<code>replacePlaceholders</code>方法</strong>，实际上调用<code>org.springframework.util.PropertyPlaceholderHelper</code>这个类的<code>parseStringValue</code>解析占位符</p>
<ol>
<li>实际调用的是<strong>parseStringValue</strong>方法</li>
<li><strong>this.placeholderPrefix这个是占位符的前缀 ${,在创建PropertyHelper的时候就已经指定了占位符的placeholderPrefix=”${“ ,placeholderSuffix=”}”,valueSeparator=”:”</strong></li>
<li>使用parseStringValue方法递归解析占位符中的内容</li>
<li>在<code>parseStringValue</code>方法中使用两次递归<ol>
<li><code>placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</code>,这个是第一次，用来解析占位符中的placeholder是否还包含占位符，如果有占位符需要将其抽离出来，去掉<code>${}</code></li>
<li><code>propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</code> ，这个是第二次递归调用，用来解析<code>propVal</code>中的占位符</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replacePlaceholders</span><span class="params">(String value, PlaceholderResolver placeholderResolver)</span> </span>&#123;</div><div class="line">		Assert.notNull(value, <span class="string">"Argument 'value' must not be null."</span>);</div><div class="line">    	<span class="comment">//调用的是parseStringValue方法</span></div><div class="line">		<span class="keyword">return</span> parseStringValue(value, placeholderResolver, <span class="keyword">new</span> HashSet&lt;String&gt;());</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* strVal  ： 需要解析的字符串，就是配置文件的路径</div><div class="line">* placeholderResolver ： 策略接口，占位符解析器</div><div class="line">* visitedPlaceholders ： 存储已经访问过的占位符</div><div class="line">**/</div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">parseStringValue</span><span class="params">(</span></span></div><div class="line">			String strVal, PlaceholderResolver placeholderResolver, Set&lt;String&gt; visitedPlaceholders) &#123;</div><div class="line">		<span class="comment">//将strval转换成StringBuilder，便于后续到操作</span></div><div class="line">		StringBuilder buf = <span class="keyword">new</span> StringBuilder(strVal);</div><div class="line">	</div><div class="line">    <span class="comment">//this.placeholderPrefix这个是占位符的前缀 $&#123;,在创建PropertyHelper的时候就已经指定了占位符的placeholderPrefix="$&#123;" ,placeholderSuffix="&#125;",valueSeparator=":"</span></div><div class="line">	<span class="comment">//获取前缀在这个配置文件路径中的开始索引    </span></div><div class="line">		<span class="keyword">int</span> startIndex = strVal.indexOf(<span class="keyword">this</span>.placeholderPrefix);</div><div class="line">    </div><div class="line">		<span class="keyword">while</span> (startIndex != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//占位符前缀在路径中的结束索引</span></div><div class="line">			<span class="keyword">int</span> endIndex = findPlaceholderEndIndex(buf, startIndex);</div><div class="line">            </div><div class="line">            <span class="comment">//如果结束索引存在</span></div><div class="line">			<span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</div><div class="line">                </div><div class="line">                <span class="comment">//此时取出$&#123;plcaeholder&#125;中的占位符内容placeholder</span></div><div class="line">				String placeholder = buf.substring(startIndex + <span class="keyword">this</span>.placeholderPrefix.length(), endIndex);</div><div class="line">                </div><div class="line">                <span class="comment">//保存取出来的占位符内容placeholder</span></div><div class="line">				String originalPlaceholder = placeholder;</div><div class="line">                </div><div class="line">                <span class="comment">//如果占位符中的内容已经被访问过了，抛出出异常返回，递归结束的条件</span></div><div class="line">				<span class="keyword">if</span> (!visitedPlaceholders.add(originalPlaceholder)) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">							<span class="string">"Circular placeholder reference '"</span> + originalPlaceholder + <span class="string">"' in property definitions"</span>);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">                <span class="comment">//递归解析已经取出的占位符中的内容 palceholder</span></div><div class="line">				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</div><div class="line">                </div><div class="line">				</div><div class="line">                <span class="comment">//这个最重要的一步，将解析占位符内容placeholder的值，比如将java.version转换成1.8.0_60</span></div><div class="line">				String propVal = placeholderResolver.resolvePlaceholder(placeholder);</div><div class="line">                </div><div class="line">				<span class="keyword">if</span> (propVal == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.valueSeparator != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">int</span> separatorIndex = placeholder.indexOf(<span class="keyword">this</span>.valueSeparator);</div><div class="line">					<span class="keyword">if</span> (separatorIndex != -<span class="number">1</span>) &#123;</div><div class="line">						String actualPlaceholder = placeholder.substring(<span class="number">0</span>, separatorIndex);</div><div class="line">						String defaultValue = placeholder.substring(separatorIndex + <span class="keyword">this</span>.valueSeparator.length());</div><div class="line">						propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);</div><div class="line">						<span class="keyword">if</span> (propVal == <span class="keyword">null</span>) &#123;</div><div class="line">							propVal = defaultValue;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">                <span class="comment">//如果解析出来的占位符不为空，比如$&#123;java.version&#125;将被解析成 1.8.0_60</span></div><div class="line">				<span class="keyword">if</span> (propVal != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="comment">//此时继续递归解析出1.8.0_60中的占位符</span></div><div class="line">					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</div><div class="line">                    <span class="comment">//将路径中的占位符替换成系统变量的值，比如将$&#123;java.version&#125; 替换成 1.8.0_60</span></div><div class="line">					buf.replace(startIndex, endIndex + <span class="keyword">this</span>.placeholderSuffix.length(), propVal);</div><div class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">						logger.trace(<span class="string">"Resolved placeholder '"</span> + placeholder + <span class="string">"'"</span>);</div><div class="line">					&#125;</div><div class="line">                    <span class="comment">//继续在路径字符串中剩余的子串中查找占位符，如果有占位符，那么还会继续解析占位符</span></div><div class="line">					startIndex = buf.indexOf(<span class="keyword">this</span>.placeholderPrefix, startIndex + propVal.length());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.ignoreUnresolvablePlaceholders) &#123;</div><div class="line">					<span class="comment">// Proceed with unprocessed value.</span></div><div class="line">					startIndex = buf.indexOf(<span class="keyword">this</span>.placeholderPrefix, endIndex + <span class="keyword">this</span>.placeholderSuffix.length());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not resolve placeholder '"</span> +</div><div class="line">							placeholder + <span class="string">"'"</span> + <span class="string">" in string value \""</span> + strVal + <span class="string">"\""</span>);</div><div class="line">				&#125;</div><div class="line">                <span class="comment">//将已转换成功的占位符从以访问的集合中移除即可</span></div><div class="line">				visitedPlaceholders.remove(originalPlaceholder);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				startIndex = -<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> buf.toString();   <span class="comment">//将解析完成之后的配置文件返回</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>8、<strong>总之一句话 ： <code>setConfigLocations(configLocations);</code>的作用就是将客户端传入的配置文件路径，先解析占位符，之后将解析完成之后的配置文件路径存储起来</strong></p>
<p>9、<strong>现在进入ClassPathXmlApplicationContext中的<code>refresh</code>方法，实际上调用的是父类<code>org.springframework.context.support.AbstractApplicationContext</code>的方法，下面我们一个一个方法分析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//刷新spring上下文</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			<span class="comment">//在刷新之前设置一些参数，比如设置开始时间戳，上下文是否激活的标志，输出刷新上下文的信息，验证一些必要的属性</span></div><div class="line">			prepareRefresh();</div><div class="line"></div><div class="line">			<span class="comment">//需要创建beanFactory，如果已经存在beanFactory，那么关闭，详细其请看 10</span></div><div class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// 准备上下文工厂，详情见12</span></div><div class="line">			prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">//允许子类向后置处理器添加组件</span></div><div class="line">				postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 调用BeanFactoryPostProcessor和BeanDefintionRegistoryPostProcessor这两个后置处理器</span></div><div class="line">				invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 注册BeanPostProcessor,用来拦截bean的创建，详情见 14</span></div><div class="line">				registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">//初始化消息源</span></div><div class="line">				initMessageSource();</div><div class="line"></div><div class="line">				<span class="comment">// 初始化应用程序事件广播器，用户可以自定义一个事件广播器，如果用户没有定义，那么使用默认的事件广播器SimpleApplicationEventMulticaster</span></div><div class="line">				initApplicationEventMulticaster();</div><div class="line"></div><div class="line">				<span class="comment">// 在其他子类中初始化bean</span></div><div class="line">				onRefresh();</div><div class="line"></div><div class="line">				<span class="comment">// 检测事件监听器</span></div><div class="line">				registerListeners();</div><div class="line"></div><div class="line">				<span class="comment">//完成实例化剩余的单例(non-lazy-init)</span></div><div class="line">				finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 完成刷新，初始化生命周期处理器......</span></div><div class="line">				finishRefresh();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">				destroyBeans();</div><div class="line"></div><div class="line">				<span class="comment">// Reset 'active' flag.</span></div><div class="line">				cancelRefresh(ex);</div><div class="line"></div><div class="line">				<span class="comment">// Propagate exception to caller.</span></div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>10、进入<code>obtainFreshBeanFactory</code> ，分析源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbastractApplicationContext的方法</span></div><div class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">//实际刷新上下文的方法，这个方法就是实际的刷新上下文方法，其中会调用loadBeanDefinitions(beanFactory);加载配置文件中的内容到BeanDefiniton中</span></div><div class="line">		refreshBeanFactory();</div><div class="line">		ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> beanFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">//org.springframework.context.support.AbstractRefreshableApplicationContext中的方法</span></div><div class="line">	<span class="comment">//AbstractApplicationContext的子类中的方法</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="comment">//如果其中有beanfactory，那么销毁</span></div><div class="line">		<span class="keyword">if</span> (hasBeanFactory()) &#123;</div><div class="line">			destroyBeans();</div><div class="line">			closeBeanFactory();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//重新创建一个beanFactory</span></div><div class="line">			DefaultListableBeanFactory beanFactory = createBeanFactory();</div><div class="line">            <span class="comment">//设置序列化id</span></div><div class="line">			beanFactory.setSerializationId(getId());</div><div class="line">            </div><div class="line">            <span class="comment">//定制beanFactory，设置相关属性，包括是否允许覆盖名称的不同定义的对象及循环依赖以及</span></div><div class="line">			<span class="comment">//设置@Autowired和@Qualifier，注解解析器QualifierAnnotationAutowireCandidateResolver</span></div><div class="line">			customizeBeanFactory(beanFactory);</div><div class="line">            <span class="comment">//加载BeanDefine 详情见  11</span></div><div class="line">			loadBeanDefinitions(beanFactory);</div><div class="line">			<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</div><div class="line">				<span class="keyword">this</span>.beanFactory = beanFactory;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>11、 进入<code>loadBeanDefinitions(beanFactory);</code>方法</p>
<p>​    1、<strong>主要调用的是XmlBeanDefinitionReader其中的loadBeanDefinitions方法，详情请看我的spring之BeanDefinitonReader解析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个是org.springframework.context.support.AbstractXmlApplicationContext类中的方法</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</div><div class="line">       </div><div class="line">	<span class="comment">//创建要给beanDefinitionReader，用于读取BeanDefinition</span></div><div class="line">       <span class="comment">//详情见 BeanDefinitonReader的源码解析</span></div><div class="line">	XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</div><div class="line"></div><div class="line">	<span class="comment">//配置XmlBeanDefinitionReader</span></div><div class="line">	beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</div><div class="line">	beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);	</div><div class="line">	beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">	initBeanDefinitionReader(beanDefinitionReader);</div><div class="line">       <span class="comment">//加载BeanDefiniton，主要的功能从配置文件中读取BeanDefiniton注册到注册表中</span></div><div class="line">	loadBeanDefinitions(beanDefinitionReader);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>12、<strong>prepareBeanFactory ：准备BeanFactory，目前还不太明白，后续分析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//准备BeanFactory，设置一些参数，比如后置处理器，</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">//设置类加载器</span></div><div class="line">		beanFactory.setBeanClassLoader(getClassLoader());</div><div class="line">    	</div><div class="line">    <span class="comment">//设置表达式解析器，用来解析BeanDefiniton中的带有表达式的值</span></div><div class="line">		beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</div><div class="line">    	</div><div class="line">    </div><div class="line">		beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</div><div class="line"></div><div class="line">		<span class="comment">// 配置后置处理器，主要的作用就是在spring实例化bean的前后做一些操作</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div><div class="line">    	</div><div class="line">    	<span class="comment">//忽略自动装配的类，这些类都不能使用@Resource或者@Autowired自动装配获取对象</span></div><div class="line">		beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</div><div class="line"></div><div class="line">		<span class="comment">//注册可解析的自动装配类</span></div><div class="line">		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</div><div class="line">		beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">		<span class="comment">//在添加一个应用程序监听器</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">		<span class="comment">//检查这些类是否被</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line"></div><div class="line">			beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 将下面这些类注册到容器中，使用registerSingleton方法注册，我们可以直接从容器中获取这些类的对象使用</span></div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>13、调用BeanFactory的后置处理器，主要的功能就是调用注册在容器中的BeanFactoryPostProcessor和BeanDefinitionRegistoryPostProcessor</strong></p>
<p>​    1、<strong>BeanFactoryPostProcessor</strong>这个是后置处理器，实现这个类可以修改容器中bean的数据信息，可以在spring配置文件加载之后执行，在单例实例化之前调用，因此可以在其中修改和获取bean的实例化的信息，通过<strong>BeanDefintion</strong></p>
<p>​    2、先调用<strong>BeanDefinitionRegistryPostProcessor</strong>，按照优先级调用，比如分为实现PriorityOrdered这个接口和Orderd这个接口的，分开调用</p>
<p>​    3、再调用实现BeanFactoryPostProcessor这个接口的，也是按照优先级别调用，和上面的流程一样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化和调用BeanFactory后置处理器，必须在单例实例化之前调用</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">    	<span class="comment">//调用后置处理器注册委托类的方法调用，getBeanFactoryPostProcessors用于获取注册的全部的BeanFactoryPostProcessor</span></div><div class="line">		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">//实际的调用方法，PostProcessorRegistrationDelegate中的方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></div><div class="line">		Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">		</div><div class="line">    	<span class="comment">//如果beanFactory是BeanDefinitionRegistry的子类，BeanDefinitionRegistry使用来向注册表中注册Bean的元信息的(BeanDefintion)</span></div><div class="line">		<span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</div><div class="line">			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</div><div class="line">            </div><div class="line">            <span class="comment">//存放BeanFactoryPostProcessor</span></div><div class="line">			List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> LinkedList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">            </div><div class="line">            <span class="comment">//存放BeanDefinitionRegistryPostProcessor</span></div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; registryPostProcessors =</div><div class="line">					<span class="keyword">new</span> LinkedList&lt;BeanDefinitionRegistryPostProcessor&gt;();</div><div class="line">            </div><div class="line">			<span class="comment">//遍历。判断是否是BeanDefinitionRegistryPostProcessor实例</span></div><div class="line">			<span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</div><div class="line">				<span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</div><div class="line">					BeanDefinitionRegistryPostProcessor registryPostProcessor =</div><div class="line">							(BeanDefinitionRegistryPostProcessor) postProcessor;</div><div class="line">                    </div><div class="line">                    	<span class="comment">//调用BeanDefinitionRegistryPostProcessor</span></div><div class="line">					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);</div><div class="line">                    <span class="comment">//添加</span></div><div class="line">					registryPostProcessors.add(registryPostProcessor);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//表示这个是BeanFactoryPostProcessor实例，添加进集合</span></div><div class="line">					regularPostProcessors.add(postProcessor);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">//--- 根据类型类型获取beanFactory中注册的BeanDefinitionRegistryPostProcessor的bean的所有名称数组</span></div><div class="line">			String[] postProcessorNames =</div><div class="line">					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">			<span class="comment">// ---- 首先调用的是BeanDefinitionRegistryPostProcessor类型的后置处理器</span></div><div class="line">            </div><div class="line">            <span class="comment">//存放实现PriorityOrdered这个接口的BeanDefinitionRegistryPostProcessor</span></div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</div><div class="line">            </div><div class="line">            <span class="comment">//遍历，如果实现了PriorityOrdered这个接口就保存下来</span></div><div class="line">			<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">				<span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">					priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</div><div class="line">					processedBeans.add(ppName);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">            </div><div class="line">            <span class="comment">//按照优先级排序</span></div><div class="line">			OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">            <span class="comment">//添加进入集合</span></div><div class="line">			registryPostProcessors.addAll(priorityOrderedPostProcessors);</div><div class="line">            </div><div class="line">            <span class="comment">//首先调用实现PriorityOrdered这个接口的BeanDefinitionRegistryPostProcessor</span></div><div class="line">			invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);</div><div class="line"></div><div class="line">			<span class="comment">// ---- 下面是调用实现Orderd这个接口的BeanDefinitionRegistryPostProcessor</span></div><div class="line">			postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</div><div class="line">			<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">				<span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">					orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</div><div class="line">					processedBeans.add(ppName);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			OrderComparator.sort(orderedPostProcessors);</div><div class="line">			registryPostProcessors.addAll(orderedPostProcessors);</div><div class="line">			invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);</div><div class="line"></div><div class="line">            </div><div class="line">			<span class="comment">// ---- 最终调用剩余全部的BeanDefinitionRegistryPostProcessor</span></div><div class="line">            </div><div class="line">			<span class="keyword">boolean</span> reiterate = <span class="keyword">true</span>;</div><div class="line">			<span class="keyword">while</span> (reiterate) &#123;</div><div class="line">				reiterate = <span class="keyword">false</span>;</div><div class="line">				postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">				<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">					<span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</div><div class="line">						BeanDefinitionRegistryPostProcessor pp = beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class);</div><div class="line">						registryPostProcessors.add(pp);</div><div class="line">						processedBeans.add(ppName);</div><div class="line">						pp.postProcessBeanDefinitionRegistry(registry);</div><div class="line">						reiterate = <span class="keyword">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// 调用BeanFactoryPostProcessor接口中的方法，因为BeanDefitionRegistory继承了这个接口</span></div><div class="line">			invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);</div><div class="line">			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Invoke factory processors registered with the context instance.</span></div><div class="line">			invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//--- 下面是调用实现BeanFactoryPostProcessor接口的类，和上面的流程一样</span></div><div class="line">		String[] postProcessorNames =</div><div class="line">				beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">		List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</div><div class="line">				<span class="comment">// skip - already processed in first phase above</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></div><div class="line">		OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">		invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</div><div class="line"></div><div class="line">		<span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></div><div class="line">		List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</div><div class="line">			orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</div><div class="line">		&#125;</div><div class="line">		OrderComparator.sort(orderedPostProcessors);</div><div class="line">		invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></div><div class="line">		List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</div><div class="line">		&#125;</div><div class="line">		invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>14、注册BeanPostProcessor，用来拦截Bean的创建，这个接口可以实现在Bean初始化和初始化之后执行相关的操作，会有单独一篇解读</p>
<p>​    1、这个注册BeanPostProcessor思想和上面的调用BeanFactoryPostProcessor的思想一样，按照优先级注册，通过判断是否实现PriorityOrdered和orderd接口，按照优先级排序注册到BeanFactory中，其实注册的方法就是将这个后置处理器添加到beanFactory中的<code>List&lt;BeanPostProcessor&gt; beanPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//依然这里依然调用的PostProcessorRegistrationDelegate，其中包含了注册后置处理器和调用后置处理器的方法，相当于一个代理人</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">//PostProcessorRegistrationDelegate中的注册BeanPostProcessors的方法</span></div><div class="line"><span class="comment">//其中beanFactory这个新创建的beanFactory，其中的BeanPostProcessor都没有注册，applicationContext这个是之前创建的，其中的处理器已经注册过了</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</div><div class="line">		</div><div class="line">    	<span class="comment">//根据类型新加载全部的BeanFactoryProcessor的类，</span></div><div class="line">		String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">//创建BeanPostProcessor检测器</span></div><div class="line">		<span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">				priorityOrderedPostProcessors.add(pp);</div><div class="line">				<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">					internalPostProcessors.add(pp);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></div><div class="line">		OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			orderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		OrderComparator.sort(orderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Now, register all regular BeanPostProcessors.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			nonOrderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></div><div class="line">		OrderComparator.sort(internalPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, internalPostProcessors);</div><div class="line"></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、入口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-test.xml"</span>);</div></pre></td></tr></table></figure>
<p>2、解析传入的路径中的占位符，集合<code>org.springframework.core.env.AbstractPropertyResolver</code>和<code>org.springframework.util.PropertyPlaceholderHelper</code></p>
<p>3、刷新上下文</p>
<p>​    1、<code>prepareRefresh()</code> : 准备刷新，设置一些活动标志，比如开始时间，当前的状态</p>
<p>​    2、<code>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()</code>：从spring的配置文件中加载bean，封装成BeanDefinition，注册到注册表中，创建beanFactory</p>
<p>​    3、<code>prepareBeanFactory(beanFactory);</code> ：准备BeanFactory，设置累加载器，添加后置处理器，SPL表达式解析器，向ioc容器中注入一些组件</p>
<p>​    4、<code>postProcessBeanFactory(beanFactory);</code> ： 允许子类做一些处理操作</p>
<p>​    5、<code>invokeBeanFactoryPostProcessors(beanFactory);</code>  ：调用BeanFactoryProcessor，先是调用BeanDefitionRegistoyPostProcessor,之后调用BeanFactoryProcessor</p>
<p>​    6、<code>registerBeanPostProcessors(beanFactory);</code> ： 将配置文件中读取的Bean的后置处理器注册到容器中</p>
<p>​    7、<code>initMessageSource();</code> ：初始化消息源，用于国际化</p>
<p>​    8、<code>initApplicationEventMulticaster()</code>  ： 初始化事件广播器，判断容器中是否已经注册了该组件，如果没有该组件，那么使用默认的</p>
<p>​    9、<code>onRefresh();</code> ：子类初始化一些特殊的bean</p>
<p>​    10、<code>registerListeners();</code> ：注册事件监听器</p>
<p>​    11、<code>finishBeanFactoryInitialization(beanFactory)</code> ：完成初始化，初始化非懒加载的bean</p>
<p>​    12、<code>finishRefresh();</code>  ：完成刷新，最后一步，初始化生命周期处理器，派发事件</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/turkeyzhou/article/category/365505/2" target="_blank" rel="external">https://blog.csdn.net/turkeyzhou/article/category/365505/2</a></li>
<li><a href="https://www.evget.com/article/2016/2/23/23576.html" target="_blank" rel="external">https://www.evget.com/article/2016/2/23/23576.html</a></li>
<li><a href="http://www.cnblogs.com/killbug/p/6087648.html" target="_blank" rel="external">http://www.cnblogs.com/killbug/p/6087648.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-Bean加载过程&quot;&gt;&lt;a href=&quot;#spring-Bean加载过程&quot; class=&quot;headerlink&quot; title=&quot;spring Bean加载过程&quot;&gt;&lt;/a&gt;spring Bean加载过程&lt;/h1&gt;&lt;p&gt;1、&lt;strong&gt;找准入口  ,使
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Data-Redis</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/Spring-Data-Redis/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/Spring-Data-Redis/</id>
    <published>2018-09-02T11:44:03.000Z</published>
    <updated>2018-09-02T11:44:34.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring-Data-Redis"></a>Spring-Data-Redis</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul>
<li>需要spring的版本为<code>4.xxx</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置RedisTemplate"><a href="#配置RedisTemplate" class="headerlink" title="配置RedisTemplate"></a>配置RedisTemplate</h2><ul>
<li>在<code>/src/main/resource</code>文件夹下新建一个<code>redis.properties</code>文件，其中设置redis的配置信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hostName=39.105.123.197  </div><div class="line">port=6379</div><div class="line">timeout=15000</div><div class="line">usePool=true</div><div class="line">maxIdle=80</div><div class="line">minIdle=80</div><div class="line">maxWaitMillis=500</div><div class="line">minEvictableIdleTimeMillis=300000</div><div class="line">numTestsPerEvictionRun=3</div><div class="line">timeBetweenEvictionRunsMillis=60000</div><div class="line">testOnBorrow=true</div><div class="line">testOnReturn=false</div><div class="line">testOnCreate=false</div></pre></td></tr></table></figure>
<ul>
<li>在<code>src/main/resource</code>文件夹下新建一个文件<code>spring-redis.xml</code><ul>
<li>创建连接池<code>JedisPoolConfig</code></li>
<li>创建连接工厂<code>JedisConnectionFactory</code></li>
<li>配置<code>RedisTemplate</code>，用于操作Redis数据库</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载redis.properties,其中定义了数据库的配置信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"redisConfig"</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置Redis的连接池 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置最大空闲连接数，当空闲连接超过该值时就挨个关闭多余的连接，但不能小于minldle --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置最小空闲连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 验证连接是否有效 --&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置获取连接的时候测试连接是否可用，默认为false --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.testOnBorrow&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 新建连接的时候测试连接是否可用，默认为false --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnCreate"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.testOnCreate&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 将连接释放回连接池的时候测试连接 默认为false --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.testOnReturn&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 设置等待获取连接池连接的时间，一旦超过这个时间，抛出异常 单位毫秒 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.maxWaitMillis&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 连接空闲多久从池中去除，单位为毫秒 &lt;=0表示禁用 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.minEvictableIdleTimeMillis&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置每次测试多少空闲连接 &lt;=0表示禁用 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.numTestsPerEvictionRun&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置定时测试时间，单位毫秒 &lt;=0表示禁用 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.timeBetweenEvictionRunsMillis&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</div><div class="line">		<span class="comment">&lt;!-- 设置是否使用连接池，默认为true --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePool"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.usePool&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置连接池，使用上面配置好的连接池jedisPoolConfig --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置远程的IP地址 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.hostName&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置端口号，默认为6379 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置获取连接的超时时间 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.timeout&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置 StringRedisSerializer序列化 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringRedisSerializer"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdkSerializationRedisSerializer"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置RedisTemplate，其中封装了操作Redis的各种方法 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置Jedis的连接工厂，引用上面 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnFactory"</span> /&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置key的序列化 一般都会使用stringRedisSerializer，默认使用的是JdkSerializationRedisSerializer --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span> <span class="attr">ref</span>=<span class="string">"stringRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置JdkSerializationRedisSerializer序列化 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span> <span class="attr">ref</span>=<span class="string">"jdkSerializationRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置hashkey的序列化，就是field --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span> <span class="attr">ref</span>=<span class="string">"stringRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置hashvalue的值的序列化 --&gt;</span>		</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span> <span class="attr">ref</span>=<span class="string">"jdkSerializationRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 开始redis事务，使用mulit和exec即可实现事务的操作和回滚 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableTransactionSupport"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="序列化问题"><a href="#序列化问题" class="headerlink" title="序列化问题"></a>序列化问题</h2><ul>
<li>Spring Data Redis提供了对<code>Key-Value</code>的序列号，在使用<code>RedisTemplate</code>对象是默认使用<code>JdkSerializationRedisSerializer</code>实现。还提供了其它的序列化实现如：<code>Jackson2JsonRedisSerializer</code>，<code>JacksonJsonRedisSerializer</code>，<code>GenericToStringSerializer</code>，<code>StringRedisSerializer</code>，<code>OxmSerializer</code>。</li>
<li>各种序列化的方式有各种的优点，需要自己权衡使用</li>
<li>上面我们使用的是<code>JdkSerializationRedisSerializer</code>，但是我们的<code>key</code>使用的是<code>StringRedisSerializer</code></li>
<li><strong>实体类需要实现序列化接口</strong></li>
</ul>
<h2 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h2><ul>
<li>这个封装了redis中的所有命令，只需要我们调用即可</li>
<li><a href="https://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/RedisTemplate.html" target="_blank" rel="external">API文档</a></li>
</ul>
<h3 id="常用的类"><a href="#常用的类" class="headerlink" title="常用的类"></a>常用的类</h3><table>
<thead>
<tr>
<th>Key类型操作</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>ValueOperations</td>
<td>Redis String/Value 操作</td>
</tr>
<tr>
<td>ListOperations</td>
<td>Redis List 操作</td>
</tr>
<tr>
<td>SetOperations</td>
<td>Redis Set 操作</td>
</tr>
<tr>
<td>ZSetOperations</td>
<td>Redis Sort Set 操作</td>
</tr>
<tr>
<td>HashOperations</td>
<td>Redis Hash 操作</td>
</tr>
<tr>
<td>Value约束操作</td>
<td></td>
</tr>
<tr>
<td>BoundValueOperations</td>
<td>Redis String/Value key 约束</td>
</tr>
<tr>
<td>BoundListOperations</td>
<td>Redis List key 约束</td>
</tr>
<tr>
<td>BoundSetOperations</td>
<td>Redis Set key 约束</td>
</tr>
<tr>
<td>BoundZSetOperations</td>
<td>Redis Sort Set key 约束</td>
</tr>
<tr>
<td>BoundHashOperations</td>
<td>Redis Hash key 约束</td>
</tr>
</tbody>
</table>
<h2 id="spring中处理Redis的事务"><a href="#spring中处理Redis的事务" class="headerlink" title="spring中处理Redis的事务"></a>spring中处理Redis的事务</h2><p>1、spring的事务管理器一定要使用注解方式的，不能使用aop方式的</p>
<p>2、需要在spring-data-redis中开启redis事务，只需要添加如下一条语句即可</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 开始redis事务，使用mulit和exec即可实现事务的操作和回滚 --&gt;</div><div class="line">&lt;property name="enableTransactionSupport" value="true"&gt;&lt;/property&gt;</div></pre></td></tr></table></figure>
<p>3、在spring中使用<code>RedisTemplate.multi</code>和<code>exec</code>方法即可完成事务的控制</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">addUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		userMapper.insertSelective(user);</div><div class="line">		System.out.println(user.getId());</div><div class="line">		template.opsForValue().set(<span class="string">"user:"</span>+user.getId(), user);</div><div class="line">		System.out.println(<span class="number">10</span>/<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>4、参考文章：<a href="https://blog.csdn.net/qq_34021712/article/details/75949756" target="_blank" rel="external">https://blog.csdn.net/qq_34021712/article/details/75949756</a></p>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul>
<li>通过项目中的使用，自己总结了redis的工具类，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.xmlbeans.impl.xb.xsdschema.Public;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations.TypedTuple;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sun.corba.se.impl.oa.poa.ActiveObjectMap.Key;</div><div class="line"><span class="keyword">import</span> com.techwells.teammission.domain.User;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * redis的工具类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span>  RedisTemplate&lt;String, Object&gt; template;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; <span class="title">getTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> template;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; template)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.template = template;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向redis中添加对象,string类型的对象</div><div class="line">	 * <span class="doctag">@param</span> object   需要存储的对象</div><div class="line">	 * <span class="doctag">@param</span> key  存储的键</div><div class="line">	 * <span class="doctag">@throws</span> Exception  出现异常信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">addStringObject</span><span class="params">(String key,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForValue().set(key,object);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加指定的key到Redis中</div><div class="line">	 * <span class="doctag">@param</span> key 指定的Ke</div><div class="line">	 * <span class="doctag">@param</span> object  数据</div><div class="line">	 * <span class="doctag">@param</span> timeout  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit    时间单位</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStringObject</span><span class="params">(String key,Object object,Long timeout,TimeUnit unit)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addStringObject(key, object);</div><div class="line">		template.expire(key, timeout, unit);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据键值从redis中获取对象 string类型的对象</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@return</span>   返回对象</div><div class="line">	 * <span class="doctag">@throws</span> Exception 抛出的异常</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span>  Object <span class="title">getStringObject</span><span class="params">(String key)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		Object object=template.opsForValue().get(key);</div><div class="line">		<span class="keyword">return</span> object;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key删除指定的值</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@throws</span> Exception 异常信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObject</span><span class="params">(String key)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.delete(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量删除对象</div><div class="line">	 * <span class="doctag">@param</span> keys key的集合</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObjectBatch</span><span class="params">(Collection&lt;String&gt; keys)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.delete(keys);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key更新值</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> object  value</div><div class="line">	 * <span class="doctag">@throws</span> Exception  异常信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyStringObject</span><span class="params">(String key,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addStringObject(key, object);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加数据在Hash中</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> field  指定的域</div><div class="line">	 * <span class="doctag">@param</span> object  数据</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHashObject</span><span class="params">(String key,String field,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().put(key, field, object);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向hash中添加数据，并且设置过期的时间</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> field  域</div><div class="line">	 * <span class="doctag">@param</span> object  数据</div><div class="line">	 * <span class="doctag">@param</span> timeout  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit    单位</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHashObject</span><span class="params">(String key,String field,Object object,Long timeout,TimeUnit unit)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addHashObject(key, field, object);</div><div class="line">		<span class="keyword">this</span>.setExpireTimeForKey(key, timeout, unit);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量添加数据到指定的hash中</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> map  需要添加的数据  Map&lt;field,value&gt;</div><div class="line">	 * <span class="doctag">@param</span> expireTime  过期时间，单位秒,如果为null，默认永远不过期</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHashObjectBatch</span><span class="params">(String key,Map&lt;Object, Object&gt; map,Long expireTime,TimeUnit unit)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().putAll(key,map);</div><div class="line">		<span class="keyword">if</span> (expireTime!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.setExpireTimeForKey(key, expireTime,unit);  <span class="comment">//设置过期时间</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 为指定的key设置过期时间</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> timeout  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit   指定时间的单位</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpireTimeForKey</span><span class="params">(String key,Long timeout,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.expire(key, timeout, unit);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除指定的key</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteKey</span><span class="params">(String key)</span></span>&#123;</div><div class="line">		template.delete(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key，field从hash中获取数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 * <span class="doctag">@return</span>  Object对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getHashObject</span><span class="params">(String key,String field)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForHash().get(key, field);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改指定key，field中的数据</div><div class="line">	 * <span class="doctag">@param</span> key  </div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 * <span class="doctag">@param</span> object</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyHashObject</span><span class="params">(String key,String field,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addHashObject(key, field, object);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除指定的key和field中的数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHashObject</span><span class="params">(String key,String field)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.deleteHashObjectBatch(key, <span class="keyword">new</span> Object[]&#123;field&#125;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key和fields批量获取其中的数据</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> fields  &#123;<span class="doctag">@link</span> Collection&lt;Object&gt; &#125;</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHashObjectBatch</span><span class="params">(String key,Collection&lt;Object&gt; fields)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().multiGet(key, fields);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量删除指定key和fields的数据</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> fields  需要删除的域</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHashObjectBatch</span><span class="params">(String key,Object[] fields)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().delete(key,fields);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加数据到ZSet中</div><div class="line">	 * <span class="doctag">@param</span> key    指定的key</div><div class="line">	 * <span class="doctag">@param</span> value  指定的value</div><div class="line">	 * <span class="doctag">@param</span> score  指定的score</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addZSetObject</span><span class="params">(String key,String value,<span class="keyword">double</span> score)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForZSet().add(key, value, score);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量添加数据到Zset中</div><div class="line">	 * <span class="doctag">@param</span> key  指定的key</div><div class="line">	 * <span class="doctag">@param</span> typedTuple  &#123;<span class="doctag">@link</span> TypedTuple&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addZSetObjectBatch</span><span class="params">(String key,Set&lt;TypedTuple&lt;Object&gt;&gt; typedTuple)</span></span>&#123;</div><div class="line">		template.opsForZSet().add(key, typedTuple);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key获取start--end之间的数据</div><div class="line">	 * <span class="doctag">@param</span> key  指定key</div><div class="line">	 * <span class="doctag">@param</span> start 开始索引，从0开始</div><div class="line">	 * <span class="doctag">@param</span> end  结束索引</div><div class="line">	 * <span class="doctag">@return</span>  &#123;<span class="doctag">@link</span> Set&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">getZSetObject</span><span class="params">(String key,Long start,Long end)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForZSet().range(key, start, end);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Score的范围获取数据</div><div class="line">	 * <span class="doctag">@param</span> key  指定的key值</div><div class="line">	 * <span class="doctag">@param</span> min  score的最小值</div><div class="line">	 * <span class="doctag">@param</span> max score的最大值</div><div class="line">	 * <span class="doctag">@return</span>  &#123;<span class="doctag">@link</span> Set&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">getZSetObjectRangeByScore</span><span class="params">(String key,Long min,Long max)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForZSet().rangeByScore(key, min, max);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Score的范围获取数据,分页获取</div><div class="line">	 * <span class="doctag">@param</span> key  指定的key</div><div class="line">	 * <span class="doctag">@param</span> min  最小值</div><div class="line">	 * <span class="doctag">@param</span> max  最大值</div><div class="line">	 * <span class="doctag">@param</span> offset  偏移量</div><div class="line">	 * <span class="doctag">@param</span> count  数量</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">getZSetObjectRangeByScore</span><span class="params">(String key,Long min,Long max,Long offset,Long count)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForZSet().rangeByScore(key, min, max, offset, count);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向List中添加元素，从表头添加</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> value</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLeftListObject</span><span class="params">(String key,Object value)</span></span>&#123;</div><div class="line">		template.opsForList().leftPush(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向List中添加元素，从表尾添加</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> value</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRightListObject</span><span class="params">(String key,Object value)</span></span>&#123;</div><div class="line">		template.opsForList().rightPush(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向List中添加元素，从表头添加</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> value</div><div class="line">	 * <span class="doctag">@param</span> timeOut  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit  单位</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLeftListObject</span><span class="params">(String key,Object value,Long timeOut,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.opsForList().leftPush(key, value);</div><div class="line">		<span class="keyword">this</span>.setExpireTimeForKey(key, timeOut, unit);   <span class="comment">//设置过期时间</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量从表头添加数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> timeout ： 过期时间  如果为null表示永久不过期</div><div class="line">	 * <span class="doctag">@param</span> timeUnit : 时间单位</div><div class="line">	 * <span class="doctag">@param</span> values  &#123;<span class="doctag">@link</span> Collection&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLeftListObjectBatch</span><span class="params">(String key,Collection&lt;Object&gt; values,Long timeout,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.opsForList().leftPushAll(key, values);</div><div class="line">		<span class="keyword">if</span> (timeout!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.setExpireTimeForKey(key, timeout, unit);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量从表尾添加数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> values &#123;<span class="doctag">@link</span> Collection&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRigthListObjectBatch</span><span class="params">(String key,Collection&lt;Object&gt; values,Long timeout,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.opsForList().rightPushAll(key, values);</div><div class="line">		<span class="keyword">if</span> (timeout!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.setExpireTimeForKey(key, timeout, unit);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取指定范围内的数据</div><div class="line">	 * <span class="doctag">@param</span> key  </div><div class="line">	 * <span class="doctag">@param</span> i  开始的索引 从0开始</div><div class="line">	 * <span class="doctag">@param</span> j   结束的索引，-1 表示结尾</div><div class="line">	 * <span class="doctag">@return</span>   &#123;<span class="doctag">@link</span> List&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getRangeListObject</span><span class="params">(String key,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForList().range(key, i, j);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据实体类的key和指定的查询参数、方法名称获取指定的key</div><div class="line">	 * <span class="doctag">@param</span> domainKey  实体类指定的key</div><div class="line">	 * <span class="doctag">@param</span> params  参数 Map&lt;String,Object&gt;</div><div class="line">	 * <span class="doctag">@param</span> functionName : 方法的名称</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRedisKey</span><span class="params">(String domainKey,String functionName,PagingTool pagingTool)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		StringBuilder builder=<span class="keyword">new</span> StringBuilder();</div><div class="line">		Map&lt;String,Object&gt; params=pagingTool.getParams();</div><div class="line">		builder.append(domainKey+<span class="string">"_"</span>+functionName+<span class="string">"_"</span>+pagingTool.getStartNum()+<span class="string">"_"</span>+pagingTool.getPageSize()+<span class="string">"_"</span>);</div><div class="line">		<span class="keyword">for</span> (String key : params.keySet()) &#123;</div><div class="line">			builder.append(key+<span class="string">"="</span>+params.get(key)+<span class="string">"_"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> builder.toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将Collection&lt;?extend Object&gt;的集合转换成Collection&lt;Object&gt;</div><div class="line">	 * <span class="doctag">@param</span> list 需要转换的集合</div><div class="line">	 * <span class="doctag">@return</span>   Collection&lt;Object&gt;</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object&gt; <span class="title">convertToCollection</span><span class="params">(Collection&lt;? extends Object&gt; list)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		List&lt;Object&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;Object&gt;(list.size());</div><div class="line">		<span class="keyword">for</span> (Object object : list) &#123;</div><div class="line">			arrayList.add(object);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> arrayList;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将指定的List集合中的元素逆向</div><div class="line">	 * <span class="doctag">@param</span> objects  List&lt;? extends Object&gt;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List&lt;? extends Object&gt; objects)</span></span>&#123;</div><div class="line">		Collections.reverse(objects);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除所有的键值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delteAllKeys</span><span class="params">()</span></span>&#123;</div><div class="line">		Set&lt;String&gt; keys=template.keys(<span class="string">"*"</span>);  <span class="comment">//获取所有的key</span></div><div class="line">		template.delete(keys);   <span class="comment">//删除所有的键值</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li><a href="https://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/RedisTemplate.html" target="_blank" rel="external">RedisTemplate API</a></li>
<li><a href="https://www.cnblogs.com/EasonJim/p/7803067.html" target="_blank" rel="external">优质博文</a></li>
<li><a href="https://blog.csdn.net/u010690828/article/details/77141083" target="_blank" rel="external">https://blog.csdn.net/u010690828/article/details/77141083</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Data-Redis&quot;&gt;&lt;a href=&quot;#Spring-Data-Redis&quot; class=&quot;headerlink&quot; title=&quot;Spring-Data-Redis&quot;&gt;&lt;/a&gt;Spring-Data-Redis&lt;/h1&gt;&lt;h2 id=&quot;添加依赖&quot;
    
    </summary>
    
      <category term="Redis" scheme="http://chenjiabing666.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://chenjiabing666.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>spring-data-elasticsearch</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/spring-data-elasticsearch/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/spring-data-elasticsearch/</id>
    <published>2018-09-02T11:38:59.000Z</published>
    <updated>2018-09-02T11:39:23.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-data-elasticsearch"><a href="#spring-data-elasticsearch" class="headerlink" title="spring-data-elasticsearch"></a>spring-data-elasticsearch</h1><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-elasticsearch" target="_blank" rel="external">SpringBoot整合es文档</a></li>
</ul>
<h2 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h2><ul>
<li><code>@Document(indexName = &quot;es&quot;,type = &quot;user&quot;,shards = 5,replicas = 0)</code> ： 标注在实体类上，声明存储的索引和类型<ul>
<li><code>indexName</code>： 索引名称</li>
<li><code>type</code>：索引类型</li>
<li><code>shards</code>：分片的数量</li>
<li><code>replicas</code>：副本的数量</li>
<li><code>refreshInterval</code>： 刷新间隔</li>
<li><code>indexStoreType</code>：索引文件存储类型</li>
</ul>
</li>
</ul>
<h2 id="Field"><a href="#Field" class="headerlink" title="@Field"></a>@Field</h2><ul>
<li>标注在属性上，用来指定属性的类型。其中的属性如下：<ul>
<li><code>analyzer</code>：指定分词器，es中默认使用的标准分词器，比如我们需要指定中文IK分词器，可以指定值为<code>ik_max_word</code></li>
<li><code>type</code>： 指定该属性在es中的类型，其中的值是<code>FileType</code>类型的值，比如<code>FileType.Text</code>类型对应es中的text类型</li>
<li><code>index</code>：指定该词是否需要索引，默认为true</li>
<li><code>store</code>：指定该属性内容是否需要存储，默认为</li>
<li><code>fielddata</code> ：指定该属性能否进行排序，因为es中的text类型是不能进行排序（已经分词了）</li>
<li><code>searchAnalyzer</code> ： 指定搜索使用的分词器</li>
</ul>
</li>
<li><strong>在插入数据之前我们需要先运行程序添加<code>mapping</code>，对于没有指定<code>@Field</code>的属性此时是不会创建索引的，而是在插入数据的时候自动创建索引。但是对于@Field注解标注的属性如果没有先加载生成mapping，等到插入数据的时候是没有效果的</strong></li>
<li><strong>如果使用该注解，那么必须指定其中的<code>type</code>属性</strong></li>
</ul>
<h2 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h2><ul>
<li>主键注解，标识一个属性为主键</li>
</ul>
<h2 id="Date类型的存储"><a href="#Date类型的存储" class="headerlink" title="Date类型的存储"></a>Date类型的存储</h2><ul>
<li>es中默认存储Date类型的是一个时间戳，如果我们需要指定格式的存储，那么需要在<code>@Field</code>这个注解中指定日期的格式。如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Field</span>(type = FieldType.Date,format = DateFormat.custom, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line"><span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.STRING, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</div><div class="line"> <span class="keyword">private</span> Date birthday;</div></pre></td></tr></table></figure>
<h2 id="创建一个实体类"><a href="#创建一个实体类" class="headerlink" title="创建一个实体类"></a>创建一个实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Document</span> : 这个是ES的注解，在类使用，指定实体类的索引和类型。默认所有的属性都是索引的</div><div class="line"> *             1、indexName ：　指定索引</div><div class="line"> *             2、type：指定类型</div><div class="line"> *             3、shards：指定分片的数量</div><div class="line"> *             4、replicas：指定副本的数量</div><div class="line"> */</div><div class="line"><span class="meta">@Document</span>(indexName = <span class="string">"es"</span>,type = <span class="string">"user"</span>,shards = <span class="number">5</span>,replicas = <span class="number">0</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>   <span class="comment">//指定这个是主键</span></div><div class="line">    <span class="keyword">private</span> Integer userId;</div><div class="line"></div><div class="line">    <span class="meta">@Field</span>(type = FieldType.Text,analyzer = <span class="string">"ik_max_word"</span>,fielddata = <span class="keyword">true</span>,store = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@Field</span>(type = FieldType.Date, store = <span class="keyword">true</span>, format = DateFormat.custom, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line">    <span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.STRING, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</div><div class="line">    <span class="keyword">private</span> Date birthday;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Integer userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userId = userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthday;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birthday = birthday;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hobbies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hobbies = hobbies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</div><div class="line">                <span class="string">"userId="</span> + userId +</div><div class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", birthday="</span> + birthday +</div><div class="line">                <span class="string">", hobbies="</span> + hobbies +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定义查询接口"><a href="#定义查询接口" class="headerlink" title="定义查询接口"></a>定义查询接口</h2><ul>
<li>官网上提供了各种各样的方法，我们使用继承<code>ElasticsearchRepository</code>这个接口的方式拓展查询接口，基本的接口：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepo</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//不需要实现其中的方法，只需要继承即可，spring-data-es会为我们自动完成</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常用方法如下："><a href="#常用方法如下：" class="headerlink" title="常用方法如下："></a>常用方法如下：</h3><ol>
<li><code>index(T t)</code> ：添加数据</li>
<li><code>save(T t)</code>：添加数据</li>
<li><code>count()</code>： 获取数据总数</li>
<li><code>findAll()</code>：获取所有的数据，返回的是一个<code>java.lang.Iterable</code></li>
<li><code>Iterable&lt;T&gt; findAllById(Iterable&lt;ID&gt; ids)</code>：根据Id批量返回数据</li>
<li><code>saveAll(Iterable entity)</code> ：批量保存数据，可以传入List</li>
<li><code>delete(T t)</code> ： 删除指定的实体类，只需要指定实体类中的Id即可</li>
<li><code>deleteAll()</code>：删除所有的数据</li>
<li><code>deleteById(ID Id)</code>：根据Id删除数据</li>
<li><code>existsById(ID Id)</code>： 判断指定Id的数据是否存在</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//添加数据</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">        User user=<span class="keyword">new</span> User();</div><div class="line">        user.setUserId(<span class="number">1</span>);</div><div class="line">        user.setUserName(<span class="string">"郑元梅"</span>);</div><div class="line">        user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        user.setPassword(<span class="string">"12345678"</span>);</div><div class="line">        List&lt;String&gt; hobbies=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        hobbies.add(<span class="string">"篮球"</span>);</div><div class="line">        hobbies.add(<span class="string">"足球"</span>);</div><div class="line">        user.setHobbies(hobbies);</div><div class="line"><span class="comment">//        userRepo.save(user);   //调用其中的save方法保存信息</span></div><div class="line">        userRepo.index(user);  <span class="comment">//调用index方法添加数据</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//获取其中的所有数据</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</div><div class="line">        Iterable&lt;User&gt; iterable=userRepo.findAll();</div><div class="line">        Iterator&lt;User&gt; iterator=iterable.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</div><div class="line">            System.out.println(iterator.next());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;User&gt; users=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        User user=<span class="keyword">new</span> User();</div><div class="line">        user.setUserId(<span class="number">4</span>);</div><div class="line">        user.setUserName(<span class="string">"张三"</span>);</div><div class="line">        user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        user.setPassword(<span class="string">"12345678"</span>);</div><div class="line">        List&lt;String&gt; hobbies=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        hobbies.add(<span class="string">"台球"</span>);</div><div class="line">        hobbies.add(<span class="string">"足球"</span>);</div><div class="line">        user.setHobbies(hobbies);</div><div class="line"></div><div class="line">        User user1=<span class="keyword">new</span> User();</div><div class="line">        user1.setUserId(<span class="number">5</span>);</div><div class="line">        user1.setUserName(<span class="string">"郑元梅"</span>);</div><div class="line">        user1.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        user1.setPassword(<span class="string">"12345678"</span>);</div><div class="line">        user1.setHobbies(hobbies);</div><div class="line"></div><div class="line">        users.add(user);</div><div class="line">        users.add(user1);</div><div class="line">        userRepo.saveAll(users);  <span class="comment">//保存List中的所有数据</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除指定的数据</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</div><div class="line">        User user=<span class="keyword">new</span> User();</div><div class="line">        user.setUserId(<span class="number">5</span>);</div><div class="line">        userRepo.delete(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;User&gt; users=userRepo.selectAll();</div><div class="line">        <span class="keyword">for</span> (User user</div><div class="line">             :users</div><div class="line">             ) &#123;</div><div class="line">            System.out.println(user);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h3><ul>
<li>spring-data-elasticsearch为我们自动完成了许多的查询，我们只需要按照其中的规范使用即可。<ul>
<li>查询方法定义以<code>get</code>或者<code>find</code>开头即可</li>
</ul>
</li>
<li>关于es中各种查询，我们可以参照下表进行定义，<strong><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#elasticsearch.query-methods.criterions" target="_blank" rel="external">文档</a></strong></li>
</ul>
<table>
<thead>
<tr>
<th><code>And</code></th>
<th><code>findByNameAndPrice</code></th>
<th><code>{&quot;bool&quot; : {&quot;must&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Or</code></td>
<td><code>findByNameOrPrice</code></td>
<td><code>{&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td>
</tr>
<tr>
<td><code>Is</code></td>
<td><code>findByName</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td>
</tr>
<tr>
<td><code>Not</code></td>
<td><code>findByNameNot</code></td>
<td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td>
</tr>
<tr>
<td><code>Between</code></td>
<td><code>findByPriceBetween</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>LessThanEqual</code></td>
<td><code>findByPriceLessThan</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>GreaterThanEqual</code>（&gt;=）</td>
<td><code>findByPriceGreaterThan</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Before</code>（&lt;=）</td>
<td><code>findByPriceBefore</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>After</code></td>
<td><code>findByPriceAfter</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Like</code>（<code>?%</code>）（如果需要实现<code>%?%</code>可以使用fuzzy）</td>
<td><code>findByNameLike</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>StartingWith</code></td>
<td><code>findByNameStartingWith</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>EndingWith</code></td>
<td><code>findByNameEndingWith</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Contains/Containing</code></td>
<td><code>findByNameContaining</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>In</code></td>
<td><code>findByNameIn(Collection&lt;String&gt;names)</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}} ]}}}}</code></td>
</tr>
<tr>
<td><code>NotIn</code></td>
<td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td>
<td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;bool&quot; : {&quot;should&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}}}</code></td>
</tr>
<tr>
<td><code>Near</code></td>
<td><code>findByStoreNear</code></td>
<td><code>Not Supported Yet !</code></td>
</tr>
<tr>
<td><code>True</code></td>
<td><code>findByAvailableTrue</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td>
</tr>
<tr>
<td><code>False</code></td>
<td><code>findByAvailableFalse</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : false}}}}</code></td>
</tr>
<tr>
<td><code>OrderBy</code></td>
<td><code>findByAvailableTrueOrderByNameDesc</code></td>
<td><code>{&quot;sort&quot; : [{ &quot;name&quot; : {&quot;order&quot; : &quot;desc&quot;} }],&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td>
</tr>
</tbody>
</table>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.techwells.es;</div><div class="line"><span class="keyword">import</span> com.techwells.beans.User;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</div><div class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</div><div class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Query;</div><div class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepo</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据userId获取用户信息</div><div class="line">     * <span class="doctag">@param</span> userId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">User <span class="title">findUserByUserId</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户查找用户信息</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名和密码查找用户信息，使用的是must查询</div><div class="line">     * 参数的顺序不能颠倒</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> password</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameAndPassword</span><span class="params">(String userName,String password)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名或者地址进行查询，满足其一即可，使用的是should</div><div class="line">     * 参数不能颠倒</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> address</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrAddress</span><span class="params">(String userName,String address)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用<span class="doctag">@Query</span>注解自定义查询语句，其中的?是占位符，0表示第一个参数</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must\": [\n"</span> +</div><div class="line">            <span class="string">"        &#123;\n"</span> +</div><div class="line">            <span class="string">"          \"match\": &#123;\n"</span> +</div><div class="line">            <span class="string">"            \"userName\": \"?0\"\n"</span> +</div><div class="line">            <span class="string">"          &#125;\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      ]\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">selectByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码不为null的用户信息</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must\":&#123;\n"</span> +</div><div class="line">            <span class="string">"        \"exists\":&#123;\n"</span> +</div><div class="line">            <span class="string">"          \"field\":\"password\"\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      &#125;\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordIsNotNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码为null的用户信息</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must_not\":&#123;\n"</span> +</div><div class="line">            <span class="string">"        \"exists\":&#123;\n"</span> +</div><div class="line">            <span class="string">"          \"field\":\"password\"\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      &#125;\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordIsNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码不是password的用户信息，使用的must_not</div><div class="line">     * <span class="doctag">@param</span> password</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordNot</span><span class="params">(String password)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询用户名是userName但是密码表示password的信息，必须同时满足</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> password</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameAndPasswordNot</span><span class="params">(String userName,String password)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询年龄在from-to之间的用户，包含form和to，使用的是range查询</div><div class="line">     * <span class="doctag">@param</span> from  起始</div><div class="line">     * <span class="doctag">@param</span> to    截止</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeBetween</span><span class="params">(Integer from,Integer to)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询年龄小于age的用户信息</div><div class="line">     * <span class="doctag">@param</span> age  年龄</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeLessThan</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄小于等于age的用户信息</div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeLessThanEqual</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄大于age的用户</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeGreaterThan</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄大于等于age的用户</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeGreaterThanEqual</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄小于等于age的用户信息</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeBefore</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄大于等于age的用户</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeAfter</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模糊查找，密码中以pwd开头用户信息，`content%`，</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordLike</span><span class="params">(String content)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码中包含content的用户信息  %content%</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordContaining</span><span class="params">(String content)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码以pwd开头的用户信息，和Like一样的效果</div><div class="line">     * <span class="doctag">@param</span> pwd</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordStartingWith</span><span class="params">(String pwd)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码以pwd结尾的用户信息</div><div class="line">     * <span class="doctag">@param</span> pwd</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordEndingWith</span><span class="params">(String pwd)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查找年龄在集合中的用户信息</div><div class="line">     * <span class="doctag">@param</span> ages</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeIn</span><span class="params">(List&lt;Integer&gt; ages)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查找年龄不在集合中的用户信息</div><div class="line">     * <span class="doctag">@param</span> ages</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeNotIn</span><span class="params">(List&lt;Integer&gt; ages)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名查询并且按照年龄降序排列</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrderByAgeDesc</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名查询并且按照年龄降序排列、用户名升序排列</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrderByAgeDescUserNameAsc</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据出生日期进行降序排列</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrderByBirthdayDesc</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回前2条数据</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findTop2ByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名分页查询</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> pageable</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Page&lt;User&gt; <span class="title">findByUserName</span><span class="params">(String userName, Pageable pageable)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-Query定义自己的es语句"><a href="#使用-Query定义自己的es语句" class="headerlink" title="使用@Query定义自己的es语句"></a>使用@Query定义自己的es语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 使用<span class="doctag">@Query</span>注解自定义查询语句，其中的?是占位符，0表示第一个参数</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must\": [\n"</span> +</div><div class="line">            <span class="string">"        &#123;\n"</span> +</div><div class="line">            <span class="string">"          \"match\": &#123;\n"</span> +</div><div class="line">            <span class="string">"            \"userName\": \"?0\"\n"</span> +</div><div class="line">            <span class="string">"          &#125;\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      ]\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">selectByUserName</span><span class="params">(String userName)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="控制结果集数量"><a href="#控制结果集数量" class="headerlink" title="控制结果集数量"></a>控制结果集数量</h2><ul>
<li><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#repositories.limit-query-result" target="_blank" rel="external">https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#repositories.limit-query-result</a></li>
<li>使用<code>Top</code>或者<code>First</code>控制返回的数量，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 返回前2条数据</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findTop2ByUserName</span><span class="params">(String userName)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ul>
<li><a href="https://www.tianmaying.com/tutorial/spring-jpa-page-sort" target="_blank" rel="external">https://www.tianmaying.com/tutorial/spring-jpa-page-sort</a></li>
<li>直接使用<code>org.springframework.data.domain.Pageable</code>进行分页排序即可<ul>
<li><code>page</code>：从０开始，第几页，默认为0</li>
<li><code>size</code>：每页显示的数量</li>
<li><code>sort</code>：排序的方向</li>
</ul>
</li>
<li>其中的方法如下：<ul>
<li><code>getTotalElements()</code>：返回数据的总数，不是分页的总数，而是根据条件查询到的全部的数据的总数</li>
<li><code>getContent()</code>：获取分页的数据集合<code>List&lt;T&gt;</code></li>
<li><code>getTotalPages()</code>：获取总共几页的数据</li>
<li><code>iterator()</code>：获取迭代器</li>
<li>剩余的方法如下：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Slice</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Streamable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前是第几页</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回每页显示的数量</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前页获取到的元素数量</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getNumberOfElements</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前页元素的集合</span></div><div class="line">	<span class="function">List&lt;T&gt; <span class="title">getContent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断当前页是否存在数据</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasContent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//获取排序的Sort</span></div><div class="line">	<span class="function">Sort <span class="title">getSort</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断当前页是否是第一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断当前页是否是最后一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断是否还有下一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断是否有前一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前页的pageable</span></div><div class="line">	<span class="function"><span class="keyword">default</span> Pageable <span class="title">getPageable</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> PageRequest.of(getNumber(), getSize(), getSort());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//返回下一页的Pageable</span></div><div class="line">	<span class="function">Pageable <span class="title">nextPageable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回前一页的pageable</span></div><div class="line">	<span class="function">Pageable <span class="title">previousPageable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    </div><div class="line">	&lt;U&gt; <span class="function">Slice&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; converter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单条件分页排序"><a href="#单条件分页排序" class="headerlink" title="单条件分页排序"></a>单条件分页排序</h3><ul>
<li>只使用了一个字段进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">       Sort sort=<span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">"age"</span>);</div><div class="line">       Pageable pageable=<span class="keyword">new</span> PageRequest(<span class="number">9</span>,<span class="number">1</span>,sort);</div><div class="line">       Page&lt;User&gt; users=userRepo.findByUserName(<span class="string">"李"</span>,pageable);</div><div class="line">       System.out.println(users.getTotalPages());</div><div class="line">       <span class="keyword">for</span> (User user:users.getContent()) &#123;</div><div class="line">           System.out.println(user);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="多条件分页排序"><a href="#多条件分页排序" class="headerlink" title="多条件分页排序"></a>多条件分页排序</h3><ul>
<li>使用<code>Order</code>进行排序条件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">      List&lt;Sort.Order&gt; orders=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      orders.add(<span class="keyword">new</span> Sort.Order(Sort.Direction.DESC,<span class="string">"age"</span>));<span class="comment">//按照年龄降序排列</span></div><div class="line">      orders.add(<span class="keyword">new</span> Sort.Order(Sort.Direction.ASC,<span class="string">"userId"</span>));  <span class="comment">//按照用户Id升序排列</span></div><div class="line">      Sort sort=<span class="keyword">new</span> Sort(orders);  <span class="comment">//使用orders</span></div><div class="line"></div><div class="line">      Pageable pageable=<span class="keyword">new</span> PageRequest(<span class="number">0</span>,<span class="number">10</span>,sort);</div><div class="line">      Page&lt;User&gt; users=userRepo.findByUserName(<span class="string">"李"</span>,pageable);</div><div class="line">      System.out.println(users.getTotalPages());</div><div class="line">      <span class="keyword">for</span> (User user:users.getContent()) &#123;</div><div class="line">          System.out.println(user);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="日期格式问题"><a href="#日期格式问题" class="headerlink" title="日期格式问题"></a>日期格式问题</h2><ul>
<li>未完</li>
</ul>
<h2 id="使用ElasticsearchTemplate"><a href="#使用ElasticsearchTemplate" class="headerlink" title="使用ElasticsearchTemplate"></a>使用ElasticsearchTemplate</h2><ul>
<li>未完 ………..待续…………………</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://blog.csdn.net/lijingyao8206/article/details/78614536" target="_blank" rel="external">https://blog.csdn.net/lijingyao8206/article/details/78614536</a></li>
<li><a href="https://www.jianshu.com/p/27e1d583aafb" target="_blank" rel="external">https://www.jianshu.com/p/27e1d583aafb</a></li>
<li><a href="https://blog.csdn.net/a772304419/article/details/79200141" target="_blank" rel="external">https://blog.csdn.net/a772304419/article/details/79200141</a></li>
<li><a href="https://www.cnblogs.com/liqipeng/p/7657854.html" target="_blank" rel="external">https://www.cnblogs.com/liqipeng/p/7657854.html</a></li>
<li><a href="https://my.oschina.net/kipeng/blog/1799827" target="_blank" rel="external">https://my.oschina.net/kipeng/blog/1799827</a></li>
<li><a href="https://blog.csdn.net/sofighter/article/details/77840094" target="_blank" rel="external">https://blog.csdn.net/sofighter/article/details/77840094</a></li>
<li><a href="https://es.yemengying.com/4/4.1.html" target="_blank" rel="external">https://es.yemengying.com/4/4.1.html</a></li>
<li><a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.0.9.RELEASE/api/" target="_blank" rel="external">sptring-data-es的API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-data-elasticsearch&quot;&gt;&lt;a href=&quot;#spring-data-elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;spring-data-elasticsearch&quot;&gt;&lt;/a&gt;spring-data
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es集群管理</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es集群管理/</id>
    <published>2018-09-02T11:38:16.000Z</published>
    <updated>2018-09-02T11:38:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h1><ul>
<li><a href="https://www.cnblogs.com/aubin/p/8012840.html" target="_blank" rel="external">https://www.cnblogs.com/aubin/p/8012840.html</a></li>
</ul>
<h3 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h3><blockquote>
<p>代表一个集群，集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看es集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。</p>
</blockquote>
<h3 id="shards"><a href="#shards" class="headerlink" title="shards"></a>shards</h3><blockquote>
<p>代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。</p>
</blockquote>
<h3 id="replicas"><a href="#replicas" class="headerlink" title="replicas"></a>replicas</h3><blockquote>
<p>代表索引副本，es可以设置多个索引的副本，副本的作用一是提高系统的容错性，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高es的查询效率，es会自动对搜索请求进行负载均衡。</p>
</blockquote>
<h3 id="recovery"><a href="#recovery" class="headerlink" title="recovery"></a>recovery</h3><blockquote>
<p>代表数据恢复或叫数据重新分布，es在有节点加入或退出时会根据机器的负载对索引分片进行重新分配，挂掉的节点重新启动时也会进行数据恢复。</p>
</blockquote>
<h3 id="river"><a href="#river" class="headerlink" title="river"></a>river</h3><blockquote>
<p>代表es的一个数据源，也是其它存储方式（如：数据库）同步数据到es的一个方法。它是以插件方式存在的一个es服务，通过读取river中的数据并把它索引到es中，官方的river有couchDB的，RabbitMQ的，Twitter的，Wikipedia的。</p>
</blockquote>
<h3 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h3><blockquote>
<p>代表es索引快照的存储方式，es默认是先把索引存放到内存中，当内存满了时再持久化到本地硬盘。gateway对索引快照进行存储，当这个es集群关闭再重新启动时就会从gateway中读取索引备份数据。es支持多种类型的gateway，有本地文件系统（默认），分布式文件系统，Hadoop的HDFS和amazon的s3云存储服务。</p>
</blockquote>
<h3 id="discovery-zen"><a href="#discovery-zen" class="headerlink" title="discovery.zen"></a>discovery.zen</h3><blockquote>
<p>代表es的自动发现节点机制，es是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点的交互。</p>
</blockquote>
<h3 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h3><blockquote>
<p>代表es内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、thrift、servlet、memcached、zeroMQ等的传输协议（通过插件方式集成）。</p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>同一个索引的分片和副本不能存在同一台机器上，因为在一台机器上没有意义，因此你如果使用的是单机版的话，不必指定副本的个数，即使指定了，那么es也不会将其存放在一台机器上的</li>
</ol>
<h2 id="监控集群健康状况"><a href="#监控集群健康状况" class="headerlink" title="监控集群健康状况"></a>监控集群健康状况</h2><ul>
<li><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cluster_health.html#_cluster_health" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cluster_health.html#_cluster_health</a></p>
</li>
<li><p><strong>API：<code>GET _cluster/health</code>。返回的结果如下：</strong></p>
<ul>
<li><code>number_of_nodes</code> 和 <code>number_of_data_nodes</code> 这个命名完全是自描述的。</li>
<li><code>active_primary_shards</code> 指出你集群中的主分片数量。这是涵盖了所有索引的汇总值。</li>
<li><code>active_shards</code> 是涵盖了所有索引的<em>所有</em>分片的汇总值，即包括副本分片。</li>
<li><code>relocating_shards</code> 显示当前正在从一个节点迁往其他节点的分片的数量。通常来说应该是 0，不过在 Elasticsearch 发现集群不太均衡时，该值会上涨。比如说：添加了一个新节点，或者下线了一个节点。</li>
<li><code>initializing_shards</code> 是刚刚创建的分片的个数。比如，当你刚创建第一个索引，分片都会短暂的处于 <code>initializing</code> 状态。这通常会是一个临时事件，分片不应该长期停留在 <code>initializing</code> 状态。你还可能在节点刚重启的时候看到 <code>initializing</code> 分片：当分片从磁盘上加载后，它们会从 <code>initializing</code> 状态开始。</li>
<li><code>unassigned_shards</code> 是已经在集群状态中存在的分片，但是实际在集群里又找不着。通常未分配分片的来源是未分配的副本。比如，一个有 5 分片和 1 副本的索引，在单节点集群上，就会有 5 个未分配副本分片。如果你的集群是 <code>red</code> 状态，也会长期保有未分配分片（因为缺少主分片）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="string">"cluster_name"</span>: <span class="string">"elasticsearch_zach"</span>,     <span class="comment">//集群名称</span></div><div class="line">   <span class="string">"status"</span>: <span class="string">"green"</span>,    <span class="comment">//集群的状态名称</span></div><div class="line">   <span class="string">"timed_out"</span>: <span class="keyword">false</span>,     </div><div class="line">   <span class="string">"number_of_nodes"</span>: <span class="number">1</span>,    <span class="comment">//节点的个数</span></div><div class="line">   <span class="string">"number_of_data_nodes"</span>: <span class="number">1</span>,    </div><div class="line">   <span class="string">"active_primary_shards"</span>: <span class="number">10</span>,    <span class="comment">//主分片的个数</span></div><div class="line">   <span class="string">"active_shards"</span>: <span class="number">10</span>,     <span class="comment">//涵盖了所有索引的_所有_分片的汇总值，即包括副本分片。</span></div><div class="line">   <span class="string">"relocating_shards"</span>: <span class="number">0</span>,    <span class="comment">//分片的个数</span></div><div class="line">   <span class="string">"initializing_shards"</span>: <span class="number">0</span>,   </div><div class="line">   <span class="string">"unassigned_shards"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其中的status状态如下：<ul>
<li><code>green</code>：所有的主分片和副本分片都已分配。你的集群是 100% 可用的。</li>
<li><code>yellow</code>：所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果 <em>更多的</em> 分片消失，你就会丢数据了。把 <code>yellow</code> 想象成一个需要及时调查的警告。</li>
<li><code>red</code>：至少一个主分片（以及它的全部副本）都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</li>
</ul>
</li>
<li><strong>使用<code>GET _cluster/health?level=indices</code>能够获取更加详细的信息</strong></li>
<li><strong><code>GET _cluster/health?level=shards</code>：</strong><ul>
<li><code>shards</code> 选项会提供一个详细得多的输出，列出每个索引里每个分片的状态和位置。这个输出有时候很有用，但是由于太过详细会比较难用。如果你知道哪个索引有问题了，本章讨论的其他 API 显得更加有用一点。</li>
</ul>
</li>
</ul>
<h2 id="监控单个节点"><a href="#监控单个节点" class="headerlink" title="监控单个节点"></a>监控单个节点</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_monitoring_individual_nodes.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_monitoring_individual_nodes.html</a></li>
</ul>
<h2 id="索引统计"><a href="#索引统计" class="headerlink" title="索引统计"></a>索引统计</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_index_stats.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_index_stats.html</a></li>
</ul>
<h2 id="cat-API"><a href="#cat-API" class="headerlink" title="cat API"></a>cat API</h2><ul>
<li>[<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cat_api.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cat_api.html</a>]</li>
</ul>
<h2 id="重要配置的修改"><a href="#重要配置的修改" class="headerlink" title="重要配置的修改"></a>重要配置的修改</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html</a></li>
<li><a href="http://www.cnblogs.com/ljhdo/p/4959412.html" target="_blank" rel="external">http://www.cnblogs.com/ljhdo/p/4959412.html</a></li>
<li><a href="http://lxw1234.com/archives/2015/12/582.htm" target="_blank" rel="external">http://lxw1234.com/archives/2015/12/582.htm</a></li>
<li><a href="https://blog.csdn.net/an74520/article/details/8219814" target="_blank" rel="external">https://blog.csdn.net/an74520/article/details/8219814</a></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.cnblogs.com/ljhdo/p/4959412.html" target="_blank" rel="external">http://www.cnblogs.com/ljhdo/p/4959412.html</a></li>
<li><a href="http://lxw1234.com/archives/2015/12/582.htm" target="_blank" rel="external">http://lxw1234.com/archives/2015/12/582.htm</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集群管理&quot;&gt;&lt;a href=&quot;#集群管理&quot; class=&quot;headerlink&quot; title=&quot;集群管理&quot;&gt;&lt;/a&gt;集群管理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/aubin/p/8012840.html&quot; t
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>中文分词器的使用</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/中文分词器的使用/</id>
    <published>2018-09-02T11:37:15.000Z</published>
    <updated>2018-09-02T11:37:40.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中文分词器的使用"><a href="#中文分词器的使用" class="headerlink" title="中文分词器的使用"></a>中文分词器的使用</h1><ul>
<li><code>ik_max_word</code>：会将文本做最细粒度的拆分</li>
<li><code>ik_smart</code>：做最粗粒度的拆分</li>
</ul>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul>
<li>自动映射默认使用的标准的分词器，如果想要使用IK中文分词器，那么需要手动创建映射，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">PUT /lib </div><div class="line">&#123;</div><div class="line">    <span class="string">"mappings"</span> : &#123;</div><div class="line">        <span class="string">"user"</span> : &#123;</div><div class="line">            <span class="string">"properties"</span> : &#123;</div><div class="line">                <span class="string">"userId"</span> : &#123;</div><div class="line">                    <span class="string">"type"</span> : <span class="string">"integer"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"date"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"date"</span>,</div><div class="line">                  <span class="string">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"age"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"integer"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"name"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"text"</span>, </div><div class="line">                   <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>   <span class="comment">//使用IK分词器</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"address"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">                  <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>   <span class="comment">//使用IK分词器</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>添加数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">PUT /lib/user/<span class="number">1</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>:<span class="string">"陈加兵"</span>,</div><div class="line">  <span class="string">"age"</span>:<span class="number">22</span>,</div><div class="line">  <span class="string">"date"</span>:<span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">  <span class="string">"address"</span>:<span class="string">"上海市松江区"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">PUT /lib/user/<span class="number">2</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>:<span class="string">"郑元梅"</span>,</div><div class="line">  <span class="string">"age"</span>:<span class="number">22</span>,</div><div class="line">  <span class="string">"date"</span>:<span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">  <span class="string">"address"</span>:<span class="string">"湖北武汉"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">PUT /lib/user/<span class="number">3</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>:<span class="string">"张三"</span>,</div><div class="line">  <span class="string">"age"</span>:<span class="number">22</span>,</div><div class="line">  <span class="string">"date"</span>:<span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">  <span class="string">"address"</span>:<span class="string">"江苏省淮安市"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们可以查看address这个字段使用中文分词器的效果，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">GET lib/_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"field"</span>: <span class="string">"address"</span>,</div><div class="line">  <span class="string">"text"</span>: <span class="string">"江苏省淮安市"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//分词结果如下：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"tokens"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"江苏省"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"江苏"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">2</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"省"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">2</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"淮安市"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">6</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"淮安"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">4</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"市"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">6</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过上面的分词，我们可以进行查询了，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"江苏"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"淮安"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"淮安"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;中文分词器的使用&quot;&gt;&lt;a href=&quot;#中文分词器的使用&quot; class=&quot;headerlink&quot; title=&quot;中文分词器的使用&quot;&gt;&lt;/a&gt;中文分词器的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ik_max_word&lt;/code&gt;：会将文本做最细粒度的拆分&lt;/l
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es各种查询</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E5%90%84%E7%A7%8D%E6%9F%A5%E8%AF%A2/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es各种查询/</id>
    <published>2018-09-02T11:36:38.000Z</published>
    <updated>2018-09-02T11:36:55.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="请求体查询"><a href="#请求体查询" class="headerlink" title="请求体查询"></a>请求体查询</h1><h2 id="简单查询-【不推荐】"><a href="#简单查询-【不推荐】" class="headerlink" title="简单查询 【不推荐】"></a>简单查询 【不推荐】</h2><h2 id="空查询"><a href="#空查询" class="headerlink" title="空查询"></a>空查询</h2><p>1、<code>GET /lib/user/_search</code>  ： 查询lib索引下的user类型的全部数据</p>
<p>2、<code>GET /lib/_search</code> ：查询lib索引下的全部类型的数据</p>
<p>3、<code>GET /_search</code> ：查询全部索引下的数据</p>
<h2 id="精确值查找"><a href="#精确值查找" class="headerlink" title="精确值查找"></a>精确值查找</h2><ul>
<li>当进行精确值查找时， 我们会使用<strong>过滤器（filters）</strong>。过滤器很重要，因为它们<strong>执行速度非常快</strong>，不会计算相关度（直接跳过了整个评分阶段）而且很容易被缓存。我们会在本章后面的 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/filter-caching.html" target="_blank" rel="external">过滤器缓存</a> 中讨论过滤器的性能优势，不过现在只要记住：请尽可能多的使用过滤式查询。</li>
</ul>
<h3 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h3><ul>
<li>elasticsearch对这个搜索的词语不做分词，用于精确匹配，比如Id，数值类型的查询。</li>
<li>可以用它处理数字（numbers）、布尔值（Booleans）、日期（dates）以及文本（text）。</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li>批量插入数据<ul>
<li><strong>没有手动插入映射，因此<code>ＥｌａｓｔｉｃＳｅａｒｃｈ</code>会为我们自动创建映射，这就意味着只要是文本就会为我们使用分词器分词。</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">POST /my_store/products/_bulk</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">1</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">10</span>, <span class="string">"productID"</span> : <span class="string">"XHDK-A-1293-#fJ3"</span> &#125;</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">2</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">20</span>, <span class="string">"productID"</span> : <span class="string">"KDKE-B-9947-#kL5"</span> &#125;</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">3</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">30</span>, <span class="string">"productID"</span> : <span class="string">"JODL-X-1937-#pV7"</span> &#125;</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">4</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">30</span>, <span class="string">"productID"</span> : <span class="string">"QQPX-R-3956-#aD8"</span> &#125;</div></pre></td></tr></table></figure>
<h5 id="查询数值"><a href="#查询数值" class="headerlink" title="查询数值"></a>查询数值</h5><ul>
<li>使用<code>constant_score</code>查询以非评分模式来执行 <code>term</code> 查询并以一作为统一评分，这样返回的结果的评分全部是1</li>
<li>使用<code>constant_score</code>将term转化为过滤器查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">        <span class="string">"constant_score"</span> : &#123; </div><div class="line">            <span class="string">"filter"</span> : &#123;</div><div class="line">                <span class="string">"term"</span> : &#123; </div><div class="line">                    <span class="string">"price"</span> : <span class="number">20</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//结果如下</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"took"</span>: <span class="number">1</span>,</div><div class="line">  <span class="string">"timed_out"</span>: <span class="keyword">false</span>,</div><div class="line">  <span class="string">"_shards"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"successful"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"skipped"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"failed"</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"my_store"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"products"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"2"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"price"</span>: <span class="number">20</span>,</div><div class="line">          <span class="string">"productID"</span>: <span class="string">"KDKE-B-9947-#kL5"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="查询文本"><a href="#查询文本" class="headerlink" title="查询文本"></a>查询文本</h5><ul>
<li>文本怎样分词<ul>
<li>大写字母转换为小写字母</li>
<li>复数变成单数</li>
<li>去掉特殊字符</li>
</ul>
</li>
<li><strong>由于term是精确查询，但是在查询文本的时候，很有可能这个文本已经进行了分词，但是term查询的时候搜索的词不分词，因此可能两个文本明明是一样的，但是却匹配不上。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">        <span class="string">"constant_score"</span> : &#123;</div><div class="line">            <span class="string">"filter"</span> : &#123;</div><div class="line">                <span class="string">"term"</span> : &#123;</div><div class="line">                    <span class="string">"productID"</span> : <span class="string">"XHDK-A-1293-#fJ3"</span>   <span class="comment">//虽然和插入的数据一样，但是却查询不到</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的结果可以看到，由于term查询默认是不对搜索的词进行分词的，但是在查询的文本是分词的，因此这里肯定是查询不到的，我们可以使用分词分析器看看这个<code>productID</code>如何实现分词的，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">GET /my_store/_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"field"</span>: <span class="string">"productID"</span>,    <span class="comment">//指定分词的域</span></div><div class="line">  <span class="string">"text"</span>: <span class="string">"XHDK-A-1293-fJ3-the"</span>    <span class="comment">//文本内容</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//结果如下：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"tokens"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"xhdk"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">4</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"a"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">6</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"1293"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">7</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">11</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;NUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"fj3"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">12</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">15</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"the"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">16</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">19</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">4</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的结果可知:<ul>
<li>在分词的过程中自动去掉了特殊字符，比如<code>-</code>和<code>&amp;</code></li>
<li>大写字母全部转为小写</li>
</ul>
</li>
</ul>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><ul>
<li>如果需要使用term精确匹配查询文本，那么这个文本就不能使用分词器分词，因此需要手动创建索引的映射（mapping），如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">DELETE my_store   <span class="comment">//先删除索引</span></div><div class="line"></div><div class="line">PUT /my_store    <span class="comment">//手动指定映射</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"mappings"</span> : &#123;</div><div class="line">        <span class="string">"products"</span> : &#123;</div><div class="line">            <span class="string">"properties"</span> : &#123;</div><div class="line">                <span class="string">"productID"</span> : &#123;</div><div class="line">                    <span class="string">"type"</span> : <span class="string">"string"</span>,</div><div class="line">                    <span class="string">"index"</span> : <span class="string">"not_analyzed"</span>    <span class="comment">//不分词</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>此时如果再查询，那么就会精确匹配到这个信息了。</li>
</ul>
<h3 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h3><ul>
<li>对于多个关键字的查询，假设我们需要查询price在10,20,30中的其中一个即可，那么需要使用terms指定多组值</li>
<li>精确查询，不会使用分词器</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>:&#123;</div><div class="line">      <span class="string">"terms"</span>:&#123;</div><div class="line">        <span class="string">"price"</span>:[<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指定文档数量-from-size"><a href="#指定文档数量-from-size" class="headerlink" title="指定文档数量  (from ,size)"></a>指定文档数量  (from ,size)</h2><ul>
<li>假设我们需要对前两个文档进行查询，那么可以使用<code>from</code>和<code>size</code>指定文档的数量，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"from"</span>:<span class="number">0</span>,    <span class="comment">//从第一文档开始</span></div><div class="line">  <span class="string">"size"</span>:<span class="number">2</span>,     <span class="comment">//查询两个文档</span></div><div class="line">    <span class="string">"query"</span>:&#123;</div><div class="line">      <span class="string">"terms"</span>:&#123;</div><div class="line">        <span class="string">"price"</span>:[<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回指定的字段-source"><a href="#返回指定的字段-source" class="headerlink" title="返回指定的字段  _source"></a>返回指定的字段  _source</h2><ul>
<li>在使用查询的时候默认返回的是全部的字段，那么我们可以使用<code>_source</code>指定返回的字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"_source"</span>:[<span class="string">"address"</span>,<span class="string">"age"</span>], </div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>同时我们也可以排除不返回哪些字段，使用<code>exclude</code>即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"_source"</span>:&#123;</div><div class="line">    <span class="string">"exclude"</span>: [<span class="string">"address"</span>,<span class="string">"age"</span>],   <span class="comment">//排除字段</span></div><div class="line">    <span class="string">"include"</span>: [<span class="string">"name"</span>,<span class="string">"date"</span>]   <span class="comment">//包含的字段</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回版本号"><a href="#返回版本号" class="headerlink" title="返回版本号"></a>返回版本号</h2><ul>
<li>默认的查询返回版本号，我们可以在查询体中加上<code>version:true</code>即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"version"</span>:<span class="keyword">true</span>, </div><div class="line">  <span class="string">"from"</span>:<span class="number">0</span>,</div><div class="line">  <span class="string">"size"</span>:<span class="number">2</span>,</div><div class="line">    <span class="string">"query"</span>:&#123;</div><div class="line">      <span class="string">"terms"</span>:&#123;</div><div class="line">        <span class="string">"price"</span>:[<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h2><ul>
<li>match查询和term查询相反，知道分词器的存在，会对搜索的词语进行分词。</li>
<li>上面使用match查询<code>productId</code>的时候，因为terms不知道分词器的存在，因此查询不到，但是我们使用match查询可以匹配到，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">                <span class="string">"match"</span> : &#123;</div><div class="line">                    <span class="string">"productID"</span> : <span class="string">"XHDK-A-1293-#fJ3"</span></div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>比如说我们要查找姓名是<code>zhaoliu</code>或者<code>zhaoming</code>的，那么只需要使用match即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">                <span class="string">"match"</span> : &#123;</div><div class="line">                    <span class="string">"name"</span> : <span class="string">"zhaoliu zhaoming"</span>  <span class="comment">//会对这个短语进行分词，分出两个，之后去查询</span></div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="match-all"><a href="#match-all" class="headerlink" title="match_all"></a>match_all</h2><ul>
<li>查询所有</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_all"</span>: &#123;</div><div class="line">  </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h2><ul>
<li>短语匹配查询</li>
<li>类似 <code>match</code> 查询， <code>match_phrase</code> 查询首先将查询字符串解析成一个词项列表，然后对这些词项进行搜索，但只保留那些包含 <em>全部</em> 搜索词项，且 <em>位置</em> 与搜索词项相同的文档。 比如对于 <code>quick fox</code> 的短语搜索可能不会匹配到任何文档，因为没有文档包含的 <code>quick</code> 词之后紧跟着 <code>fox</code> 。</li>
<li>位置顺序必须一致</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取你会觉得短语匹配太严格了，那么可以使用slop这个关键字指定相隔的步长，<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/slop.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/slop.html</a></li>
</ul>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul>
<li>使用<code>sort</code>可以进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"_source"</span>:&#123;</div><div class="line">    <span class="string">"exclude"</span>: [<span class="string">"address"</span>,<span class="string">"name"</span>],</div><div class="line">    <span class="string">"include"</span>: [<span class="string">"age"</span>,<span class="string">"date"</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"sort"</span>: [    <span class="comment">//指定排序</span></div><div class="line">    &#123;</div><div class="line">      <span class="string">"age"</span>: &#123;      <span class="comment">//对字段age进行排序</span></div><div class="line">        <span class="string">"order"</span>: <span class="string">"desc"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"address"</span>: &#123;     <span class="comment">//address排序</span></div><div class="line">        <span class="string">"order"</span>: <span class="string">"asc"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><ul>
<li><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_ranges.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_ranges.html</a></p>
</li>
<li><p><code>gt</code>: <code>&gt;</code> 大于（greater than）</p>
</li>
<li><code>lt</code>: <code>&lt;</code> 小于（less than）</li>
<li><code>gte</code>: <code>&gt;=</code> 大于或等于（greater than or equal to）</li>
<li><code>lte</code>: <code>&lt;=</code> 小于或等于（less than or equal to）</li>
</ul>
<h3 id="日期查询"><a href="#日期查询" class="headerlink" title="日期查询"></a>日期查询</h3><ul>
<li>可以查询日期的范围，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>: <span class="string">"2010-11-11"</span>,    <span class="comment">//大于</span></div><div class="line">      <span class="string">"lt"</span>: <span class="string">"2012-12-31"</span>    <span class="comment">//小于</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>:<span class="string">"now"</span>       <span class="comment">//查询大于现在时间的文档</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>:<span class="string">"now-1h"</span>    <span class="comment">//查询距离现在一小时之内的文档，直接使用now减去一小时即可</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>: <span class="string">"2010-11-11 00:00:00"</span>,    <span class="comment">//指定时分秒查询</span></div><div class="line">      <span class="string">"lt"</span>: <span class="string">"2012-12-31 00:00:00"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>时间格式参考如下：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/mapping-date-format.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/mapping-date-format.html</a></li>
</ul>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"price"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>: <span class="number">10</span>,    <span class="comment">//数值范围查找</span></div><div class="line">      <span class="string">"lt"</span>: <span class="number">20</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符串范围"><a href="#字符串范围" class="headerlink" title="字符串范围"></a>字符串范围</h3><ul>
<li><code>range</code> 查询同样可以处理字符串字段， 字符串范围可采用 <em>字典顺序（lexicographically）</em> 或字母顺序（alphabetically）。例如，下面这些字符串是采用字典序（lexicographically）排序的：<ul>
<li>5, 50, 6, B, C, a, ab, abb, abc, b</li>
<li>在倒排索引中的词项就是采取字典顺序（lexicographically）排列的，这也是字符串范围可以使用这个顺序来确定的原因。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"range"</span> : &#123;</div><div class="line">    <span class="string">"title"</span> : &#123;</div><div class="line">        <span class="string">"gte"</span> : <span class="string">"a"</span>,</div><div class="line">        <span class="string">"lt"</span> :  <span class="string">"b"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="wildcard查询"><a href="#wildcard查询" class="headerlink" title="wildcard查询"></a>wildcard查询</h2><ul>
<li>允许使用通配符*和？进行查询</li>
<li><code>*</code>: 代表一个或者多个字符</li>
<li><code>?</code>：代表任意一个字符</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"wildcard"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chen*"</span>   </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"wildcard"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chen?iabing"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模糊查询-fuzzy"><a href="#模糊查询-fuzzy" class="headerlink" title="模糊查询 fuzzy"></a>模糊查询 fuzzy</h2><ul>
<li>假设我们需要查询<code>chenjiabing</code>这个名字，那么使用模糊查询的话，如果其中有个字符写错了，也是能够查询到的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"fuzzy"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chejiabing"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"fuzzy"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chejiabing"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"highlight"</span>: &#123;</div><div class="line">    <span class="string">"pre_tags"</span>: [<span class="string">"&lt;span style='color:red'&gt;"</span>],   <span class="comment">//指定包裹的标签前半部分，默认的是&lt;em&gt;</span></div><div class="line">    <span class="string">"post_tags"</span>: [<span class="string">"&lt;/span&gt;"</span>],                    <span class="comment">//指定后半部分</span></div><div class="line">    <span class="string">"fields"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>: &#123;&#125;                               <span class="comment">//name字段高量</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="null值的查询"><a href="#null值的查询" class="headerlink" title="null值的查询"></a>null值的查询</h2><ul>
<li><code>exists</code>这个语句用来查询存在值的信息，如果和must结合表示查询不为null的数据，如果must_not集合表示查询为<code>null</code>的数据，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询password=null的数据</span></div><div class="line">GET ea/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must_not"</span>:&#123;</div><div class="line">        <span class="string">"exists"</span>:&#123;</div><div class="line">          <span class="string">"field"</span>:<span class="string">"password"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//查询password!=null的数据</span></div><div class="line">GET ea/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must"</span>:&#123;</div><div class="line">        <span class="string">"exists"</span>:&#123;</div><div class="line">          <span class="string">"field"</span>:<span class="string">"password"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="filter查询"><a href="#filter查询" class="headerlink" title="filter查询"></a>filter查询</h2><ul>
<li>缓存，不返回相关性，速度比query快</li>
</ul>
<h3 id="简单的过滤查询"><a href="#简单的过滤查询" class="headerlink" title="简单的过滤查询"></a>简单的过滤查询</h3><ul>
<li>使用<code>post_filter</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"post_filter"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="bool过滤查询"><a href="#bool过滤查询" class="headerlink" title="bool过滤查询"></a>bool过滤查询</h3><ul>
<li>语法如下：<ul>
<li><code>must</code> ：所有的语句都 <em>必须（must）</em> 匹配，与 <code>AND</code> 等价。</li>
<li><code>must_not</code> ：所有的语句都 <em>不能（must not）</em> 匹配，与 <code>NOT</code> 等价。</li>
<li><code>should</code>：至少有一个语句要匹配，与 <code>OR</code> 等价。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="string">"bool"</span> : &#123;</div><div class="line">      <span class="string">"must"</span> :     [],</div><div class="line">      <span class="string">"should"</span> :   [],</div><div class="line">      <span class="string">"must_not"</span> : [],</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其中的每一个部分都是可选的</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><ul>
<li>must中的内容查询是并列的，相当于sql中的and，所有的条件都满足才可以</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>: &#123;<span class="string">"age"</span>:<span class="number">22</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"match"</span>:&#123;<span class="string">"address"</span>: <span class="string">"湖北"</span>&#125;&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"post_filter"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">       <span class="string">"should"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"name"</span>:<span class="string">"郑元梅"</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">33</span>&#125;&#125;</div><div class="line">      ],</div><div class="line">      <span class="string">"must_not"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">22</span>&#125;&#125;</div><div class="line">      ]</div><div class="line">     </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="嵌套bool过滤查询"><a href="#嵌套bool过滤查询" class="headerlink" title="嵌套bool过滤查询"></a>嵌套bool过滤查询</h3><ul>
<li>我们需要执行sql语句如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"郑元梅"</span> <span class="keyword">or</span> age=<span class="number">33</span> <span class="keyword">or</span>(age=<span class="number">22</span> <span class="keyword">and</span> price=<span class="number">33</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">       <span class="string">"should"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"name"</span>:<span class="string">"郑元梅"</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">33</span>&#125;&#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">              &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">22</span>&#125;,</div><div class="line">              	&#123;<span class="string">"term"</span>:&#123;<span class="string">"price"</span>:<span class="number">33</span>&#125;&#125;</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">     </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="范围过滤"><a href="#范围过滤" class="headerlink" title="范围过滤"></a>范围过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"post_filter"</span>: &#123;</div><div class="line">    <span class="string">"range"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: &#123;</div><div class="line">        <span class="string">"gte"</span>: <span class="number">20</span>,</div><div class="line">        <span class="string">"lte"</span>: <span class="number">21</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非空的过滤查询"><a href="#非空的过滤查询" class="headerlink" title="非空的过滤查询"></a>非空的过滤查询</h3><ul>
<li><code>select * from user where address is not null</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"filter"</span>: &#123;</div><div class="line">        <span class="string">"exists"</span>: &#123;</div><div class="line">          <span class="string">"field"</span>: <span class="string">"address"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><ul>
<li>在sql中有许多的聚合函数，那么在Elasticsearch中页存在这些聚合函数，比如sum，avg，count等等</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,     <span class="comment">//在使用聚合的时候，默认还会返回全部的文档结果，如果不需要，可以使用size限制</span></div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"sum_age"</span>: &#123;           <span class="comment">//sum_age  指定返回字段的名称</span></div><div class="line">      <span class="string">"sum"</span>: &#123;            <span class="comment">//sum是指定的聚合函数的名称</span></div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span>    <span class="comment">//这里指定聚合的字段</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"avg_age"</span>: &#123;</div><div class="line">      <span class="string">"avg"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"max_age"</span>: &#123;</div><div class="line">      <span class="string">"max"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"min_age"</span>: &#123;</div><div class="line">      <span class="string">"min"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"cardinality_age"</span>: &#123;       </div><div class="line">      <span class="string">"cardinality"</span>: &#123;        <span class="comment">//查询某个字段的基数，就是对应的字段有多少个不同的值</span></div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>分组（group），使用的是<code>terms</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span>    <span class="comment">//按照日期进行分组</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//结果如下：</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"took"</span>: <span class="number">6</span>,</div><div class="line">  <span class="string">"timed_out"</span>: <span class="keyword">false</span>,</div><div class="line">  <span class="string">"_shards"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"successful"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"skipped"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"failed"</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">6</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"hits"</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"aggregations"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"sum_other_doc_count"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"buckets"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="string">"key"</span>: <span class="number">1352635200000</span>,</div><div class="line">          <span class="string">"key_as_string"</span>: <span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">          <span class="string">"doc_count"</span>: <span class="number">5</span>     <span class="comment">//分组的数量	</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="string">"key"</span>: <span class="number">1352592000000</span>,</div><div class="line">          <span class="string">"key_as_string"</span>: <span class="string">"2012-11-11 00:00:00"</span>,</div><div class="line">          <span class="string">"doc_count"</span>: <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对年龄是22岁的用户按照date进行分组，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: <span class="string">"22"</span></div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对年龄是22岁的用户按照date进行分组，并且计算每组的平均年龄</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *,<span class="keyword">avg</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="built_in">date</span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: <span class="string">"22"</span></div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"aggs"</span>: &#123;      <span class="comment">//直接在分组的聚合中，再次使用聚合求age的均值</span></div><div class="line">        <span class="string">"age_avg"</span>: &#123;</div><div class="line">          <span class="string">"avg"</span>: &#123;</div><div class="line">            <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对年龄是22岁的用户按照date进行分组，并且计算每组的平均年龄，最后按照平均年龄进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: <span class="string">"22"</span></div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span>,</div><div class="line">        <span class="string">"order"</span>: &#123;</div><div class="line">          <span class="string">"age_avg"</span>: <span class="string">"asc"</span>    <span class="comment">//按照聚合查询的平均年龄进行升序排序</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="string">"aggs"</span>: &#123;</div><div class="line">        <span class="string">"age_avg"</span>: &#123;</div><div class="line">          <span class="string">"avg"</span>: &#123;</div><div class="line">            <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;请求体查询&quot;&gt;&lt;a href=&quot;#请求体查询&quot; class=&quot;headerlink&quot; title=&quot;请求体查询&quot;&gt;&lt;/a&gt;请求体查询&lt;/h1&gt;&lt;h2 id=&quot;简单查询-【不推荐】&quot;&gt;&lt;a href=&quot;#简单查询-【不推荐】&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es中的mapping</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E4%B8%AD%E7%9A%84mapping/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es中的mapping/</id>
    <published>2018-09-02T11:35:47.000Z</published>
    <updated>2018-09-02T11:36:03.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h1><ul>
<li><code>GET /index/type/_mapping</code> </li>
<li>我们可以使用上面的语句检查自己创建的文档的映射，如果类型映射错误，那么将会造成意想不到的结果</li>
</ul>
<h2 id="核心数据类型"><a href="#核心数据类型" class="headerlink" title="核心数据类型"></a>核心数据类型</h2><ul>
<li>Elasticsearch 支持 如下简单域类型：<ul>
<li>字符串: <code>string</code><ul>
<li><code>text</code> ：支持分词</li>
<li><code>keyword</code> ：不分词</li>
</ul>
</li>
<li>整数 : <code>byte</code>, <code>short</code>, <code>integer</code>, <code>long</code></li>
<li>浮点数: <code>float</code>, <code>double</code></li>
<li>布尔型: <code>boolean</code></li>
<li>日期: <code>date</code></li>
</ul>
</li>
<li>日期和数值类型的数据不会进行分词，只有精确查询才能查询到。</li>
<li>text类型的数据会进行分词，我们只需要查询部分单词即可查询到结果</li>
</ul>
<h2 id="复杂核心类型"><a href="#复杂核心类型" class="headerlink" title="复杂核心类型"></a>复杂核心类型</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/complex-core-fields.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/complex-core-fields.html</a></li>
</ul>
<h2 id="手动指定Mapping"><a href="#手动指定Mapping" class="headerlink" title="手动指定Mapping"></a>手动指定Mapping</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">PUT /lib       <span class="comment">//指定索引为lib</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"mappings"</span>:&#123;</div><div class="line">    <span class="string">"user"</span>:&#123;          <span class="comment">//指定索引类型为user</span></div><div class="line">      <span class="string">"properties"</span>:&#123;</div><div class="line">        <span class="string">"name"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"text"</span>,           <span class="comment">//指定类型</span></div><div class="line">        <span class="string">"analyzer"</span>: <span class="string">"standard"</span>    <span class="comment">//指定分词器</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"age"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"integer"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"date"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"date"</span></div><div class="line">      &#125;,</div><div class="line">      </div><div class="line">      <span class="string">"address"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"text"</span>,</div><div class="line">        <span class="string">"analyzer"</span>: <span class="string">"standard"</span></div><div class="line">      &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mapping&quot;&gt;&lt;a href=&quot;#Mapping&quot; class=&quot;headerlink&quot; title=&quot;Mapping&quot;&gt;&lt;/a&gt;Mapping&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /index/type/_mapping&lt;/code&gt; &lt;/li&gt;

    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es初探</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E5%88%9D%E6%8E%A2/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es初探/</id>
    <published>2018-09-02T11:35:01.000Z</published>
    <updated>2018-09-02T11:35:18.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES初探"><a href="#ES初探" class="headerlink" title="ES初探"></a>ES初探</h1><h2 id="文档元数据"><a href="#文档元数据" class="headerlink" title="文档元数据"></a>文档元数据</h2><p>1、<code>_index</code> ：文档在哪存放</p>
<p>2、<code>_type</code> ：文档表示的对象类别</p>
<p>3、<code>_id</code> ：文档唯一标识</p>
<h2 id="自动生成Id"><a href="#自动生成Id" class="headerlink" title="自动生成Id"></a>自动生成Id</h2><p>1、如果在Put数据的时候没有指定Id，那么会自动生成一个唯一的ID，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">POST /website/blog/</div><div class="line">&#123;</div><div class="line">  <span class="string">"title"</span>: <span class="string">"My second blog entry"</span>,</div><div class="line">  <span class="string">"text"</span>:  <span class="string">"Still trying this out..."</span>,</div><div class="line">  <span class="string">"date"</span>:  <span class="string">"2014/01/01"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//生成的数据如下：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"_index"</span>: <span class="string">"website"</span>,</div><div class="line">  <span class="string">"_type"</span>: <span class="string">"blog"</span>,</div><div class="line">  <span class="string">"_id"</span>: <span class="string">"AWVlzX7Ur7Pz0UFcO81u"</span>,   <span class="comment">//自动生成的Id</span></div><div class="line">  <span class="string">"_version"</span>: <span class="number">1</span>,</div><div class="line">  <span class="string">"result"</span>: <span class="string">"created"</span>,</div><div class="line">  <span class="string">"_shards"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"successful"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"failed"</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"created"</span>: <span class="keyword">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="版本号-version"><a href="#版本号-version" class="headerlink" title="版本号 _version"></a>版本号 _version</h2><p>1、ElasticSearch为了实现并发访问，每次实行更新、删除、添加之后都会为版本号自增1。</p>
<p>2、在删除，更新的之前会保存这个版本号，更新删除操作执行完成之后会自动比较此时的version的值，如果不同，表示被别的进程改变了，一次保证并发的安全性</p>
<h2 id="检索文档的部分字段"><a href="#检索文档的部分字段" class="headerlink" title="检索文档的部分字段"></a>检索文档的部分字段</h2><p>1、当我们检索字段的时候，默认会为我们查询全部的文档字段，但是我们 可以使用<code>_source</code>指定返回的字段，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /website/blog/<span class="number">123</span>?_source=title,text</div></pre></td></tr></table></figure>
<h2 id="判断文档是否存在"><a href="#判断文档是否存在" class="headerlink" title="判断文档是否存在"></a>判断文档是否存在</h2><p>1、使用<code>HEAD</code>风格的请求方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HEAD /website/blog/<span class="number">123</span></div></pre></td></tr></table></figure>
<h2 id="创建新文档"><a href="#创建新文档" class="headerlink" title="创建新文档"></a>创建新文档</h2><p>1、文档的确定有三个元数据指定：index,type,id</p>
<p>2、创建文档的时候，如果想不覆盖原来的文档，那么需要检查文档是否存在，如果存在就不插入，有两种方式，如下：</p>
<p>​    1、使用<code>op_type=create</code>，如果文档已经存在了，那么返回409状态码。如果创建成功了，那么会返回<code>201 Created</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PUT /website/blog/<span class="number">123</span>?op_type=create</div><div class="line">&#123;</div><div class="line">  <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">  <span class="string">"text"</span>:  <span class="string">"Just trying this out..."</span>,</div><div class="line">  <span class="string">"date"</span>:  <span class="string">"2014/01/02"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    2、使用<code>_create</code>，如果失败返回409,如果创建成功了，那么会返回<code>201 Created</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PUT /website/blog/<span class="number">123</span>/_create</div><div class="line">&#123;</div><div class="line">  <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">  <span class="string">"text"</span>:  <span class="string">"Just trying this out..."</span>,</div><div class="line">  <span class="string">"date"</span>:  <span class="string">"2014/01/02"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="批量获取文档"><a href="#批量获取文档" class="headerlink" title="批量获取文档"></a>批量获取文档</h2><p>1、ElasticSearch可以批量获取多个文档中的数据，也可以批量获单个文档中的多条数据</p>
<h3 id="批量获取不同的文档"><a href="#批量获取不同的文档" class="headerlink" title="批量获取不同的文档"></a>批量获取不同的文档</h3><p>1、使用<code>mgetAPI</code>批量获取文档</p>
<p>​    1、<code>docs</code>：指定了要获取的文档</p>
<p>​    2、<code>_source</code>：指定需要返回的字段，不指定，默认返回全部的字段</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">GET /_mget</div><div class="line">&#123;</div><div class="line">   <span class="string">"docs"</span> : [</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> : <span class="string">"website"</span>,   <span class="comment">//文档的索引</span></div><div class="line">         <span class="string">"_type"</span> :  <span class="string">"blog"</span>,      <span class="comment">//文档类型</span></div><div class="line">         <span class="string">"_id"</span> :    <span class="number">2</span>             <span class="comment">// Id</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> : <span class="string">"website"</span>,</div><div class="line">         <span class="string">"_type"</span> :  <span class="string">"pageviews"</span>,</div><div class="line">         <span class="string">"_id"</span> :    <span class="number">1</span>,</div><div class="line">         <span class="string">"_source"</span>: <span class="string">"views"</span>        </div><div class="line">      &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、响应的内容也是和请求的顺序一致，如下：</p>
<p>​    1、查询到的数据存储在<code>docs</code>数组中，字段封装在<code>_source</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="string">"docs"</span> : [</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> :   <span class="string">"website"</span>,</div><div class="line">         <span class="string">"_id"</span> :      <span class="string">"2"</span>,</div><div class="line">         <span class="string">"_type"</span> :    <span class="string">"blog"</span>,</div><div class="line">         <span class="string">"found"</span> :    <span class="keyword">true</span>,</div><div class="line">         <span class="string">"_source"</span> : &#123;</div><div class="line">            <span class="string">"text"</span> :  <span class="string">"This is a piece of cake..."</span>,</div><div class="line">            <span class="string">"title"</span> : <span class="string">"My first external blog entry"</span></div><div class="line">         &#125;,</div><div class="line">         <span class="string">"_version"</span> : <span class="number">10</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> :   <span class="string">"website"</span>,</div><div class="line">         <span class="string">"_id"</span> :      <span class="string">"1"</span>,</div><div class="line">         <span class="string">"_type"</span> :    <span class="string">"pageviews"</span>,</div><div class="line">         <span class="string">"found"</span> :    <span class="keyword">true</span>,</div><div class="line">         <span class="string">"_version"</span> : <span class="number">2</span>,</div><div class="line">         <span class="string">"_source"</span> : &#123;</div><div class="line">            <span class="string">"views"</span> : <span class="number">2</span></div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="批量获取单个文档的值"><a href="#批量获取单个文档的值" class="headerlink" title="批量获取单个文档的值"></a>批量获取单个文档的值</h3><p>1、如果只是获取单个文档中的多条数据，那么只需要在GET请求中指定index和type即可，此时只需要传入不同数据的Id即可，如下：</p>
<p>​    1、其中<code>ids</code>是一个数组，用来封装数据的Id</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /website/blog/_mget</div><div class="line">&#123;</div><div class="line">   <span class="string">"ids"</span> : [ <span class="string">"2"</span>, <span class="string">"1"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    2、请求成功的顺序是按照ids数组中的Id返回的，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"docs"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"_index"</span>: <span class="string">"website"</span>,</div><div class="line">      <span class="string">"_type"</span>: <span class="string">"blog"</span>,</div><div class="line">      <span class="string">"_id"</span>: <span class="string">"123"</span>,</div><div class="line">      <span class="string">"_version"</span>: <span class="number">1</span>,</div><div class="line">      <span class="string">"found"</span>: <span class="keyword">true</span>,</div><div class="line">      <span class="string">"_source"</span>: &#123;</div><div class="line">        <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">        <span class="string">"text"</span>: <span class="string">"Just trying this out..."</span>,</div><div class="line">        <span class="string">"date"</span>: <span class="string">"2014/01/01"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"_index"</span>: <span class="string">"website"</span>,</div><div class="line">      <span class="string">"_type"</span>: <span class="string">"blog"</span>,</div><div class="line">      <span class="string">"_id"</span>: <span class="string">"1"</span>,</div><div class="line">      <span class="string">"_version"</span>: <span class="number">2</span>,</div><div class="line">      <span class="string">"found"</span>: <span class="keyword">true</span>,</div><div class="line">      <span class="string">"_source"</span>: &#123;</div><div class="line">        <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">        <span class="string">"text"</span>: <span class="string">"Starting to get the hang of this..."</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、<strong>即使在GET请求中指定了index和type的值，但是我们也可以在下面覆盖他们的值，这样就可以查询不同文档或者不同索引中的数据了，如下：</strong></p>
<p>​    1、不想覆盖的可以不用自定index和type的值，只需要指定的<code>id</code>的值即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /website/blog/_mget</div><div class="line">&#123;</div><div class="line">   <span class="string">"docs"</span> : [</div><div class="line">      &#123; <span class="string">"_id"</span> : <span class="number">2</span> &#125;,</div><div class="line">      &#123; <span class="string">"_type"</span> : <span class="string">"pageviews"</span>, <span class="string">"_id"</span> :   <span class="number">1</span> &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代价较小的批量操作"><a href="#代价较小的批量操作" class="headerlink" title="代价较小的批量操作"></a>代价较小的批量操作</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/bulk.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/bulk.html</a></p>
<h2 id="空搜索"><a href="#空搜索" class="headerlink" title="空搜索"></a>空搜索</h2><p>1、返回集群下的所有的索引和文档，不需要指定索引、文档、id。默认只是返回前10条</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /_search</div></pre></td></tr></table></figure>
<p>2、返回结果中的各个值的含义参见：<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/empty-search.html#_shards" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/empty-search.html#_shards</a></p>
<h2 id="多索引，多文档的搜索"><a href="#多索引，多文档的搜索" class="headerlink" title="多索引，多文档的搜索"></a>多索引，多文档的搜索</h2><p>1、<code>/_search</code> ：在所有的索引中搜索所有的类型</p>
<p>2、<code>/gb/_search</code> ：在 <code>gb</code> 索引中搜索所有的类型</p>
<p>3、<code>/gb,us/_search</code>：在 <code>gb</code> 和 <code>us</code> 索引中搜索所有的文档</p>
<p>4、<code>/g*,u*/_search</code>：在任何以 <code>g</code> 或者 <code>u</code> 开头的索引中搜索所有的类型</p>
<p>5、<code>/gb/user/_search</code>：在 <code>gb</code> 索引中搜索 <code>user</code> 类型</p>
<p>6、<code>/gb,us/user,tweet/_search</code>：在 <code>gb</code> 和 <code>us</code> 索引中搜索 <code>user</code> 和 <code>tweet</code> 类型</p>
<p>7、<code>/_all/user,tweet/_search</code>：在所有的索引中搜索 <code>user</code> 和 <code>tweet</code> 类型</p>
<h2 id="分页查询【超过1000条的分页数据不推荐】"><a href="#分页查询【超过1000条的分页数据不推荐】" class="headerlink" title="分页查询【超过1000条的分页数据不推荐】"></a>分页查询【超过1000条的分页数据不推荐】</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/pagination.html#pagination" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/pagination.html#pagination</a></p>
<p>2、<code>size</code> ：显示应该返回的结果数量，默认是 <code>10</code></p>
<p>3、<code>from</code> ：显示应该跳过的初始结果数量，默认是 <code>0</code></p>
<p>4、实例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /_search?size=<span class="number">5</span>     <span class="comment">//查询前5条的数据</span></div><div class="line">GET /_search?size=<span class="number">5</span>&amp;from=<span class="number">5</span>  <span class="comment">//查询第2页，每页显示5条数据</span></div><div class="line">GET /_search?size=<span class="number">5</span>&amp;from=<span class="number">10</span>  <span class="comment">//查询第3页的数据，每页显示5条数据</span></div></pre></td></tr></table></figure>
<p>5、分布式中的深度分页的问题，可以在文档中查看详细信息。总之分页请求的数据不要超过1000条</p>
<p>6、<strong>在 <a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/reindex.html" target="_blank" rel="external">重新索引你的数据</a> 中解释了如何 <em>能够</em> 有效获取大量的文档。</strong> </p>
<h2 id="轻量搜索【不推荐使用】"><a href="#轻量搜索【不推荐使用】" class="headerlink" title="轻量搜索【不推荐使用】"></a>轻量搜索【不推荐使用】</h2><p>0、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/search-lite.html#query-string-query" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/search-lite.html#query-string-query</a></p>
<p>1、返回group索引中文档类型为<code>employee</code>中的内容，筛选条件为：文档中的所有字段的值只要有等于<code>Smith</code>的都返回，如下：</p>
<p>​    1、<code>_all</code>：用于指定对文档中的所有字段进行筛选，只要有一个字段成立，那么这个文档就会被选中，但是返回的结果中有相关度的分析</p>
<p>​    2、如果不指定任何字段，那么默认就是使用<code>_all</code>进行筛选</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /group/employee/_search?q=Smith</div><div class="line"></div><div class="line"><span class="comment">//这条语句的效果和上面的语句一样</span></div><div class="line">GET /_all/employee/_search?q=_all:Smith</div></pre></td></tr></table></figure>
<p>2、查询一个文档中指定字段的值等于<code>Smith</code>，如下我们查询文档中的字段<code>last_name</code>这个值等于Smith的所有文档内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /group/employee/_search?q=last_name:Smith</div></pre></td></tr></table></figure>
<h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/inverted-index.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/inverted-index.html</a></p>
<p>2、创建规范：</p>
<p>​    1、单词不区分大小写</p>
<p>​    2、不区分单复数，将单数和复数的单词一律提取出来单数即可</p>
<p>​    3、意思相近的词只提取一个</p>
<p>​    </p>
<h2 id="分析与分析器"><a href="#分析与分析器" class="headerlink" title="分析与分析器"></a>分析与分析器</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/analysis-intro.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/analysis-intro.html</a></p>
<p>2、什么时候使用分词器？</p>
<p>​    1、查找全文域的时候使用，比如使用轻量搜索中的<code>_all</code></p>
<p>​    2、精确查找不使用分词器，比如Date类型的数据，默认将其看成单独的一个词条</p>
<p>3、测试分词器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"analyzer"</span>: <span class="string">"standard"</span>,   <span class="comment">//指定分词器</span></div><div class="line">  <span class="string">"text"</span>: <span class="string">"Text to analyze"</span>   <span class="comment">//指定需要分割的字符串</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回结果如下：</p>
<p>​    1、<code>token</code> 是实际存储到索引中的词条。 <code>position</code> 指明词条在原始文本中出现的位置。 <code>start_offset</code> 和 <code>end_offset</code> 指明字符在原始字符串中的位置。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"tokens"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">4</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"to"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">7</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"analyze"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">8</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">15</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/mapping-intro.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/mapping-intro.html</a></p>
<p>2、Elasticsearch 支持 如下简单域类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">字符串: string</div><div class="line">整数 : <span class="keyword">byte</span>, <span class="keyword">short</span>, integer, <span class="keyword">long</span></div><div class="line">浮点数: <span class="keyword">float</span>, <span class="keyword">double</span></div><div class="line">布尔型: <span class="keyword">boolean</span></div><div class="line">日期: date</div></pre></td></tr></table></figure>
<p>3、如果我们在添加数据的时候使用双引号包裹起来的，那么会被动态映射为字符串类型。</p>
<h2 id="copy-to"><a href="#copy-to" class="headerlink" title="copy_to"></a>copy_to</h2><p>1、我们在查询文本的时候可能会同时会对多个文本中的内容进行查询匹配，那么就需要对多个字段进行筛选了，比如我们需要对name和address这两个字段同时进行匹配，那么效率肯定会比对一个字段进行筛选的低，因此可以使用copy_to字段将这两个字段中的内容存储在同一个字段中，那么就可以实现对一个字段的查询等同于对两个字段的查询，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">PUT lib/user/_mapping</div><div class="line">&#123;</div><div class="line">  <span class="string">"properties"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span>    <span class="comment">//将name这个字段的文本内容复制到name_address中</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"age"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"integer"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"address"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span>   <span class="comment">// //将address这个字段的文本内容复制到name_address中</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、此时就可以使用query查询了，如下：查询名字为Jack，address为jiangsusheng的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"name_address"</span>: <span class="string">"Jack,jiangsusheng"</span>   <span class="comment">//直接使用name_address即可</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//等同于</span></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"match"</span>:&#123;<span class="string">"address"</span>:<span class="string">"jiangsusheng"</span>&#125;&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h2><ul>
<li>默认字符串是不能排序的，因为自动创建的映射将字符串映射为<code>text</code>类型，将会被分词，因此不能进行排序，但是我们知道字符串类型中有一个<code>keyword</code>类型不会被分词，因此我们可以再为需要排序的字符串字段指定一个<code>keyword</code>类型的字段用于排序，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">PUT /lib4</div><div class="line">&#123;</div><div class="line">  <span class="string">"settings"</span>:&#123;</div><div class="line">    <span class="string">"number_of_shards"</span>:<span class="number">5</span>,   <span class="comment">//主分片的数量</span></div><div class="line">    <span class="string">"number_of_replicas"</span>:<span class="number">0</span>   <span class="comment">//副本分片的数量</span></div><div class="line">  &#125;,</div><div class="line">    <span class="string">"mappings"</span>:&#123;</div><div class="line">      <span class="string">"user"</span>:&#123;</div><div class="line">        <span class="string">"properties"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span>,</div><div class="line">      <span class="string">"fields"</span>: &#123;    <span class="comment">//使用fields指定另外一个字段raw</span></div><div class="line">        <span class="string">"raw"</span>:&#123;    </div><div class="line">          <span class="string">"type"</span>: <span class="string">"keyword"</span>     <span class="comment">//类型为keyword</span></div><div class="line">        &#125;</div><div class="line">      &#125;，</div><div class="line">      <span class="string">"fielddata"</span>: <span class="keyword">true</span>   <span class="comment">//将fielddata指定为true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"age"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"integer"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"address"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//排序如下：</span></div><div class="line"></div><div class="line">GET /lib4/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="string">"sort"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: &#123;    <span class="comment">//对字符串类型的name进行排序</span></div><div class="line">        <span class="string">"order"</span>: <span class="string">"desc"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES初探&quot;&gt;&lt;a href=&quot;#ES初探&quot; class=&quot;headerlink&quot; title=&quot;ES初探&quot;&gt;&lt;/a&gt;ES初探&lt;/h1&gt;&lt;h2 id=&quot;文档元数据&quot;&gt;&lt;a href=&quot;#文档元数据&quot; class=&quot;headerlink&quot; title=&quot;文档元数据&quot;&gt;
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es的crud</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E7%9A%84crud/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es的crud/</id>
    <published>2018-09-02T11:34:06.000Z</published>
    <updated>2018-09-02T11:34:24.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch的简单的CRUD"><a href="#ElasticSearch的简单的CRUD" class="headerlink" title="ElasticSearch的简单的CRUD"></a>ElasticSearch的简单的CRUD</h2><p>1、ElasticSearch使用的是RestFul风格的API</p>
<p>2、<code>http://39.105.123.197:5601/</code></p>
<h2 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h2><p>1、需要指定索引，文档的类型，文档的Id</p>
<p>2、使用<code>PUT</code>风格的提交方式，如下：</p>
<pre><code>1、`group`：索引名称

2、`employee`：文档的名字

3、`1`：对应的id
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">PUT /group/employee/<span class="number">1</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> : <span class="string">"John"</span>,</div><div class="line">    <span class="string">"last_name"</span> :  <span class="string">"Smith"</span>,</div><div class="line">    <span class="string">"age"</span> :        <span class="number">25</span>,</div><div class="line">    <span class="string">"about"</span> :      <span class="string">"I love to go rock climbing"</span>,</div><div class="line">    <span class="string">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">PUT /group/employee/<span class="number">2</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> :  <span class="string">"Jane"</span>,</div><div class="line">    <span class="string">"last_name"</span> :   <span class="string">"Smith"</span>,</div><div class="line">    <span class="string">"age"</span> :         <span class="number">32</span>,</div><div class="line">    <span class="string">"about"</span> :       <span class="string">"I like to collect rock albums"</span>,</div><div class="line">    <span class="string">"interests"</span>:  [ <span class="string">"music"</span> ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">PUT /group/employee/<span class="number">3</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> :  <span class="string">"Douglas"</span>,</div><div class="line">    <span class="string">"last_name"</span> :   <span class="string">"Fir"</span>,</div><div class="line">    <span class="string">"age"</span> :         <span class="number">35</span>,</div><div class="line">    <span class="string">"about"</span>:        <span class="string">"I like to build cabinets"</span>,</div><div class="line">    <span class="string">"interests"</span>:  [ <span class="string">"forestry"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h2><p>1、使用<code>GET</code>风格的方式检索,<code>GET/index/document/id</code>如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /group/employee/<span class="number">1</span></div><div class="line">GET /group/employee/<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>1、使用DELETE风格的方式删除，<code>DELETE /index/document/id</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE /megacorp/employee/<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><h3 id="直接覆盖全部"><a href="#直接覆盖全部" class="headerlink" title="直接覆盖全部"></a>直接覆盖全部</h3><p>1、使用PUT覆盖当前的文档,使用这种方式会更新整个文档。</p>
<p>2、这种方式和部分更新的最大区别就是增大了网络的开销</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PUT /group/employee/<span class="number">3</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> :  <span class="string">"TOM"</span>,</div><div class="line">    <span class="string">"last_name"</span> :   <span class="string">"TOM"</span>,</div><div class="line">    <span class="string">"age"</span> :         <span class="number">60</span>,</div><div class="line">    <span class="string">"about"</span>:        <span class="string">"I like to build cabinets"</span>,</div><div class="line">    <span class="string">"interests"</span>:  [ <span class="string">"forestry"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="部分更新"><a href="#部分更新" class="headerlink" title="部分更新"></a>部分更新</h3><p>0、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/partial-updates.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/partial-updates.html</a></p>
<p>1、文档是不可变的，因此部分的更新也是在内部重复着<em>检索-修改-重建索引</em> 的处理过程 。但是我们对于直接覆盖的方式，可以减少网络传输的时间</p>
<p>2、对指定的文档增加字段，使用<code>doc</code>，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update</div><div class="line">&#123;</div><div class="line">   <span class="string">"doc"</span> : &#123;</div><div class="line">      <span class="string">"tags"</span> : [ <span class="string">"testing"</span> ],</div><div class="line">      <span class="string">"views"</span>: <span class="number">0</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、修改已存在的变量的值，使用<code>ctx._source</code>指定文档中的变量，这里的是将views加1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update</div><div class="line">&#123;</div><div class="line">   <span class="string">"script"</span> : <span class="string">"ctx._source.views+=1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、更新可能不存在的值，如果这个值不存在，那么就添加进去，这个很像MongoDB中的检索，使用<code>upsert</code>完成,如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update</div><div class="line">&#123;</div><div class="line">   <span class="string">"script"</span> : <span class="string">"ctx._source.views+=1"</span>,</div><div class="line">   <span class="string">"upsert"</span>: &#123;</div><div class="line">       <span class="string">"views"</span>: <span class="number">1</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、更新和冲突</p>
<p>1、ElasticSearch在文档更新的时候，每个进程会自动保存版本号<code>_version</code>的值，更改成功之后，如果版本号改变了，那么表示这个文档已经被人更新过了，此时就会更新请求失败。但是我们可以使用指定的参数指定在更新失败之前尝试的更新的次数,<code>retry_on_conflict</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update?retry_on_conflict=<span class="number">5</span> </div><div class="line">&#123;</div><div class="line">   <span class="string">"script"</span> : <span class="string">"ctx._source.views+=1"</span>,</div><div class="line">   <span class="string">"upsert"</span>: &#123;</div><div class="line">       <span class="string">"views"</span>: <span class="number">0</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1、<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ElasticSearch的简单的CRUD&quot;&gt;&lt;a href=&quot;#ElasticSearch的简单的CRUD&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch的简单的CRUD&quot;&gt;&lt;/a&gt;ElasticSearch的简单的CRUD&lt;/
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es的安装</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es的安装/</id>
    <published>2018-09-02T11:33:04.000Z</published>
    <updated>2018-09-02T11:33:23.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h2><p>1、官网下载安装包</p>
<p>2、不能以root身份运行，因此需要新建一个用户专门运行elasticSearch</p>
<pre><code>1、`groupadd esgroup`

2、`useradd esuser -g esgroup -p esuser`

3、将elasticSearch文件夹下的运行身份添加到esuser中：`chown -R esgroup:esuser elasticSearch/ `

4、`su esuser `切换用户

5、进入bin文件夹中，使用`./elasticSearch`
</code></pre><p>3、需要在服务器上开启9200端口，使用<code>firewall-cmd --permanent --add-port=9200/tcp</code></p>
<p>4、如果提示没有开启防火墙，那么使用<code>service firewalld start</code></p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>1、<code>docker pull elasticsearch</code>  ： 直接下载最新版本的即可</p>
<p>2、挂在目录，挂载之前我们需要启动一个容器用于cp指定目录下的内容，否则将不能挂载成功</p>
<pre><code>1、`docker run -e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m&quot; --name myele -p 9200:9200 -d 73e6fdf8bd4f` ：先运行容器，不指定挂载的目录

2、cp容器中的配置到本地的服务器目录

    1、`docker cp myele:/usr/share/elasticsearch/lib   /elasticsearch/lib `： 复制lib目录下的所有文件到本地的/elasticsearch/lib目录

    2、`docker cp myele:/usr/share/elasticsearch/config   /elasticsearch/config` ： 复制config所有文件到本地

    3、`docker cp myele:/usr/share/elasticsearch/plugins   /elasticsearch/plugins`：复制plugins到本地

    4、`docker cp myele:/usr/share/elasticsearch/logs     /elasticsearch/logs` ：复制logs下的文件到本地        

    5、`docker cp myele:/usr/share/elasticsearch/data   /elasticsearch/data`：复制data目录下的文件到本地
</code></pre><p>3、开启9200和9300端口</p>
<p>4、修改：<code>sysctl -w vm.max_map_count=262144</code></p>
<p>5、启动容器并且挂载目录,如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run  -e ES_JAVA_OPTS="-Xmx256m -Xms256m" --name ele -v /elasticsearch/lib:/usr/share/elasticsearch/lib -v /elasticsearch/config:/usr/share/elasticsearch/config -v /elasticsearch/plugins:/usr/share/elasticsearch/plugins -v /elasticsearch/logs:/usr/share/elasticsearch/logs: -v /elasticsearch/data:/usr/share/elasticsearch/data -d -p 9200:9200 -p 9300:9300 73e6fdf8bd4f</div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>1、前台启动： <code>./bin/elasticSearch</code></p>
<p>2、后台启动：<code>./bin/elasticsearch -d</code></p>
<h2 id="指定内存空间"><a href="#指定内存空间" class="headerlink" title="指定内存空间"></a>指定内存空间</h2><h2 id="安装常见错误"><a href="#安装常见错误" class="headerlink" title="安装常见错误"></a>安装常见错误</h2><p>1、<a href="https://blog.csdn.net/qq_21387171/article/details/53577115" target="_blank" rel="external">https://blog.csdn.net/qq_21387171/article/details/53577115</a></p>
<h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><p>1、<code>docker pull kibana</code> ： 默认拉取最新版本的，这里的版本要和elasticsearch的版本一致</p>
<p>2、<code>firewall-cmd --permanent --add-port=5601/tcp</code>：开启服务器上的5601端口</p>
<p>3、<code>docker run --name mykibana -e ELASTICSEARCH_URL=http://some-elasticsearch:9200 -p 5601:5601 -d kibana</code> : 运行kibana，需要指定elasticsearch的地址</p>
<p>4、此时运行成功之后即可访问：<code>http://IP:5601</code></p>
<h2 id="配置中文分词器IK"><a href="#配置中文分词器IK" class="headerlink" title="配置中文分词器IK"></a>配置中文分词器IK</h2><p>1、从github中下载和ElasticSearch对应版本的IK分词器： <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="external">下载地址</a></p>
<p>2、使用maven编译 ： </p>
<pre><code>1、由于我安装docker最新版本的elasticsearch版本是5.6.10，但是下载对应的IK分词器编译出来的是5.6.9版本的，此时就不行，因此我们可以修改下载IK中的pom.xml的elasticsearch版本为5.6.10，如下：
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>5.6.10<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.assembly.descriptor</span>&gt;</span>$&#123;project.basedir&#125;/src/main/assemblies/plugin.xml<span class="tag">&lt;/<span class="name">elasticsearch.assembly.descriptor</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.name</span>&gt;</span>analysis-ik<span class="tag">&lt;/<span class="name">elasticsearch.plugin.name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.classname</span>&gt;</span>org.elasticsearch.plugin.analysis.ik.AnalysisIkPlugin<span class="tag">&lt;/<span class="name">elasticsearch.plugin.classname</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.jvm</span>&gt;</span>true<span class="tag">&lt;/<span class="name">elasticsearch.plugin.jvm</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tests.rest.load_packaged</span>&gt;</span>false<span class="tag">&lt;/<span class="name">tests.rest.load_packaged</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">skip.unit.tests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip.unit.tests</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gpg.keyname</span>&gt;</span>4E899B30<span class="tag">&lt;/<span class="name">gpg.keyname</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gpg.useagent</span>&gt;</span>true<span class="tag">&lt;/<span class="name">gpg.useagent</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、修改完成之后使用<code>mvn package</code>命令打包即可</p>
<p>4、将target中的realease目录下的压缩包解压</p>
<p>5、将解压出来的<code>elasticsearch</code>下的所有文件全部拷贝到elasticsearch中的plugins下的<code>ik</code>文件夹中</p>
<p>6、重启即可</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/running-elasticsearch.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/running-elasticsearch.html</a></p>
<p>2、<a href="https://es.xiaoleilu.com/010_Intro/20_Document.html" target="_blank" rel="external">https://es.xiaoleilu.com/010_Intro/20_Document.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装包安装&quot;&gt;&lt;a href=&quot;#安装包安装&quot; class=&quot;headerlink&quot; title=&quot;安装包安装&quot;&gt;&lt;/a&gt;安装包安装&lt;/h2&gt;&lt;p&gt;1、官网下载安装包&lt;/p&gt;
&lt;p&gt;2、不能以root身份运行，因此需要新建一个用户专门运行elasticSearch
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
</feed>
