<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-04-26T02:01:33.038Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springmvc之RequestMapping</title>
    <link href="http://chenjiabing666.github.io/2018/04/26/Springmvc%E4%B9%8BRequestMapping/"/>
    <id>http://chenjiabing666.github.io/2018/04/26/Springmvc之RequestMapping/</id>
    <published>2018-04-26T02:00:43.000Z</published>
    <updated>2018-04-26T02:01:33.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc之RequestMapping"><a href="#Springmvc之RequestMapping" class="headerlink" title="Springmvc之RequestMapping"></a>Springmvc之RequestMapping</h1><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h2><ul>
<li><p>标记客户的请求与哪一个类和方法对应</p>
</li>
<li><p>使用<code>@RequestMapping</code>同时对类和方法进行注解，相当于最终将这两处的注解路径拼接起来，比如类上使用<code>@RequestMapping(&quot;/user&quot;)</code>,在方法上使用<code>@RequestMapping(&quot;/login.do&quot;)</code>,那么拼接时访问的路径为<code>http://localhost:8080/ProjectName/user/login.do</code></p>
</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p><strong><code>value</code></strong> ： 默认的属性，表示映射的地址，如果只有这一个属性，那么默认可以不写value，比如<code>@RequestMapping(&quot;/login.do&quot;)</code>和<code>@RequestMapping(value=&quot;/login.do&quot;)</code>是一样的效果</p>
</li>
<li><p><strong><code>method</code></strong>：指定是请求的方式，我们知道请求的方式有<code>post</code>,<code>get</code>,<code>put</code>,<code>delete</code>。一般常用的是post,get，一旦我们在其中定义这个method属性，那么如果请求的方式不是这个method指定的属性值，那么就不会访问到这个方法。</p>
<ul>
<li><p>其实只要不指定这个<code>method</code>属性，无论是post还是get方式的都会执行这个方法，只有当其设置了<code>method</code>属性才会做限定</p>
</li>
<li><p>比如我们使用了 <code>@RequestMapping(value=&quot;login.do&quot;,method=RequestMethod.GET)</code>，但是我们使用表单提交的是<code>&lt;form action=&quot;&lt;%=request.getContextPath%&gt;/project/user/login.do&quot; method=&quot;post&quot;&gt;&lt;/form&gt;</code>,那么这个表单的请求就不会对应上面的注解的方法，因为表单的提交方式是<code>post</code>，但是RequestMapping定义的是<code>method</code>是<code>get</code>方式,会响应<code>405错误</code></p>
</li>
</ul>
</li>
<li><p><strong><code>params</code></strong> ： params是用来指定请求中包含的参数，其中的值是一个<strong>字符串数组</strong>的形式，并且这个还支持简答的表达式</p>
<ol>
<li><code>param</code>: 表示请求参数中必须包含<code>param</code>这个参数至于为其赋予的值可以随便，但是必须包含这个字段</li>
<li><code>param!=value</code>： 表示请求参数中必须包含param这个参数，但是为其赋予的值不能等于value这个值，其他的什么值都是可以的</li>
<li><code>!param</code> ：表示请求参数中一定不能包含这个param字段，如果包含这个字段，那么将不能映射到这个地址</li>
<li><code>{“param1”，“param2”}</code>  ：  指定请求参数中必须包含着两个请求参数，至于为其赋什么值随便</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	 * 请求的参数中必须不能包含name属性，age必须不能等于12，必须包含sex，address必须等于xuzhou</div><div class="line">	 */</div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testParams"</span>,params=&#123;<span class="string">"!name"</span>,<span class="string">"age!=12"</span>,<span class="string">"sex"</span>,<span class="string">"address=xuzhou"</span>&#125;)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"testParams"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>headers</code></strong> : <code>headers</code>和<code>params</code>同样是支持简单的表达式，同样是一个字符串数组，这里一样的是适用于上面的表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 请求的参数中必须不能包含name属性，age必须不能等于12，必须包含sex，address必须等于xuzhou</div><div class="line"> * 请求头中的Accept-Language不能等于zh-CN,zh;q=0.8</div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testParams"</span>,params=&#123;<span class="string">"!name"</span>,<span class="string">"age!=12"</span>,<span class="string">"sex"</span>,<span class="string">"address=xuzhou"</span>&#125;,headers=&#123;<span class="string">"Accept-Language!=zh-CN,zh;q=0.8"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"testParams"</span>);</div><div class="line">	<span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RequestMapping支持Ant风格的通配符"><a href="#RequestMapping支持Ant风格的通配符" class="headerlink" title="RequestMapping支持Ant风格的通配符"></a>RequestMapping支持Ant风格的通配符</h2><ul>
<li>在学习struts2中的时候也是支持通配符调用的，比如<em>_</em>等。现在springmvc中也是支持通配符风格的，但是只支持Ant风格的，如下：<ul>
<li><code>？</code>： 表示一个任意的字符 springmvc/testAnt?<code>可以使用</code>springmvc/testAnta`这个地址来访问，其中最后一个a可以替换成任意的字符</li>
<li><code>*</code> :   表示支持多个任意的字符  <code>/spingmvc/testAnt/*</code> 可以使用<code>springmvc/testAnt/aaaaa</code>这个地址来访问，其中最后一层的路径可以使用任意的字符串替换</li>
<li><code>**</code> :    匹配多层路径  <code>/springmvc/testAnt/**</code> 可以使用<code>/springmvc/testAnt/user/test</code>这个来访问，当然也可以是多层的路径</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	 * 这里的* 表示支持任意多个字符，因此这里可以使用:springmvc/testAnt/user这个地址来访问，其中最后一层use可以写成任意的字符串即可</div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/testAnt/*"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testAnt</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"testAnt"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc之RequestMapping&quot;&gt;&lt;a href=&quot;#Springmvc之RequestMapping&quot; class=&quot;headerlink&quot; title=&quot;Springmvc之RequestMapping&quot;&gt;&lt;/a&gt;Springmvc之Requ
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc入门</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Springmvc%E5%85%A5%E9%97%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Springmvc入门/</id>
    <published>2018-04-24T03:14:16.000Z</published>
    <updated>2018-04-24T03:14:43.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc入门"><a href="#Springmvc入门" class="headerlink" title="Springmvc入门"></a>Springmvc入门</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li><p>解决<code>V(View)</code>和<code>C(Controller)</code>的交互问题,即解决了Controller如果接收了用户的请求，并将结果响应给用户的问题</p>
</li>
<li><p>springmvc约定了一套处理用户请求的流程</p>
</li>
</ul>
<h2 id="Springmvc的核心组件"><a href="#Springmvc的核心组件" class="headerlink" title="Springmvc的核心组件"></a>Springmvc的核心组件</h2><ol>
<li><code>DispatcherServlet</code> ：前端控制器，请求入口</li>
<li><code>HandlerMapping</code> ： 控制器，其中存放着处理请求的组件，请求派发</li>
<li><code>Controller</code> ：控制器，处理请求</li>
<li><code>ModelAndView</code> ：模型，封装业务处理结果和视图</li>
<li><code>ViewResolver</code> : 视图解析器，显示视图</li>
</ol>
<h2 id="springmvc处理流程"><a href="#springmvc处理流程" class="headerlink" title="springmvc处理流程"></a>springmvc处理流程</h2><ol>
<li>用户发出请求，请求交给前端控制器(<code>DispatcherServlet</code>)处理</li>
<li>DispatcherServlet通过<code>HandlerMapping</code>找到<code>Controller</code>中相对应的组件处理请求</li>
<li>执行<code>Controller</code>组件约定方法处理请求，在约定方法调用模型组件(<code>Service,Dao</code>)完成业务逻辑,约定方法返回一个<code>ModelAndView</code>对象，封装了处理结果和视图名称信息</li>
<li>控制器接收了<code>ModelAndView</code>之后，调用视图解析器(<code>ViewResolver</code>)组件，定位到指定的<code>View(JSP)</code>并且传递处理结果，生成响应界面结果</li>
</ol>
<p><img src="http://ono60m7tl.bkt.clouddn.com/springmvc.png" alt="springmvc处理流程"></p>
<h2 id="创建一个Springmvc项目"><a href="#创建一个Springmvc项目" class="headerlink" title="创建一个Springmvc项目"></a>创建一个Springmvc项目</h2><ul>
<li>创建<code>maven</code>项目</li>
<li>导入<code>web.xml</code></li>
<li>配置<code>tomact</code>项目运行环境(<code>项目右击 --&gt; properties - &gt; Target Runtimes</code>)</li>
<li>配置<code>pom.xml</code>依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>添加springmvc的配置文件在resource目录下(<code>applicationContext.xml</code>)<ul>
<li><strong>开启组件扫描</strong></li>
<li><strong>配置视图解析器，用来定义跳转的视图，在视图解析中，最后的jsp文件在  <code>perfix +  controller中返回的字符串 + suffix</code></strong></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 开启组件扫描 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.springmvc"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置视图解析器:</span></div><div class="line">		prefix:表示前缀</div><div class="line">		suffix：表示后缀</div><div class="line">		如果controller中返回的是success这个字符串，那么对应的视图是/WEB-INF/JSP/success.jsp这个视图</div><div class="line">	--&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/JSP/"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置前端控制器(DispatcherServlet),在<code>web.xml</code>中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置前端控制器DispatcherServlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置springMVC配置文件的路径，这里如果想要使用默认的可以不用配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- classpath表示根路径，这里找的项目根路径下的applicationContext.xml --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 当tomcat启动的时候就加载，设置启动的优先级 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置分发规则，这个是用来控制所有的请求,只要是请求后缀为.do的都会拦截分发--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>cn.tedu.springmvc.controller</code>包中创建一个<code>UserController</code>类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testHello</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;  <span class="comment">//返回视图，这里通过视图解析器之后对应的是 /WEB-INF/JSP/success.jsp</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在 <code>WEB-INF/JSP/</code>中创建一个<code>success.jsp</code>页面，添加一个<code>&lt;h1&gt;Hello World&lt;/h1&gt;</code></li>
</ul>
<ul>
<li>此时启动项目，打开浏览器输入<code>http://localhost:8080/Springmvc_01/user/hello.do</code>，那么就会看见成功跳转到success.jsp页面，显示文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc入门&quot;&gt;&lt;a href=&quot;#Springmvc入门&quot; class=&quot;headerlink&quot; title=&quot;Springmvc入门&quot;&gt;&lt;/a&gt;Springmvc入门&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;head
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解的使用和组件扫描</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Spring%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Spring注解的使用和组件扫描/</id>
    <published>2018-04-24T03:13:38.000Z</published>
    <updated>2018-04-24T03:24:04.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring注解的使用和组件扫描"><a href="#Spring注解的使用和组件扫描" class="headerlink" title="Spring注解的使用和组件扫描"></a>Spring注解的使用和组件扫描</h1><h2 id="【非常重要】-组件扫描-Component-Scan"><a href="#【非常重要】-组件扫描-Component-Scan" class="headerlink" title="【非常重要】 组件扫描(Component-Scan)"></a>【非常重要】 组件扫描(Component-Scan)</h2><ul>
<li><p>通过配置组件扫描，可以使得spring自动扫描package，而不必在spring的配置文件中逐一声明各个<code>&lt;bean&gt;</code></p>
</li>
<li><p>在配置组件扫描时，指定的包是“根包”，即例如指定了<code>cn.tedu.spring</code>,spring不只会扫描这个包，还会扫描它的各个层级子包，例如：<code>cn.tedu.spring.dao</code></p>
</li>
<li><p>直接在spring的配置文件中开启组件扫描即可 <code>&lt;context:component-scan base-package=&quot;cn.tedu.spring&quot;&gt;&lt;/context:component-scan&gt;</code></p>
</li>
<li><p><strong>注意</strong>： 仅仅开启组件扫描<code>spring</code>是不会自动管理bean的，而是自动的扫描<code>package</code>，要想自动管理bean，那么还需要配置注解</p>
</li>
</ul>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul>
<li><p>在类的声明上方添加<code>@Component</code>注解，可以是的spring知道这个类是一个组件，需要进行管理，所以如过某个类需要被Spring管理，应该将这个类放在被扫描的包中，并且添加注解</p>
</li>
<li><p>由Spring扫描到的组件(由<code>@Component</code>注解标记的类)，会由Spring自动设置<code>Bean Id</code>，值为将<strong>类名首字母小写</strong>的名称，例如组件类的名称是<code>UserDao</code>，则配置的Bean的id是<code>userDao</code>，如果需要自定义Bean，那么可以直接在注解中设置，比如<code>@Component(&quot;id&quot;)</code></p>
</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>一定要是在开启组件扫描的包下使用注解，否则将不会扫描到配置的注解</li>
</ul>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul>
<li><p>可以混用，暂时这几个注解没有差异，完全功能相同，但是我们还是要根据规则使用</p>
</li>
<li><p><code>@Component</code> ： 通用注解</p>
</li>
<li><code>@Service</code> ： 用于对业务逻辑类的注解(Service层)</li>
<li><code>@Controller</code> ： 用于对控制器类的注解</li>
<li><code>@Repository</code> ：用于对持久层处理类的注解(Dao层)</li>
<li><p><code>@Named</code> ：通用注解(不用)</p>
</li>
<li><p>以上5个注解从实现目标和效果是等效的，但是基于方便理解代码的目的，应该按需使用，了；例如对名为<code>UserService</code>类的，应该使用<code>@Service</code></p>
</li>
</ul>
<h3 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h3><h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><ul>
<li>在类的声明语句上方添加这个注解，用于设置bean的作用域,比如<code>@Scope(&quot;prototype&quot;)</code>表示非单例，默认是单例</li>
</ul>
<h4 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h4><ul>
<li>在单例模式下设置是否懒加载，例如<code>@Lazy(&quot;true&quot;)</code>用于设置成懒加载</li>
<li>在类的声明语句上方添加</li>
<li>前面之前已经说过，在创建Bean的时候默认使用的是单例模式下的饿汉式的创建，即是在spring配置文件加载的时候创建</li>
</ul>
<h4 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h4><ul>
<li>将方法设置为生命周期的初始化方法</li>
<li>设置初始化方法，直接在初始化方法的声明语句中添加即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化方法： 应该是public的，无返回参数，无参数的</div><div class="line"> */</div><div class="line"><span class="meta">@PostConstruct</span>   <span class="comment">//定义初始化方法，在构造方法之后执行</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"初始化方法"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="PreDestroy-单例模式下才会销毁"><a href="#PreDestroy-单例模式下才会销毁" class="headerlink" title="@PreDestroy(单例模式下才会销毁)"></a>@PreDestroy(单例模式下才会销毁)</h4><ul>
<li>在方法的声明语句上方使用，可以将这个方法设置为生命周期的销毁方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PreDestroy</span>   <span class="comment">//定义销毁方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"销毁方法"</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="注入值"><a href="#注入值" class="headerlink" title="注入值"></a>注入值</h3><h4 id="Autowired-（不推荐使用）"><a href="#Autowired-（不推荐使用）" class="headerlink" title="@Autowired （不推荐使用）"></a>@Autowired （不推荐使用）</h4><ul>
<li><p>在类中，在声明属性的上方添加<code>@Autowired</code>，用于标记该属性是自动装配值</p>
</li>
<li><p><strong>这种自动装配默认按照类型(<code>byType</code>)实现自动装配</strong></p>
</li>
<li><p><strong>如果需要按照名称(byName)来自动装配,还需要使用<code>@Qualifier(&quot;userDao&quot;)</code>来组合使用，注解中配置的名称是需要注入的值的<code>Bean-Id</code></strong></p>
</li>
</ul>
<ul>
<li><code>UserDao</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Repository(&quot;userDao&quot;)</div><div class="line">public class UserDaoImpl implements UserDao&#123;</div><div class="line">	public void reg() &#123;</div><div class="line">		System.out.println(&quot;reg&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>UserService</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reg</span><span class="params">()</span></span>&#123;</div><div class="line">		userDao.reg();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Resource-推荐使用"><a href="#Resource-推荐使用" class="headerlink" title="@Resource (推荐使用)"></a>@Resource (推荐使用)</h4><ul>
<li>在需要注入的属性的上方添加该注解</li>
<li><strong>默认先按照名称来自动装配的(byName),如果名称对应不上，那么按照类型(byType)进行匹配</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span>   <span class="comment">//这里会先自动匹配和属性名一样的Bean Id，如果没有匹配到，那么就按照类型进行匹配</span></div><div class="line"><span class="keyword">private</span> UserDao userDao;</div></pre></td></tr></table></figure>
<ul>
<li><strong>如果使用<code>@Resource(name=&quot;userDaoImpl&quot;)</code>，name属性指定的是<code>Bean Id</code>,添加了name属性，那么只是按照名称来装配，如果这个名称对应的Bean不存在，那么就注入失败</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span>(name=<span class="string">"userDaoImpl"</span>)   <span class="comment">//这里只会匹配Bean Id为userDaoImpl的，如果匹配不上，那么报异常</span></div><div class="line"><span class="keyword">private</span> UserDao userDao;</div></pre></td></tr></table></figure>
<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><ul>
<li><p>使用<code>@Value</code>注解添加在属性的声明的上方，可以对属性注入值</p>
</li>
<li><p>直接注入值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"陈加兵"</span>)</div><div class="line"><span class="keyword">private</span> String name;</div></pre></td></tr></table></figure>
<ul>
<li>在使用<code>@Value(&quot;#{beanId.属性名}&quot;)</code>的注解时还可以使用Spring表达式</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Value(#&#123;jdbc.url&#125;)</div><div class="line">private String url;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring注解的使用和组件扫描&quot;&gt;&lt;a href=&quot;#Spring注解的使用和组件扫描&quot; class=&quot;headerlink&quot; title=&quot;Spring注解的使用和组件扫描&quot;&gt;&lt;/a&gt;Spring注解的使用和组件扫描&lt;/h1&gt;&lt;h2 id=&quot;【非常重要】-组件
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring表达式和自动装配</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Spring%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Spring表达式和自动装配/</id>
    <published>2018-04-24T03:12:59.000Z</published>
    <updated>2018-04-24T03:13:14.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring表达式和自动装配"><a href="#Spring表达式和自动装配" class="headerlink" title="Spring表达式和自动装配"></a>Spring表达式和自动装配</h1><h2 id="【重要】spring表达式"><a href="#【重要】spring表达式" class="headerlink" title="【重要】spring表达式"></a>【重要】spring表达式</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li><p>通过spring表达式可以在配置<code>Y</code>节点时，如果Y的某些属性需要注入值，可以是已经配置的好的<code>X</code>类的节点中的值</p>
</li>
<li><p>直接使用<code>#{id.属性名}</code></p>
</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>必须为每个属性都要设置<code>set</code>方法</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>新建两个类</p>
</li>
<li><p>Message</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> List&lt;String&gt; cities;   <span class="comment">//城市 。List集合</span></div><div class="line">	<span class="keyword">private</span> Set&lt;String&gt; friend;   <span class="comment">//Set集合</span></div><div class="line">	<span class="keyword">private</span> Map&lt;Integer,String&gt; bookes;  <span class="comment">//Map集合</span></div><div class="line">	<span class="keyword">private</span> Properties properties;   <span class="comment">//Properties集合</span></div><div class="line">	<span class="keyword">private</span> String[] names;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> String[] getNames() &#123;</div><div class="line">		<span class="keyword">return</span> names;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String[] names)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.names = names;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getCities</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> cities;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCities</span><span class="params">(List&lt;String&gt; cities)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cities = cities;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getFriend</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> friend;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFriend</span><span class="params">(Set&lt;String&gt; friend)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.friend = friend;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getBookes</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> bookes;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookes</span><span class="params">(Map&lt;Integer, String&gt; bookes)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.bookes = bookes;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> properties;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.properties = properties;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ValueBean的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueBean</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取不是集合类型的值"><a href="#获取不是集合类型的值" class="headerlink" title="获取不是集合类型的值"></a>获取不是集合类型的值</h4><ul>
<li>在sprig的配置文件中配置如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"cities"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>徐州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>无锡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>常州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:set</span> <span class="attr">id</span>=<span class="string">"friends"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:set</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"bookes"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1001"</span> <span class="attr">value</span>=<span class="string">"java编程基础"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1002"</span> <span class="attr">value</span>=<span class="string">"java编程思想"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 引入外部的Properties文件，location指定的就是位置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"properties"</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">util:properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Message"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- List集合的注入 ref指定的上面定义的List的id --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cities"</span> <span class="attr">ref</span>=<span class="string">"cities"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Set集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"friend"</span> <span class="attr">ref</span>=<span class="string">"friends"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Map集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookes"</span> <span class="attr">ref</span>=<span class="string">"bookes"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- properties的集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span> <span class="attr">ref</span>=<span class="string">"properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 为数组赋值 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"names"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>Alex<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>Billy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置ValueBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueBean"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.ValueBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- value的值是使用spring表达式获取的，形式为：#&#123;前面定义好的id.属性名&#125; --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;message.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引用数组集合或者List的值"><a href="#引用数组集合或者List的值" class="headerlink" title="引用数组集合或者List的值"></a>引用数组集合或者List的值</h4><ul>
<li>直接使用 <code>#{bean的id.数组名[index]}</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置ValueBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueBean"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.ValueBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- value的值是使用spring表达式获取的，形式为：#&#123;前面定义好的id.属性名&#125; --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;message.names[0]&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="ValueBean的name属性设置为Person中的Address对象的city值"><a href="#ValueBean的name属性设置为Person中的Address对象的city值" class="headerlink" title="ValueBean的name属性设置为Person中的Address对象的city值"></a>ValueBean的name属性设置为Person中的Address对象的city值</h4><ul>
<li><p><code>#{person.address.city}</code></p>
</li>
<li><p>Person类中有一个成员变量是Address类的对象</p>
</li>
<li>这里不再写这三个类了，直接在spring中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 创建一个Address的实例 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Address"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"无锡"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pro"</span> <span class="attr">value</span>=<span class="string">"江苏"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Person"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引用上面address --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置ValueBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueBean"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.ValueBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- value的值是使用spring表达式获取的，形式为：#&#123;前面定义好的id.属性名&#125; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;person.address.city&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引用Map集合中的某个value"><a href="#引用Map集合中的某个value" class="headerlink" title="引用Map集合中的某个value"></a>引用Map集合中的某个value</h4><ol>
<li><code>#{id.Map名称.key名称}</code></li>
<li><code>#{id.Map名称[&#39;key名称&#39;]}</code></li>
</ol>
<h2 id="【了解】spring表达式支持方法的调用"><a href="#【了解】spring表达式支持方法的调用" class="headerlink" title="【了解】spring表达式支持方法的调用"></a>【了解】spring表达式支持方法的调用</h2><h2 id="【了解】-自动装装配-autowire"><a href="#【了解】-自动装装配-autowire" class="headerlink" title="【了解】 自动装装配(autowire)"></a>【了解】 自动装装配(autowire)</h2><ul>
<li><code>&lt;bean id=&quot;&quot; class=&quot;&quot; autowire=&quot;&quot;&gt;</code></li>
<li>自动装配表现为不需要配置<code>&lt;property&gt;</code>节点来注入，spring会自动的为属性注入值</li>
<li><p>在<code>bean</code>节点中添加<code>autowire</code>属性以配置自动装配，当值为<code>byName</code>，表示根据名称自动装配，即spring会检查这个bean的所有属性名称，然后在搜平日那个管理的所有Bean中查找bean-id一致的Bean对象，如果找到，则自动赋值</p>
</li>
<li><p>当取值为<code>byType</code>时，表示根据类型自动装配，及自动化赋值的标准是找数据类型匹配的Bean对象，需要注意的是：如果根据类型装配，必须保证可以匹配上的，由spring自动管理的Bean只有一个，如果有2个或者更多，会导致异常</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>UserDao</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class UserDao()&#123;</div><div class="line">	public void reg()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>UserService</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reg</span><span class="params">()</span></span>&#123;</div><div class="line">		userDao.reg();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>spring 的配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.UserDao"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--这里不需要配置property节点来ref上面定义的bean，只需要使用自动装配即可--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.UserService"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring表达式和自动装配&quot;&gt;&lt;a href=&quot;#Spring表达式和自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring表达式和自动装配&quot;&gt;&lt;/a&gt;Spring表达式和自动装配&lt;/h1&gt;&lt;h2 id=&quot;【重要】spring表达式&quot;&gt;&lt;a
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring依赖注入</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Spring依赖注入/</id>
    <published>2018-04-24T03:12:24.000Z</published>
    <updated>2018-04-24T03:12:40.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring依赖注入"><a href="#Spring依赖注入" class="headerlink" title="Spring依赖注入"></a>Spring依赖注入</h1><h2 id="【了解】Spring管理对象的生命周期-只有在单例的模式有意义，这个是默认的"><a href="#【了解】Spring管理对象的生命周期-只有在单例的模式有意义，这个是默认的" class="headerlink" title="【了解】Spring管理对象的生命周期(只有在单例的模式有意义，这个是默认的)"></a>【了解】Spring管理对象的生命周期(只有在单例的模式有意义，这个是默认的)</h2><ul>
<li><p>由spring管理的对象可以有生命周期方法，这些生命周期方法是开发人员自定义的，方法名自定义，无参数</p>
</li>
<li><p>由spring管理的对象的类可以有初始化和销毁这两种生命周期方法，按需设计即可。</p>
</li>
<li><p><strong>因为是spring自己调用的，因此要设置为无参数，无返回值的方法。</strong></p>
</li>
</ul>
<h3 id="为单个bean指定生命周期方法"><a href="#为单个bean指定生命周期方法" class="headerlink" title="为单个bean指定生命周期方法"></a>为单个bean指定生命周期方法</h3><ul>
<li>实例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="comment">//person类的初始化方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"初始化方法"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"销毁方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在spring配置文件中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">	init-method ： 定义初始化方法，直接写上方法名称即可</div><div class="line">	destroy-method： 定义销毁方法，直接写上方法名即可</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Person"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="为容器中所有的bean指定生命周期方法"><a href="#为容器中所有的bean指定生命周期方法" class="headerlink" title="为容器中所有的bean指定生命周期方法"></a>为容器中所有的bean指定生命周期方法</h3><ul>
<li>可以在顶级<beans>节点中添加<code>default-init-method</code>指定初始化方法和添加<code>default-destroy-method</code>指定销毁方法</beans></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-init-method</span>=<span class="string">"init"</span> <span class="attr">default-destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.bean.Person"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="【重要】注入属性值"><a href="#【重要】注入属性值" class="headerlink" title="【重要】注入属性值"></a>【重要】注入属性值</h2><h3 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h3><ul>
<li>由spring管理的对象，其属性值可以为其中的某些属性注入值，是的最终获取对象时，属性就已经有值了</li>
</ul>
<h3 id="Setter注入"><a href="#Setter注入" class="headerlink" title="Setter注入"></a>Setter注入</h3><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><ul>
<li>必须为每一个属性添加<code>set</code>方法</li>
</ul>
<h4 id="基本数据类型变量的注入"><a href="#基本数据类型变量的注入" class="headerlink" title="基本数据类型变量的注入"></a>基本数据类型变量的注入</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><ul>
<li>新建一个Person的实体类如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中配置bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Person"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 直接使用property配置参数</span></div><div class="line">			name：指定属性的字段，这个是set方法后面的单词首字母小写的值，比如SetUsername()，那么此时的name值为username</div><div class="line">			value： 指定属性的值</div><div class="line">			ref : 指定前面定义的bean的id，用于设置引用类型的参数值</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>注意</strong>： 在配置XML文件时，<property>节点中的name属性的值其实是Java代码中Set方法名称中除去set单词并且将首字母小写后的名称，例如Set方法的名称为<code>setAge</code>，那么其中的name属性的值就是<code>age</code>。所以这个name属性的值并不是java代码中的属性名称，只不过通常在java代码中，基于代码规范，这里的name属性值也是java代码中的属性名称。</property></li>
</ul>
<h4 id="引用类型的属性注入"><a href="#引用类型的属性注入" class="headerlink" title="引用类型的属性注入"></a>引用类型的属性注入</h4><ul>
<li>引用类型即是在一个类中包含另外一个类的对象，即是一个类的成员变量是另外一个类的对象</li>
</ul>
<h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><ul>
<li>新建一个Address类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String city;  <span class="comment">//城市</span></div><div class="line">	<span class="keyword">private</span> String pro ;  <span class="comment">//省份</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> city;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.city = city;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPro</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> pro;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPro</span><span class="params">(String pro)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.pro = pro;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>新建一个Person类，其中包含了Address这个类的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Address address; <span class="comment">// Address的对象作为成员变量</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.address = address;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中配置实例</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 创建一个Address的实例 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Address"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"无锡"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pro"</span> <span class="attr">value</span>=<span class="string">"江苏"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Person"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 这里的ref引用的是上面配置的Address的实例中的id值 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="【了解】构造器注入-无参，有参"><a href="#【了解】构造器注入-无参，有参" class="headerlink" title="【了解】构造器注入(无参，有参)"></a>【了解】构造器注入(无参，有参)</h3><ul>
<li>在前面已经讲过了无参构造注入，直接使用<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code>即可</li>
</ul>
<h4 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h4><ul>
<li>有一个构造有参构造方法</li>
</ul>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><ul>
<li>创建一个Person类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="comment">//构造方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置spring的配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Person"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">		name: 这个相当于index，也是指定参数列表的属性，不过这里是直接使用参数列表中的变量名</div><div class="line">		value: 为参数设置的值</div><div class="line">		index: 构造方法的参数列表的索引，从0开始</div><div class="line">		ref:引用类型的值，这里的值应该是上面已经定义好的bean的id值</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="注入基本型"><a href="#注入基本型" class="headerlink" title="注入基本型"></a>注入基本型</h2><ul>
<li>在spring注入值时，如果值的类型是String或者java中的基本数据类型，都称之为基本型，而其他的都是”非基本型“的数据</li>
</ul>
<h2 id="注入非基本型-ref"><a href="#注入非基本型-ref" class="headerlink" title="注入非基本型(ref)"></a>注入非基本型(ref)</h2><ul>
<li>前面所说的<code>引用类型的注入</code>就是基本型的注入，这里不再详细的讲述</li>
</ul>
<h2 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h2><ul>
<li>集合类型有<code>List</code>，<code>Set</code>，<code>Map</code>，<code>Properties</code></li>
</ul>
<h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><ul>
<li>创建一个Message类，其中定义了各种集合类型的成员属性，并且添加了<code>set</code>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> List&lt;String&gt; cities;   <span class="comment">//城市 。List集合</span></div><div class="line">	<span class="keyword">private</span> Set&lt;String&gt; friend;   <span class="comment">//Set集合</span></div><div class="line">	<span class="keyword">private</span> Map&lt;Integer,String&gt; bookes;  <span class="comment">//Map集合</span></div><div class="line">	<span class="keyword">private</span> Properties properties;   <span class="comment">//Properties集合</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getCities</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> cities;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCities</span><span class="params">(List&lt;String&gt; cities)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cities = cities;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getFriend</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> friend;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFriend</span><span class="params">(Set&lt;String&gt; friend)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.friend = friend;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getBookes</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> bookes;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookes</span><span class="params">(Map&lt;Integer, String&gt; bookes)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.bookes = bookes;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> properties;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.properties = properties;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在spring的配置文件中配置注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Message"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- List集合的注入 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cities"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>徐州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>无锡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>常州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Set集合的注入 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"friend"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Map集合的注入 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookes"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1001"</span> <span class="attr">value</span>=<span class="string">"java编程基础"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1002"</span> <span class="attr">value</span>=<span class="string">"java编程思想"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- properties的集合的注入 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// spring的配置文件</span></div><div class="line">		String conf = <span class="string">"applicationContext.xml"</span>;</div><div class="line">		<span class="comment">// 获取spring容器</span></div><div class="line">		AbstractApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				conf);</div><div class="line">		Message message=(Message) context.getBean(<span class="string">"message"</span>);</div><div class="line">		List&lt;String&gt; cities=message.getCities();</div><div class="line">		Set&lt;String&gt; friends=message.getFriend();</div><div class="line">		Map&lt;Integer, String&gt; bookes=message.getBookes();</div><div class="line">		Properties properties=message.getProperties();</div><div class="line">		System.out.println(cities);</div><div class="line">		System.out.println(friends);</div><div class="line">		System.out.println(bookes);</div><div class="line">		System.out.println(properties);</div><div class="line">		context.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="【重点了解Properties的注入】引用方式注入集合-lt-util-gt"><a href="#【重点了解Properties的注入】引用方式注入集合-lt-util-gt" class="headerlink" title="【重点了解Properties的注入】引用方式注入集合(&lt;util:&gt;)"></a>【重点了解Properties的注入】引用方式注入集合(<code>&lt;util:&gt;</code>)</h3><ul>
<li>其中的<code>ref</code>指定的是配置集合的<code>id</code></li>
<li><p>使用的还是上面的<code>Message</code>类</p>
</li>
<li><p>在<code>resource</code>中需要新建一个<code>jdbc.properties</code>，我们便可以在spring的配置文件中使用<code>&lt;util:properties id=&quot;&quot; location=&quot;classpath:jdbc.properties&quot;&gt;</code>自动的读取其中的值</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root=root</div><div class="line">password=root</div><div class="line">url=jdbc:mysql://localhost:3306/hirbernate?useUnicode=true&amp;characterEncoding=UTF-8</div><div class="line">driver=com.mysql.jdbc.Driver</div></pre></td></tr></table></figure>
<ul>
<li>spring的配置文件中配置bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"cities"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>徐州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>无锡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>常州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:set</span> <span class="attr">id</span>=<span class="string">"friends"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:set</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"bookes"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1001"</span> <span class="attr">value</span>=<span class="string">"java编程基础"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1002"</span> <span class="attr">value</span>=<span class="string">"java编程思想"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 引入外部的Properties文件，location指定的就是位置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"properties"</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">util:properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Message"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- List集合的注入 ref指定的上面定义的List的id --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cities"</span> <span class="attr">ref</span>=<span class="string">"cities"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Set集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"friend"</span> <span class="attr">ref</span>=<span class="string">"friends"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Map集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookes"</span> <span class="attr">ref</span>=<span class="string">"bookes"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- properties的集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span> <span class="attr">ref</span>=<span class="string">"properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="【了解】其他类型的注入"><a href="#【了解】其他类型的注入" class="headerlink" title="【了解】其他类型的注入"></a>【了解】其他类型的注入</h2><h3 id="为数组注入值"><a href="#为数组注入值" class="headerlink" title="为数组注入值"></a>为数组注入值</h3><ul>
<li>新添加一个数组的属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String[] names;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String[] getNames() &#123;</div><div class="line">		<span class="keyword">return</span> names;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String[] names)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.names = names;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>spring配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 为数组赋值 --&gt;</div><div class="line">&lt;property name="names"&gt;</div><div class="line">	&lt;array&gt;</div><div class="line">		&lt;value&gt;Alex&lt;/value&gt;</div><div class="line">		&lt;value&gt;Billy&lt;/value&gt;</div><div class="line">	&lt;/array&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<ul>
<li>甚至在配置XML时，<code>&lt;List&gt;</code>和<code>&lt;array&gt;</code>可以随意挑选使用，即为<code>List</code>类型的数据注入值时，既可以使用<code>&lt;List&gt;</code>节点，也可以使用<code>&lt;array&gt;</code>节点，反之为数组类型的数据值也是一样</li>
</ul>
<h3 id="注入空字符串"><a href="#注入空字符串" class="headerlink" title="注入空字符串"></a>注入空字符串</h3><ul>
<li>设置的<code>value</code>直接为<code>&quot;&quot;</code></li>
</ul>
<h3 id="为引用类型的数据注入null值"><a href="#为引用类型的数据注入null值" class="headerlink" title="为引用类型的数据注入null值"></a>为引用类型的数据注入null值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">null</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="显示的确定数据类型"><a href="#显示的确定数据类型" class="headerlink" title="显示的确定数据类型"></a>显示的确定数据类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"数据类型"</span>&gt;</span>值<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring依赖注入&quot;&gt;&lt;a href=&quot;#Spring依赖注入&quot; class=&quot;headerlink&quot; title=&quot;Spring依赖注入&quot;&gt;&lt;/a&gt;Spring依赖注入&lt;/h1&gt;&lt;h2 id=&quot;【了解】Spring管理对象的生命周期-只有在单例的模式有意义，这
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Spring%E5%85%A5%E9%97%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Spring入门/</id>
    <published>2018-04-24T03:11:04.000Z</published>
    <updated>2018-04-24T03:11:24.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-day01"><a href="#spring-day01" class="headerlink" title="spring_day01"></a>spring_day01</h1><h2 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h2><ul>
<li>Spring + springMVC + mybatis</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>管理对象： 当开发人员需要某一个类的对象时，不需要自行new对象，而是通过spring直接获取即可</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="【掌握】通过spring获取存在无参构造方法类的对象"><a href="#【掌握】通过spring获取存在无参构造方法类的对象" class="headerlink" title="【掌握】通过spring获取存在无参构造方法类的对象"></a>【掌握】通过spring获取存在无参构造方法类的对象</h3><ul>
<li><p>创建Maven Project</p>
</li>
<li><p>当项目创建好之后，生成web.xml，解决默认提示错误</p>
</li>
<li><p>选择tomcat, 项目右击 -  &gt; properties -&gt; Target Runtimes</p>
</li>
<li><p>打开 <code>http://mvnrepository.com</code>，搜索<code>springwebmvc</code>，在结果中找到的<code>Group</code>是<code>org.springframework</code>,选择版本，并且复制xml代码</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置spring的配置文件(applicationContext.xml)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- id： 自定义名称</span></div><div class="line">		class : 需要spring管理的类的路径</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//spring的配置文件</span></div><div class="line">		String conf=<span class="string">"applicationContext.xml"</span>;</div><div class="line">		<span class="comment">//获取spring容器</span></div><div class="line">		AbstractApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(conf);</div><div class="line">		<span class="comment">//获取配置文件中指定的bean，参数是自定义的id</span></div><div class="line">		Date date=(Date) context.getBean(<span class="string">"date"</span>);</div><div class="line">		<span class="comment">//打印出日期，对象创建成功</span></div><div class="line">		System.out.println(date);</div><div class="line">		context.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="内存泄露或者内存溢出"><a href="#内存泄露或者内存溢出" class="headerlink" title="内存泄露或者内存溢出"></a>内存泄露或者内存溢出</h2><ul>
<li><p>当需要释放某个对象所占用的内存空间时，如果对象没有正确关闭，将导致无法释放，由于这个对象可能已经没有了引用，这个对象再也无法使用，却一直被误认为被使用，就会变成长期存在于内存中的垃圾数据，就是内存泄露</p>
</li>
<li><p>其实少量的内存泄露是灭有危害的。但是如果存在大量的内存泄露，就可导致可用内存明显变少，计算机的运行性能就会下降，当内存泄露到极点的时候，就会溢出。尽管少量的内存泄露是没有危害的，但是应该严谨的编程，尽量不要出现内存泄露</p>
</li>
</ul>
<h2 id="【了解】通过spring获取类中不存在无参构造方法，但是存在静态工厂方法类的对象"><a href="#【了解】通过spring获取类中不存在无参构造方法，但是存在静态工厂方法类的对象" class="headerlink" title="【了解】通过spring获取类中不存在无参构造方法，但是存在静态工厂方法类的对象"></a>【了解】通过spring获取类中不存在无参构造方法，但是存在静态工厂方法类的对象</h2><ul>
<li><p>我们使用spring获取<code>java.util.Calendar</code>的对象</p>
</li>
<li><p><code>factory-method</code> ： 这个属性指定的静态工厂方法</p>
</li>
<li><p>在spring的配置文件中配置这个对象</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 通过静态工厂方法创建对象</span></div><div class="line">	id ： 自定义的名称</div><div class="line">	class： 类的全路径</div><div class="line">	factory-method ： 静态工厂方法</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"calendar"</span> <span class="attr">class</span>=<span class="string">"java.util.Calendar"</span> <span class="attr">factory-method</span>=<span class="string">"getInstance"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStatice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// spring的配置文件</span></div><div class="line">		String conf = <span class="string">"applicationContext.xml"</span>;</div><div class="line">		<span class="comment">// 获取spring容器</span></div><div class="line">		AbstractApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				conf);</div><div class="line">		<span class="comment">// 获取配置文件中指定的bean，参数是自定义的id</span></div><div class="line">		Calendar calendar=(Calendar) context.getBean(<span class="string">"calendar"</span>);</div><div class="line">		<span class="comment">// 打印出日期，对象创建成功</span></div><div class="line">		System.out.println(calendar.getTime());</div><div class="line">		context.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="【了解】类中不存在无参构造方法，也没有静态工厂方法，但是存在实例工厂方法"><a href="#【了解】类中不存在无参构造方法，也没有静态工厂方法，但是存在实例工厂方法" class="headerlink" title="【了解】类中不存在无参构造方法，也没有静态工厂方法，但是存在实例工厂方法"></a>【了解】类中不存在无参构造方法，也没有静态工厂方法，但是存在实例工厂方法</h2><h3 id="实例工厂方法"><a href="#实例工厂方法" class="headerlink" title="实例工厂方法"></a>实例工厂方法</h3><ul>
<li>实例工厂方法： 指另一个类中有工厂方法，可以获取目标类型的对象，即X类中有工厂方法(非静态的)可以获取Y类的对象</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>假设存在PhoneFactory类中，该类中有非静态方法getPhone()可以获取Phon类型的对象，并且Phone没有无参构造方法</p>
</li>
<li><p>Phone</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name=name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>PhoneFactory</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Phone(<span class="string">"小米6"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>spring配置文件<ul>
<li><code>factory-bean</code> ： 是工厂类的id</li>
<li><code>factory-method</code> ： 工厂类获取Phone对象的非静态的方法</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置工厂类 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phoneFactory"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.PhoneFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置Phone类的对象</span></div><div class="line">		factory-bean ： 是工厂类的id</div><div class="line">		factory-method ： 工厂类获取Phone对象的非静态的方法</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Phone"</span> <span class="attr">factory-bean</span>=<span class="string">"phoneFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPhone"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Bean的作用域-Scope"><a href="#Bean的作用域-Scope" class="headerlink" title="Bean的作用域(Scope)"></a>Bean的作用域(<code>Scope</code>)</h2><ul>
<li>默认情况下，由spring配置的对象是单例的</li>
<li>在配置时，在<code>&lt;bean&gt;</code>节点添加<code>scope</code>属性即可调整，当该属性为<code>singleton</code>时是单例的，当属性为<code>prototype</code>为非单例的</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- id： 自定义名称</span></div><div class="line">	class : 需要spring管理的类的路径</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="单例-Singleton"><a href="#单例-Singleton" class="headerlink" title="单例(Singleton)"></a>单例(Singleton)</h3><h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><ul>
<li>在默认情况下，spring创建对象的是使用饿汉式，即是在spring配置文件开始加载的时候就创建对象，但是我们可以使用<code>lazy-init</code>取值我<code>true</code>的时候，就会使用懒加载(懒汉式)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><ul>
<li>一个Bean定义对应多个对象实例</li>
</ul>
<h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><ul>
<li>在一次Http请求中，一个Bean只创建一个实例，仅限于web环境</li>
</ul>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ul>
<li>在一个HttpSession中，一个Bean定义对应一个实例</li>
</ul>
<h3 id="globalSession"><a href="#globalSession" class="headerlink" title="globalSession"></a>globalSession</h3><ul>
<li>在一个全局的HttpSession中，一个bean定义对应一个实例</li>
</ul>
<h2 id="Bean的延迟初始化"><a href="#Bean的延迟初始化" class="headerlink" title="Bean的延迟初始化"></a>Bean的延迟初始化</h2><ul>
<li><p>在spring创建Bean的实例的时候默认是使用单例，并且是饿汉式加载，即是在spring的配置文件在开始加载的时候就创建bean的实例对象</p>
</li>
<li><p>但是我们可以使用<code>lazy-init</code>来延迟初始化，使用懒加载即可，当<code>lazy-init</code>为true的时候便是延迟加载</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>  <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>我们还可以在<code>&lt;beans&gt;</code>根节点中添加一个<code>default-lazy-init</code>，可以为容器中的所有<code>bean</code>设置为懒加载</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="spring配置文件的全部约束"><a href="#spring配置文件的全部约束" class="headerlink" title="spring配置文件的全部约束"></a>spring配置文件的全部约束</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span></div><div class="line">	<span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-day01&quot;&gt;&lt;a href=&quot;#spring-day01&quot; class=&quot;headerlink&quot; title=&quot;spring_day01&quot;&gt;&lt;/a&gt;spring_day01&lt;/h1&gt;&lt;h2 id=&quot;SSM框架&quot;&gt;&lt;a href=&quot;#SSM框架&quot; c
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Servlet和JSP总结</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Servlet%E5%92%8CJSP%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Servlet和JSP总结/</id>
    <published>2018-04-24T03:09:29.000Z</published>
    <updated>2018-04-24T03:10:07.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet和JSP总结"><a href="#Servlet和JSP总结" class="headerlink" title="Servlet和JSP总结"></a>Servlet和JSP总结</h1><h2 id="B-S和C-S"><a href="#B-S和C-S" class="headerlink" title="B/S和C/S"></a>B/S和C/S</h2><ul>
<li>BS: Browser Server 浏览器和服务器<ul>
<li>特点： 跨平台，功能升级比较方便，加载数据慢，用户体验稍差</li>
</ul>
</li>
</ul>
<ul>
<li><p>CS： Client Server 客户端和服务器</p>
<ul>
<li>特点： 功能升级  需要下载新版本客户端，用户交互界面炫酷，体验度高，需要开发多个平台的版本，开发成本高</li>
</ul>
</li>
<li><p>总结： 两种架构各有优缺点，以后工作都有可能涉及到</p>
</li>
</ul>
<h2 id="什么是服务器"><a href="#什么是服务器" class="headerlink" title="什么是服务器"></a>什么是服务器</h2><ul>
<li><p>服务器实际上就是一台高配置的电脑，通常配置内存8g以上，cpu8核以上，硬盘T级别</p>
</li>
<li><p>web服务器： 电脑上安装了web服务器软件，提供复杂的数据及文件共享功能</p>
</li>
<li><p>邮件服务器： 电脑上安装了邮件服务器，提供了收发邮件的功能</p>
</li>
<li><p>数据库服务器： 电脑上安装了数据库软件(mysql oracle) 提供了数据的增删改查</p>
</li>
<li><p>ftp服务器：电脑上安装了ftp服务软件，提供了文件上传下载功能</p>
</li>
</ul>
<h2 id="什么是web服务器"><a href="#什么是web服务器" class="headerlink" title="什么是web服务器"></a>什么是web服务器</h2><ul>
<li>电脑中得到任何资源（数据或者文件）被远程计算机访问，都必须有一个与之对应的网络通信程序，当有用户来访问时，此程序负责建立网络连接，读取相关资源，并把资源发送给用户，此程序负责底层的网络通讯处理http协议，使用此类型程序，程序猿只需要把精力放在具体的业务逻辑上即可</li>
</ul>
<h2 id="通过scoket实现web服务器"><a href="#通过scoket实现web服务器" class="headerlink" title="通过scoket实现web服务器"></a>通过scoket实现web服务器</h2><ul>
<li>练习： 请求<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 返回一个网页</li>
<li>火狐浏览器执行，chrome不支持，windows下不执行可能原因是防火墙</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Socket</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		<span class="comment">//创建服务器socket，并指定端口号</span></div><div class="line">		ServerSocket serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</div><div class="line">		System.out.println(<span class="string">"服务器已经启动"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//循环接收新的socket</span></div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="comment">//得到链接进来的socket对象</span></div><div class="line">			java.net.Socket  socket=serverSocket.accept();</div><div class="line"></div><div class="line">			<span class="comment">//构建数据发送通道</span></div><div class="line">			OutputStream outputStream=socket.getOutputStream();</div><div class="line"></div><div class="line">			<span class="comment">//得到文件的输入流</span></div><div class="line">			FileInputStream inputStream=<span class="keyword">new</span> FileInputStream(<span class="string">"/home/chenjiabing/文档/a.html"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//把文件数据读取到，然后写出</span></div><div class="line">			<span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span>((len=inputStream.read())!=-<span class="number">1</span>)&#123;</div><div class="line">				outputStream.write(len);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//关闭流</span></div><div class="line">			outputStream.close();</div><div class="line">			inputStream.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="市面上常见的web服务器"><a href="#市面上常见的web服务器" class="headerlink" title="市面上常见的web服务器"></a>市面上常见的web服务器</h2><ul>
<li><p>webSphere : 是IBM公司产品，闭源收费</p>
<ul>
<li>应用场景：IBM的操作系统+DB2+WebSphere</li>
</ul>
</li>
<li><p>Tomcat： apache的产品，属于开源免费应用在中小型网站中</p>
<ul>
<li>web学习阶段使用的服务器</li>
</ul>
</li>
<li><p>weblogic  : BEA公司的产品  闭源收费</p>
</li>
</ul>
<h2 id="静态资源和动态资源"><a href="#静态资源和动态资源" class="headerlink" title="静态资源和动态资源"></a>静态资源和动态资源</h2><ul>
<li><p>静态资源：任何用户  任何时间访问  内容都一样</p>
</li>
<li><p>动态资源： 不同的用户访问显示的内容可能会不一样，通过计算生成的网页</p>
</li>
</ul>
<h2 id="Servlet-介绍"><a href="#Servlet-介绍" class="headerlink" title="Servlet 介绍"></a>Servlet 介绍</h2><ul>
<li>因为web服务器本身只提供了静态资源访问，而具体的业务需求存在着动态资源，servlet就是用来扩展web服务器功能，tomcat属于web容器，而servlet属于存在于容器中的组件，Servlet本身是一个组件规范。</li>
</ul>
<h2 id="如何创建Servlet"><a href="#如何创建Servlet" class="headerlink" title="如何创建Servlet"></a>如何创建Servlet</h2><ol>
<li>创建一个Class，继承HttpServlet</li>
<li>编译</li>
<li><p>打包并发布（把servlet添加到tomcat中的webapps目录下）</p>
<ul>
<li>WEB-INF   这个文件夹里面的资源不能直接访问</li>
<li>classess (.class文件)</li>
<li>lib   (存放第三方的jar包)</li>
<li>web.xml   （部署描述文件）</li>
</ul>
</li>
<li><p>运行tomact服务器</p>
</li>
</ol>
<h3 id="创建Servlet第一个程序"><a href="#创建Servlet第一个程序" class="headerlink" title="创建Servlet第一个程序"></a>创建Servlet第一个程序</h3><ul>
<li><p>创建maven项目</p>
<ul>
<li>把默认的jar改成war</li>
<li>把package Explorer改成 project Explorer</li>
<li>在工程根目录的第一个文件上右键点击最长的那一个选项(默认工程中没有web.xml文件，这个操作会自动创建web.xml)</li>
</ul>
</li>
<li><p>创建一个类，继承<code>HttpServlet</code></p>
<ul>
<li>可能你会发现没有这个<code>HttpServlet</code>类，因为这里我们还需要一个jar包，我们在项目上右击选择<code>properties</code>，然后选择<code>Targeted Runtime</code>选择你自己的Tomcat，ok</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="comment">//这个方法可以处理任何的请求，get.post delete put 并且可以在适当的时候调用处理请求类型的各种方法</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		<span class="comment">//设置响应的数据类型</span></div><div class="line">		response.setContentType(<span class="string">"text/html"</span>);</div><div class="line">		<span class="comment">//设置响应编码格式为UTF-8，否则将会出现中文乱码</span></div><div class="line">		response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		<span class="comment">//得到输出对象</span></div><div class="line">		PrintWriter writer=response.getWriter();</div><div class="line">		<span class="comment">//返回数据，这里是向浏览器中写入数据</span></div><div class="line">		writer.write(<span class="string">"&lt;h1&gt;Hello World--你好世界&lt;/h1&gt;"</span>);</div><div class="line">		<span class="comment">//关闭输出流</span></div><div class="line">		writer.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>接下来在web.xml中配置Servlet的映射地址，在web-app的目录下写上如下内容</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 自己定义的名字，任意 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定Servlet的全类名 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.tedu.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 指定Servlet的映射关系 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 这个是上面定义的Servlet的名字 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 指定映射的地址： 这里只需要在浏览器中输入http://localhost:8080/helloWorld即可调用这个Servlet --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloWorld<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在浏览器中输入<code>http://localhost:8080/helloWorld</code></li>
</ul>
<h2 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h2><ul>
<li>404 找不到访问资源<ul>
<li>解决： 检查请求地址，检查项目是否部署成功</li>
</ul>
</li>
<li>500  服务器处理出错<br>  -　代码执行中有异常，仔细查看异常提示，看看能否找到解决办法</li>
</ul>
<h2 id="Servlet响应的过程"><a href="#Servlet响应的过程" class="headerlink" title="Servlet响应的过程"></a>Servlet响应的过程</h2><ol>
<li><p>浏览器发出请求，会先由浏览器的通讯模块对请求进行打包，打包后把数据传递给tomcat服务器</p>
</li>
<li><p>tomcat由通讯模块接收请求包并且对请求包进行解析，把请求数据封装到Request对象中，并且创建Response对象用于给浏览器返回数据</p>
</li>
<li><p>tomcat通讯模块通过查找web.xml文件和本次请求相对应的Sevlet，通过反射技术创建对象并且调用对象的Service方法<br>并把Request和Response传递到方法中</p>
</li>
<li><p>在service方法中书写各种业务代码，把需要返回的数据交给Respose对象，由Response对象传递给通讯模块，在通讯模块中打包成响应包</p>
</li>
<li><p>把响应包数据发送给浏览器通讯模块</p>
</li>
<li><p>浏览器通讯模块解析数据并且展示返回的数据</p>
</li>
</ol>
<p>##响应数据乱码<br>-为什么出现乱码,因为输出响应数据默认使用的是iso8859-1 需要把此编码改成utf-8</p>
<p>##发出请求时传递参数<br>把请求的参数写在请求地址的后面<br><a href="http://localhost:8080/1712ServletDay02_01Hello/hello?name=xiaoming" target="_blank" rel="external">http://localhost:8080/1712ServletDay02_01Hello/hello?name=xiaoming</a><br>通过request获取请求参数</p>
<p>##案例:计算 体质率BMI<br>页面中 有两个文本输入框 一个用来获取身高,一个用来获取体重 和一个提交按钮<br>bmi计算公式  bmi = 体重(kg)/身高(m)/身高(m)<br>根据bmi值判断体重是否正常<br>    bmi<19 体重偏瘦="" bmi="">=19&amp;&amp; bmi&lt;=25 体重正常<br>    bmi&gt;25 该减肥了<br>步骤:1. 创建页面bmi.html  页面中添加两个文本输入框和一个提交按钮</19></p>
<pre><code>2. 创建BMIServlet在Service方法中写业务逻辑
3. 在web.xml中配置bmiservlet
</code></pre><h2 id="地址栏中出现中文-乱码解决方案"><a href="#地址栏中出现中文-乱码解决方案" class="headerlink" title="地址栏中出现中文 乱码解决方案"></a>地址栏中出现中文 乱码解决方案</h2><p>因为浏览器默认会对中进行utf-8编码,但是在Servlet里面8.0以前默认是iso8859-1,8.0以后默认是utf-8,如果使用8.0以前版本解决乱码方案有两种:</p>
<ol>
<li><code>new String(gender.getBytes(&quot;iso8859-1&quot;),&quot;utf-8&quot;);</code></li>
<li>在server.xml的配置文件中修改<br> 在server.xml的第65行左右 的&lt;Connector标签中添加以下属性<pre><code>&lt;Connector URIEncoding=&quot;utf-8&quot;
</code></pre></li>
</ol>
<h2 id="HTTP协议-了解"><a href="#HTTP协议-了解" class="headerlink" title="HTTP协议(了解)"></a>HTTP协议(了解)</h2><h3 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h3><pre><code>属于一种网络应用层的协议,规定了浏览器与web服务器之间如何通讯,以及数据包的结构
-tcp/ip协议:属于连接协议,规定了两台设备如何建立连接
-http:应用层协议基于tcp/ip协议
http协议,规定了数据包的内容和结构,规定了请求方式等内容
浏览器-&gt;打请求包-&gt;服务器-&gt;服务器解请求包
服务器-&gt;打响应包-&gt;浏览器-&gt;浏览器解响应包

http://locaohost:8888/1712ServletDay02_01Hello/hello?name=abc
</code></pre><h3 id="http请求包数据"><a href="#http请求包数据" class="headerlink" title="http请求包数据:"></a>http请求包数据:</h3><ul>
<li><p>GET /1712ServletDay02_01Hello/hello?name=abc HTTP/1.1 Host: localhost:8080    主机地址</p>
</li>
<li><p>Connection: keep-alive    连接状态</p>
</li>
<li><p>Upgrade-Insecure-Requests: 1</p>
</li>
<li><p>//浏览器信息<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: zh-CN,zh;q=0.8</p>
</li>
</ul>
<h3 id="响应数据包"><a href="#响应数据包" class="headerlink" title="响应数据包"></a>响应数据包</h3><ul>
<li>HTTP/1.1(协议版本号) 200(状态码) OK(状态信息)</li>
<li>Server: Apache-Coyote/1.1(服务器信息)</li>
<li>Content-Type: text/html;charset=utf-8(响应数据类型及字符集)</li>
<li>Content-Length: 21(数据长度)</li>
<li><p>Date: Tue, 03 Apr 2018 07:44:01 GMT(当前时间)</p>
</li>
<li><p>http请求包中包含:请求头和请求体</p>
</li>
<li>http响应包中包含:响应头和响应体</li>
</ul>
<h3 id="请求方式-GET和POST"><a href="#请求方式-GET和POST" class="headerlink" title="请求方式:GET和POST"></a>请求方式:GET和POST</h3><ul>
<li><p>GET:</p>
<ul>
<li>请求参数放在请求地址的后面</li>
<li>提交的数据量比较小(大小在2k左右的数据)</li>
<li>不能提交敏感信息因为在地址栏中可能会显示出来,或者某些路由器会保存请求地址中的信息</li>
</ul>
</li>
<li><p>浏览器什么时候会发出get请求:</p>
<ul>
<li>在地址栏中发出的请求就是get请求</li>
<li>form表单默认的请求方式就是get</li>
<li>点击超链接所发出的请求也是get</li>
</ul>
</li>
<li><p>POST:</p>
<ul>
<li>会将请求参数放在请求体里面,没有大小限制</li>
<li>敏感信息相对安全</li>
</ul>
</li>
<li><p>浏览器什么时候会发出post请求</p>
<ul>
<li>只有当表单的提交方式修改为post的时候</li>
</ul>
</li>
</ul>
<h3 id="Servlet中service-和doGet-doPost的关系"><a href="#Servlet中service-和doGet-doPost的关系" class="headerlink" title="Servlet中service 和doGet/doPost的关系"></a>Servlet中service 和doGet/doPost的关系</h3><p>当Servlet组件被tomcat容器调用执行的时候会先执行service方法,在Service方法中判断请求方式是get就访问doGet 如果是post就访问doPost</p>
<h3 id="获取请求头里面的数据"><a href="#获取请求头里面的数据" class="headerlink" title="获取请求头里面的数据"></a>获取请求头里面的数据</h3><ul>
<li><code>String uri = request.getRequestURI();</code></li>
<li><code>StringBuffer url = request.getRequestURL();</code></li>
<li><code>String httpVersion = request.getProtocol();</code></li>
</ul>
<h3 id="设置响应头数据"><a href="#设置响应头数据" class="headerlink" title="设置响应头数据"></a>设置响应头数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置响应数据类型和字符集</span></div><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line"><span class="comment">//设置刷新时间</span></div><div class="line">response.setHeader(<span class="string">"refresh"</span>, <span class="string">"3;info.html"</span>);</div></pre></td></tr></table></figure>
<h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><h4 id="响应数据有中文"><a href="#响应数据有中文" class="headerlink" title="响应数据有中文"></a>响应数据有中文</h4><ul>
<li><code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code><h4 id="请求参数有中文"><a href="#请求参数有中文" class="headerlink" title="请求参数有中文"></a>请求参数有中文</h4></li>
<li><p>get请求:</p>
<ol>
<li><p><code>new String(gender.getBytes(&quot;iso8859-1&quot;),&quot;utf-8&quot;);</code></p>
</li>
<li><p>修改server配置文件 65左右 &lt;Connector URIEncoding=”utf-8”</p>
</li>
</ol>
</li>
<li><p>post:</p>
<ul>
<li><p>为什么出现乱码:在post表单提交数据的时候使用当前页面的解码格式进行编码,因为Request对象默认使用iso8859-1解码 所以需要使用以下方式解决乱码问题</p>
</li>
<li><p>解决方案:在获取参数之前添加以下代码<br><code>request.setCharacterEncoding(&quot;utf-8&quot;);</code></p>
</li>
</ul>
</li>
</ul>
<p><strong>以后写Servlet代码 需要添加以下两行代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="定时刷新及定时跳转"><a href="#定时刷新及定时跳转" class="headerlink" title="定时刷新及定时跳转"></a>定时刷新及定时跳转</h2><ul>
<li><code>response.setHeader(&quot;refresh&quot;,&quot;2&quot;);</code></li>
<li><code>response.setHeader(&quot;refresh&quot;,&quot;2;home.html&quot;);</code></li>
</ul>
<h2 id="如何隐藏关闭的工程"><a href="#如何隐藏关闭的工程" class="headerlink" title="如何隐藏关闭的工程"></a>如何隐藏关闭的工程</h2><ul>
<li>在左侧边栏右上角的小三角点击  点击 customView -&gt; filters-&gt;closed Project</li>
</ul>
<h2 id="如何分组显示项目"><a href="#如何分组显示项目" class="headerlink" title="如何分组显示项目"></a>如何分组显示项目</h2><ul>
<li>在左侧边栏右上角的小三角点击  点击Top level Element 选择Working set 然后重新点击小三角 选择select working set 在里面点击new -&gt;Java 给分组起名然后分配工程到此分组里面,也可以不分配之后以拖拽的方式分配项目</li>
</ul>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul>
<li>什么是重定向:让浏览器往另外一个地址重新发出请求</li>
<li>实现原理: 重定向命令会给浏览器返回一个302的状态码 和一个location的参数 ,浏览器接收到302状态码后会向location参数的地址发出请求</li>
<li>重定向案例:<br>   <code>response.sendRedirect(request.getContextPath()+&quot;/FindAllServlet&quot;);</code></li>
<li>得到当前工程根路径的方式:<ul>
<li><code>request.getContextPath()</code></li>
</ul>
</li>
</ul>
<h2 id="路径的匹配"><a href="#路径的匹配" class="headerlink" title="路径的匹配"></a>路径的匹配</h2><h3 id="两种匹配方式"><a href="#两种匹配方式" class="headerlink" title="两种匹配方式:"></a>两种匹配方式:</h3><ul>
<li>精确匹配:web.xml中的url parttern要和请求地址一致</li>
<li><p>模糊匹配: 通过添加* 的方式让多个请求地址对应一个Servlet</p>
<ol>
<li><p><code>/*</code>:  *代表一个或多个未知,此地址会对应所有的动态资源地址(servlet地址) /abc  /bcd /aaa /a/b/c /x/y<br><code>http://localhost:8080/appname/(内容任意)</code></p>
</li>
<li><p><code>/user/*</code>:此匹配地址必须要求请求地址中必须是<br><code>http://localhost:8080/appname/user/(内容任意)</code></p>
</li>
<li><p>后缀匹配 <code>*.do</code>(*.action)<br><code>http://localhost:8080/appname/xxxx.do</code></p>
</li>
</ol>
</li>
</ul>
<h3 id="浏览器输入一个地址查找资源的过程是怎样的"><a href="#浏览器输入一个地址查找资源的过程是怎样的" class="headerlink" title="浏览器输入一个地址查找资源的过程是怎样的?"></a>浏览器输入一个地址查找资源的过程是怎样的?</h3><pre><code>1. 在当前应用的web.xml中查找是否有与之匹配的动态资源路径(Servlet)
2. 如果匹配到则执行相对应的Servlet
3. 如果没有匹配到会使用默认的Servlet查找是否有同名的静态资源
4. 如果有则返回资源文件
5. 如果没有则页面会显示404(找不到资源)
总结:先找动态 然后找静态 都找不到就404
</code></pre><h3 id="复制工程时注意事项"><a href="#复制工程时注意事项" class="headerlink" title="复制工程时注意事项"></a>复制工程时注意事项</h3><ul>
<li>如果复制工程,需要在工程上右键<code>properties-&gt;web settings</code>修改里面的名称,此时的名称为复制之前工程的名称,修改成新工程的名字</li>
</ul>
<h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><ul>
<li>什么是生命周期: 什么时候实例化 什么时候初始化 什么时候调用方法 什么时候销毁</li>
<li><p>实例化:  两种情况:</p>
<ol>
<li>默认什么时候请求 什么时候实例化</li>
<li>web容器启动的时候实例化 需要在Web.xml中进行配置 <code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>数值越小 优先级越高</li>
</ol>
</li>
<li><p>初始化: 当请求地址在web.xml中匹配到相应的Servlet的时候 web容器会通过反射实例化Servlet对象 并且调用有参数的init方法 在有参数的方法中调用了无参的init()如果需要写初始化代码 重写无参的init();</p>
</li>
<li>方法调用: service doget dopost web容器先实例化Servlet然后初始化Servlet 然后web容器调用service方法在Service方法中判断请求方式然后调用doget或doPost方法</li>
<li>销毁: 当工程从web容器(Tomcat)中卸载的时候执行</li>
</ul>
<h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤:"></a>执行步骤:</h3><ul>
<li>实例化-&gt;初始化-&gt;方法调用-&gt;销毁</li>
</ul>
<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><ul>
<li>什么是JSP: Java Server Page java服务器页面<br>是sun公司提供的一套动态页面规范<ol>
<li>虽然直接使用Servlet也可以生成动态页面,但是操作过于繁琐(out.pringtln()),也不利于页面的维护,所以sun公司才提出了jsp规范</li>
<li>jsp实际上就是一个以.jsp结尾的文件,可以在此文件中写html(css/javaScript)也可以写Java代码片段,容器会将此文件转换成Servlet来执行<br>总结:jsp文件的本质就是Servlet</li>
</ol>
</li>
<li>如何创建jsp文件<ol>
<li>创建一个file 名称为first.jsp</li>
<li>在jsp文件中可以写以下内容<h3 id="Html-包括css-JavaScript"><a href="#Html-包括css-JavaScript" class="headerlink" title="Html(包括css,JavaScript)"></a>Html(包括css,JavaScript)</h3>直接写即可和操作html文件一样<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3></li>
</ol>
</li>
<li>两种写法:<ol>
<li>&lt;% java代码 %&gt; 转换成servlet时会直接照搬过去</li>
<li>&lt;%=java表达式 %&gt; 只能输出一行 等效out.println(java表达式)<h3 id="隐含对象"><a href="#隐含对象" class="headerlink" title="隐含对象"></a>隐含对象</h3></li>
</ol>
</li>
<li>什么是隐含对象<ul>
<li>在jsp中不用创建可以直接使用的对象称为隐含对象(比如:out,request,response,servletConfig…)</li>
</ul>
</li>
<li>为什么可以直接用隐含对象<ul>
<li>因为把jsp转成servlet的时候会自动生成创建这些对象的代码<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3></li>
</ul>
</li>
<li>什么是指令:告诉容器,将jsp转成servlet的时候所做的一些额外操作 比如 import contentType pageEncoding等<br>  pageEncoding指令<br>有些容器在读取磁盘中的jsp文件时默认的解码是iso-8859-1(tomcat默认是utf-8),但是通常jsp文本保存时选择的编码字符集是utf-8,为了保证编码和解码字符集一致所以在页面中通过pageEncoding属性设置解码字符集<br>weblogic bea 收费 默认是iso-8859-1</li>
</ul>
<h2 id="jsp是如何执行的"><a href="#jsp是如何执行的" class="headerlink" title="jsp是如何执行的"></a>jsp是如何执行的</h2><ol>
<li>容器会将jsp文件转成一个servlet<ul>
<li>html(css,js)—&gt;在_jspService中 通过out.write</li>
<li>&lt;% %&gt; —-&gt; 直接原样照搬到_jspService中</li>
<li>&lt;%= %&gt;—-&gt; 在_jspService中 使用 out.print()</li>
</ul>
</li>
<li>容器和调用其它servlet一样调用此Servlet</li>
</ol>
<p>练习: 自己写一个jsp 显示当前时间<br>    格式为 2018年10月20日 11点23分44秒</p>
<p>练习: 显示用户表中的所有用户信息</p>
<p>###cellpadding 内容距td边框的距离</p>
<p>###cellspacing td边框距table边框的距离</p>
<p>Servlet(显示  业务逻辑)<br>Dao数据访问</p>
<p>JSP(显示 业务逻辑)<br>Dao数据访问</p>
<p>##三层架构<br>JSP(显示)<br>Servlet(业务逻辑)<br>Dao数据访问<br>案例:查询所有用户</p>
<ol>
<li>Servlet: 执行查询数据的代码放在Servlet里面</li>
<li>JSP:控制显示的代码<br>##转发<br>一个web组件将未完成的工作交给另外一个web组件<br> web组件(Servlet和jsp)<br>通常情况下是在Servlet里面获取数据,然后把数据交给Jsp显示<br>浏览器发请求-&gt;Servlet -&gt; Jsp<br>以前请求发送到Servlet或jsp 现在分层之后 先把请求发送到Servlet,在Servlet里面获取数据 然后把数据转发给Jsp显示<br>浏览器发请求-&gt;Servlet<br>浏览器发请求-&gt;Jsp<br>##如何实现转发</li>
<li>把数据绑定到request对象上 可以绑定多个数据<br> request.setAttribute(“users”, users);</li>
<li>得到转发器 并调用forward方法<br> RequestDispatcher dispatcher =<pre><code>request.getRequestDispatcher(&quot;userlist3.jsp&quot;);
dispatcher.forward(request, response);
</code></pre> 注意:转发实际上就是web容器找到相对应的组件并且执行了组件的_jspService方法<br>##转发的特点<ol>
<li>转发的目的地有限制只能是应用内部的资源</li>
<li>转发后浏览器的地址栏不变<br>###转发和重定向的区别:<br><img src="01.png" alt=""></li>
</ol>
</li>
<li>浏览器地址栏有没有变化?<br> -转发没有<br> -重定向有变化</li>
<li>能否共享Request和Response对象<br> -转发:可以共享,因为转发只有一次请求web容器只创建了一对Request和Response对象两个组件使用的是相同的<br> -重定向:不可以共享:因为两次请求,web容器创建了两对Request和Response 每个组件使用的是自己的Request和Response</li>
<li>访问地址有何区别<br> -转发:只能访问工程内部的资源<br> -重定向:可以访问任意地址</li>
</ol>
<h2 id="include-指令"><a href="#include-指令" class="headerlink" title="include 指令"></a>include 指令</h2><ul>
<li>引入一个jsp页面，实现页面复用</li>
<li><code>&lt;jsp:include page=&quot;file.jsp&quot;&gt;</code></li>
</ul>
<h2 id="路径相关问题"><a href="#路径相关问题" class="headerlink" title="路径相关问题"></a>路径相关问题</h2><ul>
<li>转发，重定向，表单提交，超链接<ul>
<li><code>request.getDispatcher(&quot;&quot;)</code></li>
<li><code>response.sendRedirect(&quot;&quot;)</code></li>
<li><code>&lt;form action=&quot;&quot;&gt;</code></li>
<li><code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><ul>
<li><p>不以<code>/</code>开头的路径就是相对路径，此路径相对于当前组件的位置</p>
</li>
<li><p>如果想要找到上一级的资源需要加上 <code>../</code></p>
<ul>
<li>访问上上级的a.jsp :  <code>../../a.jsp</code></li>
</ul>
</li>
</ul>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><ul>
<li>假设工程名为web1<ul>
<li>获取工程名 : <code>request.getContextPath()</code></li>
</ul>
</li>
<li>以<code>/</code>开头的路径是绝对路径</li>
<li><strong>转发从工程名之后写</strong><ul>
<li><code>request.getDispatcher(&quot;/jsp/a.jsp&quot;)</code>  直接省略前面的工程名</li>
</ul>
</li>
<li><strong>其他(重定向，超链接，表单提交)从工程名开始写</strong><ul>
<li><code>&lt;a href=&quot;&lt;%=request.getContextPath() %&gt;/jsp/a.jsp&quot;&gt;</code></li>
<li><code>&lt;form action=&quot;&lt;%=request.getContextPath() %&gt;/jsp/helloServlet&quot;&gt;</code></li>
<li><code>response.sendRedirect(&quot;&lt;%=request.getContextPath() %&gt;/jsp/a.jsp&quot;)</code></li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>以后工作中更多的使用的是绝对路径，可维护性和扩展性更好，相对路径可能会出现一个地方更改多个地方出现错误的情况</li>
</ul>
<h2 id="状态管理（数据管理）"><a href="#状态管理（数据管理）" class="headerlink" title="状态管理（数据管理）"></a>状态管理（数据管理）</h2><h3 id="什么是状态管理"><a href="#什么是状态管理" class="headerlink" title="什么是状态管理"></a>什么是状态管理</h3><ul>
<li>将浏览器和服务器之间的多次交互建立关系，此时需要数据建立关系，数据保存和修改称为状态管理。状态即是数据</li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul>
<li>把少量数据保存在浏览器(客户端)的一种技术</li>
<li><p>cookie默认是保存在内存中，浏览器关闭则清除，如果设置了时间为0则立即清除，如果设置时间为正整数，则保存在磁盘中，时间到后自动删除</p>
</li>
<li><p>工作原理：</p>
<ul>
<li>浏览器访问服务器时，服务器会将一些数据以<code>setCookie</code>的形式把数据存放到响应的消息头中，然后浏览器再次访问服务器时，会将Cookie数据放在请求的消息头中，这样服务器就能够得到之前请求时保存的一些数据，这样多次请求就能建立联系</li>
</ul>
</li>
<li><p>服务器如何添加cookie：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个cookie对象</span></div><div class="line">Cookie cookie= <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, <span class="string">"xiaoming"</span>);</div><div class="line"><span class="comment">//设置cookie的过期时间，如果设置为0表示立即清除，如果没有设置那么浏览器关闭之后就会清除</span></div><div class="line">cookie.setMaxAge(<span class="number">100</span>);</div><div class="line"><span class="comment">//添加到响应头中，并且返回给浏览器</span></div><div class="line">response.addCookie(cookie);</div></pre></td></tr></table></figure>
<ul>
<li>此时在浏览器中就可以查看到这个cookie的值了(name属性对应的值)</li>
</ul>
</li>
<li><p>cookie时间：</p>
<ul>
<li>如果Cookie没有设置时间，时间为负整数，cookie保存在内存中，如果浏览器关闭，则数据清除</li>
<li>如果cookie时间设置为0，是立即清除cookie的意思</li>
<li>如果设置成为大于0 的整数，此时的cookie会保存到磁盘中，当时间到了之后会自动删除</li>
<li><code>cookie.setMaxAge(100);</code> 单位是秒</li>
</ul>
</li>
<li><p>获取cookie的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取Cookie，返回的是一个数组</span></div><div class="line">	Cookie[] cookies = request.getCookies();</div><div class="line">	<span class="comment">//如果Cookies存在，读取</span></div><div class="line">	<span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(Cookie cookie : cookies)&#123;</div><div class="line">			System.out.println(cookie.getName()+<span class="string">" : "</span> + cookie.getValue());</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"其中没有cookie"</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>cookie的路径</p>
<ul>
<li><p>如果不设置路径，默认会以当前组件的路径为准，只有当访问地址为当前组件地址或者组件地址的子地址时才会带上cookie</p>
<ul>
<li>假设我们添加cookie的servlet为 <code>http://localhost:8080/web1/cookie/setCookieServlet</code>,那么我们的获取添加的cookie的servlet地址只有是<code>http://localhost:8080/web1/cookie</code>这个地址的子地址(后代),比如<code>http://localhost:8080/web1/cookie/user/getCookieServlet</code></li>
</ul>
</li>
<li><p>为cookie设置路径</p>
<ul>
<li>cookie.setPath(“/“);</li>
</ul>
</li>
<li><p>举例：</p>
<ul>
<li>如果设置path为 <code>/a</code><ul>
<li><code>/a/servlet1</code>    : yes</li>
<li><code>/b/servlet2</code>     : no</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>cookie的编码问题</p>
<ul>
<li><p>cookie只能保存英文，不能保存中文，如果需要保存中文，那么需要编码</p>
</li>
<li><p>中文编码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String name=<span class="string">"小明"</span>;</div><div class="line"><span class="comment">//对中文进行url编码</span></div><div class="line">name=URLEncoder.encode(name,<span class="string">"utf-8"</span>);</div><div class="line"><span class="comment">//创建一个cookie对象</span></div><div class="line">Cookie cookie= <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, name);</div><div class="line"><span class="comment">//设置cookie的过期时间，如果设置为0表示立即清除，如果没有设置那么浏览器关闭之后就会清除</span></div><div class="line">cookie.setMaxAge(<span class="number">100</span>);</div><div class="line"></div><div class="line">System.out.println(cookie.getPath());</div><div class="line"><span class="comment">//添加到响应头中，并且返回给浏览器</span></div><div class="line">response.addCookie(cookie);</div></pre></td></tr></table></figure>
</li>
<li><p>将获取的中文cookie解码输出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取Cookie，返回的是一个数组</span></div><div class="line">Cookie[] cookies = request.getCookies();</div><div class="line"><span class="comment">//如果Cookies存在，读取</span></div><div class="line"><span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="keyword">for</span>(Cookie cookie : cookies)&#123;</div><div class="line">		String value=cookie.getValue();</div><div class="line">		<span class="comment">//把cookie的值取出，然后url解码</span></div><div class="line">		value=URLDecoder.decode(value,<span class="string">"utf-8"</span>);</div><div class="line">		System.out.println(cookie.getName()+<span class="string">" : "</span> + value);</div><div class="line">	&#125;</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">	System.out.println(<span class="string">"其中没有cookie"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>cookie的限制</p>
<ul>
<li>cookie可以被用户禁止</li>
<li>cookie不安全 ，对于敏感信息一定要加密</li>
<li>cookie的数据大小有限制，大约4k左右</li>
<li>cookie总数也有限制，大约200个左右</li>
</ul>
</li>
</ul>
<h4 id="使用cookie记录客户端访问次数"><a href="#使用cookie记录客户端访问次数" class="headerlink" title="使用cookie记录客户端访问次数"></a>使用cookie记录客户端访问次数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		Cookie[] cookies = request.getCookies();</div><div class="line">		Map&lt;String, String&gt; map = getValues(cookies);   <span class="comment">//获取map</span></div><div class="line">		String stringCount = map.get(<span class="string">"count"</span>); <span class="comment">// 获取指定的value</span></div><div class="line">		<span class="keyword">if</span> (stringCount == <span class="keyword">null</span>) &#123;<span class="comment">// 第一次请求</span></div><div class="line">			stringCount = <span class="string">"1"</span>; <span class="comment">// 设置访问次数为1</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">// 不是第一次请求</span></div><div class="line">			<span class="comment">// 请求次数+1</span></div><div class="line">			stringCount = <span class="string">""</span> + (Integer.parseInt(stringCount) + <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"count"</span>, stringCount); <span class="comment">// 把运行次数放置到cookie中</span></div><div class="line">		response.addCookie(cookie); <span class="comment">// 添加cookie,如果前面已经存在了，那么相当于更新cookie的值</span></div><div class="line">		System.out.println(stringCount);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将cookie数组中的键值对存放到Map中,这样就能判断出这个cookie中是否含有指定的key</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getValues</span><span class="params">(Cookie[] cookies)</span> </span>&#123;</div><div class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">		<span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Cookie cookie : cookies) &#123;</div><div class="line">				map.put(cookie.getName(), cookie.getValue());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> map;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="使用cookie保存登录的用户名和信息"><a href="#使用cookie保存登录的用户名和信息" class="headerlink" title="使用cookie保存登录的用户名和信息"></a>使用cookie保存登录的用户名和信息</h3><ul>
<li>需求：<ul>
<li>当用户选择了记住用户名和密码的选项，那么当用户登录成功的时候，接下来每次请求登录页面的时候浏览器会自动显示之前成功登录的用户名和密码</li>
</ul>
</li>
</ul>
<ul>
<li><p>实现：</p>
<ul>
<li>一个单选按钮，选择是否记录登录信息，jsp页面</li>
<li>在表单提交给servlet之后，验证用户是否登录成功，如果登录成功了并且还选择了记住用户名和密码，那么就将此时的用户名和密码信息添加到cookie中</li>
<li><p>在每次跳转到登录页面的时候都需要经过一个Servlet，这个Servlet的作用是获取cookie的值，并且存放在request域中，这样在login.jsp页面中就可以使用这个值</p>
</li>
<li><p>login.jsp</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;form action="/Servlet01/RememberLoginServlet" method="post"&gt;</div><div class="line">				&lt;table cellpadding="0" cellspacing="0" border="0"</div><div class="line">					class="form_table"&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td valign="middle" align="right"&gt;username:&lt;/td&gt;</div><div class="line">						&lt;td valign="middle" align="left"&gt;&lt;input type="text"</div><div class="line">							class="inputgri" name="username" value="&lt;%=request.getAttribute("username") %&gt;" /&gt;&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td valign="middle" align="right"&gt;password:&lt;/td&gt;</div><div class="line">						&lt;td valign="middle" align="left"&gt;&lt;input type="password"</div><div class="line">							class="inputgri" name="password" value="&lt;%=request.getAttribute("password") %&gt;" /&gt;&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line"></div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;&lt;/td&gt;</div><div class="line">						&lt;td valign="middle" align="left"&gt;</div><div class="line">							&lt;input type="checkbox" name="isRemember"&gt;记住用户名和密码一周</div><div class="line">						&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line"></div><div class="line"></div><div class="line">				&lt;/table&gt;</div><div class="line">				&lt;p&gt;</div><div class="line">					&lt;input type="submit" class="button" value="Submit &amp;raquo;" /&gt;</div><div class="line">				&lt;/p&gt;</div><div class="line">			&lt;/form&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>验证用户，保存信息到cookie中的servlet</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">		HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">// 设置中文格式</span></div><div class="line">	<span class="comment">//设置响应字符集必须写在获取输出对象的前面</span></div><div class="line">	response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">	PrintWriter writer=response.getWriter();</div><div class="line">	<span class="comment">// 获取用户名和密码</span></div><div class="line">	String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">	String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">	String isRemeber = request.getParameter(<span class="string">"isRemember"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 登录流程</span></div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConn(); <span class="comment">// 获取连接</span></div><div class="line">		String sql = <span class="string">"select count(*) c from user where username=? and password=?"</span>;</div><div class="line">		statement = connection.prepareStatement(sql);   <span class="comment">//创建预编译对象</span></div><div class="line">		<span class="comment">//设置占位符的值</span></div><div class="line">		statement.setString(<span class="number">1</span>, username);</div><div class="line">		statement.setString(<span class="number">2</span>, password);</div><div class="line">		resultSet = statement.executeQuery(); <span class="comment">// 执行查询语句</span></div><div class="line">		<span class="comment">//遍历查询结果集，如果count&gt;0 表示登录成功，如果=0表示用户名或密码错误</span></div><div class="line">		<span class="keyword">while</span> (resultSet.next()) &#123;</div><div class="line">			<span class="keyword">int</span> count = resultSet.getInt(<span class="string">"c"</span>); <span class="comment">// 获取总数</span></div><div class="line">			<span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"登录成功"</span>);</div><div class="line"></div><div class="line">				<span class="comment">// 判断是否记住密码</span></div><div class="line">				<span class="comment">//如果设置了记住密码，那么就将此时的用户名和密码保存在cookie中</span></div><div class="line">				<span class="keyword">if</span> (isRemeber != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="comment">//将username和password添加到cookie中</span></div><div class="line">					Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"loginInfo"</span>, username+<span class="string">","</span>+password);</div><div class="line">					cookie.setMaxAge(<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>);  <span class="comment">//设置时间为一周，单位为秒</span></div><div class="line">					response.addCookie(cookie);</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//跳转到首页</span></div><div class="line">				request.getRequestDispatcher(<span class="string">"home.jsp"</span>).forward(request, response);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				System.out.println(<span class="string">"登录失败，用户名或密码错误"</span>);</div><div class="line">				response.sendRedirect(<span class="string">"/Servlet01/ShowLoginCookieServlet"</span>);  <span class="comment">//重定向到登录界面</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		writer.write(<span class="string">"服务器出错....."</span>);</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取cookie值，存放到request域中，便于在login.jsp页面中访问到信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">		HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">	Cookie[] cookies = request.getCookies();</div><div class="line">	Map&lt;String, String&gt; map = getValues(cookies);</div><div class="line">	String loginInfo = map.get(<span class="string">"loginInfo"</span>); <span class="comment">// 获取cookie的值</span></div><div class="line">	String username = <span class="string">""</span>;</div><div class="line">	String password = <span class="string">""</span>;</div><div class="line">	<span class="keyword">if</span> (loginInfo != <span class="keyword">null</span>) &#123;</div><div class="line">		username = loginInfo.split(<span class="string">","</span>)[<span class="number">0</span>]; <span class="comment">// 分割字符串，获取信息</span></div><div class="line">		password = loginInfo.split(<span class="string">","</span>)[<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	request.setAttribute(<span class="string">"username"</span>, username);</div><div class="line">	request.setAttribute(<span class="string">"password"</span>, password);</div><div class="line">	request.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(request, response);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将cookie数组中的键值对存放到Map中,这样就能判断出这个cookie中是否含有指定的key</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getValues</span><span class="params">(Cookie[] cookies)</span> </span>&#123;</div><div class="line">	Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">	<span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (Cookie cookie : cookies) &#123;</div><div class="line">			map.put(cookie.getName(), cookie.getValue());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> map;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul>
<li><p>服务端为了保存状态（数据）创建的一个特殊的对象，session数据会保存在服务器</p>
</li>
<li><p>工作原理</p>
<ul>
<li>当浏览器第一次向服务器请求，服务器创建一个session对象，然后把session对象的唯一标识sessionid以cookie的形式返回给浏览器，服务器通过sessionid找到上次保存的session对象，这样的话多次请求只需要把数据保存在session对象中，</li>
</ul>
</li>
</ul>
<h4 id="如何创建Session对象"><a href="#如何创建Session对象" class="headerlink" title="如何创建Session对象"></a>如何创建Session对象</h4><ul>
<li><code>HttpSession session=request.getSession(boolean flag)</code><ul>
<li>参数为false，如果不存在这个session，那么就返回一个null</li>
<li>参数为true，会通过cookie中的sessionid获取之前保存的session对象，如果有则返回，如果没有则创建一个新的session，这个是默认的形式<strong>（缺省值为true）</strong></li>
</ul>
</li>
</ul>
<h4 id="添加删除数据"><a href="#添加删除数据" class="headerlink" title="添加删除数据"></a>添加删除数据</h4><ul>
<li>setAttribute(key,value)</li>
<li>getAtttribute(key,value)</li>
<li>removeAttribute(key)</li>
</ul>
<h4 id="session超时"><a href="#session超时" class="headerlink" title="session超时"></a>session超时</h4><ul>
<li><p>session默认时间是在服务器保存30分钟</p>
</li>
<li><p>如何修改session存活时间</p>
<ul>
<li><p>修改配置文件</p>
<ul>
<li>在servers中的web.xml中查找如下<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line">     		<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></div><div class="line"> 		<span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过代码设置时间</p>
<ul>
<li><code>session.setMaxInactiveInterval(int mils);</code> 单位为秒</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="删除session"><a href="#删除session" class="headerlink" title="删除session"></a>删除session</h4><ul>
<li><code>session.invalidate()</code></li>
</ul>
<h4 id="删除session中的数据"><a href="#删除session中的数据" class="headerlink" title="删除session中的数据"></a>删除session中的数据</h4><ul>
<li><code>session.removeAttribute(key)</code></li>
</ul>
<h3 id="实现自动登录（Session"><a href="#实现自动登录（Session" class="headerlink" title="实现自动登录（Session)"></a>实现自动登录（Session)</h3><ul>
<li>这个在学到过滤器的时候再讲</li>
</ul>
<h2 id="Base64加密"><a href="#Base64加密" class="headerlink" title="Base64加密"></a>Base64加密</h2><ul>
<li>什么是Base64： 将任意二进制数据转换成字符串（由64个基础字符组成a-z A-Z 0-9 + /),可以将需要加密的字符串转换成二进制数据后再转换成Base64的字符串，也可以把任意文件的二进制数据转换成可见的字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String pw=<span class="string">"admin"</span>;</div><div class="line">BASE64Encoder encoder=<span class="keyword">new</span> BASE64Encoder();</div><div class="line">String newPW=encoder.encode(pw.getBytes(<span class="string">"utf-8"</span>));</div><div class="line">System.out.println(newPW);</div><div class="line"></div><div class="line"><span class="comment">//解密</span></div><div class="line">BASE64Decoder decoder=<span class="keyword">new</span> BASE64Decoder();</div><div class="line">String oldPw=<span class="keyword">new</span> String(decoder.decodeBuffer(newPW),<span class="string">"utf-8"</span>);</div><div class="line">System.out.println(oldPw);</div></pre></td></tr></table></figure>
<h2 id="比较cookie和Session"><a href="#比较cookie和Session" class="headerlink" title="比较cookie和Session"></a>比较cookie和Session</h2><ul>
<li><p>cookie： 优点不占用服务器资源，缺点：大小有限制4k 数量限制200左右 内容有限制只能存放字符串，cookie不够安全而且有些浏览器可以模拟cookie数据</p>
</li>
<li><p>Session： <strong>优点</strong>:安全（因为数据保存在服务器）大小无限制，保存数据类型丰富，<strong>缺点</strong>： 占用资源，浏览器关闭后Session则失效,因为session的是状态是存储在cookie中的seessionid决定的。</p>
</li>
</ul>
<h2 id="自动登录加强版"><a href="#自动登录加强版" class="headerlink" title="自动登录加强版"></a>自动登录加强版</h2><ul>
<li>需要自己创建一个cookie</li>
</ul>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h3><ul>
<li>Servlet规范中定义的是一种特殊组件，用来拦截web容器调用Servlet/jsp组件的过程</li>
<li>好处： 可以在不改动Servlet的情况下增加业务功能，可以起到代码复用的作用，因为一个过滤器可以对应拦截多个Servlet</li>
</ul>
<h3 id="如何创建一个过滤器"><a href="#如何创建一个过滤器" class="headerlink" title="如何创建一个过滤器"></a>如何创建一个过滤器</h3><ul>
<li><p>new - &gt; Filter</p>
<ul>
<li><p>这样就创建一个过滤器，其中的类实现了Filter这个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"过滤器被销毁"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></div><div class="line">			FilterChain chain) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">		System.out.println(<span class="string">"过滤器执行"</span>);</div><div class="line">		chain.doFilter(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"过滤器初始化"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这个类中同样有init和destroy方法，但是实现代码逻辑实在doFilter()这个方法中</p>
</li>
<li>在web.xml中配置这个过滤器<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置Filter 的name和class --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.filter.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置Filter的过滤的url，其中的name是前面定义好的 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  	<span class="comment">&lt;!-- /* 拦截所有的Servlet,但是也拦截器了这个路径下的jsp ，如果设置成/MyServlet,那么只拦截这一个Servlet--&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="过滤器的生命周期"><a href="#过滤器的生命周期" class="headerlink" title="过滤器的生命周期"></a>过滤器的生命周期</h3><ul>
<li>创建： 无参构造方法，当web容器启动时，会自动创建过滤器</li>
<li>初始化： init()方法  当过滤器创建后会自动调用</li>
<li>销毁: destroy()方法  当应用程序从web容器中卸载时</li>
<li>doFilter():  当调用被拦截器的Servlet或者jsp的时候执行，在此方法中执行doFilter方法相当于执行Servlet里面的Service方法，因为过滤器里面的Request和Response对象和Servlet中的是同一对象，所以在Servlet里面做的任何事都可以在过滤器中实现</li>
</ul>
<h3 id="案例：-实现评论功能"><a href="#案例：-实现评论功能" class="headerlink" title="案例： 实现评论功能"></a>案例： 实现评论功能</h3><ul>
<li><p>如果出现了敏感字符禁止访问</p>
</li>
<li><p>步骤</p>
<ol>
<li>准备一个Comment.jsp页面，页面中有一个文本框和一个提交按钮</li>
<li>如果出现敏感信息禁止提交，并跳转到原页面重新填写评论</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">		HttpServletRequest req=(HttpServletRequest)request;</div><div class="line"></div><div class="line">		<span class="comment">//继续执行下面的Filter和Servlet，没有这个方法，那么将不会执行</span></div><div class="line">		chain.doFilter(request, response);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="如果配置多个过滤器拦截器同一个请求地址"><a href="#如果配置多个过滤器拦截器同一个请求地址" class="headerlink" title="如果配置多个过滤器拦截器同一个请求地址"></a>如果配置多个过滤器拦截器同一个请求地址</h3><ul>
<li>此时多个过滤器都会响应，哪个先执行，取决于在web.xml中哪个过滤器先配置，先配置的先执行</li>
</ul>
<h3 id="lt-init-param-gt-设置初始化值"><a href="#lt-init-param-gt-设置初始化值" class="headerlink" title="&lt;init-param&gt;设置初始化值"></a><code>&lt;init-param&gt;</code>设置初始化值</h3><ul>
<li>配置Filter 的初始化值，在web.xml中定义</li>
<li><p>其中的<param-value></param-value></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CommentFiletr<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.filter.CommentFiletr<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>word<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>美女,我操<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取其中的值</p>
<ul>
<li>在init中初始化FilterConfig对象</li>
<li>在doFilter中使用FilterConfig对象获取初始化值即可<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentFiletr</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> FilterConfig config;  <span class="comment">//定义成员变量FilterConfig对象</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommentFiletr</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">		String word=<span class="keyword">this</span>.config.getInitParameter(<span class="string">"word"</span>);   <span class="comment">//获取初始化值</span></div><div class="line"></div><div class="line">		chain.doFilter(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//初始化方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		<span class="keyword">this</span>.config=fConfig;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="ServletContext（上下文）"><a href="#ServletContext（上下文）" class="headerlink" title="ServletContext（上下文）"></a>ServletContext（上下文）</h2><ul>
<li><p>定义： web服务器启动的时候会为每一个应用创建一个符合ServletContext接口的对象</p>
</li>
<li><p>特点：</p>
<ul>
<li>唯一性： 整个工程中只有一个</li>
<li>持久性： 只要容器不关闭，整个ServletContext对象就会存在于内存中</li>
</ul>
</li>
<li><p>应用场景：</p>
<ol>
<li>负责传递数据（共享数据），任何一个组件往ServletContext对象中保存数据都可以给整个工程的所有Servlet访问</li>
<li>可以在web.xml中获取全局的初始化数据</li>
</ol>
</li>
</ul>
<h3 id="如何配置参数"><a href="#如何配置参数" class="headerlink" title="如何配置参数"></a>如何配置参数</h3><ul>
<li>在web.xml中配置即可</li>
<li>如果想要配置多个，那么可以定义多个<code>&lt;context-param&gt;</code>即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>在组件中获取ServletContext(在任何组件中都可以获取)</p>
<ul>
<li><p>在<code>Servlet</code>中获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">	ServletContext context=<span class="keyword">this</span>.getServletContext(); <span class="comment">//获取对象</span></div><div class="line">	String name=context.getInitParameter(<span class="string">"name"</span>);  <span class="comment">//获取name属性的值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>Filter</code>中获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">	ServletContext context=fConfig.getServletContext();</div><div class="line">	String name=context.getInitParameter(<span class="string">"name"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="添加和获取数据"><a href="#添加和获取数据" class="headerlink" title="添加和获取数据"></a>添加和获取数据</h3><ul>
<li>getAttribute(key)</li>
<li>setAttribute(key,value)</li>
</ul>
<h2 id="Request-Session-ServletContex，PageContext作用范围"><a href="#Request-Session-ServletContex，PageContext作用范围" class="headerlink" title="Request,Session,ServletContex，PageContext作用范围"></a>Request,Session,ServletContex，PageContext作用范围</h2><ul>
<li><p>ServletContext &gt; Session &gt; Request &gt; PageContext</p>
</li>
<li><p>如何选择传递数据的域：符合需求的域中，选择范围最小的</p>
</li>
</ul>
<h2 id="监听器-Listener"><a href="#监听器-Listener" class="headerlink" title="监听器 Listener"></a>监听器 Listener</h2><h3 id="什么是监听器"><a href="#什么是监听器" class="headerlink" title="什么是监听器"></a>什么是监听器</h3><ul>
<li>Servelt规范中定义的一个特殊组件，用来监听容器内部各组件的事件</li>
<li>组件会有两大类事件<ul>
<li>生命周期相关事件(比如session的创建的和销毁)</li>
<li>绑定数据相关事件</li>
</ul>
</li>
</ul>
<h3 id="如何创建监听器Listener"><a href="#如何创建监听器Listener" class="headerlink" title="如何创建监听器Listener"></a>如何创建监听器Listener</h3><ul>
<li><code>new --- &gt; Listener ---&gt; 类名 ---&gt; next  --  &gt; 选择对应的Listener</code>  具体的选项如下图</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/Listener.png" alt="Listener"></p>
<ul>
<li>选项中有三大域的监听器，ServletContext，Session，Request<ul>
<li>其中Liftcycle 是 生名周期金监听器  其中可以监听三大域的创建和销毁<br>-Change to Attributes 是三大域绑定删除数据监听器</li>
</ul>
</li>
</ul>
<ul>
<li>创建成功之后会在web.xml中自动为我们填上监听器的配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.listener.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="统计在线人数"><a href="#统计在线人数" class="headerlink" title="统计在线人数"></a>统计在线人数</h3><ul>
<li>当开始一个会话将会就表示在线人数+1，因此需要监听Session的生命周期</li>
<li><p>因为我们是统计在线人数，因此我们需要在jsp页面中显示出人数，我们需要将在线人数这个变量存放在ServletContext才能实现共享，这样只有当web容器关闭才会清空其中的在线人数</p>
</li>
<li><p>如果存放在session中，那么当浏览器关闭就会清空session中的数据，或者到了指定的时间也会清空，因此我们不能存放在Session</p>
</li>
<li><p>创建一个监听Session的监听器</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//Session创建时调用的方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent sessionEvent)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"会话开始"</span>);</div><div class="line">		<span class="comment">// 取出当前在线人数</span></div><div class="line">		ServletContext context = sessionEvent.getSession().getServletContext(); <span class="comment">// 得到ServletContext</span></div><div class="line">		Integer count=(Integer) context.getAttribute(<span class="string">"count"</span>);   <span class="comment">//获取当前的在线人数</span></div><div class="line">		<span class="comment">// 如果count是第一次，那么此时的count就是null，因为这里还没有设置这个上下文参数</span></div><div class="line">		<span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</div><div class="line">			count = <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			count++;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 将在线人数保存回去</span></div><div class="line">		context.setAttribute(<span class="string">"count"</span>,count);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//Session销毁时调用的方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"会话结束"</span>);</div><div class="line">		ServletContext context = event.getSession().getServletContext();</div><div class="line">		Integer count=(Integer) context.getAttribute(<span class="string">"count"</span>);   <span class="comment">//获取当前的在线人数</span></div><div class="line">		count--; <span class="comment">// 直接人数-1</span></div><div class="line">		<span class="comment">// 将此时的人数保存回去</span></div><div class="line">		context.setAttribute(<span class="string">"count"</span>,count);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缓存数据练习"><a href="#缓存数据练习" class="headerlink" title="缓存数据练习"></a>缓存数据练习</h2><ol>
<li><p>创建一ServletContext生命周期监听器，在ServletContext创建的的方法中读取数据库中的数据并将数据保存在ServletContext中，因为ServletContext在容器创建的时候就会创建，因此在web容器开启的时候就会读取数据库中的信息</p>
</li>
<li><p>我们在Servlet中直接读取ServletContext中的数据即可，不同在请求Servlet的时候从数据库中读取，提高Servlet的响应效率</p>
</li>
</ol>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul>
<li>在我们使用同一种数据的时候，并且数据常用，我们可以在web容器启动的时候就加载出来，不用每次用到该数据就请求一次读取数据库一次，提高了效率</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//ServletContext销毁的时候调用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span>  </span>&#123;</div><div class="line">    	System.out.println(<span class="string">"销毁"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//ServletContext初始化的时候调用</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span>  </span>&#123;</div><div class="line">    	ServletContext context=event.getServletContext();  <span class="comment">//获取ServletContext对象</span></div><div class="line">    	EmpDao empDao=<span class="keyword">new</span> EmpDao();  <span class="comment">//创建Dao对象，用于读取数据库中的信息</span></div><div class="line">    	List&lt;Emp&gt; emps=empDao.findAll();  <span class="comment">//获取所有的数据</span></div><div class="line">    	context.setAttribute(<span class="string">"emps"</span>, emps);  <span class="comment">//添加到ServletContext中</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="各组件执行顺序"><a href="#各组件执行顺序" class="headerlink" title="各组件执行顺序"></a>各组件执行顺序</h2><ul>
<li><p>MyServlet、MyListener(监听ServletContext),MyFilter</p>
</li>
<li><p>web容器启动 – &gt; MyListener(监听) — &gt; MyFilter实例化 – &gt; 请求 —&gt; MyFilter(doFilter) —&gt; 执行MyServlet</p>
</li>
</ul>
<h2 id="Servlet线程安全问题"><a href="#Servlet线程安全问题" class="headerlink" title="Servlet线程安全问题"></a>Servlet线程安全问题</h2><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><ul>
<li>为什么会有线程安全问题：因为每一个请求 服务器都会开启一条新的线程来执行，这样的话如果请求量比较大出现高并发访问就会出现多条线程同时执行，如果多一条线程执行的过程中，有需要去修改同一份数据，则有可能出现线程安全问题，即一条数据没有处理完，另外一条数据把数据取走</li>
</ul>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>通过同步代码块，将可能会出现线程安全的代码包裹起来，这样就可以解决线程安全问题</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li>假设我们的线程不安全的Servlet如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">"：开始执行"</span> + count);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">5000</span>);   <span class="comment">//线程睡眠5s</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			count++;</div><div class="line"></div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">"：执行完毕"</span> + count);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们在浏览器多次请求这个servlet，那么我们可以看到输出的每一个开始执行的count的值都是0，但是我们后面都count++了，从此可以看出线程不安全，那么我们添加一个同步代码块来确保线程安全</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		<span class="comment">//同步代码块</span></div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">"：开始执行"</span> + count);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">5000</span>);   <span class="comment">//线程睡眠5s</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			count++;</div><div class="line"></div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">"：执行完毕"</span> + count);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSP扩展"><a href="#JSP扩展" class="headerlink" title="JSP扩展"></a>JSP扩展</h2><h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><ul>
<li>java Server page  java服务器页面</li>
<li>jsp文件部署到web容器时会自动转成Servlet组件，添加到容器中</li>
</ul>
<h3 id="如何写jsp"><a href="#如何写jsp" class="headerlink" title="如何写jsp"></a>如何写jsp</h3><ul>
<li><p>java代码的写法</p>
<ul>
<li><code>&lt;% %&gt;</code> 写java代码，任意java代码都行，转化成Servlet的时候直接是写在service方法体中</li>
<li><code>&lt;%! %&gt;</code> 声明变量或者方法，转换成Servlet的时候直接作为其成员变量或者成员方法</li>
<li><code>&lt;%= %&gt;</code>   java表达式，返回的是一个值</li>
</ul>
</li>
<li><p>指令</p>
<ul>
<li>高速容器，将jsp转成Servlet的时候所做的一些额外操作</li>
<li><p><code>&lt;%@ page&gt;</code> ： import导包  contentType  pageEncoding</p>
<ul>
<li>session的默认值为true，如果值为false，则在java代码中不能使用session隐式对象</li>
<li>errorPage :指定jsp里面出现异常时显示的页面</li>
<li>isErrorPage : 设置当前页面为错误异常页面，默认为false，设置为true之后页面中才可以使用exception获取异常信息</li>
</ul>
<p>tablib ： 引入标签库</p>
</li>
</ul>
</li>
</ul>
<h2 id="JSP中隐式对象"><a href="#JSP中隐式对象" class="headerlink" title="JSP中隐式对象"></a>JSP中隐式对象</h2><h3 id="什么是隐式对象"><a href="#什么是隐式对象" class="headerlink" title="什么是隐式对象"></a>什么是隐式对象</h3><ul>
<li>在JSP中可以不用创建，可以直接使用的对象</li>
</ul>
<h3 id="为什么可以直接使用"><a href="#为什么可以直接使用" class="headerlink" title="为什么可以直接使用"></a>为什么可以直接使用</h3><ul>
<li>因为将JSP转成Servlet类的时候会自动创建的对象</li>
</ul>
<h3 id="有哪些-（九大隐式对象-面试中常考"><a href="#有哪些-（九大隐式对象-面试中常考" class="headerlink" title="有哪些 （九大隐式对象) 面试中常考"></a>有哪些 （九大隐式对象) 面试中常考</h3><ol>
<li><p><code>application</code> ： 类型为ServletContext，该实例表示jsp所属的web应用本身，可以用于多个组件间共享或传递数据，常用方法有setAttribute(),getAttribute(),removeAttribute()和getInitParameter()</p>
</li>
<li><p><code>session</code> : 类型为HttpSession，用于在同一个会话中共享数据，常用方法有setAttribute(),getAttribute(),removeAttribute()</p>
</li>
<li><p><code>request</code> ：类型HttpServeltRequest，用于在同一个请求中共享数据，常用方法有setAttribute(),getAttribute(),removeAttribute()</p>
</li>
</ol>
<ol>
<li><p><code>pageContext</code> : 用于在同一个jsp中共享数据，常用方法有setAttribute(),getAttribute(),removeAttribute()</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">pageContext.setAttribute("name", "陈加兵");</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;&lt;%=pageContext.getAttribute("name") %&gt;&lt;/h1&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>response</code> : 类型HttpServletResponse,用于处理响应数据和重定向，因为有out，更多使用的是out</p>
</li>
<li><p><code>out</code> ： 类型为JSPWriter，用于输出数据</p>
</li>
<li><p><code>page</code> ： page就是jsp本身，因为jsp最终会转成Servlet，page相当于this</p>
</li>
<li><p><code>exception</code> : 异常对象，用于获取异常信息，只有当page指令里面添加了<code>isErrorPage=true</code>的时候才能使用</p>
</li>
<li><p><code>config</code> ： 类型为ServletConfig，用于获取配置文件中初始化参数</p>
</li>
</ol>
<h2 id="JSP的注释"><a href="#JSP的注释" class="headerlink" title="JSP的注释"></a>JSP的注释</h2><ol>
<li><p><code>&lt;!--注释内容--&gt;</code>  ： 代码会被注释但是代码会被执行</p>
</li>
<li><p><code>&lt;%-- 注释内容 --%&gt;</code> ： 代码会被注释，不会执行</p>
</li>
</ol>
<h2 id="JSP如何执行的"><a href="#JSP如何执行的" class="headerlink" title="JSP如何执行的"></a>JSP如何执行的</h2><ol>
<li><p>将JSP转成Servlet</p>
</li>
<li><p>调用Servlet</p>
</li>
</ol>
<h2 id="JSP标签和EL表达式"><a href="#JSP标签和EL表达式" class="headerlink" title="JSP标签和EL表达式"></a>JSP标签和EL表达式</h2><h3 id="什么是jsp标签"><a href="#什么是jsp标签" class="headerlink" title="什么是jsp标签"></a>什么是jsp标签</h3><ul>
<li>是sun公司提供的一套类似于html标签的内容，用于替换jsp中出现的java代码</li>
<li>因为在jsp中写java代码不利于维护，代码的可读性也很差，以后工作时显示相关的内容很可能交给前端工程师或者美工，所以在jsp中尽量不要出现java代码，所以才产生了jsp标签</li>
</ul>
<h3 id="什么是EL表达式"><a href="#什么是EL表达式" class="headerlink" title="什么是EL表达式"></a>什么是EL表达式</h3><ul>
<li>一套简单的运算规则，用于从域对象中取值，然后给jsp中标签的属性赋值</li>
</ul>
<h3 id="EL表达式的使用"><a href="#EL表达式的使用" class="headerlink" title="EL表达式的使用(${})"></a>EL表达式的使用(<code>${}</code>)</h3><ol>
<li>访问Bean对象中的属性(属性必须有get方法)<ul>
<li><code>${对象名.属性名}</code>,假设一个对象user，访问其中的name属性，我们可以使用 <code>${user.name}</code>，这个相当于调用了<code>user.getName()</code>方法</li>
</ul>
</li>
</ol>
<h3 id="EL表达式执行过程"><a href="#EL表达式执行过程" class="headerlink" title="EL表达式执行过程"></a>EL表达式执行过程</h3><ol>
<li><p><code>${user.name}</code>  会先从pageContext域中查找如果有则用，如果没有会到request域中查找，如果没有再到session域中查找，如果没有再到ServletContext中查找</p>
<ul>
<li><strong>如果找不到直接输出空字符串<code>&quot;&quot;</code>,如果没有获取到对象调用对象的方法不会报空指针异常，仍然输出空字符串</strong></li>
</ul>
</li>
<li><p>指定域获取  <code>${requestScope.user.name}</code> 相当于 <code>request.getAttribute(&quot;user&quot;).getName()</code></p>
<ul>
<li>pageScope</li>
<li>requestScope</li>
<li>sessionScope</li>
<li>applicationScope</li>
</ul>
</li>
<li><p><code>${user[&#39;name&#39;]}</code>  个人不推荐使用</p>
</li>
</ol>
<h3 id="使用EL表达式获取请求参数-使用不多，一般都是在Servlet获取"><a href="#使用EL表达式获取请求参数-使用不多，一般都是在Servlet获取" class="headerlink" title="使用EL表达式获取请求参数(使用不多，一般都是在Servlet获取)"></a>使用EL表达式获取请求参数(使用不多，一般都是在Servlet获取)</h3><ul>
<li><p>直接使用<code>${param.请求参数名}</code>  获取指定的请求参数</p>
<ul>
<li><code>${param.name}</code> 相当于<code>request.getParameter(&quot;name&quot;)</code></li>
</ul>
</li>
<li><p><code>${paramValues.参数名[index]}</code>  获取多个同名参数</p>
<ul>
<li>相当于<code>request.getParameterValues(&quot;参数名&quot;)[index]</code></li>
</ul>
</li>
</ul>
<h3 id="EL表达式的简单运算"><a href="#EL表达式的简单运算" class="headerlink" title="EL表达式的简单运算"></a>EL表达式的简单运算</h3><ul>
<li>运算结果可以直接给标签的属性赋值</li>
</ul>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><ul>
<li>可以直接使用加减乘除 ${1+2},${5/2},${5*3}</li>
<li><strong>注意</strong>： <code>+</code>只能做求和运算，不能字符串拼接</li>
</ul>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul>
<li><code>${true and false}=false</code>,<code>${true and true}=true</code>,<code>${true or false}=true</code></li>
</ul>
<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><ul>
<li>使用 <code>==</code>, <code>!=</code> , <code>&gt;=</code>,<code>&lt;</code>, <code>&gt;</code> , <code>&lt;=</code>  , <code>&amp;&amp;</code> , <code>||</code>  如： <code>${age&lt;30}</code></li>
<li><p>可以直接在EL表达式比较大小，返回的也是false和true，可以用来判断，如下：<br><code>${1&lt;2}=false</code> ,<code>${(10*10)&gt;200}=true</code>,<code>${age&gt;11&amp;&amp;age&lt;20}</code></p>
</li>
<li><p><code>empty</code> 判断是否为空(空字符串或者值为null)</p>
<ul>
<li>判断字符串为null或者为空字符串</li>
<li>判断数组，值为null和不为null但是数组里面没有数据都会返回true</li>
<li>判断对象为null</li>
<li><code>${empty str}</code>  判断字符串是否为空</li>
<li><code>${empty user}</code>   判断对象user是否为空</li>
</ul>
</li>
</ul>
<h3 id="jstl"><a href="#jstl" class="headerlink" title="jstl"></a>jstl</h3><ul>
<li><p>java standard tab lib （java标准标签库）</p>
</li>
<li><p>jstl是Apache开发的一套jsp标签</p>
</li>
</ul>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ol>
<li><p>导入jstljar包,使用maven，在pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过tablib指定引入标签库</p>
<ul>
<li><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> ， uri：是标签库的命名空间，代表标签库的唯一标识，prefix ：别名或前缀</li>
</ul>
</li>
<li><p>几个核心标签</p>
<ul>
<li><p>if标签， <code>&lt;c:if test=&quot;&quot;&gt;</code>  test中填写的是判断条件，使用EL表达式</p>
<ul>
<li>var ： test中的判断结果，如果test中的判断为真，那么此时var的变量值为true</li>
<li>scope ： 将var中的变量存放到指定的域中，便于直接访问<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">	request.setAttribute("age", 22);</div><div class="line">%&gt;</div><div class="line">&lt;c:if test="$&#123;requestScope.age&gt;20 &#125;"&gt;</div><div class="line">	&lt;h1&gt;&lt;c:out value="年龄大于20"&gt;&lt;/c:out&gt;&lt;/h1&gt;</div><div class="line">&lt;/c:if&gt;</div><div class="line"></div><div class="line">&lt;c:if test="$&#123;requestScope.age&gt;10 &#125;" var="result" scope="session"&gt;</div><div class="line">	&lt;h2&gt;此时的判断结果为 : $&#123;sessionScope.result &#125;&lt;/h2&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>choose标签 （相当于switch case）</p>
<ul>
<li>需要和 when，otherwise结合使用<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">User user=new User();</div><div class="line">user.setUsername("libai");</div><div class="line">user.setPassword("admin");</div><div class="line">request.setAttribute("user", user);</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;c:choose&gt;</div><div class="line">	&lt;c:when test="$&#123;user.username=='libai' &amp;&amp; user.password=='admin' &#125;"&gt;</div><div class="line">		&lt;h1&gt;登录成功&lt;/h1&gt;</div><div class="line">	&lt;/c:when&gt;</div><div class="line"></div><div class="line">	&lt;!-- 其他的任何类型的判断，只要不是when中的，都在这里执行，相当于else --&gt;</div><div class="line">	&lt;c:otherwise&gt;</div><div class="line">		&lt;h1&gt;登录失败&lt;/h1&gt;</div><div class="line">	&lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>forEach标签  相当于java中的forEach，由于遍历集合或者数组</p>
<ul>
<li>items : 需要遍历的集合或者数组</li>
<li>var ：遍历的对象的变量名称，遍历时会把当前遍历的对象绑定在PageContext域中，需要获取遍历对象的内容时直接使用EL表达式从域中获取出来</li>
<li>begin ： 开始的索引</li>
<li>end ： 结束的索引</li>
<li>step ： 指定步长，默认的步长为1</li>
<li><p>varStatus : 遍历的状态，如果需要得到遍历对象的下标调用<code>index</code>，如果想要得到遍历对象是集合中的第几个调用<code>count</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;table width="500" border="1"&gt;</div><div class="line">	&lt;tr&gt;</div><div class="line">		&lt;th&gt;用户名&lt;/th&gt;</div><div class="line">		&lt;th&gt;密码&lt;/th&gt;</div><div class="line">		&lt;th&gt;性别&lt;/th&gt;</div><div class="line">		&lt;th&gt;级别&lt;/th&gt;</div><div class="line">		&lt;th&gt;下标&lt;/th&gt;</div><div class="line">		&lt;th&gt;第几个&lt;/th&gt;</div><div class="line">	&lt;/tr&gt;</div><div class="line">	&lt;c:forEach var="user" items="$&#123;requestScope.users &#125;" begin="0"  end="19"  step="1" varStatus="s"&gt;</div><div class="line">		&lt;c:if test="$&#123;s.index%2==0 &#125;"&gt; &lt;tr id="row1"&gt; &lt;/c:if&gt;</div><div class="line">		&lt;c:if test="$&#123;s.index%2!=0 &#125;"&gt; &lt;tr id="row2"&gt; &lt;/c:if&gt;</div><div class="line">			&lt;td&gt;$&#123;user.username &#125;&lt;/td&gt;</div><div class="line">			&lt;td&gt;$&#123;user.password &#125;&lt;/td&gt;</div><div class="line">			&lt;td&gt;$&#123;user.gender &#125;&lt;/td&gt;</div><div class="line">			&lt;td&gt;$&#123;user.level &#125;&lt;/td&gt;</div><div class="line">			&lt;!-- 下标 --&gt;</div><div class="line">			&lt;td&gt;$&#123;s.index &#125;&lt;/td&gt;</div><div class="line">			&lt;!-- 第几个 --&gt;</div><div class="line">			&lt;td&gt;$&#123;s.count &#125;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">	&lt;/c:forEach&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><ul>
<li>简单标签技术</li>
<li>复杂标签技术：支持标签内部写java代码</li>
</ul>
<h3 id="简单标签技术-继承SimpleTagSupport"><a href="#简单标签技术-继承SimpleTagSupport" class="headerlink" title="简单标签技术(继承SimpleTagSupport)"></a>简单标签技术(继承SimpleTagSupport)</h3><ul>
<li><p>创建自定义标签的类(继承SimpleTagSupport)</p>
<ul>
<li>get，set方法必须<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</div><div class="line"><span class="keyword">import</span> javax.servlet.jsp.JspWriter;</div><div class="line"><span class="keyword">import</span> javax.servlet.jsp.PageContext;</div><div class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;   <span class="comment">//标签的属性count</span></div><div class="line">	<span class="keyword">private</span> String msg;  <span class="comment">//属性msg</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</div><div class="line">		PageContext context=(PageContext) <span class="keyword">this</span>.getJspContext();  <span class="comment">//获取PageContext隐式对象</span></div><div class="line">		JspWriter out=context.getOut();   <span class="comment">//获取JSPWriter对象，用于在JSp页面中输出内容</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</div><div class="line">			out.println(msg+<span class="string">"&lt;br/&gt;"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.count = count;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> msg;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.msg = msg;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>定义hello.tld文件(WEB-INF下)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="comment">&lt;!-- 约束不用改写，直接copy --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"</span></div><div class="line">	<span class="attr">version</span>=<span class="string">"2.1"</span>&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 标签库的版本号 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 推荐别名 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">short-name</span>&gt;</span>d<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 随便起，只要保证唯一性即可，这个是唯一标识 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://www.tedu.cn/hello<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">tag</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 标签名 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 标签的类，自定义的类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>cn.servlet.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置成没有标签体 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 定义标签的属性 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">attribute</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 属性的名字 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>msg<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 是否设置成必须的 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 是否运行EL表达式赋值 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">rtexprvalue</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rtexprvalue</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">attribute</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">rtexprvalue</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rtexprvalue</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在jsp中引入这个标签库</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 引入自定义的标签库 --&gt;</div><div class="line">&lt;%@ taglib prefix=<span class="string">"d"</span> uri=<span class="string">"http://www.tedu.cn/hello"</span>%&gt;</div><div class="line"></div><div class="line">&lt;d:hello count=<span class="string">"20"</span> msg=<span class="string">"陈加兵"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;body-content&gt;</code> 其中可以写以下三种内容</p>
<ul>
<li>JSP ： 有标签体而且标签体内可以写java代码(只有复杂标签技术才支持)</li>
<li>empty ：没有标签体</li>
<li>scriptless ： 有标签体，但是标签体内不能写java代码</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet和JSP总结&quot;&gt;&lt;a href=&quot;#Servlet和JSP总结&quot; class=&quot;headerlink&quot; title=&quot;Servlet和JSP总结&quot;&gt;&lt;/a&gt;Servlet和JSP总结&lt;/h1&gt;&lt;h2 id=&quot;B-S和C-S&quot;&gt;&lt;a href=&quot;#B-
    
    </summary>
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate关联查询</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Hibernate%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Hibernate关联查询/</id>
    <published>2018-04-24T03:08:43.000Z</published>
    <updated>2018-04-24T03:09:02.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate关联查询"><a href="#Hibernate关联查询" class="headerlink" title="Hibernate关联查询"></a>Hibernate关联查询</h1><h2 id="关联查询之延迟加载-lazy"><a href="#关联查询之延迟加载-lazy" class="headerlink" title="关联查询之延迟加载(lazy)"></a>关联查询之延迟加载(lazy)</h2><h3 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h3><ul>
<li>前面单独讲过延迟加载就是在根据id查询获取的对象中只是有一个id的属性值，只有当使用其他属性的时候才会发出sql语句查询数据库，<code>session.load(Class&lt;T&gt; cls,id)</code>就是这个原理</li>
</ul>
<h3 id="什么是关联查询的延迟加载"><a href="#什么是关联查询的延迟加载" class="headerlink" title="什么是关联查询的延迟加载"></a>什么是关联查询的延迟加载</h3><ul>
<li>简单的说就是在关联关系中，根据id查询对象的时候仅仅发出sql语句查询的是当前的实体类的表，并没有查询另外一张表的数据，只有当需要使用另外一张表的对象中的属性时才会发出sql语句查询另外一张表</li>
</ul>
<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ul>
<li><p><strong>在一对一的关系中默认使用的不是延迟加载，而是饿汉式的加载方式(EAGER),即是查询一个对象，并且也会随之查询另外一个对象的数据，发出的<code>sql</code>语句是左外连接查询</strong></p>
</li>
<li><p><strong>使用懒加载可以减轻数据库服务器的压力，只有当用到数据的时候才会发出<code>select</code>语句查询</strong></p>
</li>
<li><p>我们可以使用<code>@OneToOne(fetch=FetchType.LAZY)</code>其中的fetch有两个值，一个是<code>FetchType.LAZY</code>(懒加载)，一个是<code>FetchType.EAGER</code>(饿汉式)</p>
</li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul>
<li>使用前面讲过的<code>Student</code>和<code>Teacher</code>类</li>
</ul>
<h5 id="测试默认的情况-饿汉式的加载"><a href="#测试默认的情况-饿汉式的加载" class="headerlink" title="测试默认的情况(饿汉式的加载)"></a>测试默认的情况(饿汉式的加载)</h5><ul>
<li><p>由于是默认的就是饿汉式的查询方式，因此不需要改变实体类</p>
</li>
<li><p>测试方法</p>
<ul>
<li>我们根据id查询husband的数据，这里发出的sql语句是左外连接语句，相当于：<br><code>select * from husband h left join wife w on h.wifeid=w.id where h.id=?</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=1的husband数据，这里将会使用左外连接查询数据，直接联表查询</span></div><div class="line">			Husband husband=session.get(Husband.class, <span class="number">1</span>);</div><div class="line"></div><div class="line">			<span class="comment">//获取Husband中的Wife对象属性</span></div><div class="line">			Wife wife=husband.getWife();</div><div class="line"></div><div class="line">			<span class="comment">//输出wife的属性age的值，由于前面已经查询过了，因此这里不再发出sql语句</span></div><div class="line">			System.out.println(wife.getAge());</div><div class="line"></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h5 id="测试懒加载"><a href="#测试懒加载" class="headerlink" title="测试懒加载"></a>测试懒加载</h5><ul>
<li><p>需要在<code>@OneToOne</code>注解中添加<code>fetch</code>属性，我们测试单向外键关联的懒加载(通过Husband类访问Wife的信息)</p>
</li>
<li><p>Husband类，使用懒加载</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>   <span class="comment">//指定实体类</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"husband"</span>)   <span class="comment">//指定对应数据库的表名为husband</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Wife wife;   <span class="comment">//Wife对象</span></div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@OneToOne</span>(fetch=FetchType.LAZY)   <span class="comment">//设置wife的主键为Husband的外键，默认的对应表中的字段为wife_id</span></div><div class="line">	<span class="meta">@JoinColumn</span>(name=<span class="string">"wifeid"</span>) <span class="comment">// 默认外键的名字为wife_id.我们使用这个注解改变外键的名字为wifeid</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Wife <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.wife;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(Wife wife)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.wife = wife;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Husband [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age</div><div class="line">				+ <span class="string">", Wife="</span> + <span class="keyword">this</span>.wife + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=1的husband数据，这里使用懒加载，只会查找husband的表，并不会联表查询</span></div><div class="line">			Husband husband=session.get(Husband.class, <span class="number">1</span>);</div><div class="line"></div><div class="line">			<span class="comment">//获取Husband中的Wife对象属性，此处依然没有查询wife表</span></div><div class="line">			Wife wife=husband.getWife();</div><div class="line"></div><div class="line">			<span class="comment">//输出wife的属性age的值，此处发出sql语句查询wife表，验证了只有当用到的wife属性的时候才会发出查询语句</span></div><div class="line">			System.out.println(wife.getAge());</div><div class="line"></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>默认使用的饿汉式的查询方式，因此在访问数据量过大的时候，我们可以设置懒加载的方式</li>
<li>如果是双向外键关联的关系，我们可以在两个<code>@OneToOne</code>都设置<code>fetch</code>属性的值为懒加载</li>
</ol>
<h3 id="一对多或者多对一"><a href="#一对多或者多对一" class="headerlink" title="一对多或者多对一"></a>一对多或者多对一</h3><ul>
<li><p>如果是<code>@ManyToOne</code>的方式，那么默认的就是<code>EAGER</code>方式进行查找。当我们使用get语句查找Many的对象的时候，那么我们会看到发出的select语句其实也在查找作为其属性的One的那一方的信息，但是如果我们设置LAZY,那么使用get语句查找Many的时候将不会直接查找One的一方，而是在用到One的信息的时候才会发出select语句查找One的一方。可以提高性能，使用如下：<code>@ManyToOne(fetch=FetchType.LAZY)</code></p>
</li>
<li><p>使用<code>@OneToMany</code>默认的<code>fetch</code>是<code>LAZY</code>，即是当查询One的一方的时候只是发出了查找One的一方的select语句。只有当调用其中的Many一方的对象的属性的时候才会发出select语句查询。</p>
</li>
</ul>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ul>
<li>多对多的关联查询默认使用的<code>懒加载(LAZY)</code></li>
<li>如果想要设置饿汉式加载，可以使用<code>@ManyToMany(fetch=FetchType.EAGER)</code>，这里就不在演示了</li>
<li>如果在双向外键关联中都要饿汉式加载，那么可以在两个<code>@ManyToMany</code>注解中设置属性</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate关联查询&quot;&gt;&lt;a href=&quot;#Hibernate关联查询&quot; class=&quot;headerlink&quot; title=&quot;Hibernate关联查询&quot;&gt;&lt;/a&gt;Hibernate关联查询&lt;/h1&gt;&lt;h2 id=&quot;关联查询之延迟加载-lazy&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate关联关系</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Hibernate%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Hibernate关联关系/</id>
    <published>2018-04-24T03:05:56.000Z</published>
    <updated>2018-04-24T03:06:26.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate关联关系"><a href="#Hibernate关联关系" class="headerlink" title="Hibernate关联关系"></a>Hibernate关联关系</h1><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul>
<li>在中国一个丈夫只能有一个妻子，那么丈夫和妻子的关系就是一对一的关系</li>
</ul>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li><p>创建丈夫和妻子的实体类</p>
</li>
<li><p>丈夫的实体类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"husband"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Husband [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>妻子的实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"wife"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wife</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Husband [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">个</div></pre></td></tr></table></figure>
<h3 id="单向外键关联"><a href="#单向外键关联" class="headerlink" title="单向外键关联"></a>单向外键关联</h3><ul>
<li><p>单向外键关联简单的说就是只能通过一张表访问到另外一张表的数据，不能也从另外一张表访问到这张表的数据。</p>
</li>
<li><p>比如：我们可以通过丈夫的信息访问到妻子的信息，那么在丈夫的表中就必须有妻子的外键。同样的，我们也可以通过妻子的信息访问到丈夫的信息，那么在妻子的表中必须有丈夫的外键。</p>
</li>
<li><p>简单的说就是只能单向访问，要么是通过妻子访问丈夫，要么是通过丈夫访问妻子</p>
</li>
</ul>
<h4 id="通过丈夫访问妻子"><a href="#通过丈夫访问妻子" class="headerlink" title="通过丈夫访问妻子"></a>通过丈夫访问妻子</h4><ul>
<li><p>根据上面的需求，那么此时的<strong>妻子的主键将作为丈夫的外键</strong>，这样才可以通过丈夫访问到妻子的信息，其实的sql语句是这样的，如下：<code>select * from husband h join wife w on h.wife_id=w.id;</code></p>
</li>
<li><p>妻子的主键作为丈夫的外键，那么这个是表中的关系，在实体类中的关系就是妻子的对象作为丈夫的实体类的属性，这样丈夫才可以访问到妻子的信息。</p>
</li>
<li><p>完整的Husband实体类的代码</p>
<ul>
<li><strong>如果使用自动生成表的话，那么默认生成的外键名称为 <code>类名小写_id</code>，但是我们可以使用<code>@JoinColumn(name=&quot;&quot;)</code>改变外键的名称</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.JoinColumn;</div><div class="line"><span class="keyword">import</span> javax.persistence.OneToOne;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="meta">@Entity</span>   <span class="comment">//指定实体类</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"husband"</span>)   <span class="comment">//指定对应数据库的表名为husband</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Wife Wife;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@OneToOne</span>   <span class="comment">//设置wife的主键为Husband的外键，默认的对应表中的字段为wife_id</span></div><div class="line">	<span class="meta">@JoinColumn</span>(name=<span class="string">"wifeid"</span>) <span class="comment">// 默认外键的名字为wife_id.我们使用这个注解改变外键的名字为wifeid</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Wife <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Wife;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(Wife wife)</span> </span>&#123;</div><div class="line">		Wife = wife;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Husband [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>实体类Wife的代码不用改变</p>
</li>
<li><p>在核心配置文件<code>hibernate.cfg.xml</code>添加实体类的映射即可</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.tedu.bean.Husband"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.tedu.bean.Wife"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>启动服务器我们将会看到Hibernate已经为我们创建了两张表husband和wife，其中wife的主键设置为husband的外键了(wifeid)</strong></p>
</li>
<li><p>测试方法</p>
<ul>
<li><strong>我们知道妻子是作为丈夫的外键，因此这里需要先添加指定的wife数据，才可以添加对应的husband数据，所以下面的测试方法先保存了wife对象。但是在后面讲到级联操作，那么就可以直接保存husband对象便可以一起保存了wife对象数据到数据库中</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.Transaction;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> cn.tedu.bean.Husband;</div><div class="line"><span class="keyword">import</span> cn.tedu.bean.Teacher;</div><div class="line"><span class="keyword">import</span> cn.tedu.bean.Wife;</div><div class="line"><span class="keyword">import</span> cn.tedu.utils.HibernateUntil;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOneToOne</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加数据到husband中</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			<span class="comment">//创建wife对象，并且设置属性值，由于主键是自增长的，因此这里不需要自己设置</span></div><div class="line">			Wife wife=<span class="keyword">new</span> Wife();</div><div class="line">			wife.setAge(<span class="number">22</span>);</div><div class="line">			wife.setName(<span class="string">"Marry"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//新建husband对象</span></div><div class="line">			Husband husband=<span class="keyword">new</span> Husband();</div><div class="line">			husband.setAge(<span class="number">22</span>);</div><div class="line">			husband.setName(<span class="string">"陈加兵"</span>);</div><div class="line">			<span class="comment">//将Wife的对象添加到Husband中，如果这里设置了级联操作，那么只需要保存husband对象即可完成wife的数据保存</span></div><div class="line">			husband.setWife(wife);</div><div class="line">			<span class="comment">//由于没有设置级联操作，因此这里需要先保存wife对象，否则将不能在数据库中添加成功</span></div><div class="line">			session.save(wife);</div><div class="line">			<span class="comment">//保存丈夫的信息</span></div><div class="line">			session.save(husband);</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查询丈夫和对应妻子的信息</div><div class="line">	 * 根据id查询，只要查询到丈夫的对象，那么妻子的信息就会保存在Husband的属性Wife对象中，因此可以通过访问其中的wife属性来获取对应妻子的信息</div><div class="line">	 * 原理：使用session.get(class&lt;T&gt; cls,id)，其实发出的sql语句是外连接语句：</div><div class="line">	 * 		select * from husband h left join wife w on h.wifeid=w.id where h.id=?</div><div class="line">	 * 		如果能够查找到对应的妻子信息就将其添加到Husband中的wife属性中，如果没有查找到那么设置wife属性为null即可，这个就是外连接</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestGet</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=1的husband信息</span></div><div class="line">			Husband husband=session.get(Husband.class, <span class="number">1</span>);</div><div class="line">			<span class="comment">//获取对应的妻子对象</span></div><div class="line">			Wife wife=husband.getWife();</div><div class="line">			<span class="comment">//输出</span></div><div class="line">			System.out.println(husband);</div><div class="line">			System.out.println(wife);</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试修改操作： 这里我们修改id=1的Husband对应的妻子的信息为id=2,当然前提是id=2的wife信息要存在，否则将不会成功</div><div class="line">	 * 想要修改妻子的数据，直接修改Husband中的wife属性即可</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=1的husband信息</span></div><div class="line">			Husband husband=session.get(Husband.class, <span class="number">1</span>);</div><div class="line">			<span class="comment">//查询wife的id=2的对象</span></div><div class="line">			Wife wife=session.get(Wife.class, <span class="number">2</span>);</div><div class="line">			<span class="comment">//如果这个对象查询到</span></div><div class="line">			<span class="keyword">if</span> (wife!=<span class="keyword">null</span>) &#123;</div><div class="line">				husband.setWife(wife);  <span class="comment">//修改Husband对象中的wife属性值即可</span></div><div class="line">			&#125;</div><div class="line">			session.update(husband);   <span class="comment">//执行更新操作</span></div><div class="line">			<span class="comment">//获取对应的妻子对象</span></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试删除wife表中的数据</div><div class="line">	 * 原理： 如果设置了外键关联，那么我们想要删除wife的数据，必须先要删除其中与之外键关联的丈夫的信息，或者设置Husband表中的外键为其他的wife数据</div><div class="line">	 * 两种解决办法：</div><div class="line">	 * 			1. 先删除对应的丈夫的数据</div><div class="line">	 * 			2. 直接将丈夫对应的表的wifeId设置为其他或者为空即可</div><div class="line">	 *</div><div class="line">	 * 下面我们使用的是设置丈夫对应的wifeId为空，那么就可以删除其对应的妻子的数据</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestDelete</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			<span class="comment">//查询到id=2的wife数据</span></div><div class="line">			Wife wife=session.get(Wife.class,<span class="number">2</span>);</div><div class="line">			<span class="comment">//查询其对应的丈夫，这里还没有讲到其他的查询条件，所以我们默认id=2就是wife的id=2的对应的丈夫</span></div><div class="line">			Husband husband=session.get(Husband.class, <span class="number">2</span>);</div><div class="line">			<span class="comment">//将wife设置null，表示将wifeId外键设置空，因此就断了外键关联</span></div><div class="line">			husband.setWife(<span class="keyword">null</span>);</div><div class="line">			<span class="comment">//删除wife</span></div><div class="line">			session.delete(wife);</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="通过妻子访问丈夫"><a href="#通过妻子访问丈夫" class="headerlink" title="通过妻子访问丈夫"></a>通过妻子访问丈夫</h4><ul>
<li><p>那么根据需求，此时就是丈夫的主键作为妻子的外键，那么只需要在WIfe的类中添加一个Husband对象属性即可</p>
</li>
<li><p><code>Wife</code>类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.JoinColumn;</div><div class="line"><span class="keyword">import</span> javax.persistence.OneToOne;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"wife"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wife</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Husband husband;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@OneToOne</span>   <span class="comment">//设置丈夫的主键为妻子外键</span></div><div class="line">	<span class="meta">@JoinColumn</span>(name=<span class="string">"husbandId"</span>) <span class="comment">// 外键名称为husbandId</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Husband <span class="title">getHusband</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> husband;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHusband</span><span class="params">(Husband husband)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.husband = husband;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Husband [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Husband的类不用改变，还是如第一个的样子</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>单向连接就是只能通过一个对象访问另一个对象的属性，只需要在一个实体类中添加另外一个类的对象为成员变量即可，并且在该对象的get方法上添加<code>OneToOne</code>注解即可，就表示这个对象的主键会作为该实体类的外键</li>
</ul>
<h3 id="双向外键关联-OneToOne-mappedBy-””"><a href="#双向外键关联-OneToOne-mappedBy-””" class="headerlink" title="双向外键关联(@OneToOne(mappedBy=””)"></a>双向外键关联(@OneToOne(mappedBy=””)</h3><ul>
<li>所谓的双向的外键关联，就是两个实体类可以互相访问对方的属性，那么此时就需要在两个实体类中都要添加对方的对象为成员变量</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>在两个实体类中都添加对方的对象作为自己的成员变量，那么我们此时就需要在两个实体类中都要使用<code>OneToOne</code>注解，但是我们使用了OneToOne就会在两张表中都会将对方的主键作为自己的外键，显然是没有必要的，冗余。</li>
</ul>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul>
<li><p>我们在不想作为外键的属性的get方法上添加<code>mappedBy</code>,或者在想要成为对方的外键的类中的对方的对象的get方法中添加即可。</p>
</li>
<li><p><strong>但是我们需要注意的是： <code>mappedBy=”“</code>，其中的值一定要和该类对象对方类中属性的字段相同</strong></p>
</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li><p>我们让Wife作为Husband的外键，所以<code>mappedBy</code>添加到Wife类中的Husband对象的get方法头上即可</p>
</li>
<li><p>Husband实体类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.JoinColumn;</div><div class="line"><span class="keyword">import</span> javax.persistence.OneToOne;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="meta">@Entity</span>   <span class="comment">//指定实体类</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"husband"</span>)   <span class="comment">//指定对应数据库的表名为husband</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Wife Wife;   <span class="comment">//Wife对象</span></div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@OneToOne</span>   <span class="comment">//设置wife的主键为Husband的外键，默认的对应表中的字段为wife_id</span></div><div class="line">	<span class="meta">@JoinColumn</span>(name=<span class="string">"wifeid"</span>) <span class="comment">// 默认外键的名字为wife_id.我们使用这个注解改变外键的名字为wifeid</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Wife <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Wife;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(Wife wife)</span> </span>&#123;</div><div class="line">		Wife = wife;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Husband [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age</div><div class="line">				+ <span class="string">", Wife="</span> + Wife + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Wife类(添加@oneToOne(mappedBy=”wife”))<ul>
<li><strong>将维护权交给了wife，表示wife作为husband的外键</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.JoinColumn;</div><div class="line"><span class="keyword">import</span> javax.persistence.OneToOne;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"wife"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wife</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Husband husband;   <span class="comment">//Husband对象</span></div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * mappedBy="对方类中的该类的属性名字"，注意这里的名字和一定要和对方类中的成员变量的字段一样</div><div class="line">	 * 			表示将维护权交给对方类中的当前类的对象，就是表示当前类的主键将会作为外键</div><div class="line">	 */</div><div class="line">	<span class="meta">@OneToOne</span>(mappedBy=<span class="string">"wife"</span>)  <span class="comment">//设置关联，并且将维护权交给了对方类中的属性wife，因此这里的外键就是wifeId</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Husband <span class="title">getHusband</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> husband;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHusband</span><span class="params">(Husband husband)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.husband = husband;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Wife [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age</div><div class="line">				+ <span class="string">", husband="</span> + husband + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.JoinColumn;</div><div class="line"><span class="keyword">import</span> javax.persistence.OneToOne;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"wife"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wife</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Husband husband;   <span class="comment">//Husband对象</span></div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>   <span class="comment">//主键生成策略，自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * mappedBy="对方类中的该类的属性名字"，注意这里的名字和一定要和对方类中的成员变量的字段一样</div><div class="line">	 * 			表示将维护权交给对方类中的当前类的对象，就是表示当前类的主键将会作为外键</div><div class="line">	 */</div><div class="line">	<span class="meta">@OneToOne</span>(mappedBy=<span class="string">"wife"</span>)  <span class="comment">//设置关联，并且将维护权交给了对方类中的属性wife，因此这里的外键就是wifeId</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Husband <span class="title">getHusband</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> husband;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHusband</span><span class="params">(Husband husband)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.husband = husband;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">20</span>)   <span class="comment">//设置长度为20</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Wife [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age</div><div class="line">				+ <span class="string">", husband="</span> + husband + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul>
<li><p>我们只要查询到Husband对象就可以访问到其中的Wife对象的数据，同样的只要查询到Wife对象就可以访问到其中的Husband对象的数据</p>
</li>
<li><p>这里就不再测试了</p>
</li>
</ul>
<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><ul>
<li>一个宿舍可以被多个学生住，这个就是一对多的关系,其中宿舍是One的一方，学生是Many的一方</li>
</ul>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><ul>
<li>Student实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"student"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>宿舍的实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个宿舍可以被多个学生住</div><div class="line"> * 一个学生只能住在一个宿舍</div><div class="line"> * 学生是One</div><div class="line"> * 宿舍是Many</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dormitory</span> </span>&#123;</div><div class="line">	 <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	 <span class="keyword">private</span> Long number;   <span class="comment">//宿舍编号</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> number;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(Long number)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.number = number;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="前提须知"><a href="#前提须知" class="headerlink" title="前提须知"></a>前提须知</h3><ul>
<li>我们知道无论是一对多还是多对一的关系，在创建表的关联关系的时候，外键总是在多的一方，即是一的一方的主键作为多的一方的外键</li>
</ul>
<h3 id="单向外键关联-1"><a href="#单向外键关联-1" class="headerlink" title="单向外键关联"></a>单向外键关联</h3><ul>
<li>前面已经说过，单向外键关联是只能单向访问，只能一张表访问另外一张表，比如通过One的一方可以访问到Many的一方，也可以通过Many的一方访问到One的一方</li>
</ul>
<h4 id="从One的一方访问Many的一方-OneToMany"><a href="#从One的一方访问Many的一方-OneToMany" class="headerlink" title="从One的一方访问Many的一方(@OneToMany)"></a>从One的一方访问Many的一方(@OneToMany)</h4><ul>
<li>即是通过学生查询到其所住的宿舍</li>
<li><p>想要通过学生查询到所住的宿舍，那么必须在Student的实体类中必须有Dormitory的对象作为其成员变量</p>
</li>
<li><p>Dormitory类(One的一方，使用@OneToMany)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"dormitory"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dormitory</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// 主键</span></div><div class="line">	<span class="keyword">private</span> Long number; <span class="comment">// 宿舍编号</span></div><div class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students;</div><div class="line"></div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@OneToMany</span>  <span class="comment">//Dormitory是One的一方，Student是Many的一方，因此这里使用OneToMany</span></div><div class="line">	<span class="meta">@JoinColumn</span>(name=<span class="string">"dormitory_id"</span>)  <span class="comment">//必须指定外键的名称，否则将会自动创建第三张表来管理关联关系</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> students;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.students = students;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> number;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(Long number)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.number = number;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>Student类(Many的一方，不变)</p>
</li>
<li><p>测试</p>
<ul>
<li><p>添加： 在为Many的一方(Student)添加宿舍信息的时候，这个宿舍的信息一定是在数据库中的，因为添加外键相当于必须这个外键存在才能添加</p>
</li>
<li><p>删除： 在删除的One的一方的时候，一定要确保Many的一方没有与其外键关联，否则将会删除失败，除非设置了级联删除，那么会连同外键关联的数据一起删除（以后再讲）</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestGet</span><span class="params">()</span> </span>&#123;</div><div class="line">	Session session = <span class="keyword">null</span>;</div><div class="line">	Transaction transaction = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 创建session</span></div><div class="line">		session = HibernateUntil.getSession();</div><div class="line">		<span class="comment">// 开始事务</span></div><div class="line">		transaction = session.beginTransaction();</div><div class="line">		Dormitory dormitory=<span class="keyword">new</span> Dormitory();</div><div class="line">		dormitory.setNumber(<span class="number">10011L</span>);</div><div class="line">		<span class="comment">//创建一个Set集合存储Student对象</span></div><div class="line">		Set&lt;Student&gt; students=<span class="keyword">new</span> HashSet&lt;Student&gt;();</div><div class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">			 Student student=<span class="keyword">new</span> Student();</div><div class="line">			 student.setAge(<span class="number">10</span>*i);</div><div class="line">			 student.setName(<span class="string">"name_"</span>+i);</div><div class="line">			 session.save(student);</div><div class="line">			 students.add(student); <span class="comment">// 添加到集合中</span></div><div class="line">		 &#125;</div><div class="line">		 dormitory.setStudents(students);  <span class="comment">//将学生信息添加到宿舍对象中</span></div><div class="line">		 session.save(dormitory);  <span class="comment">//保存宿舍信息</span></div><div class="line">		<span class="comment">// 提交事务</span></div><div class="line">		transaction.commit();</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">		transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</div><div class="line">			session.close();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="从Many的一方查询One的一方-ManyToOne"><a href="#从Many的一方查询One的一方-ManyToOne" class="headerlink" title="从Many的一方查询One的一方(@ManyToOne)"></a>从Many的一方查询One的一方(@ManyToOne)</h4><ul>
<li><p>即是通过学生对象查询到宿舍信息，因此需要在学生的实体类中添加宿舍的实体类对象</p>
</li>
<li><p>Student实体类（使用＠ManyToOne)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"student"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Dormitory dormitory;   <span class="comment">//添加Dormitory对象，因为是One的一方，因此不用Set集合存储</span></div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@ManyToOne</span>   <span class="comment">//使用@ManyToOne，因为Student是Many的一方</span></div><div class="line">	<span class="meta">@JoinColumn</span>(name=<span class="string">"dormitory_id"</span>)   <span class="comment">//设置外键的字段值</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Dormitory <span class="title">getDormitory</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dormitory;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDormitory</span><span class="params">(Dormitory dormitory)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.dormitory = dormitory;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Dormitory实体类，不用改变，还是和前面的最初的实体类一样</li>
</ul>
<h3 id="双向外键关联"><a href="#双向外键关联" class="headerlink" title="双向外键关联"></a>双向外键关联</h3><ul>
<li>即是通过One的一方可以访问到Many的一方，也可以通过Many的一方访问到One的一方。简单的说就是可以互相访问对方的数据。</li>
<li>要想实现双向外键关联，必须是两个实体类对象互为对方的成员属性</li>
</ul>
<h4 id="问题并解决"><a href="#问题并解决" class="headerlink" title="问题并解决"></a>问题并解决</h4><ul>
<li><p>因为是双向关联，因此这里的要设置双向关联的主导对象（mappedBy），否则将会出现两张表的外键都是对方的主键，这显然是冗余的，因此我们需要设置一个主导的。我们这里应该选择多的一方为主导位置的，因此需要在一的这一方使用mppedBy指定主导对象。因此我们只需要在<code>@OneToMany</code>上加上<code>mappedBy</code>属性即可。</p>
</li>
<li><p>由于无论是一对多还是多对一的关系，外加都是One一方的主键，因此要将维护权交给One的一方，因此只需要在<code>@OneToMany</code>这个注解中添加<code>mappedBy</code>这个属性即可</p>
</li>
<li><p><strong>由于外键是在One的一方添加的，即是外键在student的表中，因此只有在Student的实体类中可以使用<code>@JoinColumn()</code>设置外键的字段名</strong></p>
</li>
</ul>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ul>
<li>Student实体类(Many的一方，因此使用@ManyToOne)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"student"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Dormitory dormitory;   <span class="comment">//添加Dormitory对象，因为是One的一方，因此不用Set集合存储</span></div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@ManyToOne</span>   <span class="comment">//使用@ManyToOne，因为Student是Many的一方</span></div><div class="line">	<span class="meta">@JoinColumn</span>(name=<span class="string">"dormitory_id"</span>)   <span class="comment">//设置外键的字段值,因为外键是在student表中添加的，因此只能在这个地方设置外键的字段名</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Dormitory <span class="title">getDormitory</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dormitory;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDormitory</span><span class="params">(Dormitory dormitory)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.dormitory = dormitory;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Dormitory实体类（One的一方，使用@OneToMany)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"dormitory"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dormitory</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// 主键</span></div><div class="line">	<span class="keyword">private</span> Long number; <span class="comment">// 宿舍编号</span></div><div class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//仍然需要注意的是mappedBy的值必须是对方类中该类对象的一样的字段</span></div><div class="line">	<span class="meta">@OneToMany</span>(mappedBy=<span class="string">"dormitory"</span>)  <span class="comment">//添加注解，由于是双向外键关联，必须添加mappedBy,由于外键就是One的一方的主键，因此这里的只需要在OneToMany中添加即可</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> students;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.students = students;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> number;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(Long number)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.number = number;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>无论是一对多还是多对一的关系，在建立表的时候总是在Many的一方添加One的一方的外键</p>
</li>
<li><p>在单向外键关联中，如果通过One的一方获取Many的一方数据，那么需要在One的实体类中添加Many的实体类的对象为其成员变量，同时在这个成员变量的get方法上方使用<code>@OneToMany</code>这个注解。如果想要通过Many的一方获取One的数据，那么需要在Many的实体类中添加One的实体类的对象为其成员变量，同时在这个成员变量的get方法上使用<code>@ManyToOne</code>这个注解</p>
</li>
<li><p>在双向外键关联，那么我们在使用<code>@JoinColumn</code>改变外键的字段名，那么必须在One的实体类中使用，因为外键是设置在One的一方的表中</p>
</li>
<li><p>双向外键关联必须使用<code>@OneToMany(mappedBy=)</code>设置主导地位的表，如果不设置这个mappedBy，那么就会出现双向外键，出现了冗余</p>
</li>
</ul>
<h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><ul>
<li>一对多和多对一是相对的，因此这里的使用和一对多是一样的，不再反复的讲述了</li>
</ul>
<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><ul>
<li><p>一个老师可以教多个学生，一个学生可以被多个老师教，那么老师和学生的关系就是多对多的关系</p>
<h3 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h3></li>
<li><p>老师的实体类(Teacher)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"teacher"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>学生的实体类(Student)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"student"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="前提须知-1"><a href="#前提须知-1" class="headerlink" title="前提须知"></a>前提须知</h3><ul>
<li>我们在处理多对多的关系，在建立表的时候使用的是第三张表来维护外键，如下：<br><img src="http://ono60m7tl.bkt.clouddn.com/manytomany.png" alt="第三张表"></li>
</ul>
<h3 id="单向外键关联-ManyToMany"><a href="#单向外键关联-ManyToMany" class="headerlink" title="单向外键关联(@ManyToMany)"></a>单向外键关联(@ManyToMany)</h3><h4 id="通过学生访问老师的信息"><a href="#通过学生访问老师的信息" class="headerlink" title="通过学生访问老师的信息"></a>通过学生访问老师的信息</h4><ul>
<li><p>根据需求我们必须在Student的类中将Teacher类的对象声明为成员变量，多对多的关系，因此使用的是Set集合来存储</p>
</li>
<li><p>Student的实体类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"student"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Set&lt;Teacher&gt; teachers;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@ManyToMany</span></div><div class="line">	<span class="comment">//指定第三张表的名称，如果默认的是student_teacher,joinColumns指定的是当前的实体类的外键名称，inverseJoinColumns指定的是另外一个实体类的外键名称</span></div><div class="line">	<span class="comment">//如果不指定外键的名称，那么默认的是student_id,和teacher_id</span></div><div class="line">	<span class="meta">@JoinTable</span>(name=<span class="string">"stu_tea"</span>,joinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"st_id"</span>),inverseJoinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"t_id"</span>))</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Teacher&gt; <span class="title">getTeachers</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> teachers;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeachers</span><span class="params">(Set&lt;Teacher&gt; teachers)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.teachers = teachers;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JoinTable"><a href="#JoinTable" class="headerlink" title="@JoinTable"></a>@JoinTable</h3><ul>
<li>在多对多的关系中，默认创建第三张表的名称为 ： <code>表名_表名</code>，但是我们可以使用<code>@JoinTable</code>这个注解来修改第三张表的名称</li>
<li>其中的<code>name</code>属性可以修改</li>
</ul>
<h3 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="@ManyToMany"></a>@ManyToMany</h3><ul>
<li>在多对多的关系中使用，在实体类对象的get方法上面使用</li>
<li><code>joinColumns</code>指定的是当前的实体类对应的外键名称，其中的值使用的<code>@JoinColumn</code>注解</li>
<li><code>inverseJoinColumns</code>指定的是另外一个实体类的外键名称，其中的值使用的是<code>@JoinColumn</code>注解</li>
</ul>
<h4 id="通过老师访问学生的信息"><a href="#通过老师访问学生的信息" class="headerlink" title="通过老师访问学生的信息"></a>通过老师访问学生的信息</h4><ul>
<li><p>那么需要在Teacher类中添加一个成员变量的类型为Student对象，并且在该成员变量的<code>get</code>方法上使用<code>@ManyToMany</code></p>
</li>
<li><p>这个就不在演示了，和上面很相似</p>
</li>
</ul>
<h3 id="双向外键关联-ManyToMany-mappedBy-””"><a href="#双向外键关联-ManyToMany-mappedBy-””" class="headerlink" title="双向外键关联(@ManyToMany(mappedBy=””))"></a>双向外键关联(@ManyToMany(mappedBy=””))</h3><ul>
<li><p>如果老师想要知道自己教的学生的信息，学生也想知道老师的信息，那么就需要使用多对多双向关联，在两个实体类中都要定义对方的实体类的对象，因此这样就可以访问到对方的信息了。</p>
</li>
<li><p>这个和前面说的一样，当使用双向外键联系的时候，一定要设置主导的实体类(<code>mappedBy</code>)否则的话就会出现冗余，因此一定要指定主导关系。</p>
</li>
<li><p>下面我们的范例是指定学生的主导位置，因此要在老师的实体类中设置<code>mappedBy</code>属性</p>
</li>
<li><p>Student类</p>
<ul>
<li>由于指定Student为主导位置，因此设置外键的名称和第三张表名字只能在Student的类中设置</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"student"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Set&lt;Teacher&gt; teachers;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@ManyToMany</span></div><div class="line">	<span class="comment">//指定第三张表的名称，如果默认的是student_teacher,joinColumns指定的是当前的实体类的外键名称，inverseJoinColumns指定的是另外一个实体类的外键名称</span></div><div class="line">	<span class="comment">//如果不指定外键的名称，那么默认的是student_id,和teacher_id</span></div><div class="line">	<span class="meta">@JoinTable</span>(name=<span class="string">"stu_tea"</span>,joinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"st_id"</span>),inverseJoinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"t_id"</span>))</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Teacher&gt; <span class="title">getTeachers</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> teachers;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeachers</span><span class="params">(Set&lt;Teacher&gt; teachers)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.teachers = teachers;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Teacher类（指定学生的主导位置，因此这里不能设置外键的名称和外键的字段名）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"teacher"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"teachers"</span>) <span class="comment">//将维护权交给teacher表，这里的teachers是Student类中的字段名，一定要一模一样的</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> students;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.students = students;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(length=<span class="number">10</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完整核心配置文件"><a href="#完整核心配置文件" class="headerlink" title="完整核心配置文件"></a>完整核心配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 必须要配置的5大参数，4大参数，一个方言 其中的四大参数是连接JDBC必须的参数 这里的方言也是必须的 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hirbernate<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- mysql的方言 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 可选的配置文件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 输出所有的sql语句到控制台 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 在控制台上打印出漂亮的sql语句 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置如果这个表还没有创建，那么就会自动创建，如果已经创建了，那么会自动更新 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--  配置不生成Hibernate_sequence --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.id.new_generator_mappings"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 直接指定这个Teacher实体类的全类名即可，即是完成了映射 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.tedu.bean.Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.tedu.bean.Teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ol>
<li>在双向外键关联的关系中，一定要使用<code>mappedBy</code>指定外键的维护权，否则将会出现数据冗余</li>
<li>在一对以和一对多，多对一的关系中，我们可以使用<code>@JoinColumn</code>这个注解来设置外键的字段名，但是在多对多的关系中，因为需要第三张表来维护，因此要使用<code>@JoinTable</code>这个注解来设置外键和第三张表的一些属性</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate关联关系&quot;&gt;&lt;a href=&quot;#Hibernate关联关系&quot; class=&quot;headerlink&quot; title=&quot;Hibernate关联关系&quot;&gt;&lt;/a&gt;Hibernate关联关系&lt;/h1&gt;&lt;h2 id=&quot;一对一&quot;&gt;&lt;a href=&quot;#一对一&quot; c
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate之一级缓存</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%B9%8B%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate之一级缓存/</id>
    <published>2018-04-21T20:23:26.000Z</published>
    <updated>2018-04-21T20:23:59.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate之一级缓存"><a href="#Hibernate之一级缓存" class="headerlink" title="Hibernate之一级缓存"></a>Hibernate之一级缓存</h1><h2 id="什么是一级缓存"><a href="#什么是一级缓存" class="headerlink" title="什么是一级缓存"></a>什么是一级缓存</h2><ul>
<li>Hibernate创建每个Session对象时，都会给Session分配一块独立的缓存区，用于存放Session查询出来的对象，这个分配给Session的缓存区称之为一级缓存，也叫Session级缓存</li>
</ul>
<h2 id="为什么使用一级缓存"><a href="#为什么使用一级缓存" class="headerlink" title="为什么使用一级缓存"></a>为什么使用一级缓存</h2><ul>
<li>Session读取数据时，会优先向缓存区取数据，如果存在数据直接返回，不存在才会区数据库查询，从而降低了数据库的访问次数。提升了代码的运行效率</li>
</ul>
<h2 id="如何使用一级缓存"><a href="#如何使用一级缓存" class="headerlink" title="如何使用一级缓存"></a>如何使用一级缓存</h2><ul>
<li><p>一级缓存默认是开启的，在使用Hibernate的API进行查询时会自动使用</p>
</li>
<li><p>验证</p>
<ul>
<li>从控制台可以看到只发出一条sql的查询语句</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=2 的数据，这个是session的第一次查询，那么会发出sql语句</span></div><div class="line">			Student student1=session.get(Student.class, <span class="number">2</span>);</div><div class="line"></div><div class="line">			<span class="comment">//再次使用同一个Session查询id=2的对象，由于前面已经查询过一次，因此这里不需要发出sql语句</span></div><div class="line">			Student student2=session.get(Student.class,<span class="number">2</span>);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="一级缓存的规则"><a href="#一级缓存的规则" class="headerlink" title="一级缓存的规则"></a>一级缓存的规则</h2><ul>
<li>一级缓存是Session独享的，每个Session不能访问其他的Session的缓存区</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session1 = <span class="keyword">null</span>;</div><div class="line">		Session session2 = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session1=HibernateUntil.getSession(); <span class="comment">//获取session1</span></div><div class="line">			session2=HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session1.beginTransaction();</div><div class="line">			transaction = session2.beginTransaction();</div><div class="line">			<span class="comment">//使用session1查询id=2的对象，这个对象会在session1的缓存区缓存</span></div><div class="line">			Student s1=session1.get(Student.class, <span class="number">2</span>);</div><div class="line">			<span class="comment">//使用Session2查询id=2的对象，可以看到这还是会发出sql语句，因为在session2的缓存区没有这个对象</span></div><div class="line">			Student s2=session2.get(Student.class, <span class="number">2</span>);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session1!=<span class="keyword">null</span>) &#123;</div><div class="line">				session1.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Session的save，update，delete操作会出发缓存更新<ul>
<li>此时的缓存区将会将之前的查询到的对象全部清除</li>
</ul>
</li>
</ul>
<h2 id="一级缓存管理"><a href="#一级缓存管理" class="headerlink" title="一级缓存管理"></a>一级缓存管理</h2><ul>
<li><code>session.evit(obj)</code>  将obj对象从一级缓存中清除</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=2 的数据，这个是session的第一次查询，那么会发出sql语句</span></div><div class="line">			Student student1=session.get(Student.class, <span class="number">2</span>);</div><div class="line"></div><div class="line">			<span class="comment">//清楚一级缓存中的student1对象</span></div><div class="line">			session.evict(student1);</div><div class="line"></div><div class="line">			<span class="comment">//再次使用同一个Session查询id=2的对象，由于前面已经清除了这个对象，因此这里还是会发出sql语句</span></div><div class="line">			Student student2=session.get(Student.class,<span class="number">2</span>);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>session.clear()</code>  清除一级缓存中的所有对象</li>
</ul>
<ul>
<li><code>session.close()</code>  关闭session，释放缓存空间</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>一级缓存是默认开启的</li>
<li>一级缓存的使用可以减少服务器和数据库之间的交互，减轻服务器的压力</li>
<li>提高查询的效率，不必查询发出重复的sql语句</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate之一级缓存&quot;&gt;&lt;a href=&quot;#Hibernate之一级缓存&quot; class=&quot;headerlink&quot; title=&quot;Hibernate之一级缓存&quot;&gt;&lt;/a&gt;Hibernate之一级缓存&lt;/h1&gt;&lt;h2 id=&quot;什么是一级缓存&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate中的三种状态</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate中的三种状态/</id>
    <published>2018-04-21T20:22:50.000Z</published>
    <updated>2018-04-21T20:23:09.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate中的三种状态"><a href="#Hibernate中的三种状态" class="headerlink" title="Hibernate中的三种状态"></a>Hibernate中的三种状态</h1><ul>
<li>在Hibernate中可以将实体对象看成3种状态，分别是临时态，持久态，游离态</li>
</ul>
<h2 id="临时态-瞬时态"><a href="#临时态-瞬时态" class="headerlink" title="临时态(瞬时态)"></a>临时态(瞬时态)</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li>临时态的对象可以被垃圾回收</li>
<li>临时态的对象未经过持久化，没有和session关联(没有经过session存储和查找)</li>
</ul>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><ul>
<li>新new出来的对象就是临时态</li>
<li>在Hibernate中,可通过 session的save()或saveOrUpdate()方法将临时对象与数据库相关联,并将数据对应的插入数据库中,此时该临时对象转变成持久化对象.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student st=<span class="keyword">new</span> Student();   <span class="comment">//此时的对象是临时态</span></div><div class="line">st.setName(<span class="string">"陈加兵"</span>);</div></pre></td></tr></table></figure>
<h2 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h2><ul>
<li><p>处于该状态的对象在数据库中具有对应的记录,并拥有一个持久化标识.通过<code>session的get()</code>、<code>load()</code>等方法获得的对象都是持久对象。</p>
</li>
<li><p>持久态的对象与session关联</p>
</li>
<li><p>在数据库中有与之关联的数据</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用get方法获取id=2的对象，此时的Student是持久态</span></div><div class="line">Student student=session.get(Student.class, <span class="number">2</span>);</div></pre></td></tr></table></figure>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><code>session.save()</code>方法将一个临时态的对象转换成持久态</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建的Student对象，这个是临时态对象，并没有数据库关联</span></div><div class="line">Student student = <span class="keyword">new</span> Student();</div><div class="line">student.setAge(<span class="number">22</span>);</div><div class="line">student.setName(<span class="string">"陈加兵"</span>);</div><div class="line"><span class="comment">// 保存数据到数据库，此时的student就是一个持久态的对象，与session有了关联，并且数据库中也有了这条数据</span></div><div class="line">session.save(student);</div></pre></td></tr></table></figure>
<ul>
<li>Session的<code>update()</code>方法 将一个游离对象转变为持久对象<ul>
<li>不能调用<code>save()</code>方法，因为游离态对象在数据库中是对应着一条数据的(数据库中有id的值与其对应)，如果此时调用save()方法，那么就会向其中插入一条数据(此时的主键是自增长的)。因此要想一个游离态的对象变成持久态的对象，必须使用<code>update()</code>方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//此时的student为临时态</span></div><div class="line">			Student student=<span class="keyword">new</span> Student();</div><div class="line">			<span class="comment">//设置了id的值，并且这个id=2在数据库中有这么一条数据，因此是游离态</span></div><div class="line">			student.setId(<span class="number">2</span>);</div><div class="line">			<span class="comment">//调用了update()方法，此时变成持久态的对象</span></div><div class="line">			session.update(student);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>只要是这个持久态的对象的数据和数据库中的数据不相同了，不需要主动的调用update()方法，在执行的时候会自动的更新到数据库中。如果比较之后发现对象中的属性是相同的，那么即使调用了update()方法，也不会发出sql的更新语句。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestPersit</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//使用get方法获取id=2的对象，此时的Student是持久态</span></div><div class="line">			Student student=session.get(Student.class, <span class="number">2</span>);</div><div class="line">			<span class="comment">//修改了持久态的对象，这里只要session提交了就会自动更新到数据库中，不需要使用update()方法</span></div><div class="line">			student.setName(<span class="string">"陈加兵"</span>);</div><div class="line">			<span class="comment">//更新Student对象到数据库中，但是student是持久态，因此这里的语句是多余</span></div><div class="line"><span class="comment">//			session.update(student);</span></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Session的lock()方法:   调用lock()方法将对象同Session相关联而不强制更新。</li>
<li>Session的merge()方法:  拷贝指定对象的状态到具有相同对象标识符的持久对象。</li>
<li><p>Session的saveOrUpdate()方法: saveOrUpdate() 方法对于临时对象，执行save()方法，对于游离对象，执行update()方法。</p>
</li>
<li><p>Session的load()和get()方法:  load()方法和get()方法都可以根据对象的标识符加载对象，这两个方法加载的对象都位于Session的缓存中，属于持久对象。</p>
</li>
<li>Session的 delete()方法:      delete()方法用于从数据库中删除与持久化对象对应的记录。如果传入的是一个持久化对象，Session就执行一条 delete语句。如果传入的参数是游离对象，先使分离对象与Session关联，使它变为持久化对象，然后才计划执行一个delete语句。</li>
<li>Session 的evict()方法: evict()方法从Session的缓存中删除一个持久对象。</li>
</ul>
<h2 id="游离态-脱管态"><a href="#游离态-脱管态" class="headerlink" title="游离态(脱管态)"></a>游离态(脱管态)</h2><ul>
<li><p>当与某持久对象关联的session被关闭后,该持久对象转变为游离对象.当游离对象被重新关联到session上 时,又再次转变成持久对象（在Detached其间的改动将被持久化到数据库中）。 游离对象拥有数据库的识别值,但已不在持久化管理范围之内。</p>
</li>
<li><p>对象中有id的值(这个id的值对应数据库中的数据)，但是和session没有关联</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Student student2=<span class="keyword">new</span> Student();</div><div class="line">student.setId(<span class="number">2</span>);  <span class="comment">//设置了id的值，这个id的值在数据库中对应一条记录</span></div><div class="line">student.setName(<span class="string">"陈加兵"</span>);</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/leefengboy/article/details/52723849" target="_blank" rel="external">https://blog.csdn.net/leefengboy/article/details/52723849</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate中的三种状态&quot;&gt;&lt;a href=&quot;#Hibernate中的三种状态&quot; class=&quot;headerlink&quot; title=&quot;Hibernate中的三种状态&quot;&gt;&lt;/a&gt;Hibernate中的三种状态&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Hibernate中可
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate之延迟加载</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%B9%8B%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate之延迟加载/</id>
    <published>2018-04-21T20:22:12.000Z</published>
    <updated>2018-04-21T20:22:33.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hibernate之延迟加载"><a href="#hibernate之延迟加载" class="headerlink" title="hibernate之延迟加载"></a>hibernate之延迟加载</h1><h2 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h2><ul>
<li>在使用某些Hibernate方法查询数据的时候，Hibernate返回的只是一个空对象(除了id外属性都为null)，并没有真正的查询数据库。而是在使用这个对象的时候才会出发查询数据，并将查询到的数据注入到这个空对象中，这种查询时机推迟到对象访问时的机制称之为延迟加载。</li>
</ul>
<ul>
<li>简单的说，使用延迟加载获取的对象，只有在获取其中的除了id之外的属性才会发出sql语句。</li>
</ul>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul>
<li><p>可以提升内存资源的使用率</p>
</li>
<li><p>可以降低对数据库的访问次数</p>
</li>
</ul>
<h2 id="如何使用延迟加载"><a href="#如何使用延迟加载" class="headerlink" title="如何使用延迟加载"></a>如何使用延迟加载</h2><ul>
<li><code>session.load()</code></li>
<li><code>query.iterate()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Testload</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//使用延迟加载load()方法获取对象，这里并没有发出sql查询语句，其中除了一个id属性之外没有其他的属性</span></div><div class="line">			Student student=session.load(Student.class,<span class="number">2</span>);</div><div class="line">			<span class="comment">//查询其中的id属性，这里也没有发出查询语句</span></div><div class="line">			System.out.println(student.getId());</div><div class="line">			<span class="comment">//查询对象中的name属性，这里将会发出查询的sql语句</span></div><div class="line">			System.out.println(student.getName());</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="使用延迟加载需要注意的问题"><a href="#使用延迟加载需要注意的问题" class="headerlink" title="使用延迟加载需要注意的问题"></a>使用延迟加载需要注意的问题</h2><ul>
<li><p>采用延迟加载机制的操作，需要避免session的提前关闭。避免在使用对象之前关闭<code>session</code></p>
</li>
<li><p>因为在使用延迟加载的时候并没有发出sql查询语句，只有当使用其中的除了id属性之外的属性才会发出查询语句，因此这里的session不能提前关闭</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hibernate之延迟加载&quot;&gt;&lt;a href=&quot;#hibernate之延迟加载&quot; class=&quot;headerlink&quot; title=&quot;hibernate之延迟加载&quot;&gt;&lt;/a&gt;hibernate之延迟加载&lt;/h1&gt;&lt;h2 id=&quot;什么是延迟加载&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate注解之基本注解的注解使用</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E6%B3%A8%E8%A7%A3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate注解之基本注解的注解使用/</id>
    <published>2018-04-21T20:21:08.000Z</published>
    <updated>2018-04-24T03:07:56.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate注解之基本注解的注解使用"><a href="#Hibernate注解之基本注解的注解使用" class="headerlink" title="Hibernate注解之基本注解的注解使用"></a>Hibernate注解之基本注解的注解使用</h1><h2 id="使用注解须知"><a href="#使用注解须知" class="headerlink" title="使用注解须知"></a>使用注解须知</h2><ul>
<li>我们在使用注解自动创建表的时候，系统会默认为我们创建一张表<code>Hibernate_sequence</code>，我们可以在Hibernate.cfg.xml文件中添加如下语句解决问题<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  配置不生成Hibernate_sequence --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.id.new_generator_mappings"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="类级别注解"><a href="#类级别注解" class="headerlink" title="类级别注解"></a>类级别注解</h2><ol>
<li><p><code>@Entity</code> : 映射实体类，其中有一个name属性指定当前实体类映射的表的名称</p>
<ul>
<li>name: 可选属性 ，指定对应表的名称，<strong>如果没有指定name属性，那么创建表的名称和类名一样</strong></li>
</ul>
</li>
<li><p><code>@Table</code> : 在实体类的上方使用，和Entity配合使用，指定实体类对应的数据库中的表的信息</p>
<ul>
<li>name ：可选，指定表的名称，默认的是和类名一样，只有在不一致的情况下才会指定表名</li>
<li>catalog ： 可选，表示Catalog名称，默认为 Catalog(“”)</li>
<li>schema ： 可选 , 表示 Schema 名称 , 默认为Schema(“”)</li>
</ul>
</li>
</ol>
<h2 id="属性级别的注解"><a href="#属性级别的注解" class="headerlink" title="属性级别的注解"></a>属性级别的注解</h2><ul>
<li><p><strong>属性级别的注解在getXXX()方法上使用</strong></p>
</li>
<li><p>@Id     映射生成主键</p>
</li>
<li><p>@Version    定义乐观锁</p>
</li>
<li><p>@Column     映射表的列</p>
</li>
<li><p>@Transient     定义暂态属性</p>
</li>
</ul>
<h2 id="主键相关的注解"><a href="#主键相关的注解" class="headerlink" title="主键相关的注解"></a>主键相关的注解</h2><ol>
<li><p><code>@id</code>： 指定该属性为主键</p>
</li>
<li><p><code>@GeneratedValue(strategy=,generator=&quot;&quot;)</code> : 主键生成策略</p>
<ul>
<li><p>Strategy的值</p>
<ul>
<li>GenerationType.AUTO - 根据底层数据库自动选择（默认），若数据库支持自动增长类型，则为自动增长。</li>
<li><p>GenerationType.INDENTITY - 根据数据库的Identity字段生成，支持DB2、MySQL、                                        MS、SQL Server、SyBase与HyperanoicSQL数据库的Identity                                          类型主键。</p>
</li>
<li><p>GenerationType.SEQUENCE - 使用Sequence来决定主键的取值，适合Oracle、DB2等                                      支持Sequence的数据库，一般结合@SequenceGenerator使用。</p>
</li>
<li><p>GenerationType.TABLE  - 使用指定表来决定主键取值，结合@TableGenerator使用。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="与非主键相关的注解"><a href="#与非主键相关的注解" class="headerlink" title="与非主键相关的注解"></a>与非主键相关的注解</h2><ol>
<li>@Version - 可以在实体bean中使用@Version注解,通过这种方式可添加对乐观锁定的支持</li>
</ol>
<ol>
<li><p>@Basic - 用于声明属性的存取策略：</p>
<ul>
<li>@Basic(fetch=FetchType.EAGER)   即时获取（默认的存取策略）</li>
<li>@Basic(fetch=FetchType.LAZY)    延迟获取</li>
</ul>
</li>
<li><p>@Temporal</p>
<ul>
<li>这个使用来设置数据库表中显示的日期的精度，因为java中的Date属性可以对应着数据库中的三种类型(DATE,TIME, TIMESTAMP)即是单纯的表示日期，时间，两者兼备的，默认的是两者兼备的，输出的是:2012-01-22 17:55:55</li>
<li>因此可以使用@Temporal来设置显示的时间的精度，这三种的表示形式如下：</li>
<li><code>TemporalType.TIME</code> 输出到数据库中的仅仅是小时格式的，比如:12:22:12</li>
<li><code>TemporalType.DATE</code> 输出到数据库中的是日期的格式：2012-12-01</li>
<li><code>TemporalType.TIMESTAMP</code> 两者兼备，这个是默认的</li>
</ul>
</li>
<li><p>@Column - 可将属性映射到列，使用该注解来覆盖默认值，@Column描述了数据库表中           该字段的详细定义，这对于根据 JPA 注解生成数据库表结构的工具非常有作用。</p>
<ul>
<li><p>name - 可选，表示数据库表中该字段的名称，默认情形属性名称一致</p>
</li>
<li><p>nullable -可选，表示该字段是否允许为 null，默认为true</p>
</li>
<li><p>unique - 可选，表示该字段是否是唯一标识，默认为 false</p>
</li>
<li><p>length - 可选，表示该字段的大小，仅对 String 类型的字段有效，默认值255.</p>
</li>
<li><p>insertable -可选，表示在ORM框架执行插入操作时，该字段是否应出现INSETRT              语句中，默认为 true</p>
</li>
<li><p>updateable -可选，表示在ORM 框架执行更新操作时，该字段是否应该出现在               UPDATE语句中，默认为 true. 对于一经创建就不可以更改的字段，该          属性非常有用，如对于 birthday字段。</p>
</li>
<li><p>columnDefinition - 可选，表示该字段在数据库中的实际类型。通常ORM框架可以根    据属性类型自动判断数据库中字段的类型，但是对于Date类型仍无法确定数据      库中字段类型究竟是 DATE,TIME还是 TIMESTAMP. 此外 ,String 的默认映射类型为VARCHAR, 如果要将 String 类型映射到特定数据库的 BLOB或 TEXT字段类型，该属性非常有用。</p>
</li>
</ul>
</li>
<li><p>@Transient - 可选，表示该属性并非一个到数据库表的字段的映射，ORM框架将忽略该属性，如果一个属性并非数据库表的字段映射，就务必将其标示为@Transient。</p>
<ul>
<li>如果使用这个注解，那么表中不会出现这个字段</li>
</ul>
</li>
</ol>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>我们现在创建一个实体类Teacher，映射到数据库teacher表中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="keyword">import</span> javax.persistence.Temporal;</div><div class="line"><span class="keyword">import</span> javax.persistence.TemporalType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Transient;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"teacher"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> sal;</div><div class="line">	<span class="keyword">private</span> Date joinDate;</div><div class="line">	<span class="keyword">private</span> String wife;  <span class="comment">//妻子的名字</span></div><div class="line"></div><div class="line">	<span class="meta">@Transient</span>   <span class="comment">//设置该属性不在表中</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> wife;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.wife = wife;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO) <span class="comment">//设置主键自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Temporal</span>(TemporalType.DATE)   <span class="comment">//设置时间精确到天数，2012-01-12</span></div><div class="line">	<span class="meta">@Column</span>(name=<span class="string">"JoinTime"</span>)   <span class="comment">//改变表中字段的名字</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getJoinDate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> joinDate;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(nullable=<span class="keyword">false</span>)   <span class="comment">//设置名字不为空</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sal;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">double</span> sal)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sal = sal;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJoinDate</span><span class="params">(Date joinDate)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.joinDate = joinDate;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在核心配置文件(hibernate.cfg.xml)中配置这个映射<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 直接指定这个Teacher实体类的全类名即可，即是完成了映射 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.tedu.bean.Teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="JoinColumn"><a href="#JoinColumn" class="headerlink" title="@JoinColumn"></a>@JoinColumn</h2><ul>
<li><p>我们知道外键的生成的字段的名称是默认的，但是我们也可以使用这个注解改变这个名称</p>
</li>
<li><p>这个注解是用来设置自动生成的外键的属性，比如外键的名称，非空……</p>
</li>
<li><p><code>name</code><br>指定外键的名称</p>
</li>
<li><p><code>nullable</code><br>指定外键是否为空，默认的是true</p>
</li>
<li><p><code>unique</code><br>生成唯一的约束，就是这个字段的值唯一，默认的false</p>
</li>
</ul>
<h2 id="JoinTabl"><a href="#JoinTabl" class="headerlink" title="@JoinTabl"></a>@JoinTabl</h2><ul>
<li><p>当涉及到多对多的映射关系的时候，用来定义第三表的表名，和字段的名称。</p>
</li>
<li><p><code>name</code><br>设置第三张表的名称</p>
</li>
<li><p><code>joinColumns</code><br>设置的是当前实体类对应的表在第三张表的外键的字段名称</p>
</li>
<li><p><code>inverseJoinColumns</code><br>设置的是另外一个实体类对应的表在第三张表的外键的字段名称</p>
</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><p><a href="http://docs.jboss.org/hibernate/annotations/3.4/reference/zh_cn/html_single/#d0e1148" target="_blank" rel="external">http://docs.jboss.org/hibernate/annotations/3.4/reference/zh_cn/html_single/#d0e1148</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/qjjazry/p/6306744.html" target="_blank" rel="external">http://www.cnblogs.com/qjjazry/p/6306744.html</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate注解之基本注解的注解使用&quot;&gt;&lt;a href=&quot;#Hibernate注解之基本注解的注解使用&quot; class=&quot;headerlink&quot; title=&quot;Hibernate注解之基本注解的注解使用&quot;&gt;&lt;/a&gt;Hibernate注解之基本注解的注解使用&lt;/
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate使用日志(log4j)</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97-log4j/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate使用日志-log4j/</id>
    <published>2018-04-21T20:20:20.000Z</published>
    <updated>2018-04-21T20:20:50.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate使用日志-log4j"><a href="#Hibernate使用日志-log4j" class="headerlink" title="Hibernate使用日志(log4j)"></a>Hibernate使用日志(log4j)</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul>
<li>在pom.xml中添加如下的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="在resource目录下创建log4j-properties文件"><a href="#在resource目录下创建log4j-properties文件" class="headerlink" title="在resource目录下创建log4j.properties文件"></a>在resource目录下创建log4j.properties文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># Direct log messages to a log file</div><div class="line">log4j.appender.file=org.apache.log4j.RollingFileAppender</div><div class="line"># define the log to file</div><div class="line">log4j.appender.file.File=jsnu-log4j.log</div><div class="line"></div><div class="line">log4j.appender.file.MaxFileSize=1MB</div><div class="line">log4j.appender.file.MaxBackupIndex=1</div><div class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.file.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div><div class="line"></div><div class="line"># Direct log messages to stdout</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.Target=System.out</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div><div class="line"></div><div class="line"># Root logger option</div><div class="line">log4j.rootLogger=INFO, file, stdout</div><div class="line"></div><div class="line"># Log everything. Good for troubleshooting</div><div class="line">log4j.logger.org.hibernate=INFO</div><div class="line"></div><div class="line"># Log all JDBC parameters</div><div class="line">log4j.logger.org.hibernate.type=ALL</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate使用日志-log4j&quot;&gt;&lt;a href=&quot;#Hibernate使用日志-log4j&quot; class=&quot;headerlink&quot; title=&quot;Hibernate使用日志(log4j)&quot;&gt;&lt;/a&gt;Hibernate使用日志(log4j)&lt;/h1&gt;&lt;h2
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate常用API</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E5%B8%B8%E7%94%A8API/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate常用API/</id>
    <published>2018-04-21T20:19:37.000Z</published>
    <updated>2018-04-21T20:19:59.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate常用API"><a href="#Hibernate常用API" class="headerlink" title="Hibernate常用API"></a>Hibernate常用API</h1><ol>
<li><p>Configuration ：负责加载核心配置文件</p>
<ul>
<li>加载的默认名字为hibernate.cfg.xml，如果不是这个名字，那么需要指定</li>
<li><code>SessionFactory configuration.buildSessionFactory()</code>  创建SessionFactory</li>
</ul>
</li>
<li><p>SessionFactory ： 用来创建Session(会话)</p>
<ul>
<li><code>Session openSession()</code>   获取Session</li>
</ul>
</li>
<li><p>Session : 数据库连接会话，用来实现增删改查</p>
<ul>
<li><code>save(Object)</code>   增加数据</li>
<li><code>get(Class&lt;T&gt; cls,arg)</code>   根据id查询</li>
<li><code>update(Object object)</code>  更新，一般先要根据条件获取到其中的记录，然后在其对象中修改</li>
<li><code>delete(Object object)</code>  删除</li>
</ul>
</li>
<li><p>Transaction ：负责事务控制</p>
<ul>
<li><code>session.beginTransaction()</code>  开始事务</li>
<li><code>rollback()</code> 回滚</li>
<li><code>commit()</code> 提交事务</li>
</ul>
</li>
<li><p>Query ：执行特殊的查询</p>
</li>
</ol>
<h2 id="增删改查的是实例-Session"><a href="#增删改查的是实例-Session" class="headerlink" title="增删改查的是实例(Session)"></a>增删改查的是实例(Session)</h2><h3 id="创建一个工具类"><a href="#创建一个工具类" class="headerlink" title="创建一个工具类"></a>创建一个工具类</h3><ul>
<li>用于获取Session，相当于JDBC获取Connection<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUntil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 静态语句块中的内容只是在类加载的时候只创建一次，因此这里的大大减少了资源的消耗</div><div class="line">	 */</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">// 加载核心配置文件hibernate.cfg.xml</span></div><div class="line">		configuration = <span class="keyword">new</span> Configuration();</div><div class="line">		configuration.configure();</div><div class="line">		<span class="comment">// 创建SessionFactotry对象</span></div><div class="line">		sessionFactory = configuration.buildSessionFactory();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//创建session对象，在测试类中可以使用这个静态方法获取session</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sessionFactory.openSession();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul>
<li>使用的是Session中的相关方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.tedu.test;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.Transaction;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> cn.tedu.bean.Student;</div><div class="line"><span class="keyword">import</span> cn.tedu.utils.HibernateUntil;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加数据到数据库中</div><div class="line">	 * save(Object object)</div><div class="line">	 * 直接传入的是一个实体类的对象，我们在实体类中设置值，那么设置的值就会根据映射关系文件将其添加到指定的表的字段的值</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			Student student = <span class="keyword">new</span> Student();</div><div class="line">			student.setAge(<span class="number">22</span>);</div><div class="line">			student.setName(<span class="string">"陈加兵"</span>);</div><div class="line">			<span class="comment">// 保存数据到数据库</span></div><div class="line">			session.save(student);</div><div class="line"></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除数据</div><div class="line">	 * 1. 根据id查询出想要删除的对象</div><div class="line">	 * 2. 使用delete(Object obj)  删除</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			Student student=session.get(Student.class, <span class="number">1</span>); <span class="comment">//根据id查询想要删除的对象</span></div><div class="line">			session.delete(student);   <span class="comment">//删除查询到的对象</span></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据id查询数据，返回的是一个实体类对象</div><div class="line">	 * get(Class&lt;T&gt; cls,id)</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			<span class="comment">//查询id=1的数据，并且返回对象</span></div><div class="line">			Student student=session.get(Student.class, <span class="number">1</span>);</div><div class="line">			System.out.println(student);</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试更新数据</div><div class="line">	 * 1. 先根据id获取指定的对象 get(Class&lt;T&gt; class,id)</div><div class="line">	 * 2. 使用set方法修改对象中的属性值</div><div class="line">	 * 3. update(Object object) 直接将对象更新即可</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			<span class="comment">//查询id=1的数据，并且返回对象</span></div><div class="line">			Student student=session.get(Student.class, <span class="number">1</span>);</div><div class="line">			student.setName(<span class="string">"Jack"</span>);</div><div class="line">			student.setAge(<span class="number">33</span>);</div><div class="line">			session.update(student);</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate常用API&quot;&gt;&lt;a href=&quot;#Hibernate常用API&quot; class=&quot;headerlink&quot; title=&quot;Hibernate常用API&quot;&gt;&lt;/a&gt;Hibernate常用API&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Configuration
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate的基本配置</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate的基本配置/</id>
    <published>2018-04-21T20:18:40.000Z</published>
    <updated>2018-04-21T20:19:07.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate的基本配置"><a href="#Hibernate的基本配置" class="headerlink" title="Hibernate的基本配置"></a>Hibernate的基本配置</h1><h2 id="核心配置文件-hibernate-cfg-xml"><a href="#核心配置文件-hibernate-cfg-xml" class="headerlink" title="核心配置文件(hibernate.cfg.xml)"></a>核心配置文件(hibernate.cfg.xml)</h2><ol>
<li>名字为<code>hibernate.cfg.xml</code></li>
<li>放在根目录下(resource)</li>
</ol>
<h3 id="必须的配置-配置数据库信息"><a href="#必须的配置-配置数据库信息" class="headerlink" title="必须的配置(配置数据库信息)"></a>必须的配置(配置数据库信息)</h3><ul>
<li><p><code>hibernate.connection.driver_class</code><br>加载驱动，其中的mysql的为：<code>com.mysql.jdbc.Driver</code></p>
</li>
<li><p><code>hibernate.connection.url</code><br>数据库的连接，其中mysql是<code>jdbc:mysql://localhost:3306/hirbernate</code></p>
</li>
<li><p><code>hibernate.connection.username</code><br>数据库的用户名</p>
</li>
<li><p><code>hibernate.connection.password</code><br>数据库的密码</p>
</li>
<li><p><code>hibernate.dialect</code><br>数据库的方言，其中mysql：<code>org.hibernate.dialect.MySQLDialect</code></p>
</li>
</ul>
<h3 id="可选的配置"><a href="#可选的配置" class="headerlink" title="可选的配置"></a>可选的配置</h3><ul>
<li><p><code>hibernate.show_sql</code><br>输出sql执行的语句到控制台，false，true</p>
</li>
<li><p><code>hibernate.format_sql</code><br>格式化sql语句，true，false</p>
</li>
<li><p><code>hibernate.hbm2ddl.auto</code><br>配置自动生成表，其中有四个值，分别是create（表示hibernate自动创建表，但是每次执行完成之后都会删除上一个表重新创建一个），update（如果还没有表，那么就生成一个，如果已经存在这个表，那么就会更新这个表），validate（不会自动创建表，字段不一致时会出现异常），create-drop（每次加载的时候都会创建表，但是SessionFactory关闭后就会自动删除这个表）。我们使用最多的是update</p>
</li>
<li><p><code>&lt;mapping resource=&quot;com/bean/Student.hbm.xml&quot; /&gt;</code><br>设置映射文件的路径</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 必须要配置的5大参数，4大参数，一个方言 其中的四大参数是连接JDBC必须的参数 这里的方言也是必须的 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hirbernate<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- mysql的方言 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 可选的配置文件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 输出所有的sql语句到控制台 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 在控制台上打印出漂亮的sql语句 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置如果这个表还没有创建，那么就会自动创建，如果已经创建了，那么会自动更新 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 映射配置文件，这里是引用Student类的配置文件，注意这里的配置文件可以有多个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/tedu/bean/Student.hbm.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="映射关系文件"><a href="#映射关系文件" class="headerlink" title="映射关系文件"></a>映射关系文件</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>指定实体类的各个字段与表的关系</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>太麻烦了，一个项目中有很多个实体类，那么我们也需要配置多个映射关系文件</li>
<li>后面会使用注解的方式替代这个映射关系文件</li>
</ul>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol>
<li>每一个实体类对应一个映射配置文件</li>
<li>映射关系文件的名字最好是<code>实体类名.hbm.xml</code>(不强制规定)</li>
<li>最好和实体类放在同一个包中</li>
</ol>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol>
<li><p>class</p>
<ul>
<li>name : 对应的实体类的全类名(包名+类名)</li>
<li>table : 在数据库中对应的表的名称</li>
</ul>
</li>
<li><p>id 指定主键的对应关系，这个mybatis很相似</p>
<ul>
<li>property  : 实体类中的主键的字段</li>
<li>column ： 表中的主键字段</li>
</ul>
</li>
<li><p>property 指定表中其他字段的对应关系</p>
</li>
</ol>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>实体类Student</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>映射关系文件 (Student.hbm.xml)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- name：指定实体类的路径 table：指定该实体类对应的表的名称 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.tedu.bean.Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;id&gt;配置主键，name指定JavaBean中的属性，column指定的是表中的属性 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置主键的生成策略 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- property是定义非主键的类型 name：指定实体类中的属性名称 column：指定实体类中的属性对应在表中的元素的名称 如果这里的name和column相同，那么可以省略这里的colum，不过建议写全，更加清晰 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>如果实体类中的属性和表中的属性字段相同，那么其中的column可以省略，但是建议写全</li>
</ul>
<h2 id="SQL方言"><a href="#SQL方言" class="headerlink" title="SQL方言"></a>SQL方言</h2><ul>
<li>告诉Hibernate你使用的是哪一个数据库，Hibernate便可以根据设定的方言来对应数据库</li>
</ul>
<h3 id="常用的方言-Mysql-Oracle"><a href="#常用的方言-Mysql-Oracle" class="headerlink" title="常用的方言(Mysql,Oracle)"></a>常用的方言(Mysql,Oracle)</h3><ul>
<li>mysql :     <code>org.hibernate.dialect.MySQLDialect</code></li>
<li>Oracle : <code>org.hibernate.dialect.OracleDialect</code></li>
</ul>
<h2 id="主键生成方式"><a href="#主键生成方式" class="headerlink" title="主键生成方式"></a>主键生成方式</h2><ul>
<li>我们在学习mysql的时候，一般都会设置主键为自增长，这个自增长就是主键生成方式</li>
</ul>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul>
<li>主键生成策略是在映射关系文件中定义的，使用的是<code>&lt;generator&gt;</code>定义的</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h3 id="常见的分类"><a href="#常见的分类" class="headerlink" title="常见的分类"></a>常见的分类</h3><ul>
<li><p>sequence： 采用序列方式生成主键，适用于Oracle数据库</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"sequence"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"sequence"</span>&gt;</span>序列名<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>identity</p>
<ul>
<li>是采用数据库自增长机制生成主键，适用于Oracle之外的其他的数据库</li>
</ul>
</li>
<li><ul>
<li>配置语法 ： <code>&lt;generator class=&quot;identity&quot;&gt;&lt;/generator&gt;</code></li>
</ul>
</li>
</ul>
<ul>
<li>native 是根据当前配置的数据库方言，自动选择sequence或者identity<ul>
<li>在mysql的环境下是自增长的方式</li>
<li>配置语法如下：<code>&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</code></li>
</ul>
</li>
</ul>
<ul>
<li>uuid<br>用一个128-bit的UUID算法生成字符串类型的标识符， 这在一个网络中是唯一的（使用了IP地址）。UUID被编码为一个32位16进制数字的字符串。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate的基本配置&quot;&gt;&lt;a href=&quot;#Hibernate的基本配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate的基本配置&quot;&gt;&lt;/a&gt;Hibernate的基本配置&lt;/h1&gt;&lt;h2 id=&quot;核心配置文件-hibernate-
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate第一个程序</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate第一个程序/</id>
    <published>2018-04-21T20:18:04.000Z</published>
    <updated>2018-04-21T20:18:22.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate第一个程序"><a href="#Hibernate第一个程序" class="headerlink" title="Hibernate第一个程序"></a>Hibernate第一个程序</h1><h2 id="创建一个Maven项目"><a href="#创建一个Maven项目" class="headerlink" title="创建一个Maven项目"></a>创建一个Maven项目</h2><ul>
<li>在pom.xml中配置Hibernate的jar包<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- hibernate核心jar包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- mysqljar包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建一个实体类-JavaBean"><a href="#创建一个实体类-JavaBean" class="headerlink" title="创建一个实体类(JavaBean)"></a>创建一个实体类(JavaBean)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.tedu.bean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建这个实体类Student的映射文件"><a href="#创建这个实体类Student的映射文件" class="headerlink" title="创建这个实体类Student的映射文件"></a>创建这个实体类Student的映射文件</h2><ol>
<li>这个实体类的映射文件的名字最好要和是：<code>实体类名.hbm.xml</code></li>
<li>映射文件最好和实体类放在同一个包中<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- name：指定实体类的路径 table：指定该实体类对应的表的名称 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.tedu.bean.Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;id&gt;配置主键，name指定JavaBean中的属性，column指定的是表中的属性 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置主键的生成策略 自增长--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- property是定义非主键的类型 name：指定实体类中的属性名称 column：指定实体类中的属性对应在表中的元素的名称 如果这里的name和column相同，那么可以省略这里的colum，不过建议写全，更加清晰 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="核心配置文件-hibernate-cfg-xml"><a href="#核心配置文件-hibernate-cfg-xml" class="headerlink" title="核心配置文件(hibernate.cfg.xml)"></a>核心配置文件(hibernate.cfg.xml)</h2><ol>
<li>核心配置文件的名字是<code>hibernate.cfg.xml</code></li>
<li>放在根目录中，resource下<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 必须要配置的5大参数，4大参数，一个方言 其中的四大参数是连接JDBC必须的参数 这里的方言也是必须的 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hirbernate<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- mysql的方言 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 可选的配置文件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 输出所有的sql语句到控制台 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 在控制台上打印出漂亮的sql语句 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置如果这个表还没有创建，那么就会自动创建，如果已经创建了，那么会自动更新 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 映射配置文件，这里是引用Student类的配置文件，注意这里的配置文件可以有多个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/tedu/bean/Student.hbm.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="工具类-HibernateUtil"><a href="#工具类-HibernateUtil" class="headerlink" title="工具类(HibernateUtil)"></a>工具类(HibernateUtil)</h2><ul>
<li>用于读取配置文件</li>
<li>获取Session<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUntil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 静态语句块中的内容只是在类加载的时候只创建一次，因此这里的大大减少了资源的消耗</div><div class="line">	 */</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">// 加载核心配置文件hibernate.cfg.xml</span></div><div class="line">		configuration = <span class="keyword">new</span> Configuration();</div><div class="line">		configuration.configure();</div><div class="line">		<span class="comment">// 创建SessionFactotry对象</span></div><div class="line">		sessionFactory = configuration.buildSessionFactory();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//创建session对象，在测试类中可以使用这个静态方法获取session</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sessionFactory.openSession();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><ul>
<li>添加一条记录到数据库中<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.Transaction;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> cn.tedu.bean.Student;</div><div class="line"><span class="keyword">import</span> cn.tedu.utils.HibernateUntil;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			Student student = <span class="keyword">new</span> Student();</div><div class="line">			student.setAge(<span class="number">22</span>);</div><div class="line">			student.setName(<span class="string">"陈加兵"</span>);</div><div class="line">			<span class="comment">// 保存数据到数据库</span></div><div class="line">			session.save(student);</div><div class="line"></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>核心配置文件名字一定要是: hibernate.cfg.xml</li>
<li>实体类的配置文件要和实体类最好放在同一个包中</li>
<li>运行测试类，我student表将会自动创建，在控制台还会输出sql语句</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate第一个程序&quot;&gt;&lt;a href=&quot;#Hibernate第一个程序&quot; class=&quot;headerlink&quot; title=&quot;Hibernate第一个程序&quot;&gt;&lt;/a&gt;Hibernate第一个程序&lt;/h1&gt;&lt;h2 id=&quot;创建一个Maven项目&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate简介</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E7%AE%80%E4%BB%8B/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate简介/</id>
    <published>2018-04-21T20:16:59.000Z</published>
    <updated>2018-04-21T20:17:40.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hibernate简介"><a href="#hibernate简介" class="headerlink" title="hibernate简介"></a>hibernate简介</h1><h2 id="什么是hibernate"><a href="#什么是hibernate" class="headerlink" title="什么是hibernate"></a>什么是hibernate</h2><ul>
<li>hibernate是数据访问层的框架，对JDBC进行了封装，是针对数据库访问提出的面向对象的解决方案</li>
</ul>
<h2 id="Hibernate的作用"><a href="#Hibernate的作用" class="headerlink" title="Hibernate的作用"></a>Hibernate的作用</h2><ul>
<li>使用Hibrenate可以直接访问对象，从hierbnate自动将此访问转换成SQL执行，从而达到间接访问数据库的目的，简化了数据访问层的代码开发</li>
</ul>
<h2 id="hibernate与JDBC对比"><a href="#hibernate与JDBC对比" class="headerlink" title="hibernate与JDBC对比"></a>hibernate与JDBC对比</h2><h3 id="使用JDBC具有以下缺点"><a href="#使用JDBC具有以下缺点" class="headerlink" title="使用JDBC具有以下缺点"></a>使用JDBC具有以下缺点</h3><ol>
<li>需要编写大量SQL语句</li>
<li>需要给大量的占位符<code>?</code>赋值</li>
<li>需要将ResultSet结果集转换成实体对象</li>
<li>SQL中包含特有函数，无法移植</li>
</ol>
<h3 id="使用Hibernante的优点"><a href="#使用Hibernante的优点" class="headerlink" title="使用Hibernante的优点"></a>使用Hibernante的优点</h3><ol>
<li>自动生成SQL语句</li>
<li>自动给？参数赋值</li>
<li>自动将ResultSet结果集转换成实体对象</li>
<li>采用一致的方法对数据库操作，移植性好</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>简单的来说，hibernate对JDBC进行了封装，比如JDBCTemplate可以简便的操作数据库，底层还是使用了JDBC</li>
</ul>
<h2 id="Hibernate与Mybatis的对比"><a href="#Hibernate与Mybatis的对比" class="headerlink" title="Hibernate与Mybatis的对比"></a>Hibernate与Mybatis的对比</h2><h3 id="共性"><a href="#共性" class="headerlink" title="共性"></a>共性</h3><ul>
<li>对JDBC进行了封装</li>
<li>采用ORM思想解决了Entity和数据库的映射问题</li>
</ul>
<h3 id="MyBaits"><a href="#MyBaits" class="headerlink" title="MyBaits"></a>MyBaits</h3><ul>
<li>Mybatis采用SQL与Entity映射，对JDBC封装成都较轻</li>
<li>Mybatis需要程序猿自己写sql语句，更具灵活性</li>
</ul>
<h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><ul>
<li>Hibernate采用数据库和Entity映射。对JDBC封装程度较重<br>Hibernate自动生成SQL，对于基本的操作，开发效率高</li>
</ul>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>Hibernate对JDBC的封装较重，程序猿不需要写SQL语句，比如写好映射关系就可以自动创建表，使用JDBCTemplate直接操作数据库</li>
</ul>
<h2 id="Hibernate框架设计原理"><a href="#Hibernate框架设计原理" class="headerlink" title="Hibernate框架设计原理"></a>Hibernate框架设计原理</h2><h3 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h3><ul>
<li>Hibernate采用了ORM思想对JDBC进行了封装</li>
<li>Hibernate框架是ORM思想的一种体现，解决了对象和数据库映射问题</li>
<li>Hibernate提供了一系列的API，允许我们直接访问实体对象，然后其根据ORM映射关系，转换成SQL并且去执行，从而达到访问数据库的目的</li>
</ul>
<h3 id="ORM思想"><a href="#ORM思想" class="headerlink" title="ORM思想"></a>ORM思想</h3><ul>
<li>ORM： Object Relation Mapping，即是对象关系映射，指的是java独享和关系数据库之间的映射</li>
<li>ORM思想： 就是将对象与数据库进行相互转换的思想，不同的框架技术实现ORM的手段不同，但更多的是采用配置+反射的方式ORM</li>
</ul>
<h2 id="hibernate文档"><a href="#hibernate文档" class="headerlink" title="hibernate文档"></a>hibernate文档</h2><ul>
<li><a href="http://docs.jboss.org/hibernate/orm/3.5/reference/zh-CN/html/session-configuration.html#configuration-sessionfactory" target="_blank" rel="external">http://docs.jboss.org/hibernate/orm/3.5/reference/zh-CN/html/session-configuration.html#configuration-sessionfactory</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hibernate简介&quot;&gt;&lt;a href=&quot;#hibernate简介&quot; class=&quot;headerlink&quot; title=&quot;hibernate简介&quot;&gt;&lt;/a&gt;hibernate简介&lt;/h1&gt;&lt;h2 id=&quot;什么是hibernate&quot;&gt;&lt;a href=&quot;#什么是hi
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>自己写springmvc框架</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/%E8%87%AA%E5%B7%B1%E5%86%99springmvc%E6%A1%86%E6%9E%B6/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/自己写springmvc框架/</id>
    <published>2018-04-21T20:15:32.000Z</published>
    <updated>2018-04-21T20:16:17.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的springmvc框架"><a href="#简易的springmvc框架" class="headerlink" title="简易的springmvc框架"></a>简易的springmvc框架</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ol>
<li><p>表示层(视图层，显示层)</p>
<ul>
<li>jsp</li>
<li>servlet</li>
</ul>
</li>
<li><p>业务逻辑层</p>
<ul>
<li>service</li>
</ul>
</li>
<li><p>数据访问层(持久层)</p>
<ul>
<li>dao</li>
</ul>
</li>
</ol>
<h2 id="什么是mvc"><a href="#什么是mvc" class="headerlink" title="什么是mvc"></a>什么是mvc</h2><ul>
<li>Model View Controller</li>
<li><p>是一种架构思想，其核心思想将项目划分成三种不同模块，分别是模型，视图，控制器</p>
<ul>
<li>模型： 负责封装业务逻辑和数据访问</li>
<li>控制器： 负责调度</li>
<li>视图： 负责显示</li>
</ul>
</li>
<li><p>View : JSP  负责显示</p>
</li>
<li>Controller :控制器 起到调度分发请求</li>
<li>Model ： 模型层 代表除了Servlet，Controller之外的java代码，包括service，dao</li>
</ul>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul>
<li>项目的可维护性，可扩展性更高，抽取service</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><ol>
<li>首先需要一个RequestMapping注解</li>
<li>创建前端控制器DispatcherServlet用来转发请求</li>
<li>创建视图解析器来对应不同的页面</li>
</ol>
<h3 id="创建注解RequestMapping"><a href="#创建注解RequestMapping" class="headerlink" title="创建注解RequestMapping"></a>创建注解RequestMapping</h3><ul>
<li>使用@Target可以设置这个注解在方法体上还是在类上使用，这里我们只是在方法体上使用，这个和Springmvc有点出入<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)   <span class="comment">//设置这个注解是给方法使用的</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  <span class="comment">//设置注解的存在时间为运行时</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</div><div class="line">	<span class="comment">//设置传入的参数</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;   <span class="comment">//设置一个参数 ，必须传入参数 如果添加 default "" ,那么默认的参数就是空字符串</span></div><div class="line">	<span class="comment">//public String method() default "get";   //设置method参数，默认的是get方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建Handler类"><a href="#创建Handler类" class="headerlink" title="创建Handler类"></a>创建Handler类</h3><ul>
<li>用来保存反射调用的方法和对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Method method; <span class="comment">// 方法</span></div><div class="line">	<span class="keyword">private</span> Object object; <span class="comment">// Object对象，用于反射调用方法method</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Method method, Object object)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.method = method;</div><div class="line">		<span class="keyword">this</span>.object = object;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> method;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.method = method;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> object;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.object = object;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Handler [method="</span> + method + <span class="string">", object="</span> + object + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="config-xml-resource目录下"><a href="#config-xml-resource目录下" class="headerlink" title="config.xml(resource目录下)"></a>config.xml(resource目录下)</h3><ul>
<li>用来存放bean，不同的controller类都需要在这个配置文件重视配置<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans&gt;</div><div class="line">	&lt;bean class="cn.controller.UserController"&gt;&lt;/bean&gt;</div><div class="line">	&lt;bean class="cn.controller.DeptController"&gt;&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="XMLUtils"><a href="#XMLUtils" class="headerlink" title="XMLUtils"></a>XMLUtils</h3><ul>
<li><p>解析config.xml的文件，使用的是Dom4j</p>
</li>
<li><p>在pom.xml中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 读取xml文件的jar包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>解析xml文件的工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.dom4j.Document;</div><div class="line"><span class="keyword">import</span> org.dom4j.Element;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.reflect.ReflectDemo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取XML文件的工具类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLUtils</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 读取xml文件中的内容,使用的jar包是dom4j</div><div class="line">	 * <span class="doctag">@return</span> xml配置文件中的所有bean的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title">getBeans</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		SAXReader reader=<span class="keyword">new</span> SAXReader();</div><div class="line">		InputStream inputStream=ReflectDemo.class.getClassLoader().getResourceAsStream(<span class="string">"config.xml"</span>);  <span class="comment">//获取输入流</span></div><div class="line">		Document document=reader.read(inputStream);</div><div class="line">		<span class="comment">//得到根节点</span></div><div class="line">		Element beansEle=document.getRootElement();</div><div class="line">		<span class="comment">//得到根节点下面的所有子节点</span></div><div class="line">		List&lt;Element&gt; elements=beansEle.elements();</div><div class="line"></div><div class="line">		List&lt;Object&gt; beans=<span class="keyword">new</span> ArrayList&lt;Object&gt;();   <span class="comment">//保存bean中的class属性创建的对象</span></div><div class="line">		<span class="comment">//遍历子节点</span></div><div class="line">		<span class="keyword">for</span> (Element element : elements) &#123;</div><div class="line">			<span class="comment">//得到class属性的值</span></div><div class="line">			String className=element.attributeValue(<span class="string">"class"</span>);</div><div class="line">			<span class="comment">//直接使用遍历的className创建对象并且保存在集合中</span></div><div class="line">			Class cls=Class.forName(className);</div><div class="line">			Object bean=cls.newInstance();</div><div class="line">			beans.add(bean);   <span class="comment">//将创建的对象添加到集合中</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> beans;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h3><ul>
<li>读取config.xml中的bean，并且利用反射获取注解上的value值(请求路径)、方法、创建类。存储在Map中<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.dom4j.Document;</div><div class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</div><div class="line"><span class="keyword">import</span> org.dom4j.Element;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.annoation.RequestMapping;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMapping</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Map&lt;String, Handler&gt; map = <span class="keyword">new</span> HashMap&lt;String, Handler&gt;(); <span class="comment">// 创建一个Map存储path和Handler</span></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化方法，将指定类的带有注解的方法放入Map中</div><div class="line">	 * <span class="doctag">@param</span> beans  对象集合</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(List&lt;Object&gt; beans)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (Object bean : beans) &#123;</div><div class="line">			Class cls=bean.getClass();</div><div class="line">			<span class="comment">//获取所有方法</span></div><div class="line">			Method[] methods=cls.getDeclaredMethods();</div><div class="line">			<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">				RequestMapping requestMapping=method.getAnnotation(RequestMapping.class);</div><div class="line">				<span class="comment">//如果方法上面存在RequestMapping注解</span></div><div class="line">				<span class="keyword">if</span> (requestMapping!=<span class="keyword">null</span>) &#123;</div><div class="line">					String path=requestMapping.value();  <span class="comment">//获取注解上的地址</span></div><div class="line">					Handler handler=<span class="keyword">new</span> Handler(method, bean);  <span class="comment">//创建handler对象</span></div><div class="line">					map.put(path, handler);  <span class="comment">//存放键值对</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据给定的path返回一个Handler对象</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> path</div><div class="line">	 *            指定的路径，map中的key</div><div class="line">	 * <span class="doctag">@return</span> Handler 对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> map.get(path);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><ul>
<li>根据controller方法中的返回值转发或者重定向到指定的视图<ul>
<li>默认是转发的</li>
<li>重定向需要使用: <code>redirect:add.do</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewResolver</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 视图解析器</div><div class="line">	 * <span class="doctag">@param</span> returnValue   controller方法的返回值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object returnValue, HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) &#123;</div><div class="line">		String path=(String)returnValue;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//判断是转发还是重定向</span></div><div class="line">			<span class="keyword">if</span> (path.startsWith(<span class="string">"redirect:"</span>)) &#123;   <span class="comment">//重定向</span></div><div class="line">					response.sendRedirect(request.getContextPath()+<span class="string">"/"</span>+path.split(<span class="string">":"</span>)[<span class="number">1</span>]);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;   <span class="comment">//转发</span></div><div class="line">					request.getRequestDispatcher(<span class="string">"/WEB-INF/"</span>+path+<span class="string">".jsp"</span>).forward(request, response);</div><div class="line">				&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><ul>
<li>前端控制器，其实是一个Servlet，不过用来拦截<em>.do的请求，因此需要在web.xml中配置`<url-pattern></url-pattern></em>.do`</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> cn.reflect.Handler;</div><div class="line"><span class="keyword">import</span> cn.reflect.HandlerMapping;</div><div class="line"><span class="keyword">import</span> cn.reflect.ViewResolver;</div><div class="line"><span class="keyword">import</span> cn.utils.XMLUtils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class DispatcherServlet</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		List&lt;Object&gt; beans;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			beans = XMLUtils.getBeans();<span class="comment">// 获取xml配置文件中所有bean的对象</span></div><div class="line">			HandlerMapping handlerMapping = <span class="keyword">new</span> HandlerMapping();</div><div class="line">			String uri = request.getRequestURI(); <span class="comment">// 请求地址</span></div><div class="line">			String appName = request.getContextPath(); <span class="comment">// 工程名</span></div><div class="line">			String path = uri.replace(appName, <span class="string">""</span>); <span class="comment">// 获取注解的path</span></div><div class="line">			handlerMapping.init(beans); <span class="comment">// 初始化</span></div><div class="line">			Handler handler = handlerMapping.getHandler(path); <span class="comment">// 获取指定的Handler</span></div><div class="line">			Method method = handler.getMethod();</div><div class="line">			Object object = handler.getObject();</div><div class="line">			Class[] paramTypes = method.getParameterTypes(); <span class="comment">// 获取方法中的参数类型</span></div><div class="line">			Object returnValue=<span class="keyword">null</span>;  <span class="comment">//申明目标方法的返回值</span></div><div class="line">			<span class="comment">// 如果调用的方法有参数</span></div><div class="line">			<span class="keyword">if</span> (paramTypes.length &gt; <span class="number">0</span>) &#123;</div><div class="line">				Object[] args = <span class="keyword">new</span> Object[paramTypes.length];   <span class="comment">//创建参数列表</span></div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</div><div class="line">					Class cls = paramTypes[i];</div><div class="line">					<span class="comment">// 判断类型是request或者response</span></div><div class="line">					<span class="keyword">if</span> (cls == HttpServletRequest.class) &#123;</div><div class="line">						args[i] = request;</div><div class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cls == HttpServletResponse.class) &#123;</div><div class="line">						args[i] = response;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				returnValue=method.invoke(object, args);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				returnValue=method.invoke(handler.getObject()); <span class="comment">// 调用方法执行</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">//有返回值，要么转发，要么重定向</span></div><div class="line">			<span class="keyword">if</span> (returnValue!=<span class="keyword">null</span>) &#123;</div><div class="line">				<span class="comment">//通过视图解析器对象，处理转发或者重定向</span></div><div class="line">				ViewResolver viewResolver=<span class="keyword">new</span> ViewResolver();</div><div class="line">				viewResolver.process(returnValue,request,response);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简易的springmvc框架&quot;&gt;&lt;a href=&quot;#简易的springmvc框架&quot; class=&quot;headerlink&quot; title=&quot;简易的springmvc框架&quot;&gt;&lt;/a&gt;简易的springmvc框架&lt;/h1&gt;&lt;h2 id=&quot;三层架构&quot;&gt;&lt;a href=&quot;#三
    
    </summary>
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之适配器模式/</id>
    <published>2018-04-16T05:56:28.000Z</published>
    <updated>2018-04-18T00:07:52.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式之适配器模式"><a href="#结构型模式之适配器模式" class="headerlink" title="结构型模式之适配器模式"></a>结构型模式之适配器模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>适配器模式用于将一个接口转化成客户想要的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/adapeter1.png" alt="适配器模式"></p>
<ul>
<li>Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li>
<li>Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</li>
<li><p>Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</p>
</li>
<li><p>根据对象适配器模式结构图，在对象适配器中，客户端需要调用request()方法，而适配者类Adaptee没有该方法，但是它所提供的specificRequest()方法却是客户端所需要的。为了使客户端能够使用适配者类，需要提供一个包装类Adapter，即适配器类。这个包装类包装了一个适配者的实例，从而将客户端与适配者衔接起来，在适配器的request()方法中调用适配者的specificRequest()方法。因为适配器类与适配者类是关联关系（也可称之为委派关系），所以这种适配器模式称为对象适配器模式</p>
</li>
</ul>
<h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><ul>
<li><p>类适配器是继承适配者类实现的，其中对象适配器是使用组合的方式实现的，就是适配者类作为适配器类的成员变量而实现的</p>
</li>
<li><p>一般目标抽象类是一个接口，适配者类一般是一个具体的实现类，有时候甚至不知道其中的源代码，因此需要适配器类将适配者类转换成适合用户的目标类</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>我们知道笔记本充电的电压是5v，但是我们的高压电是220v，那么我们此时就需要一个适配器将这个220v电压转换成为5v的电压给笔记本充电<ul>
<li>这里的220v电压就是适配者类，即是需要转换的类</li>
<li>5v电压是目标抽象类，由适配器将220v转换而来</li>
<li>这里的适配器类的主要功能就是将220v电压转换成5v电压</li>
</ul>
</li>
</ul>
<ul>
<li>目标接口(5v电压)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 接口为5v电压的接口  ，  这个目标抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Power5</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>220v电压的类（这里是一个具体的类，适配者类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Power220</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower220</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"正在输出220v电压....."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>适配器类（将220v电压转换成5v）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 适配器类，主要的目的就是将220v电压转换为5v的电压供笔记本充电</div><div class="line"> * 其中Power5是目标抽象接口，是最终需要的接口，Power220是一个适配者类，是已经存在的，只需要适配器转换即可</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPower5</span> <span class="keyword">extends</span> <span class="title">Power220</span> <span class="keyword">implements</span> <span class="title">Power5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 重载Power5中的方法，获取需要的5v电压</div><div class="line">	 * 过程： 先获取220v电压，然后进行转换即可</div><div class="line">	 * 	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.getPower220();   <span class="comment">//首先获取220v电压</span></div><div class="line">		<span class="keyword">this</span>.transform();   <span class="comment">//将220v电压转换成5v的电压</span></div><div class="line">		System.out.println(<span class="string">"获取5v电压......."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 将220v电压转换成5v电压的方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"现在将220v电压转换成5v电压......."</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>笔记本充电的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 笔记本类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteBook</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 笔记本充电的方法</div><div class="line">	 * <span class="doctag">@param</span> power5   电压为5v的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PowerOn</span><span class="params">(Power5 power5)</span></span>&#123;</div><div class="line">		power5.getPower5();   <span class="comment">//获取5v电压</span></div><div class="line">		System.out.println(<span class="string">"笔记本获取了5v的电压，正在开始充电......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		NoteBook noteBook=<span class="keyword">new</span> NoteBook();   <span class="comment">//创建笔记本的类</span></div><div class="line">		noteBook.PowerOn(<span class="keyword">new</span> AdapterPower5());   <span class="comment">//调用笔记本充电的类</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><ul>
<li>对象适配器是将适配者类作为适配器类的成员变量并不是继承，这个是一种组合方式</li>
<li>这种方式使用的更加普遍</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>这里的实例还是前面的例子</p>
</li>
<li><p>这里唯一不同的就是适配器类，不是继承适配者类，而是使用组合的方式</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 适配器类，这个是对象适配器，适配者类是作为成员变量存在，是组合关系</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Power5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Power220 power;   <span class="comment">//220v电压类的对象，作为成员变量</span></div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 构造方法，主要是为类初始化Power220v的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Power220 power)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.power=power;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span> </span>&#123;</div><div class="line">		power.getPower220();   <span class="comment">//获取220v电压</span></div><div class="line">		transform();   <span class="comment">//转换电压</span></div><div class="line">		System.out.println(<span class="string">"正在输出5v电压......."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"将220v电压转换成5v的电压......"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>类适配器是使用类继承的方式，适配器类继承适配者类(不提倡使用)</p>
</li>
<li><p>对象适配器使用的是一种组合的方式，将适配者类作为其中的成员变量，那么也是可以实现（提倡使用）</p>
</li>
</ul>
<h2 id="麻烦支持下博主的广告事业，点击下即可"><a href="#麻烦支持下博主的广告事业，点击下即可" class="headerlink" title="麻烦支持下博主的广告事业，点击下即可"></a>麻烦支持下博主的广告事业，点击下即可</h2><p><a href="http://click.linktech.cn/?m=huaweivmall&amp;a=A100234624&amp;l=02300&amp;l_cd1=0&amp;l_cd2=0&amp;u_id=chenjiabing" target="_blank" rel="external"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" alt="alt text" title="title"></a></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02303&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmall/20171225/640x240.jpg" width="450" height="240" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02303&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02302&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171219/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02302&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构型模式之适配器模式&quot;&gt;&lt;a href=&quot;#结构型模式之适配器模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式之适配器模式&quot;&gt;&lt;/a&gt;结构型模式之适配器模式&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;head
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
