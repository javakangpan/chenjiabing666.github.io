<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-04-21T20:23:59.262Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hibernate之一级缓存</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%B9%8B%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate之一级缓存/</id>
    <published>2018-04-21T20:23:26.000Z</published>
    <updated>2018-04-21T20:23:59.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate之一级缓存"><a href="#Hibernate之一级缓存" class="headerlink" title="Hibernate之一级缓存"></a>Hibernate之一级缓存</h1><h2 id="什么是一级缓存"><a href="#什么是一级缓存" class="headerlink" title="什么是一级缓存"></a>什么是一级缓存</h2><ul>
<li>Hibernate创建每个Session对象时，都会给Session分配一块独立的缓存区，用于存放Session查询出来的对象，这个分配给Session的缓存区称之为一级缓存，也叫Session级缓存</li>
</ul>
<h2 id="为什么使用一级缓存"><a href="#为什么使用一级缓存" class="headerlink" title="为什么使用一级缓存"></a>为什么使用一级缓存</h2><ul>
<li>Session读取数据时，会优先向缓存区取数据，如果存在数据直接返回，不存在才会区数据库查询，从而降低了数据库的访问次数。提升了代码的运行效率</li>
</ul>
<h2 id="如何使用一级缓存"><a href="#如何使用一级缓存" class="headerlink" title="如何使用一级缓存"></a>如何使用一级缓存</h2><ul>
<li><p>一级缓存默认是开启的，在使用Hibernate的API进行查询时会自动使用</p>
</li>
<li><p>验证</p>
<ul>
<li>从控制台可以看到只发出一条sql的查询语句</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=2 的数据，这个是session的第一次查询，那么会发出sql语句</span></div><div class="line">			Student student1=session.get(Student.class, <span class="number">2</span>);</div><div class="line"></div><div class="line">			<span class="comment">//再次使用同一个Session查询id=2的对象，由于前面已经查询过一次，因此这里不需要发出sql语句</span></div><div class="line">			Student student2=session.get(Student.class,<span class="number">2</span>);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="一级缓存的规则"><a href="#一级缓存的规则" class="headerlink" title="一级缓存的规则"></a>一级缓存的规则</h2><ul>
<li>一级缓存是Session独享的，每个Session不能访问其他的Session的缓存区</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session1 = <span class="keyword">null</span>;</div><div class="line">		Session session2 = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session1=HibernateUntil.getSession(); <span class="comment">//获取session1</span></div><div class="line">			session2=HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session1.beginTransaction();</div><div class="line">			transaction = session2.beginTransaction();</div><div class="line">			<span class="comment">//使用session1查询id=2的对象，这个对象会在session1的缓存区缓存</span></div><div class="line">			Student s1=session1.get(Student.class, <span class="number">2</span>);</div><div class="line">			<span class="comment">//使用Session2查询id=2的对象，可以看到这还是会发出sql语句，因为在session2的缓存区没有这个对象</span></div><div class="line">			Student s2=session2.get(Student.class, <span class="number">2</span>);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session1!=<span class="keyword">null</span>) &#123;</div><div class="line">				session1.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Session的save，update，delete操作会出发缓存更新<ul>
<li>此时的缓存区将会将之前的查询到的对象全部清除</li>
</ul>
</li>
</ul>
<h2 id="一级缓存管理"><a href="#一级缓存管理" class="headerlink" title="一级缓存管理"></a>一级缓存管理</h2><ul>
<li><code>session.evit(obj)</code>  将obj对象从一级缓存中清除</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//查询id=2 的数据，这个是session的第一次查询，那么会发出sql语句</span></div><div class="line">			Student student1=session.get(Student.class, <span class="number">2</span>);</div><div class="line"></div><div class="line">			<span class="comment">//清楚一级缓存中的student1对象</span></div><div class="line">			session.evict(student1);</div><div class="line"></div><div class="line">			<span class="comment">//再次使用同一个Session查询id=2的对象，由于前面已经清除了这个对象，因此这里还是会发出sql语句</span></div><div class="line">			Student student2=session.get(Student.class,<span class="number">2</span>);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>session.clear()</code>  清除一级缓存中的所有对象</li>
</ul>
<ul>
<li><code>session.close()</code>  关闭session，释放缓存空间</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>一级缓存是默认开启的</li>
<li>一级缓存的使用可以减少服务器和数据库之间的交互，减轻服务器的压力</li>
<li>提高查询的效率，不必查询发出重复的sql语句</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate之一级缓存&quot;&gt;&lt;a href=&quot;#Hibernate之一级缓存&quot; class=&quot;headerlink&quot; title=&quot;Hibernate之一级缓存&quot;&gt;&lt;/a&gt;Hibernate之一级缓存&lt;/h1&gt;&lt;h2 id=&quot;什么是一级缓存&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate中的三种状态</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate中的三种状态/</id>
    <published>2018-04-21T20:22:50.000Z</published>
    <updated>2018-04-21T20:23:09.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate中的三种状态"><a href="#Hibernate中的三种状态" class="headerlink" title="Hibernate中的三种状态"></a>Hibernate中的三种状态</h1><ul>
<li>在Hibernate中可以将实体对象看成3种状态，分别是临时态，持久态，游离态</li>
</ul>
<h2 id="临时态-瞬时态"><a href="#临时态-瞬时态" class="headerlink" title="临时态(瞬时态)"></a>临时态(瞬时态)</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li>临时态的对象可以被垃圾回收</li>
<li>临时态的对象未经过持久化，没有和session关联(没有经过session存储和查找)</li>
</ul>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><ul>
<li>新new出来的对象就是临时态</li>
<li>在Hibernate中,可通过 session的save()或saveOrUpdate()方法将临时对象与数据库相关联,并将数据对应的插入数据库中,此时该临时对象转变成持久化对象.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student st=<span class="keyword">new</span> Student();   <span class="comment">//此时的对象是临时态</span></div><div class="line">st.setName(<span class="string">"陈加兵"</span>);</div></pre></td></tr></table></figure>
<h2 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h2><ul>
<li><p>处于该状态的对象在数据库中具有对应的记录,并拥有一个持久化标识.通过<code>session的get()</code>、<code>load()</code>等方法获得的对象都是持久对象。</p>
</li>
<li><p>持久态的对象与session关联</p>
</li>
<li><p>在数据库中有与之关联的数据</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用get方法获取id=2的对象，此时的Student是持久态</span></div><div class="line">Student student=session.get(Student.class, <span class="number">2</span>);</div></pre></td></tr></table></figure>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><code>session.save()</code>方法将一个临时态的对象转换成持久态</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建的Student对象，这个是临时态对象，并没有数据库关联</span></div><div class="line">Student student = <span class="keyword">new</span> Student();</div><div class="line">student.setAge(<span class="number">22</span>);</div><div class="line">student.setName(<span class="string">"陈加兵"</span>);</div><div class="line"><span class="comment">// 保存数据到数据库，此时的student就是一个持久态的对象，与session有了关联，并且数据库中也有了这条数据</span></div><div class="line">session.save(student);</div></pre></td></tr></table></figure>
<ul>
<li>Session的<code>update()</code>方法 将一个游离对象转变为持久对象<ul>
<li>不能调用<code>save()</code>方法，因为游离态对象在数据库中是对应着一条数据的(数据库中有id的值与其对应)，如果此时调用save()方法，那么就会向其中插入一条数据(此时的主键是自增长的)。因此要想一个游离态的对象变成持久态的对象，必须使用<code>update()</code>方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//此时的student为临时态</span></div><div class="line">			Student student=<span class="keyword">new</span> Student();</div><div class="line">			<span class="comment">//设置了id的值，并且这个id=2在数据库中有这么一条数据，因此是游离态</span></div><div class="line">			student.setId(<span class="number">2</span>);</div><div class="line">			<span class="comment">//调用了update()方法，此时变成持久态的对象</span></div><div class="line">			session.update(student);</div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>只要是这个持久态的对象的数据和数据库中的数据不相同了，不需要主动的调用update()方法，在执行的时候会自动的更新到数据库中。如果比较之后发现对象中的属性是相同的，那么即使调用了update()方法，也不会发出sql的更新语句。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestPersit</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//使用get方法获取id=2的对象，此时的Student是持久态</span></div><div class="line">			Student student=session.get(Student.class, <span class="number">2</span>);</div><div class="line">			<span class="comment">//修改了持久态的对象，这里只要session提交了就会自动更新到数据库中，不需要使用update()方法</span></div><div class="line">			student.setName(<span class="string">"陈加兵"</span>);</div><div class="line">			<span class="comment">//更新Student对象到数据库中，但是student是持久态，因此这里的语句是多余</span></div><div class="line"><span class="comment">//			session.update(student);</span></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Session的lock()方法:   调用lock()方法将对象同Session相关联而不强制更新。</li>
<li>Session的merge()方法:  拷贝指定对象的状态到具有相同对象标识符的持久对象。</li>
<li><p>Session的saveOrUpdate()方法: saveOrUpdate() 方法对于临时对象，执行save()方法，对于游离对象，执行update()方法。</p>
</li>
<li><p>Session的load()和get()方法:  load()方法和get()方法都可以根据对象的标识符加载对象，这两个方法加载的对象都位于Session的缓存中，属于持久对象。</p>
</li>
<li>Session的 delete()方法:      delete()方法用于从数据库中删除与持久化对象对应的记录。如果传入的是一个持久化对象，Session就执行一条 delete语句。如果传入的参数是游离对象，先使分离对象与Session关联，使它变为持久化对象，然后才计划执行一个delete语句。</li>
<li>Session 的evict()方法: evict()方法从Session的缓存中删除一个持久对象。</li>
</ul>
<h2 id="游离态-脱管态"><a href="#游离态-脱管态" class="headerlink" title="游离态(脱管态)"></a>游离态(脱管态)</h2><ul>
<li><p>当与某持久对象关联的session被关闭后,该持久对象转变为游离对象.当游离对象被重新关联到session上 时,又再次转变成持久对象（在Detached其间的改动将被持久化到数据库中）。 游离对象拥有数据库的识别值,但已不在持久化管理范围之内。</p>
</li>
<li><p>对象中有id的值(这个id的值对应数据库中的数据)，但是和session没有关联</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Student student2=<span class="keyword">new</span> Student();</div><div class="line">student.setId(<span class="number">2</span>);  <span class="comment">//设置了id的值，这个id的值在数据库中对应一条记录</span></div><div class="line">student.setName(<span class="string">"陈加兵"</span>);</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/leefengboy/article/details/52723849" target="_blank" rel="external">https://blog.csdn.net/leefengboy/article/details/52723849</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate中的三种状态&quot;&gt;&lt;a href=&quot;#Hibernate中的三种状态&quot; class=&quot;headerlink&quot; title=&quot;Hibernate中的三种状态&quot;&gt;&lt;/a&gt;Hibernate中的三种状态&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Hibernate中可
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate之延迟加载</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%B9%8B%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate之延迟加载/</id>
    <published>2018-04-21T20:22:12.000Z</published>
    <updated>2018-04-21T20:22:33.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hibernate之延迟加载"><a href="#hibernate之延迟加载" class="headerlink" title="hibernate之延迟加载"></a>hibernate之延迟加载</h1><h2 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h2><ul>
<li>在使用某些Hibernate方法查询数据的时候，Hibernate返回的只是一个空对象(除了id外属性都为null)，并没有真正的查询数据库。而是在使用这个对象的时候才会出发查询数据，并将查询到的数据注入到这个空对象中，这种查询时机推迟到对象访问时的机制称之为延迟加载。</li>
</ul>
<ul>
<li>简单的说，使用延迟加载获取的对象，只有在获取其中的除了id之外的属性才会发出sql语句。</li>
</ul>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul>
<li><p>可以提升内存资源的使用率</p>
</li>
<li><p>可以降低对数据库的访问次数</p>
</li>
</ul>
<h2 id="如何使用延迟加载"><a href="#如何使用延迟加载" class="headerlink" title="如何使用延迟加载"></a>如何使用延迟加载</h2><ul>
<li><code>session.load()</code></li>
<li><code>query.iterate()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Testload</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			<span class="comment">//使用延迟加载load()方法获取对象，这里并没有发出sql查询语句，其中除了一个id属性之外没有其他的属性</span></div><div class="line">			Student student=session.load(Student.class,<span class="number">2</span>);</div><div class="line">			<span class="comment">//查询其中的id属性，这里也没有发出查询语句</span></div><div class="line">			System.out.println(student.getId());</div><div class="line">			<span class="comment">//查询对象中的name属性，这里将会发出查询的sql语句</span></div><div class="line">			System.out.println(student.getName());</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="使用延迟加载需要注意的问题"><a href="#使用延迟加载需要注意的问题" class="headerlink" title="使用延迟加载需要注意的问题"></a>使用延迟加载需要注意的问题</h2><ul>
<li><p>采用延迟加载机制的操作，需要避免session的提前关闭。避免在使用对象之前关闭<code>session</code></p>
</li>
<li><p>因为在使用延迟加载的时候并没有发出sql查询语句，只有当使用其中的除了id属性之外的属性才会发出查询语句，因此这里的session不能提前关闭</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hibernate之延迟加载&quot;&gt;&lt;a href=&quot;#hibernate之延迟加载&quot; class=&quot;headerlink&quot; title=&quot;hibernate之延迟加载&quot;&gt;&lt;/a&gt;hibernate之延迟加载&lt;/h1&gt;&lt;h2 id=&quot;什么是延迟加载&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate注解之基本注解的注解使用</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E6%B3%A8%E8%A7%A3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate注解之基本注解的注解使用/</id>
    <published>2018-04-21T20:21:08.000Z</published>
    <updated>2018-04-21T20:21:33.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate注解之基本注解的注解使用"><a href="#Hibernate注解之基本注解的注解使用" class="headerlink" title="Hibernate注解之基本注解的注解使用"></a>Hibernate注解之基本注解的注解使用</h1><h2 id="使用注解须知"><a href="#使用注解须知" class="headerlink" title="使用注解须知"></a>使用注解须知</h2><ul>
<li>我们在使用注解自动创建表的时候，系统会默认为我们创建一张表<code>Hibernate_sequence</code>，我们可以在Hibernate.cfg.xml文件中添加如下语句解决问题<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  配置不生成Hibernate_sequence --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.id.new_generator_mappings"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="类级别注解"><a href="#类级别注解" class="headerlink" title="类级别注解"></a>类级别注解</h2><ol>
<li><p><code>@Entity</code> : 映射实体类，其中有一个name属性指定当前实体类映射的表的名称</p>
<ul>
<li>name: 可选属性 ，指定对应表的名称，<strong>如果没有指定name属性，那么创建表的名称和类名一样</strong></li>
</ul>
</li>
<li><p><code>@Table</code> : 在实体类的上方使用，和Entity配合使用，指定实体类对应的数据库中的表的信息</p>
<ul>
<li>name ：可选，指定表的名称，默认的是和类名一样，只有在不一致的情况下才会指定表名</li>
<li>catalog ： 可选，表示Catalog名称，默认为 Catalog(“”)</li>
<li>schema ： 可选 , 表示 Schema 名称 , 默认为Schema(“”)</li>
</ul>
</li>
</ol>
<h2 id="属性级别的注解"><a href="#属性级别的注解" class="headerlink" title="属性级别的注解"></a>属性级别的注解</h2><ul>
<li><p><strong>属性级别的注解在getXXX()方法上使用</strong></p>
</li>
<li><p>@Id     映射生成主键</p>
</li>
<li><p>@Version    定义乐观锁</p>
</li>
<li><p>@Column     映射表的列</p>
</li>
<li><p>@Transient     定义暂态属性</p>
</li>
</ul>
<h2 id="主键相关的注解"><a href="#主键相关的注解" class="headerlink" title="主键相关的注解"></a>主键相关的注解</h2><ol>
<li><p><code>@id</code>： 指定该属性为主键</p>
</li>
<li><p><code>@GeneratedValue(strategy=,generator=&quot;&quot;)</code> : 主键生成策略</p>
<ul>
<li><p>Strategy的值</p>
<ul>
<li>GenerationType.AUTO - 根据底层数据库自动选择（默认），若数据库支持自动增长类型，则为自动增长。</li>
<li><p>GenerationType.INDENTITY - 根据数据库的Identity字段生成，支持DB2、MySQL、                                        MS、SQL Server、SyBase与HyperanoicSQL数据库的Identity                                          类型主键。</p>
</li>
<li><p>GenerationType.SEQUENCE - 使用Sequence来决定主键的取值，适合Oracle、DB2等                                      支持Sequence的数据库，一般结合@SequenceGenerator使用。</p>
</li>
<li><p>GenerationType.TABLE  - 使用指定表来决定主键取值，结合@TableGenerator使用。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="与非主键相关的注解"><a href="#与非主键相关的注解" class="headerlink" title="与非主键相关的注解"></a>与非主键相关的注解</h2><ol>
<li>@Version - 可以在实体bean中使用@Version注解,通过这种方式可添加对乐观锁定的支持</li>
</ol>
<ol>
<li><p>@Basic - 用于声明属性的存取策略：</p>
<ul>
<li>@Basic(fetch=FetchType.EAGER)   即时获取（默认的存取策略）</li>
<li>@Basic(fetch=FetchType.LAZY)    延迟获取</li>
</ul>
</li>
<li><p>@Temporal</p>
<ul>
<li>这个使用来设置数据库表中显示的日期的精度，因为java中的Date属性可以对应着数据库中的三种类型(DATE,TIME, TIMESTAMP)即是单纯的表示日期，时间，两者兼备的，默认的是两者兼备的，输出的是:2012-01-22 17:55:55</li>
<li>因此可以使用@Temporal来设置显示的时间的精度，这三种的表示形式如下：</li>
<li><code>TemporalType.TIME</code> 输出到数据库中的仅仅是小时格式的，比如:12:22:12</li>
<li><code>TemporalType.DATE</code> 输出到数据库中的是日期的格式：2012-12-01</li>
<li><code>TemporalType.TIMESTAMP</code> 两者兼备，这个是默认的</li>
</ul>
</li>
<li><p>@Column - 可将属性映射到列，使用该注解来覆盖默认值，@Column描述了数据库表中           该字段的详细定义，这对于根据 JPA 注解生成数据库表结构的工具非常有作用。</p>
<ul>
<li><p>name - 可选，表示数据库表中该字段的名称，默认情形属性名称一致</p>
</li>
<li><p>nullable -可选，表示该字段是否允许为 null，默认为true</p>
</li>
<li><p>unique - 可选，表示该字段是否是唯一标识，默认为 false</p>
</li>
<li><p>length - 可选，表示该字段的大小，仅对 String 类型的字段有效，默认值255.</p>
</li>
<li><p>insertable -可选，表示在ORM框架执行插入操作时，该字段是否应出现INSETRT              语句中，默认为 true</p>
</li>
<li><p>updateable -可选，表示在ORM 框架执行更新操作时，该字段是否应该出现在               UPDATE语句中，默认为 true. 对于一经创建就不可以更改的字段，该          属性非常有用，如对于 birthday字段。</p>
</li>
<li><p>columnDefinition - 可选，表示该字段在数据库中的实际类型。通常ORM框架可以根    据属性类型自动判断数据库中字段的类型，但是对于Date类型仍无法确定数据      库中字段类型究竟是 DATE,TIME还是 TIMESTAMP. 此外 ,String 的默认映射类型为VARCHAR, 如果要将 String 类型映射到特定数据库的 BLOB或 TEXT字段类型，该属性非常有用。</p>
</li>
</ul>
</li>
<li><p>@Transient - 可选，表示该属性并非一个到数据库表的字段的映射，ORM框架将忽略该属性，如果一个属性并非数据库表的字段映射，就务必将其标示为@Transient。</p>
<ul>
<li>如果使用这个注解，那么表中不会出现这个字段</li>
</ul>
</li>
</ol>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>我们现在创建一个实体类Teacher，映射到数据库teacher表中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"><span class="keyword">import</span> javax.persistence.Temporal;</div><div class="line"><span class="keyword">import</span> javax.persistence.TemporalType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Transient;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"teacher"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> sal;</div><div class="line">	<span class="keyword">private</span> Date joinDate;</div><div class="line">	<span class="keyword">private</span> String wife;  <span class="comment">//妻子的名字</span></div><div class="line"></div><div class="line">	<span class="meta">@Transient</span>   <span class="comment">//设置该属性不在表中</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> wife;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.wife = wife;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO) <span class="comment">//设置主键自增长</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Temporal</span>(TemporalType.DATE)   <span class="comment">//设置时间精确到天数，2012-01-12</span></div><div class="line">	<span class="meta">@Column</span>(name=<span class="string">"JoinTime"</span>)   <span class="comment">//改变表中字段的名字</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getJoinDate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> joinDate;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Column</span>(nullable=<span class="keyword">false</span>)   <span class="comment">//设置名字不为空</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sal;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(<span class="keyword">double</span> sal)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.sal = sal;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJoinDate</span><span class="params">(Date joinDate)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.joinDate = joinDate;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在核心配置文件(hibernate.cfg.xml)中配置这个映射<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 直接指定这个Teacher实体类的全类名即可，即是完成了映射 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.tedu.bean.Teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate注解之基本注解的注解使用&quot;&gt;&lt;a href=&quot;#Hibernate注解之基本注解的注解使用&quot; class=&quot;headerlink&quot; title=&quot;Hibernate注解之基本注解的注解使用&quot;&gt;&lt;/a&gt;Hibernate注解之基本注解的注解使用&lt;/
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate使用日志(log4j)</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97-log4j/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate使用日志-log4j/</id>
    <published>2018-04-21T20:20:20.000Z</published>
    <updated>2018-04-21T20:20:50.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate使用日志-log4j"><a href="#Hibernate使用日志-log4j" class="headerlink" title="Hibernate使用日志(log4j)"></a>Hibernate使用日志(log4j)</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul>
<li>在pom.xml中添加如下的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="在resource目录下创建log4j-properties文件"><a href="#在resource目录下创建log4j-properties文件" class="headerlink" title="在resource目录下创建log4j.properties文件"></a>在resource目录下创建log4j.properties文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># Direct log messages to a log file</div><div class="line">log4j.appender.file=org.apache.log4j.RollingFileAppender</div><div class="line"># define the log to file</div><div class="line">log4j.appender.file.File=jsnu-log4j.log</div><div class="line"></div><div class="line">log4j.appender.file.MaxFileSize=1MB</div><div class="line">log4j.appender.file.MaxBackupIndex=1</div><div class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.file.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div><div class="line"></div><div class="line"># Direct log messages to stdout</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.Target=System.out</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div><div class="line"></div><div class="line"># Root logger option</div><div class="line">log4j.rootLogger=INFO, file, stdout</div><div class="line"></div><div class="line"># Log everything. Good for troubleshooting</div><div class="line">log4j.logger.org.hibernate=INFO</div><div class="line"></div><div class="line"># Log all JDBC parameters</div><div class="line">log4j.logger.org.hibernate.type=ALL</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate使用日志-log4j&quot;&gt;&lt;a href=&quot;#Hibernate使用日志-log4j&quot; class=&quot;headerlink&quot; title=&quot;Hibernate使用日志(log4j)&quot;&gt;&lt;/a&gt;Hibernate使用日志(log4j)&lt;/h1&gt;&lt;h2
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate常用API</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E5%B8%B8%E7%94%A8API/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate常用API/</id>
    <published>2018-04-21T20:19:37.000Z</published>
    <updated>2018-04-21T20:19:59.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate常用API"><a href="#Hibernate常用API" class="headerlink" title="Hibernate常用API"></a>Hibernate常用API</h1><ol>
<li><p>Configuration ：负责加载核心配置文件</p>
<ul>
<li>加载的默认名字为hibernate.cfg.xml，如果不是这个名字，那么需要指定</li>
<li><code>SessionFactory configuration.buildSessionFactory()</code>  创建SessionFactory</li>
</ul>
</li>
<li><p>SessionFactory ： 用来创建Session(会话)</p>
<ul>
<li><code>Session openSession()</code>   获取Session</li>
</ul>
</li>
<li><p>Session : 数据库连接会话，用来实现增删改查</p>
<ul>
<li><code>save(Object)</code>   增加数据</li>
<li><code>get(Class&lt;T&gt; cls,arg)</code>   根据id查询</li>
<li><code>update(Object object)</code>  更新，一般先要根据条件获取到其中的记录，然后在其对象中修改</li>
<li><code>delete(Object object)</code>  删除</li>
</ul>
</li>
<li><p>Transaction ：负责事务控制</p>
<ul>
<li><code>session.beginTransaction()</code>  开始事务</li>
<li><code>rollback()</code> 回滚</li>
<li><code>commit()</code> 提交事务</li>
</ul>
</li>
<li><p>Query ：执行特殊的查询</p>
</li>
</ol>
<h2 id="增删改查的是实例-Session"><a href="#增删改查的是实例-Session" class="headerlink" title="增删改查的是实例(Session)"></a>增删改查的是实例(Session)</h2><h3 id="创建一个工具类"><a href="#创建一个工具类" class="headerlink" title="创建一个工具类"></a>创建一个工具类</h3><ul>
<li>用于获取Session，相当于JDBC获取Connection<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUntil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 静态语句块中的内容只是在类加载的时候只创建一次，因此这里的大大减少了资源的消耗</div><div class="line">	 */</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">// 加载核心配置文件hibernate.cfg.xml</span></div><div class="line">		configuration = <span class="keyword">new</span> Configuration();</div><div class="line">		configuration.configure();</div><div class="line">		<span class="comment">// 创建SessionFactotry对象</span></div><div class="line">		sessionFactory = configuration.buildSessionFactory();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//创建session对象，在测试类中可以使用这个静态方法获取session</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sessionFactory.openSession();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul>
<li>使用的是Session中的相关方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.tedu.test;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.Transaction;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> cn.tedu.bean.Student;</div><div class="line"><span class="keyword">import</span> cn.tedu.utils.HibernateUntil;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加数据到数据库中</div><div class="line">	 * save(Object object)</div><div class="line">	 * 直接传入的是一个实体类的对象，我们在实体类中设置值，那么设置的值就会根据映射关系文件将其添加到指定的表的字段的值</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			Student student = <span class="keyword">new</span> Student();</div><div class="line">			student.setAge(<span class="number">22</span>);</div><div class="line">			student.setName(<span class="string">"陈加兵"</span>);</div><div class="line">			<span class="comment">// 保存数据到数据库</span></div><div class="line">			session.save(student);</div><div class="line"></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除数据</div><div class="line">	 * 1. 根据id查询出想要删除的对象</div><div class="line">	 * 2. 使用delete(Object obj)  删除</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line">			Student student=session.get(Student.class, <span class="number">1</span>); <span class="comment">//根据id查询想要删除的对象</span></div><div class="line">			session.delete(student);   <span class="comment">//删除查询到的对象</span></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据id查询数据，返回的是一个实体类对象</div><div class="line">	 * get(Class&lt;T&gt; cls,id)</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			<span class="comment">//查询id=1的数据，并且返回对象</span></div><div class="line">			Student student=session.get(Student.class, <span class="number">1</span>);</div><div class="line">			System.out.println(student);</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试更新数据</div><div class="line">	 * 1. 先根据id获取指定的对象 get(Class&lt;T&gt; class,id)</div><div class="line">	 * 2. 使用set方法修改对象中的属性值</div><div class="line">	 * 3. update(Object object) 直接将对象更新即可</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			<span class="comment">//查询id=1的数据，并且返回对象</span></div><div class="line">			Student student=session.get(Student.class, <span class="number">1</span>);</div><div class="line">			student.setName(<span class="string">"Jack"</span>);</div><div class="line">			student.setAge(<span class="number">33</span>);</div><div class="line">			session.update(student);</div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate常用API&quot;&gt;&lt;a href=&quot;#Hibernate常用API&quot; class=&quot;headerlink&quot; title=&quot;Hibernate常用API&quot;&gt;&lt;/a&gt;Hibernate常用API&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Configuration
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate的基本配置</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate的基本配置/</id>
    <published>2018-04-21T20:18:40.000Z</published>
    <updated>2018-04-21T20:19:07.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate的基本配置"><a href="#Hibernate的基本配置" class="headerlink" title="Hibernate的基本配置"></a>Hibernate的基本配置</h1><h2 id="核心配置文件-hibernate-cfg-xml"><a href="#核心配置文件-hibernate-cfg-xml" class="headerlink" title="核心配置文件(hibernate.cfg.xml)"></a>核心配置文件(hibernate.cfg.xml)</h2><ol>
<li>名字为<code>hibernate.cfg.xml</code></li>
<li>放在根目录下(resource)</li>
</ol>
<h3 id="必须的配置-配置数据库信息"><a href="#必须的配置-配置数据库信息" class="headerlink" title="必须的配置(配置数据库信息)"></a>必须的配置(配置数据库信息)</h3><ul>
<li><p><code>hibernate.connection.driver_class</code><br>加载驱动，其中的mysql的为：<code>com.mysql.jdbc.Driver</code></p>
</li>
<li><p><code>hibernate.connection.url</code><br>数据库的连接，其中mysql是<code>jdbc:mysql://localhost:3306/hirbernate</code></p>
</li>
<li><p><code>hibernate.connection.username</code><br>数据库的用户名</p>
</li>
<li><p><code>hibernate.connection.password</code><br>数据库的密码</p>
</li>
<li><p><code>hibernate.dialect</code><br>数据库的方言，其中mysql：<code>org.hibernate.dialect.MySQLDialect</code></p>
</li>
</ul>
<h3 id="可选的配置"><a href="#可选的配置" class="headerlink" title="可选的配置"></a>可选的配置</h3><ul>
<li><p><code>hibernate.show_sql</code><br>输出sql执行的语句到控制台，false，true</p>
</li>
<li><p><code>hibernate.format_sql</code><br>格式化sql语句，true，false</p>
</li>
<li><p><code>hibernate.hbm2ddl.auto</code><br>配置自动生成表，其中有四个值，分别是create（表示hibernate自动创建表，但是每次执行完成之后都会删除上一个表重新创建一个），update（如果还没有表，那么就生成一个，如果已经存在这个表，那么就会更新这个表），validate（不会自动创建表，字段不一致时会出现异常），create-drop（每次加载的时候都会创建表，但是SessionFactory关闭后就会自动删除这个表）。我们使用最多的是update</p>
</li>
<li><p><code>&lt;mapping resource=&quot;com/bean/Student.hbm.xml&quot; /&gt;</code><br>设置映射文件的路径</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 必须要配置的5大参数，4大参数，一个方言 其中的四大参数是连接JDBC必须的参数 这里的方言也是必须的 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hirbernate<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- mysql的方言 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 可选的配置文件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 输出所有的sql语句到控制台 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 在控制台上打印出漂亮的sql语句 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置如果这个表还没有创建，那么就会自动创建，如果已经创建了，那么会自动更新 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 映射配置文件，这里是引用Student类的配置文件，注意这里的配置文件可以有多个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/tedu/bean/Student.hbm.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="映射关系文件"><a href="#映射关系文件" class="headerlink" title="映射关系文件"></a>映射关系文件</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>指定实体类的各个字段与表的关系</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>太麻烦了，一个项目中有很多个实体类，那么我们也需要配置多个映射关系文件</li>
<li>后面会使用注解的方式替代这个映射关系文件</li>
</ul>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol>
<li>每一个实体类对应一个映射配置文件</li>
<li>映射关系文件的名字最好是<code>实体类名.hbm.xml</code>(不强制规定)</li>
<li>最好和实体类放在同一个包中</li>
</ol>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol>
<li><p>class</p>
<ul>
<li>name : 对应的实体类的全类名(包名+类名)</li>
<li>table : 在数据库中对应的表的名称</li>
</ul>
</li>
<li><p>id 指定主键的对应关系，这个mybatis很相似</p>
<ul>
<li>property  : 实体类中的主键的字段</li>
<li>column ： 表中的主键字段</li>
</ul>
</li>
<li><p>property 指定表中其他字段的对应关系</p>
</li>
</ol>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>实体类Student</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>映射关系文件 (Student.hbm.xml)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- name：指定实体类的路径 table：指定该实体类对应的表的名称 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.tedu.bean.Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;id&gt;配置主键，name指定JavaBean中的属性，column指定的是表中的属性 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置主键的生成策略 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- property是定义非主键的类型 name：指定实体类中的属性名称 column：指定实体类中的属性对应在表中的元素的名称 如果这里的name和column相同，那么可以省略这里的colum，不过建议写全，更加清晰 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>如果实体类中的属性和表中的属性字段相同，那么其中的column可以省略，但是建议写全</li>
</ul>
<h2 id="SQL方言"><a href="#SQL方言" class="headerlink" title="SQL方言"></a>SQL方言</h2><ul>
<li>告诉Hibernate你使用的是哪一个数据库，Hibernate便可以根据设定的方言来对应数据库</li>
</ul>
<h3 id="常用的方言-Mysql-Oracle"><a href="#常用的方言-Mysql-Oracle" class="headerlink" title="常用的方言(Mysql,Oracle)"></a>常用的方言(Mysql,Oracle)</h3><ul>
<li>mysql :     <code>org.hibernate.dialect.MySQLDialect</code></li>
<li>Oracle : <code>org.hibernate.dialect.OracleDialect</code></li>
</ul>
<h2 id="主键生成方式"><a href="#主键生成方式" class="headerlink" title="主键生成方式"></a>主键生成方式</h2><ul>
<li>我们在学习mysql的时候，一般都会设置主键为自增长，这个自增长就是主键生成方式</li>
</ul>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul>
<li>主键生成策略是在映射关系文件中定义的，使用的是<code>&lt;generator&gt;</code>定义的</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h3 id="常见的分类"><a href="#常见的分类" class="headerlink" title="常见的分类"></a>常见的分类</h3><ul>
<li><p>sequence： 采用序列方式生成主键，适用于Oracle数据库</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"sequence"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"sequence"</span>&gt;</span>序列名<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>identity</p>
<ul>
<li>是采用数据库自增长机制生成主键，适用于Oracle之外的其他的数据库</li>
</ul>
</li>
<li><ul>
<li>配置语法 ： <code>&lt;generator class=&quot;identity&quot;&gt;&lt;/generator&gt;</code></li>
</ul>
</li>
</ul>
<ul>
<li>native 是根据当前配置的数据库方言，自动选择sequence或者identity<ul>
<li>在mysql的环境下是自增长的方式</li>
<li>配置语法如下：<code>&lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</code></li>
</ul>
</li>
</ul>
<ul>
<li>uuid<br>用一个128-bit的UUID算法生成字符串类型的标识符， 这在一个网络中是唯一的（使用了IP地址）。UUID被编码为一个32位16进制数字的字符串。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate的基本配置&quot;&gt;&lt;a href=&quot;#Hibernate的基本配置&quot; class=&quot;headerlink&quot; title=&quot;Hibernate的基本配置&quot;&gt;&lt;/a&gt;Hibernate的基本配置&lt;/h1&gt;&lt;h2 id=&quot;核心配置文件-hibernate-
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate第一个程序</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate第一个程序/</id>
    <published>2018-04-21T20:18:04.000Z</published>
    <updated>2018-04-21T20:18:22.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hibernate第一个程序"><a href="#Hibernate第一个程序" class="headerlink" title="Hibernate第一个程序"></a>Hibernate第一个程序</h1><h2 id="创建一个Maven项目"><a href="#创建一个Maven项目" class="headerlink" title="创建一个Maven项目"></a>创建一个Maven项目</h2><ul>
<li>在pom.xml中配置Hibernate的jar包<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- hibernate核心jar包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- mysqljar包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建一个实体类-JavaBean"><a href="#创建一个实体类-JavaBean" class="headerlink" title="创建一个实体类(JavaBean)"></a>创建一个实体类(JavaBean)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.tedu.bean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建这个实体类Student的映射文件"><a href="#创建这个实体类Student的映射文件" class="headerlink" title="创建这个实体类Student的映射文件"></a>创建这个实体类Student的映射文件</h2><ol>
<li>这个实体类的映射文件的名字最好要和是：<code>实体类名.hbm.xml</code></li>
<li>映射文件最好和实体类放在同一个包中<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- name：指定实体类的路径 table：指定该实体类对应的表的名称 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.tedu.bean.Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;id&gt;配置主键，name指定JavaBean中的属性，column指定的是表中的属性 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置主键的生成策略 自增长--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- property是定义非主键的类型 name：指定实体类中的属性名称 column：指定实体类中的属性对应在表中的元素的名称 如果这里的name和column相同，那么可以省略这里的colum，不过建议写全，更加清晰 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="核心配置文件-hibernate-cfg-xml"><a href="#核心配置文件-hibernate-cfg-xml" class="headerlink" title="核心配置文件(hibernate.cfg.xml)"></a>核心配置文件(hibernate.cfg.xml)</h2><ol>
<li>核心配置文件的名字是<code>hibernate.cfg.xml</code></li>
<li>放在根目录中，resource下<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 必须要配置的5大参数，4大参数，一个方言 其中的四大参数是连接JDBC必须的参数 这里的方言也是必须的 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hirbernate<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- mysql的方言 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 可选的配置文件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 输出所有的sql语句到控制台 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 在控制台上打印出漂亮的sql语句 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置如果这个表还没有创建，那么就会自动创建，如果已经创建了，那么会自动更新 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 映射配置文件，这里是引用Student类的配置文件，注意这里的配置文件可以有多个 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/tedu/bean/Student.hbm.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="工具类-HibernateUtil"><a href="#工具类-HibernateUtil" class="headerlink" title="工具类(HibernateUtil)"></a>工具类(HibernateUtil)</h2><ul>
<li>用于读取配置文件</li>
<li>获取Session<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUntil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 静态语句块中的内容只是在类加载的时候只创建一次，因此这里的大大减少了资源的消耗</div><div class="line">	 */</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">// 加载核心配置文件hibernate.cfg.xml</span></div><div class="line">		configuration = <span class="keyword">new</span> Configuration();</div><div class="line">		configuration.configure();</div><div class="line">		<span class="comment">// 创建SessionFactotry对象</span></div><div class="line">		sessionFactory = configuration.buildSessionFactory();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//创建session对象，在测试类中可以使用这个静态方法获取session</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sessionFactory.openSession();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><ul>
<li>添加一条记录到数据库中<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.Transaction;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> cn.tedu.bean.Student;</div><div class="line"><span class="keyword">import</span> cn.tedu.utils.HibernateUntil;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line">		Transaction transaction = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建session</span></div><div class="line">			session = HibernateUntil.getSession();</div><div class="line">			<span class="comment">// 开始事务</span></div><div class="line">			transaction = session.beginTransaction();</div><div class="line"></div><div class="line">			Student student = <span class="keyword">new</span> Student();</div><div class="line">			student.setAge(<span class="number">22</span>);</div><div class="line">			student.setName(<span class="string">"陈加兵"</span>);</div><div class="line">			<span class="comment">// 保存数据到数据库</span></div><div class="line">			session.save(student);</div><div class="line"></div><div class="line">			<span class="comment">// 提交事务</span></div><div class="line">			transaction.commit();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			transaction.rollback(); <span class="comment">// 事务回滚</span></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (session!=<span class="keyword">null</span>) &#123;</div><div class="line">				session.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>核心配置文件名字一定要是: hibernate.cfg.xml</li>
<li>实体类的配置文件要和实体类最好放在同一个包中</li>
<li>运行测试类，我student表将会自动创建，在控制台还会输出sql语句</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate第一个程序&quot;&gt;&lt;a href=&quot;#Hibernate第一个程序&quot; class=&quot;headerlink&quot; title=&quot;Hibernate第一个程序&quot;&gt;&lt;/a&gt;Hibernate第一个程序&lt;/h1&gt;&lt;h2 id=&quot;创建一个Maven项目&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate简介</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/Hibernate%E7%AE%80%E4%BB%8B/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/Hibernate简介/</id>
    <published>2018-04-21T20:16:59.000Z</published>
    <updated>2018-04-21T20:17:40.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hibernate简介"><a href="#hibernate简介" class="headerlink" title="hibernate简介"></a>hibernate简介</h1><h2 id="什么是hibernate"><a href="#什么是hibernate" class="headerlink" title="什么是hibernate"></a>什么是hibernate</h2><ul>
<li>hibernate是数据访问层的框架，对JDBC进行了封装，是针对数据库访问提出的面向对象的解决方案</li>
</ul>
<h2 id="Hibernate的作用"><a href="#Hibernate的作用" class="headerlink" title="Hibernate的作用"></a>Hibernate的作用</h2><ul>
<li>使用Hibrenate可以直接访问对象，从hierbnate自动将此访问转换成SQL执行，从而达到间接访问数据库的目的，简化了数据访问层的代码开发</li>
</ul>
<h2 id="hibernate与JDBC对比"><a href="#hibernate与JDBC对比" class="headerlink" title="hibernate与JDBC对比"></a>hibernate与JDBC对比</h2><h3 id="使用JDBC具有以下缺点"><a href="#使用JDBC具有以下缺点" class="headerlink" title="使用JDBC具有以下缺点"></a>使用JDBC具有以下缺点</h3><ol>
<li>需要编写大量SQL语句</li>
<li>需要给大量的占位符<code>?</code>赋值</li>
<li>需要将ResultSet结果集转换成实体对象</li>
<li>SQL中包含特有函数，无法移植</li>
</ol>
<h3 id="使用Hibernante的优点"><a href="#使用Hibernante的优点" class="headerlink" title="使用Hibernante的优点"></a>使用Hibernante的优点</h3><ol>
<li>自动生成SQL语句</li>
<li>自动给？参数赋值</li>
<li>自动将ResultSet结果集转换成实体对象</li>
<li>采用一致的方法对数据库操作，移植性好</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>简单的来说，hibernate对JDBC进行了封装，比如JDBCTemplate可以简便的操作数据库，底层还是使用了JDBC</li>
</ul>
<h2 id="Hibernate与Mybatis的对比"><a href="#Hibernate与Mybatis的对比" class="headerlink" title="Hibernate与Mybatis的对比"></a>Hibernate与Mybatis的对比</h2><h3 id="共性"><a href="#共性" class="headerlink" title="共性"></a>共性</h3><ul>
<li>对JDBC进行了封装</li>
<li>采用ORM思想解决了Entity和数据库的映射问题</li>
</ul>
<h3 id="MyBaits"><a href="#MyBaits" class="headerlink" title="MyBaits"></a>MyBaits</h3><ul>
<li>Mybatis采用SQL与Entity映射，对JDBC封装成都较轻</li>
<li>Mybatis需要程序猿自己写sql语句，更具灵活性</li>
</ul>
<h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><ul>
<li>Hibernate采用数据库和Entity映射。对JDBC封装程度较重<br>Hibernate自动生成SQL，对于基本的操作，开发效率高</li>
</ul>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>Hibernate对JDBC的封装较重，程序猿不需要写SQL语句，比如写好映射关系就可以自动创建表，使用JDBCTemplate直接操作数据库</li>
</ul>
<h2 id="Hibernate框架设计原理"><a href="#Hibernate框架设计原理" class="headerlink" title="Hibernate框架设计原理"></a>Hibernate框架设计原理</h2><h3 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h3><ul>
<li>Hibernate采用了ORM思想对JDBC进行了封装</li>
<li>Hibernate框架是ORM思想的一种体现，解决了对象和数据库映射问题</li>
<li>Hibernate提供了一系列的API，允许我们直接访问实体对象，然后其根据ORM映射关系，转换成SQL并且去执行，从而达到访问数据库的目的</li>
</ul>
<h3 id="ORM思想"><a href="#ORM思想" class="headerlink" title="ORM思想"></a>ORM思想</h3><ul>
<li>ORM： Object Relation Mapping，即是对象关系映射，指的是java独享和关系数据库之间的映射</li>
<li>ORM思想： 就是将对象与数据库进行相互转换的思想，不同的框架技术实现ORM的手段不同，但更多的是采用配置+反射的方式ORM</li>
</ul>
<h2 id="hibernate文档"><a href="#hibernate文档" class="headerlink" title="hibernate文档"></a>hibernate文档</h2><ul>
<li><a href="http://docs.jboss.org/hibernate/orm/3.5/reference/zh-CN/html/session-configuration.html#configuration-sessionfactory" target="_blank" rel="external">http://docs.jboss.org/hibernate/orm/3.5/reference/zh-CN/html/session-configuration.html#configuration-sessionfactory</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hibernate简介&quot;&gt;&lt;a href=&quot;#hibernate简介&quot; class=&quot;headerlink&quot; title=&quot;hibernate简介&quot;&gt;&lt;/a&gt;hibernate简介&lt;/h1&gt;&lt;h2 id=&quot;什么是hibernate&quot;&gt;&lt;a href=&quot;#什么是hi
    
    </summary>
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://chenjiabing666.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>自己写springmvc框架</title>
    <link href="http://chenjiabing666.github.io/2018/04/22/%E8%87%AA%E5%B7%B1%E5%86%99springmvc%E6%A1%86%E6%9E%B6/"/>
    <id>http://chenjiabing666.github.io/2018/04/22/自己写springmvc框架/</id>
    <published>2018-04-21T20:15:32.000Z</published>
    <updated>2018-04-21T20:16:17.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的springmvc框架"><a href="#简易的springmvc框架" class="headerlink" title="简易的springmvc框架"></a>简易的springmvc框架</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ol>
<li><p>表示层(视图层，显示层)</p>
<ul>
<li>jsp</li>
<li>servlet</li>
</ul>
</li>
<li><p>业务逻辑层</p>
<ul>
<li>service</li>
</ul>
</li>
<li><p>数据访问层(持久层)</p>
<ul>
<li>dao</li>
</ul>
</li>
</ol>
<h2 id="什么是mvc"><a href="#什么是mvc" class="headerlink" title="什么是mvc"></a>什么是mvc</h2><ul>
<li>Model View Controller</li>
<li><p>是一种架构思想，其核心思想将项目划分成三种不同模块，分别是模型，视图，控制器</p>
<ul>
<li>模型： 负责封装业务逻辑和数据访问</li>
<li>控制器： 负责调度</li>
<li>视图： 负责显示</li>
</ul>
</li>
<li><p>View : JSP  负责显示</p>
</li>
<li>Controller :控制器 起到调度分发请求</li>
<li>Model ： 模型层 代表除了Servlet，Controller之外的java代码，包括service，dao</li>
</ul>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul>
<li>项目的可维护性，可扩展性更高，抽取service</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><ol>
<li>首先需要一个RequestMapping注解</li>
<li>创建前端控制器DispatcherServlet用来转发请求</li>
<li>创建视图解析器来对应不同的页面</li>
</ol>
<h3 id="创建注解RequestMapping"><a href="#创建注解RequestMapping" class="headerlink" title="创建注解RequestMapping"></a>创建注解RequestMapping</h3><ul>
<li>使用@Target可以设置这个注解在方法体上还是在类上使用，这里我们只是在方法体上使用，这个和Springmvc有点出入<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)   <span class="comment">//设置这个注解是给方法使用的</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  <span class="comment">//设置注解的存在时间为运行时</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</div><div class="line">	<span class="comment">//设置传入的参数</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span></span>;   <span class="comment">//设置一个参数 ，必须传入参数 如果添加 default "" ,那么默认的参数就是空字符串</span></div><div class="line">	<span class="comment">//public String method() default "get";   //设置method参数，默认的是get方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建Handler类"><a href="#创建Handler类" class="headerlink" title="创建Handler类"></a>创建Handler类</h3><ul>
<li>用来保存反射调用的方法和对象<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Method method; <span class="comment">// 方法</span></div><div class="line">	<span class="keyword">private</span> Object object; <span class="comment">// Object对象，用于反射调用方法method</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Method method, Object object)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.method = method;</div><div class="line">		<span class="keyword">this</span>.object = object;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> method;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethod</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.method = method;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> object;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.object = object;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Handler [method="</span> + method + <span class="string">", object="</span> + object + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="config-xml-resource目录下"><a href="#config-xml-resource目录下" class="headerlink" title="config.xml(resource目录下)"></a>config.xml(resource目录下)</h3><ul>
<li>用来存放bean，不同的controller类都需要在这个配置文件重视配置<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans&gt;</div><div class="line">	&lt;bean class="cn.controller.UserController"&gt;&lt;/bean&gt;</div><div class="line">	&lt;bean class="cn.controller.DeptController"&gt;&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="XMLUtils"><a href="#XMLUtils" class="headerlink" title="XMLUtils"></a>XMLUtils</h3><ul>
<li><p>解析config.xml的文件，使用的是Dom4j</p>
</li>
<li><p>在pom.xml中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 读取xml文件的jar包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>解析xml文件的工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.dom4j.Document;</div><div class="line"><span class="keyword">import</span> org.dom4j.Element;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.reflect.ReflectDemo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取XML文件的工具类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLUtils</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 读取xml文件中的内容,使用的jar包是dom4j</div><div class="line">	 * <span class="doctag">@return</span> xml配置文件中的所有bean的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title">getBeans</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		SAXReader reader=<span class="keyword">new</span> SAXReader();</div><div class="line">		InputStream inputStream=ReflectDemo.class.getClassLoader().getResourceAsStream(<span class="string">"config.xml"</span>);  <span class="comment">//获取输入流</span></div><div class="line">		Document document=reader.read(inputStream);</div><div class="line">		<span class="comment">//得到根节点</span></div><div class="line">		Element beansEle=document.getRootElement();</div><div class="line">		<span class="comment">//得到根节点下面的所有子节点</span></div><div class="line">		List&lt;Element&gt; elements=beansEle.elements();</div><div class="line"></div><div class="line">		List&lt;Object&gt; beans=<span class="keyword">new</span> ArrayList&lt;Object&gt;();   <span class="comment">//保存bean中的class属性创建的对象</span></div><div class="line">		<span class="comment">//遍历子节点</span></div><div class="line">		<span class="keyword">for</span> (Element element : elements) &#123;</div><div class="line">			<span class="comment">//得到class属性的值</span></div><div class="line">			String className=element.attributeValue(<span class="string">"class"</span>);</div><div class="line">			<span class="comment">//直接使用遍历的className创建对象并且保存在集合中</span></div><div class="line">			Class cls=Class.forName(className);</div><div class="line">			Object bean=cls.newInstance();</div><div class="line">			beans.add(bean);   <span class="comment">//将创建的对象添加到集合中</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> beans;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h3><ul>
<li>读取config.xml中的bean，并且利用反射获取注解上的value值(请求路径)、方法、创建类。存储在Map中<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.dom4j.Document;</div><div class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</div><div class="line"><span class="keyword">import</span> org.dom4j.Element;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cn.annoation.RequestMapping;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMapping</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Map&lt;String, Handler&gt; map = <span class="keyword">new</span> HashMap&lt;String, Handler&gt;(); <span class="comment">// 创建一个Map存储path和Handler</span></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化方法，将指定类的带有注解的方法放入Map中</div><div class="line">	 * <span class="doctag">@param</span> beans  对象集合</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(List&lt;Object&gt; beans)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (Object bean : beans) &#123;</div><div class="line">			Class cls=bean.getClass();</div><div class="line">			<span class="comment">//获取所有方法</span></div><div class="line">			Method[] methods=cls.getDeclaredMethods();</div><div class="line">			<span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">				RequestMapping requestMapping=method.getAnnotation(RequestMapping.class);</div><div class="line">				<span class="comment">//如果方法上面存在RequestMapping注解</span></div><div class="line">				<span class="keyword">if</span> (requestMapping!=<span class="keyword">null</span>) &#123;</div><div class="line">					String path=requestMapping.value();  <span class="comment">//获取注解上的地址</span></div><div class="line">					Handler handler=<span class="keyword">new</span> Handler(method, bean);  <span class="comment">//创建handler对象</span></div><div class="line">					map.put(path, handler);  <span class="comment">//存放键值对</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据给定的path返回一个Handler对象</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> path</div><div class="line">	 *            指定的路径，map中的key</div><div class="line">	 * <span class="doctag">@return</span> Handler 对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> map.get(path);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><ul>
<li>根据controller方法中的返回值转发或者重定向到指定的视图<ul>
<li>默认是转发的</li>
<li>重定向需要使用: <code>redirect:add.do</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewResolver</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 视图解析器</div><div class="line">	 * <span class="doctag">@param</span> returnValue   controller方法的返回值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object returnValue, HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) &#123;</div><div class="line">		String path=(String)returnValue;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//判断是转发还是重定向</span></div><div class="line">			<span class="keyword">if</span> (path.startsWith(<span class="string">"redirect:"</span>)) &#123;   <span class="comment">//重定向</span></div><div class="line">					response.sendRedirect(request.getContextPath()+<span class="string">"/"</span>+path.split(<span class="string">":"</span>)[<span class="number">1</span>]);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;   <span class="comment">//转发</span></div><div class="line">					request.getRequestDispatcher(<span class="string">"/WEB-INF/"</span>+path+<span class="string">".jsp"</span>).forward(request, response);</div><div class="line">				&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><ul>
<li>前端控制器，其实是一个Servlet，不过用来拦截<em>.do的请求，因此需要在web.xml中配置`<url-pattern></url-pattern></em>.do`</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> cn.reflect.Handler;</div><div class="line"><span class="keyword">import</span> cn.reflect.HandlerMapping;</div><div class="line"><span class="keyword">import</span> cn.reflect.ViewResolver;</div><div class="line"><span class="keyword">import</span> cn.utils.XMLUtils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class DispatcherServlet</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		List&lt;Object&gt; beans;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			beans = XMLUtils.getBeans();<span class="comment">// 获取xml配置文件中所有bean的对象</span></div><div class="line">			HandlerMapping handlerMapping = <span class="keyword">new</span> HandlerMapping();</div><div class="line">			String uri = request.getRequestURI(); <span class="comment">// 请求地址</span></div><div class="line">			String appName = request.getContextPath(); <span class="comment">// 工程名</span></div><div class="line">			String path = uri.replace(appName, <span class="string">""</span>); <span class="comment">// 获取注解的path</span></div><div class="line">			handlerMapping.init(beans); <span class="comment">// 初始化</span></div><div class="line">			Handler handler = handlerMapping.getHandler(path); <span class="comment">// 获取指定的Handler</span></div><div class="line">			Method method = handler.getMethod();</div><div class="line">			Object object = handler.getObject();</div><div class="line">			Class[] paramTypes = method.getParameterTypes(); <span class="comment">// 获取方法中的参数类型</span></div><div class="line">			Object returnValue=<span class="keyword">null</span>;  <span class="comment">//申明目标方法的返回值</span></div><div class="line">			<span class="comment">// 如果调用的方法有参数</span></div><div class="line">			<span class="keyword">if</span> (paramTypes.length &gt; <span class="number">0</span>) &#123;</div><div class="line">				Object[] args = <span class="keyword">new</span> Object[paramTypes.length];   <span class="comment">//创建参数列表</span></div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</div><div class="line">					Class cls = paramTypes[i];</div><div class="line">					<span class="comment">// 判断类型是request或者response</span></div><div class="line">					<span class="keyword">if</span> (cls == HttpServletRequest.class) &#123;</div><div class="line">						args[i] = request;</div><div class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cls == HttpServletResponse.class) &#123;</div><div class="line">						args[i] = response;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				returnValue=method.invoke(object, args);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				returnValue=method.invoke(handler.getObject()); <span class="comment">// 调用方法执行</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">//有返回值，要么转发，要么重定向</span></div><div class="line">			<span class="keyword">if</span> (returnValue!=<span class="keyword">null</span>) &#123;</div><div class="line">				<span class="comment">//通过视图解析器对象，处理转发或者重定向</span></div><div class="line">				ViewResolver viewResolver=<span class="keyword">new</span> ViewResolver();</div><div class="line">				viewResolver.process(returnValue,request,response);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简易的springmvc框架&quot;&gt;&lt;a href=&quot;#简易的springmvc框架&quot; class=&quot;headerlink&quot; title=&quot;简易的springmvc框架&quot;&gt;&lt;/a&gt;简易的springmvc框架&lt;/h1&gt;&lt;h2 id=&quot;三层架构&quot;&gt;&lt;a href=&quot;#三
    
    </summary>
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之适配器模式/</id>
    <published>2018-04-16T05:56:28.000Z</published>
    <updated>2018-04-18T00:07:52.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式之适配器模式"><a href="#结构型模式之适配器模式" class="headerlink" title="结构型模式之适配器模式"></a>结构型模式之适配器模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>适配器模式用于将一个接口转化成客户想要的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/adapeter1.png" alt="适配器模式"></p>
<ul>
<li>Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li>
<li>Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</li>
<li><p>Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</p>
</li>
<li><p>根据对象适配器模式结构图，在对象适配器中，客户端需要调用request()方法，而适配者类Adaptee没有该方法，但是它所提供的specificRequest()方法却是客户端所需要的。为了使客户端能够使用适配者类，需要提供一个包装类Adapter，即适配器类。这个包装类包装了一个适配者的实例，从而将客户端与适配者衔接起来，在适配器的request()方法中调用适配者的specificRequest()方法。因为适配器类与适配者类是关联关系（也可称之为委派关系），所以这种适配器模式称为对象适配器模式</p>
</li>
</ul>
<h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><ul>
<li><p>类适配器是继承适配者类实现的，其中对象适配器是使用组合的方式实现的，就是适配者类作为适配器类的成员变量而实现的</p>
</li>
<li><p>一般目标抽象类是一个接口，适配者类一般是一个具体的实现类，有时候甚至不知道其中的源代码，因此需要适配器类将适配者类转换成适合用户的目标类</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>我们知道笔记本充电的电压是5v，但是我们的高压电是220v，那么我们此时就需要一个适配器将这个220v电压转换成为5v的电压给笔记本充电<ul>
<li>这里的220v电压就是适配者类，即是需要转换的类</li>
<li>5v电压是目标抽象类，由适配器将220v转换而来</li>
<li>这里的适配器类的主要功能就是将220v电压转换成5v电压</li>
</ul>
</li>
</ul>
<ul>
<li>目标接口(5v电压)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 接口为5v电压的接口  ，  这个目标抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Power5</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>220v电压的类（这里是一个具体的类，适配者类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Power220</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower220</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"正在输出220v电压....."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>适配器类（将220v电压转换成5v）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 适配器类，主要的目的就是将220v电压转换为5v的电压供笔记本充电</div><div class="line"> * 其中Power5是目标抽象接口，是最终需要的接口，Power220是一个适配者类，是已经存在的，只需要适配器转换即可</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPower5</span> <span class="keyword">extends</span> <span class="title">Power220</span> <span class="keyword">implements</span> <span class="title">Power5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 重载Power5中的方法，获取需要的5v电压</div><div class="line">	 * 过程： 先获取220v电压，然后进行转换即可</div><div class="line">	 * 	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.getPower220();   <span class="comment">//首先获取220v电压</span></div><div class="line">		<span class="keyword">this</span>.transform();   <span class="comment">//将220v电压转换成5v的电压</span></div><div class="line">		System.out.println(<span class="string">"获取5v电压......."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 将220v电压转换成5v电压的方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"现在将220v电压转换成5v电压......."</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>笔记本充电的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 笔记本类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteBook</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 笔记本充电的方法</div><div class="line">	 * <span class="doctag">@param</span> power5   电压为5v的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PowerOn</span><span class="params">(Power5 power5)</span></span>&#123;</div><div class="line">		power5.getPower5();   <span class="comment">//获取5v电压</span></div><div class="line">		System.out.println(<span class="string">"笔记本获取了5v的电压，正在开始充电......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		NoteBook noteBook=<span class="keyword">new</span> NoteBook();   <span class="comment">//创建笔记本的类</span></div><div class="line">		noteBook.PowerOn(<span class="keyword">new</span> AdapterPower5());   <span class="comment">//调用笔记本充电的类</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><ul>
<li>对象适配器是将适配者类作为适配器类的成员变量并不是继承，这个是一种组合方式</li>
<li>这种方式使用的更加普遍</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>这里的实例还是前面的例子</p>
</li>
<li><p>这里唯一不同的就是适配器类，不是继承适配者类，而是使用组合的方式</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 适配器类，这个是对象适配器，适配者类是作为成员变量存在，是组合关系</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Power5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Power220 power;   <span class="comment">//220v电压类的对象，作为成员变量</span></div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 构造方法，主要是为类初始化Power220v的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Power220 power)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.power=power;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span> </span>&#123;</div><div class="line">		power.getPower220();   <span class="comment">//获取220v电压</span></div><div class="line">		transform();   <span class="comment">//转换电压</span></div><div class="line">		System.out.println(<span class="string">"正在输出5v电压......."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"将220v电压转换成5v的电压......"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>类适配器是使用类继承的方式，适配器类继承适配者类(不提倡使用)</p>
</li>
<li><p>对象适配器使用的是一种组合的方式，将适配者类作为其中的成员变量，那么也是可以实现（提倡使用）</p>
</li>
</ul>
<h2 id="麻烦支持下博主的广告事业，点击下即可"><a href="#麻烦支持下博主的广告事业，点击下即可" class="headerlink" title="麻烦支持下博主的广告事业，点击下即可"></a>麻烦支持下博主的广告事业，点击下即可</h2><p><a href="http://click.linktech.cn/?m=huaweivmall&amp;a=A100234624&amp;l=02300&amp;l_cd1=0&amp;l_cd2=0&amp;u_id=chenjiabing" target="_blank" rel="external"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" alt="alt text" title="title"></a></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02303&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmall/20171225/640x240.jpg" width="450" height="240" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02303&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02302&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171219/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02302&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构型模式之适配器模式&quot;&gt;&lt;a href=&quot;#结构型模式之适配器模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式之适配器模式&quot;&gt;&lt;/a&gt;结构型模式之适配器模式&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;head
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥接模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之桥接模式/</id>
    <published>2018-04-16T05:55:29.000Z</published>
    <updated>2018-04-16T05:57:07.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式之桥接模式"><a href="#结构型模式之桥接模式" class="headerlink" title="结构型模式之桥接模式"></a>结构型模式之桥接模式</h1><ul>
<li><p>桥接模式是一种很实用的结构型设计模式，如果软件系统中某个类存在两个独立变化的维度，通过该模式可以将这两个维度分离出来，使两者可以独立扩展，让系统更加符合“单一职责原则”。与多层继承方案不同，它将两个独立变化的维度设计为两个独立的继承等级结构，并且在抽象层建立一个抽象关联，该关联关系类似一条连接两个独立继承结构的桥，故名桥接模式。</p>
</li>
<li><p>桥接模式用一种巧妙的方式处理多层继承存在的问题，用抽象关联取代了传统的多层继承，将类之间的静态继承关系转换为动态的对象组合关系，使得系统更加灵活，并易于扩展，同时有效控制了系统中类的个数。桥接定义如下：</p>
</li>
<li><p>桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/bridge1.png" alt="桥接模式"></p>
<ul>
<li><p>在桥接模式结构图中包含如下几个角色：</p>
<ul>
<li>Abstraction（抽象类）：用于定义抽象类的接口，它一般是抽象类而不是接口，其中定义了一个Implementor（实现类接口）类型的对象并可以维护该对象，它与Implementor之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。</li>
<li>RefinedAbstraction（扩充抽象类）：扩充由Abstraction定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法。</li>
<li>Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同，一般而言，Implementor接口仅提供基本操作，而Abstraction定义的接口可能会做更多更复杂的操作。Implementor接口对这些基本操作进行了声明，而具体实现交给其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调用到Implementor中定义的方法，使用关联关系来替代继承关系。</li>
<li>ConcreteImplementor（具体实现类）：具体实现Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplementor对象将替换其父类对象，提供给抽象类具体的业务操作方法。</li>
</ul>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="http://ono60m7tl.bkt.clouddn.com/bridge2.png" alt="实例"></p>
<ul>
<li><p>从上面的这个实例我们可以看出，如果使用多层继承的话，那么我们可以定义是三个抽象类（台式机，笔记本，平板电脑），在这个三个抽象类的下面每个都有三个不同品牌的具体实现类，那么总共要有3x3=9个具体的实现类。不仅仅是类的数量多，在扩展性能上也是成倍的增加，如果想要添加一个品牌，那么需要添加三个类，这个是极其浪费的。</p>
</li>
<li><p>针对上面的缺点，我们可以使用桥接模式，将电脑分类，品牌分类分成两个维度，如下图：<br><img src="http://ono60m7tl.bkt.clouddn.com/bridge3.png" alt=""></p>
</li>
<li><p>其中Computer是一个抽象类，不是接口，其中Brand（品牌）是其中的成员变量，我们就完成了一个电脑具有不同品牌，那么如果我们想添加一个品牌，就只是添加一个具体的实现类即可，就不需要添加三个了。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构型模式之桥接模式&quot;&gt;&lt;a href=&quot;#结构型模式之桥接模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式之桥接模式&quot;&gt;&lt;/a&gt;结构型模式之桥接模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;桥接模式是一种很实用的结构型设计模式，如果软件系统中某个类
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之原型模式/</id>
    <published>2018-04-16T05:53:04.000Z</published>
    <updated>2018-04-16T05:54:03.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之原型模式"><a href="#创建型模式之原型模式" class="headerlink" title="创建型模式之原型模式"></a>创建型模式之原型模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
</li>
<li><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要    在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
</li>
<li><p>原型模式可以分为浅克隆和深度克隆</p>
</li>
</ul>
<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p><img src="http://ono60m7tl.bkt.clouddn.com/property1.png" alt="角色"></p>
<h2 id="java语言中实现克隆的两种方式"><a href="#java语言中实现克隆的两种方式" class="headerlink" title="java语言中实现克隆的两种方式"></a>java语言中实现克隆的两种方式</h2><ol>
<li><p>直接创建一个对象，然后设置成员变量的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Obj obj=<span class="keyword">new</span> Obj(); <span class="comment">//创建一个新的对象</span></div><div class="line">obj.setName(<span class="keyword">this</span>.name);   <span class="comment">//设置其中变量的值</span></div><div class="line">obj.setAge(<span class="keyword">this</span>.age);</div></pre></td></tr></table></figure>
</li>
<li><p>实现cloneable接口</p>
</li>
</ol>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property2.png" alt=""></p>
<h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><ul>
<li><p>如果克隆的对象的成员变量是值类型的，比如int，double那么使用浅克隆就可以实现克隆完整的原型对象，但是如果其中的成员变量有引用类型的，那么这个引用类型的克隆过去的其实是地址，克隆对象的这个引用类型变量改变了，那么原来变量的值也是会改变的。</p>
</li>
<li><p>简单的说，浅克隆只能复制值类型的，对于引用类型的数据只能复制地址</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property3.png" alt="浅克隆"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>一个公司出版周报，那么这个周报的格式一般是相同的，只是将其中的内容稍作修改即可。但是一开始没有这个原型，员工每周都需要重新手写这个周报，现在有了这个周报的原型，只需要在这个clone这个原型，然后在其基础上修改即可。</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property4.png" alt="周报"></p>
<ul>
<li>其中的Cloneable就是抽象原型类</li>
</ul>
<ul>
<li>附件类（这个是一个引用类型的对象，验证浅克隆只是复制其中的地址，如果两个对象中的任何一个改变了这个变量的值，那么另外一个也会随之改变）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 附件类，这个是周报的附件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 名称</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Attachment</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>周报的类（其中实现了Cloneable接口）<ul>
<li>其中的clone()方法返回的就是一个克隆的对象，因此我们调用这个方法克隆一个新的对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这个是周报类，这个类是实现接口Prototype这个接口的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeeklyLog</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 姓名</span></div><div class="line">	<span class="keyword">private</span> String date; <span class="comment">// 日期</span></div><div class="line">	<span class="keyword">private</span> String content; <span class="comment">// 内容</span></div><div class="line">	<span class="keyword">private</span> Attachment attachment;  <span class="comment">//附件，是一个引用对象，这个只能实现浅克隆</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">(String name, String date, String content)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.date = date;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 提供一个clone方法，返回的是一个clone对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> WeeklyLog <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">		Object object = <span class="keyword">null</span>; <span class="comment">// 创建一个Object对象</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			object = <span class="keyword">super</span>.clone(); <span class="comment">// 直接调用clone方法，复制对象</span></div><div class="line">			<span class="keyword">return</span> (WeeklyLog) object; <span class="comment">// 返回即可</span></div><div class="line">		&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">			System.out.println(<span class="string">"这个对象不能复制....."</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类<ul>
<li>测试浅克隆的值类型是是否完成复制了</li>
<li>测试引用类型的值能否完成克隆，还是只是复制了一个引用地址</li>
<li>从结果来看，对象是完成复制了，因为判断两个对象的地址是不一样的，但是其中的引用类型的成员变量没有完成复制，只是复制了一个地址</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line"></div><div class="line">		WeeklyLog p1 = <span class="keyword">new</span> WeeklyLog(<span class="string">"陈加兵"</span>, <span class="string">"第一周"</span>, <span class="string">"获得劳动模范的称号..."</span>); <span class="comment">// 创建一个对象</span></div><div class="line">		Attachment attachment = <span class="keyword">new</span> Attachment(<span class="string">"消息"</span>);</div><div class="line">		p1.setAttachment(attachment); <span class="comment">// 添加附件</span></div><div class="line">		WeeklyLog p2 = p1.clone();</div><div class="line">		System.out.println(p1 == p2); <span class="comment">// 判断是否正确</span></div><div class="line">		p2.setName(<span class="string">"Jack"</span>); <span class="comment">// 修改P2对象的内容</span></div><div class="line">		p2.setDate(<span class="string">"第二周"</span>);</div><div class="line">		p2.setContent(<span class="string">"工作认真....."</span>);</div><div class="line">		System.out.println(p2.getName());</div><div class="line">		<span class="comment">// 返回true，可以知道这两个附件的地址是一样的</span></div><div class="line">		System.out.println(p1.getAttachment() == p2.getAttachment());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>浅克隆对于值类型的数据可以复制成功，但是对于引用卡类型的数据只能复制一个地址，如果一个对象中的引用类型的变量的值改变了，那么另外一个也会随之改变</li>
</ul>
<h2 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h2><ul>
<li>浅克隆只能完成复制值类型，深度克隆可以完成复制引用类型和值类型</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property5.png" alt="深度克隆"></p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol>
<li>引用类型的变量类实现序列化(实现Serializabl接口）</li>
<li>需要克隆的类实现序列化(实现Serializable接口)</li>
</ol>
<h3 id="为什么实现序列化"><a href="#为什么实现序列化" class="headerlink" title="为什么实现序列化"></a>为什么实现序列化</h3><ul>
<li>因为深度克隆的实现的原理是使用输入和输出流，如果想要将一个对象使用输入和输出流克隆，必须序列化。</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>附件类(引用类型的成员变量，实现序列化)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 附件类，这个是周报的附件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">799959163401886355L</span>;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Attachment</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>周报类（需要克隆的类，因为其中有引用类型的成员变量，因此需要实现序列化)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这个是周报类，这个类是实现接口Prototype这个接口的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeeklyLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8782492113927035907L</span>;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 姓名</span></div><div class="line">	<span class="keyword">private</span> String date; <span class="comment">// 日期</span></div><div class="line">	<span class="keyword">private</span> String content; <span class="comment">// 内容</span></div><div class="line">	<span class="keyword">private</span> Attachment attachment; <span class="comment">// 附件，是一个引用对象，这个只能实现浅克隆</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">(String name, String date, String content)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.date = date;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 提供一个clone方法，返回的是一个clone对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> WeeklyLog <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 将对象写入到对象流中</span></div><div class="line">		ByteArrayOutputStream arrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(</div><div class="line">					arrayOutputStream); <span class="comment">// 创建对象输出流</span></div><div class="line">			objectOutputStream.writeObject(<span class="keyword">this</span>); <span class="comment">// 将这个类的对象写入到输出流中</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 将对象从流中读出</span></div><div class="line">		ByteArrayInputStream arrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(</div><div class="line">				arrayOutputStream.toByteArray());</div><div class="line">		WeeklyLog weeklyLog;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(</div><div class="line">					arrayInputStream);<span class="comment">// 新建对象输入流</span></div><div class="line">			weeklyLog = (WeeklyLog) objectInputStream.readObject(); <span class="comment">// 读取对象从流中</span></div><div class="line">			<span class="keyword">return</span> weeklyLog;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<ul>
<li>从中可以看出其中的附件地址是不同的，如果一个对象的附件变量改变了，那么另外一个将保持不变，因此实现了深度克隆，是两个完全不同的对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line"></div><div class="line">		WeeklyLog p1 = <span class="keyword">new</span> WeeklyLog(<span class="string">"陈加兵"</span>, <span class="string">"第一周"</span>, <span class="string">"获得劳动模范的称号..."</span>); <span class="comment">// 创建一个对象</span></div><div class="line">		Attachment attachment = <span class="keyword">new</span> Attachment(<span class="string">"消息"</span>);</div><div class="line">		p1.setAttachment(attachment); <span class="comment">// 添加附件</span></div><div class="line">		WeeklyLog p2 = p1.clone();</div><div class="line">		System.out.println(p1 == p2); <span class="comment">// 判断是否正确</span></div><div class="line">		p2.setName(<span class="string">"Jack"</span>); <span class="comment">// 修改P2对象的内容</span></div><div class="line">		p2.setDate(<span class="string">"第二周"</span>);</div><div class="line">		p2.setContent(<span class="string">"工作认真....."</span>);</div><div class="line">		System.out.println(p2.getName());</div><div class="line">		<span class="comment">//返回false，可以看出这个是不同的地址，因此完成了深克隆</span></div><div class="line">		System.out.println(p1.getAttachment() == p2.getAttachment());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>因为深度克隆使用的是将对象写入输入和输出流中的，因此需要实现序列化，否则将不能完成</li>
</ul>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>浅克隆只能克隆对象中的值类型，不能克隆有引用类型成员变量的对象</p>
</li>
<li><p>使用深度克隆：</p>
<ul>
<li>引用类型的成员变量的类必须实现序列化</li>
<li>需要克隆的类必须实现序列化</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之原型模式&quot;&gt;&lt;a href=&quot;#创建型模式之原型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之原型模式&quot;&gt;&lt;/a&gt;创建型模式之原型模式&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerli
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之建造模式/</id>
    <published>2018-04-16T05:52:36.000Z</published>
    <updated>2018-04-16T05:55:12.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之建造者模式"><a href="#创建型模式之建造者模式" class="headerlink" title="创建型模式之建造者模式"></a>创建型模式之建造者模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li><p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</p>
</li>
<li><p>简单说，建造者的功能就是先构造复杂对象的每一个部件，指挥者的功能就是将这些部件以一定的步骤组装起来，形成一个具有一定功能的产品或者对象。当然这个步骤是透明的对于客户端。</p>
</li>
<li><p>建造者模式一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式结构如图8-2所示：</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/BuilderPattern.png" alt="建造者模式"></p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/builder2.png" alt=""></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li><p>下面是一个组装汽车的例子，其中汽车由发动机和轮胎组成，那么我们只需要组装轮胎，发动机即可组装完成一个汽车。</p>
</li>
<li><p>汽车包括轮胎，引擎，我们通常在组装汽车的时候一般都是一步一步的组装，比如先装引擎，后装轮胎。使用建造者模式就是将建造汽车的这个过程抽离成几个不同的过程，比如建造引擎和建造轮胎就是两个过程。</p>
</li>
<li><p>轮胎的JavaBean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 轮胎</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Tyre</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>引擎的JavaBean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 引擎</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>汽车的JavaBean(汽车包含轮胎和引擎，因此使用聚合的关系)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 汽车的类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Tyre tyre; <span class="comment">// 轮胎</span></div><div class="line">	<span class="keyword">private</span> Engine engine;  <span class="comment">// 引擎</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Tyre <span class="title">getTyre</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> tyre;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTyre</span><span class="params">(Tyre tyre)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.tyre = tyre;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> engine;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.engine = engine;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>抽象建造者(实际上是一个接口，其中定义了建造轮胎和引擎的方法)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造引擎的方法</div><div class="line">	 */</div><div class="line">	<span class="function">Engine <span class="title">buliderEngine</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造轮胎的方法</div><div class="line">	 */</div><div class="line">	<span class="function">Tyre <span class="title">builderTyre</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>具体的建造者(实现了抽象建造者，实现建造轮胎和引擎的详细过程)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 具体的建造者，主要是构造汽车的部件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderCar</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">buliderEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"构造汽车发动机"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"傻逼牌发动机"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Tyre <span class="title">builderTyre</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"构造汽车轮胎"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Tyre(<span class="string">"傻逼牌轮胎"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>抽象指挥者(定义了一个构造汽车的方法)，指挥者的作用就是按照一定步骤将构造者建造的部件组装起来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 	指挥者的接口，用来按照顺序组装汽车</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Director</span> </span>&#123;</div><div class="line">	<span class="function">Car <span class="title">CreateCar</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>具体的指挥者(实现了指挥者接口)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 指挥者的实现类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectorCar</span> <span class="keyword">implements</span> <span class="title">Director</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Builder builder; <span class="comment">// 建造者的对象</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造方法，主要用来初始化建造者对象</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> builder  Builder的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DirectorCar</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.builder = builder;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Car <span class="title">CreateCar</span><span class="params">()</span> </span>&#123;</div><div class="line">		Car car = <span class="keyword">new</span> Car(); <span class="comment">// 创建汽车对象</span></div><div class="line">		Engine engine = builder.buliderEngine(); <span class="comment">// 构建发动机</span></div><div class="line">		Tyre tyre = builder.builderTyre(); <span class="comment">// 构造轮胎</span></div><div class="line">		car.setEngine(engine); <span class="comment">// 设置属性</span></div><div class="line">		car.setTyre(tyre); <span class="comment">// 设置属性</span></div><div class="line">		<span class="keyword">return</span> car; <span class="comment">// 返回构造好的汽车</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Director director = <span class="keyword">new</span> DirectorCar(<span class="keyword">new</span> BuilderCar()); <span class="comment">// 创建指挥者的对象</span></div><div class="line">		Car car = director.CreateCar(); <span class="comment">// 获取组装完成的</span></div><div class="line">		System.out.println(car.getEngine().getName()); <span class="comment">// 输出引擎的名字</span></div><div class="line">		System.out.println(car.getTyre().getName()); <span class="comment">// 输出轮胎的名字</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul>
<li><p>基本部件不变，但是其中的组合经常变化的情况</p>
<ul>
<li>比如你去肯德基点餐，汉堡，可乐，鸡翅这些食物是不变的，但是套餐的组合是经常变化的，建造者模式的指挥者就是将这些部件按照一定步骤将其组合起来的。</li>
<li>java中StringBuilder</li>
</ul>
</li>
<li><p>需要生成的对象具有复杂的内部结构</p>
<ul>
<li>复杂的内部结构，我们可以使用建造者模式将其分离，先将其中的各个小的部件组装成功，然后由指挥者按照一定的步骤将其组装成一个复杂的对象</li>
</ul>
</li>
<li>需要生成的对象内部属性本身相互依赖。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之建造者模式&quot;&gt;&lt;a href=&quot;#创建型模式之建造者模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之建造者模式&quot;&gt;&lt;/a&gt;创建型模式之建造者模式&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;head
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之代理模式/</id>
    <published>2018-04-16T05:52:12.000Z</published>
    <updated>2018-04-16T05:54:41.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式之代理模式-静态代理"><a href="#结构型模式之代理模式-静态代理" class="headerlink" title="结构型模式之代理模式(静态代理)"></a>结构型模式之代理模式(静态代理)</h1><ul>
<li><p>由于某些原因，客户端不想或不能直接访问一个对象，此时可以通过一个称之为“代理”的第三者来实现间接访问，该方案对应的设计模式被称为代理模式。</p>
</li>
<li><p>代理其实是实现简介访问的媒介，当然在代理类中还可以在执行代理操作之前，之后，之中，环绕等执行相关动作。<strong>Spring 中面向切面编程</strong>就是这个原理</p>
</li>
<li><p>代理模式是一种应用很广泛的结构型设计模式，而且变化形式非常多，常见的代理形式包括远程代理、保护代理、虚拟代理、缓冲代理、智能引用代理等，后面将学习这些不同的代理形式</p>
</li>
<li><p>当使用代理类的时候， 真实类中的信息对用户来说是透明的(不可见的)</p>
</li>
<li><p><strong>主要就是用于对象的间接访问提供了一个方案，可以对对象的访问进行控制</strong></p>
</li>
</ul>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="http://ono60m7tl.bkt.clouddn.com/proxypattern1.png" alt="代理模式"></p>
<ol>
<li>Subject（抽象主题角色）：它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。</li>
<li>Proxy（代理主题角色）：它包含了对真实主题的引用，从而可以在任何时候操作真实主题对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束。通常，在代理主题角色中，客户端在调用所引用的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操作。</li>
<li>RealSubject（真实主题角色）：它定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作。</li>
</ol>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><ul>
<li>需求： 我们知道mac笔记本是在美国生产的，那么如果中国供销商想要卖mac笔记本，那么必须从美国供销商那里先进货，然后中国的顾客才可以在中国供销商买mac。这里的中国供销商就相当于代理，美国供销商就相当于真实主题角色</li>
</ul>
<ul>
<li>Mac笔记本抽象接口(相当于其中的抽象主题)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 苹果笔记本的接口，其中有一个方法实现了买笔记本的动作</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;   <span class="comment">//购买笔记本的行为</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>美国供销商(相当于这里RealSubject)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 美国的笔记本，实现了MacBook接口，表示在美国买笔记本</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USAMac</span> <span class="keyword">implements</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"在美国买笔记本"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>中国供销商(相当于这里的代理角色)</p>
<ul>
<li>我们可以看到我们在使用代理模式的时候可以在之前和之后进行操作<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 中国的笔记本，实现了MacBook  表示在中国买笔记本</div><div class="line"> * 但是中国想要买到苹果笔记本，那么还是需要先从美国进货，因此中国只是一个中间的代理作用而已</div><div class="line"> * 当然代理的最大作用就是在代理之前、之后、之中执行相关的操作，这就是面向切面编程的原理</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaMac</span> <span class="keyword">implements</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> MacBook mcBook=<span class="keyword">new</span> USAMac();   <span class="comment">//创建USAMac的对象</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在购买之前执行的操作</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preBuy</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"购买之前执行的操作"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在购买之后执行的操作</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBuy</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"购买之后执行的操作"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.preBuy();   <span class="comment">//之前执行的操作</span></div><div class="line">		mcBook.buy();  <span class="comment">//在美国买笔记本</span></div><div class="line">		System.out.println(<span class="string">"在中国买笔记本"</span>);</div><div class="line">		<span class="keyword">this</span>.afterBuy();   <span class="comment">//之后执行的操作</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试类</p>
<ul>
<li>我们在使用的时候直接使用代理类即可，我们根本不知道在真实类的使用，完全是代理类为我们提供了</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MacBook macBook=<span class="keyword">new</span> ChinaMac();   <span class="comment">//创建ChinaMac对象，在中国买笔记本</span></div><div class="line">		macBook.buy();    <span class="comment">//直接在中国买笔记本</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h3><ul>
<li><p>我们登录一个网站的服务器端的验证步骤：</p>
<ul>
<li>读取用户名和密码</li>
<li>验证用户名和密码</li>
<li>记录到日志中</li>
</ul>
</li>
<li><p>这里的验证密码和记录到日志中可以在代理类中实现，在用户执行操作之前需要读取用户名和密码，并且验证，在操作之后需要将用户的一些操作记录到日志中。其实这里的真实用户需要做的只是执行自己的操作，而验证和记录都是交给代理类实现的。</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>用户接口(User)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 用户的抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoAction</span><span class="params">()</span></span>;   <span class="comment">//执行动作</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>真实的用户类（实现了用户接口）<ul>
<li>主要的做的就是执行自己的操作</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealUser</span> <span class="keyword">implements</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="keyword">public</span> String password;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RealUser</span><span class="params">(String name, String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RealUser</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 执行一些操作</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoAction</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"开始执行操作......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>代理类(实现了User接口)<ul>
<li>在执行操作之前验证密码和用户名是否正确</li>
<li>在执行操作之后记录到日志中</li>
<li>实际上这里就是面向切面编程</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxUser</span> <span class="keyword">implements</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> RealUser user; <span class="comment">// 真实用户的对象</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建对象</div><div class="line">	 * <span class="doctag">@param</span> name  姓名</div><div class="line">	 * <span class="doctag">@param</span> password   密码</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxUser</span><span class="params">(String name, String password)</span> </span>&#123;</div><div class="line">		user = <span class="keyword">new</span> RealUser(name, password);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoAction</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//验证用户名和密码</span></div><div class="line">		<span class="keyword">if</span> (Validate()) &#123;</div><div class="line">			user.DoAction();   <span class="comment">//调用真实用户的DoAction方法执行相关操作</span></div><div class="line">			logger();   <span class="comment">//调用日志记录信息</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"请重新登录......."</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 验证用户的用户名和密码</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">Validate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="string">"陈加兵"</span>.equals(user.name) &amp;&amp; <span class="string">"123456"</span>.equals(user.password)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加日志记录信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logger</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(user.name + <span class="string">"登录成功......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类<ul>
<li>实际上执行了验证用户名和密码，记录日志的操作，但是对于客户端来说只能看到自己执行的操作</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ProxUser proxUser=<span class="keyword">new</span> ProxUser(<span class="string">"陈加兵"</span>, <span class="string">"123456"</span>);   <span class="comment">//创建代理对象</span></div><div class="line">		proxUser.DoAction();   <span class="comment">//执行操作，实际执行了验证信息，doaction(),日志记录这个三个动作</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>如果增加一个接口就需要增加一个代理类，如果是要增加很多，那么就要增加很多代理类，代码将会重复</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>下面我们将会讲解到动态代理，仅仅需要一个代理类即可</li>
</ul>
<h1 id="结构型模式之动态代理模式"><a href="#结构型模式之动态代理模式" class="headerlink" title="结构型模式之动态代理模式"></a>结构型模式之动态代理模式</h1><ul>
<li><p>前面我们说的代理模式其实是属于静态代理模式，就是说在程序执行之前已经写好了代理类，但是缺点也是说过，必须为每个接口都实现一个代理类，如果有多个接口需要代理，那么代码肯定是要重复的，因此就需要动态代理了。</p>
</li>
<li><p>动态代理可以实现多个接口共用一个代理类，只需要改变初始化的参数即可，可以省去很多的重复的代码。</p>
</li>
<li><p>JDK的动态代理需要一个类一个接口，分别为Proxy和InvocationHandler</p>
</li>
<li><p>主要原理就是利用了反射的原理</p>
</li>
</ul>
<h2 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h2><ul>
<li>这个是代理类必须实现的接口，其中有一个方法<code>public Object invoke(Object proxy,Method method,Object[] args)</code><ul>
<li><code>Object proxy</code>：指被代理的对象。 </li>
<li><code>Method method</code>：要调用的方法 </li>
<li><code>Object[] args</code>：方法调用时所需要的参数 </li>
</ul>
</li>
</ul>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul>
<li>Proxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，此类提供了如下的操作方法：<br><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code><ul>
<li><code>ClassLoader loader</code>：类加载器 </li>
<li><code>Class&lt;?&gt;[] interfaces</code>：得到全部的接口 </li>
<li><code>InvocationHandler h</code>：得到InvocationHandler接口的子类实例 </li>
</ul>
</li>
</ul>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><ul>
<li>肯德基的接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 肯德基的接口，其中一个eat方法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IKFC</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>肯德基的实现类(RealSubject)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * IKFC的实现类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KFC</span> <span class="keyword">implements</span> <span class="title">IKFC</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我在肯德基吃了饭......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>苹果笔记本的接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 苹果笔记本的接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>美国供销商的类(RealSubject)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 美国笔记本的类，实现了MacBook接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USAMacBook</span> <span class="keyword">implements</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"在美国买了一个苹果电脑......"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>动态代理的类（实现了InvocationHandler接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个是代理类，实现了InvocationHandler接口</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object Realobject;   <span class="comment">//被代理的对象</span></div><div class="line"></div><div class="line">	<span class="comment">//构造方法，用来初始化被代理的对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.Realobject=obj;   <span class="comment">//初始化真实类的对象</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> proxy  表示被代理的对象的，就是真实类的对象</div><div class="line">	 * <span class="doctag">@param</span> method 表示要调用真实类的方法</div><div class="line">	 * <span class="doctag">@param</span> args  表示方法调用的时候所需要的参数</div><div class="line">	 * <span class="doctag">@return</span>   方法调用之后的返回值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">			<span class="keyword">throws</span> Throwable &#123;</div><div class="line">		prefunction();   <span class="comment">//执行之前调用的方法</span></div><div class="line">		Object res=method.invoke(Realobject, args);    <span class="comment">//Method类中的执行方法的函数，在反射中常用</span></div><div class="line">		afterFunction();   <span class="comment">//执行之后调用的方法</span></div><div class="line">		<span class="keyword">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 执行方法之前调用的方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefunction</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"执行方法之前......"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 执行方法之后调用的方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterFunction</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"执行方法之后......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</div><div class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.Class2HTML;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Class[] cls1=&#123;IKFC.class&#125;;   <span class="comment">//第一个代理的所有接口数组，直接用接口的反射即可</span></div><div class="line"></div><div class="line">		Class[] cls2=USAMacBook.class.getInterfaces(); <span class="comment">//直接具体的实现类的反射调用getInterfaces即可返回所有的接口数组</span></div><div class="line"></div><div class="line">		<span class="comment">// 返回KFC的代理对象</span></div><div class="line">		IKFC kfc = (IKFC) Proxy.newProxyInstance(Client.class.getClassLoader(),</div><div class="line">				cls1, <span class="keyword">new</span> ProxyHandler(<span class="keyword">new</span> KFC()));</div><div class="line">		kfc.eat();   <span class="comment">//执行方法</span></div><div class="line"></div><div class="line">		MacBook macBook = (MacBook) Proxy.newProxyInstance(Client.class.getClassLoader(),</div><div class="line">				cls2, <span class="keyword">new</span> ProxyHandler(</div><div class="line">						<span class="keyword">new</span> USAMacBook()));</div><div class="line"></div><div class="line">		macBook.buy();   <span class="comment">//执行方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>动态代理的好处<ul>
<li>即使有多个接口，也仅仅只有一个动态代理类</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构型模式之代理模式-静态代理&quot;&gt;&lt;a href=&quot;#结构型模式之代理模式-静态代理&quot; class=&quot;headerlink&quot; title=&quot;结构型模式之代理模式(静态代理)&quot;&gt;&lt;/a&gt;结构型模式之代理模式(静态代理)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由于某些原因，
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/设计模式之工厂模式/</id>
    <published>2018-04-12T03:28:21.000Z</published>
    <updated>2018-04-12T03:30:12.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之工厂模式"><a href="#创建型模式之工厂模式" class="headerlink" title="创建型模式之工厂模式"></a>创建型模式之工厂模式</h1><h2 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h2><ul>
<li>工厂模式是java中最常见的创建型模式，客户端在不知道创建逻辑的情况下，只需要在工厂中直接创建即可</li>
</ul>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul>
<li>简单工厂在创建对象的时候不需要知道具体的创建逻辑，客户端只需要知道该产品的一个标志即可，比如产品的名字</li>
<li>必备的两个元素：<ul>
<li>产品的抽象类</li>
<li>生产产品的工厂类</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>假设现在我们需要根据客户端的要求创建不同的图形，比如矩形，圆形…..，此时我们可以将图形抽象成接口，具体的产品只需要实现这个图形接口即可</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/simpleFactoryPattern.png" alt="简单工厂模式"></p>
<ul>
<li><p>shape接口（图形的接口，其中提供了一个创建图形的方法）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这个是抽象的产品类，后续的所有的产品都必须实现这个抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;   <span class="comment">//提供一个实现方法，作为画画的动作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>矩形产品类（实现shape接口）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 矩形的产品类，其中实现了Shape这个类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 实现了Shape中的方法</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我们画了一个矩形"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>圆形产品类（实现Shape接口）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 圆形的产品类，实现了Shape这个类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我们画了一个圆"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>工厂方法（创建产品的类）</p>
<ul>
<li>根据传入的标志创建对应的产品<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 简单工厂的实例</div><div class="line"> * 其中提供一个getShape(String name) 可以根据提供的名字来返回一个对象，其实工厂生产的产品</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (name) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">"矩形"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Rectangle(); <span class="comment">// 返回矩形的对象</span></div><div class="line">		<span class="keyword">case</span> <span class="string">"圆形"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Circle(); <span class="comment">// 返回圆形对象</span></div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			System.out.println(<span class="string">"我们不能创建一个额外的对象"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 没有指定对象就返回null</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String name = <span class="string">"圆形"</span>; <span class="comment">// 填入名字</span></div><div class="line">		SimpleFactoryDemo simpleFactoryDemo = <span class="keyword">new</span> SimpleFactoryDemo(); <span class="comment">// 创建简单工厂实例</span></div><div class="line">		Shape shape = simpleFactoryDemo.getShape(name); <span class="comment">// 根据名字获取对象</span></div><div class="line">		shape.draw(); <span class="comment">// 调用方法</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>优点：<ul>
<li>每次增加一个产品类只需要增加一个实现类即可（实现产品接口）</li>
</ul>
</li>
<li>缺点：<ul>
<li>如果添加一个产品类，那么我们就需要在工厂类中添加对应的代码（违反开闭原则）</li>
<li>开闭原则：<ul>
<li>简单的说就是在对功能进行扩展的时候对原先的代码不做任何修改</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li><p>简单工厂模式是一个抽象产品类派生出多个具体的产品类，但是一个工厂就生产了全部的产品</p>
</li>
<li><p>工厂方法模式是有一个抽象工厂派生出多个具体的工厂，每个工厂生产一件具体的产品</p>
</li>
</ul>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol>
<li>抽象产品类</li>
<li>抽象工厂类</li>
<li>每个具体的产品类都有一个具体的工厂类生产</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>我们对上面的实例进行改写，只需要定义一个抽象工厂类即可，其中派生出两个具体的工厂类用来生产圆形和矩形</p>
</li>
<li><p>这里的抽象产品接口和具体的产品类和上面相同，不需要写了</p>
</li>
<li><p>抽象工厂（使用的接口，其中有一个生产方法）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 抽象的工厂类</div><div class="line"> * 其中定义一个方法 getShape() 返回的是Shape类型的产品类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryInterface</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>生产圆形的工厂类（实现抽象工厂）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 生产圆形的产品类  其中实现了抽象的工厂类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryCircle</span> <span class="keyword">implements</span> <span class="title">FactoryInterface</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Circle();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>生产矩形的工厂类（实现抽象工厂接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 生产矩形的工厂类，其中实现了抽象工厂类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryRectangle</span> <span class="keyword">implements</span> <span class="title">FactoryInterface</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//使用多态创建工厂类</span></div><div class="line">		FactoryInterface factoryInterface=<span class="keyword">new</span> FactoryCircle();  <span class="comment">//创建圆形的工厂类</span></div><div class="line">		factoryInterface.getShape().draw();  <span class="comment">//生成Circle对象并且调用方法</span></div><div class="line"></div><div class="line">		FactoryInterface factoryInterface2=<span class="keyword">new</span> FactoryRectangle();  <span class="comment">//创建矩形的工厂类</span></div><div class="line">		factoryInterface2.getShape().draw();   <span class="comment">//生成Rectangle的对象并且调用方法</span></div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点：</p>
<ul>
<li><p>易于扩展，如果需要添加一个产品类，只需要添加一个具体的产品类和对应的工厂类即可，不需要对原工厂的方法进行任何的修改</p>
</li>
<li><p>在工厂方法模式中，用户只需要知道所需要产品的具体工厂类即可，不需要知道具体的创建过程，甚至不需要知道具体产品类的类名。</p>
</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>每次新增一个产品时，都需要增加一个具体的产品类和具体的工厂类，明显的成倍增加代码。</li>
</ul>
</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ol>
<li><p>多个抽象产品类，派生出多个具体产品类；一个抽象工厂类，派生出多个具体工厂类；每个具体工厂类可创建读个具体产品类实例。</p>
</li>
<li><p>即是提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们的具体的类。“一对多的关系”</p>
</li>
<li><p>这里的抽象产品类就像是一类产品的族，其中具体实现类就是不同的表现形式而已。</p>
</li>
<li><p>这里的每一个具体的工厂类可以生产不同种类的产品，并不是一个具体的工厂类只能生产一个具体的产品罢了</p>
</li>
<li><p>下面我们举一个麦当劳和肯德基的例子，他们两家中都买薯条和鸡翅，那么薯条和鸡翅就是两类产品，麦当劳和肯德基就是具体的工厂类用来生产薯条和鸡翅，那么我们需要一个抽象的工厂类来生产这两类产品，肯德基和麦当劳只需要实现即可。</p>
</li>
</ol>
<h3 id="总结定义"><a href="#总结定义" class="headerlink" title="总结定义"></a>总结定义</h3><ul>
<li>简单的说：<ul>
<li>抽象工厂模式一个一个工厂生产一个产品类族</li>
<li>其中的工厂并不是生产一种产品，而是生产多种产品（一类的产品）</li>
</ul>
</li>
</ul>
<h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><ul>
<li><p>多个抽象产品类派生出多个具体的产品类，比如鸡翅(麦当劳，肯德基)，薯片（麦当劳，肯德基）</p>
</li>
<li><p>一个抽象工厂，派生出多个具体的工厂类，比如肯德基和麦当劳就相当于两个工厂，这两个工厂都生产各自品牌的鸡翅，薯片，汉堡等</p>
</li>
</ul>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>抽象产品类</p>
<ul>
<li><p>这里我们有两种产品，一个是鸡翅，一个薯片，因此需要创建两个抽象产品接口</p>
</li>
<li><p>鸡翅的抽象接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 鸡翅的接口，这是一类产品的接口，在其中可以实现具体的产品类，比如麦当劳的麦乐鸡，肯德基的奥尔良烤翅</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IChicken</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>薯片的抽象接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 薯条的接口，这也是一个抽象的产品类，其中可以有多个具体的产品类，比如麦当劳的薯条，肯德基的薯条</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IChips</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>抽象工厂类</p>
<ul>
<li><p>抽象工厂类只有一个，但是具体的工厂类一个是麦当劳，一个肯德基，工厂中生产各自品牌的产品</p>
</li>
<li><p>抽象工厂</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 抽象工厂类，用来生产鸡翅和薯条的工厂类，下面可以衍生出多个具体的工厂类来生产指定商家的鸡翅和薯条</div><div class="line">	*/</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStore</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> IChicken <span class="title">createChicken</span><span class="params">()</span></span>; <span class="comment">// 生产鸡翅</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> IChips <span class="title">createChips</span><span class="params">()</span></span>; <span class="comment">// 生产薯条</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>具体的产品类</p>
<ul>
<li><p>肯德基的薯条</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 肯德基的薯条，是IChips具体实现类，也是一个具体的产品类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KfcChips</span> <span class="keyword">implements</span> <span class="title">IChips</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"你吃了肯德基的薯条......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>肯德基的鸡翅</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 肯德基的奥尔良烤翅类，是IChicken的具体实现类，是一个具体的产品</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KfcChicken</span> <span class="keyword">implements</span> <span class="title">IChicken</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"你吃了肯德基的奥尔良烤翅......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>麦当劳的薯条</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	* 麦当劳的薯条，是IChips具体实现类，也是一个具体的产品类</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McChips</span> <span class="keyword">implements</span> <span class="title">IChips</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"你吃了麦当劳的薯条......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>麦当劳的鸡翅</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 麦当劳的鸡翅，这是IChicken的具体的实现产品类</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McChicken</span> <span class="keyword">implements</span> <span class="title">IChicken</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"你吃了的麦当劳的鸡翅......"</span>);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>具体的工厂类</p>
<ul>
<li><p>麦当劳的工厂类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 麦当劳的工厂，实现了抽象工厂，这个工厂可以生产麦当劳的鸡翅和薯条</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McFactory</span> <span class="keyword">implements</span> <span class="title">IStore</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChicken <span class="title">createChicken</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> McChicken(); <span class="comment">// 生产麦当劳的鸡翅</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChips <span class="title">createChips</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> McChips(); <span class="comment">// 生产麦当劳的薯条</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>肯德基的工厂类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 肯德基的工厂，实现了抽象工厂，这个工厂可以生产肯德基的鸡翅和薯条</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KFCFactory</span> <span class="keyword">implements</span> <span class="title">IStore</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChicken <span class="title">createChicken</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> KfcChicken(); <span class="comment">// 生产肯德基的鸡翅</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChips <span class="title">createChips</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> KfcChips(); <span class="comment">// 生产肯德基的薯条</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		IStore iStore1=<span class="keyword">new</span> KFCFactory();   <span class="comment">//创建肯德基的具体工厂类</span></div><div class="line">		iStore1.createChicken().eat();    <span class="comment">//吃了肯德基的鸡翅</span></div><div class="line">		iStore1.createChips().eat();    <span class="comment">//吃了肯德基的薯条</span></div><div class="line"></div><div class="line">		IStore iStore2=<span class="keyword">new</span> McFactory();   <span class="comment">//创建麦当劳的具体工厂类</span></div><div class="line">		iStore2.createChicken().eat();    <span class="comment">//吃了麦当劳的鸡翅</span></div><div class="line">		iStore2.createChips().eat();   <span class="comment">//吃了麦当劳的薯条</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>产品族比较难扩展，比如你要添加一个鞋子这个产品族，那么需要自己定义一个鞋子的抽象产品类，还要添加这个不同品牌的具体的产品实现类，另外还需要在抽象工厂里添加一个生产鞋子的方法</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之工厂模式&quot;&gt;&lt;a href=&quot;#创建型模式之工厂模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之工厂模式&quot;&gt;&lt;/a&gt;创建型模式之工厂模式&lt;/h1&gt;&lt;h2 id=&quot;什么是工厂模式&quot;&gt;&lt;a href=&quot;#什么是工厂模式&quot; class
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/设计模式之单例模式/</id>
    <published>2018-04-12T03:28:05.000Z</published>
    <updated>2018-04-12T03:29:40.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之单例模式-Singleton"><a href="#创建型模式之单例模式-Singleton" class="headerlink" title="创建型模式之单例模式(Singleton)"></a>创建型模式之单例模式(Singleton)</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><ul>
<li>该类只有一个实例</li>
<li>构造方法是私有的</li>
<li>有一个获取该类对象的静态方法getInstance()</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>一个国家只有一个主席</li>
<li>如果此时的限定必须是抽象出来的类只能是一个对象，这个时候就需要使用单例模式</li>
</ul>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><h3 id="什么是懒汉式"><a href="#什么是懒汉式" class="headerlink" title="什么是懒汉式"></a>什么是懒汉式</h3><ul>
<li>懒汉式是当用到这个对象的时候才会创建，即是在getInstance()方法创建这个单例对象</li>
</ul>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>只有用到的时候才会创建这个对象，因此节省资源</li>
<li>线程不安全<ul>
<li>我们知道一旦我们使用了懒汉式就是在getInstance()方法中创建这个单例对象，那么不可避免的就是线程安全问题</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 懒汉式的单例模式： 不是线程安全的</div><div class="line"> * 优点： 在使用的时候才会初始化，可以节省资源</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalLazy</span> </span>&#123;</div><div class="line">	<span class="comment">// 将默认的构造器设置为private类型的</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalLazy</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 静态的单例对象</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SignalLazy instance;</div><div class="line"></div><div class="line">	<span class="comment">//静态的获取单例的对象，其中有一个判断，如果没有初始化，那么就创建</span></div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> SignalLazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 如果instance没有被初始化，那么就创建即可，这个是保证了单例，但是并不是线程安全的</span></div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"this is SignalLazy"</span>);</div><div class="line">			instance = <span class="keyword">new</span> SignalLazy(); <span class="comment">// 创建一 个对象</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance; <span class="comment">// 返回这个对象</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>从上面的代码中我们可以知道一旦使用多线程创建对象，那么就会出现线程不安全，最后创建出来的就不是单例了</p>
</li>
<li><p>测试代码如下</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		 <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">//创建实例，并且输出其中的地址，如果地址相同， 那么就是同一个实例</span></div><div class="line">				System.out.println(<span class="string">"this is"</span>+ SignalLazy.getInstance());</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">		 <span class="comment">//主线程也是创建输出其中的地址，运行可以看出这两个地址是不一样的</span></div><div class="line">		 System.out.println(<span class="string">"this is"</span>+SignalLazy.getInstance());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解决线程不安全"><a href="#解决线程不安全" class="headerlink" title="解决线程不安全"></a>解决线程不安全</h3><ul>
<li>线程同步锁(synchronized)<ul>
<li>我们知道每一个类都有一个把锁，我们可以使用线程同步锁来实现线程同步方法</li>
<li>但是使用线程同步锁浪费资源，因为每次创建实例都需要请求同步锁，浪费资源</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SignalLazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 如果instance没有被初始化，那么就创建即可，这个是保证了单例，但是并不是线程安全的</span></div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"this is SignalLazy"</span>);</div><div class="line">			instance = <span class="keyword">new</span> SignalLazy(); <span class="comment">// 创建一个对象</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance; <span class="comment">// 返回这个对象</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>双重校验<ul>
<li>双重校验： 两次判断单例对象是否为 null，这样的话，当当线程经过这个判断的时候就会先判断，而不是等待，一旦判断不成立，那么就会继续执行，不需要等待</li>
<li>相对于前面的同步方法更加节省资源</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalTonDoubleCheck</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SignalTonDoubleCheck instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalTonDoubleCheck</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;; <span class="comment">// 将默认的构造方法设置私有</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignalTonDoubleCheck <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span> (SignalTonDoubleCheck.class) &#123;</div><div class="line">				<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// 这个new 并不是原子操作，因此当多线程进行到这里需要及时刷新这个值，因此要设置为voliate</span></div><div class="line">					instance = <span class="keyword">new</span> SignalTonDoubleCheck();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>匿名内部类 （推荐使用）<ul>
<li>我们知道静态变量、静态代码块、静态方法都是在类加载的时候只加载一次</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalTonInnerHolder</span> </span>&#123;</div><div class="line">	<span class="comment">//私有构造函数</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalTonInnerHolder</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 匿名内部类，其中利用了静态成员变量在类加载的时候初始化，并且只加载一次，因此保证了单例</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerHolder</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> SignalTonInnerHolder instance = <span class="keyword">new</span> SignalTonInnerHolder();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignalTonInnerHolder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> InnerHolder.instance;  <span class="comment">//加载类</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>一旦加载SignalTonInnerHolder类的时候就会加载其中的静态类，随之加载的就是其中的创建对象语句，因此在类加载的时候就完成了创建，这个和我们后面说的饿汉式有点相同</li>
</ul>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><h3 id="什么是饿汉式"><a href="#什么是饿汉式" class="headerlink" title="什么是饿汉式"></a>什么是饿汉式</h3><ul>
<li>在类加载的时候就创建单例对象，而不是在getInstance()方法创建</li>
<li>所谓的饿汉式就是利用静态成员变量或者静态语句块在类加载的时候初始化，并且只初始化一次，因此这个是线程安全的，但是在没有用到的时候就初始化，那么是浪费资源</li>
</ul>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>还没用到就创建，浪费资源</li>
<li>类加载的时候就创建，线程安全</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 饿汉式：线程安全</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalHungry</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalHungry</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 静态变量只有在类加载的时候初始化一次，因此这个是线程安全的</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SignalHungry instance = <span class="keyword">new</span> SignalHungry();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignalHungry <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		 <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">//创建实例，并且输出其中的地址，如果地址相同， 那么就是同一个实例</span></div><div class="line">				System.out.println(<span class="string">"this is"</span>+ SignalHungry.getInstance());</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">		 <span class="comment">//主线程也是创建输出其中的地址，运行可以看出这两个地址是不一样的</span></div><div class="line">		 System.out.println(<span class="string">"this is"</span>+SignalHungry.getInstance());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>饿汉式在类加载的时候就会创建单例对象，因此浪费资源</li>
<li>懒汉式在用到的时候才创建，节省资源，但是线程不安全，但是我们可以使用匿名内部类的方式使其线程安全</li>
<li>一般在使用的时候会使用懒汉式的匿名内部类的实现和饿汉式的创建方式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之单例模式-Singleton&quot;&gt;&lt;a href=&quot;#创建型模式之单例模式-Singleton&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之单例模式(Singleton)&quot;&gt;&lt;/a&gt;创建型模式之单例模式(Singleton)&lt;/h1
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之常见关系</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%85%B3%E7%B3%BB/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/设计模式之常见关系/</id>
    <published>2018-04-12T03:27:45.000Z</published>
    <updated>2018-04-12T03:29:07.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承和泛化"><a href="#继承和泛化" class="headerlink" title="继承和泛化"></a>继承和泛化</h1><ul>
<li>泛华关系是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。</li>
<li>使用三角箭头的实线表示继承，其中箭头指向的是父类<br><img src="http://ono60m7tl.bkt.clouddn.com/jicheng.png" alt="继承图形"></li>
</ul>
<h1 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h1><ul>
<li>在java中一个类只能继承一个父类，但是可以实现多个接口</li>
<li>使用的是带三角的虚线表示，其中箭头指向的是接口</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/real.png" alt="实现接口"></p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li>是一种使用关系，即一个类的实现需要另外一个类的协助，所以尽量不使用双向的依赖关系。</li>
<li>最典型的就是import</li>
<li>比如：一个类要定义String类型的变量，那么这个类就是依赖String这个类</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/dependency.png" alt="依赖"></p>
<h1 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h1><ul>
<li>是一种拥有的关系，它使一个类知道另外一个类的属性和方法，比如数据库中的关系，通过学生可以查找到自己课程的成绩，只需要在学生中定义一个课程的对象即可。</li>
<li>代码体现： 成员变量</li>
<li>带普通箭头的实心线，指向被拥有者</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/association.png" alt="关联"></p>
<h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><ul>
<li><p>是整体和部分的关系，且部分可以离开整体而单独的存在。车和轮胎是整体和部分的关系，但是轮胎离开车还是可以单独存在的</p>
</li>
<li><p>代码体现： 成员变量</p>
</li>
<li><p>带空心菱形的实心线，菱形指向整体</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/aggregation.png" alt="聚合"></p>
<h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><ul>
<li>是整体和部分的关系，但是部分不能离开整体而单独存在</li>
<li>代码体现：成员变量</li>
<li>带实心菱形的实线，菱形指向整体</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/composition.png" alt="组合"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;继承和泛化&quot;&gt;&lt;a href=&quot;#继承和泛化&quot; class=&quot;headerlink&quot; title=&quot;继承和泛化&quot;&gt;&lt;/a&gt;继承和泛化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;泛华关系是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Struts2之类型转换器</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/Struts2%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/Struts2之类型转换器/</id>
    <published>2018-04-11T16:41:07.000Z</published>
    <updated>2018-04-11T16:41:37.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Struts2之类型转换器"><a href="#Struts2之类型转换器" class="headerlink" title="Struts2之类型转换器"></a>Struts2之类型转换器</h1><ul>
<li>在我们接收表单的请求参数的时候其实默认的都是String类型，但是有时候我们需要其他的数据类型，比如int,double,float,Date。</li>
<li>其实前面表单的传值都是字符串形式的，但是为什么我们在JavaBean中定义了不同的类型的数据，Struts还是会正确接收表单传递过来的值呢，因为使用了Struts中的内建的类型转换器</li>
</ul>
<h2 id="传统的类型转换器"><a href="#传统的类型转换器" class="headerlink" title="传统的类型转换器"></a>传统的类型转换器</h2><ul>
<li>在Servlet中我们可以自己获取请求参数自己转换类型，通常使用request.getParamerter(String name) 获取请求的参数 如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String username= requst.getParameter(<span class="string">"username"</span>);</div><div class="line"><span class="comment">//获取年龄然后转换成了整数</span></div><div class="line"><span class="keyword">int</span> age=Integer.parseInt(requst.getParameter(<span class="string">"age"</span>));</div></pre></td></tr></table></figure>
<h2 id="内建的类型转换器"><a href="#内建的类型转换器" class="headerlink" title="内建的类型转换器"></a>内建的类型转换器</h2><ul>
<li>其实内建的类型转换器已经可以完成大部分的功能了，比如表单传值，其实传递的是字符串，但是我们在JavaBean中定义的却是不同类型的数据，内部原理就是用了内置的类型转换器</li>
<li>内建类型转换器可以完成基本类型之前的转换</li>
</ul>
<h2 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2><ul>
<li><p>前面说的内建的类型转换器只是在普通的类型之间的转换，都是一些基本的类型可以实现自动转换，并不用自己定义类型转换器。但是我们现在需要将输出的字符串转换为复合对象，比如一个User（username，password）类，那么现在就不能使用内建的类型转换器自动转换了，现在需要自己定义类型转换器了。</p>
</li>
<li><p>实现类型转换器也是基于OGNL实现的，在OGNL中有一个<code>TypeConverter</code>接口，但是这个接口太复杂了，因此OGNL还提供了一个类<code>DefaultTypeConverter</code>，通过继承这个类就可以实现类型转换器了。</p>
</li>
<li><p>假设我们在登录界面需要在一个text中输入用户名和密码用逗号隔开，现在我们可以使用自定义的转换器。现在登录的JSP如下:</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action="http://localhost:8080/web3/login" method="post"&gt;</div><div class="line">	&lt;label&gt;请输入用户名和密码(逗号隔开)：&lt;/label&gt;</div><div class="line">	&lt;input type="text" name="user"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">	&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li>定义的User类如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String username;  <span class="comment">//用户名</span></div><div class="line">	<span class="keyword">private</span> String password;  <span class="comment">//密码</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Action类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.Action;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user; <span class="comment">// User对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>UserConverter（转换器类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">import</span> ognl.DefaultTypeConverter;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConverter</span> <span class="keyword">extends</span> <span class="title">DefaultTypeConverter</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * context：类型转换的上下文环境</div><div class="line">	 * value: value是需要转换的参数，随着转换的方向不同，value的参数值也是不一样的，因此需要强制转化</div><div class="line">	 * toType： 表示转换后的目标类型</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">convertValue</span><span class="params">(Map context, Object value, Class toType)</span> </span>&#123;</div><div class="line">		System.err.println(<span class="string">"调用了"</span>);</div><div class="line">		<span class="comment">// 有字符串转http://download.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#sum换为User类</span></div><div class="line">		<span class="comment">// toType表示转向的类型</span></div><div class="line">		<span class="keyword">if</span> (toType == User.class) &#123;</div><div class="line"></div><div class="line">			String[] params = (String[]) value; <span class="comment">// 将字符串转换为数组</span></div><div class="line">			User user = <span class="keyword">new</span> User(); <span class="comment">// 创建User对象</span></div><div class="line">			<span class="comment">// 利用逗号将数组中的第一个字符串分割为两个字符串，设置成username，password</span></div><div class="line">			user.setUsername(params[<span class="number">0</span>].split(<span class="string">","</span>)[<span class="number">0</span>]);</div><div class="line">			user.setPassword(params[<span class="number">0</span>].split(<span class="string">","</span>)[<span class="number">1</span>]);</div><div class="line">			<span class="keyword">return</span> user; <span class="comment">// 最后一定要返回User对象</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 如果是从复合类转换为字符串</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (toType == String.class) &#123;</div><div class="line">			User user = (User) value; <span class="comment">// 将value转换为User对象</span></div><div class="line">			<span class="comment">// 最后返回一个字符串表现的形式</span></div><div class="line">			<span class="keyword">return</span> user.getUsername() + <span class="string">","</span> + user.getPassword();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 没有相互转换的条件返回null</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的代码可以看出有两类的转换:一是从字符串转换为User类，二是从User类转换为字符串，这个都是使用toType来控制的。</li>
</ul>
<h3 id="ConverterValue方法参数和返回值的含义"><a href="#ConverterValue方法参数和返回值的含义" class="headerlink" title="ConverterValue方法参数和返回值的含义"></a>ConverterValue方法参数和返回值的含义</h3><ul>
<li><p>context： 是类型转换环境的上下文</p>
</li>
<li><p>value ：是需要转换的类型参数。随着转换方向的不同，value参数的值也是不一样的，当把字符串类型转换为User类型时，value就是原始字符串。当需要把User类型向字符串类型转换时，value是User的实例。当然无论向哪一个方向转换，value都是需要强制转换的。</p>
</li>
<li><p>toType: 是转换后的目标类型。</p>
</li>
<li><p>为什么自己当向User类转换的时候，value要转换为一个字符数组呢？</p>
<ul>
<li>因为这里对应的是一个文本，如果我们对应的是一个多选框，那么此时就是一个数组了，因此这里强制转换为数组是一个通用的写法</li>
</ul>
</li>
</ul>
<h3 id="局部转换器"><a href="#局部转换器" class="headerlink" title="局部转换器"></a>局部转换器</h3><ul>
<li><p>转换器分为局部转换器和全局转换器，局部转换器是针对指定的Action类，但是全局转换器是针对的是该项目中所有需要转换的Action类。</p>
</li>
<li><p>前面已经实现了Action类，现在我们只需要定义一个ActionName-conversion.properties文件和Action放在一个目录下即可，其中的ActionName是Action的类名，比如上面的Action类是LoginAction，那么这里的文件就是LoginAction-conversion,.properties。其中的内容如下：</p>
<ul>
<li>user是Action中定义User对象，com.converter.UserConverter是对应的转换的类，一定要定义到包名。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user=com.converter.UserConverter</div></pre></td></tr></table></figure>
<h3 id="全局转换器"><a href="#全局转换器" class="headerlink" title="全局转换器"></a>全局转换器</h3><ul>
<li>全局转换器是作用于全部需要转换的Action的，只需要定义一个xwork-conversion. Properties。这个的名字就不需要改变了，放在src目录下即可，这样才可以作用到全局中。内容如下:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.user.User=com.converter.UserConverter</div><div class="line">com.date.Date=com.converter.Date</div></pre></td></tr></table></figure>
<ul>
<li><p>其中的内容是一键值对存在的，com.user.User对应的是定义的JavaBean类，这里不再是action类中的定义的User对象了，是需要转换对象的类，com.converter.UserConverter这个是定义转换器的类。</p>
</li>
<li><p>从上面我们可以看出来定义两个转换器，最后一个是将字符串转换为日期类型的转换器。其实其中可以定多个类型转换器，并且只要是一键值对的形式写出即可。</p>
</li>
</ul>
<h2 id="基于Struts2的类型转换器"><a href="#基于Struts2的类型转换器" class="headerlink" title="基于Struts2的类型转换器"></a>基于Struts2的类型转换器</h2><ul>
<li><p>上面的类型转换器都是基于OGNL的DefaultTypeConverter类实现的，基于该类实现转换时都要实现ConverterValue()方法，无论是从字符串转换为复合类型还是从复合类型转换为字符串都是在这个方法中实现。</p>
</li>
<li><p>为了简化类型转换器的实现，Struts2提供了一个StrutsTypeConverter抽象类，这个抽象类是DefaultTypeConverter的子类。其中重要的方法如下:</p>
<ul>
<li>public Object convertFromString(Map context, String[] values, Class toClass)将字符串转换为复合类型个方法。</li>
<li>context是上下文环境，value是字符串数组，toClass是要转换的类型</li>
<li>public String convertToString(Map context, Object values) 将复合类型转换为字符串</li>
<li>values是复合类对象，context是上下文环境</li>
<li>public Object convertValue(Map context, Object values, Class toClass)<br>实现DefaultTypeConverter方法，其中的变量还是上面的意思</li>
</ul>
</li>
<li><p>下面实现上面的登录转换，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.apache.struts2.util.StrutsTypeConverter;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConverterStruts</span> <span class="keyword">extends</span> <span class="title">StrutsTypeConverter</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">performFallbackConversion</span><span class="params">(Map context, Object o,</span></span></div><div class="line">			Class toClass) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.performFallbackConversion(context, o, toClass);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 将字符串转换为复合类型的方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">convertFromString</span><span class="params">(Map context, String[] values, Class toClass)</span> </span>&#123;</div><div class="line">		User user = <span class="keyword">new</span> User();   <span class="comment">//创建User对象</span></div><div class="line">		String[] userValues = values[<span class="number">0</span>].split(<span class="string">","</span>); <span class="comment">// 将字符串数组中的第一个字符串分隔开</span></div><div class="line">		user.setUsername(userValues[<span class="number">0</span>]);</div><div class="line">		user.setPassword(userValues[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 将复合类型转换为字符串</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">convertToString</span><span class="params">(Map context, Object values)</span> </span>&#123;</div><div class="line">		User user = (User) values;   <span class="comment">//强制转换成User类型的</span></div><div class="line">		String username = user.getUsername(); <span class="comment">//获取username和password</span></div><div class="line">		String password = user.getPassword();</div><div class="line">		<span class="keyword">return</span> <span class="string">"&lt;"</span> + username + <span class="string">","</span> + password + <span class="string">"&gt;"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>有了上面的转换器，那么局部转换器和全局转换器的配置还是和上面的一样，这里就不在赘述了。</p>
</li>
</ul>
<h2 id="数组属性的类型转换器"><a href="#数组属性的类型转换器" class="headerlink" title="数组属性的类型转换器"></a>数组属性的类型转换器</h2><ul>
<li>数组类型的转换器是用于提交的参数为数组的类型的，也就是同时Action中有一个属性为数组。</li>
<li>现在我们要同时输入两个用户的信息，jsp如下:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;form action="http://localhost:8080/web3/login" method="post"&gt;</div><div class="line">&lt;label&gt;请输入用户名和密码(逗号隔开)：&lt;/label&gt;</div><div class="line">&lt;input type="text" name="users"&gt;</div><div class="line">&lt;input type="text" name="users"&gt;</div><div class="line">&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>从上面的代码我们可以看出这里text中有两个name属性相同的表单，这个同时提交上去就是一个数组。</p>
</li>
<li><p>Action类：(定义一个User数组):</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.Action;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginSAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> User[] users;  <span class="comment">//定义数组类型User</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> User[] getUsers() &#123;</div><div class="line">		<span class="keyword">return</span> users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(User[] users)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.users = users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(getUsers()[<span class="number">0</span>].getUsername());</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>数组转换器:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.apache.struts2.util.StrutsTypeConverter;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersConverterStruts</span> <span class="keyword">extends</span> <span class="title">StrutsTypeConverter</span> </span>&#123;</div><div class="line">	<span class="comment">// 将字符串转换复合类型</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">convertFromString</span><span class="params">(Map context, String[] values, Class toClass)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (values.length &gt; <span class="number">1</span>) &#123;</div><div class="line">			User[] results= <span class="keyword">new</span> User[values.length]; <span class="comment">// 创建对象，这里是创建和字符串数组一样的长度</span></div><div class="line">			<span class="comment">// 遍历所有的字符串数组，然后将其填入每一个User对象中</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</div><div class="line">				User user=<span class="keyword">new</span> User();  <span class="comment">//创建user对象</span></div><div class="line">				String[] uservalues = values[i].split(<span class="string">","</span>);</div><div class="line">				user.setUsername(uservalues[<span class="number">0</span>]); <span class="comment">// 将其设置为User的属性</span></div><div class="line">				user.setPassword(uservalues[<span class="number">1</span>]);</div><div class="line">				results[i]=user;   <span class="comment">//将实例化的user对象，填入数组</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> results;</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 这里表示数组中只有一个字符串</span></div><div class="line">			User user = <span class="keyword">new</span> User(); <span class="comment">// 创建对象</span></div><div class="line">			String[] uservalues = values[<span class="number">0</span>].split(<span class="string">","</span>);</div><div class="line">			user.setUsername(uservalues[<span class="number">0</span>]);</div><div class="line">			user.setPassword(uservalues[<span class="number">1</span>]);</div><div class="line">			<span class="keyword">return</span> user;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 将复合类型转换为字符串</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">convertToString</span><span class="params">(Map context, Object values)</span> </span>&#123;</div><div class="line">		<span class="comment">// 只是一个单个的User类型的</span></div><div class="line">		<span class="keyword">if</span> (values <span class="keyword">instanceof</span> User) &#123;</div><div class="line">			User user = (User) values;</div><div class="line">			String username = user.getUsername();</div><div class="line">			String password = user.getPassword();</div><div class="line">			<span class="keyword">return</span> <span class="string">"&lt;"</span> + username + <span class="string">","</span> + password + <span class="string">"&gt;"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// User数组</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (values <span class="keyword">instanceof</span> User[]) &#123;</div><div class="line">			User[] users = (User[]) values;  <span class="comment">//转换为User数组</span></div><div class="line">			String results = <span class="string">"["</span>;</div><div class="line">			<span class="keyword">for</span> (User user : users) &#123;</div><div class="line">				String username = user.getUsername();</div><div class="line">				String password = user.getPassword();</div><div class="line">				results += <span class="string">"&lt;"</span> + username + <span class="string">","</span> + password + <span class="string">"&gt;"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> results + <span class="string">"]"</span>;   <span class="comment">//返回全部的字符串</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Struts2之类型转换器&quot;&gt;&lt;a href=&quot;#Struts2之类型转换器&quot; class=&quot;headerlink&quot; title=&quot;Struts2之类型转换器&quot;&gt;&lt;/a&gt;Struts2之类型转换器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在我们接收表单的请求参数的时候其实默认的
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts之标签库</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/Struts%E4%B9%8B%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/Struts之标签库/</id>
    <published>2018-04-11T16:40:06.000Z</published>
    <updated>2018-04-11T16:40:46.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Struts标签库"><a href="#Struts标签库" class="headerlink" title="Struts标签库"></a>Struts标签库</h1><ul>
<li><p>如果想要在jsp页面使用struts2的标签，需要引入标签库</p>
<ul>
<li><code>&lt;%@ taglib uri=&quot;/struts-tags&quot;  prefix=&quot;s&quot;%&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="数据标签"><a href="#数据标签" class="headerlink" title="数据标签"></a>数据标签</h2><ul>
<li>作用: 用于数据的存储和处理</li>
</ul>
<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><ul>
<li><p>action标签是用来在JSP页面中调用Action某个Action类的，该标签有如下的几个属性；</p>
</li>
<li><p>Id<br>该属性用来指定Action的引用id</p>
</li>
<li><p>name<br>该属性是用来指定Action类的映射地址</p>
</li>
<li><p>namespace<br>该属性用来指定Action类所在namespace</p>
</li>
<li><p>executeResult<br>该属性用来指定是否将Action类的处理结果也跳转的那个视图内容包含到本页面中，默认值为false，不包含</p>
</li>
<li><p>ignoreContextParams<br>该属性用来指定是够将请求的参数传入到Action中，默认为false，即是传入</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>调用第一个action<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 调用登录的Action类，name指定&lt;action&gt;标签的name属性值，executeResult为true指示包含Action响应的内容</span></div><div class="line">		namespace指定Action类所在包指定的namespace</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">s:action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">executeResult</span>=<span class="string">"true"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:action</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>调用第二个action<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 调用第二个Action，表示注册页面，ignoreContextParams为true表示不传入参数，那么其中的password和username就不能接收参数了，因此输出为NULL --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">executeResult</span>=<span class="string">"true"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">ignoreContextParams</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><ul>
<li><p>bean标签用来创建一个JavaBean实例，和action标签差不多，就是在jsp页面中调用JavaBean对象，创建一个对象,不过这个对象是存在Stack Context中的，不是值栈中的。</p>
</li>
<li><p>id<br>用来表示创建的JavaBean类的实例，这个是用来在Stack Context中查看状态的,使用标签<s:debug></s:debug></p>
</li>
<li><p>name<br>用来指定JavaBean，指定JavaBean类所在的路径</p>
</li>
<li><p>var<br>这个是id一样的功能，其实可以代替id</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;s:bean name="com.user.User" id="myBean" &gt;</div><div class="line">		&lt;!-- 使用param标签为其赋值 --&gt;</div><div class="line">		&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param name="age" value="22"&gt;&lt;/s:param&gt;</div><div class="line"></div><div class="line">		姓名: &lt;s:property value="username"/&gt;&lt;br&gt;</div><div class="line">		年龄:&lt;s:property value="age"/&gt;</div><div class="line">&lt;/s:bean&gt;</div></pre></td></tr></table></figure>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><ul>
<li><p>date标签用于格式化一个日期，除了格式化输出当前的日期，也可以计算指定的日期和当前日期时刻之间的时差</p>
</li>
<li><p>format<br>可选属性，用于指定格式化的格式，如yyyy/MM/dd-HH:mm:ss</p>
</li>
<li><p>name<br>必填的值，该属性指定格式化日期的值，比如Date对象</p>
</li>
<li><p>nice<br>可选属性，如果为true那么将会输出指定日期和当前日期的时差，默认为false</p>
</li>
<li><p>timezone<br>可选属性，指定格式化所用的时区</p>
</li>
<li><p>var<br>可选属性，如果指定了该属性，该时间对象将放入值栈中，可以使用id代替，但是推荐使用var</p>
</li>
</ul>
<ul>
<li><strong>如果同时指定了nice=true，和format那么format将会失效</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 创建一个日期对象now，表示当前的时间 --&gt;</div><div class="line">	&lt;s:set var="now" value="new java.util.Date()"&gt;&lt;/s:set&gt;</div><div class="line">	&lt;!--  格式化当前的日期--&gt;</div><div class="line">	&lt;s:date name="#now" format="dd/MM/yyyy HH:mm:ss"/&gt;&lt;br&gt;</div></pre></td></tr></table></figure>
<h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><ul>
<li>该标签是辅助标签，用来生成一个超链接，便于查看值栈，和Stack Context中的信息。</li>
</ul>
<h3 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h3><ul>
<li>主要用于在视图上加载国际资源，使用该标签时需要指定一个name属性，该name属性为需要加载的国际化资源文件的basename</li>
</ul>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ul>
<li><p>将指定的jsp文件或者Servlet文件包含在当前的jsp页面，这个相当于<jsp:include>标签。</jsp:include></p>
</li>
<li><p>value<br>指定被包含的jsp或者Servlet文件路径</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:include value="success.jsp"&gt;&lt;/s:include&gt;</div></pre></td></tr></table></figure>
<h3 id="param"><a href="#param" class="headerlink" title="param"></a>param</h3><ul>
<li>param标签主要是为其他的标签提供参数的</li>
<li><p>注意value的值是使用的OGNL表达式，一定要注意，如果指定字符串要加单引号或者双引号</p>
</li>
<li><p>name<br>指定要赋值的变量名</p>
</li>
<li><p>value<br>指定变量的值</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;s:bean name="com.user.User" id="myBean" &gt;</div><div class="line">		&lt;!-- 使用param标签为其赋值 --&gt;</div><div class="line">		&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param name="age" value="22"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:bean&gt;</div></pre></td></tr></table></figure>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><ul>
<li>push标签用于将某个值放到ValueStack(值栈)中，从而更简单的访问该值，其实不将其防放置在值栈中也是可以访问，使用#即可。只有一个属性value就是需要放在栈顶的值</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;s:bean name="com.user.User" id="myBean"&gt;</div><div class="line">		&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param name="age" value="22"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:bean&gt;</div><div class="line"></div><div class="line">&lt;%-- 只有在push标签内是，被放到值栈中的对象才存在，一旦出了push标签那么就不存在了 --%&gt;</div><div class="line">	&lt;s:push value="#myBean"&gt;</div><div class="line">		&lt;s:property value="username"/&gt;</div><div class="line">		&lt;s:property value="age"/&gt;</div><div class="line">		&lt;!-- 这个可以看出值栈中有值 --&gt;</div><div class="line">		&lt;s:debug&gt;&lt;/s:debug&gt;</div><div class="line">	&lt;/s:push&gt;</div><div class="line">	&lt;!-- 这个没有myBean对象 --&gt;</div><div class="line">	&lt;s:debug&gt;&lt;/s:debug&gt;</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul>
<li><p>set标签是用来将某一个值放入指定的范围，当然也是相当于创建一个新的变量</p>
</li>
<li><p>id<br>该属性用来指定该元素的引用ID（废弃）</p>
</li>
<li><p>var<br>该属性用来指定创建的新变量的名称</p>
</li>
<li><p>value<br>用来指定变量的值，这个是使用的OGNL表达式</p>
</li>
<li><p>scope<br>该属性用来指定新变量的放置范围，可选值有page,request,session,application和action，如果没有指定该属性，则默认放在Stack Context中</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="x" value="'陈加兵'"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#x"/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>获取指定范围的值,其实相当于在指定的范围内绑定属性值，可以实现数据共享：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="x" value="'陈加兵'" scope="session"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#session.x"/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>其实set的真正的作用是变量放置在指定的范围内，如果一个属性的访问的太繁琐了，比如访问user.name,但是这个值需要频繁的使用，这时就创建一变量存放这个值，并且设定范围:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="x" value="user.name"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#x"/&gt;</div></pre></td></tr></table></figure>
<h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><ul>
<li><p>url标签用于在页面生成一个url地址，该标签的属性如下:</p>
</li>
<li><p>id<br>指定该元素的引用id，如果指定了该属性，那么在Stack Context中就会有这个id，那么就可以使用#来获取它的值</p>
</li>
<li><p>value<br>该属性用来指定生成URL地址，如果不指定该属性，那么action属性指定的Action作为URL地址</p>
</li>
<li><p>action<br>该属性用来指定生成URL地址值的action，如果不指定该属性，那么使用value属性值作为URL地址值</p>
</li>
<li><p>method<br>该属性用来指定使用action的方法</p>
</li>
<li><p>encode<br>该属性用来指定是否需要encode请求参数，默认值为true</p>
</li>
<li><p>includeParams<br>该属性用来指定是否包含请求参数，可选值为：none,get,和all默认的为none</p>
</li>
<li><p>includeContext<br>该属性指定是否需要当前上下文包含在url地址中</p>
</li>
<li><p>anchor<br>该属性指定URL的锚点</p>
</li>
<li><p>Scheme<br>该属性用来指定URL使用的协议(HTTP或者HTTPS)</p>
</li>
<li><p>namespace<br>该属性用来指定命名空间，使用action的时候指定</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;s:url value="success.jsp" includeParams="get" id="myUrl"&gt;</div><div class="line">	&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:url&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;s:url action="login"&gt;&lt;/s:url&gt;</div><div class="line">&lt;hr&gt;</div><div class="line"></div><div class="line">&lt;s:url action="login" namespace="/user" includeParams="get"&gt;</div><div class="line">	&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:url&gt;</div><div class="line"></div><div class="line">&lt;hr&gt;</div><div class="line">&lt;!-- 获取值 --&gt;</div><div class="line">&lt;s:property value="#myUrl"/&gt;</div></pre></td></tr></table></figure>
<h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><ul>
<li><p>property标签是用来在页面中输出指定值，该标签有如下属性:</p>
</li>
<li><p>id<br>指定该元素的标识（废弃）</p>
</li>
<li><p>value<br>指定需要输出的特定的值，注意这里使用的OGNL表达式，如果没有指定value属性，那么将会输出值栈中的栈顶的值</p>
</li>
<li><p>escape<br>指定是否转义输出内容中HTML，其默认值为true</p>
</li>
<li><p>default<br>指定一个默认的输出值，如果value中的值为空，那么就会默认输出这个值</p>
</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 转义标签h1，输出内容 --&gt;</div><div class="line">&lt;s:property value=<span class="string">"'&lt;h1&gt;陈加兵&lt;/h1&gt;'"</span> escape=<span class="string">"false"</span>/&gt;</div><div class="line">&lt;!-- 输出Stack Context中的内容，并且指定了默认值 --&gt;</div><div class="line">&lt;s:property value=<span class="string">"#username"</span>  <span class="keyword">default</span>=<span class="string">"输出一个默认值"</span>/&gt;</div><div class="line">&lt;!-- 输出栈顶的值 --&gt;</div><div class="line">&lt;s:property/&gt;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>数据标签最重要的就是<code>set</code>,<code>property</code>,<code>debug</code>,<code>i18n</code>这些标签，其他的了解写即可</li>
</ul>
<h2 id="控制标签"><a href="#控制标签" class="headerlink" title="控制标签"></a>控制标签</h2><ul>
<li>控制标签主要用于条件和循环等流程控制</li>
</ul>
<h3 id="if-elseif-else"><a href="#if-elseif-else" class="headerlink" title="if/elseif/else"></a>if/elseif/else</h3><ul>
<li>其中elseif允许出现多次</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="age" value="22"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:if test="#age&gt;10"&gt;</div><div class="line">	&lt;s:property value="#age+'大于10'" /&gt;</div><div class="line">&lt;/s:if&gt;</div><div class="line">&lt;s:elseif test="#age&gt;20"&gt;</div><div class="line">	&lt;s:property value="#age+'大于20'" /&gt;</div><div class="line">&lt;/s:elseif&gt;</div><div class="line">&lt;s:else&gt;</div><div class="line">	&lt;s:property value="#age+'在10与20之间'" /&gt;</div><div class="line">&lt;/s:else&gt;</div></pre></td></tr></table></figure>
<ul>
<li>并且和或的关系(&amp;&amp;,||)</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;%-- 指定begin,end获取前3个元素--%&gt;</div><div class="line">&lt;s:iterator value="#list" var="item" status="iter"&gt;</div><div class="line">	&lt;s:if test="#iter.isOdd()&amp;&amp;#iter.getIndex()&gt;0"&gt;</div><div class="line">		&lt;s:property value="#item+'---'+#iter.getIndex()"/&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">	&lt;/s:if&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><ul>
<li><p>iterator标签主要用于对集合进行迭代，这里的集合包含list，Set和数组，也可以对Map集合进行迭代输出。</p>
</li>
<li><p>value<br>可选属性，该属性指定迭代的集合，如果没有指定value属性，那么就会迭代ValuStack栈顶的集合。</p>
</li>
<li><p>var<br>可选属性，该属性指定的是迭代的集合中的每一个元素，放在Stack Context中·</p>
</li>
<li><p>status<br>可选属性，该属性指定迭代对象的IteratorStatus实例存放在Stack Context中，通过这个属性可以判断当前迭代元素的属性。例如是否为最后一个，以及当前元素的索引</p>
</li>
<li><p>begin<br>可选属性，指定从迭代对象第几个元素开始迭代</p>
</li>
<li><p>end<br>可选属性，指定迭代到对象的第几个元素结束</p>
</li>
<li><p>step<br>可选属性，指定步长</p>
</li>
</ul>
<ul>
<li>如果迭代元素指定了status，那么就可以调用如下的属性查看迭代元素的当前的属性，可以调用如下的几个方法查看：<ul>
<li>int getCount()   返回当前迭代了几个元素</li>
<li>int getIndex()   返回当前迭代元素的索引</li>
<li>boolean isEven() 当前迭代元素的索引是否为偶数</li>
<li>boolean isFirst() 当前迭代元素是否为第一个元素</li>
<li>boolean isLast()  当前迭代元素是否为最后一个元素</li>
<li>boolean isOdd()  判断当前的迭代元素的索引是否为奇数</li>
</ul>
</li>
</ul>
<ul>
<li>此标签每次进行迭代的时候就会把元素放在值栈的顶部，那么我们都知道<s:property>如果不指定value属性，那么默认的就是从栈顶取元素：</s:property></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;%--指定了value属性，但是其他属性都没有，那么直接可以从栈顶取数据 --%&gt;</div><div class="line">	&lt;s:iterator value="#"&gt;</div><div class="line">		&lt;s:property/&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>指定var属性来获取迭代对象的值:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;%-- 指定var表示当前迭代对象的每一个元素--%&gt;</div><div class="line">	&lt;s:iterator value="#list" var="item"&gt;</div><div class="line">		&lt;%-- 因为var元素是放在Stack Context中，因此可以使用#取值 --%&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>指定begin，end来获取指定范围的值。</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;%-- 指定begin,end获取前3个元素--%&gt;</div><div class="line">	&lt;s:iterator value="#list" var="item" begin="0" end="2"&gt;</div><div class="line">	&lt;%-- 因为var元素是放在Stack Context中，因此可以使用#取值 --%&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<ul>
<li>指定status获取每一个迭代元素的当前状态:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;%-- 指定begin,end获取前3个元素--%&gt;</div><div class="line">	&lt;s:iterator value="#list" var="item" status="iter"&gt;</div><div class="line">		&lt;s:if test="#iter.isOdd()&amp;&amp;#iter.getIndex()&gt;0"&gt;</div><div class="line">			&lt;s:property value="#item+'---'+#iter.getIndex()"/&gt;</div><div class="line">			&lt;br&gt;</div><div class="line">		&lt;/s:if&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<ul>
<li>迭代Map</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="map" value="#&#123;'age':22,'username':'陈加兵' &#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:iterator value="#map" var="item"&gt;</div><div class="line">	获取集合中的key:&lt;s:property value="#item.key"/&gt;</div><div class="line">	获取集合中的值：&lt;s:property value="#item.value"/&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><ul>
<li><p>append标签用于将多个集合拼接起来形成一个新的集合。</p>
</li>
<li><p>var<br>拼接之后形成的新的集合，放在Stack Context中</p>
</li>
<li><p>id<br>这个和var是一样的，两个可以互换使用的，不过推荐使用var</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">&lt;s:set var="list1" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:set var="list2" value="&#123;44,55,6,99&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">&lt;s:append var="list3"&gt;</div><div class="line">	&lt;%-- 使用param标签指定要拼接的集合 --%&gt;</div><div class="line">	&lt;s:param value="#list1"&gt;&lt;/s:param&gt;</div><div class="line">	&lt;s:param value="#list2"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:append&gt;</div><div class="line"></div><div class="line">&lt;s:iterator value="#list3" var="item"&gt;</div><div class="line">	&lt;s:property value="#item"/&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><ul>
<li><p>使用这个标签可以将字符串按照指定的分隔符分割成多个子串，临时生成的子串可以使用<s:iterator>标签迭代输出。可以这样理解：这个标签使用指定的的分隔符将字符串分割，然后这些字符串组成一个集合。</s:iterator></p>
</li>
<li><p>val<br>必选属性，该属性指定被解析的字符串</p>
</li>
<li><p>var<br>可选属性，如果指定了该属性，那么生成的Iterator对象将会以这个名称放在Stack Context中，就可以访问这个集合了。</p>
</li>
<li><p>count<br>可选属性，该属性指定生成集合中元素的个数</p>
</li>
<li><p>separator<br>必选属性，这个属性指定分隔符</p>
</li>
<li><p>converter<br>可选属性，该属性指定一个转换器，该转换器负责将集合中的每一个字符串转换成对象，通过该转换器可以将一个字符串解析成对象集合。该属性值必须是org.apache.struts2.util.IteratorGenerator.Convertere</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;%--分隔符为',',并且选取其中的前两个元素 --%&gt;</div><div class="line">	&lt;s:generator separator="," val="'陈加兵,郑元梅,chenjiabing'" var="x" count="2"&gt;&lt;/s:generator&gt;</div><div class="line"></div><div class="line">	&lt;s:iterator value="#x" var="item"&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><ul>
<li>merge这个标签和append的功能是一样的，都是将两个集合拼接在一起，但是append是将一个集合拼接在另外一个集合的末尾，但是merge是将后面一个集合的对应索引的元素添加到前面一个集合的索引所在的位置，也就是后面集合的第一个元素变成了新集合的第二个元素了。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="list1" value="&#123;'陈加兵','郑元梅'&#125;"&gt;&lt;/s:set&gt;</div><div class="line">	&lt;s:set var="list2" value="&#123;1,2&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;s:merge var="list3"&gt;</div><div class="line">		&lt;s:param value="#list1"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param value="#list2"&gt;&lt;/s:param&gt;</div><div class="line">	&lt;/s:merge&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;s:iterator var="item" value="#list3"&gt;</div><div class="line">		&lt;s:property value="#item"/&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="subset"><a href="#subset" class="headerlink" title="subset"></a>subset</h3><ul>
<li><p>subset标签用于取得集合的子集，形成新的集合。</p>
</li>
<li><p>count<br>可选属性，指定选取集合的子集的个数，如果不指定该属性，那么默认的就是截取全部的元素</p>
</li>
<li><p>source<br>可选属性，该属性指定源集合，如果没有指定，那么默认是从栈顶取集合</p>
</li>
<li><p>start<br>可选属性，该属性指定子集从源集合的第几个元素开始截取，默认从第一个开始(即start=0)</p>
</li>
<li><p>decider<br>可选属性，该属性有开发真决定是否选中该元素</p>
</li>
<li><p>var<br>可选属性，如果指定了该属性，那么生成Iterator对象设置成为Page范围内的属性，可以使用#attr.name获取其值，也可以替换成id，但是推荐使用var</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 创建一个集合 --&gt;</div><div class="line">	&lt;s:set var="list1" value="&#123;'陈加兵','郑元梅',1,2,3&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;!--  指定变量为x，存储在page中，源集合为list1，截取其中的两个元素，从第二个元素开始截取 --&gt;</div><div class="line">	&lt;s:subset var="x" source="#list1" count="2" start="1"&gt;&lt;/s:subset&gt;</div><div class="line"></div><div class="line">	&lt;!-- 由于x存储在Page中，因此使用#attr.x来获取 --&gt;</div><div class="line">	&lt;s:iterator value="#attr.x" var="item"&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul>
<li><p>主要用于对集合进行排序</p>
</li>
<li><p>comparator<br>必填属性，该属性指定进行排序的实例，必须实现java.util.Comparator接口</p>
</li>
<li><p>source<br>可选属性，这是一个源集合，如果没有指定，那么就拿栈顶的集合进行排序</p>
</li>
<li><p>var<br>可选属性，如果指定了属性，那么生成的Iterator对象设置成Page范围的属性，该属性也可替换成id</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="list" value="&#123;'陈加兵','123459999+','4442555'&#125;"&gt;&lt;/s:set&gt;</div><div class="line">	&lt;!-- 创建一个实例 --&gt;</div><div class="line">	&lt;s:bean name="com.compare.Compare" id="compare"&gt;&lt;/s:bean&gt;</div><div class="line">	&lt;!-- 排序 --&gt;</div><div class="line">	&lt;s:sort comparator="#compare" source="#list" var="x"&gt;&lt;/s:sort&gt;</div><div class="line"></div><div class="line">	&lt;!-- 迭代输出 --&gt;</div><div class="line">	&lt;s:iterator var="item" value="#attr.x"&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Struts标签库&quot;&gt;&lt;a href=&quot;#Struts标签库&quot; class=&quot;headerlink&quot; title=&quot;Struts标签库&quot;&gt;&lt;/a&gt;Struts标签库&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果想要在jsp页面使用struts2的标签，需要引入标签库&lt;/p
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
</feed>
