<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-03-28T04:18:41.899Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL操作六</title>
    <link href="http://chenjiabing666.github.io/2018/03/28/SQL%E6%93%8D%E4%BD%9C%E5%85%AD/"/>
    <id>http://chenjiabing666.github.io/2018/03/28/SQL操作六/</id>
    <published>2018-03-28T04:17:56.000Z</published>
    <updated>2018-03-28T04:18:41.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day06"><a href="#Day06" class="headerlink" title="Day06"></a>Day06</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h3><ul>
<li><p><strong>什么是视图</strong>： 在数据库中存在多种对象，表和视图都是数据库中的对象，创建视图时视图名称不能和表名相同，实际上，视图就代表一个sql查询语句，也可以理解成视图是一张虚拟的表，但是虚拟表中的数据会<em>随着原表数据的改变而改变</em></p>
</li>
<li><p><strong>为什么使用视图</strong>： </p>
<ul>
<li>因为有些数据的查询需要书写大量的sql语句，每次书写比较麻烦，使用视图可起到重用sql语句的作用</li>
<li>可以通过视图隐藏敏感信息，比如隐藏员工工资的字段，那么我们可以创建一个视图，其中不包含工资这个字段</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>创建视图的格式</strong>： create view 视图名 as  子查询</p>
<ul>
<li><code>create view view_emp_10 as(select * from emp where deptno=10);</code>  创建一个视图view_emp_10  （简单视图）</li>
<li>create view view_dep_20 as(select * from EMP where deptno=20 and sal&lt;3000 ); 创建emp表部门是20，工资小于3000的视图</li>
<li>create view view_emp_sum_max(select max(sal),sum(sal),min(sal) from EMP);  复杂视图，只能查看，不能删除修改插入</li>
</ul>
</li>
<li><p><strong>如何查看视图</strong>： 查询的方式和表的查询方式一样(select)</p>
</li>
</ul>
<h3 id="视图分类"><a href="#视图分类" class="headerlink" title="视图分类"></a>视图分类</h3><ul>
<li>简单视图 ： 创建视图的子查询中 不包含去重，函数，聚合，关联查询的视图成为简单视图<ul>
<li>简单视图可以实现增删改查</li>
</ul>
</li>
<li>复杂视图 ： 和简单视图相反   <ul>
<li>复杂视图是能查询</li>
</ul>
</li>
</ul>
<h3 id="视图数据污染"><a href="#视图数据污染" class="headerlink" title="视图数据污染"></a>视图数据污染</h3><ul>
<li><strong>什么是数据污染</strong>： 在视图中插入一条数据，在视图中不显示，但是在原表中显示的数据，称为数据污染</li>
</ul>
<ul>
<li>在视图中只要进行insert操作时才会造成数据污染，因为update和delete只能操作视图中存在的数据</li>
</ul>
<ul>
<li>如果一旦执行插入语句，但是插入的数据不符合创建视图时的子查询条件，那么就会插入视图中失败，但是会插入到原表中，这个是我们不需要的，这个就叫做视图数据污染。</li>
</ul>
<h3 id="往视图中插入数据，删除数据，修改数据"><a href="#往视图中插入数据，删除数据，修改数据" class="headerlink" title="往视图中插入数据，删除数据，修改数据"></a>往视图中插入数据，删除数据，修改数据</h3><ul>
<li><p>简单视图： </p>
<ul>
<li><strong>删除数据</strong>：  如果将视图中的数据删除了，那么原表中的数据也会删除掉</li>
<li><p><strong>插入数据</strong>：  如果插入的数据符合创建视图的子查询的条件，那么就会将数据插入进视图和原表中，如果不符合创建视图时的子查询的条件，那么数据只会插入到原表中，不会插入进视图。</p>
<ul>
<li>比如上面创建的view_emp_10视图，子查询条件为deptno=10,如果插入视图的数据的的deptno字段为10，那么就会显示在视图和表中，如果不为10，那么只会显示在表中。</li>
</ul>
</li>
<li><p><strong>更新数据</strong>： 如果更新后的数据不符合创建视图时子查询的条件的话，那么这些数据就会移除视图，但是原表中还会显示，只是不在视图中显示。 如果满足子查询的条件，那么就会成功更新在视图中，原表和视图的数据都会更新并且都会显示</p>
<ul>
<li>比如上面创建的view_emp_10的视图，如果我们将视图中的一条数据的deptno改为11，那么这条数据将不会显示在视图中，只会显示在原表中。</li>
</ul>
</li>
<li><p><strong>总结</strong>：</p>
<ul>
<li>更新和删除都是对视图中已经存在的数据进行操作，如果存在就会直接删除和更新，并且原表中的数据也会同时被删除和更新，但是如果执行更新操作，更新后的条件不符合创建视图时子查询的条件，那么这些数据将不会显示在视图中，但是在表中还是存在的</li>
<li>插入数据有可能会造成数据污染</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="避免视图数据污染-with-check-option"><a href="#避免视图数据污染-with-check-option" class="headerlink" title="避免视图数据污染(with check option)"></a>避免视图数据污染(with check option)</h3><ul>
<li>我们在创建的视图的时候加上<code>with check option</code> 即可<ul>
<li><code>create view v_emp_30 as(select * from EMP where deptno=30) with check option;</code></li>
<li>现在我们在往v_emp_30的视图中插入数据，其中字段deptno不等于30，那么就会报错，因为不符合创建视图时的子查询条件</li>
<li>但是如果我们没有使用<code>with check option</code>，那么我们就会插入成功，虽然不会在视图中显示，但是插入到原表中了，造成了视图数据污染</li>
</ul>
</li>
</ul>
<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><ul>
<li><p>我们创建一个视图</p>
<ul>
<li><code>create view view_emp_10 as(select * from emp where deptno=10);</code></li>
</ul>
</li>
<li><p>现在我们需要为子查询加上一个条件 工资大于3000的，即是 创建一张视图，里面数据是部门号为10，工资大于3000的全部员工信息，那么我们就需要在原有的view_emp_10的基础上修改</p>
<ul>
<li><code>create  or replace view view_emp_10 as(select * from EMP where deptno=10 and sal&gt;3000);</code>直接在create后面加上<code>or replace</code>即可，有就替换</li>
</ul>
</li>
</ul>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><ul>
<li>格式 ：drop view 视图名称  </li>
<li><p>drop view_emp_10;  删除视图view_emp_10，如果存在就删除，不存在就报错</p>
</li>
<li><p>加上关键字  <code>if exists</code> 如果存在就删除，不存在也不报错</p>
<ul>
<li><code>drop view if exists view_emp_10;</code></li>
</ul>
</li>
<li><p><strong>如果创建视图的时候对视图中的字段使用了别名，那么以后对视图的操作只能使用别名来操作</strong></p>
<ul>
<li><code>create view view_1 as(select ename name from emp where deptno=10);</code>  这里面的子查询将字段ename起了别名，那么我们在以后操作的时候只能使用别名对这个字段操作</li>
</ul>
</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li><p>创建视图显示每个部门对应的员工的名字</p>
<ul>
<li>`create view view_emp_dept as(select d.dname,e.ename from EMP e join Dept d on d.deptno=e.deptno);</li>
</ul>
</li>
<li><p>修改上面的视图在上面题的前提下只显示工资在3000以内的</p>
<ul>
<li><code>create or replace  view view_emp_dept as(select d.dname,e.ename from EMP e join Dept d on d.deptno=e.deptno where e.sal&lt;3000);</code></li>
</ul>
</li>
<li><p>删除上面的视图</p>
<ul>
<li><code>drop view if exists v_emp_dept;</code></li>
</ul>
</li>
</ul>
<h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><ul>
<li><p><strong>什么是索引</strong>： </p>
<ul>
<li>索引是用来提高查询速度的技术，类似于一个目录，查询数据时会从索引中对数据进行定位，然后直接找到数据所在的位置</li>
</ul>
</li>
<li><p><strong>为什么使用索引</strong> ： </p>
<ul>
<li>因为不使用索引的话，查询数据会按照磁盘块一块一块的去查，如果数据量很大，效率很低</li>
</ul>
</li>
<li><p>索引分为聚集索引和非聚集索引</p>
<ul>
<li>在mysql中数据库会为主键自动创建聚集索引，聚集索引中数据是有序保存</li>
</ul>
</li>
</ul>
<ul>
<li><p>索引内部实现原理 ：</p>
<ul>
<li>B+tree </li>
</ul>
</li>
<li><p>数据库中创建索引的过程是数据库内部自己控制，然后使用索引的过程也是数据库自己操作的，不需要程序猿干涉</p>
</li>
</ul>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><ul>
<li><p>格式： <code>create index 索引名 on 表名(字段名([长度]));</code></p>
</li>
<li><p>创建索引之前先查询title=’100’的数据，看看查询时间</p>
<ul>
<li>select * from item2 where title=’100’;</li>
</ul>
</li>
<li><p>创建title索引</p>
<ul>
<li>create index index_title on item2(title);</li>
</ul>
</li>
<li><p>再次查询，查看时间 </p>
<ul>
<li>select * from item2 where title=’100’;</li>
</ul>
</li>
</ul>
<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><ul>
<li>格式: <code>show index from 表名</code></li>
<li>其中包含主键的索引，这个是自动创建的</li>
</ul>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><ul>
<li>格式：<code>drop index 索引名 on 表名</code></li>
<li>drop index index_title on item2;</li>
</ul>
<h3 id="索引是越多越好吗？有索引就一定好吗？"><a href="#索引是越多越好吗？有索引就一定好吗？" class="headerlink" title="索引是越多越好吗？有索引就一定好吗？"></a>索引是越多越好吗？有索引就一定好吗？</h3><ul>
<li>因为索引会占用磁盘空间，所以创建索引需谨慎，只创建查询需求的索引</li>
<li>索引要建立在大量的数据的表中，如果数据量不够大，可能会降低查询效率</li>
</ul>
<h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><ul>
<li><p>创建索引的时候指定多个字段，此时如果查询数据正好过滤条件为这多个字段的话，可以降低磁盘块的访问，从而提高查询效率</p>
</li>
<li><p>创建复合索引: create index index_title_price on item2(title,price);</p>
</li>
<li><p>执行查询语句</p>
<ul>
<li><code>select * from item2 where title=&#39;100&#39; and price &lt;100000;</code> 可以看出查询效率很高</li>
</ul>
</li>
</ul>
<h3 id="创建表的时候直接创建索引"><a href="#创建表的时候直接创建索引" class="headerlink" title="创建表的时候直接创建索引"></a>创建表的时候直接创建索引</h3><ul>
<li><code>create table t_index(id int,age int ,index index index_age(age));</code></li>
<li>直接在字段后面写入  <code>index 名字(字段)</code></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>索引会占磁盘空间，不是越多越好</li>
<li>数据量小的表不要创建索引</li>
<li>对于经常出现在<code>where</code> ，<code>order by</code>，<code>distinct</code> 后面的字段创建索引 ，效果更好</li>
<li>不要在频繁修改的表中创建索引</li>
</ul>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul>
<li>什么是约束： 约束就是对表字段的数据进行限制的规则</li>
</ul>
<h3 id="唯一约束-unique"><a href="#唯一约束-unique" class="headerlink" title="唯一约束 unique"></a>唯一约束 unique</h3><ul>
<li>添加唯一约束的字段，这个字段的值不能重复,否则报错</li>
<li><code>crate table t(id int ,age int unique);</code></li>
</ul>
<h3 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束 (primary key)"></a>主键约束 (primary key)</h3><ul>
<li><p>创建表时添加主键约束</p>
<ul>
<li><code>create table t(id int primary key auto_increment,age int);</code></li>
</ul>
</li>
<li><p>创建表之后添加主键 (primary key(字段名) )</p>
<ul>
<li><code>alter table t add primary key(id);</code></li>
</ul>
</li>
<li><p>删除主键约束</p>
<ul>
<li>格式： alter table 表名 drop primary key </li>
<li><code>alter table t drop primary key;</code></li>
</ul>
</li>
</ul>
<h3 id="自增约束-auto-increment"><a href="#自增约束-auto-increment" class="headerlink" title="自增约束(auto_increment)"></a>自增约束(auto_increment)</h3><ul>
<li>当字段赋的值为null时，字段会自动增长</li>
<li>如果删除了某条数据，自增数值不会减少</li>
<li><p>自增的基础是根据字段的最大值来自增的</p>
</li>
<li><p><code>create table t(id int primary key auto_increment,age int);</code></p>
</li>
<li><p>如果使用delete清空表(<code>delete from t</code>) ,那么自增的值不会从头开始</p>
</li>
<li><p>如果使用<code>truncate table t</code> 的方式清空表，那么自增的值会从头开始，则从1开始</p>
</li>
</ul>
<h3 id="外键约束（foreign-key）"><a href="#外键约束（foreign-key）" class="headerlink" title="外键约束（foreign key）"></a>外键约束（foreign key）</h3><ul>
<li>外键约束是保证一个表或者两个表之间数据一致性和完整性的约束</li>
<li>工作中除非特殊情况，一般不使用外键约束，通过代码逻辑进行限制，避免测试时不必要的麻烦</li>
<li>外键的值通常是另外一张表的主键</li>
<li>外键可以重复，可以为null，但不能是另外一张表中不存在的数据<br>-</li>
<li>使用外键约束的<strong>条件</strong>：<ol>
<li>必须保证两张表使用相同的引擎(engine)</li>
<li>引擎必须是innodb,myisam不支持外键约束</li>
</ol>
</li>
<li><p>外键和关联字段必须是相同的数据类型，比如一张表的主键id的外键，那么这个外键一定要是int类型</p>
</li>
<li><p><strong>外键所对应的关联字段如果不是主键，会自动为该字段创建索引</strong></p>
</li>
</ul>
<h4 id="创建外键约束"><a href="#创建外键约束" class="headerlink" title="创建外键约束"></a>创建外键约束</h4><ul>
<li><p>格式 ：</p>
<ul>
<li><code>create table t(id int primary key auto_increment,deptid int,constraint 约束名 foregin key(deptid) references 关联的表名(关联表的字段名))</code></li>
</ul>
</li>
<li><p>创建两张表 t_emp 和 t_dept</p>
<ul>
<li>先创建部门表  <code>create table t_dept(id int primary key auto_increment,name varchar(10));</code></li>
<li>创建t_emp  <code>create table t_emp(id int primary key auto_increment,name varchar(10),deptid int,constraint fk_dept foreign key(deptid) references t_dept(id));</code></li>
</ul>
</li>
<li><p>测试：</p>
<ul>
<li>如果插入数据到t_emp中的时候，其中的deptid的值在t_dept中的id不存在的话，那么插入失败，因为两个是外键关联的</li>
<li>如果想要删除t_dept的数据，但是在t_emp中的还有关联的数据(即是deptid)，那么删除失败，只有将t_emp中关联的数据字段deptid设置为null，此时在删除才会成功</li>
</ul>
</li>
</ul>
<h4 id="外键总结"><a href="#外键总结" class="headerlink" title="外键总结"></a>外键总结</h4><ul>
<li>保证一个表或两个表之间的数据一致性和完整性，工作不怎用，外键的值是关联表的主键，值可以是null可以重复，不能是不存在的数据，使用外键必须两张表使用innodb引擎，数据类型要一致，会自动添加索引</li>
</ul>
<h3 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束(not null)"></a>非空约束(not null)</h3><ul>
<li>该字段的值不能为null，否则报错</li>
</ul>
<h3 id="默认约束-default"><a href="#默认约束-default" class="headerlink" title="默认约束(default)"></a>默认约束(default)</h3><ul>
<li>给字段设置默认值</li>
<li><code>create table t(id int primary key auto_increment,age int not null default 0);</code>  设置字段age设置默认值为0 ，如果插入数据的时候没有插入age的值，那么默认赋值为0</li>
</ul>
<h3 id="check-约束"><a href="#check-约束" class="headerlink" title="check 约束"></a>check 约束</h3><ul>
<li>在mysql中不生效，但是语法不报错</li>
<li><code>create table t_check(id int,age int,check(age&gt;10));</code></li>
</ul>
<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul>
<li>事务是数据库执行sql语句的工作单元或者最小单元，写在事务里面的sql要么同时成功，要么同时失败</li>
</ul>
<h3 id="事务的ACID性质-重要，面试常考"><a href="#事务的ACID性质-重要，面试常考" class="headerlink" title="事务的ACID性质(重要，面试常考)"></a>事务的ACID性质(重要，面试常考)</h3><ul>
<li>Automicity ： 原子性 ： 最小，不能拆分</li>
<li>Consistency： 一致性  ： 要么同时成功，要么同时失败</li>
<li>Isolation：   隔离性  ： 事务和事务之间互不影响</li>
<li>Durablity ：  持久性 ： 事务执行完之后数据持久保存到数据库中</li>
</ul>
<h3 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h3><ul>
<li>show variables lile “%autocommit%”</li>
<li>set autocommit=0/1</li>
<li>开启 begin</li>
<li>commit  </li>
<li>rollback</li>
<li>savepoint  s1</li>
<li>rollback to s1</li>
</ul>
<h3 id="事务案例"><a href="#事务案例" class="headerlink" title="事务案例"></a>事务案例</h3><ul>
<li>转账</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day06&quot;&gt;&lt;a href=&quot;#Day06&quot; class=&quot;headerlink&quot; title=&quot;Day06&quot;&gt;&lt;/a&gt;Day06&lt;/h1&gt;&lt;h2 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作五</title>
    <link href="http://chenjiabing666.github.io/2018/03/28/SQL%E6%93%8D%E4%BD%9C%E4%BA%94/"/>
    <id>http://chenjiabing666.github.io/2018/03/28/SQL操作五/</id>
    <published>2018-03-27T22:59:18.000Z</published>
    <updated>2018-03-28T04:17:26.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day05"><a href="#Day05" class="headerlink" title="Day05"></a>Day05</h1><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h2><h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h3><blockquote>
<p>当前表的数据和当前表里面的数据有关联关系</p>
</blockquote>
<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><blockquote>
<p>学生和老师的关系就是多对多的关系<br>一个学生可以被多个老师教，一个老师可以教多个学生</p>
</blockquote>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><blockquote>
<p>创建教师表 teacher(id,name)<br>创建学生表 stu(id,name)<br>创建第三张关系表t_s(sid,t_id)</p>
</blockquote>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li><p>查询学生小明的所有老师</p>
<ul>
<li>通过小明查询出小明的id</li>
<li>得到小明的id 在关系表中查询出对应的老师的id</li>
<li>通过关系表中的老师的id再和教师表关联查询查出所有的老师</li>
<li><code>select name from teacher where id in ( select t_s.tid from stu join t_s on stu.id=t_s.sid where stu.name=&#39;小明&#39;);</code>  子查询方式，但是子查询中使用了内连接，也可以使用等值连接</li>
<li><code>select t_s.tid from stu join t_s on stu.id=t_s.sid  join teacher t on t.id=tid where stu.name=&#39;小明&#39;;</code> 使用内连接的方式查询，多个join连接，where条件语句应该放在最后一个join的on的后面</li>
</ul>
</li>
<li><p>查询所有老师对应的所有学生0</p>
<ul>
<li><code>select t.name t_name,stu.name s_name from stu join t_s on stu.id=t_s.sid  join teacher t on t.id=tid;</code></li>
</ul>
</li>
<li><p>查询唐僧的所有学生</p>
<ul>
<li><code>select t.name t_name,stu.name s_name from stu join t_s on stu.id=t_s.sid  join teacher t on t.id=tid where t.name=&#39;唐僧&#39;;</code></li>
</ul>
</li>
</ul>
<h2 id="如何让两张表建立关系"><a href="#如何让两张表建立关系" class="headerlink" title="如何让两张表建立关系"></a>如何让两张表建立关系</h2><ul>
<li><p>自关联</p>
<ul>
<li>自关联是在一张表中，这张表中要有一个字段记录上级的主键</li>
</ul>
</li>
<li><p>一对一： </p>
<ul>
<li>需要在从表中有个字段表示主表的主键值   （外键）</li>
</ul>
</li>
<li><p>一对多</p>
<ul>
<li>部门和员工为例，需要在多的一端通过字段记录另外一张的表的主键 （外键）</li>
</ul>
</li>
<li><p>多对多</p>
<ul>
<li>需要准备一张关系表，表中保存两张表的主键值（第三张表） （外键）</li>
</ul>
</li>
</ul>
<h2 id="连接方式和关联关系的区别"><a href="#连接方式和关联关系的区别" class="headerlink" title="连接方式和关联关系的区别"></a>连接方式和关联关系的区别</h2><ul>
<li>连接方式： 包括内连接，等值连接，左/右外连接 是指查询两张表时使用的查询方式</li>
<li>关联关系： 一对一，一对多，多对多  是指两张表之间存在的逻辑关系</li>
</ul>
<h2 id="数据库设计值权限管理"><a href="#数据库设计值权限管理" class="headerlink" title="数据库设计值权限管理"></a>数据库设计值权限管理</h2><h3 id="什么是权限管理"><a href="#什么是权限管理" class="headerlink" title="什么是权限管理"></a>什么是权限管理</h3><ul>
<li>不同用户登录网站后可能会有不同的权限，实现此功能的过程称为权限管理</li>
</ul>
<h3 id="权限管理表的实现"><a href="#权限管理表的实现" class="headerlink" title="权限管理表的实现"></a>权限管理表的实现</h3><ul>
<li>总共需要5张表<ul>
<li>用户表 角色表  权限表  用户和角色关系表   角色和权限的关系表</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day05&quot;&gt;&lt;a href=&quot;#Day05&quot; class=&quot;headerlink&quot; title=&quot;Day05&quot;&gt;&lt;/a&gt;Day05&lt;/h1&gt;&lt;h2 id=&quot;关联关系&quot;&gt;&lt;a href=&quot;#关联关系&quot; class=&quot;headerlink&quot; title=&quot;关联关系&quot;
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作四</title>
    <link href="http://chenjiabing666.github.io/2018/03/26/SQL%E6%93%8D%E4%BD%9C%E5%9B%9B/"/>
    <id>http://chenjiabing666.github.io/2018/03/26/SQL操作四/</id>
    <published>2018-03-26T11:14:40.000Z</published>
    <updated>2018-03-27T08:42:20.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day-04"><a href="#Day-04" class="headerlink" title="Day 04"></a>Day 04</h1><h2 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h2><h3 id="商城建表语句"><a href="#商城建表语句" class="headerlink" title="商城建表语句"></a>商城建表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_item`</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_item`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品id'</span>,</div><div class="line">  <span class="string">`category_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类id'</span>,</div><div class="line">  <span class="string">`item_type`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品系列'</span>,</div><div class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品标题'</span>,</div><div class="line">  <span class="string">`sell_point`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品卖点'</span>,</div><div class="line">  <span class="string">`price`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品单价'</span>,</div><div class="line">  <span class="string">`num`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'库存数量'</span>,</div><div class="line">  <span class="string">`barcode`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'条形码'</span>,</div><div class="line">  <span class="string">`image`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'图片路径'</span>,</div><div class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'商品状态  1：上架   2：下架   3：删除'</span>,</div><div class="line">  <span class="string">`priority`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'显示优先级'</span>,</div><div class="line">  <span class="string">`created_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</div><div class="line">  <span class="string">`modified_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</div><div class="line">  <span class="string">`created_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人'</span>,</div><div class="line">  <span class="string">`modified_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_item`</span> <span class="keyword">VALUES</span> </div><div class="line">(<span class="string">'10000000'</span>,<span class="number">238</span>,<span class="string">'牛皮纸记事本'</span>,<span class="string">'广博(GuangBo)10本装40张A5牛皮纸记事本子日记本办公软抄本GBR0731'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">23</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/00GuangBo1040A5GBR0731/collect.png'</span>,<span class="number">1</span>,<span class="number">53</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000001'</span>,<span class="number">238</span>,<span class="string">'牛皮纸记事本'</span>,<span class="string">'广博(GuangBo)10本装40张A5牛皮纸记事本子日记本办公软抄本GBR0731'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">23</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/00GuangBo1040A5GBR0731/collect.png'</span>,<span class="number">1</span>,<span class="number">62</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000002'</span>,<span class="number">238</span>,<span class="string">'皮面日程本'</span>,<span class="string">'广博(GuangBo)皮面日程本子 计划记事本效率手册米色FB60322'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">46</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/001GuangBo)FB60322/collect.png'</span>,<span class="number">1</span>,<span class="number">49</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000021'</span>,<span class="number">238</span>,<span class="string">'皮面日程本'</span>,<span class="string">'广博(GuangBo)皮面日程本子 计划记事本效率手册蓝色FB60321'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">22</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/001GuangBo)FB60322/collect.png'</span>,<span class="number">1</span>,<span class="number">73</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000003'</span>,<span class="number">238</span>,<span class="string">'记事本日记本笔记本'</span>,<span class="string">'广博(GuangBo)16K115页线圈记事本子日记本文具笔记本图案随机'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">13</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/01GuangBo16K115FB60506/collect.png'</span>,<span class="number">1</span>,<span class="number">58</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000004'</span>,<span class="number">241</span>,<span class="string">'计算器'</span>,<span class="string">'得力（deli）1548A商务办公桌面计算器 太阳能双电源'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">58</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/002calculator1548A/collect.png'</span>,<span class="number">1</span>,<span class="number">42</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000005'</span>,<span class="number">241</span>,<span class="string">'圆珠笔'</span>,<span class="string">'施耐德（Schneider） K15 经典款圆珠笔 (5支混色装)'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">29</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/03SchneiderK15/collect.png'</span>,<span class="number">1</span>,<span class="number">36</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000006'</span>,<span class="number">236</span>,<span class="string">'票据网格拉链袋'</span>,<span class="string">'三木(SUNWOOD) C4523 票据网格拉链袋/文件袋 12个装 颜色随机'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">28</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/04_SUNWOODC452312/collect.png'</span>,<span class="number">1</span>,<span class="number">53</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000007'</span>,<span class="number">163</span>,<span class="string">'燃 7000经典版'</span>,<span class="string">'戴尔Dell 燃700金色'</span>,<span class="string">'下单赠12000毫安移动电源'</span>,<span class="number">32999</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000gold/collect.png'</span>,<span class="number">1</span>,<span class="number">59</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000008'</span>,<span class="number">163</span>,<span class="string">'燃 7000经典版'</span>,<span class="string">'戴尔Dell 燃700R1605银色'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4549</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000R1605Ssilvery/collect.png'</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000009'</span>,<span class="number">163</span>,<span class="string">'燃 7000学习版'</span>,<span class="string">'戴尔Dell 燃700金色'</span>,<span class="string">'下单赠12000毫安移动电源'</span>,<span class="number">39929</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000gold/collect.png'</span>,<span class="number">1</span>,<span class="number">84</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000010'</span>,<span class="number">163</span>,<span class="string">'燃 7000学习版'</span>,<span class="string">'戴尔Dell 燃700R1605银色'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">5559</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000R1605Ssilvery/collect.png'</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000011'</span>,<span class="number">163</span>,<span class="string">'燃 7000高配版'</span>,<span class="string">'戴尔Dell 燃700金色'</span>,<span class="string">'下单赠12000毫安移动电源'</span>,<span class="number">3994</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000gold/collect.png'</span>,<span class="number">1</span>,<span class="number">56</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000012'</span>,<span class="number">163</span>,<span class="string">'燃 7000高配版'</span>,<span class="string">'戴尔Dell 燃700R1605银色'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">6559</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000R1605Ssilvery/collect.png'</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000013'</span>,<span class="number">238</span>,<span class="string">'A5优品商务笔记本'</span>,<span class="string">'齐心（COMIX）C5902 A5优品商务笔记本子记事本日记本122张'</span>,<span class="string">'下单即送10400毫安移动电源！再赠手机魔法盒！'</span>,<span class="number">41</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/02COMIXC5902A5122blue/collect.png'</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000014'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4600</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12(DELL)XPS13gold/collect.png'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000015'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4601</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12DELLXPS13-silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">73</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000016'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4602</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12(DELL)XPS13gold/collect.png'</span>,<span class="number">1</span>,<span class="number">64</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000017'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4604</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12DELLXPS13-silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000018'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4605</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12(DELL)XPS13gold/collect.png'</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000019'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4899</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12DELLXPS13-silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000020'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310低配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5119</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">50</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000021'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310低配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5129</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">48</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000022'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310经典版'</span>,<span class="string">'联想（Lenovo）IdeaPad310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5119</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">90</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000023'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310经典版'</span>,<span class="string">'联想（Lenovo）IdeaPad310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5129</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000024'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310高配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5119</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">60</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000025'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310高配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5129</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">80</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000026'</span>,<span class="number">163</span>,<span class="string">'YOGA710'</span>,<span class="string">'联想（Lenovo）YOGA710 14英寸触控笔记本（i7-7500U 8G 256GSSD 2G独显 全高清IPS 360°翻转 正版office）金'</span>,<span class="string">'【0元献礼】好评过万，销量传奇！经典蓝光电视，独有自然光技术专利，过大年带最好的回家！【0元白条试用，1001个拜年计划】'</span>,<span class="number">59999</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/14LenovoYOGA710 _gold/collect.png'</span>,<span class="number">1</span>,<span class="number">19</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000027'</span>,<span class="number">163</span>,<span class="string">'YOGA710'</span>,<span class="string">'联想（Lenovo）YOGA710 14英寸触控笔记本（i7-7500U 8G 256GSSD 2G独显 全高清IPS 360°翻转 正版office）银'</span>,<span class="string">'【0元献礼】好评过万，销量传奇！经典蓝光电视，独有自然光技术专利，过大年带最好的回家！【0元白条试用，1001个拜年计划】'</span>,<span class="number">59999</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/14LenovoYOGA710 _silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">55</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000028'</span>,<span class="number">163</span>,<span class="string">'310低配版'</span>,<span class="string">'联想（Lenovo）小新310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4939</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">19</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000029'</span>,<span class="number">163</span>,<span class="string">'310低配版'</span>,<span class="string">'联想（Lenovo）小新310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4839</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">27</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000030'</span>,<span class="number">163</span>,<span class="string">'310经典版'</span>,<span class="string">'联想（Lenovo）小新310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4739</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">78</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000031'</span>,<span class="number">163</span>,<span class="string">'310经典版'</span>,<span class="string">'联想（Lenovo）小新310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4639</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000032'</span>,<span class="number">163</span>,<span class="string">'310高配版'</span>,<span class="string">'联想（Lenovo）小新310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4539</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000033'</span>,<span class="number">163</span>,<span class="string">'310高配版'</span>,<span class="string">'联想（Lenovo）小新310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4439</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000034'</span>,<span class="number">163</span>,<span class="string">'YOGA900'</span>,<span class="string">'联想（Lenovo）YOGA900绿色'</span>,<span class="string">'青春的活力 清新漂亮高端大气上档次'</span>,<span class="number">5200</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/16LenovoYOGA900green/collect.png'</span>,<span class="number">1</span>,<span class="number">63</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000035'</span>,<span class="number">163</span>,<span class="string">'YOGA900'</span>,<span class="string">'联想（Lenovo）YOGA900粉色'</span>,<span class="string">'青春的活力 清新漂亮高端大气上档次'</span>,<span class="number">5200</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/16LenovoYOGA900pink/collect.png'</span>,<span class="number">1</span>,<span class="number">62</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000036'</span>,<span class="number">163</span>,<span class="string">'YOGA900'</span>,<span class="string">'联想（Lenovo）YOGA900红色'</span>,<span class="string">'青春的活力 清新漂亮高端大气上档次'</span>,<span class="number">5200</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/16LenovoYOGA900red/collect.png'</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000037'</span>,<span class="number">163</span>,<span class="string">'小新13旗舰版'</span>,<span class="string">'联想(Lenovo)小新Air13 Pro 13.3英寸14.8mm超轻薄笔记本电脑'</span>,<span class="string">'青春的活力 青年专属'</span>,<span class="number">6439</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/17Lenovo)xiaoxinAir13Pro_gold/collect.png'</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000038'</span>,<span class="number">163</span>,<span class="string">'小新13旗舰版'</span>,<span class="string">'联想(Lenovo)小新Air13 Pro 13.3英寸14.8mm超轻薄笔记本电脑'</span>,<span class="string">'青春的活力 青年专属'</span>,<span class="number">6439</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/17Lenovo)xiaoxinAir13Pro_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000039'</span>,<span class="number">163</span>,<span class="string">'XPS15'</span>,<span class="string">'戴尔(DELL) XPS15 银色'</span>,<span class="string">'限时特价！好评过万条优秀产品！'</span>,<span class="number">3333</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/18(DELL)XPS15_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">37</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000391'</span>,<span class="number">163</span>,<span class="string">'XPS15'</span>,<span class="string">'戴尔(DELL) XPS15 金色'</span>,<span class="string">'限时特价！好评过万条优秀产品！'</span>,<span class="number">3333</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/18(DELL)XPS15_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">81</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000040'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 1TB IPS Win10)触控银'</span>,<span class="number">4443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">35</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000401'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 1TB IPS Win10)触控白'</span>,<span class="number">4443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">86</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000402'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 512GB IPS Win10)触控银'</span>,<span class="number">6443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">84</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000403'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 512GB IPS Win10)触控白'</span>,<span class="number">6443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">63</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000041'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 1TGB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">61</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000411'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 256GB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">60</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000412'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 1TB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000413'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 256GB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">83</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000042'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i5 6代 红色'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">4399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">99</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000421'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i7 6700 红'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">6399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">74</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000422'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i5 6代 黄'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">4399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000424'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i5 6代 蓝'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">4399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">87</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000425'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i7 6700 蓝'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">6399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">59</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000043'</span>,<span class="number">917</span>,<span class="string">'书包 bag'</span>,<span class="string">'乐尚书包 电脑包 bag黑色'</span>,<span class="string">'给你满载而归的喜悦！'</span>,<span class="number">89</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/22_LEXON_LNE6025B06T/collect.png'</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000044'</span>,<span class="number">917</span>,<span class="string">'书包 bag'</span>,<span class="string">'乐尚书包 电脑包 bag粉色'</span>,<span class="string">'给你满载而归的喜悦！'</span>,<span class="number">89</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/22_LEXON_LNE6025B06T/collect.png'</span>,<span class="number">1</span>,<span class="number">62</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_item_category`</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_item_category`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</div><div class="line">  <span class="string">`parent_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'父分类id'</span>,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'名称'</span>,</div><div class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'状态   1：正常   2：删除'</span>,</div><div class="line">  <span class="string">`sort_order`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'排序号'</span>,</div><div class="line">  <span class="string">`is_parent`</span> tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否是父分类   1：是  0：否'</span>,</div><div class="line">  <span class="string">`created_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</div><div class="line">  <span class="string">`modified_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</div><div class="line">  <span class="string">`created_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人'</span>,</div><div class="line">  <span class="string">`modified_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1183</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_item_category`</span> <span class="keyword">VALUES</span> </div><div class="line">(<span class="number">163</span>,<span class="number">162</span>,<span class="string">'笔记本'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">236</span>,<span class="number">229</span>,<span class="string">'文件管理'</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">238</span>,<span class="number">229</span>,<span class="string">'本册/便签'</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">241</span>,<span class="number">229</span>,<span class="string">'笔类'</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">917</span>,<span class="number">913</span>,<span class="string">'双肩包'</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>);</div></pre></td></tr></table></figure>
<h3 id="员工建表语句"><a href="#员工建表语句" class="headerlink" title="员工建表语句"></a>员工建表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> EMP(</div><div class="line">EMPNO <span class="built_in">int</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</div><div class="line">ENAME <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">JOB <span class="built_in">varchar</span>(<span class="number">9</span>),</div><div class="line">MGR <span class="built_in">int</span>(<span class="number">4</span>),</div><div class="line">HIREdate <span class="built_in">date</span>,</div><div class="line">SAL <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>),</div><div class="line">COMM <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>),</div><div class="line">DEPTNO <span class="built_in">int</span>(<span class="number">4</span>)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> Dept(</div><div class="line">DEPTNO <span class="built_in">int</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</div><div class="line">DNAME <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</div><div class="line">LOC <span class="built_in">varchar</span>(<span class="number">13</span>)</div><div class="line">);</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">10</span>,<span class="string">'ACCOUNTING'</span>,<span class="string">'NEW YORK'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">20</span>,<span class="string">'RESEARCH'</span>,<span class="string">'DALLAS'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">30</span>,<span class="string">'SALES'</span>,<span class="string">'CHICAGO'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">40</span>,<span class="string">'OPERATIONS'</span>,<span class="string">'BOSTON'</span>);</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPT;</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7369</span>,<span class="string">'SMITH'</span>,<span class="string">'CLERK'</span>,<span class="number">7902</span>,<span class="keyword">str_to_date</span>(<span class="string">'17-12-1980'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">800</span>,<span class="literal">null</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7499</span>,<span class="string">'ALLEN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'20-2-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1600</span>,<span class="number">300</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7521</span>,<span class="string">'WARD'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'22-2-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1250</span>,<span class="number">500</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7566</span>,<span class="string">'JONES'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="keyword">str_to_date</span>(<span class="string">'2-4-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">2975</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7654</span>,<span class="string">'MARTIN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'28-9-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1250</span>,<span class="number">1400</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7698</span>,<span class="string">'BLAKE'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="keyword">str_to_date</span>(<span class="string">'1-5-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">2850</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7782</span>,<span class="string">'CLARK'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="keyword">str_to_date</span>(<span class="string">'9-6-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">2450</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7839</span>,<span class="string">'KING'</span>,<span class="string">'PRESIDENT'</span>,<span class="literal">NULL</span>,<span class="keyword">str_to_date</span>(<span class="string">'17-11-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">5000</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7844</span>,<span class="string">'TURNER'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'8-9-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1500</span>,<span class="number">0</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7900</span>,<span class="string">'JAMES'</span>,<span class="string">'CLERK'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'3-12-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">950</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7902</span>,<span class="string">'FORD'</span>,<span class="string">'ANALYST'</span>,<span class="number">7566</span>,<span class="keyword">str_to_date</span>(<span class="string">'3-12-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">3000</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7934</span>,<span class="string">'MILLER'</span>,<span class="string">'CLERK'</span>,<span class="number">7782</span>,<span class="keyword">str_to_date</span>(<span class="string">'23-1-1982'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1300</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">commit</span>;</div></pre></td></tr></table></figure>
<h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><blockquote>
<p>分组查询 通常和聚合函数结合使用<br>通常查询每个部门(性别/分类) 就以部门(性别/分类)为分组条件<br>group by语句的位置<br>可以对多个字段进行分组<br>格式:<code>select 字段 from 表名 where 条件 group by 分组字段  having 聚合函数条件 order by 字段  limit n,m  分页</code></p>
</blockquote>
<ul>
<li><p>查询emp表中<strong>每个部门</strong>的编号(deptno)，人数，工资总和 最后根据人数进行升序排序，如果人数一致，根据工资总和降序排列</p>
<ul>
<li><code>select deptno,count(*) c,sum(sal) s from emp group by deptno order by c asc,s desc;</code></li>
</ul>
</li>
<li><p>查询工资平均在1000-3000之间的员工信息，每个部门的编号，平均工资，最低工资，最高工资，根据平均工资进行升序排列</p>
<ul>
<li><code>select deptno,avg(sal) a,min(sal),max(sal) from emp where sal between 1000 and 3000 group by deptno order by a;</code></li>
</ul>
</li>
<li><p>查询含有上级领导的员工，每个职业的人数，工资的总和，平均工资，最低工资，最后根据人数进行降序排列，如果人数一致，根据平均工资进行升序排列</p>
<ul>
<li><code>select count(*) c,sum(sal),avg(sal) a,min(sal) from emp where mgr is not null group by job order by c desc,a asc;</code></li>
</ul>
</li>
<li><p>每个部门中，每个主管的手下人数（两个分组，使用逗号即可）</p>
<ul>
<li><code>select deptno,mgr ,count(*)from emp where mgr is not null group by deptno,mgr;</code></li>
</ul>
</li>
<li><p>每种工作的平均工资</p>
<ul>
<li><code>select job,avg(sal) from emp group by job;</code></li>
</ul>
</li>
<li><p>每年的入职人数</p>
<ul>
<li><p>其中hiredate的格式是2015-01-02(<code>%Y-%m-%d</code>),因此这里需要用到日期截取的函数<code>extract()</code>，具体使用参看<a href="https://chenjiabing666.github.io/2018/03/24/SQL%E6%93%8D%E4%BD%9C%E4%B8%89/#%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0">SQL操作三</a></p>
</li>
<li><p><code>select extract(year from hiredate) year,count(*) from emp group by y;</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a>having子句</h2><ul>
<li><p>聚合函数不可以对where结合使用</p>
<ul>
<li><code>select deptno,avg(sal) a from emp where a&gt;2000 group by deptno;</code> 这句话是错误的，因为<code>avg(sal)</code>是聚合函数，不能和where结合使用</li>
</ul>
</li>
<li><p>having中也是可以使用普通字段的过滤，不一定是聚合函数，但是聚合函数的过滤只能使用having，但是建议写在where条件语句中</p>
</li>
<li><p>对聚合函数的结构进行条件过滤要使用having</p>
</li>
<li><p>having语句要写在<code>group by</code> 后面</p>
<ul>
<li><code>select from  where  group by having order by limit</code></li>
</ul>
</li>
</ul>
<ul>
<li>查询每个部门中平均工资，只显示平均工资大于2000的<ul>
<li><code>select deptno,avg(sal) a from emp group by deptno having a&gt;2000;</code></li>
</ul>
</li>
</ul>
<ul>
<li><p>查询所有分类商品所对应的库存总量中，高于1000的总量</p>
<ul>
<li>这个就是查询每一种商品的库存(group by ) ，库存高于1000(having)</li>
<li><code>select category_id, sum(num) sum from t_item group by category_id having  sum&gt;1000;</code></li>
</ul>
</li>
<li><p>查询所有分类商品所对应的平均单价中，低于1000的均价</p>
<ul>
<li><code>select category_id, avg(price) avg from t_item group by category_id having  avg&lt;100;</code></li>
</ul>
</li>
<li><p>查询编号238和编号917分类商品的平均单价</p>
<ul>
<li>这里没有查询编号就是category_id的值，没有涉及到聚合函数，因此可以使用<code>where</code>条件进行过滤</li>
<li><p><code>&gt; select category_id, avg(price) avg from t_item where category_id in(238,917) group by category_id ;</code></p>
</li>
<li><p>虽然没有涉及到聚合函数，但是我们也是可以使用having子句进行过滤（<strong>不建议</strong>）</p>
</li>
<li><code>select category_id, avg(price) avg from t_item  group by category_id  having category_id in(238,917);</code></li>
</ul>
</li>
<li><p>查询emp中，每个部门的平均工资高于2000的部门的编号，部门的人数，平均人数，平均工资，最后根据平均工资进行升序排列</p>
<ul>
<li><code>select avg(sal) avg,deptno,count(*) from emp group by deptno having avg&gt;2000 order by avg;</code></li>
</ul>
</li>
<li><p>查询emp表中名字中不是以k开头的信息，每个部门的最低工资高于1000的部门的编号，工资总和，平均工资以及最低工资，最后根据平均工资进行升序排列</p>
<ul>
<li><code>select deptno,sum(sal) sum,avg(sal) avg,min(sal) min from emp where ename not like &#39;k%&#39; group by deptno having min&gt;1000 order by avg;</code></li>
</ul>
</li>
<li><p>查询emp表中部门编号是10,30号部门的员工，每个职业的最高工资低于5000的职业的名称，人数，平均工资，最高工资，最后根据人数进行升序排列，如果人数一致，根据最高工资进行降序排列</p>
<ul>
<li><code>select max(sal) max,job,avg(sal) avg,count(*) c from emp where deptno in(10,30) group by  job having avg&lt;5000 order by c asc,max desc;</code></li>
</ul>
</li>
<li><p>查询emp表中，每个部门的编号，人数，工资总和，最高工资以及最低工资，过滤掉最高工资是5000的部门，根据部门的人数进行升序排列，如果人数一致，则根据最高工资进行降序排列。</p>
<ul>
<li><code>select deptno,count(*) c,sum(sal) sum,max(sal) max,min(sal) min from emp group by deptno having max !=5000 order by c asc,max desc;</code></li>
</ul>
</li>
<li><p>查询emp表中工资在1000~3000之间的员工信息，每个部门的编号，工资总和，平均工资，过滤掉平均工资低于2000的部门，按照平均工资进行升序排列</p>
<ul>
<li><code>select deptno,sum(sal) sum,avg(sal) avg from emp where sal between 1000 and 3000  group by deptno having avg &gt;=2000 order by avg;</code></li>
</ul>
</li>
<li><p>查询emp表中名字不是以‘S’开头，每个职位的名字，人数，工资总和，最高工资，过滤掉工资是3000的职位，根据人数进行升序排列，如果人数一致，根据工资总和进行降序排列。</p>
<ul>
<li><code>select job,count(*) c,sum(sal) sum,max(sal) max from emp where ename not  like &#39;s%&#39;and sal !=3000 group by job  order by c asc,sum desc;</code></li>
</ul>
</li>
</ul>
<ul>
<li>查询emp表的信息，每个职位的名称，人数，平均工资，最低工资，过滤掉平均工资是3000的职位信息，根据人数进行降序排列，如果人数一致，根据平均工资进行升序排列<ul>
<li><code>select job,count(*) c,avg(sal) avg,min(sal) min from emp group by job having avg !=3000 order by c desc,avg asc;</code></li>
</ul>
</li>
</ul>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="Mysql子查询"><a href="#Mysql子查询" class="headerlink" title="Mysql子查询"></a>Mysql子查询</h3><blockquote>
<p>子查询 ： 嵌套到sql语句里面的查询sql语句称为”子查询”</p>
<p><strong>子查询中返回的字段一定要和查询的判断条件字段类型一致，否则没有意义，比如 ： 这里的最高员工工资，那么子查询返回的一定是一个字段并且这个字段是最高的工资。当然子查询中也是可以返回多个值，那么此时需要使用in关键字判断</strong></p>
<p>如果子查询中返回的是一个值，比如最大工资，那么我们可以使用 <code>=</code> <code>&gt;</code> <code>&lt;</code> <code>!=</code><br>如果子查询中返回的是一组值，那么我们就不能使用 = 或者 !=  我们可以使用<code>in</code>关键字</p>
</blockquote>
<ul>
<li><p>查询工资最高的员工的所有信息</p>
<ul>
<li>子查询中返回的是最高工资</li>
<li><code>select * from emp where sal=(select max(sal) from emp);</code></li>
</ul>
</li>
<li><p>工资多于平均工资的员工信息</p>
<ul>
<li>子查询中返回的是平均工资</li>
<li><code>select * from emp where sal &gt; (select avg(sal) from emp);</code></li>
</ul>
</li>
<li><p>最后入职的员工信息</p>
<ul>
<li>子查询中返回的是最后入职的日期</li>
<li><code>select * from emp where hiredate=(select max(hiredate) from emp);</code></li>
</ul>
</li>
<li><p>查询出有商品的分类信息</p>
<ul>
<li>子查询中返回的是t_item中不重复的category_id的值，这个就是在t_item_category中的id，因此我们只需要将t_item_category中的id值在t_item中的信息查询出来即可、</li>
<li>由于子查询中可能返回的不是一个值，而是一组值，因此使用<code>in</code></li>
<li><code>select * from t_item_category where id in(select category_id from t_item where category_id is not null);</code></li>
</ul>
</li>
<li><p>查询工资高于20号部门最高工资的员工的所有信息</p>
<ul>
<li><code>select * from emp where sal&gt;(select max(sal) from emp where deptno=20);</code></li>
</ul>
</li>
<li><p>查询emp表中姓名是‘KING’所属的部门的编号，名称</p>
<ul>
<li>emp表中存放的是员工信息，dept表中存放的是部门信息，emp表中的deptno对应的dept表中的deptno(相当于外键)</li>
<li>子查询是返回的emp表中ename为king的部门编号</li>
<li><code>select deptno,dname from dept where deptno = (select distinct deptno from emp where ename=&#39;king&#39;);</code></li>
</ul>
</li>
<li><p>查询部门名称是SALES的部门下所有员工的编号，姓名，职位，以及所属部门的编号</p>
<ul>
<li>emp和dept表是以deptno关联的</li>
<li><code>select empno,ename,job,deptno from emp where deptno=(select deptno from dept where dname=&quot;sales&quot;);</code></li>
</ul>
</li>
<li><p>查询部门地址是DALLAS的部门下所有员工的所有信息</p>
<ul>
<li>仍然是emp和dept的查询</li>
<li><code>select * from emp where deptno in (select deptno from dept where loc=&#39;dallas&#39;);</code></li>
</ul>
</li>
<li><p>查询跟JONES同样工作的员工的所有信息（包含JONES）</p>
<ul>
<li><code>select * from emp where job=(select job from emp where ename=&#39;jones&#39;);</code></li>
</ul>
</li>
<li><p>查询跟JONES同样工作的员工的所有信息（不包含JONES）</p>
<ul>
<li>where句中可以包含子查询，也可以包含其他的条件，使用and或者or</li>
<li><code>select * from emp where job=(select job from emp where ename=&#39;jones&#39;) and ename!=&#39;jones&#39;;</code></li>
</ul>
</li>
<li><p>查询部门平均工资最高的部门详情</p>
<ul>
<li>复杂写法：<ul>
<li><strong><code>(select * from t) new</code> 这个可以当做一个新表进行查询，也是一种嵌套查询</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">max</span>(a),deptno <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">avg</span>(sal) a,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)<span class="keyword">new</span>)n);</div><div class="line">``` </div><div class="line">- 简单写法</div><div class="line">    - 查询每个部门的deptno，然后对平均工资进行降序排序，之后取其中的第一条数据，那么就是平均工资最大的。</div><div class="line">```sql</div><div class="line"> <span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> deptno=(<span class="keyword">select</span> deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(sal) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>查询所有分类产品商品库存总量最大的分类详情<ul>
<li>简单写法<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_item_category <span class="keyword">where</span> <span class="keyword">id</span> =(<span class="keyword">select</span>     category_id <span class="keyword">from</span> t_item <span class="keyword">group</span> <span class="keyword">by</span> category_id         <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sum</span>(<span class="keyword">num</span>) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>子查询可以写在where后面作为查询条件</li>
<li>可以写在from后面作为一张新表，<strong>作为新表时必须起别名</strong><ul>
<li><code>select * from (select * from t_item where title like &#39;%广博%&#39; limit 0,10) newtable;</code></li>
<li>上面的select子句中返回的字段就是新表newtable的字段</li>
</ul>
</li>
<li><p>可以把子查询写在创建表的时候、</p>
<ul>
<li><code>select table t_item_new as (select title,price from t_item from t_item where price&gt;1000)</code></li>
</ul>
</li>
<li><p>子查询可以嵌套n层</p>
</li>
</ul>
<h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><blockquote>
<p>同时查询多张表信息中的字段<br>同时查询多张表的字段的时候，一定要指定关联关系，否则就会出现笛卡尔积的错误，比如外键关联，emp和dept表中的deptno是对应字段的关系（相当于外键）</p>
<ul>
<li>查看每个员工的名字以及所在部门的名字<ul>
<li><code>select ename,dname from emp,dept where emp.deptno=dept.deptno;</code></li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>查询在new york 工作的员工<ul>
<li><code>select ename from emp,dept where dept.loc=&#39;new york&#39; and emp.deptno=dept.deptno;</code></li>
</ul>
</li>
</ul>
<ul>
<li>查看工资高于3000的员工，名字，工资，部门名，所在地<ul>
<li>这里的关联关系依然是两张表中都有deptno字段</li>
<li><code>select ename,sal,dname,loc from emp,dept where emp.deptno=dept.deptno and sal&gt;3000;</code></li>
</ul>
</li>
</ul>
<h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><blockquote>
<p>笛卡尔积通常是一种错误的查询结果<br>笛卡尔积是在不谢关联关系的情况下，查询出来的两张表的乘积</p>
</blockquote>
<ul>
<li>查看每个员工的名字以及所在部门的名字<ul>
<li><code>select ename,dname from emp,dept where emp.deptno=dept.deptno;</code></li>
<li>上面的sql语句如果没写where中的子句，那么就会出现笛卡尔积的错误，因为没有设置关联关系</li>
</ul>
</li>
</ul>
<h3 id="等值连接-内连接"><a href="#等值连接-内连接" class="headerlink" title="等值连接/内连接"></a>等值连接/内连接</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><blockquote>
<p><code>select * from A,B where A.x=B.x and age&gt;18;</code></p>
</blockquote>
<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><blockquote>
<p>select * from A [inner] join B on A.x=B.x where age&gt;18;</p>
</blockquote>
<ul>
<li><p>查询在new york 工作的员工</p>
<ul>
<li><code>select * from emp e join dept d on e.deptno=d.deptno where d.loc=&#39;new york&#39;;</code></li>
</ul>
</li>
<li><p>查看工资高于3000的员工，名字，工资，部门名，所在地</p>
<ul>
<li><code>select ename ,sal,dname,loc from emp e join dept d on e.deptno=d.deptno where sal&gt;3000;</code></li>
</ul>
</li>
</ul>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>等值连接和内连接只能查询有关联关系的数据，如果其中的数据没有关联关系，那么没有关联关系的数据查询不出来</p>
</blockquote>
<h2 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h2><blockquote>
<p>两张表中其中有数据没有关联关系，那么使用等值连接和内连接就查询不出来，因此需要使用左外连接<br>查询结构以左边的表为主，内容全部显示，左边的只是显示有关系的</p>
<p><code>select * from emp e left join dept d on e.deptno=d.deptno;</code></p>
</blockquote>
<h2 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h2><blockquote>
<p>两张表中其中有数据没有关联关系，那么使用等值连接和内连接就查询不出来，因此需要使用左外连接<br>查询结构以右边的表为主，内容全部显示，左边的只是显示有关系的</p>
<p><code>select * from emp e right join dept d on e.deptno=d.deptno;</code></p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li><p>查询出所有可以匹配的商品分类及商品数据</p>
<ul>
<li><code>select c.name , t.* from t_item t,t_item_category c where t.category_id=c.id;</code>  等值连接</li>
<li><code>select t.* ,c.name from t_item t join t_item_category c on t.category_id = c.id;</code>  内连接</li>
</ul>
</li>
<li><p>查询出所有的分类,以及与之匹配的商品</p>
<ul>
<li>这里侧重于查询分类，如果某一个分类中没有商品，那么使用等值连接和内连接就会导致查询不到所有的分类，因此这里可以使用左外连接或者右外连接，以分类所在的表(t_item_category)为主</li>
<li><code>select c.name,t.*  from t_item_category c  left join t_item t on t.category_id=c.id;</code>   左外连接</li>
<li><code>select c.name,t.*  from t_item t  right join t_item_category c on t.category_id=c.id;</code>   右外连接</li>
</ul>
</li>
<li><p>查询出所有的商品,以及与之匹配的分类</p>
<ul>
<li>这里侧重于所有的商品，如果其中某一件商品与分类没有关联关系，即是没有指定分类，那么我们使用等值连接或者内连接就会查询不到这件商品，我们可以使用左外连接或者右外连接</li>
<li>商品类(t_item)  分类（t_item_category）</li>
<li><code>select t.title,c.name  from t_item t left join t_item_category c on c.id=t.category_id;</code>  左外连接</li>
<li><code>select t.title,c.name  from t_item_category c right join t_item t  on c.id=t.category_id;</code>  右外连接</li>
</ul>
</li>
<li><p>每个部门的人数,根据人数排序</p>
<ul>
<li><code>select deptno count(*) c from emp group by deptno order by c;</code></li>
</ul>
</li>
<li><p>每个部门中，每个主管的手下人数</p>
<ul>
<li><code>select deptno,mgr,count(*) from emp group by deptno,mgr;</code></li>
</ul>
</li>
<li><p>每种工作的平均工资</p>
<ul>
<li><code>select  job,avg(sal) avg from emp group by job;</code></li>
</ul>
</li>
<li><p>每年的入职人数</p>
<ul>
<li><code>select extract(year from hiredate) year, count(*) from emp group by year;</code></li>
</ul>
</li>
<li><p>少于等于3个人的部门</p>
<ul>
<li><code>select deptno, count(*) c from emp group by deptno having c&lt;=3;</code></li>
</ul>
</li>
<li><p>拿最低工资的员工信息</p>
<ul>
<li><code>select * from emp having sal=min(sal);</code>  (不推荐)</li>
<li><code>select * from emp having sal=(select min(sal) from emp);</code></li>
</ul>
</li>
<li><p>只有一个下属的主管信息</p>
<ul>
<li><code>select e.* from emp e join (select count(*) c ,mgr from emp group by mgr having c=1)newtable on newtable.mgr=e.empno;</code></li>
</ul>
</li>
<li><p>平均工资最高的部门编号</p>
<ul>
<li><code>select deptno from emp group by deptno order by avg(sal) desc limit 0,1</code></li>
</ul>
</li>
<li><p>下属人数最多的人，查询其个人信息</p>
<ul>
<li>先分组查询出所有的主管的信息，然后根据人数降序排列，最后取出第一条就是数据就是下属人数最多的主管</li>
<li><code>select * from emp group by mgr order by count(*) desc limit 0,1;</code></li>
</ul>
</li>
<li><p>拿最低工资的人的信息</p>
<ul>
<li><code>select * from emp where sal=(select min(sal) from emp);</code></li>
</ul>
</li>
<li><p>最后入职的员工信息</p>
<ul>
<li><code>select * from emp where hiredate=(select max(hiredate) from emp);</code></li>
</ul>
</li>
<li><p>工资多于平均工资的员工信息</p>
<ul>
<li><code>select * from emp where sal&gt;(select avg(sal) from emp);</code></li>
</ul>
</li>
<li><p>查询员工信息，部门名称</p>
<ul>
<li><code>select e.*,d.dname from emp e join dept d on e.deptno=d.deptno;</code></li>
</ul>
</li>
<li><p>员工信息，部门名称，所在城市</p>
<ul>
<li><code>select e.*,d.dname,d.loc from emp e join dept d on e.deptno=d.deptno;</code></li>
</ul>
</li>
<li><p>DALLAS 市所有的员工信息</p>
<ul>
<li><code>select e.* from emp e join dept d on e.deptno=d.deptno where d.loc=&#39;DALLAS&#39;;</code></li>
</ul>
</li>
<li><p>按城市分组，计算每个城市的员工数量</p>
<ul>
<li><code>select loc ,count(*) from (select e.*,d.dname,d.loc from emp e join dept d on e.deptno=d.deptno) newtable group by newtable.loc;</code></li>
<li><code>select d.loc,count(*) from emp e join dept d on e.deptno=d.deptno group by loc;</code></li>
</ul>
</li>
<li><p>查询员工信息和他的主管姓名</p>
<ul>
<li>员工信息和主管姓名在同一张表中，我们可以抽离出主管编号mgr和ename组成一张新表，那么我们就可以使用关联查询了</li>
<li><p><code>select e.*,n.ename &#39;主管名字&#39; from emp e join (select mgr,ename from emp) n on e.empno=n.mgr;</code></p>
</li>
<li><p>或者我们可以不抽离字段，而是直接整个当做一张新表</p>
</li>
<li><code>select e.*,n.ename mgrname from emp e join emp n on e.empno=n.mgr;</code></li>
</ul>
</li>
<li><p>员工信息，员工主管名字，部门名</p>
<ul>
<li><strong>直接join（可以连接多张表）,直接在后面join即可</strong></li>
<li><p><code>select e.*,n.ename mgrname,dname from emp e join emp n on e.empno=n.mgr join dept d on e.deptno=d.deptno;</code></p>
</li>
<li><p>把上面的查询结果当成一张新表，和dept内连接即可</p>
</li>
<li><code>select new.*,d.dname from (select e.*,n.ename mgrname from emp e join emp n on e.empno=n.mgr) new join dept d on new.deptno=d.deptno;</code></li>
</ul>
</li>
</ul>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>如果涉及到两张表，甚至多张表，想要查询某张表的所有信息，此时就需要使用左/右外连接，因为如果某条数据没有关联关系，那么使用等值连接或者内连接将会缺失没有关联关系的数据。</p>
<p>如果涉及到多张表的时候，使用内连接可以连接多张表，直接在后面添加join即可，比如</p>
<blockquote>
<p><code>select e.*,n.ename mgrname,dname from emp e join emp n on e.empno=n.mgr join dept d on e.deptno=d.deptno;</code></p>
</blockquote>
<p>分组(group by)是对前面查询到的结果进行分组，因此在where条件语句后，也是在内连接之后，因为必须查询到完整的一张表才能进行分组</p>
<p>推荐使用内连接，不使用等值连接</p>
<p><strong>使用内连接的时候，where条件语句一定要放在 on的后面，即使是多个内连接(多个join)，也必须放在最后一个join的on的后面，不影响结果</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day-04&quot;&gt;&lt;a href=&quot;#Day-04&quot; class=&quot;headerlink&quot; title=&quot;Day 04&quot;&gt;&lt;/a&gt;Day 04&lt;/h1&gt;&lt;h2 id=&quot;创建数据库和表&quot;&gt;&lt;a href=&quot;#创建数据库和表&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作三</title>
    <link href="http://chenjiabing666.github.io/2018/03/24/SQL%E6%93%8D%E4%BD%9C%E4%B8%89/"/>
    <id>http://chenjiabing666.github.io/2018/03/24/SQL操作三/</id>
    <published>2018-03-24T01:10:58.000Z</published>
    <updated>2018-03-24T01:11:27.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h1><h2 id="查询null"><a href="#查询null" class="headerlink" title="查询null"></a>查询null</h2><ul>
<li><p>查询列值为null  (is null)</p>
<ul>
<li><code>select * from emp where mgr is null;</code> 查询上级领导为空的员工</li>
</ul>
</li>
<li><p>查询列值不为null  (is not null)</p>
<ul>
<li><code>select * from emp where mgr is not null and comm&gt;0;</code> </li>
</ul>
</li>
</ul>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><blockquote>
<p>如果表中的字段名称太长或者不是很容易直接看懂，那么我们可以使用别名，使用的方式有三种：</p>
<ul>
<li><code>select ename &quot;姓名&quot; from emp;</code></li>
<li><code>select ename as &quot;姓名&quot; from emp;</code></li>
<li><code>select ename 姓名 from emp;</code></li>
</ul>
</blockquote>
<h2 id="去除重复的值-distinct"><a href="#去除重复的值-distinct" class="headerlink" title="去除重复的值(distinct)"></a>去除重复的值(distinct)</h2><blockquote>
<p><code>select distinct job from emp;</code></p>
</blockquote>
<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><blockquote>
<p>条件语句支持的运算符： &gt;  &lt;  =   !=  &gt;=  &lt;=  !=(&lt;&gt;)</p>
</blockquote>
<h2 id="and-和-or"><a href="#and-和-or" class="headerlink" title="and 和 or"></a>and 和 or</h2><blockquote>
<p>and 并且  多个条件属于与的关系<br>or 或者   </p>
<ul>
<li><code>select * from user where id=1 or id=2;</code>  查询id=1的数据或者id=2的数据 ,如果这两个都存在，那么将会全部返回</li>
</ul>
</blockquote>
<h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2><ul>
<li><code>_</code> 代表单个未知字符<ul>
<li>第二个字母为a :  <code>_a%</code></li>
<li>倒数第三个字母为a  ：<code>%a__</code></li>
</ul>
</li>
<li><p><code>%</code> 代表多个未知字符</p>
<ul>
<li>以a开头的 : <code>a%</code></li>
<li>以a结尾的  ：<code>%a</code></li>
<li>包含a :<code>%a%</code></li>
</ul>
</li>
<li><p><code>select * from user where name like &#39;_加%&#39;;</code> </p>
</li>
<li><code>select * from user where name like &#39;_加_&#39;;</code>  此时匹配的名字是三个字符，比如 陈加兵</li>
</ul>
<h3 id="not-like-不包含"><a href="#not-like-不包含" class="headerlink" title="not like  (不包含)"></a>not like  (不包含)</h3><blockquote>
<p><code>select * from user where name not like &#39;_加%&#39;;</code></p>
</blockquote>
<h2 id="between-…-and-在-之间"><a href="#between-…-and-在-之间" class="headerlink" title="between … and  (在..之间)"></a>between … and  (在..之间)</h2><blockquote>
<p>在两个数之间<br><code>select * from t_item where price between 10 and 100;</code>   查询价格在10 到 100之间的数据</p>
</blockquote>
<h2 id="in-查询的值为多个"><a href="#in-查询的值为多个" class="headerlink" title="in  (查询的值为多个)"></a>in  (查询的值为多个)</h2><blockquote>
<p>查询某个字段的值为多个值的时候使用in<br><code>select * from t_item where price in(100,200,233);</code> </p>
</blockquote>
<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><ul>
<li><p>升序（默认 asc）<br>  -<code>select price from t_item  order by price</code></p>
<ul>
<li>order by 写在后面，如果有where条件，那么要写在where条件的后面</li>
<li><code>select price from t_item where price&lt;100 order by price;</code></li>
</ul>
</li>
<li><p>降序（desc）</p>
<ul>
<li><code>select price from t_item  order by price desc</code></li>
</ul>
</li>
<li><p>如果需要多个字段进行排序，则在by的后面写多个字段</p>
<ul>
<li><code>select  category_id,price from t_item  order by category_id,price desc;</code> 按照分类id升序，价格降序</li>
</ul>
</li>
<li><p>查询带燃字的商品，按照价格降序排列</p>
<ul>
<li><code>select title,price from t_item where title like &quot;%燃%&quot; order by price;</code></li>
</ul>
</li>
</ul>
<h2 id="分页-limit-子句"><a href="#分页-limit-子句" class="headerlink" title="分页 limit 子句"></a>分页 limit 子句</h2><ul>
<li><code>limit n,m</code>  ： n表示跳过的条数，m表示每页显示的条数</li>
<li><p>写在排序（order by 字句）的后面，如果没有排序写在where后面</p>
<ul>
<li><code>limit 0,5</code>  查询第一页，每页显示5条</li>
<li><code>limit 10,5</code>  查询第三页，每页显示5条</li>
<li><code>limit 12,3</code>  查询第五页 每页3条</li>
</ul>
</li>
<li><p><code>select price from t_item order by price limit 10,10;</code>  按照价格升序排列，显示第二页，每页10条</p>
</li>
<li><p><code>select price from t_item where price &lt;100 limit 0,10;</code>  查询价格小于100的记录，显示第一页，每页10条</p>
</li>
</ul>
<h2 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat() 函数"></a>concat() 函数</h2><blockquote>
<p>concat()函数可以实现多个字符串的拼接</p>
</blockquote>
<ul>
<li><p>在终端直接输入 <code>select concat(&#39;a&#39;,&#39;b&#39;);</code> </p>
</li>
<li><p><code>select concat(price,&quot;元&quot;) from t_item limit 0,3;</code> 查询商品，并且将查询到的价格和元这个单位拼接。相当于显示的是价格只是每个价格后面添加了单位 比如： 23元</p>
</li>
<li><p>将标题和单价拼到一起进行展现</p>
<ul>
<li><code>select concat(price,&quot;元&quot;,title) from t_item limit 0,5;</code></li>
</ul>
</li>
</ul>
<h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><blockquote>
<p>支持加减乘除，取余(%)等效mod(n,m)</p>
</blockquote>
<ul>
<li><p>查询商品并在结果中显示商品的总价值</p>
<ul>
<li><p><code>select price,num ,price*num &#39;总价&#39; from t_item;</code>  </p>
</li>
<li><p>直接做运算即可，可以使用别名解释字段的含义</p>
</li>
</ul>
</li>
</ul>
<h2 id="日期相关函数"><a href="#日期相关函数" class="headerlink" title="日期相关函数"></a>日期相关函数</h2><ul>
<li><p>获取当前时间+时间</p>
<ul>
<li>now()</li>
<li>在终端输入<code>select now();</code></li>
</ul>
</li>
<li><p>获取当前日期</p>
<ul>
<li>curdate()</li>
</ul>
</li>
</ul>
<ul>
<li><p>获取当前时间</p>
<ul>
<li>curtime()</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li><code>select now(),curdate(),curtime();</code></li>
</ul>
</li>
<li><p>从日期和时间中获取日期</p>
<ul>
<li>date(now())</li>
</ul>
</li>
<li><p>从日期和时间中获取时间</p>
<ul>
<li>time(now())</li>
</ul>
</li>
<li><p>extract() 提取年月日时分秒的函数</p>
<ul>
<li><code>select extract(year from now());</code></li>
<li><code>select extract(month from now());</code></li>
<li><code>select extract(day from now());</code></li>
<li><code>select extract(hour from now());</code></li>
<li><code>select extract(minute from now());</code></li>
<li><code>select extract(second from now());</code></li>
</ul>
</li>
</ul>
<h2 id="DATE-FORMATE-函数-日期格式化"><a href="#DATE-FORMATE-函数-日期格式化" class="headerlink" title="DATE_FORMATE() 函数  日期格式化"></a>DATE_FORMATE() 函数  日期格式化</h2><ul>
<li><p>format</p>
<ul>
<li>%Y 4位年 2018</li>
<li>%y 2位   18</li>
<li>%m 月   05</li>
<li>%c 月   5</li>
<li>%d 日   </li>
<li>%H  24小时制</li>
<li>%i  分</li>
<li>%s 秒</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li><code>select date_format(now(),&#39;%Y年%m月%d日 %h时%i分%s秒&#39;);</code>  输出  2018年03月23日 03时44分51秒</li>
</ul>
</li>
<li><p>查询商品 并显示商品上传日期</p>
<ul>
<li><code>select title,date_format(created_time,&#39;%Y年%m月%d日 %h时%i分%s秒&#39;) from t_item;</code></li>
</ul>
</li>
</ul>
<h2 id="str-to-date-把字符串转成日期格式"><a href="#str-to-date-把字符串转成日期格式" class="headerlink" title="str_to_date  把字符串转成日期格式"></a>str_to_date  把字符串转成日期格式</h2><ul>
<li>将’2018年10月22日’ 转换成日期<ul>
<li><code>select str_to_date(&quot;2018年10月23日&quot;,&#39;%Y年%m月%d日&#39;);</code></li>
<li>第一个参数是即将要转换的字符串日期，第二个参数是这个字符串日期的格式，用来解析这个字符串。</li>
<li>输出：  2018-10-23</li>
</ul>
</li>
</ul>
<h2 id="IFNULL-函数"><a href="#IFNULL-函数" class="headerlink" title="IFNULL()  函数"></a>IFNULL()  函数</h2><ul>
<li><p>age=ifnull(a,b) 如果a是null，age=b，如果不是null，age=a;</p>
</li>
<li><p>把奖金是null 设置成0</p>
<ul>
<li><code>update emp set comm=ifnull(comm,0);</code>  如果奖金comm是null，那么comm=0，如果不是空 comm=comm，还是原来的值</li>
</ul>
</li>
</ul>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul>
<li><p>对多行数据进行合并统计</p>
<ul>
<li>sum() 求和<ul>
<li><code>select sum(num) from t_item where price&lt;100;</code></li>
</ul>
</li>
<li>avg() ： 求平均值<ul>
<li><code>select avg(price) from t_item;</code></li>
</ul>
</li>
<li>count() 计算数量<ul>
<li><code>select count(</code>*<code>) from t_item where price&lt;100;</code></li>
</ul>
</li>
<li>max() 最大值<ul>
<li><code>select max(price) from t_item;</code></li>
</ul>
</li>
<li>min() 最小值<ul>
<li><code>select min(price) from t_item;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li>查询DELL的平均单价<ul>
<li><code>select avg(price) &quot;平均单价&quot; from t_item where title like &quot;%DELL%&quot;;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="字符串的函数"><a href="#字符串的函数" class="headerlink" title="字符串的函数"></a>字符串的函数</h3><ul>
<li>char_length(str)</li>
<li>instr(str,substr) </li>
<li>locate(substr,str)  </li>
<li>insert(str,start,end,newStr)</li>
<li>lower(str)</li>
<li>upper(str)</li>
<li>left(str,count)</li>
<li>right(str,count)</li>
<li>trim(str)</li>
<li>substring(str,index)</li>
<li>substring(str,index,length);</li>
<li>repeat(str,count)</li>
<li>replace(str,old,new)</li>
<li>reverse()</li>
</ul>
<h3 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h3><ul>
<li>floor(num)</li>
<li>round(num)</li>
<li>round(num,m)</li>
<li>truncate(num,m) </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day03&quot;&gt;&lt;a href=&quot;#Day03&quot; class=&quot;headerlink&quot; title=&quot;Day03&quot;&gt;&lt;/a&gt;Day03&lt;/h1&gt;&lt;h2 id=&quot;查询null&quot;&gt;&lt;a href=&quot;#查询null&quot; class=&quot;headerlink&quot; title=&quot;查
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作二</title>
    <link href="http://chenjiabing666.github.io/2018/03/22/SQL%E6%93%8D%E4%BD%9C%E4%BA%8C/"/>
    <id>http://chenjiabing666.github.io/2018/03/22/SQL操作二/</id>
    <published>2018-03-22T09:28:54.000Z</published>
    <updated>2018-03-22T09:30:14.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h1><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><blockquote>
<p>1.数据库字符集 要设置成utf8</p>
<ol>
<li>表的字符集 设置为utf8</li>
<li>windows系统的命令行里，有些版本是gbk的编码格式，可以通过<code>set names gbk；</code>的方式把mysql接收到数据是的解码格式设置为gbk，这个位置的gbk和数据库还有表的utf8没有关系</li>
<li>在windows系统中修改mysql默认的数据库编码，找到安装文件中的my.ini的配置文件 在里面添加时如下代码：<code>character-set-server=utf8</code></li>
</ol>
</blockquote>
<h2 id="eclipse-下写sql"><a href="#eclipse-下写sql" class="headerlink" title="eclipse 下写sql"></a>eclipse 下写sql</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote>
<ol>
<li>下载mysql驱动jar包</li>
<li>window -&gt; show view -&gt; other -&gt; Data Management -&gt; Data source(open) / SQL Results(open)</li>
<li>找到控制台的Data source explor中，然后点击DataBaseConnetctions -&gt; new</li>
<li>选择Mysql</li>
<li>点击下拉箭头右面的加号</li>
<li>选择5.1  点击jarList  clearAll</li>
<li>点击add jar 在弹出窗口中找到下载的jar文件 然后ok<br>8.修改URL  只需要修改最后面的database即可，这个是选择需要操作的数据库</li>
<li>输入密码，save password</li>
<li>点击test connection 如果显示ping Successd则点击finish</li>
<li>在 Database Connections下的New MySQL 右键 选择</li>
<li>type中选择mysql5.1  Name中选Neq Mysql Database中选择database  在最右侧如果显示connected，那么可以开始写sql语句</li>
</ol>
</blockquote>
<h3 id="自定义代码块"><a href="#自定义代码块" class="headerlink" title="自定义代码块"></a>自定义代码块</h3><blockquote>
<p>点击windows -&gt; 搜索 templates -&gt; 选择SQL下editor下的templates -&gt; New（新建）</p>
</blockquote>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="主键-primary-key"><a href="#主键-primary-key" class="headerlink" title="主键(primary key)"></a>主键(primary key)</h3><blockquote>
<p>主键特点 ： 非空 唯一<br><code>CREATE TABLE user(id int PRIMARY KEY,age    int);</code></p>
</blockquote>
<h3 id="自增-auto-increment"><a href="#自增-auto-increment" class="headerlink" title="自增(auto_increment)"></a>自增(auto_increment)</h3><blockquote>
<p>一般和主键一起使用<br><code>create table t5(id int primary key auto_increment,name varchar(10));</code><br>如果设置了自增长，那么在插入数据的时候主键可以不设置值。也可以赋值为null，数据库会自动为这个主键赋值(在原来的基础上自增+1)</p>
</blockquote>
<h3 id="非空-not-null"><a href="#非空-not-null" class="headerlink" title="非空(not null)"></a>非空(not null)</h3><blockquote>
<p><code>create table user(id int primary key,age int not null);</code></p>
</blockquote>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote>
<p>直接使用<code>comment</code>来添加字段注释即可<br><code>create table t6(id int comment &#39;用户的id&#39;,age int comment &#39;用户的年龄&#39;);</code></p>
</blockquote>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>数据库中sql语句执行的最小单元</li>
<li>不能分割执行事务内的sql语句，只能是同时执行成功，或者同时执行失败，否则可能出现安全性问题</li>
<li>一个事务中的代码块包含多条sql语句，只有一起执行成功才能成功，只要有一条出现错误都会失败,因为开启事务的话，每操作的一条语句产生的结果都是存储在内存中的，没有及时更新到数据库中，只有提交之后才能更新到数据库中</li>
</ul>
<h3 id="关闭自动提交"><a href="#关闭自动提交" class="headerlink" title="关闭自动提交"></a>关闭自动提交</h3><blockquote>
<p>mysql的自动提交属性自动是开启的，就是每执行一次sql语句就会自动提交，如果需要使用事务功能，那么需要将其关闭，因为一旦提交了，数据就会发生改变，但是事务的功能就是当所有的sql语句都执行完才提交，因此要将其关闭。</p>
</blockquote>
<ul>
<li><p>显示自动提交的状态</p>
<ul>
<li><code>show variables like &#39;%autocommit%&#39;;</code> 显示为on表示开启的</li>
</ul>
</li>
<li><p>关闭自动提交</p>
<ul>
<li><code>set autocommit=0;</code>   此时再次查询状态就会显示OFF</li>
</ul>
</li>
<li><p>再次开启自动提交</p>
<ul>
<li><code>set autocommit=1</code> 开启自动提交，此时查看就实现为on</li>
</ul>
</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol>
<li>创建表，插入数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> USR(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),money <span class="built_in">int</span>);</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="literal">NULL</span>,<span class="string">'超人'</span>,<span class="number">200</span>),(<span class="literal">NULL</span>,<span class="string">'蝙蝠侠'</span>,<span class="number">205</span>);</div></pre></td></tr></table></figure>
<ol>
<li>关闭自动提交</li>
<li>让超人的钱+100  <code>update user set money=300 where id=1</code></li>
<li>打开另外一个窗口登录mysql，可以查看此时的超人看看钱是不是300，我们可以看到此时的数据并没有改变，因为我们关闭了自动提交，如果我们此时在原来窗口输入 <code>commit;</code>,那么在看看另外的登录窗口就会发现数据改变了。</li>
</ol>
<h3 id="回滚-rollback"><a href="#回滚-rollback" class="headerlink" title="回滚(rollback)"></a>回滚(rollback)</h3><blockquote>
<p>当你之前的操作没有提交的话，那么你使用rollback这个命令，那么就会回滚到初始状态</p>
</blockquote>
<h3 id="回滚点-savepoint"><a href="#回滚点-savepoint" class="headerlink" title="回滚点(savepoint)"></a>回滚点(savepoint)</h3><blockquote>
<p>前提是没有设置了自动提交，才能回滚到保存点<br><code>savepint s1(标识);</code>  ： 设置保存点<br>回滚到保存点，那么保存点之前的操作都是存在的，一旦提交之后就会执行保存点之前的操作。 <code>rollback to s1;</code></p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>当将自动提交设置为关闭状态，当改变数据库的内容时，只要手动提交输入 <code>commit;</code>，才能更新到数据库中，否则就只是在内存中改变了。</p>
</blockquote>
<ul>
<li>begin 起始点</li>
<li>savepoint s(标识) 设置回滚点</li>
<li>commit  提交</li>
<li>rollback 回滚</li>
<li>rollback to … 回滚到指定的回滚点</li>
</ul>
<h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><h3 id="数据库定义语言-DDL"><a href="#数据库定义语言-DDL" class="headerlink" title="数据库定义语言 DDL"></a>数据库定义语言 DDL</h3><ul>
<li>Data Definition Language  数据库定义语言</li>
<li>常见命令： create  drop alter truncate</li>
<li>这些命令不支持事务，就是没有提交也会生效</li>
</ul>
<h3 id="数据操纵语言-DML"><a href="#数据操纵语言-DML" class="headerlink" title="数据操纵语言 DML"></a>数据操纵语言 DML</h3><ul>
<li>Data Manipulation Language :数据操作语言</li>
<li>常见命令： insert update delete select</li>
<li>支持事务，可以回滚，不提交将不会生效</li>
</ul>
<h3 id="数据查询语言-DQL"><a href="#数据查询语言-DQL" class="headerlink" title="数据查询语言 DQL"></a>数据查询语言 DQL</h3><ul>
<li>Data Query Language  : 数据查询语言</li>
<li>常见命令： select（也属于DML）</li>
</ul>
<h3 id="TCL"><a href="#TCL" class="headerlink" title="TCL"></a>TCL</h3><ul>
<li>Transaction Control Language ： 事务控制语言</li>
<li>常见命令： begin commit  rollback savepoint</li>
</ul>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><ul>
<li>Data Control Language  : 数据控制语言</li>
<li>给用户分配权限相关的sql语言</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><p>整数</p>
<ul>
<li>int 4字节</li>
<li>bigint 8字节</li>
</ul>
</li>
<li><p>浮点数</p>
<ul>
<li>double(m,d): m代表数据的总长度，d表示小数点后面的位数</li>
<li>decimal(m,d): m代表数据的总长度，d表示小数点后面的位数</li>
<li>double精度比float高，decimal精度比double高</li>
</ul>
</li>
<li><p>字符串类型</p>
<ul>
<li>char(n) : 固定长度，即是存了abc也是占满了n长度 执行效率高  总长255</li>
<li>varchar(n) : 可变长度 存abc 占3个长度 节省空间  最大长度65535，但是超过255建议使用text</li>
<li>text(n) : 可变长度  最大65535</li>
</ul>
</li>
<li><p>日期类型</p>
<ul>
<li>date  : 只能存储年月日</li>
<li>time ： 只能存储时分秒</li>
<li>datetime  ：  年月日时分秒  默认值为null  最大值9999-12-31</li>
<li>timestamp ： 年月日时分秒   默认值是当前时间  最大值2038-01-19</li>
<li>创建表插入数据：<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> p(d1 <span class="built_in">date</span>, d2 <span class="keyword">time</span>,d3 datetime,d4 <span class="keyword">timestamp</span>);</div><div class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> p <span class="keyword">values</span>(<span class="string">'2018-03-08'</span>,<span class="literal">null</span>,null.null);</div><div class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> p <span class="keyword">values</span>(<span class="string">'2018-03-08'</span>,<span class="string">'12:06:03'</span>,<span class="literal">null</span>,<span class="literal">null</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day02&quot;&gt;&lt;a href=&quot;#Day02&quot; class=&quot;headerlink&quot; title=&quot;Day02&quot;&gt;&lt;/a&gt;Day02&lt;/h1&gt;&lt;h2 id=&quot;乱码问题&quot;&gt;&lt;a href=&quot;#乱码问题&quot; class=&quot;headerlink&quot; title=&quot;乱码问题&quot;
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作一</title>
    <link href="http://chenjiabing666.github.io/2018/03/21/SQL%E6%93%8D%E4%BD%9C%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2018/03/21/SQL操作一/</id>
    <published>2018-03-21T08:57:43.000Z</published>
    <updated>2018-03-27T01:11:59.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day01-基本的语句"><a href="#Day01-基本的语句" class="headerlink" title="Day01-基本的语句"></a>Day01-基本的语句</h1><h2 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h2><blockquote>
<p>因为传统的文本形式存储数据存在很多的弊端：</p>
<ol>
<li>执行效率低</li>
<li>占用内存</li>
</ol>
</blockquote>
<h2 id="什么是DB"><a href="#什么是DB" class="headerlink" title="什么是DB"></a>什么是DB</h2><blockquote>
<p><code>Database</code> ： 数据库<br>数据库本质是文件集（多个文件）<br>会按照特定存储规范进行数据增删改查</p>
</blockquote>
<h2 id="什么是DBMS"><a href="#什么是DBMS" class="headerlink" title="什么是DBMS"></a>什么是DBMS</h2><blockquote>
<p><code>DateBaseManagementSystem</code> : 数据库管理系统，本质就是管理数据库文件的软件</p>
<ol>
<li><code>Oracle</code></li>
<li><code>Mysql</code></li>
<li><code>DB2</code></li>
<li><code>Sqlite</code></li>
<li><code>SqlServer</code></li>
</ol>
</blockquote>
<h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><blockquote>
<p>关系型数据库</p>
<blockquote>
<ol>
<li>是经过数学理论验证过，可以保存现实生活中任何关系的数据库（其中的高级映射，比如一对多，多对一，一对一都是关系）</li>
<li>关系数据库是以表为单位进行存储的</li>
<li><code>Oracle</code> <code>mysql</code> <code>DB2</code> <code>sqlite</code> <code>sqlserver</code>都是关系型数据库</li>
</ol>
</blockquote>
<p>非关系型数据库</p>
<blockquote>
<ol>
<li><code>Redis</code>数据库是非关系型数据库</li>
<li>以<code>key-value</code>形式进行存储</li>
</ol>
</blockquote>
</blockquote>
<h2 id="主流关系型数据库介绍"><a href="#主流关系型数据库介绍" class="headerlink" title="主流关系型数据库介绍"></a>主流关系型数据库介绍</h2><blockquote>
<p><code>Mysql</code> ： 开源 卖服务赚钱 被sun公司收购 sun被oracle收购</p>
<blockquote>
<p>5.5版本因为oracle技术大牛对其进行升级，性能大幅提升，Mysql 从6.0开始收费，导致原来的mysql工程师跳槽创建了<code>MariaDB</code>,MariaDB内部实际上就是mysql，创建者的女儿叫Maria</p>
</blockquote>
<p><code>Oracle</code></p>
<blockquote>
<ol>
<li>闭源  卖产品</li>
<li>支持windows，Linux</li>
</ol>
</blockquote>
<p><code>DB2</code></p>
<blockquote>
<ol>
<li>闭源 大型数据库 通常是国字头的企业在用</li>
</ol>
</blockquote>
<p><code>sqlite</code></p>
<blockquote>
<ol>
<li>轻量级数据库，大小几十k，应用于移动或者嵌入式设备</li>
</ol>
</blockquote>
<p><code>SQLServer</code></p>
<blockquote>
<ol>
<li>微软公司 闭源 主要.net开发的网站中</li>
</ol>
</blockquote>
</blockquote>
<h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><blockquote>
<p>端口号<code>3306</code><br>编码格式 <code>utf8</code></p>
</blockquote>
<h2 id="数据库相关SQL"><a href="#数据库相关SQL" class="headerlink" title="数据库相关SQL"></a>数据库相关SQL</h2><h3 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h3><blockquote>
<p><code>Strctured Query Language</code> ： 结构化查询语言<br>通过sql语言和DBMS（数据库管理软件）进行交互</p>
</blockquote>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><blockquote>
<p>终端中输入： <code>mysql -u root -p</code><br>输入密码即可,没有密码直接回车即可</p>
</blockquote>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote>
<p><code>create database d_name ;</code> 创建数据库d_name<br><code>drop database d_name;</code> 删除数据库d_name<br><code>show databases;</code>  显示所有的数据库<br><code>show create database d_name;</code> 查看单个数据库<br><code>use d_name;</code> 使用当前的数据库d_name<br><code>create database db_name character set utf8;</code>创建数据库指定字符集</p>
</blockquote>
<h2 id="表相关SQL"><a href="#表相关SQL" class="headerlink" title="表相关SQL"></a>表相关SQL</h2><h3 id="什么是表"><a href="#什么是表" class="headerlink" title="什么是表"></a>什么是表</h3><blockquote>
<p>表是数据库中存放数据的单元，任何数据都是存放到表中<br>类似java中的Class，表中的字段对应class的属性</p>
</blockquote>
<h3 id="数据库表的引擎"><a href="#数据库表的引擎" class="headerlink" title="数据库表的引擎"></a>数据库表的引擎</h3><blockquote>
<p><code>innoDB</code> : 支持数据库的高级操作，包括事务 主键 外键等<br><code>myisam</code> : 只具备基本的数据库储功能</p>
</blockquote>
<h3 id="创建表时指定引擎和字符集"><a href="#创建表时指定引擎和字符集" class="headerlink" title="创建表时指定引擎和字符集"></a>创建表时指定引擎和字符集</h3><blockquote>
<p>格式 ：<code>create table t_name(字段名 字段类型,....) engine=myisam charset=utf8;</code></p>
</blockquote>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><blockquote>
<p>格式: <code>create table 表名(字段名 类型,字段名 类型,......);</code><br>例子： <code>create table name(id int,name char(10),age int);</code><br>执行原理： 当在中断输入建表语句 终端会把写好的sql发送给DBMS，然后解析到create table时，识别出要创建一个表。</p>
</blockquote>
<h3 id="查询所有表"><a href="#查询所有表" class="headerlink" title="查询所有表"></a>查询所有表</h3><blockquote>
<p><code>show tables ;</code></p>
</blockquote>
<h3 id="查询单个表"><a href="#查询单个表" class="headerlink" title="查询单个表"></a>查询单个表</h3><blockquote>
<p><code>show create table tale_name;</code><br>使用上面的语句会出现创建表的语句和字符编码</p>
</blockquote>
<h3 id="查看表的字段属性"><a href="#查看表的字段属性" class="headerlink" title="查看表的字段属性"></a>查看表的字段属性</h3><blockquote>
<p><code>desc table_name ;</code></p>
</blockquote>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="修改表的名称"><a href="#修改表的名称" class="headerlink" title="修改表的名称"></a>修改表的名称</h3><blockquote>
<p>格式 : rename table 原名 to 新名<br><code>rename table user to t_user;</code></p>
</blockquote>
<h3 id="修改表的属性（引擎和字符集）"><a href="#修改表的属性（引擎和字符集）" class="headerlink" title="修改表的属性（引擎和字符集）"></a>修改表的属性（引擎和字符集）</h3><blockquote>
<p>格式 ：alter table 表名 engine-innoDB charset=utf8;<br><code>alter table t  engine=InnoDB charset=GBK;</code></p>
</blockquote>
<h3 id="添加表字段"><a href="#添加表字段" class="headerlink" title="添加表字段"></a>添加表字段</h3><ul>
<li>在最后添加<blockquote>
<p>格式 ： alter table 表名 add 字段名 字段类型;<br><code>alter table t add age int;</code></p>
</blockquote>
</li>
<li>在最前添加<blockquote>
<p>格式： alter table 表名 add 字段名 字段类型 first;<br><code>alter table t add newage int first;</code></p>
</blockquote>
</li>
<li>在某个字段后面添加<blockquote>
<p>格式： alter table 表名 add 字段名 字段类型 after 字段名;<br><code>alter table t add birthday varchar(10) after id;</code></p>
</blockquote>
</li>
</ul>
<h3 id="修改字段名和类型"><a href="#修改字段名和类型" class="headerlink" title="修改字段名和类型"></a>修改字段名和类型</h3><blockquote>
<p>alter table 表名 change 原字段名 新字段名 新的字段类型 ;<br><code>alter table t change birthday bth Date;</code></p>
</blockquote>
<h3 id="修改字段类型和位置"><a href="#修改字段类型和位置" class="headerlink" title="修改字段类型和位置"></a>修改字段类型和位置</h3><blockquote>
<p>alter table 表名 modify 字段名 类型 位置（first/after 字段名）;<br><code>alter table t modify name int after age;</code>  将name移到age的后面，并且修改了name字段的类型为int<br> <code>alter table t modify name  varchar(10) first;</code>  将字段name移到最前面</p>
</blockquote>
<h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><blockquote>
<p>alter table 表名 drop 字段名;<br><code>alter table t drop bth;</code> 将t表中的bth字段删除</p>
</blockquote>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><blockquote>
<p>格式 ： drop table 表名 ;</p>
</blockquote>
<h2 id="数据相关的SQL-CRUD"><a href="#数据相关的SQL-CRUD" class="headerlink" title="数据相关的SQL(CRUD)"></a>数据相关的SQL(CRUD)</h2><h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h3><ul>
<li>全表插入<blockquote>
<p>格式 insert into 表名 values(value1,value2,…)<br>格式要求: values里面的值的<em>数量</em>和<em>顺序</em>必须要和表的字段一致<br><code>insert into user values(1,&#39;jack&#39;,22);</code></p>
</blockquote>
</li>
<li><p>指定字段插入</p>
<blockquote>
<p>格式： insert into 表名(字段1,字段2,..) values(value1，value2,….)<br><code>insert into user(id,name,age) values(1,&#39;jack&#39;,22);</code><br>格式要求： values中的值必须和前面格式的字段一致。</p>
</blockquote>
</li>
<li><p>插入多组数据</p>
<blockquote>
<p>格式： insert into values(第一组数据),(第二组数据)….<br><code>insert into user values(1,&quot;孙悟空&quot;,22),(2,&quot;唐僧&quot;,44);</code></p>
</blockquote>
</li>
<li><p>指定字段插入多组数据</p>
<blockquote>
<p><code>insert into user(age) values(22),(33);</code></p>
</blockquote>
</li>
</ul>
<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><ul>
<li>查询所有字段<blockquote>
<p>格式：<code>select * from 表名</code><br>select <code>*</code> from user;</p>
</blockquote>
</li>
<li>查询指定字段<blockquote>
<p>格式：select 字段1,字段2 from 表名<br><code>select name.age from user;</code></p>
</blockquote>
</li>
</ul>
<h3 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h3><ul>
<li><p>更新表中所有的字段</p>
<blockquote>
<p>格式： update 表名 set 字段名 = 新的值;<br><code>update user set age=22;</code></p>
</blockquote>
</li>
<li><p>改变指定条件的字段</p>
<blockquote>
<p>格式： update 表名 set 字段名 = 新的值 where 条件;<br><code>update user set age=22 where id=1;</code> 修改id=1的那一行数据的age</p>
</blockquote>
</li>
</ul>
<h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><ul>
<li><p>指定条件删除</p>
<blockquote>
<p>格式： delete from 表名 where 条件 ;<br><code>delet from user where id=2;</code>  删除id=2的那一行数据</p>
</blockquote>
</li>
<li><p>不指定条件删除，那么将会删除整张表数据</p>
<blockquote>
<p><code>delete from user;</code></p>
</blockquote>
</li>
</ul>
<h3 id="TRUNCATE语句"><a href="#TRUNCATE语句" class="headerlink" title="TRUNCATE语句"></a>TRUNCATE语句</h3><blockquote>
<p><code>trucate table 表名;</code> 先删除表，然后再创建一样的空表（表的名字相同，字段不变，主要的功能就是清空表中的数据）</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day01-基本的语句&quot;&gt;&lt;a href=&quot;#Day01-基本的语句&quot; class=&quot;headerlink&quot; title=&quot;Day01-基本的语句&quot;&gt;&lt;/a&gt;Day01-基本的语句&lt;/h1&gt;&lt;h2 id=&quot;数据库简介&quot;&gt;&lt;a href=&quot;#数据库简介&quot; class
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Excel表格的写入读取</title>
    <link href="http://chenjiabing666.github.io/2017/09/27/Excel%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%86%99%E5%85%A5%E8%AF%BB%E5%8F%96/"/>
    <id>http://chenjiabing666.github.io/2017/09/27/Excel表格的写入读取/</id>
    <published>2017-09-27T06:03:06.000Z</published>
    <updated>2017-09-27T06:04:35.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Excel的读取和写入"><a href="#Excel的读取和写入" class="headerlink" title="Excel的读取和写入"></a>Excel的读取和写入</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p>首先需要导入jar包，请点击<a href="http://download.csdn.net/download/qq_34162294/9997646" target="_blank" rel="external">这里下载</a></p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>我们知道<code>Excel</code>表格在<code>2007</code>之后就不一样了，后缀名变为<code>xlsx</code>，之前的后缀名为<code>xls</code>,因此读取和写入的操作就对应着不同的方式，但是只是读取和写入的类不同了，思想还是一样的。</p>
<p>我们要知道一个Excel文件(工作簿)包含三部分，分别是工作表(<code>sheet</code>),行(<code>row</code>),列(<code>cell</code>)</p>
</blockquote>
<h2 id="工作簿"><a href="#工作簿" class="headerlink" title="工作簿"></a>工作簿</h2><blockquote>
<p>工作簿对应的类是 <code>XSSFWorkbook</code>(2007之后),在2007之前对应的类是<code>HSSFWorkbook</code></p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p><code>new XSSFWorkbook()</code>   创建一个工作簿用于写入文件</p>
<p><code>new XSSFWorkbook(java.io.InputStream inputstream)</code>  创建一个工作簿，用于读取文件</p>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>XSSFFont createFont()</code>   返回一个<code>XSSFont</code>类的对象，主要用于设置字体用的</li>
<li><code>XSSFSheet createSheet()</code>   创建一个工作表</li>
<li><code>XSSFSheet    createSheet(String name)</code>   创建一个工作表并且指定姓名</li>
<li><code>XSSFCellStyle    createCellStyle()</code>   创建一个单元格风格类的一个对象，便于设置单元格的属性</li>
<li><code>write(OutputStream out)</code>    用于将文件写入到文件中</li>
<li><code>close()</code>  </li>
<li><code>setSheetName(int sheetIx,String name)</code>  为指定索引的工作表设置名称</li>
<li><code>XSSFSheet getSheetAt(int index)</code>   获取指定索引的工作表对象，这个是用来读取文件的时候用的</li>
</ul>
</blockquote>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="读取文件的例子"><a href="#读取文件的例子" class="headerlink" title="读取文件的例子"></a>读取文件的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  File file = <span class="keyword">new</span> File(<span class="string">"F:\\demo1.xlsx"</span>);</div><div class="line"><span class="comment">//创建输入流</span></div><div class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line"><span class="comment">//创建工作簿读取</span></div><div class="line">XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream);</div></pre></td></tr></table></figure>
<h4 id="写入文件的例子"><a href="#写入文件的例子" class="headerlink" title="写入文件的例子"></a>写入文件的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">XSSFWorkbook book=<span class="keyword">new</span> XSSFWorkbook();  <span class="comment">//创建工作簿</span></div><div class="line"></div><div class="line">.....省略写入的内容</div><div class="line"></div><div class="line">FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\demo1.xlsx"</span>);  <span class="comment">//创建输出流</span></div><div class="line"></div><div class="line">book.write(out);     <span class="comment">//写入到指定的文件</span></div><div class="line"></div><div class="line">book.close(); <span class="comment">// 关闭</span></div><div class="line">out.close();</div></pre></td></tr></table></figure>
<h2 id="工作表-sheet"><a href="#工作表-sheet" class="headerlink" title="工作表(sheet)"></a>工作表(sheet)</h2><blockquote>
<p>工作表对应的类为<code>XSSFSheet</code>,2007之前对应的是HSSFSheet<br>一般工作表都是在工作簿基础上创建的，因此构造函数也用不到，所以这里就不多说了</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><p><code>int    addMergedRegion(CellRangeAddress region)</code>  合并单元格</p>
</li>
<li><p><code>XSSFRow    createRow(int rownum)</code>   创建一个行   rownum表示创建第几行，这是一个行的索引(0开始)  便于写入</p>
</li>
<li><p><code>XSSFRow getRow(int index)</code>  获取指定索引的那一行，便于读取</p>
</li>
<li><p><code>int getLastRowNum()</code>     获取文件中最后一行的索引，这个通常在读取的时候用到</p>
</li>
<li><p><code>int getFirsetRowNum()</code>   获取文件第一行的索引</p>
</li>
</ul>
</blockquote>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建工作簿对象</span></div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">        XSSFSheet sheet = workbook.createSheet(<span class="string">"第一张表"</span>);   <span class="comment">//创建工作表对象</span></div><div class="line"></div><div class="line">        <span class="comment">//合并单元格    CellRangeAddress cell=new CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol) </span></div><div class="line">        <span class="comment">//这里表示合并第一行的1-10列</span></div><div class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>));</div></pre></td></tr></table></figure>
<h4 id="创建一行"><a href="#创建一行" class="headerlink" title="创建一行"></a>创建一行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">XSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">XSSFSheet sheet = workbook.createSheet(<span class="string">"第一张表"</span>);   <span class="comment">//创建工作表对象</span></div><div class="line">XSSFRow row=sheet.createRow(<span class="number">0</span>);   <span class="comment">//创建第一行</span></div></pre></td></tr></table></figure>
<h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><blockquote>
<p>行对应的类为<code>XSFFRow</code>,2007之前对应的是HSSFRow</p>
</blockquote>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>XSSFCell    createCell(int columnIndex)</code>  创建一列  columnIndex表示列的索引(0开始)</p>
</li>
<li><p><code>short    getFirstCellNum()</code>   返回文件中第一个列的索引，便于以后读取</p>
</li>
<li><p><code>short    getLastCellNum()</code>   返回全部的列数(不是索引)，这个和Sheet中getRowNum()方法不同，便于以后读取文件</p>
</li>
<li><p><code>XSSFCell    getCell(int cellnum)</code>    获取指定索引的那一列，便于以后的读取</p>
</li>
<li><p><code>XSSCellStyle getCellStyle()</code>   获取单元格风格的对象</p>
</li>
<li><p><code>void setCellStyle(XSSFCellStyle style)</code>  将设置的风格样式添加到单元格中，否则将不会起作用</p>
</li>
</ul>
</blockquote>
<h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><blockquote>
<p>列对应的类为<code>XSSFCell</code>,2007之前对应的是HSSFCell</p>
</blockquote>
<h3 id="常用的单元格类型"><a href="#常用的单元格类型" class="headerlink" title="常用的单元格类型"></a>常用的单元格类型</h3><blockquote>
<p>常用的单元格的类型有字符串，数字，布尔值，空值，可以使用<code>XSSFCell</code>的<code>int getCellType()</code> 方法获取类型</p>
<ul>
<li><code>CELL_TYPE_BLANK</code> 空值</li>
<li><code>CELL_TYPE_STRING</code>  字符串</li>
<li><code>CELL_TYPE_NUMERIC</code>   数字(浮点值，整型)</li>
<li><code>CELL_TYPE_BOOLEAN</code> 布尔值(True,FALSE)</li>
</ul>
</blockquote>
<h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>int getCellType()</code>获取单元格类型  可以和常用的单元格类型进行比较，然后使用不同的读取方法读取</p>
</li>
<li><p><code>XSSFCellStyle    getCellStyle()</code>   获取单元格风格对象，便于后面设置单元格的风格</p>
</li>
<li><p><code>setCellValue(Object value)</code>  设置单元格的内容，可以是任意类型的</p>
</li>
<li><p><code>java.util.Date    getDateCellValue()</code>   读取单元格的日期内容</p>
</li>
<li><p><code>String    getStringCellValue()</code>   读取单元格中的字符串内容</p>
</li>
<li><p><code>double    getNumericCellValue()</code>    读取单元格中的数字类型的内容</p>
</li>
<li><p><code>boolean    getBooleanCellValue()</code>   获取单元格中的布尔类型的内容</p>
</li>
</ul>
</blockquote>
<h2 id="设置单元格样式"><a href="#设置单元格样式" class="headerlink" title="设置单元格样式"></a>设置单元格样式</h2><blockquote>
<p>对应的类为<code>XSSFCellStyle</code></p>
</blockquote>
<h3 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>void    setAlignment(HorizontalAlignment align)</code>   设置水平对齐方式 </p>
</li>
<li><p><code>void    setVerticalAlignment(VerticalAlignment align)</code>   设置垂直的对齐方式</p>
</li>
<li><p><code>void    setTopBorderColor(XSSFColor color)</code>   设置上边框的颜色(还有Left,right..)</p>
</li>
<li><p><code>void    setFont(Font font)</code>   设置字体  这里的Font是org.apache.poi.ss.usermodel.Font</p>
</li>
<li><p><code>void    setBorderTop(BorderStyle border)</code>   设置上边框的样式，在BorderStyle类中有很多的样式</p>
</li>
<li><p><code>void    setRotation(short rotation)</code> 设置文字的旋转度数</p>
</li>
</ul>
</blockquote>
<h2 id="单元格字体的设置"><a href="#单元格字体的设置" class="headerlink" title="单元格字体的设置"></a>单元格字体的设置</h2><blockquote>
<p>对应的类为<code>XSSFFont</code></p>
</blockquote>
<h3 id="常用的方法-4"><a href="#常用的方法-4" class="headerlink" title="常用的方法:"></a>常用的方法:</h3><blockquote>
<ul>
<li><p><code>void    setBold(boolean bold)</code>  是否设置加粗</p>
</li>
<li><p><code>void    setItalic(boolean italic)</code>   设置是否倾斜</p>
</li>
<li><p><code>void    setUnderline(FontUnderline underline)</code> 设置下划线</p>
</li>
<li><p><code>void    setStrikeout(boolean strikeout)</code>   设置是否带有删除线</p>
</li>
<li><p><code>void    setColor(XSSFColor color)</code>   设置字体的颜色,只需要调用XSSFColor静态颜色变量即可</p>
</li>
<li><p><code>void    setFontHeight(double height)</code>   设置字体高度</p>
</li>
<li><p><code>void    setFontHeightInPoints(short height)</code> 设置字号</p>
</li>
<li><p><code>void    setFontName(java.lang.String name)</code>   设置字体样式(黑体，楷体…)</p>
</li>
</ul>
</blockquote>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.util.HSSFColor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.FontUnderline;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.HorizontalAlignment;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.VerticalAlignment;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFColor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFFont;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(); <span class="comment">// 创建工作簿</span></div><div class="line">		XSSFSheet sheet = workbook.createSheet(<span class="string">"第一个工作表"</span>); <span class="comment">// 创建一个工作表</span></div><div class="line">		XSSFCellStyle style = workbook.createCellStyle(); <span class="comment">// 创建单元格风格对象</span></div><div class="line">		sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>)); <span class="comment">// 合并第一行的单元格</span></div><div class="line">		style.setAlignment(HorizontalAlignment.CENTER); <span class="comment">// 设置水平居中</span></div><div class="line">		style.setVerticalAlignment(VerticalAlignment.CENTER); <span class="comment">// 设置垂直居中</span></div><div class="line"></div><div class="line">		XSSFFont font = workbook.createFont(); <span class="comment">// 创建字体的对象</span></div><div class="line">		font.setFontName(<span class="string">"黑体"</span>); <span class="comment">// 设置字体的样式为黑体</span></div><div class="line">		font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">20</span>); <span class="comment">// 设置字体的大小</span></div><div class="line">		font.setBold(<span class="keyword">true</span>); <span class="comment">// 设置粗体</span></div><div class="line">		font.setItalic(<span class="keyword">true</span>); <span class="comment">// 设置倾斜</span></div><div class="line">		font.setColor(HSSFColor.RED.index); <span class="comment">// 设置字体的颜色</span></div><div class="line">		font.setUnderline(FontUnderline.SINGLE); <span class="comment">// 设置下划线</span></div><div class="line">		font.setStrikeout(<span class="keyword">false</span>); <span class="comment">// 设置不带下划线</span></div><div class="line"></div><div class="line">		style.setFont(font); <span class="comment">// 将设置的字体添加到单元格样式中，显示出来</span></div><div class="line"></div><div class="line">		XSSFRow row1 = sheet.createRow(<span class="number">0</span>); <span class="comment">// 创建第一个行</span></div><div class="line">		XSSFCell cell1 = row1.createCell(<span class="number">0</span>); <span class="comment">// 创建第一行的第一列</span></div><div class="line">		cell1.setCellStyle(style); <span class="comment">// 将上面定义的风格设置到这个单元格中，这个是必须有的，否则根本不起作用</span></div><div class="line">		cell1.setCellValue(<span class="string">"员工信息表"</span>); <span class="comment">// 设置单元格的内容</span></div><div class="line"></div><div class="line">		<span class="comment">// 设置第二行的前三列的值</span></div><div class="line">		XSSFRow row2 = sheet.createRow(<span class="number">1</span>);</div><div class="line">		row2.createCell(<span class="number">0</span>).setCellValue(<span class="string">"姓名"</span>);</div><div class="line">		row2.createCell(<span class="number">1</span>).setCellValue(<span class="string">"性别"</span>);</div><div class="line">		row2.createCell(<span class="number">2</span>).setCellValue(<span class="string">"年龄"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 设置第三行的前三列</span></div><div class="line">		XSSFRow row3 = sheet.createRow(<span class="number">2</span>);</div><div class="line">		row3.createCell(<span class="number">0</span>).setCellValue(<span class="string">"陈加兵"</span>);</div><div class="line">		row3.createCell(<span class="number">1</span>).setCellValue(<span class="string">"男"</span>);</div><div class="line">		row3.createCell(<span class="number">2</span>).setCellValue(<span class="number">22</span>); <span class="comment">// 设置数字</span></div><div class="line"></div><div class="line">		<span class="comment">// 设置第四行的前三列</span></div><div class="line">		XSSFRow row4 = sheet.createRow(<span class="number">3</span>);</div><div class="line">		row4.createCell(<span class="number">0</span>).setCellValue(<span class="string">"郑元梅"</span>);</div><div class="line">		row4.createCell(<span class="number">1</span>).setCellValue(<span class="string">"女"</span>);</div><div class="line">		row4.createCell(<span class="number">2</span>).setCellValue(<span class="number">22</span>); <span class="comment">// 设置数字</span></div><div class="line"></div><div class="line">		<span class="comment">// 创建输出流对象</span></div><div class="line">		FileOutputStream stream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(</div><div class="line">				<span class="string">"F:\\demo2.xlsx"</span>));</div><div class="line">		workbook.write(stream); <span class="comment">// 写入文件</span></div><div class="line">		workbook.close(); <span class="comment">// 关闭</span></div><div class="line">		stream.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写入文件-1"><a href="#写入文件-1" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"F:\\demo2.xlsx"</span>);</div><div class="line">		FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file); <span class="comment">// 创建输入流</span></div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream); <span class="comment">// 创建读取工作簿的对象</span></div><div class="line">		XSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>); <span class="comment">// 获取第一个工作表的对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 第一次循环取得所有的行的对象 getLastRowNum()是得到最后一行的索引</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sheet.getLastRowNum(); i++) &#123;</div><div class="line">			XSSFRow row = sheet.getRow(i); <span class="comment">// 获取每一行的对象</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row.getLastCellNum(); j++) &#123;</div><div class="line">				XSSFCell cell = row.getCell(j); <span class="comment">// 获取每一行的每一列</span></div><div class="line">				<span class="keyword">int</span> type = cell.getCellType(); <span class="comment">// 获取每一个单元格对应的类型</span></div><div class="line">				<span class="keyword">switch</span> (type) &#123;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_BOOLEAN:   <span class="comment">//如果是布尔类型</span></div><div class="line">					<span class="keyword">boolean</span> b=cell.getBooleanCellValue();</div><div class="line">					System.out.print(b + <span class="string">"    "</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_NUMERIC:  <span class="comment">//如果是数字类型</span></div><div class="line">					<span class="keyword">double</span> d=cell.getNumericCellValue();   <span class="comment">//获取值</span></div><div class="line">					System.out.print( d+ <span class="string">"    "</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_STRING:  <span class="comment">//如果是字符串类型的</span></div><div class="line">					String s=cell.getStringCellValue();</div><div class="line">					System.out.print( s+ <span class="string">"   "</span>);   </div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_BLANK:   <span class="comment">//如果是空值</span></div><div class="line">					System.out.print(<span class="string">"      "</span>);</div><div class="line">				<span class="keyword">default</span>:</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		workbook.close();  <span class="comment">//关闭</span></div><div class="line">		inputStream.close();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><p><a href="http://tool.oschina.net/apidocs/apidoc?api=apache-POI" target="_blank" rel="external">POI文档</a></p>
</li>
<li><p><a href="http://lsieun.blog.51cto.com/9210464/1836601" target="_blank" rel="external">http://lsieun.blog.51cto.com/9210464/1836601</a></p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Excel的读取和写入&quot;&gt;&lt;a href=&quot;#Excel的读取和写入&quot; class=&quot;headerlink&quot; title=&quot;Excel的读取和写入&quot;&gt;&lt;/a&gt;Excel的读取和写入&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;head
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="POI(Excel)" scheme="http://chenjiabing666.github.io/tags/POI-Excel/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结四(EL表达式)</title>
    <link href="http://chenjiabing666.github.io/2017/09/26/JSP%E6%80%BB%E7%BB%93%E5%9B%9B-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2017/09/26/JSP总结四-EL表达式/</id>
    <published>2017-09-26T12:07:16.000Z</published>
    <updated>2017-09-27T06:03:48.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结四-EL表达式"><a href="#JSP总结四-EL表达式" class="headerlink" title="JSP总结四(EL表达式)"></a>JSP总结四(EL表达式)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>JSP页面尽量不要使用<code>scriptlet</code>编写<code>java</code>代码，因此我们可以使用<code>EL</code>表达式可以替代<code>Java</code>语句的使用</p>
</blockquote>
<h2 id="隐含对象"><a href="#隐含对象" class="headerlink" title="隐含对象"></a>隐含对象</h2><h3 id="与属性相关的隐含对象"><a href="#与属性相关的隐含对象" class="headerlink" title="与属性相关的隐含对象"></a>与属性相关的隐含对象</h3><blockquote>
<p>属性的隐含对象有<code>PageScope</code>,<code>requestScop</code>e,<code>sessionScope</code>,<code>applicationScope</code>分别对应的是<code>JSP</code>中的<code>PageContext</code>,<code>request</code>,<code>session</code>,<code>application</code>，因此可以取得<code>JSP</code>对象使用<code>setAttribute()</code>设置的属性，如果没有使用EL隐含对象获取属性的值，那么默认是从<code>PageScope</code>开始寻找</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    request.setAttribute(<span class="string">"login"</span>,<span class="string">'true'</span>);   <span class="comment">//绑定request对象的属性</span></div><div class="line">    session.setAttribute(<span class="string">"login"</span>,<span class="string">'true'</span>);   <span class="comment">//绑定session对象的属性</span></div><div class="line">    application.setAttribute(<span class="string">"login"</span>,<span class="string">"true"</span>);  <span class="comment">//设置application对象的属性</span></div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;%--获取request绑定的属性值  相当于request.getAttribute(<span class="string">"login"</span>);--%&gt;</div><div class="line">&lt;h1&gt;$&#123;requestScope.login&#125;&lt;h1&gt;</div><div class="line"></div><div class="line">&lt;%--获取session绑定的属性值--%&gt;</div><div class="line">&lt;h1&gt;$&#123;sessionScope.login&#125;&lt;h1&gt;</div></pre></td></tr></table></figure>
<h3 id="与请求参数相关的隐含对象-param-paramValues"><a href="#与请求参数相关的隐含对象-param-paramValues" class="headerlink" title="与请求参数相关的隐含对象(param,paramValues)"></a>与请求参数相关的隐含对象(param,paramValues)</h3><blockquote>
<p>与请求参数相关的EL隐含对象有<code>param</code>,<code>paramValues</code>。我们可以使用EL表达式可以获取表单提交的请求参数。</p>
<p>下面我们使用表单提交，测试一下</p>
<blockquote>
<p>JSP代码(表单提交)</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;form action="demo1.jsp" method="get"&gt;</div><div class="line">    姓名:&lt;input type="text" name="username"&gt;</div><div class="line">    密码:&lt;input type="password" name="password"&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">    </div><div class="line">    爱好:</div><div class="line">    打棒球：&lt;input type="checkbox" name="hobbies"&gt;</div><div class="line">    打羽毛球：&lt;input type="checkbox" name="hobbies"&gt;</div><div class="line">    </div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>demo1.jsp 文件（接收请求参数）</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%--获取提交的请求参数username，password </div><div class="line">    相当于使用如下代码:</div><div class="line">        request.getParameter("username");</div><div class="line">        request.getParameter("password");</div><div class="line">--%&gt;</div><div class="line">&lt;h1&gt;$&#123;param.username&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;param.password&#125;&lt;/h1&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;%--获取多选框的值  相当于使用下面的代码:</div><div class="line">    request.getParameterValues("hobbies")[0]</div><div class="line">--%&gt;</div><div class="line">&lt;h1&gt;$&#123;paramValues.hobbies[0]&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;paramValues.hobbies[1]&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h3 id="与标头-Header-相关的隐含对象"><a href="#与标头-Header-相关的隐含对象" class="headerlink" title="与标头(Header)相关的隐含对象"></a>与标头(Header)相关的隐含对象</h3><blockquote>
<p>如果想要取得用户请求的表头数据，那么使用<code>header</code>或者<code>headerValues</code>隐含对象。例如使用<code>${header[&quot;User-Agent&quot;]}</code> 这个相当于使用<code>&lt;%=request.getHeader(&quot;User-Agent&quot;)%&gt;</code>。 <code>HeaderValues</code>对象相当于使用<code>request.getHeaders()</code>  </p>
</blockquote>
<h3 id="cookie隐含对象"><a href="#cookie隐含对象" class="headerlink" title="cookie隐含对象"></a>cookie隐含对象</h3><blockquote>
<p><code>cookie</code>的隐含对象可以取得用户设置的<code>Cookie</code>设置的值。如果在<code>Cookie</code>中设置了<code>username</code>属性，那么可以使用<code>${cookie.username}</code></p>
</blockquote>
<h3 id="初始参数隐含对象"><a href="#初始参数隐含对象" class="headerlink" title="初始参数隐含对象"></a>初始参数隐含对象</h3><blockquote>
<p>隐含对象<code>initParam</code>可以用来取得<code>web.xml</code>中设置的<code>ServletContext</code>初始参数，也就是在<code>&lt;context-param&gt;</code>中设置的初始参数。例如<code>${initParam.initcount}</code>的作用，相当于<code>&lt;%=ServletContext.getInitParameter(&quot;initCount&quot;)%&gt;</code></p>
</blockquote>
<h2 id="EL运算符"><a href="#EL运算符" class="headerlink" title="EL运算符"></a>EL运算符</h2><blockquote>
<p>使用EL运算符直接实现一些算术运算符，逻辑运算符，就如同一般常见的程序语言中的运算</p>
</blockquote>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote>
<p>可以直接使用加减乘除 <code>${1+2}</code>,<code>${5/2}</code>,<code>${5*3}</code></p>
</blockquote>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote>
<p><code>${true and false}=false</code>,<code>${true and true}=true</code>,<code>${true or false}=true</code></p>
</blockquote>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><blockquote>
<p>可以直接在EL表达式比较大小，返回的也是<code>false</code>和<code>true</code>，可以用来判断，如下：<br><code>${1&lt;2}=false</code> ,<code>${(10*10)&gt;200}=true</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;c:if text="$&#123;6&gt;5&#125;"&gt;</div><div class="line">    &lt;c:out value="可以直接使用EL表达式进行比较"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结四-EL表达式&quot;&gt;&lt;a href=&quot;#JSP总结四-EL表达式&quot; class=&quot;headerlink&quot; title=&quot;JSP总结四(EL表达式)&quot;&gt;&lt;/a&gt;JSP总结四(EL表达式)&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结三(JSTL核心标签库的使用)</title>
    <link href="http://chenjiabing666.github.io/2017/09/22/JSP%E6%80%BB%E7%BB%93%E4%B8%89-JSTL%E6%A0%B8%E5%BF%83%E6%A0%87%E7%AD%BE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/22/JSP总结三-JSTL核心标签库的使用/</id>
    <published>2017-09-22T06:39:43.000Z</published>
    <updated>2017-10-01T07:58:08.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结三-JSTL核心标签库的使用"><a href="#JSP总结三-JSTL核心标签库的使用" class="headerlink" title="JSP总结三(JSTL核心标签库的使用)"></a>JSP总结三(JSTL核心标签库的使用)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>其实在我们编写JSP网页的时候是不希望在JSP页面中出现Java代码的，这里我们就要使用<code>JSTL</code>的核心标签库来实现。</p>
<p>想要使用JSTL，一定要填上这句话：<code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</code></p>
</blockquote>
<h2 id="属性处理与输出标签"><a href="#属性处理与输出标签" class="headerlink" title="属性处理与输出标签"></a>属性处理与输出标签</h2><h3 id="属性处理标签"><a href="#属性处理标签" class="headerlink" title="属性处理标签"></a>属性处理标签</h3><blockquote>
<p>在定义变量的时候，我们难免会用到Java代码，但是这里我们介绍<code>&lt;c:set&gt;</code>标签，这个能够实现变量的定义</p>
<p><code>&lt;c:set&gt;</code>标签中的属性有 <code>var</code>(定义的变量)、<code>value</code>(变量的值)、<code>target</code>(为JavaBean对象赋值的时候使用)、<code>scope</code>(设置变量的存活范围，有<code>request</code>,<code>session</code>,<code>application</code>,<code>page</code>)、<code>property</code>(<code>JavaBean</code>的变量)</p>
<p>使用<code>set</code>标签相当于调用存活范围内的<code>setAttribute()</code>方法来绑定属性</p>
<ul>
<li>定义一个普通的变量:   </li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--x的值为10，这句话相当于String x="10" --%&gt;</div><div class="line">&lt;c:set var="x" value="10"&gt;&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>定义<code>session</code>范围的变量(当然还可以定义其他存活范围的变量，这里就不一一讲了)</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--seesion范围的变量代表整个会话期间都是可以共享这个变量的，相当于下面这句话：</div><div class="line">        session.setAttribute("x",100);</div><div class="line">        在另外一个JSP文件中可以使用下面的语句得到其中的值：</div><div class="line">        </div><div class="line">        session.getAttribute("x");</div><div class="line">        &lt;c:out value="$&#123;sessionScope.x&#125;"&gt;&lt;/c:out&gt;</div><div class="line">--%&gt;</div><div class="line">&lt;c:set var="x" value="100" scope="session"&gt;&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>设置<code>JavaBean</code>对象的值：</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%--获取JavaBean的对象person,如果没有那么就是直接创建一个对象，范围为session,下面可以用到 --%&gt;</div><div class="line">&lt;jsp:useBean id="person" class="com.Person" scope="session"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">&lt;%-- target是对象的person，这里使用EL表达式，得到session范围内的Person对象 --%&gt;</div><div class="line">&lt;c:set target="$&#123;sessionScope.person &#125;" property="username" value="陈加兵"&gt;&lt;/c:set&gt;</div><div class="line"></div><div class="line">&lt;%-- 输出变量的username的值，这里使用的EL表达式  相当于  session.getAttribute("person").getUsername() --%&gt;</div><div class="line">&lt;c:out value="$&#123;sessionScope.person.username &#125;"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>如果设置的值太冗长了，那么可以在标签体的中间设置</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:set scope="request"&gt;陈加兵&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>移除变量 使用的是<code>&lt;c:remove&gt;</code>(一定要指定存活范围)</li>
</ul>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%--移除session范围内的变量x  相当于  session.removeAttribute(<span class="string">"x"</span>)  </div><div class="line">    这里一定要指定范围</div><div class="line">--%&gt;</div><div class="line">&lt;c:remove var=<span class="string">"x"</span> scope=<span class="string">"session"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="输出标签"><a href="#输出标签" class="headerlink" title="输出标签"></a>输出标签</h3><blockquote>
<p><code>&lt;c:out&gt;</code>相当于<code>out.println()</code>方法，是一个用来向网页中输出内容的</p>
<p>其中的属性有<code>value</code> (输出的内容，其中可以是JEL的${}或者一个字符串) ，<code>escapeXml</code>(这个使用来控制是否将输出的内容中有<code>html</code>标签的是否用替代字符替换，默认为<code>true</code>表示用替代字符替换),<code>default</code>(如果输出的内容为<code>null</code>或者为空的时候那么就直接不显示任何内容，但是我们可以定义<code>default</code>的值来默认显示的值)</p>
<ul>
<li>使用<code>EL</code>表达式输出</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--输出request范围内的属性x   相当于 out.println(request.getAttribute("x"))--%&gt;</div><div class="line">&lt;c:out value="$&#123;requestScope.x&#125;"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>直接使用字符串输出一个值</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;c:out value="我是陈加兵"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>输出<code>html</code>语句</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--设置escapeXml为false--%&gt;</div><div class="line">&lt;c:out value="&lt;h1&gt;我是陈加兵&lt;/h1&gt;" escapeXml="false"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>指定输出的默认的内容</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--如果$&#123;param.username&#125;为空，那么就输出0--%&gt;</div><div class="line">&lt;c:out value="$&#123;param.username&#125;" default="0"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<h2 id="流程处理标签"><a href="#流程处理标签" class="headerlink" title="流程处理标签"></a>流程处理标签</h2><blockquote>
<p>流程处理就是判断，循环语句</p>
</blockquote>
<h3 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h3><blockquote>
<p><code>&lt;c:if&gt;</code>可以判断语句是否正确，如果正确即可执行，但是这个标签没有<code>else</code>语句，只能处理判断为正确的结果<br>其中的属性有<code>test</code>，这个是设置判断条件的，如果为<code>true</code>即可执行，反之不执行，<code>var</code>是保留判断结果的<br><code>test</code>中的判断条件既可以是<code>EL</code>表达式也可以是<code>&lt;%=%&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &lt;c:set var="salary" value="$&#123;3000 &#125;"&gt;&lt;/c:set&gt;</div><div class="line"></div><div class="line">&lt;%-- test中写的是判断条件，如果为true那么才执行，这里写的是EL表达式，当然也是可以用&lt;%=%&gt; --%&gt;</div><div class="line">   </div><div class="line">&lt;c:if test="$&#123;salary&gt;2000 &#125;"&gt;</div><div class="line">	&lt;c:out value="这个员工的工资大于2000"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>
<h3 id="高级判断"><a href="#高级判断" class="headerlink" title="高级判断"></a>高级判断</h3><blockquote>
<p>前面的说过的<code>&lt;c:if&gt;</code>仅仅当判断为真时才执行，但是我们想要当不为真时也执行语句，这时我们要使用<code>&lt;c:choose&gt;</code>,<code>&lt;c:when&gt;</code>,<code>&lt;c:otherwise&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   &lt;%--  判断题必须在choose中 --%&gt;</div><div class="line">&lt;c:choose&gt;</div><div class="line">	&lt;%-- 如果提交的username和password都对的话，那么就登录成功  相当于if --%&gt;</div><div class="line">	&lt;c:when test='$&#123;param.username=="陈加兵" &amp;&amp; param.password=="123456"&#125;'&gt;</div><div class="line">		&lt;h1&gt;</div><div class="line">			&lt;c:out value="$&#123;param.username &#125;"&gt;&lt;/c:out&gt;</div><div class="line">			登录成功</div><div class="line">		&lt;/h1&gt;</div><div class="line">	&lt;/c:when&gt;</div><div class="line"></div><div class="line">	&lt;%--	相当于else --%&gt;</div><div class="line">	&lt;c:otherwise&gt;</div><div class="line">		&lt;h1&gt;</div><div class="line">			&lt;c:out value="$&#123;param.username &#125;"&gt;&lt;/c:out&gt;</div><div class="line">			登录失败</div><div class="line">		&lt;/h1&gt;</div><div class="line">	&lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
<h2 id="网页导入和重定向标签"><a href="#网页导入和重定向标签" class="headerlink" title="网页导入和重定向标签"></a>网页导入和重定向标签</h2><h3 id="网页导入标签"><a href="#网页导入标签" class="headerlink" title="网页导入标签"></a>网页导入标签</h3><blockquote>
<p>之前学过JSP中的网页导入，一个是静态导入，一个是动态导入，详情请看上篇文章。</p>
<p>在JSTL中也有一个标签(<code>&lt;c:import&gt;</code>)，用于动态导入网页,并且还可以使用&lt;<code>c:param</code>&gt;设置传入的参数</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &lt;%-- url就是要导入的网页，name是设置初始值的变量，value是设置的值。在demo1.jsp中可以使用        request.getParameter(String name)取得参数 --%&gt;</div><div class="line">&lt;c:import url="demo1.jsp"&gt;</div><div class="line">	&lt;c:param name="username" value="陈加兵"&gt;&lt;/c:param&gt;</div><div class="line">	&lt;c:param name="password" value="123456"&gt;&lt;/c:param&gt;</div><div class="line">&lt;/c:import&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>除了导入<code>web</code>应用程序中的网页，我们还可以导入非目前<code>web</code>应用程序中的网页</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%--导入百度的首页，并且设置字符集为utf-8，注意这里一定要设置网页的字符集格式和当前的jsp格式一样，否则会出现乱码--%&gt;</div><div class="line">&lt;c:import url="http://www.baidu.com"&gt;&lt;/c:import charEncoding="utf-8"&gt;</div></pre></td></tr></table></figure>
<h3 id="重定向标签"><a href="#重定向标签" class="headerlink" title="重定向标签"></a>重定向标签</h3><blockquote>
<p>之前的重定向必须使用<code>HttpServletResponse</code>的<code>sendRedirect()</code>方法</p>
<p>现在我们可以使用<code>JSTL</code>标签<code>&lt;c:redirect url&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:redirect url="demo1.jsp"&gt;&lt;/c:rediect&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>当然我们也是可以传入参数的，使用<code>&lt;c:param name=&quot;&quot; value=&quot;&quot;&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:redirect url="demo1.jsp"&gt;</div><div class="line">    &lt;c:param name="username" value="陈加兵"/&gt;</div><div class="line">&lt;/c:rediect&gt;</div></pre></td></tr></table></figure>
<h2 id="错误处理标签"><a href="#错误处理标签" class="headerlink" title="错误处理标签"></a>错误处理标签</h2><blockquote>
<p>在之前的JSP文件中，必须定义<code>errorPage</code>属性才能跳转到指定的页面或者处理错误</p>
<p>现在我们使用<code>JSTL</code>标签<code>&lt;c:catch&gt;</code>,可以捕捉异常，如果有异常就会将异常对象保存下来</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   &lt;%--捕捉异常，如果有了异常，那么保存在error变量中 --%&gt;</div><div class="line">&lt;c:catch var="error"&gt;</div><div class="line">	$&#123;10/0 &#125;</div><div class="line">&lt;/c:catch&gt;</div><div class="line"></div><div class="line">&lt;%-- 如果捕捉到了异常，那么error就不是null --%&gt;</div><div class="line">&lt;c:if test="$&#123;error!=null &#125;"&gt;</div><div class="line">	&lt;h1&gt;</div><div class="line">		&lt;c:out value="$&#123;error.message &#125;"&gt;&lt;/c:out&gt;</div><div class="line">	&lt;/h1&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>
<h2 id="迭代标签"><a href="#迭代标签" class="headerlink" title="迭代标签"></a>迭代标签</h2><blockquote>
<p>迭代标签用于数组，集合，列表的输出。</p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p>forEach既可以循环也可以迭代</p>
</blockquote>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote>
<ul>
<li><code>var</code> 变量，用于输出</li>
<li><code>items</code>   将要迭代的对象</li>
<li><code>valueStatus</code>   迭代的状态</li>
<li><code>begin</code>   如果指定了bengin，就在items下标为begin的位置进行迭代</li>
<li><code>end</code>     如果指定了end，那么就在items下表为end的位置结束迭代</li>
<li><code>step</code>    指定迭代的步长，默认的是1</li>
</ul>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">      &lt;!-- 循环输出[0,8]之中的所有的整数 --&gt;</div><div class="line">		&lt;c:forEach var="item" begin="0" end="8"&gt;</div><div class="line">			&lt;c:out value="$&#123;item&#125;"&gt;&lt;/c:out&gt;</div><div class="line">		&lt;/c:forEach&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		</div><div class="line">		&lt;!-- 循环输出[0,8]之中的所有的整数 ,指定步长为2--&gt;</div><div class="line">		&lt;c:forEach var="item" begin="0" end="8" step="2"&gt;</div><div class="line">			&lt;c:out value="$&#123;item&#125;"&gt;&lt;/c:out&gt;</div><div class="line">		&lt;/c:forEach&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;%</div><div class="line">	List list=new ArrayList();</div><div class="line"> 	for(int i=0;i&lt;3;i++)&#123;</div><div class="line"> 		list.add(i);</div><div class="line"> 	&#125;</div><div class="line">	request.setAttribute("items", list);</div><div class="line"></div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;!-- item是创建的变量用来存储迭代中的值，items是迭代的对象，其中的值使用EL表达式给出 --&gt;</div><div class="line">&lt;c:forEach var="item" items="$&#123;requestScope.items &#125;"&gt;</div><div class="line">	&lt;c:out value="$&#123;item &#125;"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:forEach&gt;</div></pre></td></tr></table></figure>
<h3 id="forTokens"><a href="#forTokens" class="headerlink" title="forTokens"></a>forTokens</h3><blockquote>
<p>用于将一个字符串按照定义的符号分隔出来。</p>
</blockquote>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><blockquote>
<ul>
<li><code>var</code> 变量，用于输出</li>
<li><code>items</code>  将要迭代的string对象</li>
<li><code>delims</code>   指定分隔字符串的分隔符，可以定义多个分隔符</li>
<li><code>varStatus</code>   迭代的状态</li>
<li><code>begin</code>     </li>
<li><code>end</code></li>
<li><code>step</code></li>
</ul>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">	String str="c,v,d,s,a|v,d";</div><div class="line">	request.setAttribute("str",str);</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;c:forTokens var="item" items="$&#123;requestScope.str &#125;" delims=",|"&gt;</div><div class="line">	&lt;c:out value="$&#123;item &#125;"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:forTokens&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结三-JSTL核心标签库的使用&quot;&gt;&lt;a href=&quot;#JSP总结三-JSTL核心标签库的使用&quot; class=&quot;headerlink&quot; title=&quot;JSP总结三(JSTL核心标签库的使用)&quot;&gt;&lt;/a&gt;JSP总结三(JSTL核心标签库的使用)&lt;/h1&gt;&lt;h2
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结二(动作元素)</title>
    <link href="http://chenjiabing666.github.io/2017/09/20/JSP%E6%80%BB%E7%BB%93%E4%BA%8C-%E5%8A%A8%E4%BD%9C%E5%85%83%E7%B4%A0/"/>
    <id>http://chenjiabing666.github.io/2017/09/20/JSP总结二-动作元素/</id>
    <published>2017-09-20T14:51:42.000Z</published>
    <updated>2017-09-22T02:14:24.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结二-动作元素"><a href="#JSP总结二-动作元素" class="headerlink" title="JSP总结二(动作元素)"></a>JSP总结二(动作元素)</h1><h2 id="lt-jsp-include-gt"><a href="#lt-jsp-include-gt" class="headerlink" title="&lt;jsp:include&gt;"></a><code>&lt;jsp:include&gt;</code></h2><blockquote>
<p>前面介绍了一种指令元素<code>include</code>，那是一种静态包含<code>JSP</code>文件，这个标签是动态包含一个<code>JSP</code>页面，也就是被包含的<code>JSP</code>页面和原JSP将合并在一起，转译为一个<code>Servlet</code>类。这是有一定的局限性的，如变量的定义不能重复。</p>
<p>动态的包含JSP文件即是被包含的JSP和原JSP分别转译为一个Servlet类，这就保证了其中的变量可以重复定义了，因为并不是在一个类中了</p>
<p><code>&lt;jsp:include page=&quot;相对的文件路径&quot;&gt;&lt;/jsp:include&gt;</code>这种标签转译为Servlet和指令元素<code>include</code>是一样的</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;%--动态导入在编译的时候是两个jsp文件各自编译成一个Servlet文件，因此其中的变量是不可以共享的，在当前页面中还是可以定义导入页面定义的变量 --%&gt;</div><div class="line">&lt;jsp:include page="form.jsp"&gt;</div><div class="line">    //定义的param可以在form.jsp中使用request.getParameter(String name)取得其中的值</div><div class="line">    &lt;jsp:param value="陈加兵" name="username"/&gt;</div><div class="line">    &lt;jsp:param value="123456" name="password"/&gt;</div><div class="line">&lt;/jsp:include&gt;</div></pre></td></tr></table></figure>
<h2 id="lt-jsp-forward-gt"><a href="#lt-jsp-forward-gt" class="headerlink" title="&lt;jsp:forward&gt;"></a><code>&lt;jsp:forward&gt;</code></h2><blockquote>
<p>这是将请求转发给另外一个JSP或者Servlet文件处理，这个和<code>RequestDispatcher</code>是一样的原理，就是Servlet中转发<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//绑定属性，在login.jsp中可以获取</div><div class="line">request.setAttribute("username","陈加兵");</div><div class="line"></div><div class="line">//当前页面的请求将会交给login.jsp文件处理</div><div class="line">&lt;jsp:forward page='login.jsp'&gt;&lt;/jsp:forward&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="lt-jsp-useBean-gt"><a href="#lt-jsp-useBean-gt" class="headerlink" title="&lt;jsp:useBean&gt;"></a><code>&lt;jsp:useBean&gt;</code></h2><blockquote>
<p>这个动作元素是用来搭配<code>JavaBean</code>组件的标准标签。<br><code>JavaBean</code>必须满足下面的条件：</p>
<blockquote>
<ul>
<li>必须实现<code>Java.io.Serializable</code>接口</li>
<li>没有公开的(<code>public</code>)类变量</li>
<li>具有无参构造函数（默认的都有）</li>
<li>具有公开的设置方法（<code>setter</code>）与取值方法（<code>getter</code>）</li>
</ul>
</blockquote>
<p>下面就是一个<code>JavaBean</code>组件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//这里的变量的值一定要和表单的中的name属性的值一样，否则不能获取</span></div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">Checkout</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"陈加兵"</span>.equals(username)&amp;&amp;<span class="string">"123456"</span>.equals(password);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>JavaBean</code>的目的是减少<code>Scriptlet</code>的使用。其中搭配<code>&lt;jsp:useBean&gt;</code>来使用这个<code>JavaBean</code>,并且使用<code>&lt;jsp:setProperty&gt;</code>与<code>&lt;jsp:getProperty&gt;</code>对<code>javaBean</code>进行设值与取值</p>
<p>注意<code>javaBean</code>一定要搭配表单使用，因为设值的值其实是隐式的调用<code>request.getParameter(String name)</code>来获取表单的值</p>
<p>下面是一个登录的表单(注意这里的<code>input</code>中的<code>name</code>属性的值一定要和<code>JavaBean</code>组件类的成员变量的名字一样)</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;!--提交给Demo1.jsp处理，下面就实现Demo1.jsp--&gt;</div><div class="line">&lt;form action="Demo1.jsp"&gt;</div><div class="line">	&lt;label&gt;姓名：&lt;/label&gt;</div><div class="line">	&lt;input type="text" name="username"&gt;</div><div class="line">	&lt;label&gt;密码：&lt;/label&gt;</div><div class="line">	&lt;input type="password" name="password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>下面我们写一个<code>JSP</code>文件设置<code>JavaBean</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;%--使用JavaBean person是Person创建的对象，相当于 Person person=new Person() </div><div class="line">		其中class是JavaBean的类所在的路径(在com包下的Person文件中)</div><div class="line">		id就是相当于创建的对象</div><div class="line">	--%&gt;</div><div class="line">	&lt;jsp:useBean id="person" class="com.Person"&gt;&lt;/jsp:useBean&gt;</div><div class="line">	</div><div class="line">	&lt;%--为username和password设置值,相当于下面的语句</div><div class="line">	person.setUsername(request.getParameter("username"));</div><div class="line">	person.setPassword(request.getParameter("password"));</div><div class="line">	JavaBean中的变量一定要和表单中的值一样，否则就不能对应，出现错误 </div><div class="line">	其中name就是指定上面的id，即是使用的对象，property就是指定变量</div><div class="line">	--%&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="uesrname" name="person"/&gt;</div><div class="line">	&lt;jsp:setProperty property="password" name="person"/&gt;</div><div class="line">	</div><div class="line">	&lt;%--age是另外的变量，并没有对应着表单的name属性，因此我们可以单独的为其设置值，使用value实行即可设置，这里不必考虑类型，因为在内部会自动转换成JavaBean中的类型 --%&gt;</div><div class="line">	&lt;jsp:setProperty property="age" name="person" value="20"/&gt;</div><div class="line">	</div><div class="line">	&lt;%--获取设置的值，相当于下面的语句：</div><div class="line">		person.getUsername();</div><div class="line">		person.getPassword();</div><div class="line">		person.getAge();</div><div class="line">	 --%&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="username" name="person" /&gt;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="password" name="person" /&gt;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="age" name="person" /&gt;&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>其实我们还可以不但可以将表单中的值赋值给变量，还可以使用<code>value</code>和<code>param</code>自己设置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 将请求的url中的password的值赋值给username，注意这里的使用的get的请求的话，提交的时候url会有请求值的</div><div class="line">		http:<span class="comment">//localhost:8080/web2/JSP/Demo1.jsp?username=%E9%99%88%E5%8A%A0%E5%85%B5&amp;password=123456</span></div><div class="line">	 --%&gt;</div><div class="line">	&lt;jsp:setProperty property=<span class="string">"username"</span> name=<span class="string">"person"</span> param=<span class="string">"password"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;%--age是另外的变量，并没有对应着表单的name属性，因此我们可以单独的为其设置值，使用value实行即可设置，这里不必考虑类型，因为在内部会自动转换成JavaBean中的类型 --%&gt;</div><div class="line">	&lt;jsp:setProperty property=<span class="string">"age"</span> name=<span class="string">"person"</span> value=<span class="string">"20"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="JavaBean的存活范围"><a href="#JavaBean的存活范围" class="headerlink" title="JavaBean的存活范围"></a>JavaBean的存活范围</h2><blockquote>
<p><code>Scope</code>属性决定了javabean对象的存在的范围。可选值有:</p>
<blockquote>
<ol>
<li><code>page</code>(默认值)</li>
<li><p><code>request</code></p>
</li>
<li><p><code>session</code></p>
</li>
<li><p><code>application</code></p>
</li>
</ol>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:useBean id="person" class="com.anllin.bean.Person" scope="page"&gt;&lt;/jsp:useBean&gt;</div></pre></td></tr></table></figure>
<h3 id="在page范围"><a href="#在page范围" class="headerlink" title="在page范围"></a>在page范围</h3><blockquote>
<p>客户每次请求访问<code>jsp</code>页面时，都会创建一个<code>javabean</code>对象。JavaBean对象的有效范围就是当前的<code>jsp</code>文件中，如果不在当前Jsp中，那么就不可以使用该<code>JavaBean</code>对象中设置的值</p>
<p>比如使用<code>forward</code>转发给另外一个JSP文件，那么此时就会再创建一个<code>JavaBean</code>对象，原来页面的JavaBean对象并没有传过来，也就不能使用其中的值，这个和变量的共享是一个道理的，这个JavaBean对象只能在当前的Jsp文件中调用，不能实现共享</p>
</blockquote>
<h3 id="在request范围"><a href="#在request范围" class="headerlink" title="在request范围"></a>在request范围</h3><blockquote>
<p>客户每次请求访问jsp页面时，都会创建新的javabean对象。有效范围为：</p>
<blockquote>
<ul>
<li><p>客户请求访问的当前jsp网页。</p>
</li>
<li><p>和当前网页共享一个客户请求的网页，即当前jsp网页中<code>&lt;%@include %&gt;</code>指令以及<code>&lt;forward&gt;</code>标记包含的其他jsp文件,也就是转发和包含的Jsp文件也是可以共享这个<code>JavaBean</code>对象的，这个和Servlet中的<code>request</code>是一样的，一旦转发了，就可以通过<code>setAttribute()</code>设置属性，那么在转发的页面中就可以访问这个属性</p>
</li>
</ul>
<ul>
<li><p>当所有共享同一个客户请求的jsp页面执行完毕并向客户端发加响应时，javabean对象结束生命周期。</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在<code>httpServletRequest</code>对象中，属性名javabean的<code>id</code>,属性值为<code>javabean</code>对象，因此可以通过<code>HttpRequest.getAttribute()</code>方法取得<code>javabean</code>对象</p>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">    //Demo1.jsp文件  表单请求提交的JSp文件</div><div class="line">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    </div><div class="line">    &lt;%--设置scope属性为request，这个是必须的，这里的JavaBean对象为person--%&gt;</div><div class="line">	&lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="uesrname" name="person"/&gt;</div><div class="line">	&lt;jsp:setProperty property="password" name="person"/&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="age" name="person" value="20"/&gt;</div><div class="line">&gt; </div><div class="line">e    </div><div class="line">    &lt;%--转发请求到Demo2.jsp文件中，那么就可以在Demo.jsp中共享person对象了--%&gt;</div><div class="line">    &lt;jsp:forward page="Demo2.jsp"&gt;&lt;/jsp:forward&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"></div><div class="line">//Demo2.jsp</div><div class="line"></div><div class="line"></div><div class="line">    &lt;%@page import="com.Person"%&gt;</div><div class="line">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">        pageEncoding="UTF-8"%&gt;</div><div class="line">    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    </div><div class="line">    &lt;%-- 使用JavaBean,这里的scope是必须的，一定要和Demo1.jsp一样，id也要一样 --%&gt;</div><div class="line">    &lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;%--获取username的值 --%&gt;</div><div class="line">    &lt;jsp:getProperty property="username" name="person"/&gt;</div><div class="line"></div><div class="line">    &lt;%</div><div class="line">        //使用HttpServletRequest获取对象person</div><div class="line">        Person p=(Person)request.getAttribute("person");</div><div class="line">        out.println(p.getUsername());  //获取username的值</div><div class="line">    %&gt;</div><div class="line"></div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="在session范围内"><a href="#在session范围内" class="headerlink" title="在session范围内"></a>在session范围内</h3><blockquote>
<ul>
<li><p>我们知道<code>HttpSession</code>是可以在会话期间实现数据共享的，只要是同一个项目中的<code>Jsp</code>文件都是可以共享这个JavaBean对象，但是并不是永久的，因为会话也是有时间限制的，</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在HttpSession对象中，属性名为javabean的id,属性值为javabean对象。除了可以通过javabean的id直接引用javabean对象外，也可以通过<code>HttpSession.getAttribute（）</code>方法取得<code>javabean</code>对象</p>
</li>
<li><p>一定要注意在每一个<code>&lt;jsp:useBean&gt;</code>中都要写上<code>scope=&quot;session&quot;</code></p>
</li>
</ul>
</blockquote>
<h3 id="在application范围内"><a href="#在application范围内" class="headerlink" title="在application范围内"></a>在application范围内</h3><blockquote>
<ul>
<li><p>我们知道<code>ServletContext</code>存在于整个web应用的生命周期，这个不像<code>session</code>，一旦设置的会话时间结束，那么就不存在了，这个是永远存在的，只要web程序在继续</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在<code>application</code>对象中，属性名为<code>javabean</code>的id，属性值为javabean对象，除了可以通过javabean的<code>id</code>直接引用对象外，也可以通过javabean的<code>application.getAttribute()</code>方法取得javabean对象</p>
</li>
</ul>
</blockquote>
<h3 id="重要的属性"><a href="#重要的属性" class="headerlink" title="重要的属性"></a>重要的属性</h3><blockquote>
<p>其实<jsp:usebean>不仅仅可以对于表单中请求可以转换为对象的值，上面我们说过了存活范围，其实只要在这个请求范围内，并且将对象绑定到响应的属性上面，那么就可以在jsp文件中使用改标签接收其值。</jsp:usebean></p>
<p>其实一般在表单提交之后，我们会使用Sevlet文件验证是否密码和用户名正确，那么就不是直接提交给jsp文件，此时就像上面说过的，不影响标签的使用，只要将JavaBean对象绑定到响应范围的属性上，便是可以实现对象的共享，代码如下：</p>
<blockquote>
<p>ServletDemo文件</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		<span class="comment">//创建对象，并且设置值</span></div><div class="line">			Person person=<span class="keyword">new</span> Person();</div><div class="line">			person.setUsername(<span class="string">"陈加兵"</span>);</div><div class="line">			person.setPassword(<span class="string">"123456"</span>);</div><div class="line">			</div><div class="line">			<span class="comment">//将JavaBean对象绑定到request上，相当于存活范围为request</span></div><div class="line">			<span class="comment">//注意这里的键值一定要是和对象的名称一样，否则不行</span></div><div class="line">			request.setAttribute(<span class="string">"person"</span>, person);</div><div class="line">			<span class="comment">//转发请求到jsp文件，下面我们就将在jsp文件中使用JavaBean标签接收</span></div><div class="line">			RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"JSP/demo1.jsp"</span>);</div><div class="line">			dispatcher.forward(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>demo1.jsp:上面文件转发过来的，接收JavaBean对象</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;%-- 使用标签接收转发过来的JavaBean对象，scope一定要设置为request,id就是传过来的对象，一定要和前面的名称一样，下面的语句相当于：</div><div class="line">	Person person=(Person)request.getAttribute("person");</div><div class="line"> --%&gt;</div><div class="line">&lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;&lt;jsp:getProperty property="username" name="person"/&gt;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.cnblogs.com/zfc2201/archive/2011/08/17/2143615.html" target="_blank" rel="external">http://www.cnblogs.com/zfc2201/archive/2011/08/17/2143615.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结二-动作元素&quot;&gt;&lt;a href=&quot;#JSP总结二-动作元素&quot; class=&quot;headerlink&quot; title=&quot;JSP总结二(动作元素)&quot;&gt;&lt;/a&gt;JSP总结二(动作元素)&lt;/h1&gt;&lt;h2 id=&quot;lt-jsp-include-gt&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结一(标签）</title>
    <link href="http://chenjiabing666.github.io/2017/09/20/JSP%E6%80%BB%E7%BB%93%E4%B8%80-%E6%A0%87%E7%AD%BE%EF%BC%89/"/>
    <id>http://chenjiabing666.github.io/2017/09/20/JSP总结一-标签）/</id>
    <published>2017-09-20T14:51:23.000Z</published>
    <updated>2017-09-20T14:58:57.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结一-标签"><a href="#JSP总结一-标签" class="headerlink" title="JSP总结一(标签)"></a>JSP总结一(标签)</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote>
<p><code>JSP</code>文件在部署到web服务器上的时候还是会编译成<code>Servlet</code>文件，因此JSP的生命周期和Servlet是一样的，都是有<code>_JSPInit()</code>，_<code>JSPService(</code>),<code>_JSPDestroy()</code>方法的</p>
</blockquote>
<h2 id="指示元素"><a href="#指示元素" class="headerlink" title="指示元素"></a>指示元素</h2><blockquote>
<p>在<code>jsp</code>中有三个指示类型，分别为：<code>page</code>,<code>include</code>,<code>tablig</code>。</p>
</blockquote>
<h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><blockquote>
<p><code>page</code>指示类型告知容器如何转译目前的JSP网页。</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>language</code>指定解析语言，<code>contentType</code>表明为html文件，<code>pageEncoding</code>告诉容器转译及编译的时候如何处理这个这个JSP网页中的额中文编码，import是导入包的作用，如果有多个包导入，那么可以使用逗号隔开。</p>
<p><code>errorPage</code>用于设置当JSP运行错误而产生异常的时候，该转发哪一个页面处理这个异常，可以自己定义一个异常的JSP或者html文件显示这个异常，但是这个必须和<code>isErrorPage</code>配合使用，必须在处理异常的<code>page</code>指令中协商<code>isErrorPage=&quot;true&quot;</code></p>
<p>还有一些其他的属性，自己可以看看菜鸟教程上的内容</p>
</blockquote>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><blockquote>
<p><code>include</code>是用于静态的包含其他页面中的内容。这个还是很重要的，如果在网页中每一张页面都需要使用一样的导航栏，导入一样的css，js文件，那么可以将这些内容单独做一个jsp文件或者html文件，要使用的时候就直接包含即可。</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//file指定文件的相对路径  </span></div><div class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"daoru.jsp"</span> %&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>其实上面的语句在<code>Servlet</code>语句相当于下面这句话：</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RequestDispatcher dis=request.getRequestDispatcher();</div><div class="line">dis.include(request,response);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意这句话写在页面的哪里，那么就将其中的内容导入到哪里，比如要导入<code>css</code>，<code>js</code>文件，那么直接在<code>head</code>标签中直接导入</p>
<p>静态导入的方式在部署到服务器会自动和当前的<code>JSP</code>文件编译为一个<code>Servlet</code>文件，也就是在一个<code>Servlet</code>类中。因此在包含的JSP文件中如果定义了变量或者方法，那么在当前的JSP页面中就不能重复定义，否则将会出现变量重复的错误，代码如下：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//Demo1.jsp</div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">pageEncoding="UTF-8"%&gt;</div><div class="line"></div><div class="line">&lt;%</div><div class="line">    String name="陈加兵";</div><div class="line">    int age=22;</div><div class="line">%&gt;</div><div class="line"></div><div class="line"></div><div class="line">//Demo2.jsp</div><div class="line"></div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">//包含Demo1.jsp文件</div><div class="line">&lt;%@ include file="Demo1.jsp" %&gt;</div><div class="line">&lt;%</div><div class="line">    //String name="chenji";     //这里不能重复定义，否则将会报错</div><div class="line">%&gt;</div><div class="line"></div><div class="line">//直接输出name的值 </div><div class="line">&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;    </div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意这里的<code>Demo1.jsp</code>文件中一定不能重复的出现<code>&lt;html&gt;</code>标签，因为包含的时候是全部内容都是包含到当前页面中，如果出现重复的<code>html</code>标签代码就会混乱。</p>
</blockquote>
<h2 id="声明元素"><a href="#声明元素" class="headerlink" title="声明元素"></a>声明元素</h2><blockquote>
<p><code>&lt;%! &gt;</code> 这就是声明元素，主要是用来定义类成员和方法声明的。其中不可以出现循环语句等，只能出现定义语句，当然在定义方法的时候函数体中可以出现其他的语句。</p>
<p>声明元素中的内容在编译的都将变成<code>Servlet</code>中的类的成员变量和方法</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    &lt;%!</div><div class="line">        <span class="comment">//变量</span></div><div class="line">        String name=<span class="string">"陈加兵"</span>;     </div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age=<span class="number">20</span>;</div><div class="line"></div><div class="line">        <span class="comment">//方法</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(name+<span class="string">":"</span>+age);</div><div class="line">&#125;</div><div class="line">    %&gt;</div></pre></td></tr></table></figure>
<h2 id="Scriptlet"><a href="#Scriptlet" class="headerlink" title="Scriptlet"></a>Scriptlet</h2><blockquote>
<p><code>&lt;% %&gt;</code>这个是写正常的java语句的，其中将会转译成<code>_jspService()</code>方法中的内容</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%</div><div class="line">    String name=<span class="string">"陈加兵"</span>;</div><div class="line">    request.setAttribute(<span class="string">"name"</span>,name);</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<h2 id="表达式元素"><a href="#表达式元素" class="headerlink" title="表达式元素"></a>表达式元素</h2><blockquote>
<p><code>&lt;%= %&gt;</code>  其中可以直接写一个表达式</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;&lt;%= new Date() %&gt; &lt;/h1&gt;</div><div class="line">&lt;h1&gt;&lt;%= 2+3 %&gt; &lt;/h1&gt;</div><div class="line">&lt;h1&gt;&lt;%= request.getAttribute("name") %&gt; &lt;/h1&gt;</div></pre></td></tr></table></figure>
<h2 id="注释元素"><a href="#注释元素" class="headerlink" title="注释元素"></a>注释元素</h2><blockquote>
<p> <code>&lt;%----%&gt;</code>这是JSP的注释，在浏览器中查看源代码的时候是看不到的<br> <code>&lt;!-- --&gt;</code> 这是html中的注释，在网页源代码中是可以看到的</p>
</blockquote>
<h2 id="隐含对象"><a href="#隐含对象" class="headerlink" title="隐含对象"></a>隐含对象</h2><blockquote>
<ul>
<li><code>request</code>    转译后对应的是<code>HttpServletRequest</code></li>
<li><code>resposne</code>   译后对应的是<code>HttpServletResponse</code></li>
<li><code>out</code>        译后对应的是<code>JspWriter</code>对象，其内部关系一个<code>PrintWriter</code>对象</li>
<li><code>Config</code>    译后对应的是<code>ServletConfig</code></li>
<li><code>session</code>    译后对应的是<code>HttpSession</code></li>
<li><code>application</code> 译后对应的是<code>ServletContext</code></li>
<li><code>pageContext</code>  译后对应的是<code>PageContext</code>对象 </li>
<li>exception  译后对应的是Throwable对象</li>
<li><code>page</code>       译后对应的是<code>this</code></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结一-标签&quot;&gt;&lt;a href=&quot;#JSP总结一-标签&quot; class=&quot;headerlink&quot; title=&quot;JSP总结一(标签)&quot;&gt;&lt;/a&gt;JSP总结一(标签)&lt;/h1&gt;&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;header
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结五(监听器)</title>
    <link href="http://chenjiabing666.github.io/2017/09/19/Servlet%E6%80%BB%E7%BB%93%E4%BA%94-%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/19/Servlet总结五-监听器/</id>
    <published>2017-09-19T02:37:23.000Z</published>
    <updated>2017-09-19T02:38:53.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结五-监听器"><a href="#Servlet总结五-监听器" class="headerlink" title="Servlet总结五(监听器)"></a>Servlet总结五(监听器)</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><blockquote>
<p>监听器按其功能可以分为三种，分别是生命周期监听器(<code>ServletContextListener</code>,<code>ServletRequestListener</code>,<code>HttpSessionListener</code>)，属性监听器(<code>ServletRequestAttributeListener</code>,<code>HttpSessionAttributeListener</code>,<code>ServletContextAttributeListener</code>)，会话属性监听器(<code>HttpSessionBindingListener</code>,<code>HttpSessionActivationListener</code>)。下面我们将会详细的介绍这三种监听器。</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/listener.jpg" alt="分类图"></p>
<h2 id="生命周期监听器"><a href="#生命周期监听器" class="headerlink" title="生命周期监听器"></a>生命周期监听器</h2><p>生命周期就是从创建到销毁，因此顾名思义，就是在对象创建的时候会触发，销毁的时候也会触发</p>
</blockquote>
<h3 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h3><blockquote>
<p>前面我们说过<code>ServletContext</code>是上下文的，是应用程序共享的，当应用程序启动就会生成的。在应用程序初始化或者结束前，会分别调用<code>contextInitialized()</code>和<code>contextDestroyed()</code>方法，通过传入的<code>ServletContextEvent</code>取得<code>ServletContext</code>对象。</p>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p>下面读取设置的初始化参数，并且在监听器中将其绑定为属性实现全文共享</p>
<blockquote>
<ul>
<li><code>web.xml</code>的文件，主要是设置初始化属性值，前面已经讲过</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置ServletContext初始参数 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 设置ServletContext初始参数 --&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 设置监听器，ServletContextListener --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.ServletContextListenerDemo<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 设置监听器，ServletContextListener --&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>下面是实现监听器的功能</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Enumeration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextListenerDemo</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// ServletContext销毁的时候触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">//当销毁的时候就移除其中绑定的属性</span></div><div class="line">		ServletContext context = arg0.getServletContext();</div><div class="line">		<span class="comment">// 获取所有属性的名称</span></div><div class="line">		Enumeration enumeration = context.getAttributeNames();</div><div class="line">		<span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</div><div class="line">			String name = (String) enumeration.nextElement();</div><div class="line">			<span class="comment">// 移除绑定的属性</span></div><div class="line">			context.removeAttribute(name);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// ServletContext生成的时候触发，一般当web程序应用的时候就会初始化ServletContext参数</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取ServletContext对象</span></div><div class="line">		ServletContext context = arg0.getServletContext();</div><div class="line">		<span class="comment">// 读取参数</span></div><div class="line">		String name = context.getInitParameter(<span class="string">"username"</span>);</div><div class="line">		String password = context.getInitParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="comment">// 绑定属性，用于全文共享</span></div><div class="line">		context.setAttribute(<span class="string">"username"</span>, name);</div><div class="line">		context.setAttribute(<span class="string">"password"</span>, password);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h3><blockquote>
<p>这是在对象<code>ServletRequest</code>对象生成或结束时，会触发的监听器。当生成的时候会触发<code>requestInitialized()</code>,结束时会触发<code>requestDestroyed()</code>方法。<br>ServletRequest对象生成一般在浏览器发出请求，或者转发重定向。注意这个触发是在Servlet的doGet()或者doPost()之前。</p>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p><code>ServletRequestListener</code>文件:在<code>ServletRequest</code>对象生成时绑定属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletRequestListenerDemo</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//在ServletRequest对象结束时触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent arg0)</span> </span>&#123;</div><div class="line">		HttpServletRequest request=(HttpServletRequest)arg0.getServletRequest();</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//在ServletRequest对象生成时触发(比如浏览器请求)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//强制转换成其子类</span></div><div class="line">		HttpServletRequest request=(HttpServletRequest) arg0.getServletRequest();</div><div class="line">		<span class="comment">//绑定属性，这里的request和触发其的Servlet中的是一样的，因此可以实现共享</span></div><div class="line">		<span class="comment">//就好像forward,include一样</span></div><div class="line">		request.setAttribute(<span class="string">"login"</span>, <span class="string">"atuo"</span>);   <span class="comment">//绑定属性</span></div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Servlet</code>文件：取得绑定的值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		PrintWriter pWriter=response.getWriter();</div><div class="line">		pWriter.println(request.getAttribute(<span class="string">"login"</span>));   <span class="comment">//取得上面监听器绑定的值</span></div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>web.xml</code>文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置监听器，ServletRequestListener --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.ServletRequestListenerDemo<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 设置监听器，ServletRequestListener --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h3><blockquote>
<p>在<code>HttpSession</code>对象初始化后或者结束时，会分别调用<code>sessionCreated()</code>和<code>sessionDestroyed()</code>方法，你可以通过传入的<code>HttpSessionEvent</code>来取得<code>HttpSession</code>，以针对会话对象做出响应的创建或者结束处理操作</p>
</blockquote>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p><code>Servlet</code>文件：用来验证登录是否正确，如果正确就创建<code>HttpSession</code>对象，并且绑定属性用来实现自动登录</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.xml.registry.infomodel.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="keyword">if</span> (<span class="string">"chenjiabing"</span>.equals(name)&amp;&amp;<span class="string">"123456"</span>.equals(password)) &#123;</div><div class="line">			<span class="comment">//用户名和密码正确创建对象</span></div><div class="line">			HttpSession session=request.getSession();</div><div class="line">			session.setAttribute(<span class="string">"login"</span>, <span class="string">"auto"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">			</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>HttpSessionListenerDemo</code>文件：用来记录登录的人数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.omg.CORBA.Request;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletHttpSessionListenerDemo</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">	<span class="comment">//HttpSession创建时触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent arg0)</span> </span>&#123;</div><div class="line">		count++;    <span class="comment">//人数++</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//HttpSession销毁时触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		count--;   <span class="comment">//人数--</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="属性操作监听器"><a href="#属性操作监听器" class="headerlink" title="属性操作监听器"></a>属性操作监听器</h2><blockquote>
<p>顾名思义，属性操作监听器就是当绑定属性或者移除绑定属性的时候会触发，共有三个监听器，分别为：<code>ServletContextAttributeListener</code>,<code>ServletRequestAttributeListener</code>,<code>HttpSessionAtrributeListener</code>。相同的是它们都有共同需要实现的方法，分别为：<code>attributeAdded</code>(绑定属性的时候触发),<code>attributeRemoved</code>(属性移除的时候触发),<code>attributeReplace</code>(属性被替换的时候触发)</p>
<p>由于这三个监听器实现的方法都是一样的，下面就演示一个即可，其他的都是相同的</p>
</blockquote>
<h3 id="HttpSessionAttributeListener"><a href="#HttpSessionAttributeListener" class="headerlink" title="HttpSessionAttributeListener"></a>HttpSessionAttributeListener</h3><blockquote>
<p>这是监听<code>HttpSession</code>对象属性的，主要有（添加，移除，替换）,当然这个也是要在<code>web.xml</code>设置的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionAttributeListener</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">http</span>.<span class="title">HttpSessionAttributeListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*HttpSessionBindingEvent方法</span></div><div class="line">	 * String getName()  返回最近改变的属性的名称</div><div class="line">	 * Object getValue()   返回已添加、移除或替换的属性的值。如果添加（或绑定）了属性，则这是该属性的值。如果移除（或取消绑定）了属性，则这是被移除属性的值。如果替换了属性，则这是属性原来的值。</div><div class="line">	 * getSession()   获取HttpSession对象 </div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="comment">//添加新的属性时触发，每绑定一个属性就触发一次</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取HttpSession对象</span></div><div class="line">		HttpSession session=arg0.getSession();</div><div class="line">		String name=arg0.getName();    <span class="comment">//获取添加的属性名称</span></div><div class="line">		String attribute=(String) arg0.getValue();   <span class="comment">//获取添加的属性的值</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//移除属性的时候触发  ，每移除一次就会触发一次</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		String value=(String) arg0.getValue();</div><div class="line">		System.out.println(<span class="string">"被移除的属性的值为："</span>+value);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//属性值被替换的时候触发，直接重新设置属性值就是替换</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"被替换的属性的值："</span>+arg0.getValue());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="会话属性监听器"><a href="#会话属性监听器" class="headerlink" title="会话属性监听器"></a>会话属性监听器</h2><blockquote>
<p>先前介绍的几个监听器都是要在<code>web.xml</code>中使用<code>&lt;listener&gt;</code>定义的，这个会话属性监听器是不要在<code>web.xml</code>设置的</p>
<p>这里介绍的监听器分别为：<code>HttpSessionBindingListener</code>,<code>HttpSessionActivationListener</code></p>
</blockquote>
<h3 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h3><blockquote>
<p>当实现<code>HttpSessionBindingListener</code>接口的类的对象被移除或者绑定到<code>HttpSession</code>成为属性的时候就会触发</p>
<p>下面是实现<code>HttpSessionBindingListener</code>接口的类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionBindingListenerDemo</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">http</span>.<span class="title">HttpSessionBindingListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>  age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpSessionBindingListenerDemo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name=<span class="string">"陈加兵"</span>;</div><div class="line">		<span class="keyword">this</span>.age=<span class="number">22</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当这个类的对象绑定成为HttpSession的属性的时候将会触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取绑定的属性的对象</span></div><div class="line">		HttpSessionBindingListenerDemo listenerDemo=(HttpSessionBindingListenerDemo)arg0.getValue();</div><div class="line">		<span class="comment">//获取对象的值</span></div><div class="line">		System.out.println(listenerDemo.name);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//当这个类的对象被移除的时候就会触发</span></div><div class="line">	<span class="comment">//getValue()  getName()</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>下面是<code>Servlet</code>文件：</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">        <span class="comment">//获取对象</span></div><div class="line">		HttpSession session=request.getSession(); </div><div class="line">        <span class="comment">//对象</span></div><div class="line">		HttpSessionBindingListenerDemo listener=<span class="keyword">new</span> HttpSessionBindingListenerDemo();</div><div class="line">		<span class="comment">//绑定对象</span></div><div class="line">		session.setAttribute(<span class="string">"listener"</span>, listener);</div><div class="line">		</div><div class="line">		</div><div class="line">			</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结五-监听器&quot;&gt;&lt;a href=&quot;#Servlet总结五-监听器&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结五(监听器)&quot;&gt;&lt;/a&gt;Servlet总结五(监听器)&lt;/h1&gt;&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结四(过滤器)</title>
    <link href="http://chenjiabing666.github.io/2017/09/17/Servlet%E6%80%BB%E7%BB%93%E5%9B%9B-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/17/Servlet总结四-过滤器/</id>
    <published>2017-09-17T13:44:07.000Z</published>
    <updated>2017-09-17T14:03:28.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结四-过滤器的使用"><a href="#Servlet总结四-过滤器的使用" class="headerlink" title="Servlet总结四(过滤器的使用)"></a>Servlet总结四(过滤器的使用)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>在容器调用Servlet的<code>service()</code>的方法钱，Servlet其实并不会知道有请求的到来，而在<code>service()</code>方法执行后，容器真正对浏览器进行HTTP响应之前，浏览器也不知道Servlet真正响应是什么。过滤器(<code>Filter</code>)正如其名称所示，它介于Servlet之前，可拦截浏览器对Servlet的请求，也可以改变Servlet对浏览器的响应。</p>
<p>其实说白了，过滤器就是应用程序的一个额外的组件，为了方便使用并且不改变Servlet源代码，比如用户验证，字符替换，压缩这类的需求，你可能只是暂时的需要这类需求，但是过一段时间又不需要了，如果直接在Servlet中改动源码，那么就太麻烦了。因此此时就需要设置一个独立的组件，在使用的时候直接引用，不需要的时候直接删除即可，这就是过滤器的必要。</p>
</blockquote>
<h2 id="过滤器的实现"><a href="#过滤器的实现" class="headerlink" title="过滤器的实现"></a>过滤器的实现</h2><blockquote>
<p>想要实现过滤器，那么需要实现<code>Filter</code>接口，这个接口中有三个必须实现的方法，分别为<code>init()</code>,<code>doFilter()</code>,<code>destroy()</code>。</p>
<p><code>init(FilterConfig config)</code>   这是一个初始化方法，其中的参数可以获取定义的初始值，这个在后面会详细说</p>
<p><code>destroy()</code>  这个是销毁方法</p>
<p><code>doFilter(HttpServletRequest request,HttpServletResponse response,FilterChain chain)</code>  这是主要的方法，用来执行过滤的作用。当请求来到了web容器中，容器发现了调用Servlet的<code>service()</code>方法之前可以应用某过滤器的时候就会调用该过滤器的<code>doFilter()</code>方法。就是在doFilter()方法中进行了service()方法的前置处理，而后根据是否调用<code>FilterChain</code>中的<code>doFilter()</code>决定是否执行下一个过滤器，如果没有那么就执行第一个过滤器。</p>
<p>如果执行了<code>FilterChain的doFilter()</code>方法，那么就会执行下一个过滤器，如果没有就调用指定的Servlet的<code>service()</code>方法。</p>
</blockquote>
<h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><blockquote>
<ul>
<li>Servlet的响应分为前置处理和后置处理。前置处理就是在调用<code>service()</code>方法之前进行的处理，就是Servlet还没有接受到请求的时候，后置处理就是在Servlet执行过service()方法之后，就是Servlet已经处理完请求之后。因此<code>FilterChain</code>的<code>doFilter()</code>方法就将过滤器处理分为了前置处理和后置处理，在调用<code>FilterChain</code>的<code>doFilter()</code>方法之前的都是对Servlet的前置处理，也就是说这时候Servlet并不知道此时有请求过来，而在其之后的都是对Servlet的后置处理。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doFilter(HttpServletRequest request,HttpServletResponse response,FilterChain chain)</div><div class="line">&#123;       </div><div class="line">        <span class="comment">//service()的前置处理</span></div><div class="line">        chain.doFilter(request,response);</div><div class="line">        <span class="comment">//service()的后置处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>在<code>FilterChain</code>执行后会一堆栈顺序返回，就是说如果有多个<code>Filter</code>，那么就先按照顺序执行<code>chain.doFilter(request,response)</code>之前的代码，即是先前置处理，然后入栈，这样一直到执行到最后一个<code>Filter</code>，之后就从栈顶开始执行<code>chain.doFilter()</code>的方法之后的代码，即是后置处理。总的来说就是先执行前置处理，然后入栈，待全部执行完毕之后再从栈顶开始后置处理的代码。</p>
</li>
<li><p>在<code>Filter</code>的<code>doFilter</code>的方法中的<code>request</code>，<code>response</code>和Servlet的<code>doGet()</code>和<code>doPost()</code>方法中的是一样的，即是可以设置属性，可以得到表单提交的值，总之是一样的。</p>
</li>
</ul>
</blockquote>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><blockquote>
<ul>
<li>下面实现一个过滤器用来验证提交请求的用户名和密码是否正确</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></div><div class="line">			FilterChain chain) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">		<span class="comment">// 根据request获取表单的用户名和密码</span></div><div class="line">		String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="comment">// 如果用户名和密码正确</span></div><div class="line">		<span class="keyword">if</span> (<span class="string">"陈加兵"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(<span class="string">"password"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"用户名或者密码错误，请重新输入"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//继续执行下一个过滤器，如果有就执行</span></div><div class="line">		chain.doFilter(request, response);</div><div class="line">		<span class="comment">//当所有过滤器的前置处理都执行完毕才执行这个语句</span></div><div class="line">		System.out.println(<span class="string">"Servlet已经执行完毕"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="过滤器的设置"><a href="#过滤器的设置" class="headerlink" title="过滤器的设置"></a>过滤器的设置</h3><blockquote>
<ul>
<li>在<code>web.xml</code>中设置过滤器，设置的方式如下：</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>web2<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo1的过滤器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--设置过滤器文件的名字--&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--设置过滤器类所在的路径，具体到包名--&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    </div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置作用的url，即是Demo9这个Servlet应用这个过滤器--&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo9<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>   </div><div class="line"><span class="comment">&lt;!-- &lt;servlet-name&gt;Demo9&lt;/servlet-name&gt; 这个标签和上面的&lt;url-pattern&gt;是一个效果，直接指明应用的Servlet的名称 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--Demo1也应用这个过滤器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>   </div><div class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo1的过滤器 --&gt;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo2的过滤器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.FilterDemo2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filte</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--     Demo1这个Servlet文件也应用FilterDemo2这个过滤器，那么当请求Demo的时候要按照定义的先后顺序先执行FilterDemo1这个过滤器 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo2的过滤器 --&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote>
<ul>
<li>可以在同一个<code>&lt;filter-mapping&gt;</code>中定义多个Servlet文件，表示多个Servlet都应用于这个过滤器</li>
<li>一个Servlet文件可以同时应用多个过滤器，但是执行的顺序要按照定义的先后顺序执行</li>
</ul>
</blockquote>
<h3 id="初始参数的设置和获取"><a href="#初始参数的设置和获取" class="headerlink" title="初始参数的设置和获取"></a>初始参数的设置和获取</h3><h4 id="设置初始值"><a href="#设置初始值" class="headerlink" title="设置初始值"></a>设置初始值</h4><blockquote>
<p>这个和<code>ServletConfig</code>一样的都存在初始参数，当然定义的方式也是不尽相同，都是在<code>web.xml</code>中定义的，如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.FilterDemo3<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  		<span class="comment">&lt;!--直接在filter下可以设置初始参数，当然我们可以在过滤器中获取参数--&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    </div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  		</div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="获取初始参数的值"><a href="#获取初始参数的值" class="headerlink" title="获取初始参数的值"></a>获取初始参数的值</h4><blockquote>
<p>直接利用其中的<code>init(FilteConfig config)</code> 获取初始化参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String username;</div><div class="line">	<span class="keyword">public</span> String password;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></div><div class="line">			FilterChain chain) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//直接在init方法中利用FilterConfig的方法获取参数的值</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		<span class="comment">//获取初始值</span></div><div class="line">		username=config.getInitParameter(<span class="string">"username"</span>);</div><div class="line">		password=config.getInitParameter(<span class="string">"password"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置触发的时机"><a href="#设置触发的时机" class="headerlink" title="设置触发的时机"></a>设置触发的时机</h3><blockquote>
<p>当我们直接请求Servlet文件的url或者表单提交的时候使用的都是浏览器默认发出的请求，这个是可以触发过滤器的。但是如果是那些重定向(<code>sendirect</code>)或者转发包含(<code>forward</code>,<code>include</code>)就不会默认触发，因此我们需要在<code>web.xml</code>设置触发的时机，定义如下:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>      <span class="comment">&lt;!--默认的--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>       <span class="comment">&lt;!--forward--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>INCLUDE<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>        <span class="comment">&lt;!--include--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>        <span class="comment">&lt;!--error --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结四-过滤器的使用&quot;&gt;&lt;a href=&quot;#Servlet总结四-过滤器的使用&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结四(过滤器的使用)&quot;&gt;&lt;/a&gt;Servlet总结四(过滤器的使用)&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结三(HttpSession会话管理)</title>
    <link href="http://chenjiabing666.github.io/2017/09/16/Servlet%E6%80%BB%E7%BB%93%E4%B8%89-HttpSession%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"/>
    <id>http://chenjiabing666.github.io/2017/09/16/Servlet总结三-HttpSession会话管理/</id>
    <published>2017-09-15T16:12:10.000Z</published>
    <updated>2017-09-17T14:03:27.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结三-HttpSession会话管理"><a href="#Servlet总结三-HttpSession会话管理" class="headerlink" title="Servlet总结三(HttpSession会话管理)"></a>Servlet总结三(HttpSession会话管理)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><code>HttpSession</code>是提供一种方式，跨多个页面请求或对 Web 站点的多次访问标识用户并存储有关该用户的信息。<br>简单的来说就是能够实现全局的共享数据，可以跨多个页面请求，当然在<code>Servlet</code>中可以在同一个项目中的不同的Servlet中共享数据</p>
</blockquote>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><blockquote>
<ul>
<li><code>void setAttribute(String name, Object value)</code>  绑定对象到此会话上</li>
<li><code>public void removeAttribute(String name)</code>  移除绑定的对象</li>
<li><code>Object getAttribute(String name)</code>   根据指定的属性名称获取指定的值(需要强转)</li>
<li><code>Enumeration getAttributeNames()</code>    返回一个所有属性的枚举对象,可以通过Enumeration得到其中的值</li>
<li><code>public int getMaxInactiveInterval()</code>  返回 servlet 容器在客户端访问之间将使此会话保持打开状态的最大时间间隔，以秒为单位（根据测试，这个默认的值为1800秒，如果在这个默认的时间之内没有响应，那么会话将会中断）</li>
<li><code>public void setMaxInactiveInterval(int interval)</code>   指定在 servlet 容器使此会话失效之前客户端请求之间的时间间隔，以秒为单位。负数时间指示会话永远不会超时。 </li>
</ul>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>我们可以通过<code>HttpServletRequest</code>的方法<code>getSession()</code> 获取对象，下面我们来使用其中的函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//Demo1中的doGet方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</div><div class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">        <span class="comment">//获取对象</span></div><div class="line">		HttpSession session=request.getSession();</div><div class="line">		<span class="comment">//设置属性login的值为auto</span></div><div class="line">		session.setAttribute(<span class="string">"login"</span>, <span class="string">"auto"</span>);                                                                   </div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Demo2中的doGet方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</div><div class="line">        <span class="comment">//获取对象</span></div><div class="line">		HttpSession session=request.getSession();</div><div class="line">        <span class="comment">//获取其中的login的值</span></div><div class="line">        String login=session.getAttribute(<span class="string">"login"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><blockquote>
<p>下面是一个简单的例子实现自动登录,在填入用户名和密码正确之后，并且勾选其中的自动登录选项，那么登录过一次后在一天之内，如果直接登录首页将会直接跳转到用户界面，实现自动登录的功能</p>
<ul>
<li><code>index.jsp</code>文件中实现的是简单的表单登录，并没有加上一些css，js,仅仅是一个例子</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">	<span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></div><div class="line">	<span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//"</div><div class="line">			+ <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" + <span class="attr">request.getServerPort</span>()</div><div class="line">			+ <span class="attr">path</span> + "/";</div><div class="line">%&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"This is my page"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">	&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;</div><div class="line">	--&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"Demo3"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span>&gt;</span>password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span></span></div><div class="line">			<span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;<span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>自动登录：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">value</span>=<span class="string">"auto"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>Demo3.java</code>是用户的首页，实现检测自动登录，没有加一些页面在上面，但是其实是用户的首页</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.io.Reader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">		<span class="comment">// 获取HttpSession对象</span></div><div class="line">		HttpSession session = request.getSession();</div><div class="line">		<span class="comment">// 设置一天的访问时间间隔，如果超过这个时间，那么中断</span></div><div class="line">		session.setMaxInactiveInterval(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</div><div class="line">		<span class="comment">// 获取转发对象，页面跳转</span></div><div class="line">		RequestDispatcher dispatcher = request</div><div class="line">				.getRequestDispatcher(<span class="string">"HTML/user.html"</span>);</div><div class="line">		<span class="comment">// 获取表单的数据</span></div><div class="line">		String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		String login = request.getParameter(<span class="string">"login"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取HttpSession中设置的属性名为login的值，如果为null，表示没有设置</span></div><div class="line">		String value = (String) session.getAttribute(<span class="string">"login"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 如果不为空，表示已经登录过一次了，并且允许自动登录，直接跳转到用户界面即可</span></div><div class="line">		<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// 直接跳转到用户界面</span></div><div class="line">			dispatcher.forward(request, response);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 如果用户名和密码正确</span></div><div class="line">			<span class="keyword">if</span> (<span class="string">"chenjiabing"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(password)) &#123;</div><div class="line">				<span class="comment">// 并且设置了自动登录</span></div><div class="line">				<span class="keyword">if</span> (<span class="string">"auto"</span>.equals(login)) &#123;</div><div class="line">					<span class="comment">// 设置session的值</span></div><div class="line">					session.setAttribute(<span class="string">"login"</span>, <span class="string">"auto"</span>);</div><div class="line">				&#125;</div><div class="line">				response.sendRedirect(<span class="string">"HTML/user.html"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明:</strong> <code>user.html</code>是用户的主页，这里没有给出，可以自己设计</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结三-HttpSession会话管理&quot;&gt;&lt;a href=&quot;#Servlet总结三-HttpSession会话管理&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结三(HttpSession会话管理)&quot;&gt;&lt;/a&gt;Servlet
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结二(文件路径获取）</title>
    <link href="http://chenjiabing666.github.io/2017/09/15/Servlet%E6%80%BB%E7%BB%93%E4%BA%8C(%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E8%8E%B7%E5%8F%96)/"/>
    <id>http://chenjiabing666.github.io/2017/09/15/Servlet总结二(文件路径获取)/</id>
    <published>2017-09-15T08:25:28.000Z</published>
    <updated>2017-09-17T14:03:25.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结二（文件路径）"><a href="#Servlet总结二（文件路径）" class="headerlink" title="Servlet总结二（文件路径）"></a>Servlet总结二（文件路径）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前面我们说过<code>ServletContext</code>表示的是web容器中的上下文，下面我们也是用到<code>ServletContext</code>中的方法读取文件</p>
</blockquote>
<h2 id="读取WebRoot文件下的文件"><a href="#读取WebRoot文件下的文件" class="headerlink" title="读取WebRoot文件下的文件"></a>读取WebRoot文件下的文件</h2><blockquote>
<p>我们知道当我们将项目部署到<code>Tomcat</code>服务器中时，项目中的文件路径其实就是在Tomcat中的文件路径，所有的项目都是存储在webapps下的，我们可以看到webaapps下有两个文件夹<code>(WEB-INF,META-INF)</code>，这两个其实就是项目中<code>webRoot</code>下的两个文件夹。</p>
<ul>
<li><code>public String getRealPath(String path)</code>   为给定虚拟路径返回包含实际路径的String</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//获取ServletContext的对象</span></div><div class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</div><div class="line"><span class="comment">//context.getRealPath("/")获取项目的根目录的绝对路径(webRoot的绝对路径)</span></div><div class="line"><span class="comment">//得到了webRoot的绝对路径，下面只要再接着写其他文件的路径即可</span></div><div class="line">File file = <span class="keyword">new</span> File(context.getRealPath(<span class="string">"/"</span>)</div><div class="line">		+ <span class="string">"\\WEB-INF\\lib\\file.txt"</span>);</div><div class="line"><span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">	System.out.println(<span class="string">"文件存在"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	System.out.println(<span class="string">"文件不存在，现在我们创建一个"</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		file.createNewFile();<span class="comment">// 创建一个新的文件</span></div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>InputStream getResourceAsStream(String path)</code>   根据传入的路径文件，返回一个<code>InputStream</code>对象</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">// 第一个"/"是表示webRoot的根目录，通过这个函数可以不用指定绝对路径就可以构造一个输入字节流</span></div><div class="line">InputStream stream = context</div><div class="line">		.getResourceAsStream(<span class="string">"/WEB-INF/lib/file.txt"</span>);</div><div class="line"><span class="comment">// 通过InputStreamReader将字节流转换为字符流，然后创建缓冲字符流读取文件</span></div><div class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(</div><div class="line">		<span class="keyword">new</span> InputStreamReader(stream));</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	System.out.println(reader.readLine());</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">	System.out.println(<span class="string">"文件没有成功读取"</span>);</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>这个函数中的path传入的第一个<code>&quot;/&quot;</code>就表示根目录，在<code>eclipse</code>项目中表示webRoot的绝对路径，在<code>Tomcat</code>下的webapps表示项目名称的绝对路径，因此在下面的WEB-INF,META-INF文件夹下的文件只需要在后面继续添加即可</p>
</blockquote>
<h2 id="读取src下的class文件"><a href="#读取src下的class文件" class="headerlink" title="读取src下的class文件"></a>读取src下的class文件</h2><blockquote>
<p>前面我们获取的<code>webRoot</code>下的文件路径，但是如果我们想要获取<code>src</code>下的文件，那么我们要如何获取呢。</p>
<p>我们仔细看看<code>Tomcat</code>下的文件，可以发现在每一个WEB-INF下都有一个<code>classes</code>，这个就是相当于Tomcat下的src，因此我们利用上面得到的路径稍加修改就可以轻易的得到其中的文件路径</p>
<p>下面我们读取<code>src</code>文件夹下的<code>file.txt</code>中的内容，代码如下:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">// 获取ServletContext对象</span></div><div class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</div><div class="line"><span class="comment">// 这个是获取项目下的src文件夹下的file.txt文件</span></div><div class="line">File file = <span class="keyword">new</span> File(context.getRealPath(<span class="string">"/"</span>)</div><div class="line">		+ <span class="string">"\\WEB-INF\\classes\\file.txt"</span>);</div><div class="line">BufferedReader reader = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">	System.out.println(<span class="string">"文件存在，现在可以读取"</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 创建缓冲流对象，实现读取文件</span></div><div class="line">		reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 输出第一行内容</span></div><div class="line">			System.out.println(reader.readLine());</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">		System.out.println(<span class="string">"文件不存在"</span>);</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				reader.close(); <span class="comment">// 如果reader不是空，就关闭</span></div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				System.out.println(<span class="string">"文件关闭失败"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	System.out.println(<span class="string">"文件不存在，现在开始创建一个"</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		file.createNewFile();<span class="comment">// 创建一个</span></div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		System.out.println(<span class="string">"没有创建成功"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结二（文件路径）&quot;&gt;&lt;a href=&quot;#Servlet总结二（文件路径）&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结二（文件路径）&quot;&gt;&lt;/a&gt;Servlet总结二（文件路径）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse配置Tomcat</title>
    <link href="http://chenjiabing666.github.io/2017/09/14/Eclipse%E9%85%8D%E7%BD%AETomcat/"/>
    <id>http://chenjiabing666.github.io/2017/09/14/Eclipse配置Tomcat/</id>
    <published>2017-09-14T14:28:10.000Z</published>
    <updated>2017-09-17T14:03:29.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse配置tomcat"><a href="#Eclipse配置tomcat" class="headerlink" title="Eclipse配置tomcat"></a>Eclipse配置tomcat</h1><h2 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h2><h3 id="创建server"><a href="#创建server" class="headerlink" title="创建server"></a>创建server</h3><blockquote>
<ol>
<li>首先下载<code>eclipse for javaEE developer</code> </li>
<li>打开控制台，然后到server后右击空白处-&gt;New-&gt;Server-&gt;Apach-&gt;Tomact 7.0 -&gt;Next-&gt;添加tomcat的路径即可</li>
</ol>
<p>![第一步](<a href="http://ono60m7tl.bkt.clouddn.com/eclipse1.bmp" target="_blank" rel="external">http://ono60m7tl.bkt.clouddn.com/eclipse1.bmp</a></p>
</blockquote>
<h3 id="发布项目"><a href="#发布项目" class="headerlink" title="发布项目"></a>发布项目</h3><blockquote>
<p>在控制台server的空白处右击-&gt;Add and Remove-&gt;选择项目-&gt;Add-&gt;Finish</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/eclipse2.bmp" alt="添加项目"></p>
</blockquote>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><blockquote>
<ul>
<li><a href="http://download.csdn.net/download/qq_34162294/9977574" target="_blank" rel="external">javaee中英文对照文档</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Eclipse配置tomcat&quot;&gt;&lt;a href=&quot;#Eclipse配置tomcat&quot; class=&quot;headerlink&quot; title=&quot;Eclipse配置tomcat&quot;&gt;&lt;/a&gt;Eclipse配置tomcat&lt;/h1&gt;&lt;h2 id=&quot;Eclipse&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结一</title>
    <link href="http://chenjiabing666.github.io/2017/09/14/Servlet%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2017/09/14/Servlet总结一/</id>
    <published>2017-09-14T14:24:50.000Z</published>
    <updated>2017-09-17T14:03:49.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结一"><a href="#Servlet总结一" class="headerlink" title="Servlet总结一"></a>Servlet总结一</h1><h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h2><blockquote>
<p>想要实现一个servlet必须继承这个类，其实一个servlet就是一个java文件，但是这个类必须是继承HttpServlet。</p>
</blockquote>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote>
<p>servlet的生命周期是从创建到毁灭的一个过程，具体的过程如下：</p>
<blockquote>
<ul>
<li>Servlet 通过调用 <code>init ()</code> 方法进行初始化。</li>
<li>Servlet 调用 <code>service()</code> 方法来处理客户端的请求,但是在这一步还是要用到具体的实现的两个方法，分别是doPost(),doGet()</li>
<li>Servlet 通过调用 <code>destroy()</code> 方法终止（结束）。</li>
<li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>init()</code>   初试化方法</p>
</li>
<li><p><code>doGet(HttpServletRequest request,HttpServletResponse response)</code>    处理get请求的方法</p>
</li>
<li><p><code>doPost(HttpServletRequest request,HttpServletResponse response)</code>    处理post请求的方法</p>
</li>
<li><p><code>destroy()</code>      最后销毁</p>
</li>
<li><p><code>Enumeration&lt;E&gt; getInitParameterNames()</code>   该方法从 servlet 的 ServletConfig 对象获取所有的参数名称</p>
</li>
<li><p><code>public String getInitParameter(String name)</code> 该方法从 servlet 的 <code>ServletConfig</code> 对象获取指定参数的值  name是指定的<code>param-name</code>的值，返回的<code>param-value</code>的值，具体的使用如下：</p>
</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;</div><div class="line">    &lt;display-name&gt;ServletConfigDemo&lt;/display-name&gt;</div><div class="line">    &lt;servlet-name&gt;ServletConfigDemo&lt;/servlet-name&gt;</div><div class="line">    &lt;servlet-class&gt;com.ServletConfigDemo&lt;/servlet-class&gt;</div><div class="line"></div><div class="line">    &lt;init-param&gt;     </div><div class="line">    	&lt;param-name&gt;username&lt;/param-name&gt;     //定义的name</div><div class="line">    	&lt;param-value&gt;陈加兵&lt;/param-value&gt;      //定义的value</div><div class="line">    &lt;/init-param&gt; </div><div class="line">    </div><div class="line">    &lt;init-param&gt;         </div><div class="line">    	&lt;param-name&gt;password&lt;/param-name&gt;</div><div class="line">    	&lt;param-value&gt;123456&lt;/param-value&gt;</div><div class="line">    &lt;/init-param&gt;</div><div class="line">    </div><div class="line">  &lt;/servlet&gt;</div><div class="line">  &lt;servlet-mapping&gt;</div><div class="line">    &lt;servlet-name&gt;ServletConfigDemo&lt;/servlet-name&gt;</div><div class="line">    &lt;url-pattern&gt;/ServletConfigDemo&lt;/url-pattern&gt;</div><div class="line">  &lt;/servlet-mapping&gt;</div><div class="line"></div><div class="line"></div><div class="line">    //下面只是一个servlet类中的init()方法，一般否是在init()方法中获取 </div><div class="line">    public void init() throws ServletException &#123;</div><div class="line">		username=this.getInitParameter("username");   //根据指定的名称获取参数的值</div><div class="line">		enumeration=this.getInitParameterNames();    //获取枚举对象</div><div class="line">		while(enumeration.hasMoreElements())&#123;    //通过枚举的方法获取其中的所有的值</div><div class="line">			System.out.println(this.getInitParameter((String) enumeration.nextElement()));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p><code>ServletConfig getServletConfig()</code>   返回一个ServletConfig对象，这个方法在后面讲到ServletConfig类的时候回详细的说到</p>
</li>
<li><p><code>ServletContext getServletContext()</code>   返回一个ServletContext对象，这个和ServletConfig类一样重要，在后面会详细讲解</p>
</li>
</ul>
</blockquote>
<h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><blockquote>
<p>这是servlet容器中用来处理请求的类，并且该对象作为一个参数传给doGet,doPost方法中</p>
</blockquote>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>getParameter(String name)</code> 获取表单中的值，name是input中定义的name值，如果不存在返回null，否则返回的字符串 String[]  </p>
</li>
<li><p><code>getParameterValues(String name)</code> 获取表单中有多个name相同的值，例如多选列表，复选框</p>
</li>
<li><p><code>Enumeration getParameterNames()</code>  返回所有请求中的参数，返回的是一个枚举对象，可以通过对应的方法进行列出所有的参数</p>
</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">   //下面将会详细讲解上面三个方法的使用法，这三个参数是针对表单的，因此需要结合表单讲解，我们将会在index.jsp文件中定义表单</div><div class="line">   //index.jsp文件的内容如下：</div><div class="line">   &lt;form action="ServletDemo" method="post"&gt;       //servletDemo是要处理该请求的servlet的url，使用的是相对路径</div><div class="line">	username: &lt;input type="text" name="username"&gt; &lt;br&gt;Password:</div><div class="line">	&lt;input type="password" name="pw"&gt; &lt;br&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt; &lt;br&gt; &lt;label&gt;hobby:&lt;/label&gt;</div><div class="line">	&lt;input type="checkbox" name="hobby" value="1"&gt;swing &lt;input</div><div class="line">		type="checkbox" name="hobby" value="2"&gt;dancing &lt;input</div><div class="line">		type="checkbox" name="hobby" value="3"&gt;song</div><div class="line"></div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line"></div><div class="line">       //下面是ServletDemo中的部分代码</div><div class="line">        String username = request.getParameter("username");  //获取username的值</div><div class="line">        String pw = request.getParameter("pw");              //获取password的值</div><div class="line">       </div><div class="line">       //获取所有复选框的值</div><div class="line">	 String[] hobbies=request.getParameterValues("hobby");</div><div class="line">	 for(String hobby:hobbies)&#123;</div><div class="line">	 System.out.println(hobby);</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">       </div><div class="line">       //获得所有的元素的name属性的名称，返回的是一个枚举的对象</div><div class="line">	Enumeration enumeration = request.getParameterNames();</div><div class="line">	while (enumeration.hasMoreElements()) &#123;</div><div class="line">		String paramsString = (String) enumeration.nextElement();   //获取其中的每一名称</div><div class="line">		System.out.println(request.getParameter(request.getParameter));  //根据名称获取其中的值</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>Enumeration getHeaderNames()</code>  获取所有请求头中的参数的名称，返回的是一个枚举对象</li>
<li><code>String getHeader(String name)</code>   根据请求头中的名称获取对应名称的请求内容</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取所有请求头的名称，返回的是一个枚举对象	</span></div><div class="line">	Enumeration enumeration=request.getHeaderNames();</div><div class="line">	<span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</div><div class="line">		String name=(String) enumeration.nextElement();</div><div class="line">		String value=request.getHeader(name);   <span class="comment">//根据名称返回对应的值</span></div><div class="line">		System.out.println(name+<span class="string">":"</span>+value);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>String getContextPath()</code>    获取应用程序的环境路径，就是上一级目录</li>
<li><code>String getMethod()</code>    返回请求的方式  Get  Post</li>
<li><code>String getQueryString()</code>   返回请求行中的参数部分</li>
<li><code>StringBuffer getRequestURL()</code>   返回完整的URL</li>
<li><code>String getRequestURI()</code>      返回请求行中的资源名部分</li>
<li><code>getRemoteAddr</code>方法返回发出请求的客户机的IP地址。</li>
<li><code>getRemoteHost</code>方法返回发出请求的客户机的完整主机名。</li>
<li><code>getRemotePort</code>方法返回客户机所使用的网络端口号。</li>
<li><code>getLocalAddr</code>方法返回WEB服务器的IP地址。</li>
<li><code>getLocalName</code>方法返回WEB服务器的主机名。</li>
</ul>
</blockquote>
<h3 id="请求转发与包含"><a href="#请求转发与包含" class="headerlink" title="请求转发与包含"></a>请求转发与包含</h3><blockquote>
<p>请求转发相当于一个重定向，但是这个又和重定向不同的是：请求转发是在web容器中进行的，因此浏览器的地址栏并不会改变，但是重定向是要求浏览器重新请求另一个url，因此可以在地址栏清楚的看到地址的变化</p>
<p>请求转发使用的是<code>HttpServletRequest</code>中的<code>getRequestDispatcher</code>方法，下面将会详细介绍</p>
</blockquote>
<h4 id="getRequestDispatcher"><a href="#getRequestDispatcher" class="headerlink" title="getRequestDispatcher"></a>getRequestDispatcher</h4><blockquote>
<p><code>RequestDispatcher getRequestDispatcher(String path)</code>  返回的是一个<code>RequestDispatcher</code>对象，path是指定转发的url，可以是绝对url或者是相对url</p>
</blockquote>
<h4 id="RequestDispatcher"><a href="#RequestDispatcher" class="headerlink" title="RequestDispatcher"></a>RequestDispatcher</h4><blockquote>
<p>定义接收来自客户端的请求并将它们发送到服务器上的任何资源（比如 servlet、HTML 文件或 JSP 文件）的对象。servlet 容器可创建 RequestDispatcher 对象，该对象被用作包装位于特定路径上的服务器资源或通过特定名称给定的服务器资源的包装器。 </p>
<p><code>void forward(ServletRequest request, ServletResponse response)</code>   执行转发请求,因为继承关系，因此其中的参数也是可以是<code>HttpServletRequest</code>和<code>HttpServletResponse</code>对象 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,           ServletException </span>&#123;</div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//获取表单中的值</span></div><div class="line">	String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">	String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">	<span class="comment">//上面虽然获取了其中的值，但是不可以此时对浏览器进行响应</span></div><div class="line">	RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"Demo2"</span>);</div><div class="line">	dispatcher.forward(request, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p><strong>注意：</strong> 在转发前后不可以对浏览器进行响应，否则会出现错误，其中forward传入的参数是当前的request和response，也就是说在转发之后的文件之中还是可以获取信息的（请求头，表单）</p>
</blockquote>
<p><code>void include(ServletRequest request, ServletResponse response)</code>  包含转发</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">//获取表单中的值</span></div><div class="line">		String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">		</div><div class="line">		Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"age"</span>, <span class="string">"22"</span>);</div><div class="line">		response.addCookie(cookie);</div><div class="line">		PrintWriter pw=response.getWriter();</div><div class="line">		pw.println(<span class="string">"在转发之前先对浏览器进行响应"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//上面可以看出这里对浏览器进行了响应，使用include可以在转发之前或者之后对浏览器进行响应</span></div><div class="line">		RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"Demo2"</span>);</div><div class="line">		dispatcher.include(request, response);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h5 id="forward和include的区别"><a href="#forward和include的区别" class="headerlink" title="forward和include的区别"></a>forward和include的区别</h5><blockquote>
<ul>
<li><code>forward</code>在转发之前和之后是不可以对浏览器进行响应的，但是<code>include</code>可以。使用<code>include</code>时，如果同时进行了响应，那么会同时响应在同一网页中，会出现在同一个页面中</li>
</ul>
</blockquote>
<h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><blockquote>
<ul>
<li>请求转发后地址栏都不会出现改变</li>
<li>请求转发过后会重新回到当前的servlet容器中，因此如果想要在当前的servlet容器中处理一些东西是可以实现的，下面来看一个例子</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,           ServletException </span>&#123;</div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//获取表单中的值</span></div><div class="line">	String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">	String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">	<span class="comment">//上面虽然获取了其中的值，但是不可以此时对浏览器进行响应</span></div><div class="line">	RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"Demo2"</span>);</div><div class="line">	dispatcher.forward(request, response);</div><div class="line">                                                                                                                               </div><div class="line">      System.out.println(username);   <span class="comment">//这个语句当转发请求处理完成之后会返回到这里执行这句话                                                                                                     </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h5><blockquote>
<p>就像写到<code>scrapy</code>爬虫的时候，有时候一个数据会传入到下一个函数中使用，因此需要一个机制携带过去。这里可以使用<code>HttpServletRequest</code>中的 <code>setAttribute</code>方法，详细使用如下：<br> <code>public void setAttribute(String name, Object o)</code>  这里其实相当于传入的是一个键值对，name是key，o是value<br> <code>public void removeAttribute(String name)</code>  根据键值的name移除数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">		HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">	<span class="comment">// 设置编码，这个是通过浏览器访问时能够实现中文显示的功能</span></div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">	<span class="comment">//设置和浏览器相应的编码方式，以便在控制台上输出中文，否则将会乱码显示</span></div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">	String data=<span class="string">"大家好，我是陈加兵"</span>;</div><div class="line">	request.setAttribute(<span class="string">"data"</span>,data);   <span class="comment">//向请求中传入数据,这个是以键值对存在的，前面的是key，后面的参数是value</span></div><div class="line">	<span class="comment">//将请求转发给HttpServletDemo的servlet文件处理</span></div><div class="line">	RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"HttpServletResponseDemo"</span>);</div><div class="line">	<span class="comment">//如果转发成功，注意这里的转发，地址栏的网址并不会改变</span></div><div class="line">	<span class="keyword">if</span>(dispatcher!=<span class="keyword">null</span>)&#123;</div><div class="line">		dispatcher.forward(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">//下面是HttpServletResponseDemo的处理代码</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span>                     ServletException, IOException </span>&#123;</div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);  <span class="comment">//设置响应内容</span></div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);    <span class="comment">//设置接受的编码</span></div><div class="line">	<span class="comment">//接收请求转发传递的data数据</span></div><div class="line">	String data=(String) request.getAttribute(<span class="string">"data"</span>);</div><div class="line">	PrintWriter pWriter=response.getWriter();</div><div class="line">	pWriter.println(data+<span class="string">"&lt;br/&gt;"</span>);</div><div class="line">	<span class="comment">//移除这个键值对 ，下面在访问这个数据就会显示不存在了</span></div><div class="line">	request.removeAttribute(<span class="string">"data"</span>);</div><div class="line">	pWriter.close();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><blockquote>
<p>这个类是用于对浏览器进行响应的</p>
</blockquote>
<h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>PrintWriter getWriter()</code>   返回一个PrintWriter对象，可以将字符串发送到客户端</li>
<li><code>addCookie(Cookie cookie)</code>   将指定的cookie添加到响应中，这个是直接添加到set-cookie中，用于存储一些信息</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">      Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"age"</span>, <span class="string">"22"</span>);</div><div class="line">cookie.setMaxAge(<span class="number">7</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//设置cookie的失效时间(秒为单位）</span></div><div class="line">response.addCookie(cookie);   <span class="comment">//添加cookie</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>sendError(int src)</code>    将指定的错误信息发送到客户端 比如401，302….</li>
<li><code>sendError(int sec,String message)</code>    发送错误信息的同时，还发送提醒的信息message</li>
<li><code>sendRedirect(String url)</code>       网页重定向，url是重定向的网址，但是也可以是相对的url</li>
<li><code>ServletOutputStream getOutputStream()</code> 返回适用于在响应中编写二进制数据的 ServletOutputStream。</li>
</ul>
</blockquote>
<h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><blockquote>
<p>在<code>web.xml</code>中对于每一个Servlet的设置web容器会为其生成一个<code>ServletConfig</code>作为代表对象，你可以从该对象中取得设置在web.xml中的Servlet初始参数</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><p><code>String getInitParameter(String name)</code>   根据属性的名称获取指定的值</p>
</li>
<li><p><code>Enumeration getInitParameterNames()</code>    获取该servlet中设置的所有的属性的名称（并不是设置的初始值）</p>
</li>
<li><p><code>ServletContext getServletContext()</code>     获取ServletContext对象</p>
</li>
</ul>
</blockquote>
<h3 id="设置和取得初始参数"><a href="#设置和取得初始参数" class="headerlink" title="设置和取得初始参数"></a>设置和取得初始参数</h3><blockquote>
<p><code>ServletConfig</code>相当于web.xml中个别Servlet设置代表对象，这意味着可以从ServletConfig中取得Servlet设置信息。ServletConfig定义了<code>getInitParameter()</code>、<code>getInitParameterNames()</code> 方法，可以取得设置的Servlet的初始参数</p>
</blockquote>
<h4 id="设置初始参数"><a href="#设置初始参数" class="headerlink" title="设置初始参数"></a>设置初始参数</h4><blockquote>
<p>直接在web.xml中定义如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is the description of my J2EE component<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>This is the display name of my J2EE component<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.Demo3<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>    //定义标签</div><div class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>   //定义的name </div><div class="line">    	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>    //定义的value</div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    </div><div class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="取得初始参数"><a href="#取得初始参数" class="headerlink" title="取得初始参数"></a>取得初始参数</h4><blockquote>
<p>第一种方法：直接使用带有ServletConfig对象为参数的init直接获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"><span class="comment">//		username=config.getInitParameter("username");   //单独的获取每一个值</span></div><div class="line"><span class="comment">//		password=config.getInitParameter("password");</span></div><div class="line">		</div><div class="line">		<span class="comment">//首先获取所有的初始参数的名称</span></div><div class="line">		Enumeration enumeration=config.getInitParameterNames();</div><div class="line">		<span class="keyword">while</span>(enumeration.hasMoreElements())&#123;</div><div class="line">			String name=(String)enumeration.nextElement();  <span class="comment">//获取每一个值</span></div><div class="line">			<span class="keyword">if</span>(name.equals(<span class="string">"username"</span>))&#123;</div><div class="line">				username=config.getInitParameter(name);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"password"</span>)) &#123;</div><div class="line">				password=config.getInitParameter(name);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第二种：使用<code>HttpServlet</code>的<code>getServletConfig()</code> 方法直接获取ServletConfig对象，然后再获取参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">	</div><div class="line">	ServletConfig config=<span class="keyword">this</span>.getServletConfig();   <span class="comment">//获取ServletConfig对象</span></div><div class="line">	username=config.getInitParameter(<span class="string">"username"</span>);   <span class="comment">//获取参数的值</span></div><div class="line">	password=config.getInitParameter(<span class="string">"password"</span>);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><blockquote>
<ul>
<li><p><code>ServletContext</code>是整个web应用程序运行之后的代表对象，这是一个全局的对象，一个web项目中的所有Servlet文件都是可以共享这个数据的，因此这个有着很大的作用。</p>
</li>
<li><p>有人说这个不是和<code>ServletConfig</code>一样的用法吗，其实不然，<code>ServletConfig</code>并不是这个web程序的全局变量，它所设置的值只是对当前的servlet共享，并不能对web项目中的所有的servlet文件共享</p>
</li>
</ul>
</blockquote>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><p><code>String getInitParameter(String name)</code>     获取指定名称的属性值</p>
</li>
<li><p><code>Enumeration getInitParameterNames()</code>      获取所有已经设置的属性的名称</p>
</li>
<li><p><code>void setAttribute(String name, Object object)</code>  将对象绑定到此 servlet 上下文中的给定属性名称。如果已将指定名称用于某个属性，则此方法将使用新属性替换具有该名称的属性。 </p>
</li>
<li><p><code>Object getAttribute(String name)</code>   根据指定的属性名称获取绑定的值(需要进行强转)</p>
</li>
<li><p><code>void removeAttribute(String name)</code>   解除绑定的数据</p>
</li>
</ul>
</blockquote>
<h3 id="设置初始参数-1"><a href="#设置初始参数-1" class="headerlink" title="设置初始参数"></a>设置初始参数</h3><blockquote>
<p>这个和<code>ServletConfig</code>是一样的，都是在web.xml中设置的，但是这个是设置在<code>&lt;servlet&gt;&lt;/servlet&gt;</code>的外面的，并不是针对单独的一个<code>servlet</code>来设置的，因此是全局共享的</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>web2<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!--全局变量，对工程中的所有的Servlet都是共享的--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>context_name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>context_value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!--在每一对context-param中只能定义一个变量的值--&gt;</span>	</div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  </div><div class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.Demo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.Demo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="获取设置的参数"><a href="#获取设置的参数" class="headerlink" title="获取设置的参数"></a>获取设置的参数</h3><blockquote>
<ul>
<li>第一种方法：使用无参初始化的方法<code>init()</code> ，结合父类<code>HttpServlet</code>的<code>getServletContext()</code>的方法获取<code>ServletContext</code>对象</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用无参构造函数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">	ServletContext context=<span class="keyword">this</span>.getServletContext();</div><div class="line">	<span class="comment">//根据属性的名称获取指定的值</span></div><div class="line">	String value=context.getInitParameter(<span class="string">"username"</span>);  </div><div class="line">	System.out.println(value);</div><div class="line">	</div><div class="line">	<span class="comment">//获取所有的属性的名称的枚举对象</span></div><div class="line">	Enumeration enumeration=context.getInitParameterNames();</div><div class="line">	<span class="keyword">while</span>(enumeration.hasMoreElements())&#123;</div><div class="line">		<span class="comment">//获取属性的每一个名称</span></div><div class="line">		String name=(String) enumeration.nextElement();</div><div class="line">		<span class="comment">//根据名称获取所有的值</span></div><div class="line">		System.out.println(name+<span class="string">" = "</span>+context.getInitParameter(name));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>第二种方法：使用有参初始化方法<code>init(ServletConfig config)</code>，结合<code>ServletConfig</code>的<code>getServletContext()</code>方法获取对象</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用有参构造方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(ServletConfig config)</span></span>&#123;</div><div class="line">	<span class="comment">//调用ServletConfig中的方法获取对象</span></div><div class="line">	ServletContext context=config.getServletContext();</div><div class="line">	<span class="comment">//获取属性的值</span></div><div class="line">	String value=context.getInitParameter(<span class="string">"username"</span>);</div><div class="line">	System.out.println(value);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h3><blockquote>
<p>有人可能会说如果想用共享数据在web.xml设置有点繁琐，这里可以直接绑定属性，然后就可以在整个web项目中共享这个绑定的属性了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">		<span class="comment">//获取对象（这是父类HttpServlet中的一个方法）</span></div><div class="line">		ServletContext context=<span class="keyword">this</span>.getServletContext();</div><div class="line">		</div><div class="line">		<span class="comment">//count表示访问页面的次数，在这里设置了属性可以全局共享该数据，意思就是在一个项目中的所有的servlet都是可以访问到该数据的</span></div><div class="line">		Integer count=(Integer) context.getAttribute(<span class="string">"count"</span>);  <span class="comment">//获取设置的属性值</span></div><div class="line">		<span class="comment">//如果为空，表示该属性还没有被设置，因此这是第一次访问该页面</span></div><div class="line">		<span class="keyword">if</span>(count==<span class="keyword">null</span>)&#123;    </div><div class="line">			count=<span class="number">1</span>;</div><div class="line">			context.setAttribute(<span class="string">"count"</span>, <span class="number">1</span>);    <span class="comment">//初始值为1，表示访问网页1次</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//否则表示已经不是第一次访问网页了，因此需要++1</span></div><div class="line">			context.setAttribute(<span class="string">"count"</span>, ++count);   </div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		PrintWriter pWriter=response.getWriter();</div><div class="line">		pWriter.println(<span class="string">"该页面已经被访问了"</span>+count+<span class="string">"次了......"</span>);</div><div class="line">	</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="http://download.csdn.net/download/qq_34162294/9977574" target="_blank" rel="external">javaEE中英文对照文档</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结一&quot;&gt;&lt;a href=&quot;#Servlet总结一&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结一&quot;&gt;&lt;/a&gt;Servlet总结一&lt;/h1&gt;&lt;h2 id=&quot;HttpServlet&quot;&gt;&lt;a href=&quot;#HttpServle
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>多线程的使用</title>
    <link href="http://chenjiabing666.github.io/2017/09/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/03/多线程的使用/</id>
    <published>2017-09-03T06:30:25.000Z</published>
    <updated>2017-09-03T06:32:15.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>我看了不止一个人说多线程是鸡肋，但是就依照我个人觉得多线程在一些小型的爬虫中还是可以显著的提高速度的，相比多进程来说应该还是挺简单的</p>
</blockquote>
<h2 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h2><h3 id="继承threading-Thread"><a href="#继承threading-Thread" class="headerlink" title="继承threading.Thread"></a>继承threading.Thread</h3><blockquote>
<p>继承threading.Thread模块是一个很好的一个选择，就像java中也是可以继承类和实现接口一样，这都是很好的选择，下面我们来看看具体如何使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,threadID,name,counter)</span>:</span></div><div class="line">        threading.Thread.__init__(self)    <span class="comment">#首先需要先保留原来threading.Thread中的初始化函数</span></div><div class="line">        self.threadID=threadID      <span class="comment">#重命名线程的ID</span></div><div class="line">        self.name=name              <span class="comment">#线程的名字</span></div><div class="line">        self.counter=counter        <span class="comment">#线程的数量</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        lock.acquire()      <span class="comment">#获取线程锁Lock</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            <span class="keyword">print</span> <span class="string">"线程"</span>+self.name+<span class="string">"开始运行"</span></div><div class="line">        lock.release()      <span class="comment">#释放线程锁Lock</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    lock=threading.Lock()     </div><div class="line">    t1=Mythread(<span class="number">0</span>,<span class="string">"thread-1"</span>,<span class="number">3</span>)</div><div class="line">    t2=Mythread(<span class="number">1</span>,<span class="string">"thread-2"</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line"></div><div class="line">    threads=[]</div><div class="line">    threads.append(t1)</div><div class="line">    threads.append(t2)</div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">        t.join()                <span class="comment">#阻塞主线程，直至线程运行完毕才运行main线程的语句</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"线程运行结束"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，这种继承的方式有一个缺点，这个和java中继承来实现多线程是一样的，就是一个对象只能是对应一个线程，并不能一个对象被多个线程共享，下面我们将会介绍另外的一种方式</p>
</blockquote>
<h3 id="直接调用threading-Thread"><a href="#直接调用threading-Thread" class="headerlink" title="直接调用threading.Thread"></a>直接调用threading.Thread</h3><blockquote>
<p>上面我们说过继承的方式，但是我个人觉得对于一些比较小的爬虫还是有些繁琐的，因为总是需要重写run方法，现在我们来看看如何简化实现多线程</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">这是一个简单的例子，其实也不是一个好的例子，但是为了演示方便就选用了，可以看出这里是直接调用</div><div class="line">了func函数，然后变成多个线程同时并行，其中target是要调用的方法(没有括号)，args是方法调用需要传入的参数</div><div class="line">其实这个还是和上面的继承比较相似的</div><div class="line">"""</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name,age)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="keyword">print</span> name+<span class="string">"的年龄为："</span>+str(age)       </div><div class="line">t=threading.Thread(target=func,args=[<span class="string">"陈加兵"</span>,<span class="number">22</span>])</div><div class="line">t.start()</div></pre></td></tr></table></figure>
<h3 id="Thread对象的相关方法"><a href="#Thread对象的相关方法" class="headerlink" title="Thread对象的相关方法"></a>Thread对象的相关方法</h3><blockquote>
<ul>
<li>start()   启动线程</li>
<li>join([timeout])  设置阻塞线程，timeout是可选的参数，表示阻塞的时间，如果没有就是当此线程运行结束才开始运行下一个线程</li>
<li>run()     线程活动的方法</li>
<li>getName()   获取线程名称</li>
<li>setName()   设置线程的名称</li>
<li>isAlive()    判断线程是否还活着</li>
<li>isDaemon()    判断是否是守护线程</li>
<li>setDaemon()   设置为守护线程，守护线程就是当主线程运行完后，这个线程也会随着主线程的结束而结束</li>
</ul>
</blockquote>
<h2 id="共享队列"><a href="#共享队列" class="headerlink" title="共享队列"></a>共享队列</h2><blockquote>
<p>从源代码可以看出队列是实现了锁原语的，因此可以使用队列实现线程的同步，这里的主要原理就不细说了，简单的说就是get和put等方法都实现了锁原语，就是当一个操作正在执行的时候其他的操作会阻塞等待</p>
<p>下面我自己写了一个使用两个线程实现同时入队和出队的程序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,threadID,name,counter,q,flag)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        threadID是线程的ID</div><div class="line">        name是线程的名称</div><div class="line">        q是先进先出队列</div><div class="line">        flag是用来调用get和put的标志</div><div class="line">        """</div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.name=name</div><div class="line">        self.threadID=threadID</div><div class="line">        self.counter=counter</div><div class="line">        self.q=q</div><div class="line">        self.flag=flag   </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        当flag为1时就调用put方法，否则调用get</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> self.flag==<span class="number">1</span>:</div><div class="line">            self.put()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.get()</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            self.q.put(random.randint(<span class="number">0</span>,<span class="number">10</span>))</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.q.empty():</div><div class="line">                <span class="keyword">print</span> self.q.get()</div><div class="line">            </div><div class="line">        </div><div class="line">            </div><div class="line"></div><div class="line">            </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    threadLock=threading.Lock()</div><div class="line">    q=Queue()</div><div class="line">    </div><div class="line">    t1=myThread(<span class="number">1</span>,<span class="string">"Thread-1"</span>,<span class="number">1</span>,q,<span class="number">1</span>)</div><div class="line">    t2=myThread(<span class="number">2</span>,<span class="string">"Thread-2"</span>,<span class="number">2</span>,q,<span class="number">2</span>)</div><div class="line">    </div><div class="line">    threads=[]</div><div class="line">    </div><div class="line">    threads.append(t1)</div><div class="line">    threads.append(t2)</div><div class="line">    </div><div class="line">    t1.start()</div><div class="line">    t2.start()</div></pre></td></tr></table></figure>
<h3 id="Queue相关的一些方法"><a href="#Queue相关的一些方法" class="headerlink" title="Queue相关的一些方法"></a>Queue相关的一些方法</h3><blockquote>
<ol>
<li>Queue.qsize() 返回队列的大小</li>
<li>Queue.empty() 如果队列为空，返回True,反之False</li>
<li>Queue.full() 如果队列满了，返回True,反之False</li>
<li>Queue.full 与 maxsize 大小对应</li>
<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>
<li>Queue.get_nowait() 相当Queue.get(False)</li>
<li>Queue.put(item) 写入队列，timeout等待时间</li>
<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>
<li>Queue.task_done() 在完成一项工作之后， Queue.task_done()函数向任务已经完成的队列发送一个信号</li>
<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;b
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="python爬虫" scheme="http://chenjiabing666.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>os模块中常用的的方法</title>
    <link href="http://chenjiabing666.github.io/2017/09/02/os%E6%A8%A1%E5%9D%97%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2017/09/02/os模块中常用的的方法/</id>
    <published>2017-09-01T23:37:27.000Z</published>
    <updated>2017-09-01T23:42:58.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="os模块中常用的方法"><a href="#os模块中常用的方法" class="headerlink" title="os模块中常用的方法"></a>os模块中常用的方法</h1><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><blockquote>
<p><code>os.getcwd()</code>   获取当前的路径<br><code>os.listdir(path)</code>  获取path路径下的全部文件和文件夹，就是显示全部的文件的作用<br><code>os.mkdir(path)</code>   创建一个文件夹<br><code>os.rmdir(path)</code>   删除一个文件夹<br><code>os.remove(path)</code>   删除一个文件<br><code>os.rename(path1,path2)</code>   将文件或者文件夹重命名，path1是原来件路径，path2是改变后的文件的路径名称<br><code>os.makedirs(path)</code>   循环创建文件夹，给出一个路径，连续的创建这个路径的全部文件夹，并不是创建文件<br><code>os.removedirs(path)</code>   循环删除文件夹  会删除整个路径的文件夹<br><code>os.path.abspath(path)</code>    返回此文件的绝对路径<br><code>os.path.exists(path)</code>    判断文件或者文件夹是否存在<br><code>os.path.basename(path)</code>   返回绝对路径中的文件名<br><code>os.path.normpath(path)</code>     标准化文件路径，Windows下将双斜杠变成单斜杠<br><code>os.path.commonprefix(list)</code>   返回list中的相同的路径，只是多个路径相同的部分<br><code>os.path.dirname(path)</code>        返回文件所在上面一层的目录的名称，注意这里是所在紧接着一层的文件夹的名称<br><code>os.path.split(path)</code>   将路径分割成两个部分，返回的是一个元祖，第一个元素是前面的路径，第二个元素是文件的名称<br><code>os.path.getatime(path)</code>   返回文件的最后访问时间<br><code>os.path.getmtime(path)</code>   返回文件的最后修改时间<br><code>os.path.getctime(path)</code>   在unix的系统上返回的是文件最后修改的时间，在window的系统上返回的是文件的创建时间<br><code>os.path.getsize(path)</code>    返回文件的大小，以字节为单位<br><code>os.path.isfile(path)</code>    判断文件是否是文件<br><code>os.path.isdir(path)</code>    判断文件是否是文件夹<br><code>os.path.join(path1,path2)</code>   将两个文件的路径拼接在一起</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote>
<p>其中的每个方法的例子<a href="https://github.com/chenjiabing666/Python-notebook/blob/master/os.ipynb" target="_blank" rel="external">请点击这里</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;os模块中常用的方法&quot;&gt;&lt;a href=&quot;#os模块中常用的方法&quot; class=&quot;headerlink&quot; title=&quot;os模块中常用的方法&quot;&gt;&lt;/a&gt;os模块中常用的方法&lt;/h1&gt;&lt;h2 id=&quot;常用的方法&quot;&gt;&lt;a href=&quot;#常用的方法&quot; class=&quot;he
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="python爬虫" scheme="http://chenjiabing666.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python操作MongoDB</title>
    <link href="http://chenjiabing666.github.io/2017/07/09/python%E6%93%8D%E4%BD%9CMongoDB/"/>
    <id>http://chenjiabing666.github.io/2017/07/09/python操作MongoDB/</id>
    <published>2017-07-09T04:40:33.000Z</published>
    <updated>2017-07-09T04:44:14.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>下面推荐本人写的MongoDB的基本操作博文，介绍的还是比较详细的，喜欢的朋友可以去看看</p>
<blockquote>
<ul>
<li><font color="#8BB800" size="3px" face="楷体"><a href="https://chenjiabing666.github.io/2017/04/28/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E5%AE%89%E8%A3%85/">MongoDB干货篇之安装</a></font></li>
<li><font color="#8BB800" size="3px" face="楷体"><a href="https://chenjiabing666.github.io/2017/04/30/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/">MongoDB干货篇之查询数据</a></font></li>
<li><font color="#8BB800" size="3px" face="楷体"><a href="https://chenjiabing666.github.io/2017/05/01/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/">MongoDB干货篇之更新数据</a></font></li>
</ul>
</blockquote>
</blockquote>
<h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><blockquote>
<p><font color="#8BB800" size="3px" face="楷体">下面是自己写的一个简单的操作，分别对应了增删改查，虽然不太全面，但是只是简单的示范了一下，当然更多的功能还是需要自己去完善的，因为代码中都有注释，这里就不再详细的说了</font></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDB</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,db,collections)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        初始化数据库</div><div class="line">        :param db:数据库名称 </div><div class="line">        :param collections: 数据库的集合的名称</div><div class="line">        """</div><div class="line">        self.client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)    <span class="comment">#获取的连接</span></div><div class="line">        self.db = self.client[db]        <span class="comment">#创建数据库db</span></div><div class="line">        self.post = self.db[collections]    <span class="comment">#创建或者选择要操作的集合</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, data,upsert)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        更新数据库中的数据，如果upsert为Ture，那么当没有找到指定的数据时就直接插入，反之不执行插入</div><div class="line">        :param data: 要插入的数据</div><div class="line">        :param upsert: 判断是插入还是不插入</div><div class="line">        :return: </div><div class="line">        """</div><div class="line">        self.post.update(&#123;<span class="string">"ip"</span>: data&#125;, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'ip'</span>: data&#125;&#125; , upsert)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self,select)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        根据传入的参数查找指定的值，注意这里的select是字典</div><div class="line">        :param select: 指定的查找条件，这里的是字典类型的，比如&#123;"name":"chenjiabing","age":22&#125;</div><div class="line">        :return: 返回的是查询的结果，同样是字典类型的</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self.post.find(select)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,data)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        向数据库中插入指定的数据</div><div class="line">        :param data: 要插入的数据，这里的是字典的类型比如：&#123;"name":"chenjiabing","age":22&#125;</div><div class="line">        :return: 插入成功返回True,反之返回false</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.post.insert(data)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self,select)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        删除指定条件的记录</div><div class="line">        :param select: 指定的条件，这里是字典类型的，比如&#123;"age":22&#125; 表示删除age=22的所有数据</div><div class="line">        :return: 如果删除成功返回True，else返回False</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.post.remove(select)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<blockquote>
<p><font color="#8BB800" size="3px" face="楷体">下面是利用上面的Mongo.py文件获取西刺网站的代理并且存入数据库</font></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> Mongo <span class="keyword">import</span> MongoDB   <span class="comment">#导入文件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XICI</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        self.header:请求头</div><div class="line">        self.q:存储ip的队列</div><div class="line">        slef.urls:页面的url</div><div class="line">        :param page:传入的参数，表示获取多少页的ip</div><div class="line">        """</div><div class="line">        self.header = &#123;<span class="string">"User-Agent"</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>&#125;</div><div class="line">        self.q = Queue()</div><div class="line">        self.urls = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, page + <span class="number">1</span>):</div><div class="line">            self.urls.append(<span class="string">"http://www.xicidaili.com/nn/"</span> + str(i))</div><div class="line">        self.mongo = MongoDB(<span class="string">'python'</span>,<span class="string">'ip'</span>)  <span class="comment"># 创建MogoDB对象</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ips</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        根据一页的请求爬取一个页面的ip</div><div class="line">        :param url:传入的参数，表示每一页的链接</div><div class="line">        :return: None</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            res = requests.get(url, headers=self.header)</div><div class="line">            <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</div><div class="line">                soup = BeautifulSoup(res.text, <span class="string">'lxml'</span>)</div><div class="line">                ips = soup.find_all(<span class="string">'tr'</span>)</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ips)):</div><div class="line">                    ip = ips[i]</div><div class="line">                    tds = ip.find_all(<span class="string">"td"</span>)</div><div class="line">                    ip_temp = <span class="string">"http://"</span> + tds[<span class="number">1</span>].contents[<span class="number">0</span>] + <span class="string">":"</span> + tds[<span class="number">2</span>].contents[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">print</span> ip_temp</div><div class="line">                    self.q.put(ip_temp)  <span class="comment"># ip进入队列</span></div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"-------------------------------------------请求出现异常------------------------------------------------"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        验证出过来的ip，如果成功就直接存入数据库</div><div class="line">        :param url: 验证ip地址的url</div><div class="line">        :return: 无返回值</div><div class="line">        """</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.q.empty():</div><div class="line">            ip = self.q.get()</div><div class="line">            proxy = &#123;<span class="string">"http"</span>: ip&#125;</div><div class="line">            <span class="keyword">print</span> proxy</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                res = requests.get(url, headers=self.header, proxies=proxy, timeout=<span class="number">5</span>)</div><div class="line">                <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</div><div class="line">                    self.mongo.update(ip,<span class="keyword">True</span>)  <span class="comment"># 如果成功验证直接进入数据库</span></div><div class="line">                    <span class="keyword">print</span> <span class="string">"**************************成功存入数据库********************************************"</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">print</span> <span class="string">"这个ip地址不能用"</span></div><div class="line"></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">"--------------------------请求失败---------------------------------------------"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.urls:</div><div class="line">            self.get_ips(url)</div><div class="line">        threads = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">            t=threading.Thread(target=self.insert,args=[<span class="string">"http://blog.csdn.net/qq_34162294/article/details/72353389"</span>])</div><div class="line">            threads.append(t)</div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">            t.start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p = XICI(<span class="number">3</span>)</div><div class="line">    p.main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python操作MongoDB&quot;&gt;&lt;a href=&quot;#python操作MongoDB&quot; class=&quot;headerlink&quot; title=&quot;python操作MongoDB&quot;&gt;&lt;/a&gt;python操作MongoDB&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="MongoDB" scheme="http://chenjiabing666.github.io/tags/MongoDB/"/>
    
  </entry>
  
</feed>
