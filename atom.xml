<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2017-06-22T07:54:18.486Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lock</title>
    <link href="http://chenjiabing666.github.io/2017/06/22/Lock/"/>
    <id>http://chenjiabing666.github.io/2017/06/22/Lock/</id>
    <published>2017-06-22T07:53:32.000Z</published>
    <updated>2017-06-22T07:54:18.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1><blockquote>
<p>在上一篇文章中我们讲到了如何使用关键字synchronized来实现同步访问。本文我们继续来探讨这个问题，从Java 5之后，在java.util.concurrent.locks包下提供了另外一种方式来实现同步访问，那就是Lock。</p>
<p>也许有朋友会问，既然都可以通过synchronized来实现同步访问了，那么为什么还需要提供Lock？这个问题将在下面进行阐述。本文先从synchronized的缺陷讲起，然后再讲述java.util.concurrent.locks包下常用的有哪些类和接口，最后讨论以下一些关于锁的概念方面的东西</p>
</blockquote>
<h2 id="synchronized缺陷"><a href="#synchronized缺陷" class="headerlink" title="synchronized缺陷"></a>synchronized缺陷</h2><blockquote>
<p>前面我们说过synchronized的线程释放锁的情况有两种:</p>
<blockquote>
<ol>
<li>代码块或者同步方法执行完毕</li>
<li>代码块或者同步方法出现异常有jvm自动释放锁</li>
</ol>
</blockquote>
<p>从上面的synchronized释放锁可以看出，只有synchronized代码块执行完毕或者异常才会释放，如果代码块中的程序因为IO原因阻塞了，那么线程将永远不会释放锁，但是此时另外的线程还要执行其他的程序，极大的影响了程序的执行效率，现在我们需要一种机制能够让线程不会一直无限的等待下去，能够响应中断，这个通过lock就可以办到</p>
<p>另外如果有一个程序，包含多个读线程和一个写线程，我们可以知道synchronized只能一个一个线程的执行，但是我们需要多个读线程同时进行读，那么使用synchronized肯定是不行的，但是我们使用lock同样可以办到</p>
</blockquote>
<h2 id="Lock-1"><a href="#Lock-1" class="headerlink" title="Lock"></a>Lock</h2><blockquote>
<p>查看API可知，Lock是一个接口，因此是不可以直接创建对象的，但是我们可以利用其实现的类来创建对象，这个先不着急，我们先看看Lock类到底实现了什么方法,具体的实现我们将会在介绍其实现的类的时候再详细的讲解</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<ul>
<li><code>lock()</code>  获取锁，如果没有获得就会一直等待</li>
<li><code>unlock()</code>  释放锁</li>
<li><code>tryLock()</code>  尝试获得锁，如果成功获得锁就执行，如果没有成功获得锁，那么就不会等待了</li>
<li><code>lockInterruptibly()</code>   如果当前线程未被中断，则获取锁。</li>
</ul>
</blockquote>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><blockquote>
<p>ReentrantLock是可重入锁，是实现Lock接口的一个类，可重入是一种线程的分配机制，可重入的意思就是总是分配给最近获得锁的线程，这是一种不公平的分配机制，将会出现饥饿现象，当然为了解决这种现象，ReentrantLock的构造方法还提供了一个fair参数，如果fair为true表示使用公平分配机制，将会有等待时间最长的线程获得锁</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>ReentrantLock()</code>  创建一个对象，默认使用的时可重入的机制</li>
<li><code>ReentrantLock(boolean fair)</code>  如果fair为true那么使用的是公平分配机制</li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>lock()</code> 获取锁，如果没有获取到将会一直阻塞</li>
</ul>
<p>下面使用一段程序演示以下lock方法的使用，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantLock rLock = <span class="keyword">null</span>;  <span class="comment">//注意这里的锁一定要是全局变量，否则每一个线程都创建一把锁，那么将会毫无意义</span></div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 创建默认的可重入锁</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock.lock(); <span class="comment">// 获取锁</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">"正在输出"</span></div><div class="line">						+ i);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">this</span>.rLock.unlock(); <span class="comment">// 释放锁，注意这步是一定需要的</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.display(); <span class="comment">// 调用display方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 下面创建两个线程,并且直接启动，</span></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行上面的代码得到下图的结果:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/result.bmp" alt="结果"></p>
<p>从上面的结果看出，线程是一个一个输出的，并且只有等待一个线程输出完毕才能执行下一个线程，这里的仅仅是针对lock和unlock之间的代码，之外的代码并不是受到控制</p>
<p><strong>注意：</strong> 这里的创建的可重入锁的对象必须对于每一个线程来说是全局的变量，是可以共享的一个对象，如果你在display方法中创建这个对象，那么是毫无意义的，因为每一个线程用的根本不是同一把锁</p>
<ul>
<li><code>boolean tryLock()</code>  首先尝试获取锁，如果获取锁了就执行，否则就不会一直等待</li>
</ul>
<p>下面使用一段代码尝试以下这个方法，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantLock rLock = <span class="keyword">null</span>; <span class="comment">// 注意这里的锁一定要是全局变量，否则每一个线程都创建一把锁，那么将会毫无意义</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 创建默认的可重入锁</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.rLock.tryLock()) <span class="comment">// 如果获取了锁</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"正在输出"</span> + i);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">this</span>.rLock.unlock(); <span class="comment">// 释放锁，注意这步是一定需要的</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()</div><div class="line">					+ <span class="string">"获取锁失败，我将不会一直等待........"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.display(); <span class="comment">// 调用display方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 下面创建两个线程,并且直接启动，</span></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行后的结果如下图:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/re.bmp" alt="结果"></p>
<p>从上面的结果我们知道线程0获取了锁开始执行，但是线程1并没有获取锁，但是使用的是tryLock并不是lock,因此不会一直等待下去，所以直接程序向下运行，直接跳过上锁的代码段，因此就输出了上面的那句话后直接结</p>
</blockquote>
<h2 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h2><blockquote>
<p>从API中可以知道，这个也是一个接口，用于实现读写线程，他有两个方法：Lock readLock(),Lock writeLock() 分别用于获得读锁和写锁，指定特定的锁可以实现特定的功能，比如读锁可以在写线程在执行的情况下可以实现多个读线程进行操作，下面我们来介绍它的具体的实现的类ReentrantReadWriteLock </p>
</blockquote>
<h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><blockquote>
<p>这个类也是一个可重入分配的类，当然前面已经说过了什么是可重入，现在我们来说说说这个类的详细的用法</p>
</blockquote>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>ReentrantReadWriteLock()</code> 使用默认（非公平）的排序属性创建一个新的 ReentrantReadWriteLock。</li>
<li><code>ReentrantReadWriteLock(boolean fair)</code>  使用给定的公平策略创建一个新的ReentrantReadWriteLock。</li>
</ul>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>ReentrantReadWriteLock.ReadLock readLock()</code>   用于返回读取操作的锁</li>
</ul>
<p>前面已经说过读取操作的锁是用来实现多个线程共同执行的，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantReadWriteLock rwlock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> Lock rLock = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rwlock = <span class="keyword">new</span> ReentrantReadWriteLock(); <span class="comment">// 创建对象，使用的是非公平的</span></div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">this</span>.rwlock.readLock(); <span class="comment">// 获取读取锁对象</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock.lock(); <span class="comment">// 获取读取锁</span></div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">"正在输出"</span></div><div class="line">						+ i);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">this</span>.rLock.unlock(); <span class="comment">// 释放锁，注意这步是一定需要的</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.display(); <span class="comment">// 调用display方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 下面创建两个线程,并且直接启动，</span></div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">new</span> Thread(thread).start();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行上面的程序结果如下:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/result1.bmp" alt="结果"></p>
<p>从上面的结果可以知道，其实使用读取操作是多个线程同时进行读取的操作，因此一定要小心谨慎的使用，根据自己的需求，一般不能在里面进行修改了，因为出现结果不准确的结果，这个就不多说了，相信大家都明白，总之要小心使用</p>
<ul>
<li><code>ReentrantReadWriteLock.WriteLock writeLock()</code> 返回用于写入操作的锁 </li>
</ul>
<p>写入操作的锁和读取操作的锁不一样了，因为一次只能允许一个线程执行写入操作。</p>
<p>并且如果一个线程已经占用了读锁，另外一个线程申请写锁将会一直等待线程释放读锁。</p>
<p>如果一个线程已经占用了写锁，另外一个线程申请读锁，那么这个线程将会一直等待线程释放写锁才能执行。</p>
<p>总之意思就是写线程和读线程不能同时执行，但是多个读线程可以同时执行</p>
<p>下面将使用一个程序详细的体会以下读写锁的综合使用，代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantReadWriteLock rwlock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> Lock rLock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> Lock wLock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rwlock = <span class="keyword">new</span> ReentrantReadWriteLock(); <span class="comment">// 创建对象，使用的是非公平的</span></div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">this</span>.rwlock.readLock(); <span class="comment">// 获取读取锁对象</span></div><div class="line">		arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 实例化</span></div><div class="line">		<span class="keyword">this</span>.wLock = <span class="keyword">this</span>.rwlock.writeLock(); <span class="comment">// 获取写入锁对象</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line"></div><div class="line">	<span class="comment">// //向arraylist中写入数据</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.wLock.lock(); <span class="comment">// 获取写入锁</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(Thread.currentThread().getName()</div><div class="line">						+ <span class="string">"正在执行写入操作，写入"</span> + i);</div><div class="line">				<span class="keyword">this</span>.arrayList.add(i);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">this</span>.wLock.unlock();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 从arraylist中读取数据，这里只是随机读取使用的是get，并没有做什么修改，因为这仅仅是读取操作，如果进行了修改必须实现同步</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.rLock.lock(); <span class="comment">// 获取读取操作的锁</span></div><div class="line">		Random random = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!arrayList.isEmpty()) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">					<span class="keyword">int</span> index = random.nextInt(<span class="keyword">this</span>.arrayList.size() - <span class="number">1</span>);</div><div class="line">					<span class="keyword">int</span> data = <span class="keyword">this</span>.arrayList.get(index);</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"正在读取数据     "</span> + data);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">this</span>.rLock.unlock();</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"ArrayList为空"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		ArrayList&lt;Thread&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 创建8个读线程，2个写线程</div><div class="line">		 */</div><div class="line">	</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">			arrayList.add(<span class="keyword">new</span> Thread() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					thread.put();</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</div><div class="line">		&#123;</div><div class="line">			arrayList.add(<span class="keyword">new</span> Thread()&#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					thread.get();</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		</div><div class="line">		</div><div class="line">		</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Thread t : arrayList) &#123;</div><div class="line">			t.start();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果如下图:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/thread.bmp" alt="结果"></p>
<p>从上面可以看出写入线程都是一个一个执行的，读取线程是一起执行的</p>
<p><strong>注意：</strong> 所有的锁对象对于线程来说必须是全局变量，否则毫无意义。读线程只能进行不影响线程安全性的操作，比如不能进行对数据的修改插入，如果想要进行修改的话必须还要使用锁对必要的代码实现同步操作</p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3923167.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3923167.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lock&quot;&gt;&lt;a href=&quot;#Lock&quot; class=&quot;headerlink&quot; title=&quot;Lock&quot;&gt;&lt;/a&gt;Lock&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在上一篇文章中我们讲到了如何使用关键字synchronized来实现同步访问。本文我们继续来探讨这
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java并发编程" scheme="http://chenjiabing666.github.io/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>synchronized</title>
    <link href="http://chenjiabing666.github.io/2017/06/20/synchronized/"/>
    <id>http://chenjiabing666.github.io/2017/06/20/synchronized/</id>
    <published>2017-06-20T04:18:29.000Z</published>
    <updated>2017-06-20T04:22:54.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>相信大家都听说过线程安全问题，在学习操作系统的时候有一个知识点是临界资源，简单的说就是一次只能让一个进程操作的资源，但是我们在使用多线程的时候是并发操作的，并不能控制同时只对一个资源的访问和修改，想要控制那么有几种操作，今天我们就来讲讲第一种方法：线程同步块或者线程同步方法(synchronized)</p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote>
<ul>
<li>下面举一个例子说明<code>synchronized</code>关键字的使用</li>
</ul>
</blockquote>
<h3 id="线程同步方法"><a href="#线程同步方法" class="headerlink" title="线程同步方法"></a>线程同步方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Sychor sychor = <span class="keyword">new</span> Sychor();</div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>其中输出结果为下图</p>
</blockquote>
<p><img src="http://ono60m7tl.bkt.clouddn.com/t1.bmp" alt="运行结果"></p>
<blockquote>
<p>从上面的结果可以看出这里的两个线程是同时执行<code>insert()</code>方法的，下面我们在原有的代码上添加<code>synchronized</code>关键字看看效果如何，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Sychor sychor = <span class="keyword">new</span> Sychor();</div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面程序的运行结果我就不列出来，自己可以试试，总之就是加上了<code>synchronized</code>关键字使得线程是一个一个的执行的，只有先执行完一个线程才能执行了另外一个线程。</p>
</blockquote>
<h3 id="线程同步块"><a href="#线程同步块" class="headerlink" title="线程同步块"></a>线程同步块</h3><blockquote>
<p>当然上面的我们使用的是线程同步方法，我们可以使用线程同步块，这两个相比线程同步块更加灵活，只需要将需要同步的代码放在同步块中即可，代码如下；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">			&#125;</div><div class="line">            </div><div class="line">		&#125;</div><div class="line">		</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Sychor sychor = <span class="keyword">new</span> Sychor();</div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面的代码中可以看出这种方式更加灵活，只需要将需要同步的代码方法在同步块中，不需要同步的代码放在外面</p>
</blockquote>
<h3 id="详细原因"><a href="#详细原因" class="headerlink" title="详细原因"></a>详细原因</h3><blockquote>
<ul>
<li>我们知道<strong>每一个对象都有一把锁</strong>，当我们使用线程同步方法或者线程同步块的时候实际上获得是对象的唯一的一把锁，当一个线程获得了这唯一的锁，那么其他的线程只能拒之门外了，注意这里我们说是一个对象，也就是说是同一个对象，如果是不同的对象，那么就不起作用了，因为不同对象有不同的对象锁，比如我们将上面的程序改成如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//第一个线程</span></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor sychor = <span class="keyword">new</span> Sychor();   <span class="comment">//在run() 方法中创建一个对象</span></div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">//第二个线程</span></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor sychor = <span class="keyword">new</span> Sychor();  <span class="comment">//创建另外的一个对象</span></div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从上面的结果可知，此时线程同步块根本不起作用，因为他们调用的是<strong>不同对象</strong>的insert方法，获得锁是不一样的</p>
<ul>
<li>上面我们已经说过一个对象有一把锁，线程同步方法和线程同步块实际获得的是对象的锁，因此线程同步块的括号中填入的是<code>this</code>，我们都知道<code>this</code>在一个类中的含义</li>
</ul>
<ol>
<li><strong>一个类也有唯一的一把锁</strong>，我们前面说的是使用对象调用成员方法，现在如果我们要调用类中的静态方法，那么我们可以使用线程同步方法或者同步块获得类中的唯一一把锁，那么对于多个线程同时调用同一个类中的静态方法就可以实现控制了,代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="comment">// 静态方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span>  </span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(thread.getName()+<span class="string">"输出     "</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//第一个线程</span></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor.insert(Thread.currentThread());  <span class="comment">//直接使用类调用静态方法</span></div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">//第二个线程</span></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor.insert(Thread.currentThread());   <span class="comment">//直接使用类调用静态方法</span></div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<ol>
<li><p>要想实现线程安全和同步控制，如果执行的是非<code>static</code>同步方法或者其中的同步块，那么一定要使用同一个对象，如果调用的是static同步方法或者其中的同步块那么一定要使用同一个类去调用</p>
</li>
<li><p>如果一个线程访问的是<code>static</code>同步方法，而另外一个线程访问的是非static的同步方法，此时这两个是不会发生冲突的，因为一个是类的锁，一个是对象的锁</p>
</li>
<li><p>如果使用线程同步块，那么同步块中的代码是控制访问的，但是外面的代码是所有线程都可以访问的</p>
</li>
<li><p>当一个正在执行同步代码块的线程出现了异常，那么<code>jvm</code>会自动释放当前线程所占用的锁，因此不会出现由于异常导致死锁的现象</p>
</li>
</ol>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3923737.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3923737.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;synchronized&quot;&gt;&lt;a href=&quot;#synchronized&quot; class=&quot;headerlink&quot; title=&quot;synchronized&quot;&gt;&lt;/a&gt;synchronized&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java并发编程" scheme="http://chenjiabing666.github.io/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Thread初探</title>
    <link href="http://chenjiabing666.github.io/2017/06/20/Thread%E5%88%9D%E6%8E%A2/"/>
    <id>http://chenjiabing666.github.io/2017/06/20/Thread初探/</id>
    <published>2017-06-20T00:54:01.000Z</published>
    <updated>2017-06-20T00:54:35.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thread初探"><a href="#Thread初探" class="headerlink" title="Thread初探"></a>Thread初探</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>以前大家写的都是单线程的程序，全是在main函数中调用方法，可以清楚的看到它的效率是特别低的，就像python中使用单线程取爬一个网站，可以说能让你等的吐血，因为数据量实在太大了，今天我们就来看看java的并发编程多线程的学习</p>
</blockquote>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><blockquote>
<p>创建一个线程可以有多种方法，比如继承Thread类，实现Runnable接口……下面我们来详细的看看创建的方法</p>
</blockquote>
<h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><blockquote>
<p>为什么继承<code>Thread</code>可以直接调用<code>start()</code>方法启动线程呢，因为<code>start()</code>本身就是Thread的方法，也就是继承了Thread的start()方法，因此这个类的对象可以调用start()启动线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//继承Thread</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;    </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"正在跑"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Mythread t1=<span class="keyword">new</span> MyThread();   <span class="comment">//创建对象</span></div><div class="line">        t1.start();     <span class="comment">//启动线程</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong>  继承<code>Thread</code>类的创建方法一个对象只能创建一个线程，并不能多个线程共用一个对象，只能一个线程对应一个对象，因此我们来看看实现<code>Runnable</code>接口的类来实现多个线程共享同一个对象</p>
</blockquote>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现Runnable接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"正在跑"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Demo d=<span class="keyword">new</span> Demo();  <span class="comment">//创建对象</span></div><div class="line">        Thread thread1=<span class="keyword">new</span> Thread(d); <span class="comment">//为对象创建一个线程</span></div><div class="line">        Thread thread2=<span class="keyword">new</span> Thread(d);   <span class="comment">//创建另外一个线程</span></div><div class="line">        </div><div class="line">        <span class="comment">//同时启动两个线程</span></div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>从上面可以清楚的看到实现<code>Runnable</code>接口的类一个对象可以供多个线程共享，并不像继承Thread类只为一个线程使用</p>
</blockquote>
<h3 id="简便的创建方法"><a href="#简便的创建方法" class="headerlink" title="简便的创建方法"></a>简便的创建方法</h3><blockquote>
<p>直接在<code>main</code>方法中创建，如果创建的普通类的对象在外面，那么必须是final修饰，可以实现多个线程同时共享一个对象，这个和实现<code>Runnable</code>接口一样，这时候就要控制同步条件了，如果在run方法中定义对象，那么，就是一个线程对应一个对象,这个就和继承Thread类一样的效果。所以可以根据条件自由选择</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//普通的一个类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"正在跑"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//线程测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//如果在外面必须使用final，当然也可以直写在run方法中,不过写在外面可以实现多个线程共享一个对象</span></div><div class="line">		<span class="comment">//写在run方法中当前对象只能为一个线程使用，和继承Thread类一样的效果</span></div><div class="line">		<span class="keyword">final</span> Simple simple=<span class="keyword">new</span> Simple(); </div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">//下面创建使用同一个对象创建同两个线程，实现多个线程共享一个对象，和实现Runnable接口一样的效果</span></div><div class="line">		Thread t1=<span class="keyword">new</span> Thread()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				simple.display();</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				simple.display();</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		<span class="comment">//启动这两个线程</span></div><div class="line">		t1.start();   </div><div class="line">		t2.start();</div><div class="line">    &#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><blockquote>
<ul>
<li><p><code>static void sleep(long mils)</code> 使正在运行的线程休眠mils毫秒，但是这里需要注意的是如果线程加了锁，那么使线程休眠并不会释放锁</p>
</li>
<li><p><code>String getName()</code>   得到线程的名称，上面的程序中已经使用了这个方法</p>
</li>
<li><p><code>void setName(String name)</code>  设置正在运行的线程的名字为name</p>
</li>
<li><p><code>start()</code>  启动线程，线程的创建并不意味着线程的启动，只有调用start()方法线程才是真正的开始运行</p>
</li>
<li><p><code>long getId()</code>  返回线程的标识符</p>
</li>
<li><p><code>run()</code>  线程执行的代码都放在run()方法中，在run方法中的调用是有序的，都是按照程序运行的顺序开始执行</p>
</li>
</ul>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>下面使用上面的方法创建一个实例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//线程的类，继承Thread</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">this</span>.sleep(<span class="number">1000</span>); <span class="comment">// 线程休眠1秒</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程测试的类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line"></div><div class="line">		MyThread1 t2 = <span class="keyword">new</span> MyThread1();</div><div class="line">		t2.setName(<span class="string">"第二个线程"</span>);</div><div class="line"></div><div class="line">		t1.start(); <span class="comment">// 启动线程，开始运行</span></div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>void join()</code>  等待该线程终止才能运行其他的线程</li>
<li><code>void join(long mils)</code>  等待该线程的时间为mils毫秒，一旦过了这个时间其他线程正常执行</li>
</ul>
</blockquote>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">this</span>.sleep(<span class="number">1000</span>); <span class="comment">// 线程休眠1秒</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line"></div><div class="line">		t1.start(); <span class="comment">// 启动线程，开始运行</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			t1.join();   <span class="comment">//阻塞其他线程，只有当这个线程运行完之后才开始运行其他的线程</span></div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(<span class="string">"主线程正在运行"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//输出结果</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line"> */</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>getPriority()</code>  得到当前线程优先级</li>
<li><code>setPriority(int num)</code> 更改线程的优先级(0-10)默认的是5，优先级越高获得cpu资源的几率就会越高</li>
</ul>
</blockquote>
<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">this</span>.sleep(<span class="number">1000</span>); <span class="comment">// 线程休眠1秒</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line"></div><div class="line">		MyThread1 t2 = <span class="keyword">new</span> MyThread1();</div><div class="line">		t2.setName(<span class="string">"第二个线程"</span>);</div><div class="line"></div><div class="line">		t2.setPriority(<span class="number">8</span>);   <span class="comment">//设置第二个线程的优先级为8，第一个线程的优先级为5(是默认的)</span></div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 从上面的运行结果可以看出大部分的第二个线程都是在第一个线程之前开始执行的，也就是说优先级越高获得cpu执行的几率就越大</div><div class="line"> * /</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>setDaemon(boolean)</code> 是否设置为守护线程，如果设置为守护线程，那么主线程销毁守护线程也会随之销毁</li>
<li><code>isDaemon()</code>  判断是否为守护线程</li>
</ul>
</blockquote>
<h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">1000</span>);  <span class="comment">//休眠一秒，方便主线程运行结束</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line">		t1.setDaemon(<span class="keyword">true</span>);</div><div class="line">		t1.start();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</div><div class="line">			System.out.println(i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//结果：</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> 0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 从上面的结果可以看出，一旦主线程结束，那么守护线程就会自动的结束</div><div class="line"> * /</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920357.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3920357.html</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thread初探&quot;&gt;&lt;a href=&quot;#Thread初探&quot; class=&quot;headerlink&quot; title=&quot;Thread初探&quot;&gt;&lt;/a&gt;Thread初探&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java并发编程" scheme="http://chenjiabing666.github.io/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java字符串进阶</title>
    <link href="http://chenjiabing666.github.io/2017/06/16/Java%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E9%98%B6/"/>
    <id>http://chenjiabing666.github.io/2017/06/16/Java字符串进阶/</id>
    <published>2017-06-16T04:53:57.000Z</published>
    <updated>2017-06-16T04:55:10.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java字符串进阶"><a href="#Java字符串进阶" class="headerlink" title="Java字符串进阶"></a>Java字符串进阶</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最常用的对字符串操作的类有三个，分别是String,StringBuilder,StringBuffer，下面将会详细的说说这三个类……</p>
</blockquote>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote>
<p>String类代表字符串，这个是最基本的对字符串的类，这个也是使用比较多的类，这里就不再详细介绍了</p>
</blockquote>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><blockquote>
<ul>
<li><code>new String(String str)</code></li>
<li><code>new String(StringBuilder str)</code></li>
<li><code>new String(StringBuffer str)</code></li>
<li><code>new String(byte[] bys,String charsetName)</code>  通过使用指定的字符集解码指定的 byte 子数组，构造一个新的 String。</li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>str charAt(int index)</code>  返回指定索引处的字符</li>
<li><code>String concat(String str)</code>  将指定字符串str连接到此字符串的结尾，返回连接成功后的字符，因此需要接受才能有效果</li>
<li><code>boolean contains(CharSequence s)</code> 判断此字符串是否包含指定的char值序列，这里的 CharSequence是一个接口，可以直接使用它的子类作为参数(String,StringBuffer,StringBuild)</li>
<li><code>static String copyValueOf(char[] c)</code> 将字符数组变成字符串并且返回</li>
<li><code>static String copyValueOf(char[] c,int off,int count)</code> 将截取的字符数组变成字符串并且返回，off是开始截取的下标，count是截取的个数</li>
<li><code>boolean endWith(String s)</code>  判断字符串是否是以s结尾</li>
<li><code>boolean equals(Object o)</code>  用于比较</li>
<li><code>int indexOf(char c)</code> 返回字符c在字符串中第一次出现的索引</li>
<li><code>int indexOf(char c,int fromIndex)</code> 从指定索引处开始搜索，查找第一次出现的索引</li>
<li><code>int indexOf(String str)</code> 返回指定子字符串在此字符串中第一次出现处的索引。</li>
<li><code>int indexOf(String str,int fromIndex)</code> 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</li>
<li><code>boolean isEmpty()</code>  </li>
<li><code>int length()</code></li>
<li><code>boolean matches(String regex)</code> 是否匹配正则表达式</li>
<li><code>trim()</code>   返回字符串的副本，忽略前导空白和尾部空白。</li>
<li><code>String substring(int beginIndex)</code> 返回一个新的字符串，它是此字符串的一个子字符串。 </li>
<li><code>String substring(int beginIndex, int endIndex)</code>  返回一个新字符串，它是此字符串的一个子字符串。 </li>
<li><code>String toUpperCase()</code>  使用默认语言环境的规则将此 String 中的所有字符都转换为大写。 </li>
<li><code>String[] split(String regex)</code> 根据给定正则表达式的匹配拆分此字符串。</li>
<li><code>String[] split(String regex, int limit)</code> 根据匹配给定的正则表达式来拆分此字符串。</li>
<li><code>char[] toCharArray()</code> 将此字符串转换为一个新的字符数组。</li>
<li><code>byte[] getBytes(Charset charset)</code>  使用给定的 <code>charset</code> 将此 <code>String</code> 编码到 <code>byte</code> 序列，并将结果存储到新的 byte 数组 </li>
</ul>
</blockquote>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote>
<ul>
<li>上面的new String(byte[] bys,String charsetName)这个构造方法很重要，它可以改变字符串的编码集(和byte[] getBytes(Charset charset))配合着使用，下面我们来看一个例子,代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">      <span class="comment">/*</span></div><div class="line"> * InputStreamReader实现了将字节流FileInputStream转换为字符流，然后使用转换来的字节流创建高效流，从而实现高效的读写</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 编码集(我的eclipse编辑器默认的是utf-8</div><div class="line"> * 下面将中文字符串的编码集变为GBK写入a.txt文件,因为a.txt默认的是utf-8的因此这里在文件中显示的是乱码</div><div class="line"> * 然后我们读出来的还是GBK的，因为我们写入的是GBK编码集的，但是我的eclipse是utf-8的编码集，因此在控制台上输出的还是乱码</div><div class="line"> * new String(byte[] bys,String</div><div class="line"> * charsetName)使用这个构造方法将byte数组改变编码集并且转换为utf-8格式的，那么这次在控制台上输出的就不乱码了</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 将GBK格式的中文写入a.txt文件</span></div><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"src/a.txt"</span>);</div><div class="line">FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">String str = <span class="string">"中"</span>;</div><div class="line"><span class="keyword">byte</span>[] by = str.getBytes(<span class="string">"GBK"</span>); <span class="comment">// 将字符串改为GBK编码集</span></div><div class="line">fileOutputStream.write(by);</div><div class="line">fileOutputStream.close();</div><div class="line"></div><div class="line"><span class="comment">//从a.txt文件中读取中文</span></div><div class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</div><div class="line"><span class="keyword">while</span> ((len = fileInputStream.read(bys)) != -<span class="number">1</span>) &#123;</div><div class="line">	System.out.println(<span class="keyword">new</span> String(bys, <span class="string">"GBK"</span>));</div><div class="line">&#125;</div><div class="line">fileInputStream.close();</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><blockquote>
<p>线程安全的可变字符序列。一个类似于 <code>String</code> 的字符串缓冲区，但不能修改。当然最重要的一点就是线程安全，我们可以从它的源码中可以看出，对于一些操作(<code>append</code>,<code>insert</code>..)都是使用了线程控制块来实现同步，适合与多线程下的使用，源代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.append(String.valueOf(obj));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.append(str);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.delete(start, end);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@throws</span> StringIndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line"> * <span class="doctag">@since</span>      1.2</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.deleteCharAt(index);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h3><blockquote>
<ul>
<li><code>new StringBuffer(StringBuilder str)</code></li>
<li><code>new StringBuffer(String str)</code></li>
</ul>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>StringBuffer append(str)</code>将指定类型的str追加到此字符串的后面(<code>String,char,char[],int,double,float,long,StringBuffer,StringBuilder</code>)</li>
<li><code>StringBuffer insert(int offest,  str)</code> 将指定类型的str插入到此序列中,offest表示开始插入的位置的索引,类型有 String,char,char[],int,double,float,long,StringBuffer,StringBuilder</li>
<li><code>String delete(int fromIndex,int endIndex)</code>   移除此序列中的字符串并且返回新的缓冲字符串</li>
<li><code>StringBuffer reverse()</code>  反转字符串</li>
<li><code>String substring(int start)</code>  返回一个新的 String，它包含此字符序列当前所包含的字符子序列。</li>
<li><code>String substring(int start, int end)</code> 返回一个新的 String，它包含此序列当前所包含的字符子序列。</li>
<li><code>StringBuffer deleteCharAt(int index)</code> 移除此序列指定位置的 char。</li>
<li><code>int length()</code>  长度</li>
<li><code>String toString()</code> 返回此序列中数据的字符串表示形式。    </li>
</ul>
</blockquote>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><blockquote>
<p>建议优先采用该类，因为在大多数实现中，它比 <code>StringBuffer</code> 要快。但是这个类不是线程安全的，只适合单线程，如果使用多线程推荐使用<code>StringBuffer</code>,当然使用这个也行，不过需要自己实现同步</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>new StringBuilder(String str)</code></li>
</ul>
</blockquote>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<p>这个类的常用方法和<code>StringBuffer</code>的一样，这里就不再一一列举了，参照上面的即可使用</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java字符串进阶&quot;&gt;&lt;a href=&quot;#Java字符串进阶&quot; class=&quot;headerlink&quot; title=&quot;Java字符串进阶&quot;&gt;&lt;/a&gt;Java字符串进阶&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java正则表达式</title>
    <link href="http://chenjiabing666.github.io/2017/06/16/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2017/06/16/Java正则表达式/</id>
    <published>2017-06-15T16:18:57.000Z</published>
    <updated>2017-06-15T16:23:45.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a>Java正则表达式</h1><blockquote>
<p><code>java.util.regex</code>是一个用正则表达式所订制的模式来对字符串进行匹配工作的类库包。它包括两个类：<code>Pattern</code>和<code>Matcher</code>。Pattern是一个正则表达式经编译后的表现模式。Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。 首先一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，然后一个Matcher实例在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。</p>
</blockquote>
<h2 id="正则表达式的构造摘要"><a href="#正则表达式的构造摘要" class="headerlink" title="正则表达式的构造摘要"></a>正则表达式的构造摘要</h2><blockquote>
<p>详细摘要请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/regex/Pattern.html" target="_blank" rel="external">jdk中文文档</a>,下面我只是列出一些经常使用的</p>
</blockquote>
<table>
<thead>
<tr>
<th>构造</th>
<th>匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>任何字符（与行结束符可能匹配也可能不匹配）</td>
</tr>
<tr>
<td>\d</td>
<td>数字：[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字： [^0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>空白字符：[ \t\n\x0B\f\r]</td>
</tr>
<tr>
<td>\S</td>
<td>非空白字符：[^\s]</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符：[a-zA-Z_0-9]</td>
</tr>
<tr>
<td>\W</td>
<td>非单词字符：[^\w]</td>
</tr>
<tr>
<td>[abc]</td>
<td>a、b 或 c（简单类）</td>
</tr>
<tr>
<td>[^abc]</td>
<td>任何字符，除了 a、b 或 c（否定）</td>
</tr>
<tr>
<td>[a-zA-Z]</td>
<td>a 到 z 或 A 到 Z，两头的字母包括在内（范围）</td>
</tr>
<tr>
<td>^</td>
<td>行的开头</td>
</tr>
<tr>
<td>$</td>
<td>行的结尾</td>
</tr>
<tr>
<td>X?</td>
<td>X，一次或一次也没有</td>
</tr>
<tr>
<td>X*</td>
<td>X，零次或多次</td>
</tr>
<tr>
<td>X+</td>
<td>X，一次或多次</td>
</tr>
<tr>
<td>X{n}</td>
<td>X，恰好 n 次</td>
</tr>
<tr>
<td>X{n,}</td>
<td>X，至少 n 次</td>
</tr>
<tr>
<td>X{n,m}</td>
<td>X，至少 n 次，但是不超过 m 次</td>
</tr>
</tbody>
</table>
<h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><blockquote>
<p>正则表达式的编译表示形式,学过<code>python</code>的都知道这个和python的正则表达式有异曲同工之妙。 但是它的构造方法是私有的，因此不能直接创建对象，但是可以调用它的静态方法返回一个对象，下面会详细介绍</p>
</blockquote>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote>
<ul>
<li><code>Pattern</code>类用于创建一个正则表达式,也可以说创建一个匹配模式,它的构造方法是私有的,不可以直接创建,但可以通过<code>Pattern.complie(String regex)</code>简单工厂方法创建一个正则表达式，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//采用的complie(String regex)</span></div><div class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line"></div><div class="line"><span class="comment">//采用的是complie(String regex,int flag)其中flag表示标志，下面的标志表示忽略字母大小写，详细的字段请看文档</span></div><div class="line">Pattern pattern=Pattern.compile(<span class="string">"(CHEN)(\\D*)(\\d*)"</span>,Pattern.CASE_INSENSITIVE);</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>Pattern compile(String regex)</code>  用于创建Pattern对象</li>
<li><code>Pattern compile(String regex,int flags)</code>  用于创建Pattern对象，并且指定了标志(比如忽略字母大小写)</li>
<li><code>int flags()</code>  返回此模式的匹配标志</li>
<li><p><code>String pattern()</code>   返回在其中编译过此模式的正则表达式。</p>
</li>
<li><p><code>String[] split(CharSequence input)</code> 根据此模式的正则表达式将输入的字符串拆分成String数组,默认的都是全部拆分开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//给出正则表达式用于匹配数字(0-9)</span></div><div class="line">   Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">   String str = <span class="string">"我是陈加兵456郑元梅34擦市场的逻辑啊"</span>;</div><div class="line">String[] splits = pattern.split(str, <span class="number">2</span>);   <span class="comment">//结果:[我是陈加兵,郑元梅34擦市场的逻辑啊]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>String[] split(CharSequence input,int limit)</code>  将字符串按照正则表达式表示的内容进行分组，如果limit&gt;0那么就分成limit个组，如果limit&lt;0就按照默认全部分开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出正则表达式用于匹配数字(0-9)</span></div><div class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">String str = <span class="string">"我是陈加兵456郑元梅34擦市场的逻辑啊"</span>;</div><div class="line">String[] splits = pattern.split(str, <span class="number">2</span>);   <span class="comment">//结果:[我是陈加兵,郑元梅34擦市场的逻辑啊]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Pattern.matches(String regex,CharSequence input)</code>是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"2223"</span>);<span class="comment">//返回true </span></div><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"2223aa"</span>);<span class="comment">//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到 </span></div><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"22bb23"</span>);<span class="comment">//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Matcher matcher(CharSequence input)</code>  创建匹配给定输入与此模式的匹配器,现在只是先了解以下，下面会详细解释Matcher这个类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Pattern p=Pattern.compile(<span class="string">"\\d+"</span>); </div><div class="line">Matcher m=p.matcher(<span class="string">"22bb23"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h2><blockquote>
<p><code>Pattern</code>类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作.Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持.<br>Matcher类和Pattern类一样它的构造方法同样是私有的，因此不能直接构造对象，但是上面我们说过Pattern类中有一个方法可以返回一个Matcher对象(<code>matcher(CharSequence input)</code>)</p>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>boolean mathces()</code>  尝试将整个区域与模式匹配(针对的是整个字符串，如果整个字符串未完全匹配，那么返回false,如果完全匹配那么返回true) </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"I am hreo 1234"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">      <span class="comment">//并没有完全匹配，因此返回false，如果str="123445"，那么就会返回true</span></div><div class="line">System.out.println(matcher.matches());</div></pre></td></tr></table></figure>
</li>
<li><p><code>boolean lookingAt()</code> 尝试从给定字符串的开头开始匹配，如果有子字符串匹配成功，那么返回true(针对的不是整个字符串，而是从开头开始，如果开头有一段字符串匹配成功，那么返回true)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"1234 I am a hero"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line"><span class="comment">//开头的1234匹配到了，因此返回true，如果str="I am a hero  1234"将返回false</span></div><div class="line">System.out.println(matcher.lookingAt());</div></pre></td></tr></table></figure>
</li>
<li><p><code>int start()</code>    匹配到的字符串的第一个元素的索引,如果没有匹配到调用此方法将会报错</p>
</li>
<li><code>int end()</code>     匹配到的字符串的最后一个元素的索引,如果没有匹配到调用此方法将会报错</li>
<li><p><code>String group()</code>  返回的是匹配到的字符串,如果没有匹配到调用此方法将会报错</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"1234 I am a hero 33455"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line"><span class="keyword">if</span>(matcher.lookingAt())</div><div class="line">&#123;</div><div class="line">	System.out.println(<span class="string">"开始匹配到下标为"</span>+matcher.start());  <span class="comment">//0</span></div><div class="line">	System.out.println(<span class="string">"匹配结束的下标为"</span>+matcher.end());    <span class="comment">//4</span></div><div class="line">          System.out.println(<span class="string">"匹配的字符串为"</span>+matcher.group());  <span class="comment">//1234</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>boolean find()</code>  查找整个字符串，如果在任意位置有一段字符串能够匹配成功，那么返回true(任意位置),然后如果再次调用这个查找的话，那么就从上次查找到的末尾开始匹配，也就是说查找的是下一个子序列了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"1234 I am a hero 6666 chenjiabing8888"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line"><span class="keyword">while</span>(matcher.find())  <span class="comment">//如果还有匹配的字符序列</span></div><div class="line">&#123;</div><div class="line">	System.out.println(<span class="string">"开始匹配到下标为"</span>+matcher.start()); </div><div class="line">	System.out.println(<span class="string">"匹配结束的下标为"</span>+matcher.end());   </div><div class="line">	System.out.println(<span class="string">"匹配的字符串为"</span>+matcher.group());  </div><div class="line">&#125;  </div><div class="line">      </div><div class="line">  <span class="comment">/*结果如下：</span></div><div class="line">   * </div><div class="line">  开始匹配到下标为0</div><div class="line">  匹配结束的下标为4</div><div class="line">  匹配的字符串为1234</div><div class="line">  开始匹配到下标为17</div><div class="line">  匹配结束的下标为21</div><div class="line">  匹配的字符串为6666</div><div class="line">  开始匹配到下标为33</div><div class="line">  匹配结束的下标为37</div><div class="line">  匹配的字符串为8888</div><div class="line">  */</div><div class="line">  </div><div class="line">  <span class="comment">/*</span></div><div class="line">   * 从上面返回的结果可以知道，find()可以匹配多次只要这个字符串还有可以匹配，</div><div class="line">   * 并且每次的匹配字段的开始下标都是上一次匹配的结束字母的下一个下标</div><div class="line">   */</div></pre></td></tr></table></figure>
</li>
<li><p><code>boolean find(int start)</code>  从指定的索引start位置开始匹配，这个用于重置find()匹配器，因为直接使用find()它的每次开始的索引都是不一样的</p>
</li>
<li><p><code>String group(int num)</code> 返回指定分组匹配到的字符串,group(0)表示匹配到的整个字符串,group(1) 表示匹配到的第一个字符(即是第一个括号中匹配的模式)</p>
</li>
<li><code>int groupCount()</code>  返回匹配到的分组个数</li>
<li><code>String replaceAll(String str)</code>  将所有于模式相匹配的 字符串全部替换程指定的字符串str,返回的是替换后的文本</li>
<li><code>String replaceFirst(String str)</code>  只将第一次匹配到的字符串替换成指定的字符串str，返回的时替换后的文本</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">String str=<span class="string">"chenjiabing2344cal3445"</span>;</div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">str=matcher.replaceFirst(<span class="string">"陈加兵"</span>);   </div><div class="line">System.out.println(str);   <span class="comment">//输出:chenjiabing陈加兵cal3445</span></div><div class="line">      </div><div class="line">      <span class="comment">/*</span></div><div class="line">       * str=matcher.replaceAll("陈加兵");</div><div class="line">       * System.out.println(str)    //输出:chenjiabing陈加兵cal陈加兵</div><div class="line">       */</div></pre></td></tr></table></figure>
<h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h2><blockquote>
<p>捕获组可以通过从左到右计算其开括号来编号，编号是从<code>1</code> 开始的。例如，在表达式 <code>((A)(B(C)))</code>中，存在四个这样的组：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">((A)(B(C)))</div><div class="line">(A)</div><div class="line">(B(C))</div><div class="line">(C)</div></pre></td></tr></table></figure></p>
<p>总之在正则表达式中在括号中的就是一个分组,下面用一个实例来理解一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"(\\D*)(\\d+)\\s(\\D+)"</span>);</div><div class="line">Matcher matcher=pattern.matcher(<span class="string">"chenjiabingshizuibangde6666 chenjiabign"</span>);</div><div class="line"><span class="keyword">if</span>(matcher.find())</div><div class="line">&#123;</div><div class="line">	System.out.println(<span class="string">"总共匹配到了"</span>+matcher.groupCount()+<span class="string">"个分组"</span>);</div><div class="line">	System.out.println(<span class="string">"匹配到整个字符串为"</span>+matcher.group(<span class="number">0</span>));</div><div class="line">	System.out.println(<span class="string">"匹配到的第一个字符串为"</span>+matcher.group(<span class="number">1</span>));</div><div class="line">	System.out.println(<span class="string">"匹配到的第二个字符串为"</span>+matcher.group(<span class="number">2</span>));</div><div class="line">	System.out.println(<span class="string">"匹配到的第三个字符串为"</span>+matcher.group(<span class="number">3</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h2><blockquote>
<p>贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配<br>一般写<code>python</code>爬虫的时候使用的都是非贪婪模式来匹配<br>使用了贪婪模式后会尽可能匹配更多的字符串，即是到了正则表达式定的末尾但是还是会继续向后匹配，看看是否还能匹配，非贪婪模式则是相反，到了正则表达式定义的结束字符就直接停止匹配了<br>贪婪模式: <code>.*</code> , <code>.+</code><br>非贪婪模式: <code>.*?</code>  , <code>.+?</code></p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">//使用了贪婪模式,因此当匹配到第一个&lt;/div&gt;的时候还要向后面匹配看看是否还能匹配到，由于后面还有&lt;/div&gt;结尾的，因此还是能够匹配的，因此匹配到的是:陈加兵&lt;/div&gt;&lt;div&gt;郑元梅</span></div><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"&lt;div&gt;(.*)&lt;/div&gt;"</span>);   </div><div class="line"></div><div class="line"><span class="comment">//使用了非贪婪模式，因此当匹配到第一个&lt;/div&gt;的时候就不向后面匹配了，直接返回了，因此匹配到的是:陈加兵</span></div><div class="line">Pattern pattern1=Pattern.compile(<span class="string">"&lt;div&gt;(.*?)&lt;/div&gt;"</span>);   </div><div class="line">String str=<span class="string">"&lt;div&gt;陈加兵&lt;/div&gt;&lt;div&gt;郑元梅&lt;/div&gt;"</span>;</div><div class="line">Matcher matcher=pattern1.matcher(str);</div><div class="line"><span class="keyword">if</span>(matcher.find())</div><div class="line">&#123;</div><div class="line">	System.out.println(matcher.groupCount());  <span class="comment">//1</span></div><div class="line">	System.out.println(matcher.group(<span class="number">1</span>));  <span class="comment">//输出匹配到的字符串,此时输出的是:陈加兵,如果使用贪婪模式输出的是：陈加兵&lt;/div&gt;&lt;div&gt;郑元梅</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/ggjucheng/p/3423731.html" target="_blank" rel="external">http://www.cnblogs.com/ggjucheng/p/3423731.html</a></li>
<li><a href="http://www.runoob.com/java/java-regular-expressions.html" target="_blank" rel="external">http://www.runoob.com/java/java-regular-expressions.html</a></li>
<li><a href="http://blog.csdn.net/lxcnn/article/details/4756030" target="_blank" rel="external">http://blog.csdn.net/lxcnn/article/details/4756030</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java正则表达式&quot;&gt;&lt;a href=&quot;#Java正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Java正则表达式&quot;&gt;&lt;/a&gt;Java正则表达式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;java.util.regex&lt;/code&gt;是
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java日期格式化</title>
    <link href="http://chenjiabing666.github.io/2017/06/15/Java%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://chenjiabing666.github.io/2017/06/15/Java日期格式化/</id>
    <published>2017-06-15T04:22:39.000Z</published>
    <updated>2017-06-15T11:08:40.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<ul>
<li>更多文章请看本人博客<a href="https://chenjiabing666.github.io/">https://chenjiabing666.github.io/</a></li>
<li>版权所有，如需转载请注明来源</li>
</ul>
</blockquote>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><blockquote>
<p><code>Date</code>类表示特定的瞬间精确到毫秒，不过从API可以看出很多的方法已经废弃了，这个类已经在过多使用了，不过还是需要了解一下的，为了后面的学习做铺垫</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>new Date()</code></li>
</ul>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>long getTime()</code> 返回计算机上面的时间，返回的是毫秒</li>
<li><code>setTime(long s)</code> 用给定的毫秒值s设置时间</li>
</ul>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Date date=<span class="keyword">new</span> Date();</div><div class="line">System.out.println(date.getTime());</div></pre></td></tr></table></figure>
<h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><blockquote>
<ul>
<li>这个类是一个简单的格式化日期的类，继承与<code>DateFormat</code>,相对于父类来说使用简单</li>
</ul>
</blockquote>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>new SimpleDateFormat()</code>  使用默认的格式化模板创建对象</li>
<li><code>new SimpleDateFormat(String pattern)</code>   使用指定的格式化模板创建对象</li>
</ul>
</blockquote>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>String format(Date date)</code>   将给定的日期格式化指定的模板的样式,比如<code>2017-01-29 23:22:11</code></li>
<li><code>applyPattern(String pattern)</code> 将给定的格式应用于此日期的格式，相当于直接使用new Date(String pattern)</li>
<li><code>Date parse(String d)</code>  将给定的格式化的日期格式字符串转换成<code>Date</code>对象，需要注意的是转化的时候定义的模板一定要和字符串的日期格式的模板一样，否则将会解析不正确的形式</li>
</ul>
</blockquote>
<h3 id="常用的日期格式化的模板"><a href="#常用的日期格式化的模板" class="headerlink" title="常用的日期格式化的模板"></a>常用的日期格式化的模板</h3><blockquote>
<p><img src="http://ono60m7tl.bkt.clouddn.com/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F.bmp" alt="日期格式化的格式"></p>
</blockquote>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><blockquote>
<ul>
<li>使用默认的模板格式化日期</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat dateFormat=<span class="keyword">new</span> SimpleDateFormat();   <span class="comment">//默认的格式</span></div><div class="line">String formateString=dateFormat.format(date);   <span class="comment">//格式化当前的日期</span></div><div class="line">System.out.println(formateString);</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用指定的模板格式化日期</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String model=<span class="string">"yyyy-MM-dd-FF  HH:mm:ss"</span>;  <span class="comment">//指定格式化的模板</span></div><div class="line">SimpleDateFormat dateFormat2=<span class="keyword">new</span> SimpleDateFormat(model);</div><div class="line">System.out.println(dateFormat2.format(date));</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>将格式化的日期转换成<code>Date</code>类型的，使用的<code>parse(String s)</code>，需要注意的是，下面定义的模板一定要和给定的格式化后的日期格式一样，否则转换后Date类型的毫秒值可能不正确</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      String d = <span class="string">"2017-06-12 22:34:19"</span>;   <span class="comment">//给出格式化后的日期</span></div><div class="line">String pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;  <span class="comment">//按照上面的日期格式定义模板，这个一定要完全和上面的一样，否则转换不正确</span></div><div class="line">SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(pattern);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	Date date = dateFormat.parse(d);   <span class="comment">//解析成Date类型</span></div><div class="line">	System.out.println(dateFormat.format(date));</div><div class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">	System.err.println(<span class="string">"解析错误"</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>综合使用：计算时间差</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">System.out.println(<span class="string">"请输入年-月-日"</span>);</div><div class="line">String startTime=scanner.next();</div><div class="line">System.out.println(<span class="string">"请输入结束时间(年-月-日)"</span>);</div><div class="line">String endTime=scanner.next();</div><div class="line">String moudle=<span class="string">"yyyy-MM-dd"</span>;   <span class="comment">//定义时间模板</span></div><div class="line"><span class="comment">//创建指定模板的解析</span></div><div class="line">SimpleDateFormat dateFormat=<span class="keyword">new</span> SimpleDateFormat(moudle);</div><div class="line">Date startDate=dateFormat.parse(startTime);<span class="comment">//解析开始时间</span></div><div class="line">Date endDate =dateFormat.parse(endTime);<span class="comment">//解析结束时间</span></div><div class="line"><span class="keyword">long</span> time=startDate.getTime()-endDate.getTime();  <span class="comment">//返回两个时间的差，毫秒</span></div><div class="line"><span class="keyword">int</span> day=(<span class="keyword">int</span>)(time/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);  <span class="comment">//转化为天数，1秒等于1000毫秒，一分钟等于60秒，一小时等于60分钟，一天等于24小时</span></div><div class="line">System.out.println(day);</div></pre></td></tr></table></figure>
<h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><blockquote>
<p>Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等 日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。瞬间可用毫秒值来表示，它是距历元（即格林威治标准时间 1970 年 1 月 1 日的 00:00:00.000，格里高利历）的偏移量。 </p>
</blockquote>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote>
<ul>
<li><code>Calendar.getInstance()</code></li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>int get(int field)</code>  返回当前对象的一些日期信息</li>
<li><code>Date getTime()</code>  获得当前日期的<code>Date</code>对象</li>
<li><code>add(int field,int amount)</code>  根据日历的规则，为给定的日历字段添加或减去指定的时间量。例如，要从当前日历时间减去 5 天，可以通过调用以下方法做到这一点：<code>add(Calendar.DAY_OF_MONTH, -5)</code>。 </li>
<li><code>setTime(Date date)</code>  使用给定的<code>Date</code>对象，设置<code>Calendar</code>时间</li>
</ul>
</blockquote>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><blockquote>
<ul>
<li><code>get</code>方法获取一些字段的值</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">      Calendar calendar = Calendar.getInstance(); <span class="comment">// 创建对象</span></div><div class="line">System.out.println(calendar.get(Calendar.YEAR));<span class="comment">// 获取年份</span></div><div class="line">System.out.println(calendar.get(Calendar.MONTH) + <span class="number">1</span>);<span class="comment">// 月，从0开始，即是输出5表示6月</span></div><div class="line">System.out.println(calendar.get(Calendar.DATE));<span class="comment">// 获取一个月中的第几天</span></div><div class="line">System.out.println(calendar.get(Calendar.HOUR)); <span class="comment">// 小时</span></div><div class="line">System.out.println(calendar.get(Calendar.MINUTE)); <span class="comment">// 分钟</span></div><div class="line">System.out.println(calendar.get(Calendar.SECOND)); <span class="comment">// 秒</span></div><div class="line">System.out.println(calendar.get(Calendar.AM_PM)); <span class="comment">// 获得是上午还是下午AM=0,PM=1</span></div><div class="line">System.out.println(calendar.get(Calendar.DAY_OF_MONTH)); <span class="comment">// 一个月中的第几天</span></div><div class="line">System.out.println(calendar.get(Calendar.DAY_OF_WEEK)); <span class="comment">// 一周中的第几天，星期日是第一天</span></div><div class="line">System.out.println(calendar.get(Calendar.DAY_OF_YEAR));<span class="comment">// 一年中的第几天</span></div><div class="line">System.out.println(calendar.get(Calendar.HOUR_OF_DAY)); <span class="comment">// 一天中的第几小时</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (calendar.get(Calendar.AM_PM) == Calendar.AM) &#123;</div><div class="line">	System.out.println(<span class="string">"现在是上午"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (calendar.get(Calendar.MONTH) + <span class="number">1</span> == Calendar.JULY) &#123;</div><div class="line">	System.out.println(<span class="string">"现在是6月"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>Date getTime()</code>方法的使用</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Calendar calendar=Calendar.getInstance();</div><div class="line">Date date=calendar.getTime();   <span class="comment">//获得Date对象</span></div><div class="line">String pattern=<span class="string">"yyyy-MM-dd  HH:mm:ss"</span>;</div><div class="line">SimpleDateFormat dateFormat=<span class="keyword">new</span> SimpleDateFormat(pattern);</div><div class="line">System.out.println(dateFormat.format(date));</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>add(int field,int amount)</code>方法的使用</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">      Calendar calendar=Calendar.getInstance();</div><div class="line">calendar.add(Calendar.DATE, -<span class="number">2</span>);</div><div class="line">System.out.println(calendar.get(Calendar.DATE));</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>综合实例：计算出当前的准确日期</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">      Calendar calendar = Calendar.getInstance();</div><div class="line"><span class="keyword">int</span> year = calendar.get(Calendar.YEAR);</div><div class="line"><span class="keyword">int</span> month = calendar.get(calendar.MONTH) + <span class="number">1</span>; <span class="comment">// 从0开始算，因此加1</span></div><div class="line"><span class="keyword">int</span> date = calendar.get(Calendar.DATE);</div><div class="line"><span class="keyword">int</span> week = calendar.get(Calendar.WEEK_OF_MONTH) + <span class="number">1</span>; <span class="comment">// 从周日开始算，因此加1</span></div><div class="line"><span class="keyword">int</span> hour = calendar.get(Calendar.HOUR);</div><div class="line"><span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</div><div class="line"><span class="keyword">int</span> seconds = calendar.get(Calendar.SECOND);</div><div class="line"><span class="keyword">if</span> (calendar.get(Calendar.AM_PM) == Calendar.AM) &#123;</div><div class="line"></div><div class="line">	System.out.println(<span class="string">"现在是"</span> + year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + date + <span class="string">"号"</span></div><div class="line">			+ <span class="string">"星期"</span> + week + <span class="string">"上午"</span> + hour + <span class="string">"点"</span> + minute + <span class="string">"分"</span> + seconds</div><div class="line">			+ <span class="string">"秒"</span>);</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	System.out.println(<span class="string">"现在是"</span> + year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + date + <span class="string">"号"</span></div><div class="line">			+ <span class="string">"星期"</span> + week + <span class="string">"下午"</span> + hour + <span class="string">"点"</span> + minute + <span class="string">"分"</span> + seconds</div><div class="line">			+ <span class="string">"秒"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;日期格式化&quot;&gt;&lt;a href=&quot;#日期格式化&quot; class=&quot;headerlink&quot; title=&quot;日期格式化&quot;&gt;&lt;/a&gt;日期格式化&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://chenjiabing666.github.io/2017/06/14/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://chenjiabing666.github.io/2017/06/14/Java反射机制/</id>
    <published>2017-06-14T07:53:54.000Z</published>
    <updated>2017-06-14T16:56:25.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<ul>
<li><a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="external">网页版的jdk的API</a></li>
<li><a href="http://download.csdn.net/detail/qq_34162294/9870892" target="_blank" rel="external">离线版API</a></li>
</ul>
</blockquote>
<h2 id="什么是反射机制"><a href="#什么是反射机制" class="headerlink" title="什么是反射机制"></a>什么是反射机制</h2><blockquote>
<p>反射是java语言的一个特性，它允程序在运行时（注意不是编译的时候）来进行自我检查并且对内部的成员进行操作。例如它允许一个java的类获取他所有的成员变量和方法并且显示出来。这个能特定我们不常看到，但是在其他的比如C或者C++语言中很不就存在这个特性。一个常见的例子是在JavaBean中，一些组件可以通过一个构造器来操作。这个构造器就是用的反射在动态加载的时候来获取的java中类的属性的。</p>
</blockquote>
<h2 id="主要的类"><a href="#主要的类" class="headerlink" title="主要的类"></a>主要的类</h2><blockquote>
<ul>
<li><code>Class</code> 类的实例表示正在运行的 Java 应用程序中的类和接口。Class没有公共的构造方法，Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的</li>
<li><code>Constructor</code>  提供关于类的单个构造方法的信息以及对它的访问权限(主要提供的是对构造方法使用)</li>
<li><code>Method</code>  提供关于类或接口上单独某个方法（以及如何访问该方法）的信息。所反映的方法可能是类方法或实例方法（包括抽象方法)</li>
<li><code>Field</code>  主要提供对类中的成员变量的访问和使用</li>
</ul>
</blockquote>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class<t></t></h2><blockquote>
<p>Class类也使用了泛型，即是Class<t>这种形式的，可以直接使用一个具体的类传入，这样的话就不需要强制转换了，比如<code>Class.newInstance()</code>这样使用默认的构造方法构造一个对象就需要不再需要强制转换了即使用<code>(ClassName)Class.newInstance()</code></t></p>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>getConstructor(Class[] params)</code>  获取公共的(public)的构造方法，并且限定其中的参数个数和类型可以获得不同的公共构造方法</li>
<li><code>Constructor[] getConstructors()</code>   返回所有的公共(public)的构造方法</li>
<li><code>getDeclaredConstructor(Class[] params)</code>  获取所有指定的构造方法，但是需要注意的是当获取私有的构造方法的时候需要使用setAccessible设置访问权限为true才能进行构造，否则出现异常</li>
<li><code>Constructor[] getDeclaredConstructors()</code> 返所有的构造方法包括public和private，protected修饰的</li>
<li><code>T newInstance()</code>  返回的是一个调用默认的构造方法(public class_name())实例化的一个Object对象，如果使用泛型那么就返回T类型的，反之返回的是Object需要强制转换才能使用这个对象调用成员函数和成员变量</li>
<li><code>Class forName(String class_name)</code>  返回class对象，每一个类都有一个方法返回Class对象(<code>类名.class</code>)，注意这里的参数一定是具体的路径，包括包的名字，比如<code>demo.Test</code></li>
<li><code>Package getPackage()</code>   返回此类所在的包名(package demo) 当然也可以使用Package.getName()获得包的名字(demo)比如<code>class1.getPackage().getName()</code></li>
<li><code>int getModifiers()</code> 返回的是类的修饰符的整数 类型(修饰符的类型有public private protected)其中得到整数可以使用Modifier中toString(int num)得到public，private，protected的类型,比如Modifier.toString(class1.getModifiers())<br>*<code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code> 返回指定参数的方法Method对象,注意这里仅仅是返回的时公共的方法(public)  比如:<code>Method method=class1.getMethod(&quot;display&quot;,new Class[]{int.class})</code>这里的<code>display</code>是方法的名字，有一个参数，类型为int</li>
<li><code>Method[] getMethods()</code>  获取所有的公共的方法(public)返回的是一个数组(Method)</li>
<li><code>Method getDeclaredMethod(String name,Class&lt;?&gt;... parameterTypes)</code>返回所有的指定的参数的方法(public,private,protected，但是不包括继承的),其中参数可以为null(无参数)</li>
<li><code>Method[] getDeclaredMethods()</code> 获取所有的方法</li>
<li><code>Field getField(String name)</code>  指定名字的公共成员变量(public)</li>
<li><code>Field[] getFields()</code>   获取所有的公共的成员变量</li>
<li><code>Field getDeclaredField(String name)</code>  获取所有的指定名称的成员变量(public,protected,private),同样在调用私有成员变量的时候需要先设置访问的权限,field.setAccessible(true)</li>
<li><code>Field[] getDeclaredFields()</code>  获取所有的成员变量(public,protected,private)</li>
<li><code>getSuperclass()</code>   返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的超类的 Class。</li>
<li><code>URL getResource(String name)</code> 查找指定名称的资源(图片，文件…)注意这个资源一定要和指定类在一个包中，否则返回null，比如查找Test类下的airplane.png图片:<code>Test.class.getResource(&quot;airplane.png&quot;)</code>这里返回的将是绝对路径</li>
</ul>
</blockquote>
<h3 id="获取Class的对象并且实例化"><a href="#获取Class的对象并且实例化" class="headerlink" title="获取Class的对象并且实例化"></a>获取Class的对象并且实例化</h3><blockquote>
<ul>
<li><p>使用<code>Class.forName(String className)</code> 其中className一定是包含包的名字，下面的demo就是包的名字，Test是类的名字。这是最常用的方法，学过JDBC的都知道加载驱动的时候就是使用的<code>Class.forName()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 第一种使用forName(String className),其中className一定是包含包的名字，下面的demo就是包的名字，Test是类的名字</div><div class="line"> */</div><div class="line">Class cls=Class.forName(<span class="string">"demo.Test"</span>);</div><div class="line">Test test=(Test)cls.newInstance();    <span class="comment">//这里只是使用了默认的构造方法实例化对象</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>类名.class</code></p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class cls=Test.class;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用<code>对象.getClass()</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Test test=<span class="keyword">new</span> Test();</div><div class="line">Class cls=test.getClass();</div></pre></td></tr></table></figure>
<h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor<t></t></h2><blockquote>
<ul>
<li>主要是用来对类的构造方法进行操作的，可以看出这个也使用了泛型，和上面的Class是一样的，注意这里如果没有使用泛型，那么原本放回<code>T</code>类型的现在都是返回<code>Object</code></li>
</ul>
</blockquote>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>T newInstance(Object parms)</code>   使用带有参数的构造方法实例化对象，如果使用了泛型，那么返回的就是T类型的，反之返回的是Object类型的，需要强制转换</li>
<li><code>getName()</code> 以字符串的形式返回构造方法的名称，具体的路径包含包名(demo.Test)</li>
<li><code>int getModifiers()</code>  和<code>Class</code>类中的方法一样</li>
</ul>
</blockquote>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><blockquote>
<p>主要提供的是对类中的方法的操作</p>
</blockquote>
<h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>Object invoke(Object obj,object args)</code>   使用得到的<code>Method</code>对象调用方法，<code>obj</code>是类的已经构造好的对象，如果是静态方法直接写null,因为静态方法的调用不需要对象，返回值是Object类型的，如果接受返回值，需要使用强制转换成相应的类型,<code>args</code>是传入的参数,如果有多个参数，那么可以直接在后面用逗号添加或者直接创建数组<code>new Object[]{22,&quot;chenjiabing&quot;}</code>比如：<code>method.invoke(test,22,&quot;chenjiabing&quot;)</code>    <code>method.invoke(test,new Object[]{22,&quot;chenjiabing&quot;})</code>注意：如果调用的private类型的方法，那么需要在前面设置访问的权限,<code>method.setAccessible(true)</code></p>
</li>
<li><p><code>String getName()</code>  返回此方法的名字(display)</p>
</li>
<li><code>Modifier getModifiers()</code> 返回此方法的修饰符的类型表示的整数(public,private…),可以使用<code>Modifier.toString()</code>转换成字符串形式</li>
<li><code>Class getReturnType()</code>  返回这个方法的返回类型  </li>
<li><code>String toString()</code>   返回这个方法表示的字符串的形式</li>
</ul>
</blockquote>
<h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><blockquote>
<p>主要提供对类的成员变量的操作</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>String getName()</code>  返回变量名字</li>
<li><code>Object get(Object obj)</code>  返回此变量在指定对象中的值，因为在构造对象的时候每一个传入的变量的值都不一样，因此需要使用对象obj。obj表示传入的对象，返回的Object类型，因此需要强制转换</li>
<li><code>void set(Object obj,Object value)</code> 改变obj对象上的变量的值为value</li>
<li><code>Modifier getModifiers()</code> 返回整数表示修饰的类型</li>
<li><code>String getType()</code> 获取变量的类型(int,String,double float…..)</li>
</ul>
</blockquote>
<h2 id="Modifier"><a href="#Modifier" class="headerlink" title="Modifier"></a>Modifier</h2><blockquote>
<p>Modifier 类提供了 static 方法和常量，对类和成员访问修饰符进行解码。修饰符集被表示为整数，用不同的位位置 (bit position) 表示不同的修饰符。</p>
</blockquote>
<h3 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>static String toString(int mode)</code>   将代表修饰符的整数形式转换为字符串形式的修饰符，比如将1转换成public</li>
<li><code>static isInterface(int mode)</code>   如果整数参数包括 interface 修饰符，则返回 true，否则返回 false</li>
<li><code>static isStatic(int mode)</code></li>
<li><code>static isPrivate(int mode)</code></li>
<li><code>static isPublic(int mode)</code></li>
<li><code>static isAbstract(int mode)</code></li>
</ul>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Modifier.toString(Test.class.getModifiers())    <span class="comment">//得到Test类的修饰符</span></div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>有了上面的铺垫，我们就可以使用上面的这些类进行操作了，在进行操作之前，我们需要先定义一个类<code>Test</code>,放在<code>demo</code>包下，内容如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.jar.Attributes.Name;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.print.attribute.standard.MediaSize.NA;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = <span class="string">"陈加兵"</span>;</div><div class="line">		<span class="keyword">this</span>.age = <span class="number">23</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"name="</span> + <span class="keyword">this</span>.name + <span class="string">"----age="</span> + <span class="keyword">this</span>.age);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><blockquote>
<ul>
<li>使用Class默认的构造newInstance()</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">      Class class1=Class.forName(<span class="string">"demo.Test"</span>);  <span class="comment">//静态加载Class</span></div><div class="line">Test test=(Test)class1.newInstance();  <span class="comment">//调用默认的构造方法(public Test())实例化对象，由于没有使用泛型，因此需要强转</span></div><div class="line">test.display();    <span class="comment">//调用display方法</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用Class中的<code>getConstructor()</code>方法构造对象,需要注意的使用<code>private</code>类型构造方法时一定要先设置访问权限为<code>true</code>-<code>constructor.setAccessible(true)</code>;</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">        <span class="comment">/*</span></div><div class="line">		 *调用public Test(String name,int age)得到Constructor的两种形式</div><div class="line">		 *   1.Constructor constructor=class1.getConstructor(new Class[]&#123;String.class,int.class&#125;);</div><div class="line">		 *   2.Constructor constructor=class1.getConstructor(String.class,int.class);这个和上面的是一样的，就是使用的参数形式不一样</div><div class="line">		 * </div><div class="line">		 * </div><div class="line">		 * </div><div class="line">		 * </div><div class="line">		 *使用newInstance()构造对象的两种方式</div><div class="line">		 *   1.Test test=(Test)constructor.newInstance(new Object[]&#123;"chenjiabing",22&#125;);</div><div class="line">		 *	 2.Test test=(Test)constructor.newInstance("chenjiabing",22); 只是形式不同而已，不过我还是喜欢上面的形式</div><div class="line">		 *</div><div class="line">		 */</div><div class="line">		</div><div class="line">		</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 调用public Test(String name,int age)</div><div class="line">		 * 		Class.getConstructor()得到的是公共的构造方法，如果有私有的构造方法，那么就会报错，这时就要使用getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</div><div class="line">		 * 		Test test=(Test)constructor.newInstance("陈加兵",22);</div><div class="line">		 * </div><div class="line">		 * </div><div class="line">		 * 调用public Test() </div><div class="line">		 *  	Constructor constructor=class1.getConstructor(null);</div><div class="line">		 *  	Test test=(Test)constructor.newInstance(null);</div><div class="line">		 * </div><div class="line">		 * </div><div class="line">		 * 调用private Test(int age)</div><div class="line">		 * 		Constructor constructor=class1.getDeclaredConstructor(new Class[]&#123;int.class&#125;);</div><div class="line">				constructor.setAccessible(true);   //因为private类型是不可以直接访问的，因此需要设置访问权限为true</div><div class="line">				Test test=(Test)constructor.newInstance(new Object[]&#123;1000&#125;);</div><div class="line">		*/</div><div class="line">		</div><div class="line">        </div><div class="line">        </div><div class="line">        Class class1=Class.forName(<span class="string">"demo.Test"</span>);</div><div class="line">		<span class="comment">//访问public Test(String name,int age)</span></div><div class="line"><span class="comment">//		Constructor constructor=class1.getConstructor(new Class[]&#123;String.class,int.class&#125;);</span></div><div class="line"><span class="comment">//		Test test=(Test)constructor.newInstance("陈加兵",22);</span></div><div class="line">		</div><div class="line">		<span class="comment">//访问默认的构造方法</span></div><div class="line"><span class="comment">//		Constructor constructor=class1.getConstructor(null);</span></div><div class="line"><span class="comment">//		Test test=(Test)constructor.newInstance(null);</span></div><div class="line"></div><div class="line">		<span class="comment">//访问private类型的构造方法</span></div><div class="line">		Constructor constructor=class1.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;<span class="keyword">int</span>.class&#125;);</div><div class="line">		constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">		Test test=(Test)constructor.newInstance(<span class="keyword">new</span> Object[]&#123;<span class="number">1000</span>&#125;);</div><div class="line">		test.display();</div></pre></td></tr></table></figure>
<h3 id="成员方法的操作"><a href="#成员方法的操作" class="headerlink" title="成员方法的操作"></a>成员方法的操作</h3><blockquote>
<p>使用<code>Class.getMethod()</code>和<code>Class.getDeclaredMethod()</code>方法获取方法，这两个方法的区别前面已经说过了，注意的是调用私有成员方法的之前一定要设置访问权限(<code>method.setAccessible(true)</code>)</p>
<p>Method类中的其他方法前面也已经说过了，详细使用请自己尝试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 获取Method对象的两种方式:</div><div class="line">		 * 		1.Method method_set=class1.getMethod("set", new Class[]&#123;String.class,int.class&#125;);</div><div class="line">		 * 		2.Method method_set=class1.getMethod("set", String.class,int.class);</div><div class="line">		 * </div><div class="line">		 * </div><div class="line">		 * 使用Method.invoke()调用方法的两种方式</div><div class="line">		 * 		1.Object o=method_set.invoke(test, new Object[]&#123;"陈加兵",200&#125;);</div><div class="line">		 * 		2.Object object=method_set.invoke(test, "陈加兵",2000);</div><div class="line">		 */</div><div class="line">		</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 获取公共方法(public)：</div><div class="line">		 * 		1.Method method=class1.getMethod("display",null);  //public void display()</div><div class="line">		 * 		2.Method method_set=class1.getMethod("set", new Class[]&#123;String.class,int.class&#125;);  //获取public void set(String name,int age)</div><div class="line">		 * </div><div class="line">		 * </div><div class="line">		 * 获取私有方法(private,protected)</div><div class="line">		 * 		1.Method method_getAge=class1.getDeclaredMethod("getAge", null);</div><div class="line">		 */</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">//使用构造方法构造一个Test对象</span></div><div class="line">		Class class1 =Class.forName(<span class="string">"demo.Test"</span>);</div><div class="line">		Constructor&lt;Test&gt; constructor=class1.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;String.class,<span class="keyword">int</span>.class&#125;);</div><div class="line">		Test test=constructor.newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"陈加兵"</span>,<span class="number">22</span>&#125;);</div><div class="line">		</div><div class="line">		</div><div class="line">		Method method=class1.getMethod(<span class="string">"display"</span>,<span class="keyword">null</span>);   <span class="comment">//获取public void display()方法的Method对象</span></div><div class="line">		Object obj=method.invoke(test, <span class="keyword">null</span>);    <span class="comment">//调用方法display</span></div><div class="line">		</div><div class="line">		<span class="comment">//获取public void set(String name,int age)</span></div><div class="line"><span class="comment">//		Method method_set=class1.getMethod("set", new Class[]&#123;String.class,int.class&#125;);</span></div><div class="line">		Method method_set=class1.getMethod(<span class="string">"set"</span>, String.class,<span class="keyword">int</span>.class);</div><div class="line">		</div><div class="line"><span class="comment">//		Object o=method_set.invoke(test, new Object[]&#123;"陈加兵",200&#125;);</span></div><div class="line">		Object object=method_set.invoke(test, <span class="string">"陈加兵"</span>,<span class="number">2000</span>);</div><div class="line">		test.display();</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">//获取私有方法private int getAge()</span></div><div class="line">		Method method_getAge=class1.getDeclaredMethod(<span class="string">"getAge"</span>, <span class="keyword">null</span>);</div><div class="line">		method_getAge.setAccessible(<span class="keyword">true</span>);   <span class="comment">//必须设置访问权限为true</span></div><div class="line">		<span class="comment">//判断返回值类型是否为int类型的</span></div><div class="line">		<span class="keyword">if</span>(<span class="string">"int"</span>.equals(method_getAge.getReturnType().toString()))</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> ReturnData=(<span class="keyword">int</span>) method_getAge.invoke(test, <span class="keyword">null</span>);   <span class="comment">//调用并且获取返回值</span></div><div class="line">			System.out.println(ReturnData);</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="成员变量的操作"><a href="#成员变量的操作" class="headerlink" title="成员变量的操作"></a>成员变量的操作</h3><blockquote>
<p>主要使用的<code>Field</code>类，前面已经详细的说过了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">		 * 获取public修饰的成员变量：</div><div class="line">		 * 		1.Field field=class1.getField("name"); //获取public的成员变量name的Filed对象</div><div class="line">		 * </div><div class="line">		 * 获取private，protected修饰的成员变量：</div><div class="line">		 * 		1.	Field field2=class1.getDeclaredField("age");</div><div class="line">		 */</div><div class="line">         </div><div class="line">         </div><div class="line">		Class class1=Class.forName(<span class="string">"demo.Test"</span>);</div><div class="line">		Test test=<span class="keyword">new</span> Test(<span class="string">"陈加兵"</span>,<span class="number">1000</span>);</div><div class="line">		Field field=class1.getField(<span class="string">"name"</span>); <span class="comment">//获取public的成员变量name的Filed对象</span></div><div class="line">		System.out.println(field.get(test));   <span class="comment">//获得test对象中的name属性的值</span></div><div class="line">		</div><div class="line">		<span class="comment">//获取private int age的Field对象</span></div><div class="line">		Field field2=class1.getDeclaredField(<span class="string">"age"</span>);</div><div class="line">		field2.setAccessible(<span class="keyword">true</span>);  <span class="comment">//设置访问权限</span></div><div class="line">		System.out.println(field2.get(test));</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/octobershiner/archive/2012/03/18/2404751.html" target="_blank" rel="external">http://www.cnblogs.com/octobershiner/archive/2012/03/18/2404751.html</a></li>
<li><a href="http://www.cnblogs.com/ixenos/p/5699420.html" target="_blank" rel="external">http://www.cnblogs.com/ixenos/p/5699420.html</a></li>
<li><a href="https://yq.aliyun.com/wenzhang/show_17985" target="_blank" rel="external">https://yq.aliyun.com/wenzhang/show_17985</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java反射机制&quot;&gt;&lt;a href=&quot;#Java反射机制&quot; class=&quot;headerlink&quot; title=&quot;Java反射机制&quot;&gt;&lt;/a&gt;Java反射机制&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记总结</title>
    <link href="http://chenjiabing666.github.io/2017/05/26/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiabing666.github.io/2017/05/26/Java-IO学习笔记总结/</id>
    <published>2017-05-26T00:09:27.000Z</published>
    <updated>2017-06-21T17:21:44.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-IO学习笔记总结"><a href="#Java-IO学习笔记总结" class="headerlink" title="Java IO学习笔记总结"></a>Java IO学习笔记总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前面的八篇文章详细的讲述了Java IO的操作方法，文章列表如下</p>
<ul>
<li><a href="https://chenjiabing666.github.io/2017/05/23/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/">基本的文件操作</a></li>
<li><a href="https://chenjiabing666.github.io/2017/05/24/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/">字符流和字节流的操作</a></li>
<li><a href="https://chenjiabing666.github.io/2017/05/24/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/">InputStreamReader和OutputStreamWriter操作</a></li>
<li><a href="https://chenjiabing666.github.io/2017/05/25/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/">内存操作流</a></li>
<li><a href="https://chenjiabing666.github.io/2017/05/25/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/">管道流</a></li>
<li><a href="https://chenjiabing666.github.io/2017/05/25/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/">打印流</a></li>
<li><a href="https://chenjiabing666.github.io/2017/05/26/Java-IO学习笔记七/">System对IO的支持</a></li>
<li><a href="https://chenjiabing666.github.io/2017/05/26/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AB/">BufferedReader和BufferedWriter</a></li>
</ul>
</blockquote>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><blockquote>
<p>字节流的操作都是基于<code>InputStream</code>和<code>OutputStream</code>这两个抽象类</p>
</blockquote>
<h4 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h4><blockquote>
<p><code>InputStream</code>是<strong>字节输入流</strong>，主要的功能是从文件中读取数据,它的子类有内存操作流 <code>ByteArrayInputStream</code>，管道输入流<code>PipedInputStream</code>，和<code>FileInputStream</code></p>
</blockquote>
<h4 id="OutPutStream"><a href="#OutPutStream" class="headerlink" title="OutPutStream"></a>OutPutStream</h4><blockquote>
<p><code>OutputStream</code>是字节输出流，主要功能是向文件中写入数据，它的常用的子类有<code>ByteArrayOutputStream</code>, <code>FileOutputStream</code>,  <code>PipedOutputStream</code>,<strong><code>PrintStream</code></strong></p>
</blockquote>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><blockquote>
<p>字符流的操作都是基于家<code>Writer</code>和<code>Reader</code>这两个抽象类的，一个是输出流，一个是输入流</p>
</blockquote>
<h4 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h4><blockquote>
<p>写入字符流的操作类，常用的子类有<strong><code>PrintWriter</code></strong>,<strong><code>BufferedWriter</code></strong>,<code>OutputStreamWriter</code>(字节流和字符流之间的桥梁)</p>
</blockquote>
<h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><blockquote>
<p>用于读取字符流的抽象类,常用的子类有<code>BufferedReader</code>，<code>InputStreamReader</code></p>
</blockquote>
<h2 id="最好用的"><a href="#最好用的" class="headerlink" title="最好用的"></a>最好用的</h2><blockquote>
<ul>
<li>其中最高效的输入和输出当然是字符流操作的<code>BufferedReader</code>和<code>BufferedWriter</code></li>
<li>最便捷的，格式化最好的当然是<code>PrintStream</code>,<code>PrintWriter</code>这两个类都采用了格式化的输入和输出</li>
</ul>
</blockquote>
<h3 id="输出流最好用的"><a href="#输出流最好用的" class="headerlink" title="输出流最好用的"></a>输出流最好用的</h3><blockquote>
<ul>
<li>输出流中比较好用的是<code>PrintStream</code>,<code>PrintWriter</code></li>
<li>输出流最好用的当然是<code>BufferedWriter</code>和<code>PrintWriter</code>的结合，例子如下；</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line"><span class="comment">//用BufferedWriter实例化PrintWriter，显著提高写入的效率</span></div><div class="line">PrintWriter printWriter=<span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file)));</div><div class="line">String name=<span class="string">"陈加兵"</span>;</div><div class="line"><span class="keyword">int</span> age=<span class="number">22</span>;</div><div class="line"><span class="keyword">float</span> grade=<span class="number">99.9f</span>;</div><div class="line">printWriter.printf(<span class="string">"姓名:%s,年龄:%s,grade:%s"</span>,name,age,grade);  <span class="comment">//格式化的写入</span></div><div class="line">printWriter.close();</div></pre></td></tr></table></figure>
<h3 id="输入流最好用的"><a href="#输入流最好用的" class="headerlink" title="输入流最好用的"></a>输入流最好用的</h3><blockquote>
<ul>
<li>本人觉得输入流中<code>BufferedReader</code>功能已经很强大了</li>
</ul>
</blockquote>
<h3 id="综合运用"><a href="#综合运用" class="headerlink" title="综合运用"></a>综合运用</h3><blockquote>
<p><strong>有时候在写程序的时候，你得到了一个字节流，但是你想要创建的却是字符流对象，怎么办了呢？前面已经说过，字节流转换成字符流对象的桥梁是InputStreamReader和InputStreamWiter他们的作用是传入字节流对象构造字符流对象，因此可以完美的实现字节流转换成字符流，这个是非常重要的</strong></p>
<p>下面使用转换流将System.in转换成字符流并且使用高效流读取控制台输入的数据,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// 读取键盘的输入的数据，System.in是字节流，因此要想创建高效流必须使用转换流InputStreamReader</span></div><div class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">String line;</div><div class="line"><span class="comment">//从键盘读取输入的数据，直到读到bye结束</span></div><div class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (<span class="string">"bye"</span>.equals(line)) &#123;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	System.out.println(line);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-IO学习笔记总结&quot;&gt;&lt;a href=&quot;#Java-IO学习笔记总结&quot; class=&quot;headerlink&quot; title=&quot;Java IO学习笔记总结&quot;&gt;&lt;/a&gt;Java IO学习笔记总结&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记八</title>
    <link href="http://chenjiabing666.github.io/2017/05/26/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AB/"/>
    <id>http://chenjiabing666.github.io/2017/05/26/Java-IO学习笔记八/</id>
    <published>2017-05-25T23:37:55.000Z</published>
    <updated>2017-06-20T00:55:02.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BufferedReader和BufferedWriter"><a href="#BufferedReader和BufferedWriter" class="headerlink" title="BufferedReader和BufferedWriter"></a>BufferedReader和BufferedWriter</h1><blockquote>
<ul>
<li>这两个类是高效率的提高文件的读取速度，它们为字符输入和输出提供了一个缓冲区，可以显著的调高写入和读取的速度，特别针对大量的磁盘文件读取的时候,下面着重的讲讲这两个类</li>
</ul>
</blockquote>
<h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><blockquote>
<ul>
<li>从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取,要特别注意的是这个市针对字符流而不是字节流。</li>
<li>通常，<code>Reader</code> 所作的每个读取请求都会导致对底层字符或字节流进行相应的读取请求。因此，建议用 <code>BufferedReader</code> 包装所有其 <code>read()</code>操作可能开销很高的<code>Reader</code>（如 <code>FileReader</code> 和 <code>InputStreamReader</code>）</li>
</ul>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>BufferedReader(Reader in)</code>  创建一个使用默认大小输入缓冲区的缓冲字符输入流。</li>
<li><code>BufferedReader(Reader in, int sz)</code>    创建一个使用指定大小输入缓冲区的缓冲字符输入流。</li>
</ul>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li>可以看出构造函数使用了Reader这个抽象类来初始化，我们前面说过这个是针对字符流的读取，因此可以使用<code>Reader</code>类的两个子类<code>FileReader</code>,<code>InputStreamReader</code>来初始化</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));  <span class="comment">//使用FileReader实例化</span></div><div class="line"><span class="comment">//使用InputStreamReader来实例化</span></div><div class="line">BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file)));</div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>close()</code></li>
<li><code>String readLine()</code>  读取一行的数据</li>
<li><code>int read()</code>   读取一个字符，注意这里的和字节的不一样，这里的汉字占用了一个字节，前面讲到读取字节流的时候使用byte读取汉字占用三个字节</li>
<li><code>skip(int n)</code>   跳过n个字节</li>
<li><code>ready()</code>  判断此流是否已准备好被读取。</li>
</ul>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li>用于控制台的读取,前面已经说过<code>System.in</code>返回的是<code>InputStream</code>类型的，因此可以使用<code>InputStreamReader</code>实例化,当然这个有点多余了，我们完全可以使用<code>java.util</code>提供的<code>Scanner</code>直接进行输入</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">        String str=bufferedReader.readLine();  <span class="comment">//将控制台输入的字符串读取</span></div><div class="line">        System.out.println(str);  <span class="comment">//打印出来</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>用于文件的读取</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">       <span class="comment">// BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream(file)));</span></div><div class="line"><span class="comment">//        bufferedReader.skip(2);    //跳过两个字节</span></div><div class="line"><span class="comment">//        </span></div><div class="line"><span class="comment">//        第一种读取的方式</span></div><div class="line">        <span class="keyword">while</span>(bufferedReader.ready())     <span class="comment">//判断是否还有字符</span></div><div class="line">        &#123;</div><div class="line">            String str=bufferedReader.readLine();   <span class="comment">//直接读取一行</span></div><div class="line">            System.out.println(str);  </div><div class="line">        &#125;</div><div class="line">        bufferedReader.close();</div><div class="line">        </div><div class="line">        <span class="comment">//第二种读取方式</span></div><div class="line">        <span class="keyword">int</span> len=bufferedReader.read();</div><div class="line">        <span class="keyword">while</span>(len!=-<span class="number">1</span>)   <span class="comment">//判断是否读到文件的末尾</span></div><div class="line">        &#123;</div><div class="line">            System.out.print((<span class="keyword">char</span>)len);  <span class="comment">//强制转化成字符</span></div><div class="line">            len=bufferedReader.read();</div><div class="line">        &#125;</div><div class="line">		</div><div class="line">		<span class="comment">//第三种方式，根据readLine读取一行，如果到达了文件的末尾返回null</span></div><div class="line">		String s;</div><div class="line">		<span class="keyword">while</span>((s=bufferedReader.readLine())!=<span class="keyword">null</span>)</div><div class="line">		&#123;</div><div class="line">			System.out.println(S);</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><blockquote>
<ul>
<li>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</li>
<li>通常 <code>Writer</code> 将其输出立即发送到底层字符或字节流。除非要求提示输出，否则建议用 BufferedWriter 包装所有其 write() 操作可能开销很高的 Writer（如 <code>FileWriters</code> 和 <code>OutputStreamWriters</code>）。例如</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PrintWriter out</div><div class="line">   = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"foo.out"</span>)));</div></pre></td></tr></table></figure>
<h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>BufferedWriter(Writer out)</code>   创建一个使用默认大小输出缓冲区的缓冲字符输出流。</li>
<li><code>BufferedWriter(Writer out, int sz)</code>    创建一个使用给定大小输出缓冲区的新缓冲字符输出流。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">BufferedWriter bufferedWriter=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意这里的FileWriter是Writer的子类，因此可以使用其实例化</strong></p>
</blockquote>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><blockquote>
<ul>
<li><code>close()</code></li>
<li><code>flush()</code></li>
<li><code>newLine()</code>  写入一个与平台相关的换行符</li>
<li><code>write(int data)</code> 写入一个字符，这里的写入的不是整数</li>
<li><code>write(String str)</code>  写入一个字符串</li>
<li><code>write(String str,int off,int len)</code>  写入部分字符串</li>
<li><code>write(char[] c)</code></li>
<li><code>write(char[] c,int off,int len)</code></li>
</ul>
</blockquote>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">File file1=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>);</div><div class="line">File file2=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"demo.txt"</span>);</div><div class="line"><span class="keyword">if</span>(!file1.exists())</div><div class="line">&#123;</div><div class="line">    file1.mkdir();</div><div class="line">    System.out.println(<span class="string">"文件夹创建成功"</span>);</div><div class="line">&#125;</div><div class="line">BufferedWriter bufferedWriter=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</div><div class="line">String str=<span class="string">"陈加兵"</span>;</div><div class="line"><span class="keyword">int</span> data=<span class="number">48</span>;</div><div class="line">String name=<span class="string">"chenjiabing"</span>;</div><div class="line"><span class="keyword">char</span>[] chars=name.toCharArray();</div><div class="line">bufferedWriter.write(str);   <span class="comment">//写入一个字符串，当然也可以截取这个字符串的某一段</span></div><div class="line">bufferedWriter.newLine();  <span class="comment">//写入一个平台自带的换行符，因为每一个操作系统的换行符都不一样</span></div><div class="line">bufferedWriter.write(data);   <span class="comment">//写入的并不是整数，而是这个整数所代表的字符</span></div><div class="line">bufferedWriter.newLine();</div><div class="line">bufferedWriter.write(chars,<span class="number">1</span>,<span class="number">4</span>);  <span class="comment">//写入字符数组</span></div><div class="line">bufferedWriter.flush();</div><div class="line">bufferedWriter.close()</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>拓展：</strong>通过了上面的学习，你不觉得使用这个类写入文件数据有点烦了，只能写入<code>String</code> <code>char</code>类型的数据，此时我们就想到了前面说过的打印流(<code>PrintWriter</code>)，这是一个便捷的写入文件的类，可以指定任意格式任意类型的数据，同样是输出流，我么可以将他们结合起来，构成一个更加强大的输出流，如下:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line"><span class="comment">//用BufferedWriter实例化PrintWriter，显著提高写入的效率</span></div><div class="line">PrintWriter printWriter=<span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file)));</div><div class="line">String name=<span class="string">"陈加兵"</span>;</div><div class="line"><span class="keyword">int</span> age=<span class="number">22</span>;</div><div class="line"><span class="keyword">float</span> grade=<span class="number">99.9f</span>;</div><div class="line">printWriter.printf(<span class="string">"姓名:%s,年龄:%s,grade:%s"</span>,name,age,grade);  <span class="comment">//格式化的写入</span></div><div class="line">printWriter.close();</div></pre></td></tr></table></figure>
<h2 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h2><blockquote>
<p>将一个文件中数据转移到另外一个文件中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> IO;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 17-5-26.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo13</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 常用函数：</div><div class="line">     * newLine()</div><div class="line">     * write(String str)</div><div class="line">     * write(String str,int off,int len)</div><div class="line">     * write(Char[] c)</div><div class="line">     * write(Char[] c,int off,int len)</div><div class="line">     * write(int data)</div><div class="line">     * close()</div><div class="line">     * flush()</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span>);</div><div class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span> + File.separator + <span class="string">"demo.txt"</span>);</div><div class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file2));</div><div class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (bufferedReader.ready()) &#123;</div><div class="line">            String str = bufferedReader.readLine();  <span class="comment">//读取文件test.txt中的一行数据</span></div><div class="line">            bufferedWriter.write(str);   <span class="comment">//将这一行数据写入文件demo.txt</span></div><div class="line">            bufferedWriter.newLine();</div><div class="line">        &#125;</div><div class="line">        bufferedReader.close();</div><div class="line">        bufferedWriter.flush();</div><div class="line">        bufferedWriter.close();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://ifeve.com/java-io-char-buffered-filter/" target="_blank" rel="external">http://ifeve.com/java-io-char-buffered-filter/</a></li>
<li><a href="http://www.cnblogs.com/lich/archive/2011/12/11/2284223.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/11/2284223.html</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BufferedReader和BufferedWriter&quot;&gt;&lt;a href=&quot;#BufferedReader和BufferedWriter&quot; class=&quot;headerlink&quot; title=&quot;BufferedReader和BufferedWriter&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记七</title>
    <link href="http://chenjiabing666.github.io/2017/05/26/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%83/"/>
    <id>http://chenjiabing666.github.io/2017/05/26/Java-IO学习笔记七/</id>
    <published>2017-05-25T23:37:47.000Z</published>
    <updated>2017-06-20T00:55:23.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="System对IO的支持"><a href="#System对IO的支持" class="headerlink" title="System对IO的支持"></a>System对IO的支持</h1><blockquote>
<ul>
<li><code>System</code>是系统的类，其中的方法都是在控制台的输入和输出，但是通过重定向也是可以对文件的输入输出</li>
<li><p><code>System</code>中定义了标准输入、标准输出和错误输出流，定义如下:</p>
<blockquote>
<ol>
<li><code>static PrintStream err</code> “标准”错误输出流。</li>
<li><code>static InputStream    in</code> “标准”输入流。</li>
<li><code>static PrintStream    out</code>   “标准”输出流。</li>
</ol>
</blockquote>
</li>
<li><p>从上面的定义可以知道这里的返回值都是字节的输入和输出流，因此可以使用<code>PrintStream</code>接受这个返回值，然后利用其进行输出，同样的输入也是可以这样做,当然对于<code>OutputStream</code>和<code>InputStream</code>也是可以的，因为<code>PrintStream</code>是继承<code>OutputStream</code></p>
</li>
</ul>
</blockquote>
<h2 id="System-out"><a href="#System-out" class="headerlink" title="System.out"></a>System.out</h2><blockquote>
<ul>
<li><code>System.out</code>是一个标准的输出流，可以使用<code>PrintStream</code>和<code>OutputStream</code>接收返回值，然后使用其进行标准的输出,实例如下</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PrintStream printStream=System.out;  <span class="comment">//使用PrintStream</span></div><div class="line"><span class="comment">//OutputStream outputStream=System.out;   //使用OutputStream</span></div><div class="line">    String name=<span class="string">"陈加兵"</span>;</div><div class="line">    <span class="keyword">int</span> age=<span class="number">22</span>;</div><div class="line">    printStream.printf(<span class="string">"姓名:%s,年龄:%s"</span>,name,age);  <span class="comment">//使用格式话的输出</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其实我还是比较用<code>PrintStream</code>进行格式话的输出的</p>
<ul>
<li><code>System.out</code>的重定向输出，可以使用这个将指定的内容输出到文件中，实例如下：</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">        System.setOut(<span class="keyword">new</span> PrintStream(<span class="keyword">new</span> PrintStream(file)));  <span class="comment">//设置重定向的文件</span></div><div class="line">    &#125;<span class="keyword">catch</span> (IOException e) </div><div class="line">    &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"陈加兵的个人博客"</span>)；<span class="comment">//向文件输入内容</span></div></pre></td></tr></table></figure>
<h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h2><blockquote>
<ul>
<li>这是一个标准输入流，可以使用<code>InputStream</code>来接受返回值，然后利用其进行输入，实例如下：</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">       InputStream inputStream=System.in;   <span class="comment">//使用InputStream来接收这个返回值</span></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           inputStream.read(bytes);  <span class="comment">//读取控制台输入的字符串</span></div><div class="line">       &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">       &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">       System.out.println(<span class="keyword">new</span> String(bytes));  <span class="comment">//输出</span></div></pre></td></tr></table></figure>
<blockquote>
<p>说实话这种控制台输入的方式不太好，还是使用原来的<code>Scanner</code>比较好</p>
<ul>
<li>System.in的重定向</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    System.setIn(<span class="keyword">new</span> FileInputStream(file));  <span class="comment">//设置重定向</span></div><div class="line">    System.in.read(bytes);   <span class="comment">//读取文件中字节数据</span></div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="keyword">new</span> String(bytes));   <span class="comment">//打印出文件中的内容</span></div></pre></td></tr></table></figure>
<h2 id="System-err"><a href="#System-err" class="headerlink" title="System.err"></a>System.err</h2><blockquote>
<ul>
<li>这是一个标准错误输出流，在<code>IDEA</code>中输出的内容是红色的，和<code>System.out</code>输出的格式一样，只是颜色不一样，因为这里的重定向不太重要也不太常用，这里就不再详细说了，详情请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/System.html" target="_blank" rel="external">帮助文档</a></li>
</ul>
</blockquote>
<h2 id="System-exit"><a href="#System-exit" class="headerlink" title="System.exit"></a>System.exit</h2><blockquote>
<ul>
<li><code>public static void exit(int status)</code></li>
<li>终止当前的<code>java虚拟机</code>，参数用作状态码；根据惯例，非<code>0</code> 的状态码表示异常终止,如<code>System.exit(0)</code></li>
</ul>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/lich/archive/2011/12/11/2284155.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/11/2284155.html</a></li>
<li><a href="http://ifeve.com/java-io-system-in-system-out-system-err/" target="_blank" rel="external">http://ifeve.com/java-io-system-in-system-out-system-err/</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;System对IO的支持&quot;&gt;&lt;a href=&quot;#System对IO的支持&quot; class=&quot;headerlink&quot; title=&quot;System对IO的支持&quot;&gt;&lt;/a&gt;System对IO的支持&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Syste
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记六</title>
    <link href="http://chenjiabing666.github.io/2017/05/25/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/"/>
    <id>http://chenjiabing666.github.io/2017/05/25/Java-IO学习笔记六/</id>
    <published>2017-05-25T07:33:09.000Z</published>
    <updated>2017-06-20T00:55:16.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><blockquote>
<ul>
<li>在整个<code>IO</code>包中，打印流是输出信息最方便的类，主要包含<strong>字节打印流</strong>（<code>PrintStream</code>）和<strong>字符打印流</strong>（<code>PrintWrite</code>）。打印流提供了非常方便的打印功能，可以打印任何的数据类型，例如：小数、整数、字符串等等，相对于前面学习的几个文件的操作来说，这里的打印流是最简便的一个类了</li>
</ul>
</blockquote>
<h2 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h2><blockquote>
<ul>
<li>主要功能是格式化的将内容写入文件，并不是打印在控制台上</li>
<li><code>PrintStream</code>最大的好处就是可以格式化的输出，相信学过<code>c</code>的朋友都知道<code>prinf</code>这格式化输出函数，这里的<code>PrintStream</code>实现了更加简单的格式化输出，不需要使用什么<code>%d</code>,<code>%f</code>了，只需要都是用<code>%s</code>即可，这个很像<code>python</code></li>
<li><code>PrintStream</code> 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 <code>PrintWriter</code>类。</li>
</ul>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>PrintStream(File file)</code>       创建具有指定文件且不带自动行刷新的新打印流。</li>
<li><code>PrintStream(OutputStream out)</code>    创建新的打印流。</li>
<li><code>PrintStream(OutputStream out, boolean autoFlush)</code>  创建新的打印流，并且设置自动刷新</li>
<li><code>PrintStream(String fileName)</code>   创建具有指定文件名称且不带自动行刷新的新打印流。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">File file_2=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">PrintStream printStream=<span class="keyword">new</span> PrintStream(file_2);  <span class="comment">//直接使用File</span></div><div class="line">PrintStream printStream=<span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(file_2));  <span class="comment">//使用OutputStream的子类FileOutputStream</span></div></pre></td></tr></table></figure>
<h3 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h3><blockquote>
<ul>
<li><p><code>PrintStream append(char c)</code>  在此输入流的后面追加字符。</p>
</li>
<li><p><code>PrintStream    append(CharSequence csq)</code>  将指定字符序列添加到此输出流。</p>
</li>
<li><p><code>PrintStream    append(CharSequence csq, int start, int end)</code>   将指定字符序列的子序列添加到此输出流。</p>
</li>
<li><p><code>print()</code>  打印常用的数据类型，比如<code>String</code>,<code>char</code>,<code>int</code> ,<code>double</code>,<code>float</code>,<code>boolean</code>,<code>long</code>,<code>short</code></p>
</li>
<li><code>println()</code>  打印常用的数据类型，但是带有换行符</li>
<li><code>printf(String format, Object... args)</code> 使用指定格式字符串和参数将格式化的字符串写入此输出流的便捷方法。</li>
<li><code>format(String format, Object... args)</code>  使用指定格式字符串和参数将格式化字符串写入此输出流中。</li>
<li><code>close()</code></li>
<li><code>flush()</code></li>
</ul>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">package</span> IO;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 17-5-25.</div><div class="line"> */</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">/**test.txt文件中的结果如下:</span></div><div class="line"> 陈加兵</div><div class="line"> 2299.9</div><div class="line"> 姓名:陈加兵,n年龄:22,成绩:99.9</div><div class="line"> 姓名:陈加兵,n年龄:22,成绩:99.9</div><div class="line"> c</div><div class="line"> chenjiabi</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo9</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        PrintStream printStream = <span class="keyword">null</span>;</div><div class="line">        File file_1 = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span>);</div><div class="line">        File file_2 = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">if</span> (!file_1.exists()) &#123;</div><div class="line">            file_1.mkdir();</div><div class="line">            System.out.println(<span class="string">"文件创建成功"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//            PrintStream printStream=new PrintStream(file_2);</span></div><div class="line">            printStream = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(file_2));</div><div class="line">            String name = <span class="string">"陈加兵"</span>;</div><div class="line">            <span class="keyword">int</span> age = <span class="number">22</span>;</div><div class="line">            <span class="keyword">float</span> grade = <span class="number">99.9f</span>;</div><div class="line"></div><div class="line">            printStream.println(name);<span class="comment">//println()</span></div><div class="line"></div><div class="line">            printStream.print(age);<span class="comment">//print()</span></div><div class="line"></div><div class="line">            printStream.println(grade);<span class="comment">//print()</span></div><div class="line"></div><div class="line">            printStream.format(<span class="string">"姓名:%s,n年龄:%s,成绩:%s%s"</span>, name, age, grade, <span class="string">"\n"</span>);<span class="comment">//format()</span></div><div class="line"></div><div class="line">            printStream.printf(<span class="string">"姓名:%s,n年龄:%s,成绩:%s%s"</span>, name, age, grade, <span class="string">"\n"</span>);</div><div class="line"></div><div class="line">            printStream.append(<span class="string">'c'</span>);   <span class="comment">//append</span></div><div class="line">            printStream.append(<span class="string">"\nchenjiabing"</span>,<span class="number">0</span>,<span class="number">10</span>);  <span class="comment">//append</span></div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (printStream != <span class="keyword">null</span>) &#123;</div><div class="line">                printStream.flush();</div><div class="line">                printStream.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h2><blockquote>
<ul>
<li>继承<code>Writer</code>，主要针对的是字符流的操作</li>
<li><p>向文本输出流打印对象的格式化表示形式。此类实现在 <code>PrintStream</code>中的所有 <code>print</code> 方法。它不包含用于写入原始字节的方法，对于这些字节，程序应该使用未编码的字节流进行写入。</p>
</li>
<li><p>与<code>PrintStream</code> 类不同，如果启用了自动刷新，则只有在调用 <code>println</code>、<code>printf</code> 或 <code>format</code> 的其中一个方法时才可能完成此操作，而不是每当正好输出换行符时才完成。这些方法使用平台自有的行分隔符概念，而不是换行符。</p>
</li>
<li><p>此类中的方法不会抛出 <code>I/O</code> 异常，尽管其某些构造方法可能抛出异常。客户端可能会查询调用 <code>checkError()</code> 是否出现错误。</p>
</li>
</ul>
</blockquote>
<h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>PrintWriter(File file)</code>   使用指定文件创建不具有自动行刷新的新 <code>PrintWriter</code>。</li>
<li><code>PrintWriter(OutputStream out)</code>   根据现有的 <code>OutputStream</code> 创建不带自动行刷新的新 <code>PrintWriter</code>。</li>
<li><code>PrintWriter(OutputStream out, boolean autoFlush)</code>     通过现有的 <code>OutputStream</code> 创建新的 <code>PrintWriter</code>。</li>
<li><code>PrintWriter(String fileName)</code>   创建具有指定文件名称且不带自动行刷新的新 <code>PrintWriter</code>。</li>
</ul>
</blockquote>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><blockquote>
<p>这里的常用到的函数和<code>PrintStream</code>的差不多就不再详细的列出来了，详情请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/io/PrintWriter.html" target="_blank" rel="external">帮助文档</a></p>
</blockquote>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> IO;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 17-5-25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo10</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        PrintWriter printWriter=<span class="keyword">null</span>;</div><div class="line">        File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"file.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            printWriter=<span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(file));</div><div class="line">            printWriter.println(<span class="string">"chenjiabing"</span>);</div><div class="line">            printWriter.println(<span class="string">"陈加兵"</span>);</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">if</span>(printWriter!=<span class="keyword">null</span>)</div><div class="line">                &#123;</div><div class="line">                    printWriter.close();</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/lich/archive/2011/12/11/2284093.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/11/2284093.html</a></li>
<li><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/io/PrintWriter.html" target="_blank" rel="external">http://tool.oschina.net/uploads/apidocs/jdk-zh/java/io/PrintWriter.html</a></li>
<li><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/io/PrintStream.html" target="_blank" rel="external">http://tool.oschina.net/uploads/apidocs/jdk-zh/java/io/PrintStream.html</a></li>
<li><a href="http://blog.csdn.net/yyyandroid/article/details/7756390" target="_blank" rel="external">http://blog.csdn.net/yyyandroid/article/details/7756390</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;打印流&quot;&gt;&lt;a href=&quot;#打印流&quot; class=&quot;headerlink&quot; title=&quot;打印流&quot;&gt;&lt;/a&gt;打印流&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在整个&lt;code&gt;IO&lt;/code&gt;包中，打印流是输出信息最方便的类，主要包含&lt;strong&gt;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记五</title>
    <link href="http://chenjiabing666.github.io/2017/05/25/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/"/>
    <id>http://chenjiabing666.github.io/2017/05/25/Java-IO学习笔记五/</id>
    <published>2017-05-25T07:33:00.000Z</published>
    <updated>2017-06-20T00:55:41.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h1><blockquote>
<ul>
<li><p>管道流的主要作用是可以进行两个<strong>线程间的通讯</strong>，分为管道输出流(<code>PipedOutputStream</code>)、管道输入流（<code>PipedInputStream</code>），如果想要进行管道输出，则必须要把输出流连在输入流之上，在PipedOutputStream类上有如下的一个方法用于连接管道：<br><code>public void connect(PipedInputStream snk)throws IOException</code></p>
</li>
<li><p>通常是创建两个单独的线程来实现通信，如果是单个线程的话容易出现线程堵塞，因为输出流最多只能向缓冲区写入1024个字节的数据，如果超出就会出现线程堵塞，因此必须创建多个线程实现缓冲区的释放和存储</p>
</li>
</ul>
</blockquote>
<h2 id="PipedOutputStream"><a href="#PipedOutputStream" class="headerlink" title="PipedOutputStream"></a>PipedOutputStream</h2><blockquote>
<ul>
<li>管道输出流是管道的发送端，可以将管道输出流连接到管道输入流来创建一个通信管道，通常，数据由某个线程写入 <code>PipedOutputStream</code>对象，并由其他线程从连接的 <code>PipedInputStream</code> 读取。不建议对这两个对象尝试使用单个线程，因为这样可能会造成该线程死锁。如果某个线程正从连接的管道输入流中读取数据字节，但该线程不再处于活动状态，则该管道被视为处于 毁坏 状态。</li>
</ul>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>PipedOutputStream()</code>  创建尚未连接到管道输入流的管道输出流。</li>
<li><code>PipedOutputStream(PipedInputStream snk)</code>   创建连接到指定管道输入流的管道输出流。</li>
</ul>
</blockquote>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><blockquote>
<ul>
<li><code>close()</code>  关闭</li>
<li><code>void    connect(PipedInputStream snk)</code>  将此管道输出流连接到接收者。</li>
<li><code>void    flush()</code>    刷新此输出流并强制写出所有缓冲的输出字节。</li>
<li><code>void    write(byte[] b, int off, int len)</code>      将 <code>len</code> 字节从初始偏移量为 <code>off</code> 的指定 <code>byte</code> 数组写入该管道输出流。</li>
<li><code>void    write(int b)</code>    将指定 <code>byte</code> 写入传送的输出流。</li>
</ul>
</blockquote>
<h2 id="PipedInputStream"><a href="#PipedInputStream" class="headerlink" title="PipedInputStream"></a>PipedInputStream</h2><blockquote>
<ul>
<li>管道输入流应该连接到管道输出流；管道输入流提供要写入管道输出流的所有数据字节。通常，数据由某个线程从 <code>PipedInputStream</code> 对象读取，并由其他线程将其写入到相应的 <code>PipedOutputStream</code>。不建议对这两个对象尝试使用单个线程，因为这样可能死锁线程。管道输入流包含一个缓冲区，可在缓冲区限定的范围内将读操作和写操作分离开。 如果向连接管道输出流提供数据字节的线程不再存在，则认为该管道已损坏。</li>
</ul>
</blockquote>
<h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>PipedInputStream()</code>    创建尚未连接的 <code>PipedInputStream</code>。</li>
<li><code>PipedInputStream(PipedOutputStream src)</code>    创建 <code>PipedInputStream</code>，使其连接到管道输出流 <code>src</code>。</li>
</ul>
</blockquote>
<h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><blockquote>
<ul>
<li><code>int    available()</code>   返回可以不受阻塞地从此输入流中读取的字节数。</li>
<li><code>void    close()</code>   关闭此管道输入流并释放与该流相关的所有系统资源。</li>
<li><code>void    connect(PipedOutputStream src)</code>    使此管道输入流连接到管道输出流 <code>src</code>。</li>
<li><code>int    read()</code>  读取此管道输入流中的下一个数据字节。</li>
<li><code>int read(byte[] b, int off, int len)</code>    将最多 <code>len</code> 个数据字节从此管道输入流读入 <code>byte</code> 数组。</li>
<li><code>protected  void    receive(int b)</code>   接收数据字节。</li>
</ul>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> IO;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PipedInputStream;</div><div class="line"><span class="keyword">import</span> java.io.PipedOutputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 17-5-25.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 注意的问题：</div><div class="line"> * 1.写线程正在往缓冲区写数据的时候，但是此时的读线程的管道结束，那么此时的写线程的管道就会发生IOException异常</div><div class="line"> * 2.读线程正在从缓冲区读数据的时候，但是此时的写线程的管道已经结束了，此时就会引起读线程的管道发生IOException异常</div><div class="line"> * 3.必须是启用多线程才能实现管道之间的读写，否则会出现堵塞现象，因为这里的PipeOutputStream每次向缓冲区写入的字节数最大是1024，如果不及时的减少缓冲区的数据量就会出现堵塞</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo7</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PipedOutputStream outputStream = <span class="keyword">new</span> PipedOutputStream();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PipedInputStream inputStream = <span class="keyword">new</span> PipedInputStream();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建一个写入数据进程，使用的是PipeOutStream，将数据写入管道中</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2000</span>];     <span class="comment">//创建一个2000字节的数组</span></div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        outputStream.write(bytes, <span class="number">0</span>, <span class="number">2000</span>);  <span class="comment">//写入管道，但是这里的缓冲区最多写入1024个字节的数据，因此这个是一次没有写完</span></div><div class="line">                        System.out.println(<span class="string">"写入成功"</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                        System.out.println(<span class="string">"写入失败"</span>);</div><div class="line">                        System.exit(<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用PipeInputStream创建一个读取的线程</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];  <span class="comment">//一次性只读取100个字节</span></div><div class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    len = inputStream.read(bytes, <span class="number">0</span>, <span class="number">100</span>);  <span class="comment">//读取</span></div><div class="line">                    <span class="keyword">while</span> (len != -<span class="number">1</span>) &#123;</div><div class="line">                        System.out.println(<span class="string">"已经读取了"</span> + len + <span class="string">"个字节"</span>);</div><div class="line">                        len = inputStream.read(bytes, <span class="number">0</span>, <span class="number">100</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line"></div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    System.out.println(<span class="string">"读取失败"</span>);</div><div class="line">                    System.exit(<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputStream.connect(outputStream);  <span class="comment">//连接</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(<span class="string">"连接失败"</span>);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        send();</div><div class="line">        receive();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong>从上面的运行结果可以看出，缓冲区最多可以写入<code>1024</code>个字节的数据，所以在缓冲区满了之后上面的<code>send</code>进程就会堵塞等待缓冲区空闲，如果<code>recieve</code>进程不继续读取数据了，那么就会一直出现堵塞</p>
</blockquote>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<ul>
<li>写线程正在往缓冲区写数据的时候，但是此时的读线程的结束读取，那么此时的写线程的管道就会发生<code>IOException</code>异常，可以将上面<code>receive</code>进程中的<code>while(true)</code>去掉就可以清楚的看出</li>
<li>读线程正在从缓冲区读数据的时候，但是此时的写线程的管道已经结束了，此时就会引起读线程的管道发生<code>IOException</code>异常,将上面的<code>send</code>进程中的<code>while(true)</code>去掉就可以实现这个问题</li>
<li>必须是启用多线程才能实现管道之间的读写，否则会出现堵塞现象，因为这里的<code>PipeOutputStream</code>每次向缓冲区写入的字节数最大是<code>1024</code>，如果不及时的减少缓冲区的数据量就会出现堵塞</li>
</ul>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<ul>
<li>后续更新中……….</li>
</ul>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/lich/archive/2011/12/11/2283928.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/11/2283928.html</a></li>
<li><a href="http://ifeve.com/java-io-%E7%AE%A1%E9%81%93/" target="_blank" rel="external">http://ifeve.com/java-io-%E7%AE%A1%E9%81%93/</a></li>
<li><a href="http://www.cnblogs.com/chinareny2k/archive/2010/03/24/1693878.html" target="_blank" rel="external">http://www.cnblogs.com/chinareny2k/archive/2010/03/24/1693878.html</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;管道流&quot;&gt;&lt;a href=&quot;#管道流&quot; class=&quot;headerlink&quot; title=&quot;管道流&quot;&gt;&lt;/a&gt;管道流&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;管道流的主要作用是可以进行两个&lt;strong&gt;线程间的通讯&lt;/strong&gt;，分为管道输
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记四</title>
    <link href="http://chenjiabing666.github.io/2017/05/25/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/"/>
    <id>http://chenjiabing666.github.io/2017/05/25/Java-IO学习笔记四/</id>
    <published>2017-05-25T07:32:49.000Z</published>
    <updated>2017-06-20T00:55:36.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存操作流"><a href="#内存操作流" class="headerlink" title="内存操作流"></a>内存操作流</h1><blockquote>
<p>之前的所有的流操作都是针对文件的，但是有时候只是想要实现数据间转换，此时如果我们想要创建一个文件然后再删除文件，那样显得有点麻烦，因此此时的内存操作流就显得很适合这类的操作，因为它只是在内存中存储，并不会真正的创建文件，内存操作流涉及的两个类是<code>ByteArrayInputStream</code>,<code>ByteArrayOutputStream</code>.</p>
</blockquote>
<h2 id="ByteArrayInputStream"><a href="#ByteArrayInputStream" class="headerlink" title="ByteArrayInputStream"></a>ByteArrayInputStream</h2><blockquote>
<ul>
<li><code>ByteArrayInputStream</code> 包含一个内部缓冲区，该缓冲区包含从流中读取的字节。内部计数器跟踪<code>read</code>方法要提供的下一个字节。</li>
<li>关闭 <code>ByteArrayInputStream</code>无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何 <code>IOException</code>。</li>
<li>主要的功能是从缓冲区读取字节</li>
</ul>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>ByteArrayInputStream(byte[] buf)</code>   创建一个 <code>ByteArrayInputStream</code>，使用 <code>buf</code> 作为其缓冲区数组。</li>
<li><code>ByteArrayInputStream(byte[] buf, int offset, int length)</code>    创建 <code>ByteArrayInputStream</code>，使用 buf 作为其缓冲区数组。</li>
</ul>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>close()</code>  不过对这个无效，因为关闭之后仍然可以使用函数读取而不报错</li>
<li><code>int read()</code> 从缓冲区中读取一个字节</li>
<li><code>int read(byte[] bytes)</code>  将缓冲区中的内容读取到数组中</li>
<li><code>int read(byte[] bytes,int off,int len)</code>    将最多 <code>len</code> 个数据字节从此输入流读入 <code>byte</code> 数组。</li>
<li><code>long skip(long n)</code>    从此输入流中跳过<code>n</code> 个输入字节。</li>
<li><code>void reset()</code>  将此 byte 数组输出流的 count 字段重置为零，从而丢弃输出流中目前已累积的所有输出（清除缓冲区）</li>
</ul>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo8</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        String str = <span class="string">"chenjiabing\n陈加兵"</span>;</div><div class="line">        <span class="keyword">byte</span>[] bytes = str.getBytes();  <span class="comment">//创建一个数组</span></div><div class="line">        ByteArrayInputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);  <span class="comment">//使用bytes作为缓冲区数组</span></div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">        <span class="comment">/*第一种方法读取缓冲区中的数据，这个和文件的操作不一样，这个可以直接冲缓冲区中读取数据字节*/</span></div><div class="line">        <span class="keyword">while</span> ((temp = inputStream.read()) != -<span class="number">1</span>) &#123;</div><div class="line">            System.out.print((<span class="keyword">char</span>) temp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*创建数组用于存储读取的内容，下面是第二种读取数据的方法*/</span></div><div class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[bytes.length];</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> len = inputStream.read(b);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="keyword">new</span> String(b));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ByteArrayOutputStream"><a href="#ByteArrayOutputStream" class="headerlink" title="ByteArrayOutputStream"></a>ByteArrayOutputStream</h2><blockquote>
<ul>
<li><p>此类实现了一个输出流，其中的数据被写入一个<code>byte</code> 数组。缓冲区会随着数据的不断写入而自动增长。可使用 <code>toByteArray()</code> 和 toString() 获取数据。</p>
</li>
<li><p>关闭 <code>ByteArrayOutputStream</code> 无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何 <code>IOException</code>。</p>
</li>
</ul>
</blockquote>
<h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>ByteArrayOutputStream()</code>     创建一个新的 <code>byte</code>数组输出流。</li>
<li><code>ByteArrayOutputStream(int size)</code>    创建一个新的 <code>byte</code> 数组输出流，它具有指定大小的缓冲区容量（以字节为单位）。</li>
</ul>
</blockquote>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><blockquote>
<ul>
<li><p><code>int size()</code>    返回缓冲区的当前大小。</p>
</li>
<li><p><code>byte[] toByteArray()</code>    创建一个新分配的 <code>byte</code> 数组。</p>
</li>
<li><p><code>String toString()</code>   将缓冲区的字节转换成字符串</p>
</li>
<li><p><code>void    write(byte[] b, int off, int len)</code>  将指定 <code>byte</code> 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此 <code>byte</code> 数组输出流。</p>
</li>
<li><p><code>void    write(int b)</code>    将指定的字节写入此 <code>byte</code>数组输出流。</p>
</li>
</ul>
</blockquote>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo8</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        String str = <span class="string">"chenjiabing"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            outputStream.write(str.getBytes());   <span class="comment">//将字符串转换成数组然后写入缓冲区</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                outputStream.close();  <span class="comment">//这里的关闭无效</span></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将缓冲区的数据转换成字符串后输出，这里同样可以看出输出流的关闭根本不影响函数的调用</span></div><div class="line">        System.out.println(outputStream.size());  <span class="comment">//输出缓冲区的大小</span></div><div class="line">        System.out.println(outputStream.toString());  <span class="comment">//输出chenjiabing</span></div><div class="line">        outputStream.reset();   <span class="comment">//清除缓冲区的内容，如果不清零那么原先写入的数据还是存在的，但是此时我们已经不需要前面的数据了</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            outputStream.write(<span class="string">"陈加兵"</span>.getBytes());  <span class="comment">//继续向缓冲区写入数据</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(outputStream.size());  <span class="comment">//这里的一个汉字占了三个字节</span></div><div class="line">        System.out.println(outputStream.toString());<span class="comment">//输出陈加兵</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><blockquote>
<p>下面我们结合上面的两个类将<strong>字符串转换大小写</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo8</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        String str = <span class="string">"chenjiabing"</span>;</div><div class="line">        ByteArrayInputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(str.getBytes());  <span class="comment">//实例化输入流</span></div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ((temp = inputStream.read()) != -<span class="number">1</span>)   <span class="comment">//读取缓冲区的字节数据</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> c = (<span class="keyword">char</span>) temp;  <span class="comment">//将整数转换成字符，ascii码的转换</span></div><div class="line">            outputStream.write(Character.toUpperCase(c));  <span class="comment">//转换成大写，然后写入输出流的缓冲区中</span></div><div class="line">        &#125;</div><div class="line">        System.out.println(outputStream.toString());   <span class="comment">//利用输出流输出转换后的字符串，即是去取出内存中的数据</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><p><a href="http://blog.csdn.net/yyyandroid/article/details/7756390" target="_blank" rel="external">http://blog.csdn.net/yyyandroid/article/details/7756390</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/lich/archive/2011/12/11/2283883.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/11/2283883.html</a></p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内存操作流&quot;&gt;&lt;a href=&quot;#内存操作流&quot; class=&quot;headerlink&quot; title=&quot;内存操作流&quot;&gt;&lt;/a&gt;内存操作流&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前的所有的流操作都是针对文件的，但是有时候只是想要实现数据间转换，此时如果我们想要创建一
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记三</title>
    <link href="http://chenjiabing666.github.io/2017/05/24/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>http://chenjiabing666.github.io/2017/05/24/Java-IO学习笔记三/</id>
    <published>2017-05-24T06:48:34.000Z</published>
    <updated>2017-06-20T00:55:30.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-IO学习笔记三"><a href="#Java-IO学习笔记三" class="headerlink" title="Java IO学习笔记三"></a>Java IO学习笔记三</h1><blockquote>
<ul>
<li><p>在整个<code>IO</code>包中，实际上就是分为字节流和字符流，但是除了这两个流之外，还存在了一组字节流-字符流的转换类。</p>
</li>
<li><p><code>OutputStreamWriter</code>：是<code>Writer</code>的子类，将输出的字符流变为字节流，即：将一个字符流的输出对象变成字节流的输出对象。</p>
</li>
<li><p><code>InputStreamReader</code>:是<code>Reader</code>的子类，将输入的字节流变为字符流，即：将一个字节流的输入对象变成字符流的输入对象。</p>
</li>
<li><p>一般在操作输入输出内容就需要使用字节或字符流，但是有些时候需要将字符流变成字节流的形式，或者将字节流变为字符流的形式，所以，就需要另外一组转换流的操作类。</p>
</li>
</ul>
</blockquote>
<h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><blockquote>
<ul>
<li><p><code>InputStreamReader</code> 是字节流通向字符流的桥梁：它使用指定的 <code>charset</code> 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。</p>
</li>
<li><p>每次调用 <code>InputStreamReader</code> 中的一个 <code>read()</code> 方法都会导致从底层输入流读取一个或多个字节。要启用从字节到字符的有效转换，可以提前从底层流读取更多的字节，使其超过满足当前读取操作所需的字节。</p>
</li>
<li><p>主要的功能还是从文件中读取内容，不过是一次性的读取多个字节，这个很像它的子类<code>FileReader</code></p>
</li>
</ul>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>InputStreamReader(InputStream in)</code> 创建一个使用默认字符集的 <code>InputStreamReader</code>,不过这里的<code>InputStream</code>是抽下类，因此可以使用它的子类<code>FileInputStream</code>实例化，这里的<code>FileInputStream</code>是操作字节流的，显然看出这个类的作用就是字符流和字节流的桥梁</li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>close()</code></li>
<li><code>int read()</code> 读取单个字符</li>
<li><code>int read(Char[] c)</code> 读取字符存储在字符数组中</li>
<li><code>int    read(char[] cbuf, int offset, int length)</code> 将字符读入数组中的某一部分</li>
<li><code>boolean    ready()</code>   判断此流是否已经准备好用于读取。</li>
</ul>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> IO;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 17-5-24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo4</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line">        InputStreamReader inputStreamReader = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputStreamReader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));  <span class="comment">//初始化</span></div><div class="line">            <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) file.length()];   <span class="comment">//创建数组</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> len = inputStreamReader.read(c);   <span class="comment">//将内容读取到数组中</span></div><div class="line">                System.out.println(len);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</div><div class="line">                    System.out.print(c[i]);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(inputStreamReader!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStreamReader.close();   <span class="comment">//关闭</span></div><div class="line">                &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>从上面的代码中可以看到这个和<code>FileReader</code>的操作是一样的，只是构造的方法不一样</p>
</blockquote>
<h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><blockquote>
<ul>
<li><p><code>OutputStreamWriter</code> 是字符流通向字节流的桥梁：可使用指定的 charset 将要写入流中的字符编码成字节。它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。</p>
</li>
<li><p>每次调用 <code>write()</code> 方法都会导致在给定字符（或字符集）上调用编码转换器。在写入底层输出流之前，得到的这些字节将在缓冲区中累积。可以指定此缓冲区的大小，不过，默认的缓冲区对多数用途来说已足够大。注意，传递给 <code>write()</code> 方法的字符没有缓冲。</p>
</li>
<li><p>主要的功能还是向文件中写入文件</p>
</li>
</ul>
</blockquote>
<h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>OutputStreamWriter(OutputStream out)</code>   创建使用默认字符编码的 <code>OutputStreamWriter</code>。这里同样是抽象类，所以用它的子类<code>FileOutputStream</code>实例化</li>
</ul>
</blockquote>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>close()</code></li>
<li><code>flush()</code></li>
<li><code>write(String str)</code>  写入字符串</li>
<li><code>void    write(String str, int off, int len)</code>  写入字符串的某一部分。</li>
<li><code>write(int c)</code>  写入单个字符</li>
<li><code>void    write(char[] cbuf, int off, int len)</code>   写入字符数组的某一部分。</li>
</ul>
</blockquote>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> IO;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 17-5-24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo5</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">        OutputStreamWriter outputStreamWriter=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            outputStreamWriter=<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>));</div><div class="line">            String str=<span class="string">"陈加兵\n"</span>;</div><div class="line">            <span class="keyword">int</span> data=<span class="number">48</span>;</div><div class="line">            String name=<span class="string">"chenjiabing"</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                outputStreamWriter.write(str);</div><div class="line">                outputStreamWriter.write(data);</div><div class="line">                outputStreamWriter.write(name,<span class="number">0</span>,<span class="number">2</span>);   <span class="comment">//写入字符串的一部分</span></div><div class="line">            &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">            &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(outputStreamWriter!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    outputStreamWriter.flush();</div><div class="line">                    outputStreamWriter.close();</div><div class="line">                &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>从上面可以看出<code>OutputStreamWriter</code>和<code>FileWriter</code>的用法一样</strong></p>
</blockquote>
<h2 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h2><blockquote>
<p>上面我们说了OutputStreamWriter和InputStreamWriter是字节流和字符流之间的桥梁，可以实现之间的转换，下面我们使用这两个之间的相互转换完成高效流的创建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * InputStreamReader实现了将字节流FileInputStream转换为字符流，然后使用转换来的字节流创建高效流，从而实现高效的读写</div><div class="line"> */</div><div class="line"></div><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"/tmp/demo.txt"</span>);</div><div class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file); <span class="comment">// 创建字节输入流</span></div><div class="line">InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(</div><div class="line">		fileInputStream); <span class="comment">// 转换为字符输入流</span></div><div class="line">BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader); <span class="comment">// 创建高效流对象</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/lich/archive/2011/12/11/2283848.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/11/2283848.html</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-IO学习笔记三&quot;&gt;&lt;a href=&quot;#Java-IO学习笔记三&quot; class=&quot;headerlink&quot; title=&quot;Java IO学习笔记三&quot;&gt;&lt;/a&gt;Java IO学习笔记三&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在整个&lt;code
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记二</title>
    <link href="http://chenjiabing666.github.io/2017/05/24/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://chenjiabing666.github.io/2017/05/24/Java-IO学习笔记二/</id>
    <published>2017-05-24T06:46:06.000Z</published>
    <updated>2017-06-20T00:55:10.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-IO学习笔记二"><a href="#Java-IO学习笔记二" class="headerlink" title="Java IO学习笔记二"></a>Java IO学习笔记二</h1><h2 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h2><blockquote>
<ul>
<li>在程序中所有的数据都是以流的方式进行传输或保存的，程序需要数据的时候要使用输入流读取数据，而当程序需要将一些数据保存起来的时候，就要使用输出流完成。</li>
<li>程序中的输入输出都是以流的形式保存的，流中保存的实际上全都是字节文件。</li>
</ul>
</blockquote>
<h2 id="字节流和字符流"><a href="#字节流和字符流" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h2><blockquote>
<ul>
<li>实际上<strong>字节流</strong>在操作时本身不会用到缓冲区（内存），是文件本身直接操作的，而<strong>字符流</strong>在操作时使用了缓冲区，通过缓冲区再操作文件</li>
<li>在java.io包中操作文件内容的主要有两大类：字节流、字符流，两类都分为输入和输出操作。在字节流中输出数据主要是使用OutputStream完成，输入使的是InputStream，在字符流中输出主要是使用Writer类完成，输入流主要使用Reader类完成。（这四个都是抽象类）</li>
</ul>
</blockquote>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><blockquote>
<p>在Java中IO操作也是有相应步骤的，以文件操作为例，主要的操作流程如下：</p>
<blockquote>
<ol>
<li>使用<code>File</code>类打开一个文件</li>
<li>通过字节流或字符流的子类，指定输出的位置</li>
<li>进行读/写操作</li>
<li>关闭输入/输出</li>
</ol>
</blockquote>
</blockquote>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><blockquote>
<p><em>字节流主要是操作byte类型数据，以byte数组为准，主要操作类就是<code>OutputStream</code>、<code>InputStream</code></em></p>
</blockquote>
<h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><blockquote>
<ul>
<li><p>文件<strong>输出流</strong>是用于将数据写入 File 或 FileDescriptor 的输出流。文件是否可用或能否可以被创建取决于基础平台。特别是某些平台一次只允许一个 FileOutputStream（或其他文件写入对象）打开文件进行写入。在这种情况下，如果所涉及的文件已经打开，则此类中的构造方法将失败。</p>
</li>
<li><p>FileOutputStream 用于写入诸如图像数据之类的原始字节的流。要写入字符流，请考虑使用 FileWriter。</p>
</li>
<li><p>主要的功能就是用来向文件中写入内容的</p>
</li>
</ul>
</blockquote>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><blockquote>
<ul>
<li><code>FileOutputStream(File file)</code>   创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</li>
<li><code>FileOutputStream(File file, boolean append)</code>  如果在文件后面追加内容，如果append为true则追加内容</li>
<li><code>FileOutputStream(String name)</code>     创建一个向具有指定名称的文件中写入数据的输出文件流。</li>
<li><code>FileOutputStream(String name, boolean append)</code>     创建一个向具有指定 name 的文件中写入数据的输出文件流。</li>
</ul>
</blockquote>
<h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h4><blockquote>
<ul>
<li><code>close()</code>  关闭文件输出流</li>
<li><code>void    write(byte[] b)</code>   将 b.length 个字节从指定 byte 数组写入此文件输出流中。</li>
<li><code>void    write(byte[] b, int off, int len)</code>   将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流，这里需要注意的是中文所占字节数为3，英文所占字节数为1</li>
<li><code>void write(int b)</code>  将指定字节写入此文件输出流，这个是按照ascii码写入文件的，并不是直接写入的是整数</li>
</ul>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> File_demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        FileOutputStream outputStream = <span class="keyword">null</span>;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> data = <span class="number">48</span>;</div><div class="line">                String name = <span class="string">"陈加兵\n"</span>;  <span class="comment">//使用\n换行</span></div><div class="line">                <span class="keyword">byte</span>[] bytes = name.getBytes();   <span class="comment">//将字符串转换成byte数组</span></div><div class="line">                outputStream.write(bytes, <span class="number">0</span>, <span class="number">3</span>);   <span class="comment">//将中文字符串的第一个字写入，这里一个中文占了三个字节</span></div><div class="line">                String age = <span class="string">"chenjiabing\n"</span>;  </div><div class="line">                outputStream.write(age.getBytes());</div><div class="line">                outputStream.write(data);  <span class="comment">//这里的写入的acsii码中的(</span></div><div class="line"></div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    outputStream.close();  <span class="comment">//关闭文件流</span></div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>当然也可以一个一个的字节输出</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:"</span> + File.separator+<span class="string">"test.txt"</span>);</div><div class="line">        OutputStream out=<span class="keyword">new</span> FileOutputStream(f);<span class="comment">//如果文件不存在会自动创建</span></div><div class="line">        String str=<span class="string">"Hello World"</span>;</div><div class="line">        <span class="keyword">byte</span>[] b=str.getBytes();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)&#123;</div><div class="line">            out.write(b[i]);</div><div class="line">        &#125;</div><div class="line">        out.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><blockquote>
<ul>
<li><code>FileInputStream</code> 从文件系统中的某个文件中获得输入字节。哪些文件可用取决于主机环境。</li>
<li><code>FileInputStream</code> 用于读取诸如图像数据之类的原始字节流。要读取字符流，请考虑使用 FileReader。</li>
<li>主要的功能是读取文件中的内容</li>
</ul>
</blockquote>
<h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><blockquote>
<ul>
<li><code>FileInputStream(File file)</code>    通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的File对file指定。</li>
<li><code>FileInputStream(String name)</code>   通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的路径名 name 指定。</li>
</ul>
</blockquote>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><blockquote>
<ul>
<li><code>int read()</code>  从输入流中读取数据字节，如果到达文件的末尾就返回-1</li>
<li><code>int    read(byte[] b)</code> 将文件中的内容读取到byte数组中，如果到达文件末尾返回-1</li>
<li><code>int    read(byte[] b, int off, int len)</code>   从此输入流中将最多 len 个字节的数据读入一个 byte 数组中,这个用于截取字节流，注意这里中文是占三个字节</li>
<li><code>long    skip(long n)</code>   从输入流中跳过并丢弃 n 个字节的数据，一旦跳过字节那么就从跳过的字节的后面开始读取</li>
<li><code>int    available()</code>返回的数据是输入流中的字节数，如果没有字节就返回0，<strong>因此可以用这个函数判断文件中是否还有内容</strong></li>
</ul>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li>针对知道的文件的大小然后创建一个数组存储，之后将数组转换成字符串，当然我们也可以一个一个的读取</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">        FileInputStream inputStream=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputStream=<span class="keyword">new</span> FileInputStream(file);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)file.length()];  <span class="comment">//file.length返回文件的大小，这样就不会浪内存空间了</span></div><div class="line">                <span class="keyword">int</span> flag=inputStream.read(bytes);    <span class="comment">//将文件的内容读入到数组中</span></div><div class="line">                System.out.println(<span class="keyword">new</span> String(bytes));    <span class="comment">//将bytes数组转换成字符串输出</span></div><div class="line">                System.out.println(flag);</div><div class="line">            &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">            &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStream.close();</div><div class="line">                &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>一个一个的读文件</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">        FileInputStream inputStream=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputStream=<span class="keyword">new</span> FileInputStream(file);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> len=<span class="number">0</span>;  <span class="comment">//读取的字节</span></div><div class="line">                <span class="keyword">int</span> i=<span class="number">0</span>;   <span class="comment">//下标</span></div><div class="line">                <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)file.length()];  <span class="comment">//创建数组</span></div><div class="line">                <span class="keyword">while</span>((len=inputStream.read())!=-<span class="number">1</span>)   <span class="comment">//判断是否读取到文件的末尾</span></div><div class="line">                &#123;</div><div class="line">                    bytes[i]=(<span class="keyword">byte</span>)len;   <span class="comment">//将读到的整形数据转换成bytes类型的，存储在数组中</span></div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="keyword">new</span> String(bytes));   <span class="comment">//转换成字符串</span></div><div class="line"></div><div class="line">            &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">            &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStream.close();</div><div class="line">                &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用available控制结束</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line">        FileInputStream inputStream = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];  <span class="comment">//file.length返回文件的大小，这样就不会浪内存空间了</span></div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (inputStream.available() != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        bytes[i] = (<span class="keyword">byte</span>) inputStream.read();</div><div class="line">                        i++;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line"></div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="keyword">new</span> String(bytes));</div><div class="line"></div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStream.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><blockquote>
<ul>
<li>在程序中一个字符等于两个字节，那么java提供了Reader、Writer两个专门操作字符流的类。</li>
<li>前面已经说过字符流要用到缓冲区，因此在关闭字符流的时候一定要刷新缓冲区,清空缓冲区中的内容</li>
</ul>
</blockquote>
<h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><blockquote>
<ul>
<li>用来写入字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是可接受的。</li>
<li><code>FileWriter</code> 用于写入字符流。要写入原始字节流，请考虑使用 <code>FileOutputStream</code>。</li>
<li>主要功能是向文件中写入内容</li>
</ul>
</blockquote>
<h4 id="构造函数-2"><a href="#构造函数-2" class="headerlink" title="构造函数"></a>构造函数</h4><blockquote>
<ul>
<li><code>FileWriter(File file)</code>   根据给定的 File 对象构造一个 FileWriter 对象。</li>
<li><code>FileWriter(File file,boolean append)</code>   追加</li>
<li><code>FileWriter(String fileName)</code>  根据给定的文件名构造一个 FileWriter 对象。</li>
<li><code>FileWriter(String fileName, boolean append)</code>    根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。</li>
</ul>
</blockquote>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><blockquote>
<ul>
<li><code>write(String str)</code>  将字符写入文件</li>
<li><code>write(String str,int offest,int len)</code>   截取字符串部分内容写入文件</li>
<li><code>write(int c)</code>   写入单个字符，并不是整数</li>
<li><code>write(Char[] buf)</code>  写入字符数组</li>
<li><code>close()</code>  关闭流，在关闭之前必须刷新缓冲区</li>
<li><code>flush()</code>  刷新缓冲区</li>
</ul>
</blockquote>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>+File.separator+<span class="string">"test.txt"</span>);</div><div class="line">        File f1=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">if</span>(!f1.exists())</div><div class="line">        &#123;</div><div class="line">            f1.mkdir();</div><div class="line">            System.out.println(<span class="string">"文件创建成功"</span>);</div><div class="line">        &#125;</div><div class="line">        FileWriter fileWriter=<span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fileWriter=<span class="keyword">new</span> FileWriter(file);</div><div class="line">            String str=<span class="string">"hello chenjiabing\n"</span>;</div><div class="line">            String name=<span class="string">"陈加兵"</span>;</div><div class="line">            <span class="keyword">int</span> data=<span class="number">48</span>;</div><div class="line">            fileWriter.write(str);   <span class="comment">//写入字符串</span></div><div class="line">            fileWriter.write(name);   <span class="comment">//写入中文字符串，这里直接写入不用转换成byte数组了</span></div><div class="line">            fileWriter.write(data);  <span class="comment">//写入单个字符</span></div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(fileWriter!=<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fileWriter.flush();  <span class="comment">//刷新缓冲区</span></div><div class="line">                    fileWriter.close();  <span class="comment">//关闭字符流</span></div><div class="line">                &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">                &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong> 这里字符流如果不关闭的话，那么就会就会写入文件失败，文件中没有内容，但是如果只有flush而没有close文件还是会写入成功的</p>
</blockquote>
<h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><blockquote>
<ul>
<li>用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的</li>
<li>主要的功能是读取文件内容</li>
</ul>
</blockquote>
<h4 id="构造函数-3"><a href="#构造函数-3" class="headerlink" title="构造函数"></a>构造函数</h4><blockquote>
<ul>
<li><code>FileReader(File file)</code>    在给定从中读取数据的 File 的情况下创建一个新 <code>FileReader</code>。</li>
<li><code>FileReader(String fileName)</code>  在给定从中读取数据的文件名的情况下创建一个新 <code>FileReader</code>。</li>
</ul>
</blockquote>
<h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><blockquote>
<ul>
<li><code>int read(char[] cbuf)</code>   将字符读入数组。</li>
<li><code>int read()</code>  读取单个字符，之后使用char类型强制转换成字符就行</li>
<li><code>read(char[] cbuf, int off, int len)</code>  将字符读入数组的某一部分。</li>
<li><code>boolean    ready()</code>   判断是否准备读取此流，如果读到文件末尾那么就返回false</li>
<li><code>long skip(long n)</code> 跳过字符。</li>
</ul>
</blockquote>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><blockquote>
<ul>
<li><p>用字符数组读取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line">        FileReader fileReader = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fileReader = <span class="keyword">new</span> FileReader(file);</div><div class="line">            <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) file.length()];  <span class="comment">//根据文件的大小申请数组大小，不浪费</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> len = fileReader.read(c);   <span class="comment">//将文件的内容读取到字符数组中</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;     </div><div class="line">                    System.out.println(c[i]);    <span class="comment">//将一个一个字符输出</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (fileReader != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fileReader.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>ready</code>控制是否读到文件末尾，当然也可以使用<code>int read()==-1</code>判断</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"/tmp"</span> + File.separator + <span class="string">"test"</span> + File.separator + <span class="string">"test.txt"</span>);</div><div class="line">        FileReader fileReader = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fileReader = <span class="keyword">new</span> FileReader(file);</div><div class="line">            <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) file.length()];  <span class="comment">//根据文件的大小申请数组大小，不浪费</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span>(fileReader.ready())    <span class="comment">//判断是否读到文件末尾</span></div><div class="line">                &#123;</div><div class="line">                    System.out.println((<span class="keyword">char</span>)fileReader.read());   <span class="comment">//转换成字符</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (fileReader != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    fileReader.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/lich/archive/2011/12/11/2283700.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/11/2283700.html</a></li>
<li><a href="http://www.cnblogs.com/absfree/p/5415092.html" target="_blank" rel="external">http://www.cnblogs.com/absfree/p/5415092.html</a></li>
<li><a href="http://blog.csdn.net/zxman660/article/details/7875799" target="_blank" rel="external">http://blog.csdn.net/zxman660/article/details/7875799</a></li>
<li><a href="http://blog.csdn.net/cynhafa/article/details/6882061" target="_blank" rel="external">http://blog.csdn.net/cynhafa/article/details/6882061</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-IO学习笔记二&quot;&gt;&lt;a href=&quot;#Java-IO学习笔记二&quot; class=&quot;headerlink&quot; title=&quot;Java IO学习笔记二&quot;&gt;&lt;/a&gt;Java IO学习笔记二&lt;/h1&gt;&lt;h2 id=&quot;流的概念&quot;&gt;&lt;a href=&quot;#流的概念&quot; cla
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO学习笔记一</title>
    <link href="http://chenjiabing666.github.io/2017/05/23/Java-IO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2017/05/23/Java-IO学习笔记一/</id>
    <published>2017-05-23T07:23:50.000Z</published>
    <updated>2017-06-20T00:55:48.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-IO学习笔记一"><a href="#Java-IO学习笔记一" class="headerlink" title="Java IO学习笔记一"></a>Java IO学习笔记一</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><blockquote>
<p><code>File</code>是文件和目录路径名的抽象表示形式，总的来说就是java创建删除文件目录的一个类库，但是作用不仅仅于此，详细见官方文档</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<ul>
<li><code>File(File parent, String child)</code> 根据 <code>parent</code> 抽象路径名和 <code>child</code> 路径名字符串创建一个新 File 实例。</li>
<li><code>File(String pathname)</code>        通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。</li>
<li><code>File(String parent, String child)</code>        根据 parent 路径名字符串和 <code>child</code> 路径名字符串创建一个新 <code>File</code> 实例。</li>
<li><code>File(URI uri)</code>    通过将给定的 <code>file: URI</code> 转换为一个抽象路径名来创建一个新的 File 实例。</li>
</ul>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp/demo"</span>); <span class="comment">//File(String pathname)</span></div><div class="line"></div><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>,<span class="string">"demo"</span>);     <span class="comment">//File(String parent, String child)</span></div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><blockquote>
<ul>
<li><code>static String pathSeparator</code>   与系统有关的路径分隔符，通常是:</li>
<li><code>static String separator</code>    与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。linux是/</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>+File.separator+<span class="string">"demo"</span>);   <span class="comment">//使用分隔符创建一个路径</span></div></pre></td></tr></table></figure>
<h4 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h4><blockquote>
<ul>
<li><code>boolean    canExecute()</code> 测试文件或者目录是否是可执行的，测试可执行权限</li>
<li><code>boolean    canRead()</code>  测试可读权限</li>
<li><code>boolean    canWrite()</code>    测试可写权限</li>
<li><code>boolean    setExecutable(boolean executable)</code> 设置文件或者目录的执行权限</li>
<li><code>setExecutable(boolean executable, boolean ownerOnly)</code> 设置执行权限，如果第二个为true那么只有创建这个文件的用户拥有执行权限</li>
<li><code>boolean    setReadable(boolean readable)</code> 设置可读的权限</li>
<li><code>boolean    setReadable(boolean readable, boolean ownerOnly)</code> 同上</li>
<li><code>boolean setReadOnly()</code>   标记此抽象路径名指定的文件或目录，从而只能对其进行读操作。</li>
<li><code>boolean setWritable(boolean writable)</code>  设置可写的权限</li>
<li><code>boolean    createNewFile()</code>   创建一个文件，这里创建的不是目录</li>
<li><code>boolean mkdir()</code>     创建文件夹</li>
<li><code>File    getAbsoluteFile()</code>  返回此抽象路径名的绝对路径名形式。</li>
<li><code>String    getAbsolutePath()</code>  返回此抽象路径名的绝对路径名字符串。</li>
<li><code>String    getName()</code> 返回由此抽象路径名表示的文件或目录的名称。</li>
<li><code>boolean    isDirectory()</code> 测试此抽象路径名表示的文件是否是一个目录。</li>
<li><code>boolean  isFile()</code>    测试此抽象路径名表示的文件是否是一个标准文件。</li>
<li><code>boolean isHidden()</code>      测试此抽象路径名指定的文件是否是一个隐藏文件。</li>
<li><code>String[]    list()</code>  返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中的文件和目录。</li>
<li><code>File[]    listFiles()</code>   返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。</li>
</ul>
</blockquote>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp/demo.txt"</span>);</div><div class="line">    <span class="keyword">if</span>(file.exists())<span class="comment">//如果文件存在就删除这个文件</span></div><div class="line">    &#123;</div><div class="line">        file.delete();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">     <span class="keyword">try</span>&#123;</div><div class="line">        file.createNewFile();   <span class="comment">//创建一个文件</span></div><div class="line">        file.setExecutable(<span class="keyword">false</span>);  <span class="comment">//设置执行权限</span></div><div class="line"></div><div class="line">    &#125;<span class="keyword">catch</span> (IOException e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(<span class="string">"/tmp"</span>,<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">if</span>(file.exists())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(file.isDirectory())  <span class="comment">//如果是一个文件夹</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"这是一个文件夹"</span>);</div><div class="line">                file.delete();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(file.isFile())   <span class="comment">//如果是一个文件</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"这是一个文件"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            file.mkdir();</div><div class="line">            file.setWritable(<span class="keyword">false</span>);  <span class="comment">//设置权限为不可读</span></div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="列出全部文件"><a href="#列出全部文件" class="headerlink" title="列出全部文件"></a>列出全部文件</h3><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><blockquote>
<p><strong>这个函数列出的是文件的名字并不是文件的路径</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File f=<span class="keyword">new</span> File(<span class="string">"d:"</span>+File.separator);</div><div class="line">         String[] str=f.list();   <span class="comment">//这里列出的仅仅是文件的名字，并不是文件的路径</span></div><div class="line">         <span class="keyword">for</span>(String s:str)&#123;</div><div class="line">             System.out.println(s);</div><div class="line">         &#125;</div></pre></td></tr></table></figure>
<h4 id="listFiles"><a href="#listFiles" class="headerlink" title="listFiles"></a>listFiles</h4><blockquote>
<p><strong>这个列出的是文件的绝对路径</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File f=<span class="keyword">new</span> File(<span class="string">"d:"</span>+File.separator);</div><div class="line">           File[] files=f.listFiles();</div><div class="line">          <span class="keyword">for</span>(File file:files)&#123;</div><div class="line">              System.out.println(file);</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/lich/archive/2011/12/10/2283445.html" target="_blank" rel="external">http://www.cnblogs.com/lich/archive/2011/12/10/2283445.html</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-IO学习笔记一&quot;&gt;&lt;a href=&quot;#Java-IO学习笔记一&quot; class=&quot;headerlink&quot; title=&quot;Java IO学习笔记一&quot;&gt;&lt;/a&gt;Java IO学习笔记一&lt;/h1&gt;&lt;h2 id=&quot;File&quot;&gt;&lt;a href=&quot;#File&quot; cla
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java IO编程" scheme="http://chenjiabing666.github.io/tags/java-IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python实现微信接口</title>
    <link href="http://chenjiabing666.github.io/2017/05/15/python%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3/"/>
    <id>http://chenjiabing666.github.io/2017/05/15/python实现微信接口/</id>
    <published>2017-05-14T19:44:21.000Z</published>
    <updated>2017-05-14T19:48:04.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python实现微信接口-itchat"><a href="#python实现微信接口-itchat" class="headerlink" title="python实现微信接口(itchat)"></a>python实现微信接口(itchat)</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<ul>
<li><code>sudo pip install itchat</code></li>
</ul>
</blockquote>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><blockquote>
<ul>
<li><code>itchat.auto_login()</code>  这种方法将会通过微信扫描二维码登录，但是这种登录的方式确实短时间的登录，并不会保留登录的状态，也就是下次登录时还是需要扫描二维码，如果加上<code>hotReload==True</code>,那么就会保留登录的状态，至少在后面的几次登录过程中不会再次扫描二维码，该参数生成一个静态文件<code>itchat.pkl</code>用于存储登录状态</li>
</ul>
</blockquote>
<h2 id="退出及登录完成后调用的特定的方法"><a href="#退出及登录完成后调用的特定的方法" class="headerlink" title="退出及登录完成后调用的特定的方法"></a>退出及登录完成后调用的特定的方法</h2><blockquote>
<p><em>这里主要使用的是灰调函数的方法,登录完成后的方法需要赋值在 <code>loginCallback</code>中退出后的方法,需要赋值在 <code>exitCallback</code>中.若不设置 <code>loginCallback</code>的值, 将会自动删除二维码图片并清空命令行显示.</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> itchat, time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lc</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Finash Login!"</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ec</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"exit"</span>)</div><div class="line"></div><div class="line">itchat.auto_login(loginCallback=lc, exitCallback=ec)</div><div class="line">time.sleep()</div><div class="line">itchat.logout()    <span class="comment">#强制退出登录</span></div></pre></td></tr></table></figure>
<h2 id="回复消息"><a href="#回复消息" class="headerlink" title="回复消息"></a>回复消息</h2><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><blockquote>
<ul>
<li><code>send(msg=&quot;Text Message&quot;, toUserName=None)</code></li>
</ul>
<blockquote>
<p><strong>参数：</strong></p>
<ul>
<li><code>msg</code> : 文本消息内容</li>
<li><code>@fil@path_to_file</code> : 发送文件</li>
<li><code>@img@path_to_img</code> : 发送图片</li>
<li><code>@vid@path_to_video</code> : 发送视频</li>
<li><code>toUserName</code> : 发送对象, 如果留空, 将发送给自己.</li>
</ul>
</blockquote>
<p><strong>返回值</strong></p>
<blockquote>
<ul>
<li><code>True</code> or <code>False</code></li>
</ul>
<p><strong>实例代码</strong></p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding-utf-8</span></div><div class="line"><span class="keyword">import</span> itchat</div><div class="line">itchat.auto_login()</div><div class="line">itchat.send(<span class="string">"Hello World!"</span>)</div><div class="line">ithcat.send(<span class="string">"@fil@%s"</span> % <span class="string">'/tmp/test.text'</span>)</div><div class="line">ithcat.send(<span class="string">"@img@%s"</span> % <span class="string">'/tmp/test.png'</span>)</div><div class="line">ithcat.send(<span class="string">"@vid@%s"</span> % <span class="string">'/tmp/test.mkv'</span>)</div></pre></td></tr></table></figure>
<h3 id="send-msg"><a href="#send-msg" class="headerlink" title="send_msg"></a>send_msg</h3><blockquote>
<ul>
<li><code>send_msg(msg=&#39;Text Message&#39;, toUserName=None)</code>,其中的的<code>msg</code>是要发送的文本，<code>toUserName</code>是发送对象, 如果留空, 将发送给自己，返回值为<code>True</code>或者<code>False</code></li>
</ul>
<p><strong>实例代码</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line">itchat.auto_login()</div><div class="line">itchat.send_msg(<span class="string">"hello world."</span>)</div></pre></td></tr></table></figure>
<h3 id="send-file"><a href="#send-file" class="headerlink" title="send_file"></a>send_file</h3><blockquote>
<ul>
<li><code>send_file(fileDir, toUserName=None)</code>  <code>fileDir</code>是文件路径, 当文件不存在时, 将打印无此文件的提醒，返回值为<code>True</code>或者<code>False</code></li>
</ul>
<p><strong>实例代码</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mport itchat</div><div class="line"></div><div class="line">itchat.auto_login()</div><div class="line">itchat.send_file(<span class="string">"/tmp/test.txt"</span>)</div></pre></td></tr></table></figure>
<h3 id="send-image"><a href="#send-image" class="headerlink" title="send_image"></a>send_image</h3><blockquote>
<ul>
<li><code>send_image(fileDir, toUserName=None)</code>  参数同上</li>
</ul>
<p><strong>实例代码</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line">itchat.auto_login()</div><div class="line">itchat.send_img(<span class="string">"/tmp/test.txt"</span>)</div></pre></td></tr></table></figure>
<h3 id="send-video"><a href="#send-video" class="headerlink" title="send_video"></a>send_video</h3><blockquote>
<ul>
<li><code>send_video(fileDir, toUserName=None)</code> 参数同上</li>
</ul>
<p><strong>实例代码</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"></div><div class="line">itchat.auto_login()</div><div class="line">itchat.send_video(<span class="string">"/tmp/test.txt"</span>)</div></pre></td></tr></table></figure>
<h2 id="注册消息方法"><a href="#注册消息方法" class="headerlink" title="注册消息方法"></a>注册消息方法</h2><blockquote>
<p><em><code>itchat</code> 将根据接受到的消息类型寻找对应的已注册的方法.</em><br><em>如果一个消息类型没有对应的注册方法, 该消息将会被舍弃.</em><br><em>在运行过程中也可以动态注册方法, 注册方式与结果不变.</em></p>
</blockquote>
<h3 id="注册方法"><a href="#注册方法" class="headerlink" title="注册方法"></a>注册方法</h3><blockquote>
<ul>
<li>不带具体对象注册, 将注册为普通消息的回复方法.</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</div><div class="line"><span class="meta">@itchat.msg_register(TEXT)   #这里的TEXT表示如果有人发送文本消息，那么就会调用下面的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_reply</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="comment">#这个是向发送者发送消息</span></div><div class="line">    itchat.send_msg(<span class="string">'已经收到了文本消息，消息内容为%s'</span>%msg[<span class="string">'Text'</span>],toUserName=msg[<span class="string">'FromUserName'</span>])</div><div class="line">    <span class="keyword">return</span> <span class="string">"T reveived: %s"</span> % msg[<span class="string">"Text"</span>]     <span class="comment">#返回的给对方的消息，msg["Text"]表示消息的内容</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>带对象参数注册, 对应消息对象将调用该方法，其中<code>isFriendChat</code>表示好友之间，<code>isGroupChat</code>表示群聊，<code>isMapChat</code>表示公众号</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat</div><div class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(TEXT, isFriendChat=True, isGroupChat=True,isMpChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span><span class="params">(msg)</span>:</span></div><div class="line">    msg.user.send(<span class="string">"%s : %s"</span> % (mst.type, msg.text))</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>消息类型<br><em>向注册方法传入的 <code>msg</code> 包含微信返回的字典的所有内容.<code>itchat</code> 增加 <code>Text</code>, <code>Type</code>(也就是参数) 键值, 方便操作.</em><br><strong><code>itcaht.content</code>中包含所有的消息类型参数, 如下表</strong></li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>l类型</th>
<th>Text 键值</th>
</tr>
</thead>
<tbody>
<tr>
<td>TEXT</td>
<td>文本</td>
<td>文本内容(文字消息)</td>
</tr>
<tr>
<td>MAP</td>
<td>地图</td>
<td>位置文本(位置分享)</td>
</tr>
<tr>
<td>CARD</td>
<td>名片</td>
<td>推荐人字典(推荐人的名片)</td>
</tr>
<tr>
<td>SHARING</td>
<td>分享</td>
<td>分享名称(分享的音乐或者文章等)</td>
</tr>
<tr>
<td>PICTURE        下载方法</td>
<td></td>
<td>图片/表情</td>
</tr>
<tr>
<td>RECORDING</td>
<td>语音</td>
<td>下载方法</td>
</tr>
<tr>
<td>ATTACHMENT</td>
<td>附件</td>
<td>下载方法</td>
</tr>
<tr>
<td>VIDEO</td>
<td>小视频</td>
<td>下载方法</td>
</tr>
<tr>
<td>FRIENDS</td>
<td>好友邀请</td>
<td>添加好友所需参数</td>
</tr>
<tr>
<td>SYSTEM</td>
<td>系统消息</td>
<td>更新内容的用户或群聊的UserName组成的列表</td>
</tr>
<tr>
<td>NOTE</td>
<td>通知</td>
<td>通知文本(消息撤回等)</td>
</tr>
</tbody>
</table>
<h3 id="附件的下载与发送"><a href="#附件的下载与发送" class="headerlink" title="附件的下载与发送"></a>附件的下载与发送</h3><blockquote>
<p><em><code>itchat</code> 的附件下载方法存储在 <code>msg</code> 的 <code>Text</code> 键中.</em><br><em>发送的文件名(图片给出的默认文件名), 都存储在 <code>msg</code> 的 <code>FileName</code> 键中.</em><br><em>下载方法, 接受一个可用的位置参数(包括文件名), 并将文件响应的存储.</em><br><strong><em>注意：下载的文件存储在指定的文件中，直接将路径与<code>FileName</code>连接即可，如<code>msg[&quot;Text&quot;](&#39;/tmp/weichat&#39;+msg[&#39;FileName&#39;])</code></em></strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@itchat.msg_register([PICTURE, RECORDING, ATTACHMENT, VIDEO])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_files</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="comment">#msg.download(msg['FileName'])   #这个同样是下载文件的方式</span></div><div class="line">    msg[<span class="string">'Text'</span>](msg[<span class="string">'FileName'</span>])      <span class="comment">#下载文件</span></div><div class="line">    <span class="comment">#将下载的文件发送给发送者</span></div><div class="line">    itchat.send(<span class="string">'@%s@%s'</span> % (<span class="string">'img'</span> <span class="keyword">if</span> msg[<span class="string">'Type'</span>] == <span class="string">'Picture'</span> <span class="keyword">else</span> <span class="string">'fil'</span>, msg[<span class="string">"FileName"</span>]), msg[<span class="string">"FromUserName"</span>])</div></pre></td></tr></table></figure>
<h3 id="群消息"><a href="#群消息" class="headerlink" title="群消息"></a>群消息</h3><blockquote>
<p><em>增加了三个键值，如下：</em></p>
<blockquote>
<ul>
<li><code>isAt</code> 判断是否 @ 本号</li>
<li><code>ActualNickName</code> : 实际 <code>NickName</code>(昵称)</li>
<li><code>Content</code> : 实际 <code>Content</code></li>
</ul>
</blockquote>
<p><strong>测试程序</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itcaht</div><div class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> TEXT</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register(TEXT, isGroupChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="keyword">if</span>(msg.isAt):    <span class="comment">#判断是否有人@自己</span></div><div class="line">    <span class="comment">#如果有人@自己，就发一个消息告诉对方我已经收到了信息</span></div><div class="line">    itchat.send_msg(<span class="string">"我已经收到了来自&#123;0&#125;的消息，实际内容为&#123;1&#125;"</span>.format(msg[<span class="string">'ActualNickName'</span>],msg[<span class="string">'Text'</span>]),toUserName=msg[<span class="string">'FromUserName'</span>])</div><div class="line"></div><div class="line">itchat.auto_login()</div><div class="line">itchat.run()</div></pre></td></tr></table></figure>
<h2 id="注册消息的优先级"><a href="#注册消息的优先级" class="headerlink" title="注册消息的优先级"></a>注册消息的优先级</h2><blockquote>
<p><em>总的来说就是后面注册同种类型的消息会覆盖之前注册的消息，详情见文档<a href="https://itchat.readthedocs.io/zh/latest/" target="_blank" rel="external">https://itchat.readthedocs.io/zh/latest/</a></em></p>
</blockquote>
<h2 id="消息内容"><a href="#消息内容" class="headerlink" title="消息内容"></a>消息内容</h2><blockquote>
<p><strong>注意：所有的消息内容都是可以用键值对来访问的，如<code>msg[&quot;FromUserName]</code>就是查看发送者，<code>itchat.search_friends(userName=msg[&#39;FromUserName&#39;])[&#39;NickName&#39;]</code>查看的是当发送者昵称</strong></p>
<h3 id="一般消息"><a href="#一般消息" class="headerlink" title="一般消息"></a>一般消息</h3><p><em>一般的消息都遵循以下的内容：</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"FromUserName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ToUserName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Content"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"StatusNotifyUserName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ImgWidth"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"PlayLength"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"RecommendInfo"</span>: &#123;&#125;,</div><div class="line">    <span class="string">"StatusNotifyCode"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"NewMsgId"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"Status"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"VoiceLength"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"ForwardFlag"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"AppMsgType"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"Ticket"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"AppInfo"</span>: &#123;&#125;,</div><div class="line">    <span class="string">"Url"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"ImgStatus"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"MsgType"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"ImgHeight"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"MediaId"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"MsgId"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"FileName"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"HasProductId"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"FileSize"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"CreateTime"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"SubMsgType"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="初始化消息"><a href="#初始化消息" class="headerlink" title="初始化消息"></a>初始化消息</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">MsgType: 51</div><div class="line">   FromUserName: 自己ID</div><div class="line">   ToUserName: 自己ID</div><div class="line">   StatusNotifyUserName: 最近联系的联系人ID</div><div class="line">   Content:</div><div class="line">       &lt;msg&gt;</div><div class="line">           &lt;op id='4'&gt;</div><div class="line">               &lt;username&gt;</div><div class="line">                   # 最近联系的联系人</div><div class="line">                   filehelper,xxx@chatroom,wxid_xxx,xxx,...</div><div class="line">               &lt;/username&gt;</div><div class="line">               &lt;unreadchatlist&gt;</div><div class="line">                   &lt;chat&gt;</div><div class="line">                       &lt;username&gt;</div><div class="line">                       # 朋友圈</div><div class="line">                           MomentsUnreadMsgStatus</div><div class="line">                       &lt;/username&gt;</div><div class="line">                       &lt;lastreadtime&gt;</div><div class="line">                           1454502365</div><div class="line">                       &lt;/lastreadtime&gt;</div><div class="line">                   &lt;/chat&gt;</div><div class="line">               &lt;/unreadchatlist&gt;</div><div class="line">               &lt;unreadfunctionlist&gt;</div><div class="line">               # 未读的功能账号消息，群发助手，漂流瓶等</div><div class="line">               &lt;/unreadfunctionlist&gt;</div><div class="line">           &lt;/op&gt;</div><div class="line">       &lt;/msg&gt;</div></pre></td></tr></table></figure>
<h3 id="文本消息"><a href="#文本消息" class="headerlink" title="文本消息"></a>文本消息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MsgType: <span class="number">1</span></div><div class="line">    FromUserName: 发送方ID</div><div class="line">    ToUserName: 接收方ID</div><div class="line">    Content: 消息内容</div></pre></td></tr></table></figure>
<h3 id="图片消息"><a href="#图片消息" class="headerlink" title="图片消息"></a>图片消息</h3><blockquote>
<p><strong><code>itchat</code> 增加了 <code>Text</code> 键, 键值为 下载该图片的方法.</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MsgType: 3</div><div class="line">    FromUserName: 发送方ID</div><div class="line">    ToUserName: 接收方ID</div><div class="line">    MsgId: 用于获取图片，用于表示每一条消息</div><div class="line">    Content:</div><div class="line">        &lt;msg&gt;</div><div class="line">            &lt;img length="6503" hdlength="0" /&gt;</div><div class="line">            &lt;commenturl&gt;&lt;/commenturl&gt;</div><div class="line">        &lt;/msg&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>拓展：如果想要得到<code>Content</code>中的具体内容可以使用正则表达式匹配出来</strong></p>
</blockquote>
<h3 id="视频消息"><a href="#视频消息" class="headerlink" title="视频消息"></a>视频消息</h3><blockquote>
<p><em>**<code>itchat</code> 增加了 <code>Text</code> 键, 键值为 下载该视频的方法.</em></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MsgType: 62</div><div class="line">FromUserName: 发送方ID</div><div class="line">ToUserName: 接收方ID</div><div class="line">MsgId: 用于获取小视频</div><div class="line">Content:</div><div class="line">    &lt;msg&gt;</div><div class="line">        &lt;img length="6503" hdlength="0" /&gt;</div><div class="line">        &lt;commenturl&gt;&lt;/commenturl&gt;</div><div class="line">    &lt;/msg&gt;</div></pre></td></tr></table></figure>
<h3 id="地理位置消息"><a href="#地理位置消息" class="headerlink" title="地理位置消息"></a>地理位置消息</h3><blockquote>
<p><strong><code>itchat</code> 增加了 <code>Text</code> 键, 键值为 该地点的文本形式.</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MsgType: 1</div><div class="line">    FromUserName: 发送方ID</div><div class="line">    ToUserName: 接收方ID</div><div class="line">    Content: http://weixin.qq.com/cgi-bin/redirectforward?args=xxx</div><div class="line">    </div><div class="line">    OriContent:&lt;?xml version="1.0"?&gt;</div><div class="line">&lt;msg&gt;</div><div class="line">	&lt;location x="34.195278" y="117.177803" scale="16" label="江苏省徐州市铜山区新区海河路" maptype="0" poiname="江苏师范大学大学生公寓园区" /&gt;</div><div class="line">&lt;/msg&gt;</div></pre></td></tr></table></figure>
<h3 id="名片消息"><a href="#名片消息" class="headerlink" title="名片消息"></a>名片消息</h3><blockquote>
<p><strong><code>itchat</code> 增加了<code>Text</code> 键, 键值为 该调用 <code>add_friend</code> 需要的属性.</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">MsgType: 42</div><div class="line">   FromUserName: 发送方ID</div><div class="line">   ToUserName: 接收方ID</div><div class="line">   Content:</div><div class="line">       &lt;?xml version="1.0"?&gt;</div><div class="line">       &lt;msg bigheadimgurl="" smallheadimgurl="" username="" nickname=""  shortpy="" alias="" imagestatus="3" scene="17" province="" city="" sign="" sex="1" certflag="0" certinfo="" brandIconUrl="" brandHomeUrl="" brandSubscriptConfigUrl="" brandFlags="0" regionCode="" /&gt;</div><div class="line"></div><div class="line">   RecommendInfo:</div><div class="line">       &#123;</div><div class="line">           "UserName": "xxx", # ID，这里的是昵称</div><div class="line">           "Province": "xxx",   </div><div class="line">           "City": "xxx",    </div><div class="line">           "Scene": 17, </div><div class="line">           "QQNum": 0, </div><div class="line">           "Content": "", </div><div class="line">           "Alias": "xxx", # 微信号</div><div class="line">           "OpCode": 0, </div><div class="line">           "Signature": "", </div><div class="line">           "Ticket": "", </div><div class="line">           "Sex": 0, # 1:男, 2:女</div><div class="line">           "NickName": "xxx", # 昵称</div><div class="line">           "AttrStatus": 4293221, </div><div class="line">           "VerifyFlag": 0</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>下面是添加好友的测试代码</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@itchat.msg_register(itchat.content.CARD,isFriendChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simply</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="keyword">print</span> msg[<span class="string">'Text'</span>]</div><div class="line">    <span class="keyword">print</span> msg[<span class="string">'Content'</span>]</div><div class="line">    itchat.add_friend(userName=msg[<span class="string">'Text'</span>][<span class="string">'UserName'</span>])  <span class="comment">#添加推荐的好友</span></div><div class="line">    <span class="keyword">print</span> msg[<span class="string">'RecommendInfo'</span>]</div><div class="line">    <span class="keyword">print</span> msg[<span class="string">'RecommendInfo'</span>][<span class="string">'UserName'</span>]</div></pre></td></tr></table></figure>
<h3 id="语音消息"><a href="#语音消息" class="headerlink" title="语音消息"></a>语音消息</h3><blockquote>
<p><em>*<code>itchat</code>增加了<code>Text</code>键,键值为下载该语音文件的方法,下载下来的是<code>MP3</code>的格式</em></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">MsgType: 34</div><div class="line">    FromUserName: 发送方ID</div><div class="line">    ToUserName: 接收方ID</div><div class="line">    MsgId: 用于获取语音</div><div class="line">    Content:</div><div class="line">        &lt;msg&gt;</div><div class="line">            &lt;voicemsg endflag="1" cancelflag="0" forwardflag="0" voiceformat="4" voicelength="1580" length="2026" bufid="216825389722501519" clientmsgid="49efec63a9774a65a932a4e5fcd4e923filehelper174_1454602489" fromusername="" /&gt;</div><div class="line">        &lt;/msg&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>下载方法：<code>msg[&#39;Text&#39;](msg[&#39;FileName&#39;])</code></strong></p>
</blockquote>
<h3 id="动画表情"><a href="#动画表情" class="headerlink" title="动画表情"></a>动画表情</h3><blockquote>
<p><strong><code>itchat</code>添加了<code>Text</code>键，键值为下载该图片表情的方法。</strong><br><strong>注意：本人亲测对于一些微信商店提供的表情是不能下载成功的,这里的自带的表情<code>emoji</code>是属于<code>TEXT</code>类别的，因此如果将其注册为<code>PICTURE</code>消息类型的话是不可以监测到的</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">MsgType: 47</div><div class="line">  FromUserName: 发送方ID</div><div class="line">  ToUserName: 接收方ID</div><div class="line">  Content:</div><div class="line">      &lt;msg&gt;</div><div class="line">          &lt;emoji fromusername = "" tousername = "" type="2" idbuffer="media:0_0" md5="e68363487d8f0519c4e1047de403b2e7" len = "86235" productid="com.tencent.xin.emoticon.bilibili" androidmd5="e68363487d8f0519c4e1047de403b2e7" androidlen="86235" s60v3md5 = "e68363487d8f0519c4e1047de403b2e7" s60v3len="86235" s60v5md5 = "e68363487d8f0519c4e1047de403b2e7" s60v5len="86235" cdnurl = "http://emoji.qpic.cn/wx_emoji/eFygWtxcoMF8M0oCCsksMA0gplXAFQNpiaqsmOicbXl1OC4Tyx18SGsQ/" designerid = "" thumburl = "http://mmbiz.qpic.cn/mmemoticon/dx4Y70y9XctRJf6tKsy7FwWosxd4DAtItSfhKS0Czr56A70p8U5O8g/0" encrypturl = "http://emoji.qpic.cn/wx_emoji/UyYVK8GMlq5VnJ56a4GkKHAiaC266Y0me0KtW6JN2FAZcXiaFKccRevA/" aeskey= "a911cc2ec96ddb781b5ca85d24143642" &gt;&lt;/emoji&gt; </div><div class="line">          &lt;gameext type="0" content="0" &gt;&lt;/gameext&gt;</div><div class="line">      &lt;/msg&gt;</div></pre></td></tr></table></figure>
<h3 id="普通链接或应用分享消息"><a href="#普通链接或应用分享消息" class="headerlink" title="普通链接或应用分享消息"></a>普通链接或应用分享消息</h3><blockquote>
<p><strong>主要针对的是分享的文章等等</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">MsgType: 49</div><div class="line">AppMsgType: 5</div><div class="line">FromUserName: 发送方ID</div><div class="line">ToUserName: 接收方ID</div><div class="line">Url: 链接地址</div><div class="line">FileName: 链接标题</div><div class="line">Content:</div><div class="line">    &lt;msg&gt;</div><div class="line">        &lt;appmsg appid=""  sdkver="0"&gt;</div><div class="line">            &lt;title&gt;&lt;/title&gt;</div><div class="line">            &lt;des&gt;&lt;/des&gt;</div><div class="line">            &lt;type&gt;5&lt;/type&gt;</div><div class="line">            &lt;content&gt;&lt;/content&gt;</div><div class="line">            &lt;url&gt;&lt;/url&gt;</div><div class="line">            &lt;thumburl&gt;&lt;/thumburl&gt;</div><div class="line">            ...</div><div class="line">        &lt;/appmsg&gt;</div><div class="line">        &lt;appinfo&gt;</div><div class="line">            &lt;version&gt;&lt;/version&gt;</div><div class="line">            &lt;appname&gt;&lt;/appname&gt;</div><div class="line">        &lt;/appinfo&gt;</div><div class="line">    &lt;/msg&gt;</div></pre></td></tr></table></figure>
<h3 id="音乐链接消息"><a href="#音乐链接消息" class="headerlink" title="音乐链接消息"></a>音乐链接消息</h3><blockquote>
<p><strong>主要针对的是音乐</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">MsgType: 49</div><div class="line">    AppMsgType: 3</div><div class="line">    FromUserName: 发送方ID</div><div class="line">    ToUserName: 接收方ID</div><div class="line">    Url: 链接地址</div><div class="line">    FileName: 音乐名</div><div class="line"></div><div class="line">    AppInfo: # 分享链接的应用</div><div class="line">        &#123;</div><div class="line">            Type: 0, </div><div class="line">            AppID: wx485a97c844086dc9</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    Content:</div><div class="line">        &lt;msg&gt;</div><div class="line">            &lt;appmsg appid="wx485a97c844086dc9"  sdkver="0"&gt;</div><div class="line">                &lt;title&gt;&lt;/title&gt;</div><div class="line">                &lt;des&gt;&lt;/des&gt;</div><div class="line">                &lt;action&gt;&lt;/action&gt;</div><div class="line">                &lt;type&gt;3&lt;/type&gt;</div><div class="line">                &lt;showtype&gt;0&lt;/showtype&gt;</div><div class="line">                &lt;mediatagname&gt;&lt;/mediatagname&gt;</div><div class="line">                &lt;messageext&gt;&lt;/messageext&gt;</div><div class="line">                &lt;messageaction&gt;&lt;/messageaction&gt;</div><div class="line">                &lt;content&gt;&lt;/content&gt;</div><div class="line">                &lt;contentattr&gt;0&lt;/contentattr&gt;</div><div class="line">                &lt;url&gt;&lt;/url&gt;</div><div class="line">                &lt;lowurl&gt;&lt;/lowurl&gt;</div><div class="line">                &lt;dataurl&gt;</div><div class="line">                    http://ws.stream.qqmusic.qq.com/C100003i9hMt1bgui0.m4a?vkey=6867EF99F3684&amp;amp;guid=ffffffffc104ea2964a111cf3ff3edaf&amp;amp;fromtag=46</div><div class="line">                &lt;/dataurl&gt;</div><div class="line">                &lt;lowdataurl&gt;</div><div class="line">                    http://ws.stream.qqmusic.qq.com/C100003i9hMt1bgui0.m4a?vkey=6867EF99F3684&amp;amp;guid=ffffffffc104ea2964a111cf3ff3edaf&amp;amp;fromtag=46</div><div class="line">                &lt;/lowdataurl&gt;</div><div class="line">                &lt;appattach&gt;</div><div class="line">                    &lt;totallen&gt;0&lt;/totallen&gt;</div><div class="line">                    &lt;attachid&gt;&lt;/attachid&gt;</div><div class="line">                    &lt;emoticonmd5&gt;&lt;/emoticonmd5&gt;</div><div class="line">                    &lt;fileext&gt;&lt;/fileext&gt;</div><div class="line">                &lt;/appattach&gt;</div><div class="line">                &lt;extinfo&gt;&lt;/extinfo&gt;</div><div class="line">                &lt;sourceusername&gt;&lt;/sourceusername&gt;</div><div class="line">                &lt;sourcedisplayname&gt;&lt;/sourcedisplayname&gt;</div><div class="line">                &lt;commenturl&gt;&lt;/commenturl&gt;</div><div class="line">                &lt;thumburl&gt;</div><div class="line">                    http://imgcache.qq.com/music/photo/album/63/180_albumpic_143163_0.jpg</div><div class="line">                &lt;/thumburl&gt;</div><div class="line">                &lt;md5&gt;&lt;/md5&gt;</div><div class="line">            &lt;/appmsg&gt;</div><div class="line">            &lt;fromusername&gt;&lt;/fromusername&gt;</div><div class="line">            &lt;scene&gt;0&lt;/scene&gt;</div><div class="line">            &lt;appinfo&gt;</div><div class="line">                &lt;version&gt;29&lt;/version&gt;</div><div class="line">                &lt;appname&gt;摇一摇搜歌&lt;/appname&gt;</div><div class="line">            &lt;/appinfo&gt;</div><div class="line">            &lt;commenturl&gt;&lt;/commenturl&gt;</div><div class="line">        &lt;/msg&gt;</div></pre></td></tr></table></figure>
<h3 id="群消息-1"><a href="#群消息-1" class="headerlink" title="群消息"></a>群消息</h3><blockquote>
<p><em><code>itchat</code> 增加了三个群聊相关的键值:</em></p>
<blockquote>
<ul>
<li><code>isAt</code> : 判断是否 @ 本号</li>
<li><code>ActualNickName</code> : 实际 <code>NickName</code></li>
<li><code>Content</code> : 实际 <code>Content</code></li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MsgType: <span class="number">1</span></div><div class="line">FromUserName: @@xxx</div><div class="line">ToUserName: @xxx</div><div class="line">Content:</div><div class="line"><span class="meta">    @xxx:&lt;br/&gt;xxx</span></div></pre></td></tr></table></figure>
<h3 id="红包消息"><a href="#红包消息" class="headerlink" title="红包消息"></a>红包消息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MsgType: <span class="number">49</span></div><div class="line">   AppMsgType: <span class="number">2001</span></div><div class="line">   FromUserName: 发送方ID</div><div class="line">   ToUserName: 接收方ID</div><div class="line">   Content: 未知</div></pre></td></tr></table></figure>
<h3 id="系统消息"><a href="#系统消息" class="headerlink" title="系统消息"></a>系统消息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MsgType: <span class="number">10000</span></div><div class="line">   FromUserName: 发送方ID</div><div class="line">   ToUserName: 自己ID</div><div class="line">   Content:</div><div class="line">       <span class="string">"你已添加了 xxx ，现在可以开始聊天了。"</span></div><div class="line">       <span class="string">"如果陌生人主动添加你为朋友，请谨慎核实对方身份。"</span></div><div class="line">       <span class="string">"收到红包，请在手机上查看"</span></div></pre></td></tr></table></figure>
<h2 id="账号类型"><a href="#账号类型" class="headerlink" title="账号类型"></a>账号类型</h2><blockquote>
<p><strong><code>tchat</code> 为三种账号都提供了 整体获取方法与搜索方法.</strong></p>
</blockquote>
<h3 id="好友"><a href="#好友" class="headerlink" title="好友"></a>好友</h3><h4 id="get-friends"><a href="#get-friends" class="headerlink" title="get_friends"></a>get_friends</h4><blockquote>
<ul>
<li><code>itchat.get_friends()</code>  返回完整的好友列表</li>
</ul>
<blockquote>
<ul>
<li>每个好友为一个字典, 其中第一项为本人的账号信息;</li>
<li>传入<code>update=True</code>, 将更新好友列表并返回, <code>get_friends(update=True)</code></li>
</ul>
</blockquote>
</blockquote>
<h4 id="search-friends"><a href="#search-friends" class="headerlink" title="search_friends"></a>search_friends</h4><blockquote>
<ul>
<li>itchat.get_friends()   好友搜索，有以下四种方式</li>
</ul>
<blockquote>
<ul>
<li>仅获取自己的用户信息</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取自己的用户信息，返回自己的属性字典</span></div><div class="line">itchat.search_friends()</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<ul>
<li>获取特定 <code>UserName</code> 的用户信息</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 获取特定UserName的用户信息</span></div><div class="line">itchat.search_friends(userName=<span class="string">'@abcdefg1234567'</span>) </div><div class="line"></div><div class="line"><span class="comment">## 获取发送信息的好友的详细信息</span></div><div class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT,isFriendChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reply</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="keyword">print</span> msg[<span class="string">'FromUserName'</span>]</div><div class="line">    <span class="keyword">print</span> itchat.search_friends(userName=msg[<span class="string">'FromUserName'</span>])   <span class="comment">#详细信息</span></div><div class="line">    <span class="keyword">print</span> itchat.search_friends(userName=msg[<span class="string">'FromUserName'</span>])[<span class="string">'NickName'</span>]   <span class="comment">#获取昵称</span></div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<ul>
<li>获取备注,微信号, 昵称中的任何一项等于<code>name</code>键值的用户. (可以与下一项配置使用.)</li>
</ul>
</blockquote>
<p><strong>比如在我的微信中有一个备注为<code>autolife</code>的人，我可以使用这个方法搜索出详细的信息</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取任何一项等于name键值的用户</span></div><div class="line">itchat.search_friends(name=<span class="string">'autolife'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<ul>
<li>获取备注,微信号, 昵称分别等于相应键值的用户. (可以与上一项配置使用.)</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取分别对应相应键值的用户</span></div><div class="line">itchat.search_friends(wechatAccount=<span class="string">'littlecodersh'</span>)</div><div class="line"><span class="comment"># 三、四项功能可以一同使用</span></div><div class="line">itchat.search_friends(name=<span class="string">'LittleCoder机器人'</span>, wechatAccount=<span class="string">'littlecodersh'</span>)</div></pre></td></tr></table></figure>
<h4 id="update-friend"><a href="#update-friend" class="headerlink" title="update_friend"></a>update_friend</h4><blockquote>
<p><em>主要用于好友更新</em></p>
<blockquote>
<ul>
<li>特定用户: 传入用户<code>UserName</code>, 返回指定用户的最新信息.</li>
<li>用户列表: 传入 <code>UserName</code> 组成的列表, 返回用户最新信息组成的列表</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">memberList = itchat.update_friend(<span class="string">'@abcdefg1234567'</span>)</div></pre></td></tr></table></figure>
<h3 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h3><h4 id="get-mps"><a href="#get-mps" class="headerlink" title="get_mps"></a>get_mps</h4><blockquote>
<p><strong> 将返回完整的工作号列表</strong></p>
<blockquote>
<ul>
<li>每个公众号为一个字典,</li>
<li>传入 <code>update=True</code> 将更新公众号列表, 并返回.</li>
</ul>
</blockquote>
</blockquote>
<h4 id="search-mps"><a href="#search-mps" class="headerlink" title="search_mps"></a>search_mps</h4><blockquote>
<ul>
<li>获取特定<code>UserName</code>的公众号</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取特定UserName的公众号，返回值为一个字典</span></div><div class="line">itchat.search_mps(userName=<span class="string">'@abcdefg1234567'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获取名字中还有特定字符的公众号.</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取名字中含有特定字符的公众号，返回值为一个字典的列表</span></div><div class="line">itchat.search_mps(name=<span class="string">'LittleCoder'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>当两项都是勇士, 将仅返回特定<code>UserName</code>的公众号.</li>
</ul>
</blockquote>
<h3 id="群聊"><a href="#群聊" class="headerlink" title="群聊"></a>群聊</h3><blockquote>
<ul>
<li><code>get_chatrooms</code> : 返回完整的群聊列表.</li>
<li><code>search_chatrooms</code> : 群聊搜索.</li>
<li><code>update_chatroom</code> : 获取群聊用户列表或更新该群聊.<blockquote>
<ul>
<li>群聊在首次获取中不会获取群聊的用户列表, 所以需要调用该命令才能获取群聊成员.</li>
<li>传入群聊的 <code>UserName</code> , 返回特定群聊的详细信息.</li>
<li>传入<code>UserName</code>组成的列表, 返回指定用户的最新信息组成的列表.</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">memberList = itchat.update_chatroom(<span class="string">'@@abcdefg1234567'</span>, detailedMember=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>创建群聊,增加/删除群聊用户:</li>
</ul>
<blockquote>
<ul>
<li>由于之前通过群聊检测是否被好友拉黑的程序, 目前这三个方法都被严格限制了使用频率.</li>
<li>删除群聊需要本账号为管理员, 否则无效.</li>
<li>将用户加入群聊有直接加入与发送邀请, 通过 <code>useInvitation</code> 设置.</li>
<li>超过 40 人的群聊无法使用直接加入的加入方式.</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">memberList = itchat.get_frients()[<span class="number">1</span>:]</div><div class="line"><span class="comment"># 创建群聊, topic 键值为群聊名称.</span></div><div class="line">chatroomUserName = itchat.create_chatroom(memberList, <span class="string">"test chatroom"</span>)</div><div class="line"><span class="comment"># 删除群聊内的用户</span></div><div class="line">itchat.delete_member_from_chatroom(chatroomUserName, memberList[<span class="number">0</span>])</div><div class="line"><span class="comment"># 增加用户进入群聊.</span></div><div class="line">itchat.add_member_into_chatroom(chatroomUserName, memberList[<span class="number">0</span>], useInvitation=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<h2 id="方法汇总"><a href="#方法汇总" class="headerlink" title="方法汇总"></a>方法汇总</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">itchat.add_friend                  </div><div class="line">itchat.new_instance                </div><div class="line">itchat.add_member_into_chatroom    </div><div class="line">itchat.originInstance              </div><div class="line">itchat.auto_login                  </div><div class="line">itchat.returnvalues                </div><div class="line">itchat.check_login                 </div><div class="line">itchat.run                         </div><div class="line">itchat.components                  </div><div class="line">itchat.search_chatrooms            </div><div class="line">itchat.config                      </div><div class="line">itchat.search_friends              </div><div class="line">itchat.configured_reply            </div><div class="line">itchat.search_mps                  </div><div class="line">itchat.content                     </div><div class="line">itchat.send                        </div><div class="line">itchat.core                        </div><div class="line">itchat.send_file                   </div><div class="line">itchat.Core                        </div><div class="line">itchat.send_image                  </div><div class="line">itchat.create_chatroom             </div><div class="line">itchat.send_msg                    </div><div class="line">itchat.delete_member_from_chatroom </div><div class="line">itchat.send_raw_msg                </div><div class="line">itchat.dump_login_status           </div><div class="line">itchat.send_video                  </div><div class="line">itchat.get_chatrooms               </div><div class="line">itchat.set_alias                   </div><div class="line">itchat.get_contact                 </div><div class="line">itchat.set_chatroom_name           </div><div class="line">itchat.get_friends                 </div><div class="line">itchat.set_logging                 </div><div class="line">itchat.get_head_img                </div><div class="line">itchat.set_pinned                  </div><div class="line">itchat.get_mps                     </div><div class="line">itchat.show_mobile_login           </div><div class="line">itchat.get_msg                     </div><div class="line">itchat.start_receiving             </div><div class="line">itchat.get_QR                      </div><div class="line">itchat.storage                     </div><div class="line">itchat.get_QRuuid                  </div><div class="line">itchat.update_chatroom             </div><div class="line">itchat.instanceList                </div><div class="line">itchat.update_friend               </div><div class="line">itchat.load_login_status           </div><div class="line">itchat.upload_file                 </div><div class="line">itchat.log                         </div><div class="line">itchat.utils                       </div><div class="line">itchat.login                       </div><div class="line">itchat.VERSION                     </div><div class="line">itchat.logout                      </div><div class="line">itchat.web_init                    </div><div class="line">itchat.msg_register</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote>
<p><strong>下面是博主写的一个程序，该程序的主要功能是监控撤回消息，并且如果有消息撤回就会撤回的消息发送给你，以后再也不用担心看不到好友的撤回的消息了，由于注释写的很详细，因此这里就不在详细的讲解了，直接贴代码</strong></p>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> itchat</div><div class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> TEXT</div><div class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">msg_information = &#123;&#125;</div><div class="line">face_bug=<span class="keyword">None</span>  <span class="comment">#针对表情包的内容</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register([TEXT, PICTURE, FRIENDS, CARD, MAP, SHARING, RECORDING, ATTACHMENT, VIDEO],isFriendChat=True, isGroupChat=True, isMpChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_receive_msg</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="keyword">global</span> face_bug</div><div class="line">    msg_time_rec = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())   <span class="comment">#接受消息的时间</span></div><div class="line">    msg_from = itchat.search_friends(userName=msg[<span class="string">'FromUserName'</span>])[<span class="string">'NickName'</span>]   <span class="comment">#在好友列表中查询发送信息的好友昵称</span></div><div class="line">    msg_time = msg[<span class="string">'CreateTime'</span>]    <span class="comment">#信息发送的时间</span></div><div class="line">    msg_id = msg[<span class="string">'MsgId'</span>]    <span class="comment">#每条信息的id</span></div><div class="line">    msg_content = <span class="keyword">None</span>      <span class="comment">#储存信息的内容</span></div><div class="line">    msg_share_url = <span class="keyword">None</span>    <span class="comment">#储存分享的链接，比如分享的文章和音乐</span></div><div class="line">    <span class="keyword">print</span> msg[<span class="string">'Type'</span>]</div><div class="line">    <span class="keyword">print</span> msg[<span class="string">'MsgId'</span>]</div><div class="line">    <span class="keyword">if</span> msg[<span class="string">'Type'</span>] == <span class="string">'Text'</span> <span class="keyword">or</span> msg[<span class="string">'Type'</span>] == <span class="string">'Friends'</span>:     <span class="comment">#如果发送的消息是文本或者好友推荐</span></div><div class="line">        msg_content = msg[<span class="string">'Text'</span>]</div><div class="line">        <span class="keyword">print</span> msg_content</div><div class="line"></div><div class="line">    <span class="comment">#如果发送的消息是附件、视屏、图片、语音</span></div><div class="line">    <span class="keyword">elif</span> msg[<span class="string">'Type'</span>] == <span class="string">"Attachment"</span> <span class="keyword">or</span> msg[<span class="string">'Type'</span>] == <span class="string">"Video"</span> \</div><div class="line">            <span class="keyword">or</span> msg[<span class="string">'Type'</span>] == <span class="string">'Picture'</span> \</div><div class="line">            <span class="keyword">or</span> msg[<span class="string">'Type'</span>] == <span class="string">'Recording'</span>:</div><div class="line">        msg_content = msg[<span class="string">'FileName'</span>]    <span class="comment">#内容就是他们的文件名</span></div><div class="line">        msg[<span class="string">'Text'</span>](str(msg_content))    <span class="comment">#下载文件</span></div><div class="line">        <span class="comment"># print msg_content</span></div><div class="line">    <span class="keyword">elif</span> msg[<span class="string">'Type'</span>] == <span class="string">'Card'</span>:    <span class="comment">#如果消息是推荐的名片</span></div><div class="line">        msg_content = msg[<span class="string">'RecommendInfo'</span>][<span class="string">'NickName'</span>] + <span class="string">'的名片'</span>    <span class="comment">#内容就是推荐人的昵称和性别</span></div><div class="line">        <span class="keyword">if</span> msg[<span class="string">'RecommendInfo'</span>][<span class="string">'Sex'</span>] == <span class="number">1</span>:</div><div class="line">            msg_content += <span class="string">'性别为男'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            msg_content += <span class="string">'性别为女'</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> msg_content</div><div class="line">    <span class="keyword">elif</span> msg[<span class="string">'Type'</span>] == <span class="string">'Map'</span>:    <span class="comment">#如果消息为分享的位置信息</span></div><div class="line">        x, y, location = re.search(</div><div class="line">            <span class="string">"&lt;location x=\"(.*?)\" y=\"(.*?)\".*label=\"(.*?)\".*"</span>, msg[<span class="string">'OriContent'</span>]).group(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">        <span class="keyword">if</span> location <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            msg_content = <span class="string">r"纬度-&gt;"</span> + x.__str__() + <span class="string">" 经度-&gt;"</span> + y.__str__()     <span class="comment">#内容为详细的地址</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            msg_content = <span class="string">r""</span> + location</div><div class="line">    <span class="keyword">elif</span> msg[<span class="string">'Type'</span>] == <span class="string">'Sharing'</span>:     <span class="comment">#如果消息为分享的音乐或者文章，详细的内容为文章的标题或者是分享的名字</span></div><div class="line">        msg_content = msg[<span class="string">'Text'</span>]</div><div class="line">        msg_share_url = msg[<span class="string">'Url'</span>]       <span class="comment">#记录分享的url</span></div><div class="line">        <span class="keyword">print</span> msg_share_url</div><div class="line">    face_bug=msg_content</div><div class="line"></div><div class="line"><span class="comment">##将信息存储在字典中，每一个msg_id对应一条信息</span></div><div class="line">    msg_information.update(</div><div class="line">        &#123;</div><div class="line">            msg_id: &#123;</div><div class="line">                <span class="string">"msg_from"</span>: msg_from, <span class="string">"msg_time"</span>: msg_time, <span class="string">"msg_time_rec"</span>: msg_time_rec,</div><div class="line">                <span class="string">"msg_type"</span>: msg[<span class="string">"Type"</span>],</div><div class="line">                <span class="string">"msg_content"</span>: msg_content, <span class="string">"msg_share_url"</span>: msg_share_url</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    )</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##这个是用于监听是否有消息撤回</span></div><div class="line"><span class="meta">@itchat.msg_register(NOTE, isFriendChat=True, isGroupChat=True, isMpChat=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">information</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="comment">#这里如果这里的msg['Content']中包含消息撤回和id，就执行下面的语句</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'撤回了一条消息'</span> <span class="keyword">in</span> msg[<span class="string">'Content'</span>]:</div><div class="line">        old_msg_id = re.search(<span class="string">"\&lt;msgid\&gt;(.*?)\&lt;\/msgid\&gt;"</span>, msg[<span class="string">'Content'</span>]).group(<span class="number">1</span>)   <span class="comment">#在返回的content查找撤回的消息的id</span></div><div class="line">        old_msg = msg_information.get(old_msg_id)    <span class="comment">#得到消息</span></div><div class="line">        <span class="keyword">print</span> old_msg</div><div class="line">        <span class="keyword">if</span> len(old_msg_id)&lt;<span class="number">11</span>:  <span class="comment">#如果发送的是表情包</span></div><div class="line">            itchat.send_file(face_bug,toUserName=<span class="string">'filehelper'</span>)</div><div class="line">        <span class="keyword">else</span>:  <span class="comment">#发送撤回的提示给文件助手</span></div><div class="line">            msg_body = <span class="string">"告诉你一个秘密~"</span> + <span class="string">"\n"</span> \</div><div class="line">                       + old_msg.get(<span class="string">'msg_from'</span>) + <span class="string">" 撤回了 "</span> + old_msg.get(<span class="string">"msg_type"</span>) + <span class="string">" 消息"</span> + <span class="string">"\n"</span> \</div><div class="line">                       + old_msg.get(<span class="string">'msg_time_rec'</span>) + <span class="string">"\n"</span> \</div><div class="line">                       + <span class="string">"撤回了什么 ⇣"</span> + <span class="string">"\n"</span> \</div><div class="line">                       + <span class="string">r""</span> + old_msg.get(<span class="string">'msg_content'</span>)</div><div class="line">            <span class="comment">#如果是分享的文件被撤回了，那么就将分享的url加在msg_body中发送给文件助手</span></div><div class="line">            <span class="keyword">if</span> old_msg[<span class="string">'msg_type'</span>] == <span class="string">"Sharing"</span>:</div><div class="line">                msg_body += <span class="string">"\n就是这个链接➣ "</span> + old_msg.get(<span class="string">'msg_share_url'</span>)</div><div class="line"></div><div class="line">            <span class="comment"># 将撤回消息发送到文件助手</span></div><div class="line">            itchat.send_msg(msg_body, toUserName=<span class="string">'filehelper'</span>)</div><div class="line">            <span class="comment"># 有文件的话也要将文件发送回去</span></div><div class="line">            <span class="keyword">if</span> old_msg[<span class="string">"msg_type"</span>] == <span class="string">"Picture"</span> \</div><div class="line">                    <span class="keyword">or</span> old_msg[<span class="string">"msg_type"</span>] == <span class="string">"Recording"</span> \</div><div class="line">                    <span class="keyword">or</span> old_msg[<span class="string">"msg_type"</span>] == <span class="string">"Video"</span> \</div><div class="line">                    <span class="keyword">or</span> old_msg[<span class="string">"msg_type"</span>] == <span class="string">"Attachment"</span>:</div><div class="line">                file = <span class="string">'@fil@%s'</span> % (old_msg[<span class="string">'msg_content'</span>])</div><div class="line">                itchat.send(msg=file, toUserName=<span class="string">'filehelper'</span>)</div><div class="line">                os.remove(old_msg[<span class="string">'msg_content'</span>])</div><div class="line">            <span class="comment"># 删除字典旧消息</span></div><div class="line">            msg_information.pop(old_msg_id)</div><div class="line"></div><div class="line">itchat.auto_login(hotReload=<span class="keyword">True</span>)</div><div class="line">itchat.run()</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><p><a href="https://itchat.readthedocs.io/zh/latest/" target="_blank" rel="external">文档：https://itchat.readthedocs.io/zh/latest/</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/yanjingnan/p/6831464.html" target="_blank" rel="external">http://www.cnblogs.com/yanjingnan/p/6831464.html</a></p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python实现微信接口-itchat&quot;&gt;&lt;a href=&quot;#python实现微信接口-itchat&quot; class=&quot;headerlink&quot; title=&quot;python实现微信接口(itchat)&quot;&gt;&lt;/a&gt;python实现微信接口(itchat)&lt;/h1&gt;&lt;h2
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python发送邮件</title>
    <link href="http://chenjiabing666.github.io/2017/05/13/python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://chenjiabing666.github.io/2017/05/13/python发送邮件/</id>
    <published>2017-05-12T23:17:41.000Z</published>
    <updated>2017-05-12T23:25:56.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python发送邮件"><a href="#python发送邮件" class="headerlink" title="python发送邮件"></a>python发送邮件</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p><em>python中发送邮件主要用的是<code>smtplib</code>和<code>email</code>两个模块，下面主要对这两个模块进行讲解</em></p>
<p><em>在讲解之前需要准备至少两个测试的邮箱，其中要在邮箱的设置中开启smtplib协议才可以进行发送和接受</em></p>
</blockquote>
<h3 id="smtplib"><a href="#smtplib" class="headerlink" title="smtplib"></a>smtplib</h3><blockquote>
<ul>
<li><p><code>smtplib.SMTP( [host [, port [, local_hostname[,timeout]]]])</code>  <code>host</code>是<code>SMTP</code>主机的服务器，其中<code>163</code>邮箱的是<code>smtp.163.com</code>,其他的可以在网上找到，<code>port</code>是端口号，这里默认的是<code>25</code>，<code>local_hostname</code>是你主机的<code>SMTP</code>,如果<code>SMTP</code>在你的本机上，你只需要指定服务器地址为 <code>localhost</code> 即可。<code>timeout</code>是设置的连接的限制时间，如果超过这个时间还没有连接上那么就会出现错误</p>
</li>
<li><p><code>SMTP.set_debuglevel(level)</code>：设置是否为调试模式。默认为<code>False</code>，即非调试模式，表示不输出任何调试信息。如果设置为<code>1</code>就表示输出调试信息</p>
</li>
<li><p><code>SMTP.connect([host[, port]])</code>：连接到指定的<code>smtp</code>服务器。参数分别表示<code>smpt</code>主机和端口。注意: 也可以在<code>host</code>参数中指定端口号（如：<code>smpt.yeah.net:25</code>），这样就没必要给出<code>port</code>参数。</p>
</li>
<li><p><code>SMTP.login(user, password)</code> 登录服务器，这里的<code>user</code>是邮箱的用户名，但是这里的<code>password</code>并不是你邮箱的密码，当你开启<code>SMTP</code>的时候会提示你设置一个密码，这里的密码就是对应的密码</p>
</li>
<li><p><code>SMTP.sendmail(from_addr, [to_addrs,], msg[, mail_options, rcpt_options])</code> 发送邮件，<code>from_addr</code>是发送方也就是你的邮箱地址，<code>to_addr</code>是接受方的地址，当然这里的可以填上多个邮箱账号发送给多个账号，如果有多个账号需要使用列表传递参数</p>
</li>
<li><p><code>SMTP.quit()</code>断开连接</p>
</li>
</ul>
</blockquote>
<h2 id="email"><a href="#email" class="headerlink" title="email"></a>email</h2><blockquote>
<p><em><code>emial</code>模块用来处理邮件消息，包括MIME和其他基于<code>RFC 2822</code>的消息文档。使用这些模块来定义邮件的内容，是非常简单的。其包括的类有（更加详细的介绍可见：<a href="http://docs.python.org/library/email.mime.html）：" target="_blank" rel="external">http://docs.python.org/library/email.mime.html）：</a></em></p>
<ul>
<li><p><code>class email.mime.base.MIMEBase(_maintype, _subtype, **_params)</code>：这是<code>MIME</code>的一个基类。一般不需要在使用时创建实例。其中_maintype是内容类型，如text或者image。_subtype是内容的<code>minor type</code>类型，如<code>plain</code>或者<code>gif</code>。 <code>**_params</code>是一个字典，直接传递给Message.add_header()。</p>
</li>
<li><p><code>class email.mime.multipart.MIMEMultipart([_subtype[, boundary[, _subparts[, _params]]]]</code>：<code>MIMEBase</code>的一个子类，多个<code>MIME</code>对象的集合，<code>_subtype</code>默认值为<code>mixed</code>。<code>boundary</code>是<code>MIMEMultipart</code>的边界，默认边界是可数的。当需要发送附件的时候使用的就是这个类</p>
</li>
<li><p><code>class email.mime.application.MIMEApplication(_data[, _subtype[, _encoder[, **_params]]])</code>：<code>MIMEMultipart</code>的一个子类。</p>
</li>
<li><p><code>class email.mime.audio. MIMEAudio(_audiodata[, _subtype[, _encoder[, **_params]]])</code>： <code>MIME</code>音频对象</p>
</li>
<li><p><code>class email.mime.image.MIMEImage(_imagedata[, _subtype[, _encoder[, **_params]]])</code>：<code>MIME</code>二进制文件对象。主要用来发送图片</p>
</li>
</ul>
</blockquote>
<h2 id="普通文本邮件"><a href="#普通文本邮件" class="headerlink" title="普通文本邮件"></a>普通文本邮件</h2><blockquote>
<ul>
<li><p><code>class email.mime.text.MIMEText(_text[, _subtype[, _charset]])</code>：<code>MIME</code>文本对象，其中<code>_text</code>是邮件内容，<code>_subtype</code>邮件类型，可以是<code>text/plain</code>（普通文本邮件），<code>html/plain</code>(html邮件), <code>_charset</code>编码，可以是<code>gb2312</code>等等。</p>
</li>
<li><p>普通文本邮件发送的实现，关键是要将<code>MIMEText</code>中<code>_subtype</code>设置为<code>plain</code>。首先导入<code>smtplib</code>和<code>mimetext</code>。创建<code>smtplib.smtp</code>实例，<code>connect</code>邮件<code>smtp</code>服务器，<code>login</code>后发送，具体代码如下*</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一个格式化邮件的函数，可以用来使用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((</div><div class="line">        Header(name, <span class="string">'utf-8'</span>).encode(),</div><div class="line">        addr.encode(<span class="string">'utf-8'</span>) <span class="keyword">if</span> isinstance(addr, unicode) <span class="keyword">else</span> addr))</div><div class="line"></div><div class="line">from_addr=<span class="string">'××××××××'</span>   <span class="comment">#你的邮箱地址</span></div><div class="line">from_password=<span class="string">'×××××××'</span>   <span class="comment">#你的密码</span></div><div class="line"><span class="comment"># to_email='chenjiabing666@yeah.net'</span></div><div class="line">to_email=<span class="string">'××××××'</span>    <span class="comment">#要发送的邮箱地址</span></div><div class="line"></div><div class="line">msg=MIMEText(<span class="string">'乔装打扮，不择手段'</span>,<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)  <span class="comment">#这里text=乔装打扮，不择手段</span></div><div class="line"></div><div class="line">msg[<span class="string">'From'</span>] = _format_addr(<span class="string">u'Python爱好者 &lt;%s&gt;'</span> % from_addr)  <span class="comment">#格式化发件人</span></div><div class="line">msg[<span class="string">'To'</span>] = _format_addr(<span class="string">u'管理员 &lt;%s&gt;'</span> % to_email)    <span class="comment">#格式化收件人</span></div><div class="line">msg[<span class="string">'Subject'</span>] = Header(<span class="string">u'来自SMTP的问候……'</span>, <span class="string">'utf-8'</span>).encode()    <span class="comment">#格式化主题</span></div><div class="line"></div><div class="line">stmp=<span class="string">'smtp.163.com'</span></div><div class="line">server=smtplib.SMTP(stmp,port=<span class="number">25</span>,timeout=<span class="number">30</span>) <span class="comment">#连接，设置超时时间30s</span></div><div class="line">server.login(from_addr,from_password)    <span class="comment">#登录</span></div><div class="line">server.set_debuglevel(<span class="number">1</span>)        <span class="comment">#输出所有的信息</span></div><div class="line">server.sendmail(from_addr,to_email,msg.as_string())   <span class="comment">#这里的as_string()是将msg转换成字符串类型的,如果你想要发给多个人，需要讲to_email换成一个列表</span></div></pre></td></tr></table></figure>
<h2 id="发送html邮件"><a href="#发送html邮件" class="headerlink" title="发送html邮件"></a>发送html邮件</h2><blockquote>
<p><em>还是用<code>MIMEText</code>来发送，不过其中的<code>_subType</code>设置成html即可，详细代码如下：</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((</div><div class="line">        Header(name, <span class="string">'utf-8'</span>).encode(),</div><div class="line">        addr.encode(<span class="string">'utf-8'</span>) <span class="keyword">if</span> isinstance(addr, unicode) <span class="keyword">else</span> addr))</div><div class="line"></div><div class="line">from_addr=<span class="string">'××××××××'</span>   <span class="comment">#你的邮箱地址</span></div><div class="line">from_password=<span class="string">'×××××××'</span>   <span class="comment">#你的密码</span></div><div class="line"><span class="comment"># to_email='chenjiabing666@yeah.net'</span></div><div class="line">to_email=<span class="string">'××××××'</span>    <span class="comment">#要发送的邮箱地址</span></div><div class="line">html=<span class="string">"""</span></div><div class="line">&lt;p&gt;&lt;h1 style="color:red"&gt;大家好&lt;/h1&gt;&lt;/p&gt;</div><div class="line">"""</div><div class="line"></div><div class="line">msg=MIMEText(html,<span class="string">'html'</span>,<span class="string">'utf-8'</span>)  <span class="comment">#这里text=html,设置成html格式的</span></div><div class="line"></div><div class="line">msg[<span class="string">'From'</span>] = _format_addr(<span class="string">u'Python爱好者 &lt;%s&gt;'</span> % from_addr)  <span class="comment">#格式化发件人</span></div><div class="line">msg[<span class="string">'To'</span>] = _format_addr(<span class="string">u'管理员 &lt;%s&gt;'</span> % to_email)    <span class="comment">#格式化收件人</span></div><div class="line">msg[<span class="string">'Subject'</span>] = Header(<span class="string">u'来自SMTP的问候……'</span>, <span class="string">'utf-8'</span>).encode()    <span class="comment">#格式化主题</span></div><div class="line"></div><div class="line">stmp=<span class="string">'smtp.163.com'</span></div><div class="line">server=smtplib.SMTP(stmp,port=<span class="number">25</span>,timeout=<span class="number">30</span>) <span class="comment">#连接，设置超时时间30s</span></div><div class="line">server.login(from_addr,from_password)    <span class="comment">#登录</span></div><div class="line">server.set_debuglevel(<span class="number">1</span>)        <span class="comment">#输出所有的信息</span></div><div class="line">server.sendmail(from_addr,to_email,msg.as_string())   <span class="comment">#这里的as_string()是将msg转换成字符串类型的,如果你想要发给多个人，需要讲to_email换成一个列表</span></div></pre></td></tr></table></figure>
<h2 id="附件的发送"><a href="#附件的发送" class="headerlink" title="附件的发送"></a>附件的发送</h2><blockquote>
<p><em>发送带附件的邮件，首先要创建<code>MIMEMultipart()</code>实例，然后构造附件，如果有多个附件，可依次构造，最后利用<code>smtplib.smtp</code>发送，具体实力如下：</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</div><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((</div><div class="line">        Header(name, <span class="string">'utf-8'</span>).encode(),</div><div class="line">        addr.encode(<span class="string">'utf-8'</span>) <span class="keyword">if</span> isinstance(addr, unicode) <span class="keyword">else</span> addr))</div><div class="line"></div><div class="line">from_addr=<span class="string">'××××××××'</span>   <span class="comment">#你的邮箱地址</span></div><div class="line">from_password=<span class="string">'×××××××'</span>   <span class="comment">#你的密码</span></div><div class="line"><span class="comment"># to_email='chenjiabing666@yeah.net'</span></div><div class="line">to_email=<span class="string">'××××××'</span>    <span class="comment">#要发送的邮箱地址</span></div><div class="line"></div><div class="line"></div><div class="line">msg=MIMEMultipart()   <span class="comment">#创建实例</span></div><div class="line">text=MIMEText(<span class="string">'&lt;h2 style="color:red"&gt;陈加兵&lt;/h2&gt;&lt;br/&gt;&lt;p&gt;大家好&lt;/p&gt;'</span>,<span class="string">'html'</span>,<span class="string">'utf-8'</span>)</div><div class="line">msg.attach(text)   <span class="comment">#添加一个正文信息，这里实在正文中显示的信息</span></div><div class="line"></div><div class="line"><span class="comment">#创建一个文本附件，这里是从指定文本中读取信息，然后创建一个文本信息</span></div><div class="line">att1=MIMEText(open(<span class="string">'/home/chenjiabing/文档/MeiZi_img/full/file.txt'</span>,<span class="string">'rb'</span>).read(),<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)</div><div class="line">att1[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span>  <span class="comment">#指定类型</span></div><div class="line">att1[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="123.txt"'</span><span class="comment">#这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></div><div class="line">msg.attach(att1)     <span class="comment">#向其中添加附件</span></div><div class="line"></div><div class="line">img_path=<span class="string">'/home/chenjiabing/文档/MeiZi_img/full/file.jpg'</span>  <span class="comment">#图片路径</span></div><div class="line">image=MIMEImage(open(img_path,<span class="string">'rb'</span>).read())     <span class="comment">#创建一个图片附件</span></div><div class="line">image.add_header(<span class="string">'Content-ID'</span>,<span class="string">'&lt;0&gt;'</span>)   <span class="comment">#指定图片的编号,这个会在后面用到</span></div><div class="line">image.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'test.jpg'</span>)        </div><div class="line">image.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</div><div class="line">msg.attach(image)    <span class="comment">#添加附件</span></div><div class="line"></div><div class="line"></div><div class="line">stmp=<span class="string">'smtp.163.com'</span></div><div class="line">server=smtplib.SMTP(stmp,port=<span class="number">25</span>,timeout=<span class="number">30</span>) <span class="comment">#连接，设置超时时间30s</span></div><div class="line">server.login(from_addr,from_password)    <span class="comment">#登录</span></div><div class="line">server.set_debuglevel(<span class="number">1</span>)        <span class="comment">#输出所有的信息</span></div><div class="line">server.sendmail(from_addr,to_email,msg.as_string())   <span class="comment">#这里的as_string()是将msg转换成字符串类型的,如果你想要发给多个人，需要讲to_email换成一个列表</span></div></pre></td></tr></table></figure>
<h2 id="将图片嵌入到正文信息中"><a href="#将图片嵌入到正文信息中" class="headerlink" title="将图片嵌入到正文信息中"></a>将图片嵌入到正文信息中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</div><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_format_addr</span><span class="params">(s)</span>:</span></div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    <span class="keyword">return</span> formataddr((</div><div class="line">        Header(name, <span class="string">'utf-8'</span>).encode(),</div><div class="line">        addr.encode(<span class="string">'utf-8'</span>) <span class="keyword">if</span> isinstance(addr, unicode) <span class="keyword">else</span> addr))</div><div class="line"></div><div class="line">from_addr=<span class="string">'××××××××'</span>   <span class="comment">#你的邮箱地址</span></div><div class="line">from_password=<span class="string">'×××××××'</span>   <span class="comment">#你的密码</span></div><div class="line"><span class="comment"># to_email='chenjiabing666@yeah.net'</span></div><div class="line">to_email=<span class="string">'××××××'</span>    <span class="comment">#要发送的邮箱地址</span></div><div class="line"></div><div class="line"></div><div class="line">msg=MIMEMultipart()   <span class="comment">#创建实例</span></div><div class="line">html=<span class="string">"""</span></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p&gt;下面演示嵌入图片&lt;/p&gt;</div><div class="line">&lt;section&gt;</div><div class="line">&lt;img src='cid:0' style='float:left'/&gt;</div><div class="line">&lt;img src='cid:1' style='float:left'/&gt;</div><div class="line">&lt;/setcion&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">"""</div><div class="line"></div><div class="line">text=MIMEText(<span class="string">'&lt;h2 style="color:red"&gt;陈加兵&lt;/h2&gt;&lt;br/&gt;&lt;p&gt;大家好&lt;/p&gt;'</span>,<span class="string">'html'</span>,<span class="string">'utf-8'</span>)</div><div class="line">msg.attach(text)   <span class="comment">#添加一个正文信息，这里实在正文中显示的信息</span></div><div class="line"></div><div class="line"><span class="comment">#创建一个文本附件，这里是从指定文本中读取信息，然后创建一个文本信息</span></div><div class="line">att1=MIMEText(open(<span class="string">'/home/chenjiabing/文档/MeiZi_img/full/file.txt'</span>,<span class="string">'rb'</span>).read(),<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)</div><div class="line">att1[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span>  <span class="comment">#指定类型</span></div><div class="line">att1[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="123.txt"'</span><span class="comment">#这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></div><div class="line">msg.attach(att1)     <span class="comment">#向其中添加附件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">## 创建一个图片附件</span></div><div class="line">img_path=<span class="string">'/home/chenjiabing/文档/MeiZi_img/full/file.jpg'</span>  <span class="comment">#图片路径</span></div><div class="line">image=MIMEImage(open(img_path,<span class="string">'rb'</span>).read())     <span class="comment">#创建一个图片附件</span></div><div class="line">image.add_header(<span class="string">'Content-ID'</span>,<span class="string">'&lt;0&gt;'</span>)   <span class="comment">#指定图片的编号,</span></div><div class="line">image.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'test.jpg'</span>)        </div><div class="line">image.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</div><div class="line">msg.attach(image)    <span class="comment">#添加附件</span></div><div class="line"></div><div class="line"><span class="comment">#创建第二个图片附件</span></div><div class="line">img_path_1=<span class="string">'/home/chenjiabing/文档/MeiZi_img/full/test.jpg'</span>  <span class="comment">#图片路径</span></div><div class="line">image1=MIMEImage(open(img_path,<span class="string">'rb'</span>).read())     <span class="comment">#创建一个图片附件</span></div><div class="line">image1.add_header(<span class="string">'Content-ID'</span>,<span class="string">'&lt;1&gt;'</span>)   <span class="comment">#指定图片的编号,这个就是在上面对应的cid:1的那张图片，因此这里的编号一定要对应</span></div><div class="line">image1.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'img.jpg'</span>)        </div><div class="line">image1.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</div><div class="line">msg1.attach(image)    <span class="comment">#添加附件</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">stmp=<span class="string">'smtp.163.com'</span></div><div class="line">server=smtplib.SMTP(stmp,port=<span class="number">25</span>,timeout=<span class="number">30</span>) <span class="comment">#连接，设置超时时间30s</span></div><div class="line">server.login(from_addr,from_password)    <span class="comment">#登录</span></div><div class="line">server.set_debuglevel(<span class="number">1</span>)        <span class="comment">#输出所有的信息</span></div><div class="line">server.sendmail(from_addr,to_email,msg.as_string())   <span class="comment">#这里的as_string()是将msg转换成字符串类型的,如果你想要发给多个人，需要讲to_email换成一个列表</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python发送邮件&quot;&gt;&lt;a href=&quot;#python发送邮件&quot; class=&quot;headerlink&quot; title=&quot;python发送邮件&quot;&gt;&lt;/a&gt;python发送邮件&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerli
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python制作电子书</title>
    <link href="http://chenjiabing666.github.io/2017/05/13/python%E5%88%B6%E4%BD%9C%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    <id>http://chenjiabing666.github.io/2017/05/13/python制作电子书/</id>
    <published>2017-05-12T23:15:20.000Z</published>
    <updated>2017-05-12T23:15:48.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python制作pdf电子书"><a href="#python制作pdf电子书" class="headerlink" title="python制作pdf电子书"></a>python制作pdf电子书</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p><em>制作电子书使用的是<code>python</code>的<code>pdfkit</code>这个库，<code>pdfkit</code>是 <code>wkhtmltopdf</code> 的<code>Python</code>封装包，因此在安装这个之前要安装<code>wkhtmltopdf</code></em></p>
</blockquote>
<h3 id="安装wkhtmltopdf"><a href="#安装wkhtmltopdf" class="headerlink" title="安装wkhtmltopdf"></a>安装wkhtmltopdf</h3><blockquote>
<ul>
<li><p><code>sudo apt-get install wkhtmltopdf</code>  (<code>ubantu</code>下，不过这里安装的时候可能对应的版本不同，会出现错误，如果不行的话还请自己百度下，我安装的时候是可以的)</p>
</li>
<li><p><code>windows</code>下的用户直接到<code>wkhtmltopdf</code>官网下载稳定版本，然后直接安装即可，但是安装之后需要注意的是一定要将其添加到环境变量中，否则会出现找不到路径的问题</p>
</li>
</ul>
</blockquote>
<h3 id="python安装依赖包"><a href="#python安装依赖包" class="headerlink" title="python安装依赖包"></a>python安装依赖包</h3><blockquote>
<p><strong>以下都是我们需要用到的库</strong></p>
<ul>
<li><code>pip install requests</code></li>
<li><code>pip install BeautifulSoup4</code></li>
<li><code>pip install pdfkit</code></li>
</ul>
</blockquote>
<h2 id="pdfkit的用法"><a href="#pdfkit的用法" class="headerlink" title="pdfkit的用法"></a>pdfkit的用法</h2><h3 id="初级了解函数"><a href="#初级了解函数" class="headerlink" title="初级了解函数"></a>初级了解函数</h3><blockquote>
<ul>
<li><code>pdfkit.from_url([url,],&#39;demo.pdf&#39;)</code>  这个是直接传入一个<code>url</code>或者一个<code>url</code>列表，然后通过这个函数直接将其网页转换成<code>demo.pdf</code>,注意这里只能转换静态文本，如果使用js一些脚本的话是不能直接转换的</li>
<li><code>pdfkit.from_string(&quot;&lt;h1&gt;&lt;a href=&quot;https://chenjiabing666.gituhb.io&quot;&gt;陈加兵的博客&lt;/a&gt;&lt;/h1&gt;&quot;,&#39;demo.pdf&#39;)</code> 这个是直接讲一个字符串转换成<code>pdf</code>格式的电子书，里面可以直接传一个字符串，也可以用<code>html</code>标签包裹这个字符串</li>
<li><code>pdfkit.from_file([file_name,],&#39;demo.pdf&#39;)</code>  这个是直接传入一个文件或者一个列表即是多个文件，不过这里传入的文件一般都是html格式的文件</li>
</ul>
</blockquote>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><blockquote>
<p><em>当然知道这个是多么枯燥，生成的电子书书也不能添加各种的样式，下面我们将会介绍一些添加的样式的方法</em></p>
</blockquote>
<h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><blockquote>
<p><strong>这个参数是上面函数的可选参数，其中制定了一些选项，详情请见<a href="http://wkhtmltopdf.org/usage/wkhtmltopdf.txt" target="_blank" rel="external">http://wkhtmltopdf.org/usage/wkhtmltopdf.txt</a>, 你可以移除选项名字前面的 ‘–’ .如果选项没有值, 使用<code>None</code>, <code>Falseor</code> ,<code>*</code> 作为字典值，例子如下：</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">options = &#123;</div><div class="line">        <span class="string">'page-size'</span>: <span class="string">'Letter'</span>,</div><div class="line">        <span class="string">'margin-top'</span>: <span class="string">'0.75in'</span>,</div><div class="line">        <span class="string">'margin-right'</span>: <span class="string">'0.75in'</span>,</div><div class="line">        <span class="string">'margin-bottom'</span>: <span class="string">'0.75in'</span>,</div><div class="line">        <span class="string">'margin-left'</span>: <span class="string">'0.75in'</span>,</div><div class="line">        <span class="string">'encoding'</span>: <span class="string">"UTF-8"</span>,</div><div class="line">        <span class="string">'custom-header'</span>: [</div><div class="line">            (<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip'</span>)</div><div class="line">        ],</div><div class="line">        <span class="string">'cookie'</span>: [</div><div class="line">            (<span class="string">'cookie-name1'</span>, <span class="string">'cookie-value1'</span>),</div><div class="line">            (<span class="string">'cookie-name2'</span>, <span class="string">'cookie-value2'</span>),</div><div class="line">        ],</div><div class="line">        <span class="string">'outline-depth'</span>: <span class="number">10</span>,</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="cover"><a href="#cover" class="headerlink" title="cover"></a>cover</h4><blockquote>
<p><strong>这个参数是用来制作封面的，也是函数中的一个参数，如果想要实现的话可以先写一个html文本，在其中嵌入几张图片或者文字作为封面，然后写入出传入函数即可</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">options = &#123;</div><div class="line">            <span class="string">'page-size'</span>: <span class="string">'Letter'</span>,</div><div class="line">            <span class="string">'margin-top'</span>: <span class="string">'0.75in'</span>,</div><div class="line">            <span class="string">'margin-right'</span>: <span class="string">'0.75in'</span>,</div><div class="line">            <span class="string">'margin-bottom'</span>: <span class="string">'0.75in'</span>,</div><div class="line">            <span class="string">'margin-left'</span>: <span class="string">'0.75in'</span>,</div><div class="line">            <span class="string">'encoding'</span>: <span class="string">"UTF-8"</span>,</div><div class="line">            <span class="string">'custom-header'</span>: [</div><div class="line">                (<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip'</span>)</div><div class="line">            ],</div><div class="line">            <span class="string">'cookie'</span>: [</div><div class="line">                (<span class="string">'cookie-name1'</span>, <span class="string">'cookie-value1'</span>),</div><div class="line">                (<span class="string">'cookie-name2'</span>, <span class="string">'cookie-value2'</span>),</div><div class="line">            ],</div><div class="line">            <span class="string">'outline-depth'</span>: <span class="number">10</span>,</div><div class="line">        &#125;</div><div class="line">cover=<span class="string">'demo.html'</span></div><div class="line">pdfkit.from_file(<span class="string">'demo.html'</span>,<span class="string">'demo.pdf'</span>,cover=cover,options=options)</div></pre></td></tr></table></figure>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><blockquote>
<p><strong>这里的css也是函数中的一个可选参数，这个参数主要的作用作用就是在其中定义自己喜欢的样式，当然这里也可以传入一个列表，定义多个样式css文件，当然没有这个参数也可以实现定义自己的样式，只需要在自己的html模板中定义内嵌的样式，或者直接用<code>&lt;link&gt;</code>引用外面的样式即可，本人亲试是可以的，具体的使用如下</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">css=<span class="string">'demo.css'</span></div><div class="line">pdfkit.from_file(<span class="string">'demo.html'</span>,<span class="string">'demo.pdf'</span>,options=options,cover=cover,css=css)</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<ul>
<li><p>这里生成<code>pdf</code>的时候可能出现中文的乱码，请一定在<code>html</code>模板开头指定字体<code>utf-8</code>-&gt; <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
</li>
<li><p>可能在爬取生成的时候会出现<code>ascii</code>错误，只需要在<code>py</code>文件开头写下：</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> threading</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>写入文件的时候不想<code>python3</code>一样可以指定编码格式，这里我使用的是<code>codecs</code>库，可以向python3一样指定其中的编码格式</li>
</ul>
</blockquote>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><blockquote>
<p><em>本人爬了廖雪峰老师的<code>python2.7</code>的教程，并且做成了电子书，截图如下</em></p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/liaoxuefeng.png" alt="python教程"></p>
</blockquote>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><blockquote>
<ul>
<li>这里并没有使用框架，如果有兴趣的朋友可以用框架写一个爬取全站的</li>
<li><p>这里的主要用到的是<code>BeautifulSoup</code>和<code>requests</code>,详情可以看我的博客中的<a href="https://chenjiabing666.github.io/2017/04/29/python%E7%88%AC%E8%99%AB%E4%B9%8BBeautifulSoup/">BeautifulSoup用法</a>,后续还会更新requests的用法</p>
</li>
<li><p>源代码请见<a href="https://github.com/chenjiabing666/liaoxuefeng_pdfkit" target="_blank" rel="external">https://github.com/chenjiabing666/liaoxuefeng_pdfkit</a></p>
</li>
</ul>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://mp.weixin.qq.com/s/LH8nEFfVH4_tvYWo46CF5Q" target="_blank" rel="external">http://mp.weixin.qq.com/s/LH8nEFfVH4_tvYWo46CF5Q</a></li>
<li><a href="http://www.cnblogs.com/taceywong/p/5643978.html" target="_blank" rel="external">http://www.cnblogs.com/taceywong/p/5643978.html</a></li>
<li><a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/#id44" target="_blank" rel="external">http://beautifulsoup.readthedocs.io/zh_CN/latest/#id44</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python制作pdf电子书&quot;&gt;&lt;a href=&quot;#python制作pdf电子书&quot; class=&quot;headerlink&quot; title=&quot;python制作pdf电子书&quot;&gt;&lt;/a&gt;python制作pdf电子书&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回溯算法</title>
    <link href="http://chenjiabing666.github.io/2017/05/10/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2017/05/10/回溯算法/</id>
    <published>2017-05-09T20:18:44.000Z</published>
    <updated>2017-05-09T20:21:12.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><blockquote>
<p>回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。八皇后问题就是回溯算法的典型，第一步按照顺序放一个皇后，然后第二步符合要求放第2个皇后，如果没有位置符合要求，那么就要改变第一个皇后的位置，重新放第2个皇后的位置，直到找到符合条件的位置就可以了。回溯在迷宫搜索中使用很常见，就是这条路走不通，然后返回前一个路口，继续下一条路。回溯算法说白了就是穷举法。不过回溯算法使用剪枝函数，剪去一些不可能到达 最终状态（即答案状态）的节点，从而减少状态空间树节点的生成。回溯法是一个既带有系统性又带有跳跃性的的搜索算法。它在包含问题的所有解的解空间树中，按照深度优先的策略，从根结点出发搜索解空间树。算法搜索至解空间树的任一结点时，总是先判断该结点是否肯定不包含问题的解。如果肯定不包含，则跳过对以该结点为根的子树的系统搜索，逐层向其祖先结点回溯。否则，进入该子树，继续按深度优先的策略进行搜索。回溯法在用来求问题的所有解时，要回溯到根，且根结点的所有子树都已被搜索遍才结束。而回溯法在用来求问题的任一解时，只要搜索到问题的一个解就可以结束。这种以深度优先的方式系统地搜索问题的解的算法称为回溯法，它适用于解一些组合数较大的问题。回溯算法也叫试探法，它是一种系统地搜索问题的解的方法。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。用回溯算法解决问题的一般步骤为：</p>
<ol>
<li><strong>定义一个解空间，它包含问题的解。</strong></li>
<li><strong>利用适于搜索的方法组织解空间。</strong></li>
<li><strong>利用深度优先法搜索解空间。</strong></li>
<li><strong>利用限界函数避免移动到不可能产生解的子空间。</strong></li>
</ol>
</blockquote>
<h2 id="解决迷宫问题"><a href="#解决迷宫问题" class="headerlink" title="解决迷宫问题"></a>解决迷宫问题</h2><h3 id="解决思想"><a href="#解决思想" class="headerlink" title="解决思想"></a>解决思想</h3><blockquote>
<p>将迷宫问题对应为二维数组，数组中只有两种值0和1，其中0，1分别表示通路和墙。不过在解决这个问题的时候一般要在最外面添加一个围墙，这里设置每个围墙都为1，这样有利于防止当走到了迷宫的出口处还会向前走，这个并不一定，只是最一般的方法，也是最有利于理解的方法。这里的利用到了回溯法，需要走到了一个位置，然后向四处试探，如果有一个方向可以走了就将当前的点压入栈，并且标记当前点以便于区分是否走过，如果四处都无出路，只需要回到前一个走到的点，然后从前一个点再换一个方向重新走</p>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenjiabing on 17-5-5.</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">position</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> row;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> col;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">position</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.col = col;</div><div class="line">        <span class="keyword">this</span>.row = row;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">position</span><span class="params">()</span> </span>&#123;</div><div class="line">        row = <span class="number">0</span>;</div><div class="line">        col = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"("</span> + (row - <span class="number">1</span>) + <span class="string">" ,"</span> + (col - <span class="number">1</span>) + <span class="string">")"</span>;</div><div class="line">    &#125;  <span class="comment">//这里由于四周围上了墙，所以这里的输出就要在原来的基础上减一</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] maze = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> Stack&lt;position&gt; stack = <span class="keyword">null</span>;  <span class="comment">//创建一个栈用于存储状态</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> row;   <span class="comment">//行数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> col;</div><div class="line">    <span class="keyword">boolean</span>[][] p = <span class="keyword">null</span>;    <span class="comment">//这里的p是用来标记已经走过的点，初始化为false</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">end</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> i == row &amp;&amp; j == col;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">(<span class="keyword">int</span>[][] maze)</span> </span>&#123;</div><div class="line">        stack = <span class="keyword">new</span> Stack&lt;position&gt;();</div><div class="line">        row = maze[<span class="number">0</span>].length;<span class="comment">// 行数</span></div><div class="line">        col = maze.length;   <span class="comment">//列数</span></div><div class="line">        p = <span class="keyword">new</span> <span class="keyword">boolean</span>[row + <span class="number">2</span>][col + <span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</div><div class="line">                p[i][j] = <span class="keyword">false</span>;    <span class="comment">//初始化</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.maze = maze;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPath</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//创建一个新的迷宫，将两边都围上墙，也就是在四周都填上1的墙，形成新的迷宫，主要的目的就是防止走到迷宫的边界的出口的位置还会继续向前走</span></div><div class="line">        <span class="comment">//因此需要正确的判断是否在边界线上，所以要在外围加上一堵墙,</span></div><div class="line">        <span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[row + <span class="number">2</span>][col + <span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row + <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col + <span class="number">2</span>; j++) &#123;</div><div class="line">                temp[<span class="number">0</span>][j] = <span class="number">1</span>;   <span class="comment">//第一行围上</span></div><div class="line">                temp[row + <span class="number">1</span>][j] = <span class="number">1</span>;  <span class="comment">//最后一行围上</span></div><div class="line">                temp[i][<span class="number">0</span>] = temp[i][col + <span class="number">1</span>] = <span class="number">1</span>;  <span class="comment">//两边的围上</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 将原始迷宫复制到新的迷宫中</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j) &#123;</div><div class="line">                temp[i + <span class="number">1</span>][j + <span class="number">1</span>] = maze[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</div><div class="line">        p[i][j] = <span class="keyword">true</span>;</div><div class="line">        stack.push(<span class="keyword">new</span> position(i, j));</div><div class="line">        <span class="comment">//这里是是将走到的点入栈，然后如果前后左右都走不通的话才出栈</span></div><div class="line">        <span class="keyword">while</span> (!stack.empty() &amp;&amp; !end(i, j)) &#123;</div><div class="line"></div><div class="line"></div><div class="line">           <span class="comment">//下面就开始在四周试探，如果有路就向前走，顺序分别是右，下，上，左，当然这是随便定义的，不过一般都是现向下和右的</span></div><div class="line">            <span class="keyword">if</span> (temp[i][j + <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; p[i][j + <span class="number">1</span>] == <span class="keyword">false</span>)<span class="comment">//这里如果不在四周加上墙，那么在到达边界判断的时候就会出现超出数组的索引的错误，因为到达边界再加一就会溢出</span></div><div class="line">            &#123;</div><div class="line">                p[i][j + <span class="number">1</span>] = <span class="keyword">true</span>;</div><div class="line">                stack.push(<span class="keyword">new</span> position(i, j + <span class="number">1</span>));</div><div class="line">                j++;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[i + <span class="number">1</span>][j] == <span class="number">0</span> &amp;&amp; p[i + <span class="number">1</span>][j] == <span class="keyword">false</span>)<span class="comment">//如果下面可以走的话，讲当前点压入栈，i++走到下一个点</span></div><div class="line">            &#123;</div><div class="line">                p[i + <span class="number">1</span>][j] = <span class="keyword">true</span>;</div><div class="line">                stack.push(<span class="keyword">new</span> position(i + <span class="number">1</span>, j));</div><div class="line">                i++;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[i][j - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; p[i][j - <span class="number">1</span>] == <span class="keyword">false</span>) &#123;</div><div class="line">                p[i][j - <span class="number">1</span>] = <span class="keyword">true</span>;</div><div class="line">                stack.push(<span class="keyword">new</span> position(i, j - <span class="number">1</span>));</div><div class="line">                j--;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[i - <span class="number">1</span>][j] == <span class="number">0</span> &amp;&amp; p[i - <span class="number">1</span>][j] == <span class="keyword">false</span>) &#123;</div><div class="line">                p[i - <span class="number">1</span>][j] = <span class="keyword">true</span>;</div><div class="line">                stack.push(<span class="keyword">new</span> position(i - <span class="number">1</span>, j));</div><div class="line">                i--;</div><div class="line">            &#125; <span class="keyword">else</span>   <span class="comment">//前后左右都不能走</span></div><div class="line">            &#123;</div><div class="line">                System.out.println(i + <span class="string">"---------"</span> + j);</div><div class="line">                stack.pop();   <span class="comment">//这个点不能走通，弹出</span></div><div class="line">                <span class="keyword">if</span> (stack.empty())      <span class="comment">//如果此栈中已经没有点了，那么直接跳出循环</span></div><div class="line">                &#123;</div><div class="line">                    System.out.println(<span class="string">"没有路径了，出不去了"</span>);</div><div class="line">                    <span class="keyword">return</span>;    <span class="comment">//直接退出了，下面就不用找了</span></div><div class="line">                &#125;</div><div class="line">                i = stack.peek().row;   <span class="comment">//获得最新点的坐标</span></div><div class="line">                j = stack.peek().col;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//如果已经到达了边界，那么直接可以出去了，不需要继续向前走了，这里是规定边界的任意为0的位置都是出口</span></div><div class="line">            <span class="comment">//如果不加这个判断的话，那么当到达边界的时候，只有走到不能再走的时候才会输出路线，那种线路相对这个而言是比较长的</span></div><div class="line">            <span class="keyword">if</span> (j == temp[<span class="number">0</span>].length - <span class="number">2</span>) &#123;   <span class="comment">//如果已经到达边界了，那么当前的位置就是出口，就不需要再走了</span></div><div class="line">                Stack&lt;position&gt; pos = <span class="keyword">new</span> Stack&lt;position&gt;();</div><div class="line"></div><div class="line">                System.out.println(<span class="string">"路径如下："</span>);</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; stack.size(); count++) &#123;</div><div class="line">                    System.out.println(stack.elementAt(count));</div><div class="line">                &#125;</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] maze = &#123;</div><div class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</div><div class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</div><div class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</div><div class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</div><div class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</div><div class="line">        &#125;;</div><div class="line">        Main main = <span class="keyword">new</span> Main(maze);</div><div class="line">        main.findPath();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回溯算法&quot;&gt;&lt;a href=&quot;#回溯算法&quot; class=&quot;headerlink&quot; title=&quot;回溯算法&quot;&gt;&lt;/a&gt;回溯算法&lt;/h1&gt;&lt;h2 id=&quot;主要思想&quot;&gt;&lt;a href=&quot;#主要思想&quot; class=&quot;headerlink&quot; title=&quot;主要思想&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
