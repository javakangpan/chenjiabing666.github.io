<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2017-09-27T06:04:35.353Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Excel表格的写入读取</title>
    <link href="http://chenjiabing666.github.io/2017/09/27/Excel%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%86%99%E5%85%A5%E8%AF%BB%E5%8F%96/"/>
    <id>http://chenjiabing666.github.io/2017/09/27/Excel表格的写入读取/</id>
    <published>2017-09-27T06:03:06.000Z</published>
    <updated>2017-09-27T06:04:35.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Excel的读取和写入"><a href="#Excel的读取和写入" class="headerlink" title="Excel的读取和写入"></a>Excel的读取和写入</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p>首先需要导入jar包，请点击<a href="http://download.csdn.net/download/qq_34162294/9997646" target="_blank" rel="external">这里下载</a></p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>我们知道<code>Excel</code>表格在<code>2007</code>之后就不一样了，后缀名变为<code>xlsx</code>，之前的后缀名为<code>xls</code>,因此读取和写入的操作就对应着不同的方式，但是只是读取和写入的类不同了，思想还是一样的。</p>
<p>我们要知道一个Excel文件(工作簿)包含三部分，分别是工作表(<code>sheet</code>),行(<code>row</code>),列(<code>cell</code>)</p>
</blockquote>
<h2 id="工作簿"><a href="#工作簿" class="headerlink" title="工作簿"></a>工作簿</h2><blockquote>
<p>工作簿对应的类是 <code>XSSFWorkbook</code>(2007之后),在2007之前对应的类是<code>HSSFWorkbook</code></p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p><code>new XSSFWorkbook()</code>   创建一个工作簿用于写入文件</p>
<p><code>new XSSFWorkbook(java.io.InputStream inputstream)</code>  创建一个工作簿，用于读取文件</p>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>XSSFFont createFont()</code>   返回一个<code>XSSFont</code>类的对象，主要用于设置字体用的</li>
<li><code>XSSFSheet createSheet()</code>   创建一个工作表</li>
<li><code>XSSFSheet    createSheet(String name)</code>   创建一个工作表并且指定姓名</li>
<li><code>XSSFCellStyle    createCellStyle()</code>   创建一个单元格风格类的一个对象，便于设置单元格的属性</li>
<li><code>write(OutputStream out)</code>    用于将文件写入到文件中</li>
<li><code>close()</code>  </li>
<li><code>setSheetName(int sheetIx,String name)</code>  为指定索引的工作表设置名称</li>
<li><code>XSSFSheet getSheetAt(int index)</code>   获取指定索引的工作表对象，这个是用来读取文件的时候用的</li>
</ul>
</blockquote>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="读取文件的例子"><a href="#读取文件的例子" class="headerlink" title="读取文件的例子"></a>读取文件的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  File file = <span class="keyword">new</span> File(<span class="string">"F:\\demo1.xlsx"</span>);</div><div class="line"><span class="comment">//创建输入流</span></div><div class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line"><span class="comment">//创建工作簿读取</span></div><div class="line">XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream);</div></pre></td></tr></table></figure>
<h4 id="写入文件的例子"><a href="#写入文件的例子" class="headerlink" title="写入文件的例子"></a>写入文件的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">XSSFWorkbook book=<span class="keyword">new</span> XSSFWorkbook();  <span class="comment">//创建工作簿</span></div><div class="line"></div><div class="line">.....省略写入的内容</div><div class="line"></div><div class="line">FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\demo1.xlsx"</span>);  <span class="comment">//创建输出流</span></div><div class="line"></div><div class="line">book.write(out);     <span class="comment">//写入到指定的文件</span></div><div class="line"></div><div class="line">book.close(); <span class="comment">// 关闭</span></div><div class="line">out.close();</div></pre></td></tr></table></figure>
<h2 id="工作表-sheet"><a href="#工作表-sheet" class="headerlink" title="工作表(sheet)"></a>工作表(sheet)</h2><blockquote>
<p>工作表对应的类为<code>XSSFSheet</code>,2007之前对应的是HSSFSheet<br>一般工作表都是在工作簿基础上创建的，因此构造函数也用不到，所以这里就不多说了</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><p><code>int    addMergedRegion(CellRangeAddress region)</code>  合并单元格</p>
</li>
<li><p><code>XSSFRow    createRow(int rownum)</code>   创建一个行   rownum表示创建第几行，这是一个行的索引(0开始)  便于写入</p>
</li>
<li><p><code>XSSFRow getRow(int index)</code>  获取指定索引的那一行，便于读取</p>
</li>
<li><p><code>int getLastRowNum()</code>     获取文件中最后一行的索引，这个通常在读取的时候用到</p>
</li>
<li><p><code>int getFirsetRowNum()</code>   获取文件第一行的索引</p>
</li>
</ul>
</blockquote>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建工作簿对象</span></div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">        XSSFSheet sheet = workbook.createSheet(<span class="string">"第一张表"</span>);   <span class="comment">//创建工作表对象</span></div><div class="line"></div><div class="line">        <span class="comment">//合并单元格    CellRangeAddress cell=new CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol) </span></div><div class="line">        <span class="comment">//这里表示合并第一行的1-10列</span></div><div class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>));</div></pre></td></tr></table></figure>
<h4 id="创建一行"><a href="#创建一行" class="headerlink" title="创建一行"></a>创建一行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">XSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">XSSFSheet sheet = workbook.createSheet(<span class="string">"第一张表"</span>);   <span class="comment">//创建工作表对象</span></div><div class="line">XSSFRow row=sheet.createRow(<span class="number">0</span>);   <span class="comment">//创建第一行</span></div></pre></td></tr></table></figure>
<h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><blockquote>
<p>行对应的类为<code>XSFFRow</code>,2007之前对应的是HSSFRow</p>
</blockquote>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>XSSFCell    createCell(int columnIndex)</code>  创建一列  columnIndex表示列的索引(0开始)</p>
</li>
<li><p><code>short    getFirstCellNum()</code>   返回文件中第一个列的索引，便于以后读取</p>
</li>
<li><p><code>short    getLastCellNum()</code>   返回全部的列数(不是索引)，这个和Sheet中getRowNum()方法不同，便于以后读取文件</p>
</li>
<li><p><code>XSSFCell    getCell(int cellnum)</code>    获取指定索引的那一列，便于以后的读取</p>
</li>
<li><p><code>XSSCellStyle getCellStyle()</code>   获取单元格风格的对象</p>
</li>
<li><p><code>void setCellStyle(XSSFCellStyle style)</code>  将设置的风格样式添加到单元格中，否则将不会起作用</p>
</li>
</ul>
</blockquote>
<h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><blockquote>
<p>列对应的类为<code>XSSFCell</code>,2007之前对应的是HSSFCell</p>
</blockquote>
<h3 id="常用的单元格类型"><a href="#常用的单元格类型" class="headerlink" title="常用的单元格类型"></a>常用的单元格类型</h3><blockquote>
<p>常用的单元格的类型有字符串，数字，布尔值，空值，可以使用<code>XSSFCell</code>的<code>int getCellType()</code> 方法获取类型</p>
<ul>
<li><code>CELL_TYPE_BLANK</code> 空值</li>
<li><code>CELL_TYPE_STRING</code>  字符串</li>
<li><code>CELL_TYPE_NUMERIC</code>   数字(浮点值，整型)</li>
<li><code>CELL_TYPE_BOOLEAN</code> 布尔值(True,FALSE)</li>
</ul>
</blockquote>
<h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>int getCellType()</code>获取单元格类型  可以和常用的单元格类型进行比较，然后使用不同的读取方法读取</p>
</li>
<li><p><code>XSSFCellStyle    getCellStyle()</code>   获取单元格风格对象，便于后面设置单元格的风格</p>
</li>
<li><p><code>setCellValue(Object value)</code>  设置单元格的内容，可以是任意类型的</p>
</li>
<li><p><code>java.util.Date    getDateCellValue()</code>   读取单元格的日期内容</p>
</li>
<li><p><code>String    getStringCellValue()</code>   读取单元格中的字符串内容</p>
</li>
<li><p><code>double    getNumericCellValue()</code>    读取单元格中的数字类型的内容</p>
</li>
<li><p><code>boolean    getBooleanCellValue()</code>   获取单元格中的布尔类型的内容</p>
</li>
</ul>
</blockquote>
<h2 id="设置单元格样式"><a href="#设置单元格样式" class="headerlink" title="设置单元格样式"></a>设置单元格样式</h2><blockquote>
<p>对应的类为<code>XSSFCellStyle</code></p>
</blockquote>
<h3 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>void    setAlignment(HorizontalAlignment align)</code>   设置水平对齐方式 </p>
</li>
<li><p><code>void    setVerticalAlignment(VerticalAlignment align)</code>   设置垂直的对齐方式</p>
</li>
<li><p><code>void    setTopBorderColor(XSSFColor color)</code>   设置上边框的颜色(还有Left,right..)</p>
</li>
<li><p><code>void    setFont(Font font)</code>   设置字体  这里的Font是org.apache.poi.ss.usermodel.Font</p>
</li>
<li><p><code>void    setBorderTop(BorderStyle border)</code>   设置上边框的样式，在BorderStyle类中有很多的样式</p>
</li>
<li><p><code>void    setRotation(short rotation)</code> 设置文字的旋转度数</p>
</li>
</ul>
</blockquote>
<h2 id="单元格字体的设置"><a href="#单元格字体的设置" class="headerlink" title="单元格字体的设置"></a>单元格字体的设置</h2><blockquote>
<p>对应的类为<code>XSSFFont</code></p>
</blockquote>
<h3 id="常用的方法-4"><a href="#常用的方法-4" class="headerlink" title="常用的方法:"></a>常用的方法:</h3><blockquote>
<ul>
<li><p><code>void    setBold(boolean bold)</code>  是否设置加粗</p>
</li>
<li><p><code>void    setItalic(boolean italic)</code>   设置是否倾斜</p>
</li>
<li><p><code>void    setUnderline(FontUnderline underline)</code> 设置下划线</p>
</li>
<li><p><code>void    setStrikeout(boolean strikeout)</code>   设置是否带有删除线</p>
</li>
<li><p><code>void    setColor(XSSFColor color)</code>   设置字体的颜色,只需要调用XSSFColor静态颜色变量即可</p>
</li>
<li><p><code>void    setFontHeight(double height)</code>   设置字体高度</p>
</li>
<li><p><code>void    setFontHeightInPoints(short height)</code> 设置字号</p>
</li>
<li><p><code>void    setFontName(java.lang.String name)</code>   设置字体样式(黑体，楷体…)</p>
</li>
</ul>
</blockquote>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.util.HSSFColor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.FontUnderline;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.HorizontalAlignment;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.VerticalAlignment;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFColor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFFont;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(); <span class="comment">// 创建工作簿</span></div><div class="line">		XSSFSheet sheet = workbook.createSheet(<span class="string">"第一个工作表"</span>); <span class="comment">// 创建一个工作表</span></div><div class="line">		XSSFCellStyle style = workbook.createCellStyle(); <span class="comment">// 创建单元格风格对象</span></div><div class="line">		sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>)); <span class="comment">// 合并第一行的单元格</span></div><div class="line">		style.setAlignment(HorizontalAlignment.CENTER); <span class="comment">// 设置水平居中</span></div><div class="line">		style.setVerticalAlignment(VerticalAlignment.CENTER); <span class="comment">// 设置垂直居中</span></div><div class="line"></div><div class="line">		XSSFFont font = workbook.createFont(); <span class="comment">// 创建字体的对象</span></div><div class="line">		font.setFontName(<span class="string">"黑体"</span>); <span class="comment">// 设置字体的样式为黑体</span></div><div class="line">		font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">20</span>); <span class="comment">// 设置字体的大小</span></div><div class="line">		font.setBold(<span class="keyword">true</span>); <span class="comment">// 设置粗体</span></div><div class="line">		font.setItalic(<span class="keyword">true</span>); <span class="comment">// 设置倾斜</span></div><div class="line">		font.setColor(HSSFColor.RED.index); <span class="comment">// 设置字体的颜色</span></div><div class="line">		font.setUnderline(FontUnderline.SINGLE); <span class="comment">// 设置下划线</span></div><div class="line">		font.setStrikeout(<span class="keyword">false</span>); <span class="comment">// 设置不带下划线</span></div><div class="line"></div><div class="line">		style.setFont(font); <span class="comment">// 将设置的字体添加到单元格样式中，显示出来</span></div><div class="line"></div><div class="line">		XSSFRow row1 = sheet.createRow(<span class="number">0</span>); <span class="comment">// 创建第一个行</span></div><div class="line">		XSSFCell cell1 = row1.createCell(<span class="number">0</span>); <span class="comment">// 创建第一行的第一列</span></div><div class="line">		cell1.setCellStyle(style); <span class="comment">// 将上面定义的风格设置到这个单元格中，这个是必须有的，否则根本不起作用</span></div><div class="line">		cell1.setCellValue(<span class="string">"员工信息表"</span>); <span class="comment">// 设置单元格的内容</span></div><div class="line"></div><div class="line">		<span class="comment">// 设置第二行的前三列的值</span></div><div class="line">		XSSFRow row2 = sheet.createRow(<span class="number">1</span>);</div><div class="line">		row2.createCell(<span class="number">0</span>).setCellValue(<span class="string">"姓名"</span>);</div><div class="line">		row2.createCell(<span class="number">1</span>).setCellValue(<span class="string">"性别"</span>);</div><div class="line">		row2.createCell(<span class="number">2</span>).setCellValue(<span class="string">"年龄"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 设置第三行的前三列</span></div><div class="line">		XSSFRow row3 = sheet.createRow(<span class="number">2</span>);</div><div class="line">		row3.createCell(<span class="number">0</span>).setCellValue(<span class="string">"陈加兵"</span>);</div><div class="line">		row3.createCell(<span class="number">1</span>).setCellValue(<span class="string">"男"</span>);</div><div class="line">		row3.createCell(<span class="number">2</span>).setCellValue(<span class="number">22</span>); <span class="comment">// 设置数字</span></div><div class="line"></div><div class="line">		<span class="comment">// 设置第四行的前三列</span></div><div class="line">		XSSFRow row4 = sheet.createRow(<span class="number">3</span>);</div><div class="line">		row4.createCell(<span class="number">0</span>).setCellValue(<span class="string">"郑元梅"</span>);</div><div class="line">		row4.createCell(<span class="number">1</span>).setCellValue(<span class="string">"女"</span>);</div><div class="line">		row4.createCell(<span class="number">2</span>).setCellValue(<span class="number">22</span>); <span class="comment">// 设置数字</span></div><div class="line"></div><div class="line">		<span class="comment">// 创建输出流对象</span></div><div class="line">		FileOutputStream stream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(</div><div class="line">				<span class="string">"F:\\demo2.xlsx"</span>));</div><div class="line">		workbook.write(stream); <span class="comment">// 写入文件</span></div><div class="line">		workbook.close(); <span class="comment">// 关闭</span></div><div class="line">		stream.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写入文件-1"><a href="#写入文件-1" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"F:\\demo2.xlsx"</span>);</div><div class="line">		FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file); <span class="comment">// 创建输入流</span></div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream); <span class="comment">// 创建读取工作簿的对象</span></div><div class="line">		XSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>); <span class="comment">// 获取第一个工作表的对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 第一次循环取得所有的行的对象 getLastRowNum()是得到最后一行的索引</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sheet.getLastRowNum(); i++) &#123;</div><div class="line">			XSSFRow row = sheet.getRow(i); <span class="comment">// 获取每一行的对象</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row.getLastCellNum(); j++) &#123;</div><div class="line">				XSSFCell cell = row.getCell(j); <span class="comment">// 获取每一行的每一列</span></div><div class="line">				<span class="keyword">int</span> type = cell.getCellType(); <span class="comment">// 获取每一个单元格对应的类型</span></div><div class="line">				<span class="keyword">switch</span> (type) &#123;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_BOOLEAN:   <span class="comment">//如果是布尔类型</span></div><div class="line">					<span class="keyword">boolean</span> b=cell.getBooleanCellValue();</div><div class="line">					System.out.print(b + <span class="string">"    "</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_NUMERIC:  <span class="comment">//如果是数字类型</span></div><div class="line">					<span class="keyword">double</span> d=cell.getNumericCellValue();   <span class="comment">//获取值</span></div><div class="line">					System.out.print( d+ <span class="string">"    "</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_STRING:  <span class="comment">//如果是字符串类型的</span></div><div class="line">					String s=cell.getStringCellValue();</div><div class="line">					System.out.print( s+ <span class="string">"   "</span>);   </div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_BLANK:   <span class="comment">//如果是空值</span></div><div class="line">					System.out.print(<span class="string">"      "</span>);</div><div class="line">				<span class="keyword">default</span>:</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		workbook.close();  <span class="comment">//关闭</span></div><div class="line">		inputStream.close();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><p><a href="http://tool.oschina.net/apidocs/apidoc?api=apache-POI" target="_blank" rel="external">POI文档</a></p>
</li>
<li><p><a href="http://lsieun.blog.51cto.com/9210464/1836601" target="_blank" rel="external">http://lsieun.blog.51cto.com/9210464/1836601</a></p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Excel的读取和写入&quot;&gt;&lt;a href=&quot;#Excel的读取和写入&quot; class=&quot;headerlink&quot; title=&quot;Excel的读取和写入&quot;&gt;&lt;/a&gt;Excel的读取和写入&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;head
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="POI(Excel)" scheme="http://chenjiabing666.github.io/tags/POI-Excel/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结四(EL表达式)</title>
    <link href="http://chenjiabing666.github.io/2017/09/26/JSP%E6%80%BB%E7%BB%93%E5%9B%9B-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2017/09/26/JSP总结四-EL表达式/</id>
    <published>2017-09-26T12:07:16.000Z</published>
    <updated>2017-09-27T06:03:48.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结四-EL表达式"><a href="#JSP总结四-EL表达式" class="headerlink" title="JSP总结四(EL表达式)"></a>JSP总结四(EL表达式)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>JSP页面尽量不要使用<code>scriptlet</code>编写<code>java</code>代码，因此我们可以使用<code>EL</code>表达式可以替代<code>Java</code>语句的使用</p>
</blockquote>
<h2 id="隐含对象"><a href="#隐含对象" class="headerlink" title="隐含对象"></a>隐含对象</h2><h3 id="与属性相关的隐含对象"><a href="#与属性相关的隐含对象" class="headerlink" title="与属性相关的隐含对象"></a>与属性相关的隐含对象</h3><blockquote>
<p>属性的隐含对象有<code>PageScope</code>,<code>requestScop</code>e,<code>sessionScope</code>,<code>applicationScope</code>分别对应的是<code>JSP</code>中的<code>PageContext</code>,<code>request</code>,<code>session</code>,<code>application</code>，因此可以取得<code>JSP</code>对象使用<code>setAttribute()</code>设置的属性，如果没有使用EL隐含对象获取属性的值，那么默认是从<code>PageScope</code>开始寻找</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    request.setAttribute(<span class="string">"login"</span>,<span class="string">'true'</span>);   <span class="comment">//绑定request对象的属性</span></div><div class="line">    session.setAttribute(<span class="string">"login"</span>,<span class="string">'true'</span>);   <span class="comment">//绑定session对象的属性</span></div><div class="line">    application.setAttribute(<span class="string">"login"</span>,<span class="string">"true"</span>);  <span class="comment">//设置application对象的属性</span></div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;%--获取request绑定的属性值  相当于request.getAttribute(<span class="string">"login"</span>);--%&gt;</div><div class="line">&lt;h1&gt;$&#123;requestScope.login&#125;&lt;h1&gt;</div><div class="line"></div><div class="line">&lt;%--获取session绑定的属性值--%&gt;</div><div class="line">&lt;h1&gt;$&#123;sessionScope.login&#125;&lt;h1&gt;</div></pre></td></tr></table></figure>
<h3 id="与请求参数相关的隐含对象-param-paramValues"><a href="#与请求参数相关的隐含对象-param-paramValues" class="headerlink" title="与请求参数相关的隐含对象(param,paramValues)"></a>与请求参数相关的隐含对象(param,paramValues)</h3><blockquote>
<p>与请求参数相关的EL隐含对象有<code>param</code>,<code>paramValues</code>。我们可以使用EL表达式可以获取表单提交的请求参数。</p>
<p>下面我们使用表单提交，测试一下</p>
<blockquote>
<p>JSP代码(表单提交)</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;form action="demo1.jsp" method="get"&gt;</div><div class="line">    姓名:&lt;input type="text" name="username"&gt;</div><div class="line">    密码:&lt;input type="password" name="password"&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">    </div><div class="line">    爱好:</div><div class="line">    打棒球：&lt;input type="checkbox" name="hobbies"&gt;</div><div class="line">    打羽毛球：&lt;input type="checkbox" name="hobbies"&gt;</div><div class="line">    </div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>demo1.jsp 文件（接收请求参数）</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%--获取提交的请求参数username，password </div><div class="line">    相当于使用如下代码:</div><div class="line">        request.getParameter("username");</div><div class="line">        request.getParameter("password");</div><div class="line">--%&gt;</div><div class="line">&lt;h1&gt;$&#123;param.username&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;param.password&#125;&lt;/h1&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;%--获取多选框的值  相当于使用下面的代码:</div><div class="line">    request.getParameterValues("hobbies")[0]</div><div class="line">--%&gt;</div><div class="line">&lt;h1&gt;$&#123;paramValues.hobbies[0]&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;paramValues.hobbies[1]&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h3 id="与标头-Header-相关的隐含对象"><a href="#与标头-Header-相关的隐含对象" class="headerlink" title="与标头(Header)相关的隐含对象"></a>与标头(Header)相关的隐含对象</h3><blockquote>
<p>如果想要取得用户请求的表头数据，那么使用<code>header</code>或者<code>headerValues</code>隐含对象。例如使用<code>${header[&quot;User-Agent&quot;]}</code> 这个相当于使用<code>&lt;%=request.getHeader(&quot;User-Agent&quot;)%&gt;</code>。 <code>HeaderValues</code>对象相当于使用<code>request.getHeaders()</code>  </p>
</blockquote>
<h3 id="cookie隐含对象"><a href="#cookie隐含对象" class="headerlink" title="cookie隐含对象"></a>cookie隐含对象</h3><blockquote>
<p><code>cookie</code>的隐含对象可以取得用户设置的<code>Cookie</code>设置的值。如果在<code>Cookie</code>中设置了<code>username</code>属性，那么可以使用<code>${cookie.username}</code></p>
</blockquote>
<h3 id="初始参数隐含对象"><a href="#初始参数隐含对象" class="headerlink" title="初始参数隐含对象"></a>初始参数隐含对象</h3><blockquote>
<p>隐含对象<code>initParam</code>可以用来取得<code>web.xml</code>中设置的<code>ServletContext</code>初始参数，也就是在<code>&lt;context-param&gt;</code>中设置的初始参数。例如<code>${initParam.initcount}</code>的作用，相当于<code>&lt;%=ServletContext.getInitParameter(&quot;initCount&quot;)%&gt;</code></p>
</blockquote>
<h2 id="EL运算符"><a href="#EL运算符" class="headerlink" title="EL运算符"></a>EL运算符</h2><blockquote>
<p>使用EL运算符直接实现一些算术运算符，逻辑运算符，就如同一般常见的程序语言中的运算</p>
</blockquote>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote>
<p>可以直接使用加减乘除 <code>${1+2}</code>,<code>${5/2}</code>,<code>${5*3}</code></p>
</blockquote>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote>
<p><code>${true and false}=false</code>,<code>${true and true}=true</code>,<code>${true or false}=true</code></p>
</blockquote>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><blockquote>
<p>可以直接在EL表达式比较大小，返回的也是<code>false</code>和<code>true</code>，可以用来判断，如下：<br><code>${1&lt;2}=false</code> ,<code>${(10*10)&gt;200}=true</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;c:if text="$&#123;6&gt;5&#125;"&gt;</div><div class="line">    &lt;c:out value="可以直接使用EL表达式进行比较"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结四-EL表达式&quot;&gt;&lt;a href=&quot;#JSP总结四-EL表达式&quot; class=&quot;headerlink&quot; title=&quot;JSP总结四(EL表达式)&quot;&gt;&lt;/a&gt;JSP总结四(EL表达式)&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结三(JSTL核心标签库的使用)</title>
    <link href="http://chenjiabing666.github.io/2017/09/22/JSP%E6%80%BB%E7%BB%93%E4%B8%89-JSTL%E6%A0%B8%E5%BF%83%E6%A0%87%E7%AD%BE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/22/JSP总结三-JSTL核心标签库的使用/</id>
    <published>2017-09-22T06:39:43.000Z</published>
    <updated>2017-10-01T07:58:08.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结三-JSTL核心标签库的使用"><a href="#JSP总结三-JSTL核心标签库的使用" class="headerlink" title="JSP总结三(JSTL核心标签库的使用)"></a>JSP总结三(JSTL核心标签库的使用)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>其实在我们编写JSP网页的时候是不希望在JSP页面中出现Java代码的，这里我们就要使用<code>JSTL</code>的核心标签库来实现。</p>
<p>想要使用JSTL，一定要填上这句话：<code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</code></p>
</blockquote>
<h2 id="属性处理与输出标签"><a href="#属性处理与输出标签" class="headerlink" title="属性处理与输出标签"></a>属性处理与输出标签</h2><h3 id="属性处理标签"><a href="#属性处理标签" class="headerlink" title="属性处理标签"></a>属性处理标签</h3><blockquote>
<p>在定义变量的时候，我们难免会用到Java代码，但是这里我们介绍<code>&lt;c:set&gt;</code>标签，这个能够实现变量的定义</p>
<p><code>&lt;c:set&gt;</code>标签中的属性有 <code>var</code>(定义的变量)、<code>value</code>(变量的值)、<code>target</code>(为JavaBean对象赋值的时候使用)、<code>scope</code>(设置变量的存活范围，有<code>request</code>,<code>session</code>,<code>application</code>,<code>page</code>)、<code>property</code>(<code>JavaBean</code>的变量)</p>
<p>使用<code>set</code>标签相当于调用存活范围内的<code>setAttribute()</code>方法来绑定属性</p>
<ul>
<li>定义一个普通的变量:   </li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--x的值为10，这句话相当于String x="10" --%&gt;</div><div class="line">&lt;c:set var="x" value="10"&gt;&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>定义<code>session</code>范围的变量(当然还可以定义其他存活范围的变量，这里就不一一讲了)</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--seesion范围的变量代表整个会话期间都是可以共享这个变量的，相当于下面这句话：</div><div class="line">        session.setAttribute("x",100);</div><div class="line">        在另外一个JSP文件中可以使用下面的语句得到其中的值：</div><div class="line">        </div><div class="line">        session.getAttribute("x");</div><div class="line">        &lt;c:out value="$&#123;sessionScope.x&#125;"&gt;&lt;/c:out&gt;</div><div class="line">--%&gt;</div><div class="line">&lt;c:set var="x" value="100" scope="session"&gt;&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>设置<code>JavaBean</code>对象的值：</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%--获取JavaBean的对象person,如果没有那么就是直接创建一个对象，范围为session,下面可以用到 --%&gt;</div><div class="line">&lt;jsp:useBean id="person" class="com.Person" scope="session"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">&lt;%-- target是对象的person，这里使用EL表达式，得到session范围内的Person对象 --%&gt;</div><div class="line">&lt;c:set target="$&#123;sessionScope.person &#125;" property="username" value="陈加兵"&gt;&lt;/c:set&gt;</div><div class="line"></div><div class="line">&lt;%-- 输出变量的username的值，这里使用的EL表达式  相当于  session.getAttribute("person").getUsername() --%&gt;</div><div class="line">&lt;c:out value="$&#123;sessionScope.person.username &#125;"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>如果设置的值太冗长了，那么可以在标签体的中间设置</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:set scope="request"&gt;陈加兵&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>移除变量 使用的是<code>&lt;c:remove&gt;</code>(一定要指定存活范围)</li>
</ul>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%--移除session范围内的变量x  相当于  session.removeAttribute(<span class="string">"x"</span>)  </div><div class="line">    这里一定要指定范围</div><div class="line">--%&gt;</div><div class="line">&lt;c:remove var=<span class="string">"x"</span> scope=<span class="string">"session"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="输出标签"><a href="#输出标签" class="headerlink" title="输出标签"></a>输出标签</h3><blockquote>
<p><code>&lt;c:out&gt;</code>相当于<code>out.println()</code>方法，是一个用来向网页中输出内容的</p>
<p>其中的属性有<code>value</code> (输出的内容，其中可以是JEL的${}或者一个字符串) ，<code>escapeXml</code>(这个使用来控制是否将输出的内容中有<code>html</code>标签的是否用替代字符替换，默认为<code>true</code>表示用替代字符替换),<code>default</code>(如果输出的内容为<code>null</code>或者为空的时候那么就直接不显示任何内容，但是我们可以定义<code>default</code>的值来默认显示的值)</p>
<ul>
<li>使用<code>EL</code>表达式输出</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--输出request范围内的属性x   相当于 out.println(request.getAttribute("x"))--%&gt;</div><div class="line">&lt;c:out value="$&#123;requestScope.x&#125;"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>直接使用字符串输出一个值</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;c:out value="我是陈加兵"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>输出<code>html</code>语句</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--设置escapeXml为false--%&gt;</div><div class="line">&lt;c:out value="&lt;h1&gt;我是陈加兵&lt;/h1&gt;" escapeXml="false"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>指定输出的默认的内容</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--如果$&#123;param.username&#125;为空，那么就输出0--%&gt;</div><div class="line">&lt;c:out value="$&#123;param.username&#125;" default="0"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<h2 id="流程处理标签"><a href="#流程处理标签" class="headerlink" title="流程处理标签"></a>流程处理标签</h2><blockquote>
<p>流程处理就是判断，循环语句</p>
</blockquote>
<h3 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h3><blockquote>
<p><code>&lt;c:if&gt;</code>可以判断语句是否正确，如果正确即可执行，但是这个标签没有<code>else</code>语句，只能处理判断为正确的结果<br>其中的属性有<code>test</code>，这个是设置判断条件的，如果为<code>true</code>即可执行，反之不执行，<code>var</code>是保留判断结果的<br><code>test</code>中的判断条件既可以是<code>EL</code>表达式也可以是<code>&lt;%=%&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &lt;c:set var="salary" value="$&#123;3000 &#125;"&gt;&lt;/c:set&gt;</div><div class="line"></div><div class="line">&lt;%-- test中写的是判断条件，如果为true那么才执行，这里写的是EL表达式，当然也是可以用&lt;%=%&gt; --%&gt;</div><div class="line">   </div><div class="line">&lt;c:if test="$&#123;salary&gt;2000 &#125;"&gt;</div><div class="line">	&lt;c:out value="这个员工的工资大于2000"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>
<h3 id="高级判断"><a href="#高级判断" class="headerlink" title="高级判断"></a>高级判断</h3><blockquote>
<p>前面的说过的<code>&lt;c:if&gt;</code>仅仅当判断为真时才执行，但是我们想要当不为真时也执行语句，这时我们要使用<code>&lt;c:choose&gt;</code>,<code>&lt;c:when&gt;</code>,<code>&lt;c:otherwise&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   &lt;%--  判断题必须在choose中 --%&gt;</div><div class="line">&lt;c:choose&gt;</div><div class="line">	&lt;%-- 如果提交的username和password都对的话，那么就登录成功  相当于if --%&gt;</div><div class="line">	&lt;c:when test='$&#123;param.username=="陈加兵" &amp;&amp; param.password=="123456"&#125;'&gt;</div><div class="line">		&lt;h1&gt;</div><div class="line">			&lt;c:out value="$&#123;param.username &#125;"&gt;&lt;/c:out&gt;</div><div class="line">			登录成功</div><div class="line">		&lt;/h1&gt;</div><div class="line">	&lt;/c:when&gt;</div><div class="line"></div><div class="line">	&lt;%--	相当于else --%&gt;</div><div class="line">	&lt;c:otherwise&gt;</div><div class="line">		&lt;h1&gt;</div><div class="line">			&lt;c:out value="$&#123;param.username &#125;"&gt;&lt;/c:out&gt;</div><div class="line">			登录失败</div><div class="line">		&lt;/h1&gt;</div><div class="line">	&lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
<h2 id="网页导入和重定向标签"><a href="#网页导入和重定向标签" class="headerlink" title="网页导入和重定向标签"></a>网页导入和重定向标签</h2><h3 id="网页导入标签"><a href="#网页导入标签" class="headerlink" title="网页导入标签"></a>网页导入标签</h3><blockquote>
<p>之前学过JSP中的网页导入，一个是静态导入，一个是动态导入，详情请看上篇文章。</p>
<p>在JSTL中也有一个标签(<code>&lt;c:import&gt;</code>)，用于动态导入网页,并且还可以使用&lt;<code>c:param</code>&gt;设置传入的参数</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &lt;%-- url就是要导入的网页，name是设置初始值的变量，value是设置的值。在demo1.jsp中可以使用        request.getParameter(String name)取得参数 --%&gt;</div><div class="line">&lt;c:import url="demo1.jsp"&gt;</div><div class="line">	&lt;c:param name="username" value="陈加兵"&gt;&lt;/c:param&gt;</div><div class="line">	&lt;c:param name="password" value="123456"&gt;&lt;/c:param&gt;</div><div class="line">&lt;/c:import&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>除了导入<code>web</code>应用程序中的网页，我们还可以导入非目前<code>web</code>应用程序中的网页</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%--导入百度的首页，并且设置字符集为utf-8，注意这里一定要设置网页的字符集格式和当前的jsp格式一样，否则会出现乱码--%&gt;</div><div class="line">&lt;c:import url="http://www.baidu.com"&gt;&lt;/c:import charEncoding="utf-8"&gt;</div></pre></td></tr></table></figure>
<h3 id="重定向标签"><a href="#重定向标签" class="headerlink" title="重定向标签"></a>重定向标签</h3><blockquote>
<p>之前的重定向必须使用<code>HttpServletResponse</code>的<code>sendRedirect()</code>方法</p>
<p>现在我们可以使用<code>JSTL</code>标签<code>&lt;c:redirect url&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:redirect url="demo1.jsp"&gt;&lt;/c:rediect&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>当然我们也是可以传入参数的，使用<code>&lt;c:param name=&quot;&quot; value=&quot;&quot;&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:redirect url="demo1.jsp"&gt;</div><div class="line">    &lt;c:param name="username" value="陈加兵"/&gt;</div><div class="line">&lt;/c:rediect&gt;</div></pre></td></tr></table></figure>
<h2 id="错误处理标签"><a href="#错误处理标签" class="headerlink" title="错误处理标签"></a>错误处理标签</h2><blockquote>
<p>在之前的JSP文件中，必须定义<code>errorPage</code>属性才能跳转到指定的页面或者处理错误</p>
<p>现在我们使用<code>JSTL</code>标签<code>&lt;c:catch&gt;</code>,可以捕捉异常，如果有异常就会将异常对象保存下来</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   &lt;%--捕捉异常，如果有了异常，那么保存在error变量中 --%&gt;</div><div class="line">&lt;c:catch var="error"&gt;</div><div class="line">	$&#123;10/0 &#125;</div><div class="line">&lt;/c:catch&gt;</div><div class="line"></div><div class="line">&lt;%-- 如果捕捉到了异常，那么error就不是null --%&gt;</div><div class="line">&lt;c:if test="$&#123;error!=null &#125;"&gt;</div><div class="line">	&lt;h1&gt;</div><div class="line">		&lt;c:out value="$&#123;error.message &#125;"&gt;&lt;/c:out&gt;</div><div class="line">	&lt;/h1&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>
<h2 id="迭代标签"><a href="#迭代标签" class="headerlink" title="迭代标签"></a>迭代标签</h2><blockquote>
<p>迭代标签用于数组，集合，列表的输出。</p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p>forEach既可以循环也可以迭代</p>
</blockquote>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote>
<ul>
<li><code>var</code> 变量，用于输出</li>
<li><code>items</code>   将要迭代的对象</li>
<li><code>valueStatus</code>   迭代的状态</li>
<li><code>begin</code>   如果指定了bengin，就在items下标为begin的位置进行迭代</li>
<li><code>end</code>     如果指定了end，那么就在items下表为end的位置结束迭代</li>
<li><code>step</code>    指定迭代的步长，默认的是1</li>
</ul>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">      &lt;!-- 循环输出[0,8]之中的所有的整数 --&gt;</div><div class="line">		&lt;c:forEach var="item" begin="0" end="8"&gt;</div><div class="line">			&lt;c:out value="$&#123;item&#125;"&gt;&lt;/c:out&gt;</div><div class="line">		&lt;/c:forEach&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		</div><div class="line">		&lt;!-- 循环输出[0,8]之中的所有的整数 ,指定步长为2--&gt;</div><div class="line">		&lt;c:forEach var="item" begin="0" end="8" step="2"&gt;</div><div class="line">			&lt;c:out value="$&#123;item&#125;"&gt;&lt;/c:out&gt;</div><div class="line">		&lt;/c:forEach&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;%</div><div class="line">	List list=new ArrayList();</div><div class="line"> 	for(int i=0;i&lt;3;i++)&#123;</div><div class="line"> 		list.add(i);</div><div class="line"> 	&#125;</div><div class="line">	request.setAttribute("items", list);</div><div class="line"></div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;!-- item是创建的变量用来存储迭代中的值，items是迭代的对象，其中的值使用EL表达式给出 --&gt;</div><div class="line">&lt;c:forEach var="item" items="$&#123;requestScope.items &#125;"&gt;</div><div class="line">	&lt;c:out value="$&#123;item &#125;"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:forEach&gt;</div></pre></td></tr></table></figure>
<h3 id="forTokens"><a href="#forTokens" class="headerlink" title="forTokens"></a>forTokens</h3><blockquote>
<p>用于将一个字符串按照定义的符号分隔出来。</p>
</blockquote>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><blockquote>
<ul>
<li><code>var</code> 变量，用于输出</li>
<li><code>items</code>  将要迭代的string对象</li>
<li><code>delims</code>   指定分隔字符串的分隔符，可以定义多个分隔符</li>
<li><code>varStatus</code>   迭代的状态</li>
<li><code>begin</code>     </li>
<li><code>end</code></li>
<li><code>step</code></li>
</ul>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">	String str="c,v,d,s,a|v,d";</div><div class="line">	request.setAttribute("str",str);</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;c:forTokens var="item" items="$&#123;requestScope.str &#125;" delims=",|"&gt;</div><div class="line">	&lt;c:out value="$&#123;item &#125;"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:forTokens&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结三-JSTL核心标签库的使用&quot;&gt;&lt;a href=&quot;#JSP总结三-JSTL核心标签库的使用&quot; class=&quot;headerlink&quot; title=&quot;JSP总结三(JSTL核心标签库的使用)&quot;&gt;&lt;/a&gt;JSP总结三(JSTL核心标签库的使用)&lt;/h1&gt;&lt;h2
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结二(动作元素)</title>
    <link href="http://chenjiabing666.github.io/2017/09/20/JSP%E6%80%BB%E7%BB%93%E4%BA%8C-%E5%8A%A8%E4%BD%9C%E5%85%83%E7%B4%A0/"/>
    <id>http://chenjiabing666.github.io/2017/09/20/JSP总结二-动作元素/</id>
    <published>2017-09-20T14:51:42.000Z</published>
    <updated>2017-09-22T02:14:24.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结二-动作元素"><a href="#JSP总结二-动作元素" class="headerlink" title="JSP总结二(动作元素)"></a>JSP总结二(动作元素)</h1><h2 id="lt-jsp-include-gt"><a href="#lt-jsp-include-gt" class="headerlink" title="&lt;jsp:include&gt;"></a><code>&lt;jsp:include&gt;</code></h2><blockquote>
<p>前面介绍了一种指令元素<code>include</code>，那是一种静态包含<code>JSP</code>文件，这个标签是动态包含一个<code>JSP</code>页面，也就是被包含的<code>JSP</code>页面和原JSP将合并在一起，转译为一个<code>Servlet</code>类。这是有一定的局限性的，如变量的定义不能重复。</p>
<p>动态的包含JSP文件即是被包含的JSP和原JSP分别转译为一个Servlet类，这就保证了其中的变量可以重复定义了，因为并不是在一个类中了</p>
<p><code>&lt;jsp:include page=&quot;相对的文件路径&quot;&gt;&lt;/jsp:include&gt;</code>这种标签转译为Servlet和指令元素<code>include</code>是一样的</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;%--动态导入在编译的时候是两个jsp文件各自编译成一个Servlet文件，因此其中的变量是不可以共享的，在当前页面中还是可以定义导入页面定义的变量 --%&gt;</div><div class="line">&lt;jsp:include page="form.jsp"&gt;</div><div class="line">    //定义的param可以在form.jsp中使用request.getParameter(String name)取得其中的值</div><div class="line">    &lt;jsp:param value="陈加兵" name="username"/&gt;</div><div class="line">    &lt;jsp:param value="123456" name="password"/&gt;</div><div class="line">&lt;/jsp:include&gt;</div></pre></td></tr></table></figure>
<h2 id="lt-jsp-forward-gt"><a href="#lt-jsp-forward-gt" class="headerlink" title="&lt;jsp:forward&gt;"></a><code>&lt;jsp:forward&gt;</code></h2><blockquote>
<p>这是将请求转发给另外一个JSP或者Servlet文件处理，这个和<code>RequestDispatcher</code>是一样的原理，就是Servlet中转发<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//绑定属性，在login.jsp中可以获取</div><div class="line">request.setAttribute("username","陈加兵");</div><div class="line"></div><div class="line">//当前页面的请求将会交给login.jsp文件处理</div><div class="line">&lt;jsp:forward page='login.jsp'&gt;&lt;/jsp:forward&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="lt-jsp-useBean-gt"><a href="#lt-jsp-useBean-gt" class="headerlink" title="&lt;jsp:useBean&gt;"></a><code>&lt;jsp:useBean&gt;</code></h2><blockquote>
<p>这个动作元素是用来搭配<code>JavaBean</code>组件的标准标签。<br><code>JavaBean</code>必须满足下面的条件：</p>
<blockquote>
<ul>
<li>必须实现<code>Java.io.Serializable</code>接口</li>
<li>没有公开的(<code>public</code>)类变量</li>
<li>具有无参构造函数（默认的都有）</li>
<li>具有公开的设置方法（<code>setter</code>）与取值方法（<code>getter</code>）</li>
</ul>
</blockquote>
<p>下面就是一个<code>JavaBean</code>组件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//这里的变量的值一定要和表单的中的name属性的值一样，否则不能获取</span></div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">Checkout</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"陈加兵"</span>.equals(username)&amp;&amp;<span class="string">"123456"</span>.equals(password);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>JavaBean</code>的目的是减少<code>Scriptlet</code>的使用。其中搭配<code>&lt;jsp:useBean&gt;</code>来使用这个<code>JavaBean</code>,并且使用<code>&lt;jsp:setProperty&gt;</code>与<code>&lt;jsp:getProperty&gt;</code>对<code>javaBean</code>进行设值与取值</p>
<p>注意<code>javaBean</code>一定要搭配表单使用，因为设值的值其实是隐式的调用<code>request.getParameter(String name)</code>来获取表单的值</p>
<p>下面是一个登录的表单(注意这里的<code>input</code>中的<code>name</code>属性的值一定要和<code>JavaBean</code>组件类的成员变量的名字一样)</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;!--提交给Demo1.jsp处理，下面就实现Demo1.jsp--&gt;</div><div class="line">&lt;form action="Demo1.jsp"&gt;</div><div class="line">	&lt;label&gt;姓名：&lt;/label&gt;</div><div class="line">	&lt;input type="text" name="username"&gt;</div><div class="line">	&lt;label&gt;密码：&lt;/label&gt;</div><div class="line">	&lt;input type="password" name="password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>下面我们写一个<code>JSP</code>文件设置<code>JavaBean</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;%--使用JavaBean person是Person创建的对象，相当于 Person person=new Person() </div><div class="line">		其中class是JavaBean的类所在的路径(在com包下的Person文件中)</div><div class="line">		id就是相当于创建的对象</div><div class="line">	--%&gt;</div><div class="line">	&lt;jsp:useBean id="person" class="com.Person"&gt;&lt;/jsp:useBean&gt;</div><div class="line">	</div><div class="line">	&lt;%--为username和password设置值,相当于下面的语句</div><div class="line">	person.setUsername(request.getParameter("username"));</div><div class="line">	person.setPassword(request.getParameter("password"));</div><div class="line">	JavaBean中的变量一定要和表单中的值一样，否则就不能对应，出现错误 </div><div class="line">	其中name就是指定上面的id，即是使用的对象，property就是指定变量</div><div class="line">	--%&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="uesrname" name="person"/&gt;</div><div class="line">	&lt;jsp:setProperty property="password" name="person"/&gt;</div><div class="line">	</div><div class="line">	&lt;%--age是另外的变量，并没有对应着表单的name属性，因此我们可以单独的为其设置值，使用value实行即可设置，这里不必考虑类型，因为在内部会自动转换成JavaBean中的类型 --%&gt;</div><div class="line">	&lt;jsp:setProperty property="age" name="person" value="20"/&gt;</div><div class="line">	</div><div class="line">	&lt;%--获取设置的值，相当于下面的语句：</div><div class="line">		person.getUsername();</div><div class="line">		person.getPassword();</div><div class="line">		person.getAge();</div><div class="line">	 --%&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="username" name="person" /&gt;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="password" name="person" /&gt;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="age" name="person" /&gt;&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>其实我们还可以不但可以将表单中的值赋值给变量，还可以使用<code>value</code>和<code>param</code>自己设置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 将请求的url中的password的值赋值给username，注意这里的使用的get的请求的话，提交的时候url会有请求值的</div><div class="line">		http:<span class="comment">//localhost:8080/web2/JSP/Demo1.jsp?username=%E9%99%88%E5%8A%A0%E5%85%B5&amp;password=123456</span></div><div class="line">	 --%&gt;</div><div class="line">	&lt;jsp:setProperty property=<span class="string">"username"</span> name=<span class="string">"person"</span> param=<span class="string">"password"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;%--age是另外的变量，并没有对应着表单的name属性，因此我们可以单独的为其设置值，使用value实行即可设置，这里不必考虑类型，因为在内部会自动转换成JavaBean中的类型 --%&gt;</div><div class="line">	&lt;jsp:setProperty property=<span class="string">"age"</span> name=<span class="string">"person"</span> value=<span class="string">"20"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="JavaBean的存活范围"><a href="#JavaBean的存活范围" class="headerlink" title="JavaBean的存活范围"></a>JavaBean的存活范围</h2><blockquote>
<p><code>Scope</code>属性决定了javabean对象的存在的范围。可选值有:</p>
<blockquote>
<ol>
<li><code>page</code>(默认值)</li>
<li><p><code>request</code></p>
</li>
<li><p><code>session</code></p>
</li>
<li><p><code>application</code></p>
</li>
</ol>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:useBean id="person" class="com.anllin.bean.Person" scope="page"&gt;&lt;/jsp:useBean&gt;</div></pre></td></tr></table></figure>
<h3 id="在page范围"><a href="#在page范围" class="headerlink" title="在page范围"></a>在page范围</h3><blockquote>
<p>客户每次请求访问<code>jsp</code>页面时，都会创建一个<code>javabean</code>对象。JavaBean对象的有效范围就是当前的<code>jsp</code>文件中，如果不在当前Jsp中，那么就不可以使用该<code>JavaBean</code>对象中设置的值</p>
<p>比如使用<code>forward</code>转发给另外一个JSP文件，那么此时就会再创建一个<code>JavaBean</code>对象，原来页面的JavaBean对象并没有传过来，也就不能使用其中的值，这个和变量的共享是一个道理的，这个JavaBean对象只能在当前的Jsp文件中调用，不能实现共享</p>
</blockquote>
<h3 id="在request范围"><a href="#在request范围" class="headerlink" title="在request范围"></a>在request范围</h3><blockquote>
<p>客户每次请求访问jsp页面时，都会创建新的javabean对象。有效范围为：</p>
<blockquote>
<ul>
<li><p>客户请求访问的当前jsp网页。</p>
</li>
<li><p>和当前网页共享一个客户请求的网页，即当前jsp网页中<code>&lt;%@include %&gt;</code>指令以及<code>&lt;forward&gt;</code>标记包含的其他jsp文件,也就是转发和包含的Jsp文件也是可以共享这个<code>JavaBean</code>对象的，这个和Servlet中的<code>request</code>是一样的，一旦转发了，就可以通过<code>setAttribute()</code>设置属性，那么在转发的页面中就可以访问这个属性</p>
</li>
</ul>
<ul>
<li><p>当所有共享同一个客户请求的jsp页面执行完毕并向客户端发加响应时，javabean对象结束生命周期。</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在<code>httpServletRequest</code>对象中，属性名javabean的<code>id</code>,属性值为<code>javabean</code>对象，因此可以通过<code>HttpRequest.getAttribute()</code>方法取得<code>javabean</code>对象</p>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">    //Demo1.jsp文件  表单请求提交的JSp文件</div><div class="line">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    </div><div class="line">    &lt;%--设置scope属性为request，这个是必须的，这里的JavaBean对象为person--%&gt;</div><div class="line">	&lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="uesrname" name="person"/&gt;</div><div class="line">	&lt;jsp:setProperty property="password" name="person"/&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="age" name="person" value="20"/&gt;</div><div class="line">&gt; </div><div class="line">e    </div><div class="line">    &lt;%--转发请求到Demo2.jsp文件中，那么就可以在Demo.jsp中共享person对象了--%&gt;</div><div class="line">    &lt;jsp:forward page="Demo2.jsp"&gt;&lt;/jsp:forward&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"></div><div class="line">//Demo2.jsp</div><div class="line"></div><div class="line"></div><div class="line">    &lt;%@page import="com.Person"%&gt;</div><div class="line">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">        pageEncoding="UTF-8"%&gt;</div><div class="line">    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    </div><div class="line">    &lt;%-- 使用JavaBean,这里的scope是必须的，一定要和Demo1.jsp一样，id也要一样 --%&gt;</div><div class="line">    &lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;%--获取username的值 --%&gt;</div><div class="line">    &lt;jsp:getProperty property="username" name="person"/&gt;</div><div class="line"></div><div class="line">    &lt;%</div><div class="line">        //使用HttpServletRequest获取对象person</div><div class="line">        Person p=(Person)request.getAttribute("person");</div><div class="line">        out.println(p.getUsername());  //获取username的值</div><div class="line">    %&gt;</div><div class="line"></div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="在session范围内"><a href="#在session范围内" class="headerlink" title="在session范围内"></a>在session范围内</h3><blockquote>
<ul>
<li><p>我们知道<code>HttpSession</code>是可以在会话期间实现数据共享的，只要是同一个项目中的<code>Jsp</code>文件都是可以共享这个JavaBean对象，但是并不是永久的，因为会话也是有时间限制的，</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在HttpSession对象中，属性名为javabean的id,属性值为javabean对象。除了可以通过javabean的id直接引用javabean对象外，也可以通过<code>HttpSession.getAttribute（）</code>方法取得<code>javabean</code>对象</p>
</li>
<li><p>一定要注意在每一个<code>&lt;jsp:useBean&gt;</code>中都要写上<code>scope=&quot;session&quot;</code></p>
</li>
</ul>
</blockquote>
<h3 id="在application范围内"><a href="#在application范围内" class="headerlink" title="在application范围内"></a>在application范围内</h3><blockquote>
<ul>
<li><p>我们知道<code>ServletContext</code>存在于整个web应用的生命周期，这个不像<code>session</code>，一旦设置的会话时间结束，那么就不存在了，这个是永远存在的，只要web程序在继续</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在<code>application</code>对象中，属性名为<code>javabean</code>的id，属性值为javabean对象，除了可以通过javabean的<code>id</code>直接引用对象外，也可以通过javabean的<code>application.getAttribute()</code>方法取得javabean对象</p>
</li>
</ul>
</blockquote>
<h3 id="重要的属性"><a href="#重要的属性" class="headerlink" title="重要的属性"></a>重要的属性</h3><blockquote>
<p>其实<jsp:usebean>不仅仅可以对于表单中请求可以转换为对象的值，上面我们说过了存活范围，其实只要在这个请求范围内，并且将对象绑定到响应的属性上面，那么就可以在jsp文件中使用改标签接收其值。</jsp:usebean></p>
<p>其实一般在表单提交之后，我们会使用Sevlet文件验证是否密码和用户名正确，那么就不是直接提交给jsp文件，此时就像上面说过的，不影响标签的使用，只要将JavaBean对象绑定到响应范围的属性上，便是可以实现对象的共享，代码如下：</p>
<blockquote>
<p>ServletDemo文件</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		<span class="comment">//创建对象，并且设置值</span></div><div class="line">			Person person=<span class="keyword">new</span> Person();</div><div class="line">			person.setUsername(<span class="string">"陈加兵"</span>);</div><div class="line">			person.setPassword(<span class="string">"123456"</span>);</div><div class="line">			</div><div class="line">			<span class="comment">//将JavaBean对象绑定到request上，相当于存活范围为request</span></div><div class="line">			<span class="comment">//注意这里的键值一定要是和对象的名称一样，否则不行</span></div><div class="line">			request.setAttribute(<span class="string">"person"</span>, person);</div><div class="line">			<span class="comment">//转发请求到jsp文件，下面我们就将在jsp文件中使用JavaBean标签接收</span></div><div class="line">			RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"JSP/demo1.jsp"</span>);</div><div class="line">			dispatcher.forward(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>demo1.jsp:上面文件转发过来的，接收JavaBean对象</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;%-- 使用标签接收转发过来的JavaBean对象，scope一定要设置为request,id就是传过来的对象，一定要和前面的名称一样，下面的语句相当于：</div><div class="line">	Person person=(Person)request.getAttribute("person");</div><div class="line"> --%&gt;</div><div class="line">&lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;&lt;jsp:getProperty property="username" name="person"/&gt;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.cnblogs.com/zfc2201/archive/2011/08/17/2143615.html" target="_blank" rel="external">http://www.cnblogs.com/zfc2201/archive/2011/08/17/2143615.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结二-动作元素&quot;&gt;&lt;a href=&quot;#JSP总结二-动作元素&quot; class=&quot;headerlink&quot; title=&quot;JSP总结二(动作元素)&quot;&gt;&lt;/a&gt;JSP总结二(动作元素)&lt;/h1&gt;&lt;h2 id=&quot;lt-jsp-include-gt&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结一(标签）</title>
    <link href="http://chenjiabing666.github.io/2017/09/20/JSP%E6%80%BB%E7%BB%93%E4%B8%80-%E6%A0%87%E7%AD%BE%EF%BC%89/"/>
    <id>http://chenjiabing666.github.io/2017/09/20/JSP总结一-标签）/</id>
    <published>2017-09-20T14:51:23.000Z</published>
    <updated>2017-09-20T14:58:57.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结一-标签"><a href="#JSP总结一-标签" class="headerlink" title="JSP总结一(标签)"></a>JSP总结一(标签)</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote>
<p><code>JSP</code>文件在部署到web服务器上的时候还是会编译成<code>Servlet</code>文件，因此JSP的生命周期和Servlet是一样的，都是有<code>_JSPInit()</code>，_<code>JSPService(</code>),<code>_JSPDestroy()</code>方法的</p>
</blockquote>
<h2 id="指示元素"><a href="#指示元素" class="headerlink" title="指示元素"></a>指示元素</h2><blockquote>
<p>在<code>jsp</code>中有三个指示类型，分别为：<code>page</code>,<code>include</code>,<code>tablig</code>。</p>
</blockquote>
<h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><blockquote>
<p><code>page</code>指示类型告知容器如何转译目前的JSP网页。</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>language</code>指定解析语言，<code>contentType</code>表明为html文件，<code>pageEncoding</code>告诉容器转译及编译的时候如何处理这个这个JSP网页中的额中文编码，import是导入包的作用，如果有多个包导入，那么可以使用逗号隔开。</p>
<p><code>errorPage</code>用于设置当JSP运行错误而产生异常的时候，该转发哪一个页面处理这个异常，可以自己定义一个异常的JSP或者html文件显示这个异常，但是这个必须和<code>isErrorPage</code>配合使用，必须在处理异常的<code>page</code>指令中协商<code>isErrorPage=&quot;true&quot;</code></p>
<p>还有一些其他的属性，自己可以看看菜鸟教程上的内容</p>
</blockquote>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><blockquote>
<p><code>include</code>是用于静态的包含其他页面中的内容。这个还是很重要的，如果在网页中每一张页面都需要使用一样的导航栏，导入一样的css，js文件，那么可以将这些内容单独做一个jsp文件或者html文件，要使用的时候就直接包含即可。</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//file指定文件的相对路径  </span></div><div class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"daoru.jsp"</span> %&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>其实上面的语句在<code>Servlet</code>语句相当于下面这句话：</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RequestDispatcher dis=request.getRequestDispatcher();</div><div class="line">dis.include(request,response);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意这句话写在页面的哪里，那么就将其中的内容导入到哪里，比如要导入<code>css</code>，<code>js</code>文件，那么直接在<code>head</code>标签中直接导入</p>
<p>静态导入的方式在部署到服务器会自动和当前的<code>JSP</code>文件编译为一个<code>Servlet</code>文件，也就是在一个<code>Servlet</code>类中。因此在包含的JSP文件中如果定义了变量或者方法，那么在当前的JSP页面中就不能重复定义，否则将会出现变量重复的错误，代码如下：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//Demo1.jsp</div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">pageEncoding="UTF-8"%&gt;</div><div class="line"></div><div class="line">&lt;%</div><div class="line">    String name="陈加兵";</div><div class="line">    int age=22;</div><div class="line">%&gt;</div><div class="line"></div><div class="line"></div><div class="line">//Demo2.jsp</div><div class="line"></div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">//包含Demo1.jsp文件</div><div class="line">&lt;%@ include file="Demo1.jsp" %&gt;</div><div class="line">&lt;%</div><div class="line">    //String name="chenji";     //这里不能重复定义，否则将会报错</div><div class="line">%&gt;</div><div class="line"></div><div class="line">//直接输出name的值 </div><div class="line">&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;    </div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意这里的<code>Demo1.jsp</code>文件中一定不能重复的出现<code>&lt;html&gt;</code>标签，因为包含的时候是全部内容都是包含到当前页面中，如果出现重复的<code>html</code>标签代码就会混乱。</p>
</blockquote>
<h2 id="声明元素"><a href="#声明元素" class="headerlink" title="声明元素"></a>声明元素</h2><blockquote>
<p><code>&lt;%! &gt;</code> 这就是声明元素，主要是用来定义类成员和方法声明的。其中不可以出现循环语句等，只能出现定义语句，当然在定义方法的时候函数体中可以出现其他的语句。</p>
<p>声明元素中的内容在编译的都将变成<code>Servlet</code>中的类的成员变量和方法</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    &lt;%!</div><div class="line">        <span class="comment">//变量</span></div><div class="line">        String name=<span class="string">"陈加兵"</span>;     </div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age=<span class="number">20</span>;</div><div class="line"></div><div class="line">        <span class="comment">//方法</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(name+<span class="string">":"</span>+age);</div><div class="line">&#125;</div><div class="line">    %&gt;</div></pre></td></tr></table></figure>
<h2 id="Scriptlet"><a href="#Scriptlet" class="headerlink" title="Scriptlet"></a>Scriptlet</h2><blockquote>
<p><code>&lt;% %&gt;</code>这个是写正常的java语句的，其中将会转译成<code>_jspService()</code>方法中的内容</p>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%</div><div class="line">    String name=<span class="string">"陈加兵"</span>;</div><div class="line">    request.setAttribute(<span class="string">"name"</span>,name);</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<h2 id="表达式元素"><a href="#表达式元素" class="headerlink" title="表达式元素"></a>表达式元素</h2><blockquote>
<p><code>&lt;%= %&gt;</code>  其中可以直接写一个表达式</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;&lt;%= new Date() %&gt; &lt;/h1&gt;</div><div class="line">&lt;h1&gt;&lt;%= 2+3 %&gt; &lt;/h1&gt;</div><div class="line">&lt;h1&gt;&lt;%= request.getAttribute("name") %&gt; &lt;/h1&gt;</div></pre></td></tr></table></figure>
<h2 id="注释元素"><a href="#注释元素" class="headerlink" title="注释元素"></a>注释元素</h2><blockquote>
<p> <code>&lt;%----%&gt;</code>这是JSP的注释，在浏览器中查看源代码的时候是看不到的<br> <code>&lt;!-- --&gt;</code> 这是html中的注释，在网页源代码中是可以看到的</p>
</blockquote>
<h2 id="隐含对象"><a href="#隐含对象" class="headerlink" title="隐含对象"></a>隐含对象</h2><blockquote>
<ul>
<li><code>request</code>    转译后对应的是<code>HttpServletRequest</code></li>
<li><code>resposne</code>   译后对应的是<code>HttpServletResponse</code></li>
<li><code>out</code>        译后对应的是<code>JspWriter</code>对象，其内部关系一个<code>PrintWriter</code>对象</li>
<li><code>Config</code>    译后对应的是<code>ServletConfig</code></li>
<li><code>session</code>    译后对应的是<code>HttpSession</code></li>
<li><code>application</code> 译后对应的是<code>ServletContext</code></li>
<li><code>pageContext</code>  译后对应的是<code>PageContext</code>对象 </li>
<li>exception  译后对应的是Throwable对象</li>
<li><code>page</code>       译后对应的是<code>this</code></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结一-标签&quot;&gt;&lt;a href=&quot;#JSP总结一-标签&quot; class=&quot;headerlink&quot; title=&quot;JSP总结一(标签)&quot;&gt;&lt;/a&gt;JSP总结一(标签)&lt;/h1&gt;&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;header
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结五(监听器)</title>
    <link href="http://chenjiabing666.github.io/2017/09/19/Servlet%E6%80%BB%E7%BB%93%E4%BA%94-%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/19/Servlet总结五-监听器/</id>
    <published>2017-09-19T02:37:23.000Z</published>
    <updated>2017-09-19T02:38:53.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结五-监听器"><a href="#Servlet总结五-监听器" class="headerlink" title="Servlet总结五(监听器)"></a>Servlet总结五(监听器)</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><blockquote>
<p>监听器按其功能可以分为三种，分别是生命周期监听器(<code>ServletContextListener</code>,<code>ServletRequestListener</code>,<code>HttpSessionListener</code>)，属性监听器(<code>ServletRequestAttributeListener</code>,<code>HttpSessionAttributeListener</code>,<code>ServletContextAttributeListener</code>)，会话属性监听器(<code>HttpSessionBindingListener</code>,<code>HttpSessionActivationListener</code>)。下面我们将会详细的介绍这三种监听器。</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/listener.jpg" alt="分类图"></p>
<h2 id="生命周期监听器"><a href="#生命周期监听器" class="headerlink" title="生命周期监听器"></a>生命周期监听器</h2><p>生命周期就是从创建到销毁，因此顾名思义，就是在对象创建的时候会触发，销毁的时候也会触发</p>
</blockquote>
<h3 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h3><blockquote>
<p>前面我们说过<code>ServletContext</code>是上下文的，是应用程序共享的，当应用程序启动就会生成的。在应用程序初始化或者结束前，会分别调用<code>contextInitialized()</code>和<code>contextDestroyed()</code>方法，通过传入的<code>ServletContextEvent</code>取得<code>ServletContext</code>对象。</p>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p>下面读取设置的初始化参数，并且在监听器中将其绑定为属性实现全文共享</p>
<blockquote>
<ul>
<li><code>web.xml</code>的文件，主要是设置初始化属性值，前面已经讲过</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置ServletContext初始参数 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 设置ServletContext初始参数 --&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 设置监听器，ServletContextListener --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.ServletContextListenerDemo<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 设置监听器，ServletContextListener --&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>下面是实现监听器的功能</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Enumeration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextListenerDemo</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// ServletContext销毁的时候触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</div><div class="line">        <span class="comment">//当销毁的时候就移除其中绑定的属性</span></div><div class="line">		ServletContext context = arg0.getServletContext();</div><div class="line">		<span class="comment">// 获取所有属性的名称</span></div><div class="line">		Enumeration enumeration = context.getAttributeNames();</div><div class="line">		<span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</div><div class="line">			String name = (String) enumeration.nextElement();</div><div class="line">			<span class="comment">// 移除绑定的属性</span></div><div class="line">			context.removeAttribute(name);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// ServletContext生成的时候触发，一般当web程序应用的时候就会初始化ServletContext参数</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取ServletContext对象</span></div><div class="line">		ServletContext context = arg0.getServletContext();</div><div class="line">		<span class="comment">// 读取参数</span></div><div class="line">		String name = context.getInitParameter(<span class="string">"username"</span>);</div><div class="line">		String password = context.getInitParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="comment">// 绑定属性，用于全文共享</span></div><div class="line">		context.setAttribute(<span class="string">"username"</span>, name);</div><div class="line">		context.setAttribute(<span class="string">"password"</span>, password);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h3><blockquote>
<p>这是在对象<code>ServletRequest</code>对象生成或结束时，会触发的监听器。当生成的时候会触发<code>requestInitialized()</code>,结束时会触发<code>requestDestroyed()</code>方法。<br>ServletRequest对象生成一般在浏览器发出请求，或者转发重定向。注意这个触发是在Servlet的doGet()或者doPost()之前。</p>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p><code>ServletRequestListener</code>文件:在<code>ServletRequest</code>对象生成时绑定属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletRequestListenerDemo</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//在ServletRequest对象结束时触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent arg0)</span> </span>&#123;</div><div class="line">		HttpServletRequest request=(HttpServletRequest)arg0.getServletRequest();</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//在ServletRequest对象生成时触发(比如浏览器请求)</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//强制转换成其子类</span></div><div class="line">		HttpServletRequest request=(HttpServletRequest) arg0.getServletRequest();</div><div class="line">		<span class="comment">//绑定属性，这里的request和触发其的Servlet中的是一样的，因此可以实现共享</span></div><div class="line">		<span class="comment">//就好像forward,include一样</span></div><div class="line">		request.setAttribute(<span class="string">"login"</span>, <span class="string">"atuo"</span>);   <span class="comment">//绑定属性</span></div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Servlet</code>文件：取得绑定的值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		PrintWriter pWriter=response.getWriter();</div><div class="line">		pWriter.println(request.getAttribute(<span class="string">"login"</span>));   <span class="comment">//取得上面监听器绑定的值</span></div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>web.xml</code>文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置监听器，ServletRequestListener --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.ServletRequestListenerDemo<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 设置监听器，ServletRequestListener --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h3><blockquote>
<p>在<code>HttpSession</code>对象初始化后或者结束时，会分别调用<code>sessionCreated()</code>和<code>sessionDestroyed()</code>方法，你可以通过传入的<code>HttpSessionEvent</code>来取得<code>HttpSession</code>，以针对会话对象做出响应的创建或者结束处理操作</p>
</blockquote>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p><code>Servlet</code>文件：用来验证登录是否正确，如果正确就创建<code>HttpSession</code>对象，并且绑定属性用来实现自动登录</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.xml.registry.infomodel.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="keyword">if</span> (<span class="string">"chenjiabing"</span>.equals(name)&amp;&amp;<span class="string">"123456"</span>.equals(password)) &#123;</div><div class="line">			<span class="comment">//用户名和密码正确创建对象</span></div><div class="line">			HttpSession session=request.getSession();</div><div class="line">			session.setAttribute(<span class="string">"login"</span>, <span class="string">"auto"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">			</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>HttpSessionListenerDemo</code>文件：用来记录登录的人数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.omg.CORBA.Request;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletHttpSessionListenerDemo</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">	<span class="comment">//HttpSession创建时触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent arg0)</span> </span>&#123;</div><div class="line">		count++;    <span class="comment">//人数++</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//HttpSession销毁时触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		count--;   <span class="comment">//人数--</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="属性操作监听器"><a href="#属性操作监听器" class="headerlink" title="属性操作监听器"></a>属性操作监听器</h2><blockquote>
<p>顾名思义，属性操作监听器就是当绑定属性或者移除绑定属性的时候会触发，共有三个监听器，分别为：<code>ServletContextAttributeListener</code>,<code>ServletRequestAttributeListener</code>,<code>HttpSessionAtrributeListener</code>。相同的是它们都有共同需要实现的方法，分别为：<code>attributeAdded</code>(绑定属性的时候触发),<code>attributeRemoved</code>(属性移除的时候触发),<code>attributeReplace</code>(属性被替换的时候触发)</p>
<p>由于这三个监听器实现的方法都是一样的，下面就演示一个即可，其他的都是相同的</p>
</blockquote>
<h3 id="HttpSessionAttributeListener"><a href="#HttpSessionAttributeListener" class="headerlink" title="HttpSessionAttributeListener"></a>HttpSessionAttributeListener</h3><blockquote>
<p>这是监听<code>HttpSession</code>对象属性的，主要有（添加，移除，替换）,当然这个也是要在<code>web.xml</code>设置的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionAttributeListener</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">http</span>.<span class="title">HttpSessionAttributeListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*HttpSessionBindingEvent方法</span></div><div class="line">	 * String getName()  返回最近改变的属性的名称</div><div class="line">	 * Object getValue()   返回已添加、移除或替换的属性的值。如果添加（或绑定）了属性，则这是该属性的值。如果移除（或取消绑定）了属性，则这是被移除属性的值。如果替换了属性，则这是属性原来的值。</div><div class="line">	 * getSession()   获取HttpSession对象 </div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="comment">//添加新的属性时触发，每绑定一个属性就触发一次</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取HttpSession对象</span></div><div class="line">		HttpSession session=arg0.getSession();</div><div class="line">		String name=arg0.getName();    <span class="comment">//获取添加的属性名称</span></div><div class="line">		String attribute=(String) arg0.getValue();   <span class="comment">//获取添加的属性的值</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//移除属性的时候触发  ，每移除一次就会触发一次</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		String value=(String) arg0.getValue();</div><div class="line">		System.out.println(<span class="string">"被移除的属性的值为："</span>+value);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//属性值被替换的时候触发，直接重新设置属性值就是替换</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"被替换的属性的值："</span>+arg0.getValue());</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="会话属性监听器"><a href="#会话属性监听器" class="headerlink" title="会话属性监听器"></a>会话属性监听器</h2><blockquote>
<p>先前介绍的几个监听器都是要在<code>web.xml</code>中使用<code>&lt;listener&gt;</code>定义的，这个会话属性监听器是不要在<code>web.xml</code>设置的</p>
<p>这里介绍的监听器分别为：<code>HttpSessionBindingListener</code>,<code>HttpSessionActivationListener</code></p>
</blockquote>
<h3 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h3><blockquote>
<p>当实现<code>HttpSessionBindingListener</code>接口的类的对象被移除或者绑定到<code>HttpSession</code>成为属性的时候就会触发</p>
<p>下面是实现<code>HttpSessionBindingListener</code>接口的类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionBindingListenerDemo</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">http</span>.<span class="title">HttpSessionBindingListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>  age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpSessionBindingListenerDemo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name=<span class="string">"陈加兵"</span>;</div><div class="line">		<span class="keyword">this</span>.age=<span class="number">22</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//当这个类的对象绑定成为HttpSession的属性的时候将会触发</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取绑定的属性的对象</span></div><div class="line">		HttpSessionBindingListenerDemo listenerDemo=(HttpSessionBindingListenerDemo)arg0.getValue();</div><div class="line">		<span class="comment">//获取对象的值</span></div><div class="line">		System.out.println(listenerDemo.name);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//当这个类的对象被移除的时候就会触发</span></div><div class="line">	<span class="comment">//getValue()  getName()</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent arg0)</span> </span>&#123;</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>下面是<code>Servlet</code>文件：</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">        <span class="comment">//获取对象</span></div><div class="line">		HttpSession session=request.getSession(); </div><div class="line">        <span class="comment">//对象</span></div><div class="line">		HttpSessionBindingListenerDemo listener=<span class="keyword">new</span> HttpSessionBindingListenerDemo();</div><div class="line">		<span class="comment">//绑定对象</span></div><div class="line">		session.setAttribute(<span class="string">"listener"</span>, listener);</div><div class="line">		</div><div class="line">		</div><div class="line">			</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结五-监听器&quot;&gt;&lt;a href=&quot;#Servlet总结五-监听器&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结五(监听器)&quot;&gt;&lt;/a&gt;Servlet总结五(监听器)&lt;/h1&gt;&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结四(过滤器)</title>
    <link href="http://chenjiabing666.github.io/2017/09/17/Servlet%E6%80%BB%E7%BB%93%E5%9B%9B-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/17/Servlet总结四-过滤器/</id>
    <published>2017-09-17T13:44:07.000Z</published>
    <updated>2017-09-17T14:03:28.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结四-过滤器的使用"><a href="#Servlet总结四-过滤器的使用" class="headerlink" title="Servlet总结四(过滤器的使用)"></a>Servlet总结四(过滤器的使用)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>在容器调用Servlet的<code>service()</code>的方法钱，Servlet其实并不会知道有请求的到来，而在<code>service()</code>方法执行后，容器真正对浏览器进行HTTP响应之前，浏览器也不知道Servlet真正响应是什么。过滤器(<code>Filter</code>)正如其名称所示，它介于Servlet之前，可拦截浏览器对Servlet的请求，也可以改变Servlet对浏览器的响应。</p>
<p>其实说白了，过滤器就是应用程序的一个额外的组件，为了方便使用并且不改变Servlet源代码，比如用户验证，字符替换，压缩这类的需求，你可能只是暂时的需要这类需求，但是过一段时间又不需要了，如果直接在Servlet中改动源码，那么就太麻烦了。因此此时就需要设置一个独立的组件，在使用的时候直接引用，不需要的时候直接删除即可，这就是过滤器的必要。</p>
</blockquote>
<h2 id="过滤器的实现"><a href="#过滤器的实现" class="headerlink" title="过滤器的实现"></a>过滤器的实现</h2><blockquote>
<p>想要实现过滤器，那么需要实现<code>Filter</code>接口，这个接口中有三个必须实现的方法，分别为<code>init()</code>,<code>doFilter()</code>,<code>destroy()</code>。</p>
<p><code>init(FilterConfig config)</code>   这是一个初始化方法，其中的参数可以获取定义的初始值，这个在后面会详细说</p>
<p><code>destroy()</code>  这个是销毁方法</p>
<p><code>doFilter(HttpServletRequest request,HttpServletResponse response,FilterChain chain)</code>  这是主要的方法，用来执行过滤的作用。当请求来到了web容器中，容器发现了调用Servlet的<code>service()</code>方法之前可以应用某过滤器的时候就会调用该过滤器的<code>doFilter()</code>方法。就是在doFilter()方法中进行了service()方法的前置处理，而后根据是否调用<code>FilterChain</code>中的<code>doFilter()</code>决定是否执行下一个过滤器，如果没有那么就执行第一个过滤器。</p>
<p>如果执行了<code>FilterChain的doFilter()</code>方法，那么就会执行下一个过滤器，如果没有就调用指定的Servlet的<code>service()</code>方法。</p>
</blockquote>
<h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><blockquote>
<ul>
<li>Servlet的响应分为前置处理和后置处理。前置处理就是在调用<code>service()</code>方法之前进行的处理，就是Servlet还没有接受到请求的时候，后置处理就是在Servlet执行过service()方法之后，就是Servlet已经处理完请求之后。因此<code>FilterChain</code>的<code>doFilter()</code>方法就将过滤器处理分为了前置处理和后置处理，在调用<code>FilterChain</code>的<code>doFilter()</code>方法之前的都是对Servlet的前置处理，也就是说这时候Servlet并不知道此时有请求过来，而在其之后的都是对Servlet的后置处理。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">doFilter(HttpServletRequest request,HttpServletResponse response,FilterChain chain)</div><div class="line">&#123;       </div><div class="line">        <span class="comment">//service()的前置处理</span></div><div class="line">        chain.doFilter(request,response);</div><div class="line">        <span class="comment">//service()的后置处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>在<code>FilterChain</code>执行后会一堆栈顺序返回，就是说如果有多个<code>Filter</code>，那么就先按照顺序执行<code>chain.doFilter(request,response)</code>之前的代码，即是先前置处理，然后入栈，这样一直到执行到最后一个<code>Filter</code>，之后就从栈顶开始执行<code>chain.doFilter()</code>的方法之后的代码，即是后置处理。总的来说就是先执行前置处理，然后入栈，待全部执行完毕之后再从栈顶开始后置处理的代码。</p>
</li>
<li><p>在<code>Filter</code>的<code>doFilter</code>的方法中的<code>request</code>，<code>response</code>和Servlet的<code>doGet()</code>和<code>doPost()</code>方法中的是一样的，即是可以设置属性，可以得到表单提交的值，总之是一样的。</p>
</li>
</ul>
</blockquote>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><blockquote>
<ul>
<li>下面实现一个过滤器用来验证提交请求的用户名和密码是否正确</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></div><div class="line">			FilterChain chain) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">		<span class="comment">// 根据request获取表单的用户名和密码</span></div><div class="line">		String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		<span class="comment">// 如果用户名和密码正确</span></div><div class="line">		<span class="keyword">if</span> (<span class="string">"陈加兵"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(<span class="string">"password"</span>)) &#123;</div><div class="line">			System.out.println(<span class="string">"用户名或者密码错误，请重新输入"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//继续执行下一个过滤器，如果有就执行</span></div><div class="line">		chain.doFilter(request, response);</div><div class="line">		<span class="comment">//当所有过滤器的前置处理都执行完毕才执行这个语句</span></div><div class="line">		System.out.println(<span class="string">"Servlet已经执行完毕"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="过滤器的设置"><a href="#过滤器的设置" class="headerlink" title="过滤器的设置"></a>过滤器的设置</h3><blockquote>
<ul>
<li>在<code>web.xml</code>中设置过滤器，设置的方式如下：</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>web2<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo1的过滤器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--设置过滤器文件的名字--&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--设置过滤器类所在的路径，具体到包名--&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    </div><div class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置作用的url，即是Demo9这个Servlet应用这个过滤器--&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo9<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>   </div><div class="line"><span class="comment">&lt;!-- &lt;servlet-name&gt;Demo9&lt;/servlet-name&gt; 这个标签和上面的&lt;url-pattern&gt;是一个效果，直接指明应用的Servlet的名称 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--Demo1也应用这个过滤器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>   </div><div class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo1的过滤器 --&gt;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo2的过滤器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.FilterDemo2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filte</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--     Demo1这个Servlet文件也应用FilterDemo2这个过滤器，那么当请求Demo的时候要按照定义的先后顺序先执行FilterDemo1这个过滤器 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="comment">&lt;!-- 定义FilterDemo2的过滤器 --&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote>
<ul>
<li>可以在同一个<code>&lt;filter-mapping&gt;</code>中定义多个Servlet文件，表示多个Servlet都应用于这个过滤器</li>
<li>一个Servlet文件可以同时应用多个过滤器，但是执行的顺序要按照定义的先后顺序执行</li>
</ul>
</blockquote>
<h3 id="初始参数的设置和获取"><a href="#初始参数的设置和获取" class="headerlink" title="初始参数的设置和获取"></a>初始参数的设置和获取</h3><h4 id="设置初始值"><a href="#设置初始值" class="headerlink" title="设置初始值"></a>设置初始值</h4><blockquote>
<p>这个和<code>ServletConfig</code>一样的都存在初始参数，当然定义的方式也是不尽相同，都是在<code>web.xml</code>中定义的，如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.FilterDemo3<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  		<span class="comment">&lt;!--直接在filter下可以设置初始参数，当然我们可以在过滤器中获取参数--&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    </div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  		</div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="获取初始参数的值"><a href="#获取初始参数的值" class="headerlink" title="获取初始参数的值"></a>获取初始参数的值</h4><blockquote>
<p>直接利用其中的<code>init(FilteConfig config)</code> 获取初始化参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> String username;</div><div class="line">	<span class="keyword">public</span> String password;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></div><div class="line">			FilterChain chain) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//直接在init方法中利用FilterConfig的方法获取参数的值</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		<span class="comment">//获取初始值</span></div><div class="line">		username=config.getInitParameter(<span class="string">"username"</span>);</div><div class="line">		password=config.getInitParameter(<span class="string">"password"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置触发的时机"><a href="#设置触发的时机" class="headerlink" title="设置触发的时机"></a>设置触发的时机</h3><blockquote>
<p>当我们直接请求Servlet文件的url或者表单提交的时候使用的都是浏览器默认发出的请求，这个是可以触发过滤器的。但是如果是那些重定向(<code>sendirect</code>)或者转发包含(<code>forward</code>,<code>include</code>)就不会默认触发，因此我们需要在<code>web.xml</code>设置触发的时机，定义如下:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>      <span class="comment">&lt;!--默认的--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>       <span class="comment">&lt;!--forward--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>INCLUDE<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>        <span class="comment">&lt;!--include--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span>        <span class="comment">&lt;!--error --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结四-过滤器的使用&quot;&gt;&lt;a href=&quot;#Servlet总结四-过滤器的使用&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结四(过滤器的使用)&quot;&gt;&lt;/a&gt;Servlet总结四(过滤器的使用)&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结三(HttpSession会话管理)</title>
    <link href="http://chenjiabing666.github.io/2017/09/16/Servlet%E6%80%BB%E7%BB%93%E4%B8%89-HttpSession%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"/>
    <id>http://chenjiabing666.github.io/2017/09/16/Servlet总结三-HttpSession会话管理/</id>
    <published>2017-09-15T16:12:10.000Z</published>
    <updated>2017-09-17T14:03:27.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结三-HttpSession会话管理"><a href="#Servlet总结三-HttpSession会话管理" class="headerlink" title="Servlet总结三(HttpSession会话管理)"></a>Servlet总结三(HttpSession会话管理)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><code>HttpSession</code>是提供一种方式，跨多个页面请求或对 Web 站点的多次访问标识用户并存储有关该用户的信息。<br>简单的来说就是能够实现全局的共享数据，可以跨多个页面请求，当然在<code>Servlet</code>中可以在同一个项目中的不同的Servlet中共享数据</p>
</blockquote>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><blockquote>
<ul>
<li><code>void setAttribute(String name, Object value)</code>  绑定对象到此会话上</li>
<li><code>public void removeAttribute(String name)</code>  移除绑定的对象</li>
<li><code>Object getAttribute(String name)</code>   根据指定的属性名称获取指定的值(需要强转)</li>
<li><code>Enumeration getAttributeNames()</code>    返回一个所有属性的枚举对象,可以通过Enumeration得到其中的值</li>
<li><code>public int getMaxInactiveInterval()</code>  返回 servlet 容器在客户端访问之间将使此会话保持打开状态的最大时间间隔，以秒为单位（根据测试，这个默认的值为1800秒，如果在这个默认的时间之内没有响应，那么会话将会中断）</li>
<li><code>public void setMaxInactiveInterval(int interval)</code>   指定在 servlet 容器使此会话失效之前客户端请求之间的时间间隔，以秒为单位。负数时间指示会话永远不会超时。 </li>
</ul>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>我们可以通过<code>HttpServletRequest</code>的方法<code>getSession()</code> 获取对象，下面我们来使用其中的函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//Demo1中的doGet方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</div><div class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">        <span class="comment">//获取对象</span></div><div class="line">		HttpSession session=request.getSession();</div><div class="line">		<span class="comment">//设置属性login的值为auto</span></div><div class="line">		session.setAttribute(<span class="string">"login"</span>, <span class="string">"auto"</span>);                                                                   </div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Demo2中的doGet方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</div><div class="line">        <span class="comment">//获取对象</span></div><div class="line">		HttpSession session=request.getSession();</div><div class="line">        <span class="comment">//获取其中的login的值</span></div><div class="line">        String login=session.getAttribute(<span class="string">"login"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><blockquote>
<p>下面是一个简单的例子实现自动登录,在填入用户名和密码正确之后，并且勾选其中的自动登录选项，那么登录过一次后在一天之内，如果直接登录首页将会直接跳转到用户界面，实现自动登录的功能</p>
<ul>
<li><code>index.jsp</code>文件中实现的是简单的表单登录，并没有加上一些css，js,仅仅是一个例子</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">	<span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></div><div class="line">	<span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//"</div><div class="line">			+ <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" + <span class="attr">request.getServerPort</span>()</div><div class="line">			+ <span class="attr">path</span> + "/";</div><div class="line">%&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"This is my page"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">	&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;</div><div class="line">	--&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"Demo3"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span>&gt;</span>password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span></span></div><div class="line">			<span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;<span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>自动登录：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">value</span>=<span class="string">"auto"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>Demo3.java</code>是用户的首页，实现检测自动登录，没有加一些页面在上面，但是其实是用户的首页</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.io.Reader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">		<span class="comment">// 获取HttpSession对象</span></div><div class="line">		HttpSession session = request.getSession();</div><div class="line">		<span class="comment">// 设置一天的访问时间间隔，如果超过这个时间，那么中断</span></div><div class="line">		session.setMaxInactiveInterval(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</div><div class="line">		<span class="comment">// 获取转发对象，页面跳转</span></div><div class="line">		RequestDispatcher dispatcher = request</div><div class="line">				.getRequestDispatcher(<span class="string">"HTML/user.html"</span>);</div><div class="line">		<span class="comment">// 获取表单的数据</span></div><div class="line">		String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		String login = request.getParameter(<span class="string">"login"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取HttpSession中设置的属性名为login的值，如果为null，表示没有设置</span></div><div class="line">		String value = (String) session.getAttribute(<span class="string">"login"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 如果不为空，表示已经登录过一次了，并且允许自动登录，直接跳转到用户界面即可</span></div><div class="line">		<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// 直接跳转到用户界面</span></div><div class="line">			dispatcher.forward(request, response);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 如果用户名和密码正确</span></div><div class="line">			<span class="keyword">if</span> (<span class="string">"chenjiabing"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(password)) &#123;</div><div class="line">				<span class="comment">// 并且设置了自动登录</span></div><div class="line">				<span class="keyword">if</span> (<span class="string">"auto"</span>.equals(login)) &#123;</div><div class="line">					<span class="comment">// 设置session的值</span></div><div class="line">					session.setAttribute(<span class="string">"login"</span>, <span class="string">"auto"</span>);</div><div class="line">				&#125;</div><div class="line">				response.sendRedirect(<span class="string">"HTML/user.html"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明:</strong> <code>user.html</code>是用户的主页，这里没有给出，可以自己设计</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结三-HttpSession会话管理&quot;&gt;&lt;a href=&quot;#Servlet总结三-HttpSession会话管理&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结三(HttpSession会话管理)&quot;&gt;&lt;/a&gt;Servlet
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结二(文件路径获取）</title>
    <link href="http://chenjiabing666.github.io/2017/09/15/Servlet%E6%80%BB%E7%BB%93%E4%BA%8C(%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E8%8E%B7%E5%8F%96)/"/>
    <id>http://chenjiabing666.github.io/2017/09/15/Servlet总结二(文件路径获取)/</id>
    <published>2017-09-15T08:25:28.000Z</published>
    <updated>2017-09-17T14:03:25.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结二（文件路径）"><a href="#Servlet总结二（文件路径）" class="headerlink" title="Servlet总结二（文件路径）"></a>Servlet总结二（文件路径）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前面我们说过<code>ServletContext</code>表示的是web容器中的上下文，下面我们也是用到<code>ServletContext</code>中的方法读取文件</p>
</blockquote>
<h2 id="读取WebRoot文件下的文件"><a href="#读取WebRoot文件下的文件" class="headerlink" title="读取WebRoot文件下的文件"></a>读取WebRoot文件下的文件</h2><blockquote>
<p>我们知道当我们将项目部署到<code>Tomcat</code>服务器中时，项目中的文件路径其实就是在Tomcat中的文件路径，所有的项目都是存储在webapps下的，我们可以看到webaapps下有两个文件夹<code>(WEB-INF,META-INF)</code>，这两个其实就是项目中<code>webRoot</code>下的两个文件夹。</p>
<ul>
<li><code>public String getRealPath(String path)</code>   为给定虚拟路径返回包含实际路径的String</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//获取ServletContext的对象</span></div><div class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</div><div class="line"><span class="comment">//context.getRealPath("/")获取项目的根目录的绝对路径(webRoot的绝对路径)</span></div><div class="line"><span class="comment">//得到了webRoot的绝对路径，下面只要再接着写其他文件的路径即可</span></div><div class="line">File file = <span class="keyword">new</span> File(context.getRealPath(<span class="string">"/"</span>)</div><div class="line">		+ <span class="string">"\\WEB-INF\\lib\\file.txt"</span>);</div><div class="line"><span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">	System.out.println(<span class="string">"文件存在"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	System.out.println(<span class="string">"文件不存在，现在我们创建一个"</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		file.createNewFile();<span class="comment">// 创建一个新的文件</span></div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>InputStream getResourceAsStream(String path)</code>   根据传入的路径文件，返回一个<code>InputStream</code>对象</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">// 第一个"/"是表示webRoot的根目录，通过这个函数可以不用指定绝对路径就可以构造一个输入字节流</span></div><div class="line">InputStream stream = context</div><div class="line">		.getResourceAsStream(<span class="string">"/WEB-INF/lib/file.txt"</span>);</div><div class="line"><span class="comment">// 通过InputStreamReader将字节流转换为字符流，然后创建缓冲字符流读取文件</span></div><div class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(</div><div class="line">		<span class="keyword">new</span> InputStreamReader(stream));</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	System.out.println(reader.readLine());</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">	System.out.println(<span class="string">"文件没有成功读取"</span>);</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>这个函数中的path传入的第一个<code>&quot;/&quot;</code>就表示根目录，在<code>eclipse</code>项目中表示webRoot的绝对路径，在<code>Tomcat</code>下的webapps表示项目名称的绝对路径，因此在下面的WEB-INF,META-INF文件夹下的文件只需要在后面继续添加即可</p>
</blockquote>
<h2 id="读取src下的class文件"><a href="#读取src下的class文件" class="headerlink" title="读取src下的class文件"></a>读取src下的class文件</h2><blockquote>
<p>前面我们获取的<code>webRoot</code>下的文件路径，但是如果我们想要获取<code>src</code>下的文件，那么我们要如何获取呢。</p>
<p>我们仔细看看<code>Tomcat</code>下的文件，可以发现在每一个WEB-INF下都有一个<code>classes</code>，这个就是相当于Tomcat下的src，因此我们利用上面得到的路径稍加修改就可以轻易的得到其中的文件路径</p>
<p>下面我们读取<code>src</code>文件夹下的<code>file.txt</code>中的内容，代码如下:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">// 获取ServletContext对象</span></div><div class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</div><div class="line"><span class="comment">// 这个是获取项目下的src文件夹下的file.txt文件</span></div><div class="line">File file = <span class="keyword">new</span> File(context.getRealPath(<span class="string">"/"</span>)</div><div class="line">		+ <span class="string">"\\WEB-INF\\classes\\file.txt"</span>);</div><div class="line">BufferedReader reader = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">	System.out.println(<span class="string">"文件存在，现在可以读取"</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 创建缓冲流对象，实现读取文件</span></div><div class="line">		reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 输出第一行内容</span></div><div class="line">			System.out.println(reader.readLine());</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">		System.out.println(<span class="string">"文件不存在"</span>);</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				reader.close(); <span class="comment">// 如果reader不是空，就关闭</span></div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				System.out.println(<span class="string">"文件关闭失败"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	System.out.println(<span class="string">"文件不存在，现在开始创建一个"</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		file.createNewFile();<span class="comment">// 创建一个</span></div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		System.out.println(<span class="string">"没有创建成功"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结二（文件路径）&quot;&gt;&lt;a href=&quot;#Servlet总结二（文件路径）&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结二（文件路径）&quot;&gt;&lt;/a&gt;Servlet总结二（文件路径）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse配置Tomcat</title>
    <link href="http://chenjiabing666.github.io/2017/09/14/Eclipse%E9%85%8D%E7%BD%AETomcat/"/>
    <id>http://chenjiabing666.github.io/2017/09/14/Eclipse配置Tomcat/</id>
    <published>2017-09-14T14:28:10.000Z</published>
    <updated>2017-09-17T14:03:29.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse配置tomcat"><a href="#Eclipse配置tomcat" class="headerlink" title="Eclipse配置tomcat"></a>Eclipse配置tomcat</h1><h2 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h2><h3 id="创建server"><a href="#创建server" class="headerlink" title="创建server"></a>创建server</h3><blockquote>
<ol>
<li>首先下载<code>eclipse for javaEE developer</code> </li>
<li>打开控制台，然后到server后右击空白处-&gt;New-&gt;Server-&gt;Apach-&gt;Tomact 7.0 -&gt;Next-&gt;添加tomcat的路径即可</li>
</ol>
<p>![第一步](<a href="http://ono60m7tl.bkt.clouddn.com/eclipse1.bmp" target="_blank" rel="external">http://ono60m7tl.bkt.clouddn.com/eclipse1.bmp</a></p>
</blockquote>
<h3 id="发布项目"><a href="#发布项目" class="headerlink" title="发布项目"></a>发布项目</h3><blockquote>
<p>在控制台server的空白处右击-&gt;Add and Remove-&gt;选择项目-&gt;Add-&gt;Finish</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/eclipse2.bmp" alt="添加项目"></p>
</blockquote>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><blockquote>
<ul>
<li><a href="http://download.csdn.net/download/qq_34162294/9977574" target="_blank" rel="external">javaee中英文对照文档</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Eclipse配置tomcat&quot;&gt;&lt;a href=&quot;#Eclipse配置tomcat&quot; class=&quot;headerlink&quot; title=&quot;Eclipse配置tomcat&quot;&gt;&lt;/a&gt;Eclipse配置tomcat&lt;/h1&gt;&lt;h2 id=&quot;Eclipse&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet总结一</title>
    <link href="http://chenjiabing666.github.io/2017/09/14/Servlet%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2017/09/14/Servlet总结一/</id>
    <published>2017-09-14T14:24:50.000Z</published>
    <updated>2017-09-17T14:03:49.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet总结一"><a href="#Servlet总结一" class="headerlink" title="Servlet总结一"></a>Servlet总结一</h1><h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h2><blockquote>
<p>想要实现一个servlet必须继承这个类，其实一个servlet就是一个java文件，但是这个类必须是继承HttpServlet。</p>
</blockquote>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote>
<p>servlet的生命周期是从创建到毁灭的一个过程，具体的过程如下：</p>
<blockquote>
<ul>
<li>Servlet 通过调用 <code>init ()</code> 方法进行初始化。</li>
<li>Servlet 调用 <code>service()</code> 方法来处理客户端的请求,但是在这一步还是要用到具体的实现的两个方法，分别是doPost(),doGet()</li>
<li>Servlet 通过调用 <code>destroy()</code> 方法终止（结束）。</li>
<li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>init()</code>   初试化方法</p>
</li>
<li><p><code>doGet(HttpServletRequest request,HttpServletResponse response)</code>    处理get请求的方法</p>
</li>
<li><p><code>doPost(HttpServletRequest request,HttpServletResponse response)</code>    处理post请求的方法</p>
</li>
<li><p><code>destroy()</code>      最后销毁</p>
</li>
<li><p><code>Enumeration&lt;E&gt; getInitParameterNames()</code>   该方法从 servlet 的 ServletConfig 对象获取所有的参数名称</p>
</li>
<li><p><code>public String getInitParameter(String name)</code> 该方法从 servlet 的 <code>ServletConfig</code> 对象获取指定参数的值  name是指定的<code>param-name</code>的值，返回的<code>param-value</code>的值，具体的使用如下：</p>
</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;</div><div class="line">    &lt;display-name&gt;ServletConfigDemo&lt;/display-name&gt;</div><div class="line">    &lt;servlet-name&gt;ServletConfigDemo&lt;/servlet-name&gt;</div><div class="line">    &lt;servlet-class&gt;com.ServletConfigDemo&lt;/servlet-class&gt;</div><div class="line"></div><div class="line">    &lt;init-param&gt;     </div><div class="line">    	&lt;param-name&gt;username&lt;/param-name&gt;     //定义的name</div><div class="line">    	&lt;param-value&gt;陈加兵&lt;/param-value&gt;      //定义的value</div><div class="line">    &lt;/init-param&gt; </div><div class="line">    </div><div class="line">    &lt;init-param&gt;         </div><div class="line">    	&lt;param-name&gt;password&lt;/param-name&gt;</div><div class="line">    	&lt;param-value&gt;123456&lt;/param-value&gt;</div><div class="line">    &lt;/init-param&gt;</div><div class="line">    </div><div class="line">  &lt;/servlet&gt;</div><div class="line">  &lt;servlet-mapping&gt;</div><div class="line">    &lt;servlet-name&gt;ServletConfigDemo&lt;/servlet-name&gt;</div><div class="line">    &lt;url-pattern&gt;/ServletConfigDemo&lt;/url-pattern&gt;</div><div class="line">  &lt;/servlet-mapping&gt;</div><div class="line"></div><div class="line"></div><div class="line">    //下面只是一个servlet类中的init()方法，一般否是在init()方法中获取 </div><div class="line">    public void init() throws ServletException &#123;</div><div class="line">		username=this.getInitParameter("username");   //根据指定的名称获取参数的值</div><div class="line">		enumeration=this.getInitParameterNames();    //获取枚举对象</div><div class="line">		while(enumeration.hasMoreElements())&#123;    //通过枚举的方法获取其中的所有的值</div><div class="line">			System.out.println(this.getInitParameter((String) enumeration.nextElement()));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p><code>ServletConfig getServletConfig()</code>   返回一个ServletConfig对象，这个方法在后面讲到ServletConfig类的时候回详细的说到</p>
</li>
<li><p><code>ServletContext getServletContext()</code>   返回一个ServletContext对象，这个和ServletConfig类一样重要，在后面会详细讲解</p>
</li>
</ul>
</blockquote>
<h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><blockquote>
<p>这是servlet容器中用来处理请求的类，并且该对象作为一个参数传给doGet,doPost方法中</p>
</blockquote>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>getParameter(String name)</code> 获取表单中的值，name是input中定义的name值，如果不存在返回null，否则返回的字符串 String[]  </p>
</li>
<li><p><code>getParameterValues(String name)</code> 获取表单中有多个name相同的值，例如多选列表，复选框</p>
</li>
<li><p><code>Enumeration getParameterNames()</code>  返回所有请求中的参数，返回的是一个枚举对象，可以通过对应的方法进行列出所有的参数</p>
</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">   //下面将会详细讲解上面三个方法的使用法，这三个参数是针对表单的，因此需要结合表单讲解，我们将会在index.jsp文件中定义表单</div><div class="line">   //index.jsp文件的内容如下：</div><div class="line">   &lt;form action="ServletDemo" method="post"&gt;       //servletDemo是要处理该请求的servlet的url，使用的是相对路径</div><div class="line">	username: &lt;input type="text" name="username"&gt; &lt;br&gt;Password:</div><div class="line">	&lt;input type="password" name="pw"&gt; &lt;br&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt; &lt;br&gt; &lt;label&gt;hobby:&lt;/label&gt;</div><div class="line">	&lt;input type="checkbox" name="hobby" value="1"&gt;swing &lt;input</div><div class="line">		type="checkbox" name="hobby" value="2"&gt;dancing &lt;input</div><div class="line">		type="checkbox" name="hobby" value="3"&gt;song</div><div class="line"></div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line"></div><div class="line">       //下面是ServletDemo中的部分代码</div><div class="line">        String username = request.getParameter("username");  //获取username的值</div><div class="line">        String pw = request.getParameter("pw");              //获取password的值</div><div class="line">       </div><div class="line">       //获取所有复选框的值</div><div class="line">	 String[] hobbies=request.getParameterValues("hobby");</div><div class="line">	 for(String hobby:hobbies)&#123;</div><div class="line">	 System.out.println(hobby);</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">       </div><div class="line">       //获得所有的元素的name属性的名称，返回的是一个枚举的对象</div><div class="line">	Enumeration enumeration = request.getParameterNames();</div><div class="line">	while (enumeration.hasMoreElements()) &#123;</div><div class="line">		String paramsString = (String) enumeration.nextElement();   //获取其中的每一名称</div><div class="line">		System.out.println(request.getParameter(request.getParameter));  //根据名称获取其中的值</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>Enumeration getHeaderNames()</code>  获取所有请求头中的参数的名称，返回的是一个枚举对象</li>
<li><code>String getHeader(String name)</code>   根据请求头中的名称获取对应名称的请求内容</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取所有请求头的名称，返回的是一个枚举对象	</span></div><div class="line">	Enumeration enumeration=request.getHeaderNames();</div><div class="line">	<span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</div><div class="line">		String name=(String) enumeration.nextElement();</div><div class="line">		String value=request.getHeader(name);   <span class="comment">//根据名称返回对应的值</span></div><div class="line">		System.out.println(name+<span class="string">":"</span>+value);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>String getContextPath()</code>    获取应用程序的环境路径，就是上一级目录</li>
<li><code>String getMethod()</code>    返回请求的方式  Get  Post</li>
<li><code>String getQueryString()</code>   返回请求行中的参数部分</li>
<li><code>StringBuffer getRequestURL()</code>   返回完整的URL</li>
<li><code>String getRequestURI()</code>      返回请求行中的资源名部分</li>
<li><code>getRemoteAddr</code>方法返回发出请求的客户机的IP地址。</li>
<li><code>getRemoteHost</code>方法返回发出请求的客户机的完整主机名。</li>
<li><code>getRemotePort</code>方法返回客户机所使用的网络端口号。</li>
<li><code>getLocalAddr</code>方法返回WEB服务器的IP地址。</li>
<li><code>getLocalName</code>方法返回WEB服务器的主机名。</li>
</ul>
</blockquote>
<h3 id="请求转发与包含"><a href="#请求转发与包含" class="headerlink" title="请求转发与包含"></a>请求转发与包含</h3><blockquote>
<p>请求转发相当于一个重定向，但是这个又和重定向不同的是：请求转发是在web容器中进行的，因此浏览器的地址栏并不会改变，但是重定向是要求浏览器重新请求另一个url，因此可以在地址栏清楚的看到地址的变化</p>
<p>请求转发使用的是<code>HttpServletRequest</code>中的<code>getRequestDispatcher</code>方法，下面将会详细介绍</p>
</blockquote>
<h4 id="getRequestDispatcher"><a href="#getRequestDispatcher" class="headerlink" title="getRequestDispatcher"></a>getRequestDispatcher</h4><blockquote>
<p><code>RequestDispatcher getRequestDispatcher(String path)</code>  返回的是一个<code>RequestDispatcher</code>对象，path是指定转发的url，可以是绝对url或者是相对url</p>
</blockquote>
<h4 id="RequestDispatcher"><a href="#RequestDispatcher" class="headerlink" title="RequestDispatcher"></a>RequestDispatcher</h4><blockquote>
<p>定义接收来自客户端的请求并将它们发送到服务器上的任何资源（比如 servlet、HTML 文件或 JSP 文件）的对象。servlet 容器可创建 RequestDispatcher 对象，该对象被用作包装位于特定路径上的服务器资源或通过特定名称给定的服务器资源的包装器。 </p>
<p><code>void forward(ServletRequest request, ServletResponse response)</code>   执行转发请求,因为继承关系，因此其中的参数也是可以是<code>HttpServletRequest</code>和<code>HttpServletResponse</code>对象 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,           ServletException </span>&#123;</div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//获取表单中的值</span></div><div class="line">	String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">	String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">	<span class="comment">//上面虽然获取了其中的值，但是不可以此时对浏览器进行响应</span></div><div class="line">	RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"Demo2"</span>);</div><div class="line">	dispatcher.forward(request, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p><strong>注意：</strong> 在转发前后不可以对浏览器进行响应，否则会出现错误，其中forward传入的参数是当前的request和response，也就是说在转发之后的文件之中还是可以获取信息的（请求头，表单）</p>
</blockquote>
<p><code>void include(ServletRequest request, ServletResponse response)</code>  包含转发</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">//获取表单中的值</span></div><div class="line">		String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">		String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">		</div><div class="line">		Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"age"</span>, <span class="string">"22"</span>);</div><div class="line">		response.addCookie(cookie);</div><div class="line">		PrintWriter pw=response.getWriter();</div><div class="line">		pw.println(<span class="string">"在转发之前先对浏览器进行响应"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//上面可以看出这里对浏览器进行了响应，使用include可以在转发之前或者之后对浏览器进行响应</span></div><div class="line">		RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"Demo2"</span>);</div><div class="line">		dispatcher.include(request, response);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h5 id="forward和include的区别"><a href="#forward和include的区别" class="headerlink" title="forward和include的区别"></a>forward和include的区别</h5><blockquote>
<ul>
<li><code>forward</code>在转发之前和之后是不可以对浏览器进行响应的，但是<code>include</code>可以。使用<code>include</code>时，如果同时进行了响应，那么会同时响应在同一网页中，会出现在同一个页面中</li>
</ul>
</blockquote>
<h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><blockquote>
<ul>
<li>请求转发后地址栏都不会出现改变</li>
<li>请求转发过后会重新回到当前的servlet容器中，因此如果想要在当前的servlet容器中处理一些东西是可以实现的，下面来看一个例子</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,           ServletException </span>&#123;</div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//获取表单中的值</span></div><div class="line">	String name=request.getParameter(<span class="string">"username"</span>);</div><div class="line">	String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">	<span class="comment">//上面虽然获取了其中的值，但是不可以此时对浏览器进行响应</span></div><div class="line">	RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"Demo2"</span>);</div><div class="line">	dispatcher.forward(request, response);</div><div class="line">                                                                                                                               </div><div class="line">      System.out.println(username);   <span class="comment">//这个语句当转发请求处理完成之后会返回到这里执行这句话                                                                                                     </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h5><blockquote>
<p>就像写到<code>scrapy</code>爬虫的时候，有时候一个数据会传入到下一个函数中使用，因此需要一个机制携带过去。这里可以使用<code>HttpServletRequest</code>中的 <code>setAttribute</code>方法，详细使用如下：<br> <code>public void setAttribute(String name, Object o)</code>  这里其实相当于传入的是一个键值对，name是key，o是value<br> <code>public void removeAttribute(String name)</code>  根据键值的name移除数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">		HttpServletResponse response) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">	<span class="comment">// 设置编码，这个是通过浏览器访问时能够实现中文显示的功能</span></div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">	<span class="comment">//设置和浏览器相应的编码方式，以便在控制台上输出中文，否则将会乱码显示</span></div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">	String data=<span class="string">"大家好，我是陈加兵"</span>;</div><div class="line">	request.setAttribute(<span class="string">"data"</span>,data);   <span class="comment">//向请求中传入数据,这个是以键值对存在的，前面的是key，后面的参数是value</span></div><div class="line">	<span class="comment">//将请求转发给HttpServletDemo的servlet文件处理</span></div><div class="line">	RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"HttpServletResponseDemo"</span>);</div><div class="line">	<span class="comment">//如果转发成功，注意这里的转发，地址栏的网址并不会改变</span></div><div class="line">	<span class="keyword">if</span>(dispatcher!=<span class="keyword">null</span>)&#123;</div><div class="line">		dispatcher.forward(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">//下面是HttpServletResponseDemo的处理代码</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span>                     ServletException, IOException </span>&#123;</div><div class="line">	response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);  <span class="comment">//设置响应内容</span></div><div class="line">	request.setCharacterEncoding(<span class="string">"UTF-8"</span>);    <span class="comment">//设置接受的编码</span></div><div class="line">	<span class="comment">//接收请求转发传递的data数据</span></div><div class="line">	String data=(String) request.getAttribute(<span class="string">"data"</span>);</div><div class="line">	PrintWriter pWriter=response.getWriter();</div><div class="line">	pWriter.println(data+<span class="string">"&lt;br/&gt;"</span>);</div><div class="line">	<span class="comment">//移除这个键值对 ，下面在访问这个数据就会显示不存在了</span></div><div class="line">	request.removeAttribute(<span class="string">"data"</span>);</div><div class="line">	pWriter.close();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><blockquote>
<p>这个类是用于对浏览器进行响应的</p>
</blockquote>
<h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>PrintWriter getWriter()</code>   返回一个PrintWriter对象，可以将字符串发送到客户端</li>
<li><code>addCookie(Cookie cookie)</code>   将指定的cookie添加到响应中，这个是直接添加到set-cookie中，用于存储一些信息</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">      Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"age"</span>, <span class="string">"22"</span>);</div><div class="line">cookie.setMaxAge(<span class="number">7</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//设置cookie的失效时间(秒为单位）</span></div><div class="line">response.addCookie(cookie);   <span class="comment">//添加cookie</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>sendError(int src)</code>    将指定的错误信息发送到客户端 比如401，302….</li>
<li><code>sendError(int sec,String message)</code>    发送错误信息的同时，还发送提醒的信息message</li>
<li><code>sendRedirect(String url)</code>       网页重定向，url是重定向的网址，但是也可以是相对的url</li>
<li><code>ServletOutputStream getOutputStream()</code> 返回适用于在响应中编写二进制数据的 ServletOutputStream。</li>
</ul>
</blockquote>
<h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><blockquote>
<p>在<code>web.xml</code>中对于每一个Servlet的设置web容器会为其生成一个<code>ServletConfig</code>作为代表对象，你可以从该对象中取得设置在web.xml中的Servlet初始参数</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><p><code>String getInitParameter(String name)</code>   根据属性的名称获取指定的值</p>
</li>
<li><p><code>Enumeration getInitParameterNames()</code>    获取该servlet中设置的所有的属性的名称（并不是设置的初始值）</p>
</li>
<li><p><code>ServletContext getServletContext()</code>     获取ServletContext对象</p>
</li>
</ul>
</blockquote>
<h3 id="设置和取得初始参数"><a href="#设置和取得初始参数" class="headerlink" title="设置和取得初始参数"></a>设置和取得初始参数</h3><blockquote>
<p><code>ServletConfig</code>相当于web.xml中个别Servlet设置代表对象，这意味着可以从ServletConfig中取得Servlet设置信息。ServletConfig定义了<code>getInitParameter()</code>、<code>getInitParameterNames()</code> 方法，可以取得设置的Servlet的初始参数</p>
</blockquote>
<h4 id="设置初始参数"><a href="#设置初始参数" class="headerlink" title="设置初始参数"></a>设置初始参数</h4><blockquote>
<p>直接在web.xml中定义如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is the description of my J2EE component<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>This is the display name of my J2EE component<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.Demo3<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>    //定义标签</div><div class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>   //定义的name </div><div class="line">    	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>    //定义的value</div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    </div><div class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="取得初始参数"><a href="#取得初始参数" class="headerlink" title="取得初始参数"></a>取得初始参数</h4><blockquote>
<p>第一种方法：直接使用带有ServletConfig对象为参数的init直接获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"><span class="comment">//		username=config.getInitParameter("username");   //单独的获取每一个值</span></div><div class="line"><span class="comment">//		password=config.getInitParameter("password");</span></div><div class="line">		</div><div class="line">		<span class="comment">//首先获取所有的初始参数的名称</span></div><div class="line">		Enumeration enumeration=config.getInitParameterNames();</div><div class="line">		<span class="keyword">while</span>(enumeration.hasMoreElements())&#123;</div><div class="line">			String name=(String)enumeration.nextElement();  <span class="comment">//获取每一个值</span></div><div class="line">			<span class="keyword">if</span>(name.equals(<span class="string">"username"</span>))&#123;</div><div class="line">				username=config.getInitParameter(name);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"password"</span>)) &#123;</div><div class="line">				password=config.getInitParameter(name);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>第二种：使用<code>HttpServlet</code>的<code>getServletConfig()</code> 方法直接获取ServletConfig对象，然后再获取参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">	</div><div class="line">	ServletConfig config=<span class="keyword">this</span>.getServletConfig();   <span class="comment">//获取ServletConfig对象</span></div><div class="line">	username=config.getInitParameter(<span class="string">"username"</span>);   <span class="comment">//获取参数的值</span></div><div class="line">	password=config.getInitParameter(<span class="string">"password"</span>);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><blockquote>
<ul>
<li><p><code>ServletContext</code>是整个web应用程序运行之后的代表对象，这是一个全局的对象，一个web项目中的所有Servlet文件都是可以共享这个数据的，因此这个有着很大的作用。</p>
</li>
<li><p>有人说这个不是和<code>ServletConfig</code>一样的用法吗，其实不然，<code>ServletConfig</code>并不是这个web程序的全局变量，它所设置的值只是对当前的servlet共享，并不能对web项目中的所有的servlet文件共享</p>
</li>
</ul>
</blockquote>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><p><code>String getInitParameter(String name)</code>     获取指定名称的属性值</p>
</li>
<li><p><code>Enumeration getInitParameterNames()</code>      获取所有已经设置的属性的名称</p>
</li>
<li><p><code>void setAttribute(String name, Object object)</code>  将对象绑定到此 servlet 上下文中的给定属性名称。如果已将指定名称用于某个属性，则此方法将使用新属性替换具有该名称的属性。 </p>
</li>
<li><p><code>Object getAttribute(String name)</code>   根据指定的属性名称获取绑定的值(需要进行强转)</p>
</li>
<li><p><code>void removeAttribute(String name)</code>   解除绑定的数据</p>
</li>
</ul>
</blockquote>
<h3 id="设置初始参数-1"><a href="#设置初始参数-1" class="headerlink" title="设置初始参数"></a>设置初始参数</h3><blockquote>
<p>这个和<code>ServletConfig</code>是一样的，都是在web.xml中设置的，但是这个是设置在<code>&lt;servlet&gt;&lt;/servlet&gt;</code>的外面的，并不是针对单独的一个<code>servlet</code>来设置的，因此是全局共享的</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>web2<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!--全局变量，对工程中的所有的Servlet都是共享的--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>context_name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>context_value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!--在每一对context-param中只能定义一个变量的值--&gt;</span>	</div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  </div><div class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.Demo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.Demo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Demo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="获取设置的参数"><a href="#获取设置的参数" class="headerlink" title="获取设置的参数"></a>获取设置的参数</h3><blockquote>
<ul>
<li>第一种方法：使用无参初始化的方法<code>init()</code> ，结合父类<code>HttpServlet</code>的<code>getServletContext()</code>的方法获取<code>ServletContext</code>对象</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用无参构造函数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">	ServletContext context=<span class="keyword">this</span>.getServletContext();</div><div class="line">	<span class="comment">//根据属性的名称获取指定的值</span></div><div class="line">	String value=context.getInitParameter(<span class="string">"username"</span>);  </div><div class="line">	System.out.println(value);</div><div class="line">	</div><div class="line">	<span class="comment">//获取所有的属性的名称的枚举对象</span></div><div class="line">	Enumeration enumeration=context.getInitParameterNames();</div><div class="line">	<span class="keyword">while</span>(enumeration.hasMoreElements())&#123;</div><div class="line">		<span class="comment">//获取属性的每一个名称</span></div><div class="line">		String name=(String) enumeration.nextElement();</div><div class="line">		<span class="comment">//根据名称获取所有的值</span></div><div class="line">		System.out.println(name+<span class="string">" = "</span>+context.getInitParameter(name));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>第二种方法：使用有参初始化方法<code>init(ServletConfig config)</code>，结合<code>ServletConfig</code>的<code>getServletContext()</code>方法获取对象</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用有参构造方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(ServletConfig config)</span></span>&#123;</div><div class="line">	<span class="comment">//调用ServletConfig中的方法获取对象</span></div><div class="line">	ServletContext context=config.getServletContext();</div><div class="line">	<span class="comment">//获取属性的值</span></div><div class="line">	String value=context.getInitParameter(<span class="string">"username"</span>);</div><div class="line">	System.out.println(value);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h3><blockquote>
<p>有人可能会说如果想用共享数据在web.xml设置有点繁琐，这里可以直接绑定属性，然后就可以在整个web项目中共享这个绑定的属性了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">		response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</div><div class="line">		<span class="comment">//获取对象（这是父类HttpServlet中的一个方法）</span></div><div class="line">		ServletContext context=<span class="keyword">this</span>.getServletContext();</div><div class="line">		</div><div class="line">		<span class="comment">//count表示访问页面的次数，在这里设置了属性可以全局共享该数据，意思就是在一个项目中的所有的servlet都是可以访问到该数据的</span></div><div class="line">		Integer count=(Integer) context.getAttribute(<span class="string">"count"</span>);  <span class="comment">//获取设置的属性值</span></div><div class="line">		<span class="comment">//如果为空，表示该属性还没有被设置，因此这是第一次访问该页面</span></div><div class="line">		<span class="keyword">if</span>(count==<span class="keyword">null</span>)&#123;    </div><div class="line">			count=<span class="number">1</span>;</div><div class="line">			context.setAttribute(<span class="string">"count"</span>, <span class="number">1</span>);    <span class="comment">//初始值为1，表示访问网页1次</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//否则表示已经不是第一次访问网页了，因此需要++1</span></div><div class="line">			context.setAttribute(<span class="string">"count"</span>, ++count);   </div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		PrintWriter pWriter=response.getWriter();</div><div class="line">		pWriter.println(<span class="string">"该页面已经被访问了"</span>+count+<span class="string">"次了......"</span>);</div><div class="line">	</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="http://download.csdn.net/download/qq_34162294/9977574" target="_blank" rel="external">javaEE中英文对照文档</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet总结一&quot;&gt;&lt;a href=&quot;#Servlet总结一&quot; class=&quot;headerlink&quot; title=&quot;Servlet总结一&quot;&gt;&lt;/a&gt;Servlet总结一&lt;/h1&gt;&lt;h2 id=&quot;HttpServlet&quot;&gt;&lt;a href=&quot;#HttpServle
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://chenjiabing666.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>多线程的使用</title>
    <link href="http://chenjiabing666.github.io/2017/09/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/03/多线程的使用/</id>
    <published>2017-09-03T06:30:25.000Z</published>
    <updated>2017-09-03T06:32:15.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>我看了不止一个人说多线程是鸡肋，但是就依照我个人觉得多线程在一些小型的爬虫中还是可以显著的提高速度的，相比多进程来说应该还是挺简单的</p>
</blockquote>
<h2 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h2><h3 id="继承threading-Thread"><a href="#继承threading-Thread" class="headerlink" title="继承threading.Thread"></a>继承threading.Thread</h3><blockquote>
<p>继承threading.Thread模块是一个很好的一个选择，就像java中也是可以继承类和实现接口一样，这都是很好的选择，下面我们来看看具体如何使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,threadID,name,counter)</span>:</span></div><div class="line">        threading.Thread.__init__(self)    <span class="comment">#首先需要先保留原来threading.Thread中的初始化函数</span></div><div class="line">        self.threadID=threadID      <span class="comment">#重命名线程的ID</span></div><div class="line">        self.name=name              <span class="comment">#线程的名字</span></div><div class="line">        self.counter=counter        <span class="comment">#线程的数量</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        lock.acquire()      <span class="comment">#获取线程锁Lock</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">            <span class="keyword">print</span> <span class="string">"线程"</span>+self.name+<span class="string">"开始运行"</span></div><div class="line">        lock.release()      <span class="comment">#释放线程锁Lock</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    lock=threading.Lock()     </div><div class="line">    t1=Mythread(<span class="number">0</span>,<span class="string">"thread-1"</span>,<span class="number">3</span>)</div><div class="line">    t2=Mythread(<span class="number">1</span>,<span class="string">"thread-2"</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line"></div><div class="line">    threads=[]</div><div class="line">    threads.append(t1)</div><div class="line">    threads.append(t2)</div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">        t.join()                <span class="comment">#阻塞主线程，直至线程运行完毕才运行main线程的语句</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"线程运行结束"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，这种继承的方式有一个缺点，这个和java中继承来实现多线程是一样的，就是一个对象只能是对应一个线程，并不能一个对象被多个线程共享，下面我们将会介绍另外的一种方式</p>
</blockquote>
<h3 id="直接调用threading-Thread"><a href="#直接调用threading-Thread" class="headerlink" title="直接调用threading.Thread"></a>直接调用threading.Thread</h3><blockquote>
<p>上面我们说过继承的方式，但是我个人觉得对于一些比较小的爬虫还是有些繁琐的，因为总是需要重写run方法，现在我们来看看如何简化实现多线程</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">这是一个简单的例子，其实也不是一个好的例子，但是为了演示方便就选用了，可以看出这里是直接调用</div><div class="line">了func函数，然后变成多个线程同时并行，其中target是要调用的方法(没有括号)，args是方法调用需要传入的参数</div><div class="line">其实这个还是和上面的继承比较相似的</div><div class="line">"""</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name,age)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="keyword">print</span> name+<span class="string">"的年龄为："</span>+str(age)       </div><div class="line">t=threading.Thread(target=func,args=[<span class="string">"陈加兵"</span>,<span class="number">22</span>])</div><div class="line">t.start()</div></pre></td></tr></table></figure>
<h3 id="Thread对象的相关方法"><a href="#Thread对象的相关方法" class="headerlink" title="Thread对象的相关方法"></a>Thread对象的相关方法</h3><blockquote>
<ul>
<li>start()   启动线程</li>
<li>join([timeout])  设置阻塞线程，timeout是可选的参数，表示阻塞的时间，如果没有就是当此线程运行结束才开始运行下一个线程</li>
<li>run()     线程活动的方法</li>
<li>getName()   获取线程名称</li>
<li>setName()   设置线程的名称</li>
<li>isAlive()    判断线程是否还活着</li>
<li>isDaemon()    判断是否是守护线程</li>
<li>setDaemon()   设置为守护线程，守护线程就是当主线程运行完后，这个线程也会随着主线程的结束而结束</li>
</ul>
</blockquote>
<h2 id="共享队列"><a href="#共享队列" class="headerlink" title="共享队列"></a>共享队列</h2><blockquote>
<p>从源代码可以看出队列是实现了锁原语的，因此可以使用队列实现线程的同步，这里的主要原理就不细说了，简单的说就是get和put等方法都实现了锁原语，就是当一个操作正在执行的时候其他的操作会阻塞等待</p>
<p>下面我自己写了一个使用两个线程实现同时入队和出队的程序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,threadID,name,counter,q,flag)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        threadID是线程的ID</div><div class="line">        name是线程的名称</div><div class="line">        q是先进先出队列</div><div class="line">        flag是用来调用get和put的标志</div><div class="line">        """</div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.name=name</div><div class="line">        self.threadID=threadID</div><div class="line">        self.counter=counter</div><div class="line">        self.q=q</div><div class="line">        self.flag=flag   </div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        当flag为1时就调用put方法，否则调用get</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> self.flag==<span class="number">1</span>:</div><div class="line">            self.put()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.get()</div><div class="line">            </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            self.q.put(random.randint(<span class="number">0</span>,<span class="number">10</span>))</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.q.empty():</div><div class="line">                <span class="keyword">print</span> self.q.get()</div><div class="line">            </div><div class="line">        </div><div class="line">            </div><div class="line"></div><div class="line">            </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    threadLock=threading.Lock()</div><div class="line">    q=Queue()</div><div class="line">    </div><div class="line">    t1=myThread(<span class="number">1</span>,<span class="string">"Thread-1"</span>,<span class="number">1</span>,q,<span class="number">1</span>)</div><div class="line">    t2=myThread(<span class="number">2</span>,<span class="string">"Thread-2"</span>,<span class="number">2</span>,q,<span class="number">2</span>)</div><div class="line">    </div><div class="line">    threads=[]</div><div class="line">    </div><div class="line">    threads.append(t1)</div><div class="line">    threads.append(t2)</div><div class="line">    </div><div class="line">    t1.start()</div><div class="line">    t2.start()</div></pre></td></tr></table></figure>
<h3 id="Queue相关的一些方法"><a href="#Queue相关的一些方法" class="headerlink" title="Queue相关的一些方法"></a>Queue相关的一些方法</h3><blockquote>
<ol>
<li>Queue.qsize() 返回队列的大小</li>
<li>Queue.empty() 如果队列为空，返回True,反之False</li>
<li>Queue.full() 如果队列满了，返回True,反之False</li>
<li>Queue.full 与 maxsize 大小对应</li>
<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>
<li>Queue.get_nowait() 相当Queue.get(False)</li>
<li>Queue.put(item) 写入队列，timeout等待时间</li>
<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>
<li>Queue.task_done() 在完成一项工作之后， Queue.task_done()函数向任务已经完成的队列发送一个信号</li>
<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;b
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="python爬虫" scheme="http://chenjiabing666.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>os模块中常用的的方法</title>
    <link href="http://chenjiabing666.github.io/2017/09/02/os%E6%A8%A1%E5%9D%97%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2017/09/02/os模块中常用的的方法/</id>
    <published>2017-09-01T23:37:27.000Z</published>
    <updated>2017-09-01T23:42:58.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="os模块中常用的方法"><a href="#os模块中常用的方法" class="headerlink" title="os模块中常用的方法"></a>os模块中常用的方法</h1><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><blockquote>
<p><code>os.getcwd()</code>   获取当前的路径<br><code>os.listdir(path)</code>  获取path路径下的全部文件和文件夹，就是显示全部的文件的作用<br><code>os.mkdir(path)</code>   创建一个文件夹<br><code>os.rmdir(path)</code>   删除一个文件夹<br><code>os.remove(path)</code>   删除一个文件<br><code>os.rename(path1,path2)</code>   将文件或者文件夹重命名，path1是原来件路径，path2是改变后的文件的路径名称<br><code>os.makedirs(path)</code>   循环创建文件夹，给出一个路径，连续的创建这个路径的全部文件夹，并不是创建文件<br><code>os.removedirs(path)</code>   循环删除文件夹  会删除整个路径的文件夹<br><code>os.path.abspath(path)</code>    返回此文件的绝对路径<br><code>os.path.exists(path)</code>    判断文件或者文件夹是否存在<br><code>os.path.basename(path)</code>   返回绝对路径中的文件名<br><code>os.path.normpath(path)</code>     标准化文件路径，Windows下将双斜杠变成单斜杠<br><code>os.path.commonprefix(list)</code>   返回list中的相同的路径，只是多个路径相同的部分<br><code>os.path.dirname(path)</code>        返回文件所在上面一层的目录的名称，注意这里是所在紧接着一层的文件夹的名称<br><code>os.path.split(path)</code>   将路径分割成两个部分，返回的是一个元祖，第一个元素是前面的路径，第二个元素是文件的名称<br><code>os.path.getatime(path)</code>   返回文件的最后访问时间<br><code>os.path.getmtime(path)</code>   返回文件的最后修改时间<br><code>os.path.getctime(path)</code>   在unix的系统上返回的是文件最后修改的时间，在window的系统上返回的是文件的创建时间<br><code>os.path.getsize(path)</code>    返回文件的大小，以字节为单位<br><code>os.path.isfile(path)</code>    判断文件是否是文件<br><code>os.path.isdir(path)</code>    判断文件是否是文件夹<br><code>os.path.join(path1,path2)</code>   将两个文件的路径拼接在一起</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote>
<p>其中的每个方法的例子<a href="https://github.com/chenjiabing666/Python-notebook/blob/master/os.ipynb" target="_blank" rel="external">请点击这里</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;os模块中常用的方法&quot;&gt;&lt;a href=&quot;#os模块中常用的方法&quot; class=&quot;headerlink&quot; title=&quot;os模块中常用的方法&quot;&gt;&lt;/a&gt;os模块中常用的方法&lt;/h1&gt;&lt;h2 id=&quot;常用的方法&quot;&gt;&lt;a href=&quot;#常用的方法&quot; class=&quot;he
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="python爬虫" scheme="http://chenjiabing666.github.io/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python操作MongoDB</title>
    <link href="http://chenjiabing666.github.io/2017/07/09/python%E6%93%8D%E4%BD%9CMongoDB/"/>
    <id>http://chenjiabing666.github.io/2017/07/09/python操作MongoDB/</id>
    <published>2017-07-09T04:40:33.000Z</published>
    <updated>2017-07-09T04:44:14.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>下面推荐本人写的MongoDB的基本操作博文，介绍的还是比较详细的，喜欢的朋友可以去看看</p>
<blockquote>
<ul>
<li><font color="#8BB800" size="3px" face="楷体"><a href="https://chenjiabing666.github.io/2017/04/28/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E5%AE%89%E8%A3%85/">MongoDB干货篇之安装</a></font></li>
<li><font color="#8BB800" size="3px" face="楷体"><a href="https://chenjiabing666.github.io/2017/04/30/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/">MongoDB干货篇之查询数据</a></font></li>
<li><font color="#8BB800" size="3px" face="楷体"><a href="https://chenjiabing666.github.io/2017/05/01/MongoDB%E5%B9%B2%E8%B4%A7%E7%AF%87%E4%B9%8B%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/">MongoDB干货篇之更新数据</a></font></li>
</ul>
</blockquote>
</blockquote>
<h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><blockquote>
<p><font color="#8BB800" size="3px" face="楷体">下面是自己写的一个简单的操作，分别对应了增删改查，虽然不太全面，但是只是简单的示范了一下，当然更多的功能还是需要自己去完善的，因为代码中都有注释，这里就不再详细的说了</font></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDB</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,db,collections)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        初始化数据库</div><div class="line">        :param db:数据库名称 </div><div class="line">        :param collections: 数据库的集合的名称</div><div class="line">        """</div><div class="line">        self.client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)    <span class="comment">#获取的连接</span></div><div class="line">        self.db = self.client[db]        <span class="comment">#创建数据库db</span></div><div class="line">        self.post = self.db[collections]    <span class="comment">#创建或者选择要操作的集合</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, data,upsert)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        更新数据库中的数据，如果upsert为Ture，那么当没有找到指定的数据时就直接插入，反之不执行插入</div><div class="line">        :param data: 要插入的数据</div><div class="line">        :param upsert: 判断是插入还是不插入</div><div class="line">        :return: </div><div class="line">        """</div><div class="line">        self.post.update(&#123;<span class="string">"ip"</span>: data&#125;, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'ip'</span>: data&#125;&#125; , upsert)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self,select)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        根据传入的参数查找指定的值，注意这里的select是字典</div><div class="line">        :param select: 指定的查找条件，这里的是字典类型的，比如&#123;"name":"chenjiabing","age":22&#125;</div><div class="line">        :return: 返回的是查询的结果，同样是字典类型的</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self.post.find(select)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,data)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        向数据库中插入指定的数据</div><div class="line">        :param data: 要插入的数据，这里的是字典的类型比如：&#123;"name":"chenjiabing","age":22&#125;</div><div class="line">        :return: 插入成功返回True,反之返回false</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.post.insert(data)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self,select)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        删除指定条件的记录</div><div class="line">        :param select: 指定的条件，这里是字典类型的，比如&#123;"age":22&#125; 表示删除age=22的所有数据</div><div class="line">        :return: 如果删除成功返回True，else返回False</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.post.remove(select)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<blockquote>
<p><font color="#8BB800" size="3px" face="楷体">下面是利用上面的Mongo.py文件获取西刺网站的代理并且存入数据库</font></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> Mongo <span class="keyword">import</span> MongoDB   <span class="comment">#导入文件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XICI</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        self.header:请求头</div><div class="line">        self.q:存储ip的队列</div><div class="line">        slef.urls:页面的url</div><div class="line">        :param page:传入的参数，表示获取多少页的ip</div><div class="line">        """</div><div class="line">        self.header = &#123;<span class="string">"User-Agent"</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0'</span>&#125;</div><div class="line">        self.q = Queue()</div><div class="line">        self.urls = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, page + <span class="number">1</span>):</div><div class="line">            self.urls.append(<span class="string">"http://www.xicidaili.com/nn/"</span> + str(i))</div><div class="line">        self.mongo = MongoDB(<span class="string">'python'</span>,<span class="string">'ip'</span>)  <span class="comment"># 创建MogoDB对象</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ips</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        根据一页的请求爬取一个页面的ip</div><div class="line">        :param url:传入的参数，表示每一页的链接</div><div class="line">        :return: None</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            res = requests.get(url, headers=self.header)</div><div class="line">            <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</div><div class="line">                soup = BeautifulSoup(res.text, <span class="string">'lxml'</span>)</div><div class="line">                ips = soup.find_all(<span class="string">'tr'</span>)</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ips)):</div><div class="line">                    ip = ips[i]</div><div class="line">                    tds = ip.find_all(<span class="string">"td"</span>)</div><div class="line">                    ip_temp = <span class="string">"http://"</span> + tds[<span class="number">1</span>].contents[<span class="number">0</span>] + <span class="string">":"</span> + tds[<span class="number">2</span>].contents[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">print</span> ip_temp</div><div class="line">                    self.q.put(ip_temp)  <span class="comment"># ip进入队列</span></div><div class="line"></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"-------------------------------------------请求出现异常------------------------------------------------"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        验证出过来的ip，如果成功就直接存入数据库</div><div class="line">        :param url: 验证ip地址的url</div><div class="line">        :return: 无返回值</div><div class="line">        """</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.q.empty():</div><div class="line">            ip = self.q.get()</div><div class="line">            proxy = &#123;<span class="string">"http"</span>: ip&#125;</div><div class="line">            <span class="keyword">print</span> proxy</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                res = requests.get(url, headers=self.header, proxies=proxy, timeout=<span class="number">5</span>)</div><div class="line">                <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</div><div class="line">                    self.mongo.update(ip,<span class="keyword">True</span>)  <span class="comment"># 如果成功验证直接进入数据库</span></div><div class="line">                    <span class="keyword">print</span> <span class="string">"**************************成功存入数据库********************************************"</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">print</span> <span class="string">"这个ip地址不能用"</span></div><div class="line"></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">"--------------------------请求失败---------------------------------------------"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.urls:</div><div class="line">            self.get_ips(url)</div><div class="line">        threads = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">            t=threading.Thread(target=self.insert,args=[<span class="string">"http://blog.csdn.net/qq_34162294/article/details/72353389"</span>])</div><div class="line">            threads.append(t)</div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">            t.start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p = XICI(<span class="number">3</span>)</div><div class="line">    p.main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python操作MongoDB&quot;&gt;&lt;a href=&quot;#python操作MongoDB&quot; class=&quot;headerlink&quot; title=&quot;python操作MongoDB&quot;&gt;&lt;/a&gt;python操作MongoDB&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="python" scheme="http://chenjiabing666.github.io/categories/python/"/>
    
    
      <category term="MongoDB" scheme="http://chenjiabing666.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Numpy指南</title>
    <link href="http://chenjiabing666.github.io/2017/07/01/Numpy%E6%8C%87%E5%8D%97/"/>
    <id>http://chenjiabing666.github.io/2017/07/01/Numpy指南/</id>
    <published>2017-07-01T05:29:21.000Z</published>
    <updated>2017-07-01T05:31:28.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy指南"><a href="#numpy指南" class="headerlink" title="numpy指南"></a>numpy指南</h1><blockquote>
<p>numpy是一个能够处理多维数组的库，虽然python中也内置了处理数组的库，但是这个并不能满足大数据时代的需求，因此产生了可以处理多维数组的numpy</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<ul>
<li><code>pip install numpy</code></li>
</ul>
</blockquote>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><blockquote>
<ul>
<li><code>array</code>函数是一个最基本的创建方式，其中传入的参数是一个序列，既可以创建一维数组，也可以创建二维数组，但是这种方法不太灵活，因为你要把这个序列显式的写出来，先不多说了，自己体会吧</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])   <span class="comment">#创建一个二维数组</span></div><div class="line">b=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])  <span class="comment">#创建一个二维数组</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> a.shape     <span class="comment">#输出数组的维度，(5,)</span></div><div class="line"><span class="keyword">print</span> b.shape     <span class="comment">#(2,4)</span></div></pre></td></tr></table></figure>
<h3 id="arange"><a href="#arange" class="headerlink" title="arange"></a>arange</h3><blockquote>
<ul>
<li><code>arange(start,end,step)</code>  创建一个一维数组，起始值为start，终值为end，步长为step，其中np.arrange(10) 表示起始值为0，终值为10，步长为1</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>)   </div><div class="line">b=np.arange(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h3 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h3><blockquote>
<ul>
<li><code>reshape(a,b)</code>能过改变当前数组的尺寸将其赋值给新的数组，但是当前数组并没有改变，这个用来改变当前数组的维度，可以将以为数组改变为二维数组</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=np.arange(<span class="number">10</span>)   <span class="comment">#创建一个有10个元素的一维数组</span></div><div class="line">b=np.reshape(<span class="number">2</span>,<span class="number">5</span>)  <span class="comment">#将改变后的当前数组赋值给b，但是a数组并没有改变 ，2*5=10</span></div><div class="line">c=np.reshape(<span class="number">5</span>,<span class="number">-1</span>)  <span class="comment">#第一个参数为5行，第二个-1表示自动计算生成，10/5=2</span></div></pre></td></tr></table></figure>
<h3 id="linspace"><a href="#linspace" class="headerlink" title="linspace"></a>linspace</h3><blockquote>
<ul>
<li><code>linspace(start,end,number)</code> 创建一个等距离的数组，start是起始值，end是终值，number是个数，创建的是一个一维数组，其中的元素全部是浮点数，默认的是包括终值的，但是可以通过endpoint=False指定不包括终值</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)   <span class="comment">#包含10的一个等差数组</span></div><div class="line">b=np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>,endpoint=<span class="keyword">False</span>)  <span class="comment">#不包含10的一个等差数组</span></div></pre></td></tr></table></figure>
<h3 id="logspace"><a href="#logspace" class="headerlink" title="logspace"></a>logspace</h3><blockquote>
<ul>
<li><code>logspace(start,end,number)</code>  创建的是在10^start和10^end之间包含number个元素的等比数组，创建的是一个等比数组</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=np.logspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>)  <span class="comment">#创建一个在1-10之间的10个元素的等比数组</span></div></pre></td></tr></table></figure>
<h2 id="存取数据"><a href="#存取数据" class="headerlink" title="存取数据"></a>存取数据</h2><h3 id="下标存取"><a href="#下标存取" class="headerlink" title="下标存取"></a>下标存取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a=np.arange(<span class="number">10</span>)   <span class="comment">#[0,1,2,3,4,5,6,7,8,9]</span></div><div class="line">a[<span class="number">0</span>]   <span class="comment">#获取第一个元素的值1</span></div><div class="line">a[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment">#获取下标我0,1的值，注意不包括2</span></div><div class="line">a[<span class="number">0</span>:<span class="number">10</span>:<span class="number">1</span>] <span class="comment"># 获取下标在0-10之间的(包括0,不包括9)，步长为1的元素，就是每隔一个区娶一个</span></div><div class="line">a[<span class="number">1</span>:]     <span class="comment">#获取从第二个元素开始到最后的所有的元素</span></div><div class="line">a[:<span class="number">8</span>]     <span class="comment">#获取下标为0-8之间的元素(不包括8)</span></div><div class="line">a[<span class="number">1</span>::<span class="number">1</span>]  <span class="comment">#获取下标为0到最后并且步长为1的所有元素</span></div><div class="line">a[<span class="number">8</span>:<span class="number">4</span>:<span class="number">-1</span>]  <span class="comment">#获取起始下标为8，终止下标为4，并且步长为-1，这是从后向前获取元素</span></div><div class="line">a[::<span class="number">-1</span>]   <span class="comment">#将数组逆置</span></div></pre></td></tr></table></figure>
<h3 id="使用整数序列"><a href="#使用整数序列" class="headerlink" title="使用整数序列"></a>使用整数序列</h3><blockquote>
<p>当使用整数序列对数组元素进行存取时，将使用整数序列中的每个元素作为下标，整数序列可以是列表或者数组。使用整数序列作为下标获得的数组不和原始数组共享数据空间。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x = np.arange(<span class="number">10</span>,<span class="number">1</span>,<span class="number">-1</span>)</div><div class="line"> x[[<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>]] <span class="comment"># 获取x中的下标为3, 3, 1, 8的4个元素，组成一个新的数组</span></div></pre></td></tr></table></figure>
<h2 id="ufunc"><a href="#ufunc" class="headerlink" title="ufunc"></a>ufunc</h2><blockquote>
<p>ufunc是universal function的缩写，它是一种能对数组的每个元素进行操作的函数。NumPy内置的许多ufunc函数都是在C语言级别实现的，因此它们的计算速度非常快.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">np.sin(x)  <span class="comment">#对数组中的每一个值进行sin操作，并且返回一个数组</span></div><div class="line">np.sin(x,y)  <span class="comment">#对数组x中的值进行sin操纵，所得结果返回给y，但是也返回一个结果数组，这个数组和y共享一块空间的</span></div><div class="line">np.add(a,b) <span class="comment">#将两个数组中的对应的值都相加，返回的是一个新的数组</span></div><div class="line">np.add(a,b,c) <span class="comment"># 将两个数组中对应的值相加，结果复制给c，并且返回一个新的数组</span></div><div class="line">np.subtract(a,b) <span class="comment"># 两个数组相减，a-b,返回的是一个新的数组</span></div><div class="line">np.subtract(a,b,c)  </div><div class="line">np.multiply(a,b)  <span class="comment">#相乘</span></div><div class="line">np.multiply(a,b,c)  <span class="comment">#相乘</span></div><div class="line">divide(a,b,[,y])  <span class="comment">#相除，如果是两个整数相除，那么返回的是整数</span></div><div class="line">true_divide(a,b,[,y])  <span class="comment">#相除，总是返回精确的商</span></div><div class="line">floor_divide(a,b,[,y])  <span class="comment">#总是对返回值取整</span></div><div class="line">power(a,b,[,y])   <span class="comment"># a^b  平方</span></div><div class="line">mod(a,b,[,y])   <span class="comment">#取余   %</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;numpy指南&quot;&gt;&lt;a href=&quot;#numpy指南&quot; class=&quot;headerlink&quot; title=&quot;numpy指南&quot;&gt;&lt;/a&gt;numpy指南&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;numpy是一个能够处理多维数组的库，虽然python中也内置了处理数组的
    
    </summary>
    
      <category term="python数据挖掘与分析" scheme="http://chenjiabing666.github.io/categories/python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="python数据分析" scheme="http://chenjiabing666.github.io/tags/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Lock</title>
    <link href="http://chenjiabing666.github.io/2017/06/22/Lock/"/>
    <id>http://chenjiabing666.github.io/2017/06/22/Lock/</id>
    <published>2017-06-22T07:53:32.000Z</published>
    <updated>2017-06-22T07:54:18.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1><blockquote>
<p>在上一篇文章中我们讲到了如何使用关键字synchronized来实现同步访问。本文我们继续来探讨这个问题，从Java 5之后，在java.util.concurrent.locks包下提供了另外一种方式来实现同步访问，那就是Lock。</p>
<p>也许有朋友会问，既然都可以通过synchronized来实现同步访问了，那么为什么还需要提供Lock？这个问题将在下面进行阐述。本文先从synchronized的缺陷讲起，然后再讲述java.util.concurrent.locks包下常用的有哪些类和接口，最后讨论以下一些关于锁的概念方面的东西</p>
</blockquote>
<h2 id="synchronized缺陷"><a href="#synchronized缺陷" class="headerlink" title="synchronized缺陷"></a>synchronized缺陷</h2><blockquote>
<p>前面我们说过synchronized的线程释放锁的情况有两种:</p>
<blockquote>
<ol>
<li>代码块或者同步方法执行完毕</li>
<li>代码块或者同步方法出现异常有jvm自动释放锁</li>
</ol>
</blockquote>
<p>从上面的synchronized释放锁可以看出，只有synchronized代码块执行完毕或者异常才会释放，如果代码块中的程序因为IO原因阻塞了，那么线程将永远不会释放锁，但是此时另外的线程还要执行其他的程序，极大的影响了程序的执行效率，现在我们需要一种机制能够让线程不会一直无限的等待下去，能够响应中断，这个通过lock就可以办到</p>
<p>另外如果有一个程序，包含多个读线程和一个写线程，我们可以知道synchronized只能一个一个线程的执行，但是我们需要多个读线程同时进行读，那么使用synchronized肯定是不行的，但是我们使用lock同样可以办到</p>
</blockquote>
<h2 id="Lock-1"><a href="#Lock-1" class="headerlink" title="Lock"></a>Lock</h2><blockquote>
<p>查看API可知，Lock是一个接口，因此是不可以直接创建对象的，但是我们可以利用其实现的类来创建对象，这个先不着急，我们先看看Lock类到底实现了什么方法,具体的实现我们将会在介绍其实现的类的时候再详细的讲解</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote>
<ul>
<li><code>lock()</code>  获取锁，如果没有获得就会一直等待</li>
<li><code>unlock()</code>  释放锁</li>
<li><code>tryLock()</code>  尝试获得锁，如果成功获得锁就执行，如果没有成功获得锁，那么就不会等待了</li>
<li><code>lockInterruptibly()</code>   如果当前线程未被中断，则获取锁。</li>
</ul>
</blockquote>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><blockquote>
<p>ReentrantLock是可重入锁，是实现Lock接口的一个类，可重入是一种线程的分配机制，可重入的意思就是总是分配给最近获得锁的线程，这是一种不公平的分配机制，将会出现饥饿现象，当然为了解决这种现象，ReentrantLock的构造方法还提供了一个fair参数，如果fair为true表示使用公平分配机制，将会有等待时间最长的线程获得锁</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>ReentrantLock()</code>  创建一个对象，默认使用的时可重入的机制</li>
<li><code>ReentrantLock(boolean fair)</code>  如果fair为true那么使用的是公平分配机制</li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>lock()</code> 获取锁，如果没有获取到将会一直阻塞</li>
</ul>
<p>下面使用一段程序演示以下lock方法的使用，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantLock rLock = <span class="keyword">null</span>;  <span class="comment">//注意这里的锁一定要是全局变量，否则每一个线程都创建一把锁，那么将会毫无意义</span></div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 创建默认的可重入锁</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock.lock(); <span class="comment">// 获取锁</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">"正在输出"</span></div><div class="line">						+ i);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">this</span>.rLock.unlock(); <span class="comment">// 释放锁，注意这步是一定需要的</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.display(); <span class="comment">// 调用display方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 下面创建两个线程,并且直接启动，</span></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行上面的代码得到下图的结果:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/result.bmp" alt="结果"></p>
<p>从上面的结果看出，线程是一个一个输出的，并且只有等待一个线程输出完毕才能执行下一个线程，这里的仅仅是针对lock和unlock之间的代码，之外的代码并不是受到控制</p>
<p><strong>注意：</strong> 这里的创建的可重入锁的对象必须对于每一个线程来说是全局的变量，是可以共享的一个对象，如果你在display方法中创建这个对象，那么是毫无意义的，因为每一个线程用的根本不是同一把锁</p>
<ul>
<li><code>boolean tryLock()</code>  首先尝试获取锁，如果获取锁了就执行，否则就不会一直等待</li>
</ul>
<p>下面使用一段代码尝试以下这个方法，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantLock rLock = <span class="keyword">null</span>; <span class="comment">// 注意这里的锁一定要是全局变量，否则每一个线程都创建一把锁，那么将会毫无意义</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 创建默认的可重入锁</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.rLock.tryLock()) <span class="comment">// 如果获取了锁</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"正在输出"</span> + i);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">this</span>.rLock.unlock(); <span class="comment">// 释放锁，注意这步是一定需要的</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()</div><div class="line">					+ <span class="string">"获取锁失败，我将不会一直等待........"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.display(); <span class="comment">// 调用display方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 下面创建两个线程,并且直接启动，</span></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread(thread).start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行后的结果如下图:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/re.bmp" alt="结果"></p>
<p>从上面的结果我们知道线程0获取了锁开始执行，但是线程1并没有获取锁，但是使用的是tryLock并不是lock,因此不会一直等待下去，所以直接程序向下运行，直接跳过上锁的代码段，因此就输出了上面的那句话后直接结</p>
</blockquote>
<h2 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h2><blockquote>
<p>从API中可以知道，这个也是一个接口，用于实现读写线程，他有两个方法：Lock readLock(),Lock writeLock() 分别用于获得读锁和写锁，指定特定的锁可以实现特定的功能，比如读锁可以在写线程在执行的情况下可以实现多个读线程进行操作，下面我们来介绍它的具体的实现的类ReentrantReadWriteLock </p>
</blockquote>
<h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><blockquote>
<p>这个类也是一个可重入分配的类，当然前面已经说过了什么是可重入，现在我们来说说说这个类的详细的用法</p>
</blockquote>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>ReentrantReadWriteLock()</code> 使用默认（非公平）的排序属性创建一个新的 ReentrantReadWriteLock。</li>
<li><code>ReentrantReadWriteLock(boolean fair)</code>  使用给定的公平策略创建一个新的ReentrantReadWriteLock。</li>
</ul>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>ReentrantReadWriteLock.ReadLock readLock()</code>   用于返回读取操作的锁</li>
</ul>
<p>前面已经说过读取操作的锁是用来实现多个线程共同执行的，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantReadWriteLock rwlock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> Lock rLock = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rwlock = <span class="keyword">new</span> ReentrantReadWriteLock(); <span class="comment">// 创建对象，使用的是非公平的</span></div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">this</span>.rwlock.readLock(); <span class="comment">// 获取读取锁对象</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rLock.lock(); <span class="comment">// 获取读取锁</span></div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(Thread.currentThread().getName() + <span class="string">"正在输出"</span></div><div class="line">						+ i);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">this</span>.rLock.unlock(); <span class="comment">// 释放锁，注意这步是一定需要的</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.display(); <span class="comment">// 调用display方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 下面创建两个线程,并且直接启动，</span></div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">new</span> Thread(thread).start();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行上面的程序结果如下:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/result1.bmp" alt="结果"></p>
<p>从上面的结果可以知道，其实使用读取操作是多个线程同时进行读取的操作，因此一定要小心谨慎的使用，根据自己的需求，一般不能在里面进行修改了，因为出现结果不准确的结果，这个就不多说了，相信大家都明白，总之要小心使用</p>
<ul>
<li><code>ReentrantReadWriteLock.WriteLock writeLock()</code> 返回用于写入操作的锁 </li>
</ul>
<p>写入操作的锁和读取操作的锁不一样了，因为一次只能允许一个线程执行写入操作。</p>
<p>并且如果一个线程已经占用了读锁，另外一个线程申请写锁将会一直等待线程释放读锁。</p>
<p>如果一个线程已经占用了写锁，另外一个线程申请读锁，那么这个线程将会一直等待线程释放写锁才能执行。</p>
<p>总之意思就是写线程和读线程不能同时执行，但是多个读线程可以同时执行</p>
<p>下面将使用一个程序详细的体会以下读写锁的综合使用，代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现接口的线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ReentrantReadWriteLock rwlock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> Lock rLock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> Lock wLock = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">public</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.rwlock = <span class="keyword">new</span> ReentrantReadWriteLock(); <span class="comment">// 创建对象，使用的是非公平的</span></div><div class="line">		<span class="keyword">this</span>.rLock = <span class="keyword">this</span>.rwlock.readLock(); <span class="comment">// 获取读取锁对象</span></div><div class="line">		arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 实例化</span></div><div class="line">		<span class="keyword">this</span>.wLock = <span class="keyword">this</span>.rwlock.writeLock(); <span class="comment">// 获取写入锁对象</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将unlock方法放在finally中确保执行中代码出现异常仍然能够释放锁，否则将会造成其它的线程阻塞</span></div><div class="line"></div><div class="line">	<span class="comment">// //向arraylist中写入数据</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.wLock.lock(); <span class="comment">// 获取写入锁</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(Thread.currentThread().getName()</div><div class="line">						+ <span class="string">"正在执行写入操作，写入"</span> + i);</div><div class="line">				<span class="keyword">this</span>.arrayList.add(i);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">this</span>.wLock.unlock();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 从arraylist中读取数据，这里只是随机读取使用的是get，并没有做什么修改，因为这仅仅是读取操作，如果进行了修改必须实现同步</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.rLock.lock(); <span class="comment">// 获取读取操作的锁</span></div><div class="line">		Random random = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!arrayList.isEmpty()) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">					<span class="keyword">int</span> index = random.nextInt(<span class="keyword">this</span>.arrayList.size() - <span class="number">1</span>);</div><div class="line">					<span class="keyword">int</span> data = <span class="keyword">this</span>.arrayList.get(index);</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"正在读取数据     "</span> + data);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">this</span>.rLock.unlock();</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"ArrayList为空"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程的测试类，主要是创建对象启动线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> MyThread thread = <span class="keyword">new</span> MyThread(); <span class="comment">// 创建对象</span></div><div class="line"></div><div class="line">		ArrayList&lt;Thread&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 创建8个读线程，2个写线程</div><div class="line">		 */</div><div class="line">	</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">			arrayList.add(<span class="keyword">new</span> Thread() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					thread.put();</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</div><div class="line">		&#123;</div><div class="line">			arrayList.add(<span class="keyword">new</span> Thread()&#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					thread.get();</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		</div><div class="line">		</div><div class="line">		</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Thread t : arrayList) &#123;</div><div class="line">			t.start();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果如下图:</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/thread.bmp" alt="结果"></p>
<p>从上面可以看出写入线程都是一个一个执行的，读取线程是一起执行的</p>
<p><strong>注意：</strong> 所有的锁对象对于线程来说必须是全局变量，否则毫无意义。读线程只能进行不影响线程安全性的操作，比如不能进行对数据的修改插入，如果想要进行修改的话必须还要使用锁对必要的代码实现同步操作</p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3923167.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3923167.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lock&quot;&gt;&lt;a href=&quot;#Lock&quot; class=&quot;headerlink&quot; title=&quot;Lock&quot;&gt;&lt;/a&gt;Lock&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在上一篇文章中我们讲到了如何使用关键字synchronized来实现同步访问。本文我们继续来探讨这
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java并发编程" scheme="http://chenjiabing666.github.io/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>synchronized</title>
    <link href="http://chenjiabing666.github.io/2017/06/20/synchronized/"/>
    <id>http://chenjiabing666.github.io/2017/06/20/synchronized/</id>
    <published>2017-06-20T04:18:29.000Z</published>
    <updated>2017-06-20T04:22:54.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>相信大家都听说过线程安全问题，在学习操作系统的时候有一个知识点是临界资源，简单的说就是一次只能让一个进程操作的资源，但是我们在使用多线程的时候是并发操作的，并不能控制同时只对一个资源的访问和修改，想要控制那么有几种操作，今天我们就来讲讲第一种方法：线程同步块或者线程同步方法(synchronized)</p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote>
<ul>
<li>下面举一个例子说明<code>synchronized</code>关键字的使用</li>
</ul>
</blockquote>
<h3 id="线程同步方法"><a href="#线程同步方法" class="headerlink" title="线程同步方法"></a>线程同步方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Sychor sychor = <span class="keyword">new</span> Sychor();</div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>其中输出结果为下图</p>
</blockquote>
<p><img src="http://ono60m7tl.bkt.clouddn.com/t1.bmp" alt="运行结果"></p>
<blockquote>
<p>从上面的结果可以看出这里的两个线程是同时执行<code>insert()</code>方法的，下面我们在原有的代码上添加<code>synchronized</code>关键字看看效果如何，代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Sychor sychor = <span class="keyword">new</span> Sychor();</div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面程序的运行结果我就不列出来，自己可以试试，总之就是加上了<code>synchronized</code>关键字使得线程是一个一个的执行的，只有先执行完一个线程才能执行了另外一个线程。</p>
</blockquote>
<h3 id="线程同步块"><a href="#线程同步块" class="headerlink" title="线程同步块"></a>线程同步块</h3><blockquote>
<p>当然上面的我们使用的是线程同步方法，我们可以使用线程同步块，这两个相比线程同步块更加灵活，只需要将需要同步的代码放在同步块中即可，代码如下；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">			&#125;</div><div class="line">            </div><div class="line">		&#125;</div><div class="line">		</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Sychor sychor = <span class="keyword">new</span> Sychor();</div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面的代码中可以看出这种方式更加灵活，只需要将需要同步的代码方法在同步块中，不需要同步的代码放在外面</p>
</blockquote>
<h3 id="详细原因"><a href="#详细原因" class="headerlink" title="详细原因"></a>详细原因</h3><blockquote>
<ul>
<li>我们知道<strong>每一个对象都有一把锁</strong>，当我们使用线程同步方法或者线程同步块的时候实际上获得是对象的唯一的一把锁，当一个线程获得了这唯一的锁，那么其他的线程只能拒之门外了，注意这里我们说是一个对象，也就是说是同一个对象，如果是不同的对象，那么就不起作用了，因为不同对象有不同的对象锁，比如我们将上面的程序改成如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				System.out.println(thread.getName() + <span class="string">"输出:  "</span> + i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//第一个线程</span></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor sychor = <span class="keyword">new</span> Sychor();   <span class="comment">//在run() 方法中创建一个对象</span></div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">//第二个线程</span></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor sychor = <span class="keyword">new</span> Sychor();  <span class="comment">//创建另外的一个对象</span></div><div class="line">				sychor.insert(Thread.currentThread());</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从上面的结果可知，此时线程同步块根本不起作用，因为他们调用的是<strong>不同对象</strong>的insert方法，获得锁是不一样的</p>
<ul>
<li>上面我们已经说过一个对象有一把锁，线程同步方法和线程同步块实际获得的是对象的锁，因此线程同步块的括号中填入的是<code>this</code>，我们都知道<code>this</code>在一个类中的含义</li>
</ul>
<ol>
<li><strong>一个类也有唯一的一把锁</strong>，我们前面说的是使用对象调用成员方法，现在如果我们要调用类中的静态方法，那么我们可以使用线程同步方法或者同步块获得类中的唯一一把锁，那么对于多个线程同时调用同一个类中的静态方法就可以实现控制了,代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sychor</span> </span>&#123;</div><div class="line">	<span class="comment">// 静态方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span>  </span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(thread.getName()+<span class="string">"输出     "</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//第一个线程</span></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor.insert(Thread.currentThread());  <span class="comment">//直接使用类调用静态方法</span></div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">//第二个线程</span></div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				Sychor.insert(Thread.currentThread());   <span class="comment">//直接使用类调用静态方法</span></div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<ol>
<li><p>要想实现线程安全和同步控制，如果执行的是非<code>static</code>同步方法或者其中的同步块，那么一定要使用同一个对象，如果调用的是static同步方法或者其中的同步块那么一定要使用同一个类去调用</p>
</li>
<li><p>如果一个线程访问的是<code>static</code>同步方法，而另外一个线程访问的是非static的同步方法，此时这两个是不会发生冲突的，因为一个是类的锁，一个是对象的锁</p>
</li>
<li><p>如果使用线程同步块，那么同步块中的代码是控制访问的，但是外面的代码是所有线程都可以访问的</p>
</li>
<li><p>当一个正在执行同步代码块的线程出现了异常，那么<code>jvm</code>会自动释放当前线程所占用的锁，因此不会出现由于异常导致死锁的现象</p>
</li>
</ol>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3923737.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3923737.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;synchronized&quot;&gt;&lt;a href=&quot;#synchronized&quot; class=&quot;headerlink&quot; title=&quot;synchronized&quot;&gt;&lt;/a&gt;synchronized&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java并发编程" scheme="http://chenjiabing666.github.io/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Thread初探</title>
    <link href="http://chenjiabing666.github.io/2017/06/20/Thread%E5%88%9D%E6%8E%A2/"/>
    <id>http://chenjiabing666.github.io/2017/06/20/Thread初探/</id>
    <published>2017-06-20T00:54:01.000Z</published>
    <updated>2017-06-20T00:54:35.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thread初探"><a href="#Thread初探" class="headerlink" title="Thread初探"></a>Thread初探</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>以前大家写的都是单线程的程序，全是在main函数中调用方法，可以清楚的看到它的效率是特别低的，就像python中使用单线程取爬一个网站，可以说能让你等的吐血，因为数据量实在太大了，今天我们就来看看java的并发编程多线程的学习</p>
</blockquote>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><blockquote>
<p>创建一个线程可以有多种方法，比如继承Thread类，实现Runnable接口……下面我们来详细的看看创建的方法</p>
</blockquote>
<h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><blockquote>
<p>为什么继承<code>Thread</code>可以直接调用<code>start()</code>方法启动线程呢，因为<code>start()</code>本身就是Thread的方法，也就是继承了Thread的start()方法，因此这个类的对象可以调用start()启动线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//继承Thread</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;    </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"正在跑"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Mythread t1=<span class="keyword">new</span> MyThread();   <span class="comment">//创建对象</span></div><div class="line">        t1.start();     <span class="comment">//启动线程</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong>  继承<code>Thread</code>类的创建方法一个对象只能创建一个线程，并不能多个线程共用一个对象，只能一个线程对应一个对象，因此我们来看看实现<code>Runnable</code>接口的类来实现多个线程共享同一个对象</p>
</blockquote>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现Runnable接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"正在跑"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Demo d=<span class="keyword">new</span> Demo();  <span class="comment">//创建对象</span></div><div class="line">        Thread thread1=<span class="keyword">new</span> Thread(d); <span class="comment">//为对象创建一个线程</span></div><div class="line">        Thread thread2=<span class="keyword">new</span> Thread(d);   <span class="comment">//创建另外一个线程</span></div><div class="line">        </div><div class="line">        <span class="comment">//同时启动两个线程</span></div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>从上面可以清楚的看到实现<code>Runnable</code>接口的类一个对象可以供多个线程共享，并不像继承Thread类只为一个线程使用</p>
</blockquote>
<h3 id="简便的创建方法"><a href="#简便的创建方法" class="headerlink" title="简便的创建方法"></a>简便的创建方法</h3><blockquote>
<p>直接在<code>main</code>方法中创建，如果创建的普通类的对象在外面，那么必须是final修饰，可以实现多个线程同时共享一个对象，这个和实现<code>Runnable</code>接口一样，这时候就要控制同步条件了，如果在run方法中定义对象，那么，就是一个线程对应一个对象,这个就和继承Thread类一样的效果。所以可以根据条件自由选择</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//普通的一个类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">		&#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"正在跑"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//线程测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//如果在外面必须使用final，当然也可以直写在run方法中,不过写在外面可以实现多个线程共享一个对象</span></div><div class="line">		<span class="comment">//写在run方法中当前对象只能为一个线程使用，和继承Thread类一样的效果</span></div><div class="line">		<span class="keyword">final</span> Simple simple=<span class="keyword">new</span> Simple(); </div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="comment">//下面创建使用同一个对象创建同两个线程，实现多个线程共享一个对象，和实现Runnable接口一样的效果</span></div><div class="line">		Thread t1=<span class="keyword">new</span> Thread()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				simple.display();</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				simple.display();</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line">		</div><div class="line">		<span class="comment">//启动这两个线程</span></div><div class="line">		t1.start();   </div><div class="line">		t2.start();</div><div class="line">    &#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><blockquote>
<ul>
<li><p><code>static void sleep(long mils)</code> 使正在运行的线程休眠mils毫秒，但是这里需要注意的是如果线程加了锁，那么使线程休眠并不会释放锁</p>
</li>
<li><p><code>String getName()</code>   得到线程的名称，上面的程序中已经使用了这个方法</p>
</li>
<li><p><code>void setName(String name)</code>  设置正在运行的线程的名字为name</p>
</li>
<li><p><code>start()</code>  启动线程，线程的创建并不意味着线程的启动，只有调用start()方法线程才是真正的开始运行</p>
</li>
<li><p><code>long getId()</code>  返回线程的标识符</p>
</li>
<li><p><code>run()</code>  线程执行的代码都放在run()方法中，在run方法中的调用是有序的，都是按照程序运行的顺序开始执行</p>
</li>
</ul>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>下面使用上面的方法创建一个实例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//线程的类，继承Thread</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">this</span>.sleep(<span class="number">1000</span>); <span class="comment">// 线程休眠1秒</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//线程测试的类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line"></div><div class="line">		MyThread1 t2 = <span class="keyword">new</span> MyThread1();</div><div class="line">		t2.setName(<span class="string">"第二个线程"</span>);</div><div class="line"></div><div class="line">		t1.start(); <span class="comment">// 启动线程，开始运行</span></div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>void join()</code>  等待该线程终止才能运行其他的线程</li>
<li><code>void join(long mils)</code>  等待该线程的时间为mils毫秒，一旦过了这个时间其他线程正常执行</li>
</ul>
</blockquote>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">this</span>.sleep(<span class="number">1000</span>); <span class="comment">// 线程休眠1秒</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line"></div><div class="line">		t1.start(); <span class="comment">// 启动线程，开始运行</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			t1.join();   <span class="comment">//阻塞其他线程，只有当这个线程运行完之后才开始运行其他的线程</span></div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(<span class="string">"主线程正在运行"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//输出结果</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line">主线程正在运行</div><div class="line"> */</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>getPriority()</code>  得到当前线程优先级</li>
<li><code>setPriority(int num)</code> 更改线程的优先级(0-10)默认的是5，优先级越高获得cpu资源的几率就会越高</li>
</ul>
</blockquote>
<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">this</span>.sleep(<span class="number">1000</span>); <span class="comment">// 线程休眠1秒</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line"></div><div class="line">		MyThread1 t2 = <span class="keyword">new</span> MyThread1();</div><div class="line">		t2.setName(<span class="string">"第二个线程"</span>);</div><div class="line"></div><div class="line">		t2.setPriority(<span class="number">8</span>);   <span class="comment">//设置第二个线程的优先级为8，第一个线程的优先级为5(是默认的)</span></div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 从上面的运行结果可以看出大部分的第二个线程都是在第一个线程之前开始执行的，也就是说优先级越高获得cpu执行的几率就越大</div><div class="line"> * /</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>setDaemon(boolean)</code> 是否设置为守护线程，如果设置为守护线程，那么主线程销毁守护线程也会随之销毁</li>
<li><code>isDaemon()</code>  判断是否为守护线程</li>
</ul>
</blockquote>
<h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重载run方法，并且在其中写线程执行的代码块</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="comment">// 获取线程的id和name</span></div><div class="line">			System.out.println(<span class="string">"Thread-Name:   "</span> + <span class="keyword">this</span>.getName()</div><div class="line">					+ <span class="string">"   Thread-id:    "</span> + <span class="keyword">this</span>.getId());</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">1000</span>);  <span class="comment">//休眠一秒，方便主线程运行结束</span></div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread1 t1 = <span class="keyword">new</span> MyThread1(); <span class="comment">// 创建线程</span></div><div class="line">		t1.setName(<span class="string">"第一个线程"</span>); <span class="comment">// 设置线程的名字</span></div><div class="line">		t1.setDaemon(<span class="keyword">true</span>);</div><div class="line">		t1.start();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</div><div class="line">			System.out.println(i);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//结果：</span></div><div class="line"><span class="comment">/*</span></div><div class="line"> 0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">Thread-Name:   第一个线程   Thread-id:    9</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 从上面的结果可以看出，一旦主线程结束，那么守护线程就会自动的结束</div><div class="line"> * /</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920357.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3920357.html</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thread初探&quot;&gt;&lt;a href=&quot;#Thread初探&quot; class=&quot;headerlink&quot; title=&quot;Thread初探&quot;&gt;&lt;/a&gt;Thread初探&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java并发编程" scheme="http://chenjiabing666.github.io/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java字符串进阶</title>
    <link href="http://chenjiabing666.github.io/2017/06/16/Java%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E9%98%B6/"/>
    <id>http://chenjiabing666.github.io/2017/06/16/Java字符串进阶/</id>
    <published>2017-06-16T04:53:57.000Z</published>
    <updated>2017-06-16T04:55:10.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java字符串进阶"><a href="#Java字符串进阶" class="headerlink" title="Java字符串进阶"></a>Java字符串进阶</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最常用的对字符串操作的类有三个，分别是String,StringBuilder,StringBuffer，下面将会详细的说说这三个类……</p>
</blockquote>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote>
<p>String类代表字符串，这个是最基本的对字符串的类，这个也是使用比较多的类，这里就不再详细介绍了</p>
</blockquote>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><blockquote>
<ul>
<li><code>new String(String str)</code></li>
<li><code>new String(StringBuilder str)</code></li>
<li><code>new String(StringBuffer str)</code></li>
<li><code>new String(byte[] bys,String charsetName)</code>  通过使用指定的字符集解码指定的 byte 子数组，构造一个新的 String。</li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>str charAt(int index)</code>  返回指定索引处的字符</li>
<li><code>String concat(String str)</code>  将指定字符串str连接到此字符串的结尾，返回连接成功后的字符，因此需要接受才能有效果</li>
<li><code>boolean contains(CharSequence s)</code> 判断此字符串是否包含指定的char值序列，这里的 CharSequence是一个接口，可以直接使用它的子类作为参数(String,StringBuffer,StringBuild)</li>
<li><code>static String copyValueOf(char[] c)</code> 将字符数组变成字符串并且返回</li>
<li><code>static String copyValueOf(char[] c,int off,int count)</code> 将截取的字符数组变成字符串并且返回，off是开始截取的下标，count是截取的个数</li>
<li><code>boolean endWith(String s)</code>  判断字符串是否是以s结尾</li>
<li><code>boolean equals(Object o)</code>  用于比较</li>
<li><code>int indexOf(char c)</code> 返回字符c在字符串中第一次出现的索引</li>
<li><code>int indexOf(char c,int fromIndex)</code> 从指定索引处开始搜索，查找第一次出现的索引</li>
<li><code>int indexOf(String str)</code> 返回指定子字符串在此字符串中第一次出现处的索引。</li>
<li><code>int indexOf(String str,int fromIndex)</code> 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</li>
<li><code>boolean isEmpty()</code>  </li>
<li><code>int length()</code></li>
<li><code>boolean matches(String regex)</code> 是否匹配正则表达式</li>
<li><code>trim()</code>   返回字符串的副本，忽略前导空白和尾部空白。</li>
<li><code>String substring(int beginIndex)</code> 返回一个新的字符串，它是此字符串的一个子字符串。 </li>
<li><code>String substring(int beginIndex, int endIndex)</code>  返回一个新字符串，它是此字符串的一个子字符串。 </li>
<li><code>String toUpperCase()</code>  使用默认语言环境的规则将此 String 中的所有字符都转换为大写。 </li>
<li><code>String[] split(String regex)</code> 根据给定正则表达式的匹配拆分此字符串。</li>
<li><code>String[] split(String regex, int limit)</code> 根据匹配给定的正则表达式来拆分此字符串。</li>
<li><code>char[] toCharArray()</code> 将此字符串转换为一个新的字符数组。</li>
<li><code>byte[] getBytes(Charset charset)</code>  使用给定的 <code>charset</code> 将此 <code>String</code> 编码到 <code>byte</code> 序列，并将结果存储到新的 byte 数组 </li>
</ul>
</blockquote>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote>
<ul>
<li>上面的new String(byte[] bys,String charsetName)这个构造方法很重要，它可以改变字符串的编码集(和byte[] getBytes(Charset charset))配合着使用，下面我们来看一个例子,代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">      <span class="comment">/*</span></div><div class="line"> * InputStreamReader实现了将字节流FileInputStream转换为字符流，然后使用转换来的字节流创建高效流，从而实现高效的读写</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 编码集(我的eclipse编辑器默认的是utf-8</div><div class="line"> * 下面将中文字符串的编码集变为GBK写入a.txt文件,因为a.txt默认的是utf-8的因此这里在文件中显示的是乱码</div><div class="line"> * 然后我们读出来的还是GBK的，因为我们写入的是GBK编码集的，但是我的eclipse是utf-8的编码集，因此在控制台上输出的还是乱码</div><div class="line"> * new String(byte[] bys,String</div><div class="line"> * charsetName)使用这个构造方法将byte数组改变编码集并且转换为utf-8格式的，那么这次在控制台上输出的就不乱码了</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 将GBK格式的中文写入a.txt文件</span></div><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"src/a.txt"</span>);</div><div class="line">FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">String str = <span class="string">"中"</span>;</div><div class="line"><span class="keyword">byte</span>[] by = str.getBytes(<span class="string">"GBK"</span>); <span class="comment">// 将字符串改为GBK编码集</span></div><div class="line">fileOutputStream.write(by);</div><div class="line">fileOutputStream.close();</div><div class="line"></div><div class="line"><span class="comment">//从a.txt文件中读取中文</span></div><div class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</div><div class="line"><span class="keyword">while</span> ((len = fileInputStream.read(bys)) != -<span class="number">1</span>) &#123;</div><div class="line">	System.out.println(<span class="keyword">new</span> String(bys, <span class="string">"GBK"</span>));</div><div class="line">&#125;</div><div class="line">fileInputStream.close();</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><blockquote>
<p>线程安全的可变字符序列。一个类似于 <code>String</code> 的字符串缓冲区，但不能修改。当然最重要的一点就是线程安全，我们可以从它的源码中可以看出，对于一些操作(<code>append</code>,<code>insert</code>..)都是使用了线程控制块来实现同步，适合与多线程下的使用，源代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.append(String.valueOf(obj));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.append(str);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.delete(start, end);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@throws</span> StringIndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line"> * <span class="doctag">@since</span>      1.2</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.deleteCharAt(index);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h3><blockquote>
<ul>
<li><code>new StringBuffer(StringBuilder str)</code></li>
<li><code>new StringBuffer(String str)</code></li>
</ul>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>StringBuffer append(str)</code>将指定类型的str追加到此字符串的后面(<code>String,char,char[],int,double,float,long,StringBuffer,StringBuilder</code>)</li>
<li><code>StringBuffer insert(int offest,  str)</code> 将指定类型的str插入到此序列中,offest表示开始插入的位置的索引,类型有 String,char,char[],int,double,float,long,StringBuffer,StringBuilder</li>
<li><code>String delete(int fromIndex,int endIndex)</code>   移除此序列中的字符串并且返回新的缓冲字符串</li>
<li><code>StringBuffer reverse()</code>  反转字符串</li>
<li><code>String substring(int start)</code>  返回一个新的 String，它包含此字符序列当前所包含的字符子序列。</li>
<li><code>String substring(int start, int end)</code> 返回一个新的 String，它包含此序列当前所包含的字符子序列。</li>
<li><code>StringBuffer deleteCharAt(int index)</code> 移除此序列指定位置的 char。</li>
<li><code>int length()</code>  长度</li>
<li><code>String toString()</code> 返回此序列中数据的字符串表示形式。    </li>
</ul>
</blockquote>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><blockquote>
<p>建议优先采用该类，因为在大多数实现中，它比 <code>StringBuffer</code> 要快。但是这个类不是线程安全的，只适合单线程，如果使用多线程推荐使用<code>StringBuffer</code>,当然使用这个也行，不过需要自己实现同步</p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ul>
<li><code>new StringBuilder(String str)</code></li>
</ul>
</blockquote>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<p>这个类的常用方法和<code>StringBuffer</code>的一样，这里就不再一一列举了，参照上面的即可使用</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java字符串进阶&quot;&gt;&lt;a href=&quot;#Java字符串进阶&quot; class=&quot;headerlink&quot; title=&quot;Java字符串进阶&quot;&gt;&lt;/a&gt;Java字符串进阶&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java正则表达式</title>
    <link href="http://chenjiabing666.github.io/2017/06/16/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2017/06/16/Java正则表达式/</id>
    <published>2017-06-15T16:18:57.000Z</published>
    <updated>2017-06-15T16:23:45.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a>Java正则表达式</h1><blockquote>
<p><code>java.util.regex</code>是一个用正则表达式所订制的模式来对字符串进行匹配工作的类库包。它包括两个类：<code>Pattern</code>和<code>Matcher</code>。Pattern是一个正则表达式经编译后的表现模式。Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。 首先一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，然后一个Matcher实例在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。</p>
</blockquote>
<h2 id="正则表达式的构造摘要"><a href="#正则表达式的构造摘要" class="headerlink" title="正则表达式的构造摘要"></a>正则表达式的构造摘要</h2><blockquote>
<p>详细摘要请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/regex/Pattern.html" target="_blank" rel="external">jdk中文文档</a>,下面我只是列出一些经常使用的</p>
</blockquote>
<table>
<thead>
<tr>
<th>构造</th>
<th>匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>任何字符（与行结束符可能匹配也可能不匹配）</td>
</tr>
<tr>
<td>\d</td>
<td>数字：[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字： [^0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>空白字符：[ \t\n\x0B\f\r]</td>
</tr>
<tr>
<td>\S</td>
<td>非空白字符：[^\s]</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符：[a-zA-Z_0-9]</td>
</tr>
<tr>
<td>\W</td>
<td>非单词字符：[^\w]</td>
</tr>
<tr>
<td>[abc]</td>
<td>a、b 或 c（简单类）</td>
</tr>
<tr>
<td>[^abc]</td>
<td>任何字符，除了 a、b 或 c（否定）</td>
</tr>
<tr>
<td>[a-zA-Z]</td>
<td>a 到 z 或 A 到 Z，两头的字母包括在内（范围）</td>
</tr>
<tr>
<td>^</td>
<td>行的开头</td>
</tr>
<tr>
<td>$</td>
<td>行的结尾</td>
</tr>
<tr>
<td>X?</td>
<td>X，一次或一次也没有</td>
</tr>
<tr>
<td>X*</td>
<td>X，零次或多次</td>
</tr>
<tr>
<td>X+</td>
<td>X，一次或多次</td>
</tr>
<tr>
<td>X{n}</td>
<td>X，恰好 n 次</td>
</tr>
<tr>
<td>X{n,}</td>
<td>X，至少 n 次</td>
</tr>
<tr>
<td>X{n,m}</td>
<td>X，至少 n 次，但是不超过 m 次</td>
</tr>
</tbody>
</table>
<h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><blockquote>
<p>正则表达式的编译表示形式,学过<code>python</code>的都知道这个和python的正则表达式有异曲同工之妙。 但是它的构造方法是私有的，因此不能直接创建对象，但是可以调用它的静态方法返回一个对象，下面会详细介绍</p>
</blockquote>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote>
<ul>
<li><code>Pattern</code>类用于创建一个正则表达式,也可以说创建一个匹配模式,它的构造方法是私有的,不可以直接创建,但可以通过<code>Pattern.complie(String regex)</code>简单工厂方法创建一个正则表达式，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//采用的complie(String regex)</span></div><div class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line"></div><div class="line"><span class="comment">//采用的是complie(String regex,int flag)其中flag表示标志，下面的标志表示忽略字母大小写，详细的字段请看文档</span></div><div class="line">Pattern pattern=Pattern.compile(<span class="string">"(CHEN)(\\D*)(\\d*)"</span>,Pattern.CASE_INSENSITIVE);</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>Pattern compile(String regex)</code>  用于创建Pattern对象</li>
<li><code>Pattern compile(String regex,int flags)</code>  用于创建Pattern对象，并且指定了标志(比如忽略字母大小写)</li>
<li><code>int flags()</code>  返回此模式的匹配标志</li>
<li><p><code>String pattern()</code>   返回在其中编译过此模式的正则表达式。</p>
</li>
<li><p><code>String[] split(CharSequence input)</code> 根据此模式的正则表达式将输入的字符串拆分成String数组,默认的都是全部拆分开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//给出正则表达式用于匹配数字(0-9)</span></div><div class="line">   Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">   String str = <span class="string">"我是陈加兵456郑元梅34擦市场的逻辑啊"</span>;</div><div class="line">String[] splits = pattern.split(str, <span class="number">2</span>);   <span class="comment">//结果:[我是陈加兵,郑元梅34擦市场的逻辑啊]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>String[] split(CharSequence input,int limit)</code>  将字符串按照正则表达式表示的内容进行分组，如果limit&gt;0那么就分成limit个组，如果limit&lt;0就按照默认全部分开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出正则表达式用于匹配数字(0-9)</span></div><div class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">String str = <span class="string">"我是陈加兵456郑元梅34擦市场的逻辑啊"</span>;</div><div class="line">String[] splits = pattern.split(str, <span class="number">2</span>);   <span class="comment">//结果:[我是陈加兵,郑元梅34擦市场的逻辑啊]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Pattern.matches(String regex,CharSequence input)</code>是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"2223"</span>);<span class="comment">//返回true </span></div><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"2223aa"</span>);<span class="comment">//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到 </span></div><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"22bb23"</span>);<span class="comment">//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Matcher matcher(CharSequence input)</code>  创建匹配给定输入与此模式的匹配器,现在只是先了解以下，下面会详细解释Matcher这个类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Pattern p=Pattern.compile(<span class="string">"\\d+"</span>); </div><div class="line">Matcher m=p.matcher(<span class="string">"22bb23"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h2><blockquote>
<p><code>Pattern</code>类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作.Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持.<br>Matcher类和Pattern类一样它的构造方法同样是私有的，因此不能直接构造对象，但是上面我们说过Pattern类中有一个方法可以返回一个Matcher对象(<code>matcher(CharSequence input)</code>)</p>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>boolean mathces()</code>  尝试将整个区域与模式匹配(针对的是整个字符串，如果整个字符串未完全匹配，那么返回false,如果完全匹配那么返回true) </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"I am hreo 1234"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">      <span class="comment">//并没有完全匹配，因此返回false，如果str="123445"，那么就会返回true</span></div><div class="line">System.out.println(matcher.matches());</div></pre></td></tr></table></figure>
</li>
<li><p><code>boolean lookingAt()</code> 尝试从给定字符串的开头开始匹配，如果有子字符串匹配成功，那么返回true(针对的不是整个字符串，而是从开头开始，如果开头有一段字符串匹配成功，那么返回true)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"1234 I am a hero"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line"><span class="comment">//开头的1234匹配到了，因此返回true，如果str="I am a hero  1234"将返回false</span></div><div class="line">System.out.println(matcher.lookingAt());</div></pre></td></tr></table></figure>
</li>
<li><p><code>int start()</code>    匹配到的字符串的第一个元素的索引,如果没有匹配到调用此方法将会报错</p>
</li>
<li><code>int end()</code>     匹配到的字符串的最后一个元素的索引,如果没有匹配到调用此方法将会报错</li>
<li><p><code>String group()</code>  返回的是匹配到的字符串,如果没有匹配到调用此方法将会报错</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"1234 I am a hero 33455"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line"><span class="keyword">if</span>(matcher.lookingAt())</div><div class="line">&#123;</div><div class="line">	System.out.println(<span class="string">"开始匹配到下标为"</span>+matcher.start());  <span class="comment">//0</span></div><div class="line">	System.out.println(<span class="string">"匹配结束的下标为"</span>+matcher.end());    <span class="comment">//4</span></div><div class="line">          System.out.println(<span class="string">"匹配的字符串为"</span>+matcher.group());  <span class="comment">//1234</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>boolean find()</code>  查找整个字符串，如果在任意位置有一段字符串能够匹配成功，那么返回true(任意位置),然后如果再次调用这个查找的话，那么就从上次查找到的末尾开始匹配，也就是说查找的是下一个子序列了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">String str=<span class="string">"1234 I am a hero 6666 chenjiabing8888"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line"><span class="keyword">while</span>(matcher.find())  <span class="comment">//如果还有匹配的字符序列</span></div><div class="line">&#123;</div><div class="line">	System.out.println(<span class="string">"开始匹配到下标为"</span>+matcher.start()); </div><div class="line">	System.out.println(<span class="string">"匹配结束的下标为"</span>+matcher.end());   </div><div class="line">	System.out.println(<span class="string">"匹配的字符串为"</span>+matcher.group());  </div><div class="line">&#125;  </div><div class="line">      </div><div class="line">  <span class="comment">/*结果如下：</span></div><div class="line">   * </div><div class="line">  开始匹配到下标为0</div><div class="line">  匹配结束的下标为4</div><div class="line">  匹配的字符串为1234</div><div class="line">  开始匹配到下标为17</div><div class="line">  匹配结束的下标为21</div><div class="line">  匹配的字符串为6666</div><div class="line">  开始匹配到下标为33</div><div class="line">  匹配结束的下标为37</div><div class="line">  匹配的字符串为8888</div><div class="line">  */</div><div class="line">  </div><div class="line">  <span class="comment">/*</span></div><div class="line">   * 从上面返回的结果可以知道，find()可以匹配多次只要这个字符串还有可以匹配，</div><div class="line">   * 并且每次的匹配字段的开始下标都是上一次匹配的结束字母的下一个下标</div><div class="line">   */</div></pre></td></tr></table></figure>
</li>
<li><p><code>boolean find(int start)</code>  从指定的索引start位置开始匹配，这个用于重置find()匹配器，因为直接使用find()它的每次开始的索引都是不一样的</p>
</li>
<li><p><code>String group(int num)</code> 返回指定分组匹配到的字符串,group(0)表示匹配到的整个字符串,group(1) 表示匹配到的第一个字符(即是第一个括号中匹配的模式)</p>
</li>
<li><code>int groupCount()</code>  返回匹配到的分组个数</li>
<li><code>String replaceAll(String str)</code>  将所有于模式相匹配的 字符串全部替换程指定的字符串str,返回的是替换后的文本</li>
<li><code>String replaceFirst(String str)</code>  只将第一次匹配到的字符串替换成指定的字符串str，返回的时替换后的文本</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">String str=<span class="string">"chenjiabing2344cal3445"</span>;</div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">str=matcher.replaceFirst(<span class="string">"陈加兵"</span>);   </div><div class="line">System.out.println(str);   <span class="comment">//输出:chenjiabing陈加兵cal3445</span></div><div class="line">      </div><div class="line">      <span class="comment">/*</span></div><div class="line">       * str=matcher.replaceAll("陈加兵");</div><div class="line">       * System.out.println(str)    //输出:chenjiabing陈加兵cal陈加兵</div><div class="line">       */</div></pre></td></tr></table></figure>
<h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h2><blockquote>
<p>捕获组可以通过从左到右计算其开括号来编号，编号是从<code>1</code> 开始的。例如，在表达式 <code>((A)(B(C)))</code>中，存在四个这样的组：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">((A)(B(C)))</div><div class="line">(A)</div><div class="line">(B(C))</div><div class="line">(C)</div></pre></td></tr></table></figure></p>
<p>总之在正则表达式中在括号中的就是一个分组,下面用一个实例来理解一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"(\\D*)(\\d+)\\s(\\D+)"</span>);</div><div class="line">Matcher matcher=pattern.matcher(<span class="string">"chenjiabingshizuibangde6666 chenjiabign"</span>);</div><div class="line"><span class="keyword">if</span>(matcher.find())</div><div class="line">&#123;</div><div class="line">	System.out.println(<span class="string">"总共匹配到了"</span>+matcher.groupCount()+<span class="string">"个分组"</span>);</div><div class="line">	System.out.println(<span class="string">"匹配到整个字符串为"</span>+matcher.group(<span class="number">0</span>));</div><div class="line">	System.out.println(<span class="string">"匹配到的第一个字符串为"</span>+matcher.group(<span class="number">1</span>));</div><div class="line">	System.out.println(<span class="string">"匹配到的第二个字符串为"</span>+matcher.group(<span class="number">2</span>));</div><div class="line">	System.out.println(<span class="string">"匹配到的第三个字符串为"</span>+matcher.group(<span class="number">3</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h2><blockquote>
<p>贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配<br>一般写<code>python</code>爬虫的时候使用的都是非贪婪模式来匹配<br>使用了贪婪模式后会尽可能匹配更多的字符串，即是到了正则表达式定的末尾但是还是会继续向后匹配，看看是否还能匹配，非贪婪模式则是相反，到了正则表达式定义的结束字符就直接停止匹配了<br>贪婪模式: <code>.*</code> , <code>.+</code><br>非贪婪模式: <code>.*?</code>  , <code>.+?</code></p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">//使用了贪婪模式,因此当匹配到第一个&lt;/div&gt;的时候还要向后面匹配看看是否还能匹配到，由于后面还有&lt;/div&gt;结尾的，因此还是能够匹配的，因此匹配到的是:陈加兵&lt;/div&gt;&lt;div&gt;郑元梅</span></div><div class="line">      Pattern pattern=Pattern.compile(<span class="string">"&lt;div&gt;(.*)&lt;/div&gt;"</span>);   </div><div class="line"></div><div class="line"><span class="comment">//使用了非贪婪模式，因此当匹配到第一个&lt;/div&gt;的时候就不向后面匹配了，直接返回了，因此匹配到的是:陈加兵</span></div><div class="line">Pattern pattern1=Pattern.compile(<span class="string">"&lt;div&gt;(.*?)&lt;/div&gt;"</span>);   </div><div class="line">String str=<span class="string">"&lt;div&gt;陈加兵&lt;/div&gt;&lt;div&gt;郑元梅&lt;/div&gt;"</span>;</div><div class="line">Matcher matcher=pattern1.matcher(str);</div><div class="line"><span class="keyword">if</span>(matcher.find())</div><div class="line">&#123;</div><div class="line">	System.out.println(matcher.groupCount());  <span class="comment">//1</span></div><div class="line">	System.out.println(matcher.group(<span class="number">1</span>));  <span class="comment">//输出匹配到的字符串,此时输出的是:陈加兵,如果使用贪婪模式输出的是：陈加兵&lt;/div&gt;&lt;div&gt;郑元梅</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="http://www.cnblogs.com/ggjucheng/p/3423731.html" target="_blank" rel="external">http://www.cnblogs.com/ggjucheng/p/3423731.html</a></li>
<li><a href="http://www.runoob.com/java/java-regular-expressions.html" target="_blank" rel="external">http://www.runoob.com/java/java-regular-expressions.html</a></li>
<li><a href="http://blog.csdn.net/lxcnn/article/details/4756030" target="_blank" rel="external">http://blog.csdn.net/lxcnn/article/details/4756030</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java正则表达式&quot;&gt;&lt;a href=&quot;#Java正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Java正则表达式&quot;&gt;&lt;/a&gt;Java正则表达式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;java.util.regex&lt;/code&gt;是
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
