<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-05-21T10:27:55.637Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>购物车模块</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/购物车模块/</id>
    <published>2018-05-21T10:27:35.000Z</published>
    <updated>2018-05-21T10:27:55.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h1><p>##　建表</p>
<ul>
<li>创建购物车的表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_cart(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,　　//主键</div><div class="line">                   	goods_id <span class="built_in">varchar</span>(<span class="number">200</span>),　　　//商品的ｉｄ</div><div class="line">                    uid <span class="built_in">int</span>,　　				//用户的<span class="keyword">id</span></div><div class="line">                    <span class="keyword">num</span> <span class="built_in">int</span>, 				//商品的数量</div><div class="line">                    created_user <span class="built_in">varchar</span>(<span class="number">50</span>),  </div><div class="line">                    created_time datetime,</div><div class="line">                    modified_user <span class="built_in">varchar</span>(<span class="number">50</span>),</div><div class="line">                    modified_time datetime</div><div class="line">                   )<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</div></pre></td></tr></table></figure>
<h2 id="显示购物车"><a href="#显示购物车" class="headerlink" title="显示购物车"></a>显示购物车</h2><h3 id="定义值对象-XXXVo"><a href="#定义值对象-XXXVo" class="headerlink" title="定义值对象(XXXVo)"></a>定义值对象(XXXVo)</h3><ul>
<li>当我们需要查询多张表的数据的时候，我们此时仅仅使用一个实体类来接收肯定是不行的，我们需要定义一个值对象来接收查询的多张表数据</li>
<li>实现多表连接查询的结果接收</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 购物车的值对象</div><div class="line"> * 用于接收多表连接查询的结果</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8904622535687816912L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;    <span class="comment">//主键 购物车表中的主键</span></div><div class="line">	<span class="keyword">private</span> String goodsId;  <span class="comment">//商品的id</span></div><div class="line">	<span class="keyword">private</span> Integer uid;  <span class="comment">//用户id</span></div><div class="line">	<span class="keyword">private</span> String image;  <span class="comment">//图片地址</span></div><div class="line">	<span class="keyword">private</span> String title;  <span class="comment">//商品标题</span></div><div class="line">	<span class="keyword">private</span> Integer price; <span class="comment">//商品价格</span></div><div class="line">	<span class="keyword">private</span> Integer num;  <span class="comment">//数量</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGoodsId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsId</span><span class="params">(String goodsId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.goodsId = goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.uid = uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.title = title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CartVo [id="</span> + id + <span class="string">", goodsId="</span> + goodsId + <span class="string">", uid="</span> + uid</div><div class="line">				+ <span class="string">", image="</span> + image + <span class="string">", title="</span> + title + <span class="string">", price="</span> + price</div><div class="line">				+ <span class="string">", num="</span> + num + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><h4 id="CartMapper-java"><a href="#CartMapper-java" class="headerlink" title="CartMapper.java"></a><code>CartMapper.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据uid查询购物车中的所有商品</div><div class="line"> * <span class="doctag">@param</span> uid  用户id</div><div class="line"> * <span class="doctag">@return</span>   查询的结果</div><div class="line"> */</div><div class="line"><span class="function">List&lt;CartVo&gt; <span class="title">selectCartByUid</span><span class="params">(Integer uid)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="CartMapper-xml"><a href="#CartMapper-xml" class="headerlink" title="CartMapper.xml"></a><code>CartMapper.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">		List&lt;CartVo&gt; selectCartByUid(Integer uid);</div><div class="line">	 --&gt;</div><div class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCartByUid"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.CartVo"</span>&gt;</span></div><div class="line">	 		select </div><div class="line">	 		c.id as id,</div><div class="line">	 		c.uid as uid,</div><div class="line">	 		goods_id as goodsId,</div><div class="line">	 		image,</div><div class="line">	 		title,</div><div class="line">	 		c.num as num,</div><div class="line">	 		price</div><div class="line">	 		from t_cart c,t_goods g</div><div class="line">	 		where c.uid=#&#123;uid&#125; and c.goods_id=g.id</div><div class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="批量删除购物车中的商品"><a href="#批量删除购物车中的商品" class="headerlink" title="批量删除购物车中的商品"></a>批量删除购物车中的商品</h2><h3 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h3><ul>
<li>根据传入的id批量删除商品，用sql语句如下：<code>delete from t_cart where id in (1,2,3,4,4)</code>,因此参数应该是一个数组</li>
</ul>
<h3 id="接口中定义方法"><a href="#接口中定义方法" class="headerlink" title="接口中定义方法"></a>接口中定义方法</h3><ul>
<li>数组必须使用<code>@Param()</code>来指定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据id删除购物车中的商品</div><div class="line"> * <span class="doctag">@param</span> ids</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCartById</span><span class="params">(@Param(<span class="string">"ids"</span>)</span>Integer[] ids)</span>;</div></pre></td></tr></table></figure>
<h3 id="配置文件中配置"><a href="#配置文件中配置" class="headerlink" title="配置文件中配置"></a>配置文件中配置</h3><ul>
<li>使用<code>&lt;forEach&gt;</code>遍历数组中的元素</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"> 	void deleteCartById(@Param("ids")Integer[] ids);</div><div class="line"> 	批量删除</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCartById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">  		delete from t_cart </div><div class="line">  		where</div><div class="line">  		id in</div><div class="line">  		<span class="comment">&lt;!-- </span></div><div class="line">  			遍历数组ids</div><div class="line">  			collection:需要遍历的数组</div><div class="line">  			item: 数组中的每一个值</div><div class="line">  			open ： 开始的内容</div><div class="line">  			close: 结束的内容</div><div class="line">  			separator ：每个元素的分割符</div><div class="line">  			最后拼接的就是  (id,id,id,id,id)</div><div class="line">  		 --&gt;</div><div class="line">  		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">  			#&#123;id&#125;</div><div class="line">  		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="控制器层"><a href="#控制器层" class="headerlink" title="控制器层"></a>控制器层</h3><ul>
<li>使用一个数组接收传递过来的<code>id</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 批量删除商品</div><div class="line"> * <span class="doctag">@param</span> Itemids  数组，其中全是id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/moveCartBatch.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">moveCartBatch</span><span class="params">(Integer[] Itemids)</span></span>&#123;</div><div class="line">	System.out.println(Itemids);</div><div class="line">	cartService.moveCartById(Itemids);</div><div class="line">	<span class="keyword">return</span> <span class="string">"redirect:../cart/showCart.do"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MySQL存储过程"><a href="#MySQL存储过程" class="headerlink" title="MySQL存储过程"></a>MySQL存储过程</h2><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delimiter $$</div><div class="line">	<span class="keyword">create</span> <span class="keyword">procedure</span> deleteCart(pid <span class="built_in">int</span>)</div><div class="line">	<span class="keyword">begin</span></div><div class="line">		<span class="keyword">delete</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> <span class="keyword">id</span>=pid;</div><div class="line">	<span class="keyword">end</span> $$</div></pre></td></tr></table></figure>
<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名称</div><div class="line">比如： <span class="keyword">drop</span> <span class="keyword">procedure</span> deleteCart;</div></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">call</span> deleteCart(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<h2 id="使用存储过程删除一行数据"><a href="#使用存储过程删除一行数据" class="headerlink" title="使用存储过程删除一行数据"></a>使用存储过程删除一行数据</h2><ul>
<li>在<code>CartMapper.java</code>中定义方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 调用存储过程 deleteCart(pid int)删除数据</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCartByIdProcdure</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>CartMapper.xml</code>中定义节点</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	  	void deleteCartByIdProcdure(Integer id);</div><div class="line">	  	使用存储过程删除</div><div class="line">	   --&gt;</div><div class="line">	   </div><div class="line">	   	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCartByIdProcdure"</span>&gt;</span></div><div class="line">	   		&#123;call deleteCart(#&#123;id&#125;)&#125;</div><div class="line">	   	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<p>##　修改购物车的数量</p>
<h3 id="持久层-2"><a href="#持久层-2" class="headerlink" title="持久层"></a>持久层</h3><h4 id="创建存储过程-1"><a href="#创建存储过程-1" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delimiter $$</div><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> updateNum(pid <span class="built_in">int</span>,pnum <span class="built_in">int</span>)</div><div class="line"><span class="keyword">begin</span></div><div class="line">	<span class="keyword">update</span> t_cart <span class="keyword">set</span> <span class="keyword">num</span>=pnum <span class="keyword">where</span> <span class="keyword">id</span>=pid;</div><div class="line"><span class="keyword">end</span> $$</div></pre></td></tr></table></figure>
<h4 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h4><h4 id="写配置文件"><a href="#写配置文件" class="headerlink" title="写配置文件"></a>写配置文件</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;购物车模块&quot;&gt;&lt;a href=&quot;#购物车模块&quot; class=&quot;headerlink&quot; title=&quot;购物车模块&quot;&gt;&lt;/a&gt;购物车模块&lt;/h1&gt;&lt;p&gt;##　建表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建购物车的表&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>用户管理模块之个人信息修改</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E4%B9%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E4%BF%AE%E6%94%B9/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/用户管理模块之个人信息修改/</id>
    <published>2018-05-21T10:26:45.000Z</published>
    <updated>2018-05-21T10:27:05.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理模块之个人信息修改"><a href="#用户管理模块之个人信息修改" class="headerlink" title="用户管理模块之个人信息修改"></a>用户管理模块之个人信息修改</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol>
<li>修改用户名</li>
<li>修改性别</li>
<li>修改邮箱</li>
<li>修改密码</li>
<li>修改头像</li>
</ol>
<h2 id="在UserMapper中定义方法和UserMapper-xml中定义"><a href="#在UserMapper中定义方法和UserMapper-xml中定义" class="headerlink" title="在UserMapper中定义方法和UserMapper.xml中定义"></a>在<code>UserMapper</code>中定义方法和<code>UserMapper.xml</code>中定义</h2><h3 id="定义接口方法"><a href="#定义接口方法" class="headerlink" title="定义接口方法"></a>定义接口方法</h3><ul>
<li>定义接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新用户信息</div><div class="line"> * <span class="doctag">@param</span> user  User对象</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="定义update节点"><a href="#定义update节点" class="headerlink" title="定义update节点"></a>定义<code>update</code>节点</h3><ul>
<li>使用动态<code>sql</code>定义一个通用的修改方法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">  	void update(User user);</div><div class="line">  	修改用户信息</div><div class="line">   --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line">  	update t_user set</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">  		username=#&#123;username&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">  		password=#&#123;password&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  		</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></div><div class="line">  		email=#&#123;email&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone!=null"</span>&gt;</span></div><div class="line">  		phone=#&#123;phone&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"image!=null"</span>&gt;</span></div><div class="line">  		image=#&#123;image&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender!=null"</span>&gt;</span></div><div class="line">  		gender=#&#123;gender&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	modified_user=#&#123;modifiedUser&#125;,</div><div class="line">  	modified_time=#&#123;modifiedTime&#125;</div><div class="line">where id=#&#123;id&#125;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testupdate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-dao.xml"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper = ac.getBean(<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line"></div><div class="line">	User user=<span class="keyword">new</span> User();</div><div class="line">	user.setId(<span class="number">5</span>);;</div><div class="line">	user.setUsername(<span class="string">"chenjiabing666"</span>);</div><div class="line">	user.setPassword(<span class="string">"chenjiabing"</span>);</div><div class="line">	user.setGender(<span class="number">0</span>);</div><div class="line">	user.setModifiedUser(<span class="string">"陈加兵"</span>);</div><div class="line">	user.setModifiedTime(<span class="keyword">new</span> Date());</div><div class="line">	userMapper.update(user);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在IUserService接口中定义方法，在UserServiceImpl中定义实现方法"><a href="#在IUserService接口中定义方法，在UserServiceImpl中定义实现方法" class="headerlink" title="在IUserService接口中定义方法，在UserServiceImpl中定义实现方法"></a>在<code>IUserService</code>接口中定义方法，在<code>UserServiceImpl</code>中定义实现方法</h2><h3 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h3><h4 id="修改用户名，邮箱，电话，性别"><a href="#修改用户名，邮箱，电话，性别" class="headerlink" title="修改用户名，邮箱，电话，性别"></a>修改用户名，邮箱，电话，性别</h4><ol>
<li>根据当前登录的用户<code>id</code>查询查询用户信息并且返回对象<code>u1</code>,判断此时的<code>u1</code>是否为<code>null</code>，如果<code>为null</code>表示当前正在登录的用户已经从数据库删除了，那么此次修改没有意义，抛出用户不存在的异常，如果<code>不为null</code>，表示此次的用户仍然存在，那么    这个<code>id</code>是可用的，设置在<code>user</code>对象中，便于后面执行<code>update(User user)</code>方法调用</li>
<li>如果<code>u1不为null</code>，根据用户输入的用户名查询用户信息，返回<code>u2</code>，如果这个<code>u2不为null</code>并且其中的用户名和当前正在登录的用户名不相同，那么说明这个用户名已经在数据库中存在了，抛出用户名已经存在的异常，反之说明这个修改过后的用户名是可用的，因此设置在<code>user</code>对象中，便于后面的修改调用</li>
<li>如果前面的内容都能正常进行，那么此时就可以更新了</li>
</ol>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ol>
<li>根据<code>id</code>查询用户信息，返回<code>user</code></li>
<li>如果<code>user=null</code>,抛出用户不存在的异常</li>
<li>如果<code>user！=null</code>，比较<code>user中的密码</code>和<code>用户输入的旧密码oldPassword</code>是否相同</li>
<li>如果<code>密码不相同</code>，抛出密码不匹配的异常</li>
<li>如果<code>密码相同</code>，表示用户输入的旧密码是正确的，那么更新密码即可 </li>
</ol>
<h3 id="定义接口方法-1"><a href="#定义接口方法-1" class="headerlink" title="定义接口方法"></a>定义接口方法</h3><ul>
<li>在<code>IUserService</code>中定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改用户信息，不包括修改密码</div><div class="line">	 * <span class="doctag">@param</span> id  当前正在登录的用户id</div><div class="line">	 * <span class="doctag">@param</span> username 用户修改的用户名</div><div class="line">	 * <span class="doctag">@param</span> gender  用户修改的性别</div><div class="line">	 * <span class="doctag">@param</span> email   用户修改的邮箱</div><div class="line">	 * <span class="doctag">@param</span> phone  用户修改的电话</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException   用户名不存在的异常</div><div class="line">	 * <span class="doctag">@throws</span> UserNameAlreadyExistException  用户名已经存在的异常</div><div class="line">	 */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Integer id,String username,Integer gender,String email,String phone)</span> <span class="keyword">throws</span> UserNotFoundException, UserNameAlreadyExistException</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改密码 </div><div class="line">	 * <span class="doctag">@param</span> id  正在登录的用户id</div><div class="line">	 * <span class="doctag">@param</span> oldPassword  旧密码</div><div class="line">	 * <span class="doctag">@param</span> newPassword  新密码</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException 当前登录的用户不存在</div><div class="line">	 * <span class="doctag">@throws</span> PassWordNotMatchException   //密码不匹配</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(Integer id,String oldPassword,String newPassword)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException</span>;</div></pre></td></tr></table></figure>
<h3 id="定义实现方法"><a href="#定义实现方法" class="headerlink" title="定义实现方法"></a>定义实现方法</h3><ul>
<li>在<code>UserServiceImpl</code>中定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 1. 根据id查询用户，返回user对象,确认当前登录的用户是否存在</div><div class="line"> * 2. 如果user=null,抛出用户不存在的异常</div><div class="line"> * 3. 如果user！=null,表示用户存在</div><div class="line"> * 4. 判断用户修改的用户名是否已经存在</div><div class="line"> * 5. 如果修改的用户名已经存在并且不是当前用户名的前提下，那么抛出用户名已经存在的异常，</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Integer id, String username, Integer gender,</span></span></div><div class="line">		String email, String phone) <span class="keyword">throws</span> UserNotFoundException, UserNameAlreadyExistException &#123;</div><div class="line">	User user=<span class="keyword">new</span> User();  <span class="comment">//封装修改的内容</span></div><div class="line">	</div><div class="line">	User u1=userMapper.seletUserById(id);  <span class="comment">//根据id查询用户信息，返回user对象</span></div><div class="line">	</div><div class="line">	<span class="comment">//如果此时登录的用户不存在，说明当前已经登录的用户被人删除了</span></div><div class="line">	<span class="keyword">if</span> (u1==<span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"你当前登录的用户名已经被删除"</span>);  <span class="comment">//抛出用户不存在的异常，已经从数据库中删除了</span></div><div class="line">	&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果当前登录的用户仍然存在数据库中</span></div><div class="line">		user.setId(id);  <span class="comment">//此时的用户id是可用的，因此存入user对象</span></div><div class="line">		User u2=userMapper.selectUserByUserName(username);  <span class="comment">//根据用户修改的用户名查询数据库返回user对象</span></div><div class="line">		<span class="comment">//如果此时的用户名已经在数据库中存在了，并且不是当前登录的用户名</span></div><div class="line">		<span class="keyword">if</span> (u2!=<span class="keyword">null</span>&amp;&amp;!u2.getUsername().equals(u1.getUsername())) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNameAlreadyExistException(<span class="string">"你输入的用户名已经存在"</span>);  <span class="comment">//抛出用户名已经存在的异常</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果修改过后的用户名在数据库中不存在</span></div><div class="line">			user.setUsername(username);  <span class="comment">//说明此时的用户名可用，因此存入user对象中，便于后面的更新</span></div><div class="line">			user.setEmail(email);   <span class="comment">//设置邮箱</span></div><div class="line">			user.setPhone(phone);   <span class="comment">//设置电话号码</span></div><div class="line">			user.setGender(gender);  <span class="comment">//设置性别</span></div><div class="line">			user.setModifiedUser(u1.getUsername());  <span class="comment">//设置修改人的姓名</span></div><div class="line">			user.setModifiedTime(<span class="keyword">new</span> Date());  <span class="comment">//设置修改的时间</span></div><div class="line">			userMapper.update(user);   <span class="comment">//此时用户信息</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 修改密码</div><div class="line"> * 1. 根据id查询用户信息，返回user</div><div class="line"> * 2. 如果user=null,抛出用户不存在的异常</div><div class="line"> * 3. 如果user！=null，比较user中的密码和用户输入的旧密码oldPassword是否相同</div><div class="line"> * 4. 如果密码不相同，抛出密码不匹配的异常</div><div class="line"> * 5. 如果密码相同，表示用户输入的旧密码是正确的，那么更新密码即可 </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">		String newPassword) <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException &#123;</div><div class="line">	User user=userMapper.seletUserById(id);  <span class="comment">//根据id查询，返回user对象</span></div><div class="line">	<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;  <span class="comment">//如果用户不存在</span></div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"当前登录的用户不存在"</span>);  <span class="comment">//抛出用户不存在的异常</span></div><div class="line">	&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果当前登录的用户存在</span></div><div class="line">		<span class="keyword">if</span> (!user.getPassword().equals(oldPassword)) &#123; <span class="comment">//如果返回的user对象中的密码和用户输入的旧密码不匹配</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"输入的旧密码不匹配"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果输出的旧密码正确</span></div><div class="line">			User u1=<span class="keyword">new</span> User();   <span class="comment">//创建User对象，封装修改所需的参数</span></div><div class="line">			u1.setPassword(newPassword);  <span class="comment">//封装新密码</span></div><div class="line">			u1.setId(id);  <span class="comment">//封装id</span></div><div class="line">			userMapper.update(u1);  <span class="comment">//调用修改的方法</span></div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUserService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件，测试的业务层，因此需要spring-dao.xml和spring-service.xml配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line">	</div><div class="line">	Integer id=<span class="number">5</span>;</div><div class="line">	String username=<span class="string">"zhengyuanmei"</span>;</div><div class="line">	Integer gender=<span class="number">0</span>;</div><div class="line">	String email=<span class="string">"chenjiabing@tedu.com"</span>;</div><div class="line">	String phone=<span class="string">"1381815155"</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//调用方法</span></div><div class="line">		userService.updateUser(id, username, gender, email, phone);</div><div class="line">		System.out.println(<span class="string">"更新成功"</span>);</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdatePasswordService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件，测试的业务层，因此需要spring-dao.xml和spring-service.xml配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line">	</div><div class="line">	Integer id=<span class="number">5</span>;</div><div class="line">	String oldPassword=<span class="string">"chenjiabing"</span>;</div><div class="line">	String newPassword=<span class="string">"5268266"</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		userService.updatePassword(id, oldPassword, newPassword);</div><div class="line">		System.out.println(<span class="string">"密码修改成功"</span>);</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="控制器出层UserController"><a href="#控制器出层UserController" class="headerlink" title="控制器出层UserController"></a>控制器出层<code>UserController</code></h2><h3 id="功能和分析"><a href="#功能和分析" class="headerlink" title="功能和分析"></a>功能和分析</h3><h4 id="修改个人信息-不包括修改密码和头像"><a href="#修改个人信息-不包括修改密码和头像" class="headerlink" title="修改个人信息(不包括修改密码和头像)"></a>修改个人信息(不包括修改密码和头像)</h4><ul>
<li>修改个人信息(不包括修改密码和头像)<ul>
<li><code>/user/updateUser.do</code></li>
<li>请求参数：<code>username</code>，<code>email</code>，<code>phone</code>，<code>gender</code>，<code>id</code></li>
<li>请求方式：<code>POST</code></li>
<li>响应方式：<code>@ResponseBody</code></li>
</ul>
</li>
<li>修改成功后，我们的<code>session</code>中仍然保存着未修改的<code>user</code>对象信息，因此我们在修改成功后需要重新设置<code>session</code>中的<code>user</code>对象。我们只需要在<code>ajax</code>异步请求处理的<code>controller</code>方法中重新设置即可</li>
</ul>
<h4 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h4><ul>
<li><p>修改密码</p>
<ul>
<li><code>/user/updatePassword.do</code></li>
<li>请求参数：<code>id</code>，<code>oldPassword</code>，<code>newPassword</code></li>
<li>请求方式： <code>POST</code></li>
<li>响应方式：<code>@ResponseBody</code></li>
<li>密码修改成功后，我们需要让用户重新登录，因此我们需要<code>清除session</code>，因为我们设置了<code>登录验证</code>的<code>拦截器</code>，只要访问有关<code>个人信息</code>的页面，我们都会先拦截验证是否登录</li>
</ul>
<p>​</p>
<p>​</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="在cn-tedu-store-controller中定义基类BaseController"><a href="#在cn-tedu-store-controller中定义基类BaseController" class="headerlink" title="在cn.tedu.store.controller中定义基类BaseController"></a>在<code>cn.tedu.store.controller</code>中定义基类<code>BaseController</code></h4><ul>
<li>我们的<code>id</code>是根据<code>session</code>中存储的<code>user</code>对象获取的，但是如果此时的登录超时，那么<code>session</code>会被自动清除，此时的<code>user</code>将获取不到，因此我们需要判断获取的<code>User</code>对象时候为空，我们可以设计一个<code>BaseController</code>的类，其中定义这个方法，这个方法获取在后续的其他控制器的处理都需要这个方法，因此我们可以在基类中定义这个通用的方法，如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 所有Controller类中父类，如果想用用到里面的方法，可以继承这个类即可</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取session中的user对象，返回其中的id值</div><div class="line">	 * <span class="doctag">@param</span> session  HttpSession对象</div><div class="line">	 * <span class="doctag">@return</span>  返回id</div><div class="line">	 * <span class="doctag">@throws</span> Exception  登录超时的异常，说明此时的session已经不存在了</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		User user=(User) session.getAttribute(<span class="string">"user"</span>);</div><div class="line">		<span class="keyword">if</span> (user!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> user.getId();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"登录超时间，请重新登录..."</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在UserController中定义方法"><a href="#在UserController中定义方法" class="headerlink" title="在UserController中定义方法"></a>在<code>UserController</code>中定义方法</h4><ul>
<li><code>UserController</code>，其中需要用到<code>BaseController</code>中的方法，因此需要继承这个类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 修改个人信息</div><div class="line">	 * <span class="doctag">@param</span> username  用户名</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱</div><div class="line">	 * <span class="doctag">@param</span> phone  电话号码</div><div class="line">	 * <span class="doctag">@param</span> gender  性别</div><div class="line">	 * <span class="doctag">@param</span> session HttpSession对象，用户获取存储在其中的user对象</div><div class="line">	 * <span class="doctag">@return</span>  返回结果集</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/updateUser.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">updateUser</span><span class="params">(String username,String email,String phone,Integer gender,HttpSession session)</span></span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result=<span class="keyword">new</span> ResponseResult&lt;Void&gt;();  <span class="comment">//创建结果集对象</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Integer id=<span class="keyword">this</span>.getId(session);  <span class="comment">//调用父类的方法获取id</span></div><div class="line">			userservice.updateUser(id, username, gender, email, phone);  <span class="comment">//调用业务层的方法</span></div><div class="line">			<span class="comment">//修改成功设置响应结果集</span></div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"修改成功"</span>);  <span class="comment">//设置响应内容</span></div><div class="line">            session.setAttribute(<span class="string">"user"</span>, userservice.getUserById(id));  <span class="comment">//修改成功之后，刷新session中的user对象</span></div><div class="line">		&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;   <span class="comment">//用户不存在的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(e.getMessage());  <span class="comment">//设置响应内容</span></div><div class="line">		&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;  <span class="comment">//用户名已经存在的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(e.getMessage());  <span class="comment">//设置响应内容</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;   <span class="comment">//登录超时的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(e.getMessage());  <span class="comment">//设置响应内容</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 修改密码的控制器方法</div><div class="line">	 * <span class="doctag">@param</span> session  HttpSession对象，用户获取对象id</div><div class="line">	 * <span class="doctag">@param</span> oldPassword   旧密码</div><div class="line">	 * <span class="doctag">@param</span> newPassword   新密码</div><div class="line">	 * <span class="doctag">@return</span>  返回结果集</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/updatePassword.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">updatePassword</span><span class="params">(HttpSession session,String oldPassword,String newPassword)</span></span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result=<span class="keyword">new</span> ResponseResult&lt;Void&gt;();  <span class="comment">//创建结果集对象</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Integer id=<span class="keyword">this</span>.getId(session);  <span class="comment">//获取id</span></div><div class="line">			userservice.updatePassword(id, oldPassword, newPassword);  <span class="comment">//调用修改方法</span></div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(<span class="string">"密码修改成功"</span>);</div><div class="line">			<span class="comment">//清除session，用户需要重新登录</span></div><div class="line">			session.invalidate();  </div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;   <span class="comment">//用户不存在异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;   <span class="comment">//密码不匹配异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;   <span class="comment">//  登录超时的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;  <span class="comment">//返回结果</span></div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><h4 id="修改个人信息的页面（不包括修改密码）"><a href="#修改个人信息的页面（不包括修改密码）" class="headerlink" title="修改个人信息的页面（不包括修改密码）"></a>修改个人信息的页面（不包括修改密码）</h4><ul>
<li>获取表单数据使用的<code>$(&quot;#personInfo-form&quot;).serialize()</code>方法<ul>
<li><code>personInfo-form</code>是<code>form</code>标签的<code>id</code></li>
<li><code>form</code>表单中的<code>name</code>要和<code>controller</code>方法中的参数字段一样，否则不能对应接收</li>
<li>这个方法是获取表单中的<code>input</code>节点，并且将表单参数封装成请求参数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异步请求</span></div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>:<span class="string">"&lt;%=request.getContextPath()%&gt;/user/updateUser.do"</span>,</div><div class="line">		<span class="attr">type</span>:<span class="string">"POST"</span>,</div><div class="line">		<span class="attr">dataType</span>:<span class="string">"json"</span>,</div><div class="line">		<span class="attr">data</span>:$(<span class="string">"#personInfo-form"</span>).serialize(),   <span class="comment">//封装请求参数</span></div><div class="line">		success:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">			alert(obj.message);</div><div class="line">			<span class="comment">//如果成功修改</span></div><div class="line">			<span class="keyword">if</span>(obj.state==<span class="number">1</span>)&#123;</div><div class="line">				<span class="comment">//重定向到个人信息页面，相当于刷新页面了，那么此时修改的信息会更新在页面中</span></div><div class="line">				<span class="built_in">window</span>.location.href=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/showPersonInfo.do"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<h4 id="安全验证的页面-修改密码"><a href="#安全验证的页面-修改密码" class="headerlink" title="安全验证的页面(修改密码)"></a>安全验证的页面(修改密码)</h4><ul>
<li>密码修改完成之后，使用<code>window.location</code>重定向到登录界面</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//验证密码长度在6-9位之间,参数为密码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPasswordLength</span>(<span class="params">pwd</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> pwd.length&gt;=<span class="number">6</span>&amp;&amp;pwd.length&lt;=<span class="number">9</span>;   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//验证新密码和确认新密码是否相同</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPasswordEquals</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> newPassword=$(<span class="string">"#newPassword"</span>).val(); <span class="comment">//新密码</span></div><div class="line">	<span class="keyword">var</span> confirmPassword=$(<span class="string">"#confirmPassword"</span>).val();  <span class="comment">//确认新密码</span></div><div class="line">	<span class="keyword">return</span> newPassword==confirmPassword;   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//旧密码失去焦点验证密码长度</span></div><div class="line">$(<span class="string">"#oldPassword"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(!checkPasswordLength($(<span class="keyword">this</span>).val()))&#123;</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).text(<span class="string">"密码长度在6-9位之间"</span>);</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>); </div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).text(<span class="string">"密码格式正确"</span>);</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>); </div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//新密码失去焦点验证密码长度</span></div><div class="line">$(<span class="string">"#newPassword"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(!checkPasswordLength($(<span class="keyword">this</span>).val()))&#123;</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).text(<span class="string">"密码长度在6-9位之间"</span>);</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>); </div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).text(<span class="string">"密码格式正确"</span>);</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>); </div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//确认密码失去焦点验证与新密码是否一致</span></div><div class="line">$(<span class="string">"#confirmPassword"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//如果密码不一致</span></div><div class="line">	<span class="keyword">if</span>(!checkPasswordEquals())&#123;</div><div class="line">		$(<span class="string">"#confirmPasswordSpan"</span>).text(<span class="string">"密码与新密码不一致"</span>);</div><div class="line">		$(<span class="string">"#confirmPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$(<span class="string">"#confirmPasswordSpan"</span>).text(<span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//修改密码的方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updatePassword</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> newPassword=$(<span class="string">"#newPassword"</span>).val(); <span class="comment">// 新密码</span></div><div class="line">	<span class="keyword">var</span> oldPassword=$(<span class="string">"#oldPassword"</span>).val();   <span class="comment">// 旧密码</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">"newPassword"</span>:newPassword,<span class="string">"oldPassword"</span>:oldPassword &#125;;  <span class="comment">// 封装请求数据</span></div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/updatePassword.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	</div><div class="line">	<span class="comment">//如果验证的条件都完成了，那么可以发出请求</span></div><div class="line">	<span class="keyword">if</span>(checkPasswordLength(newPassword)&amp;&amp;checkPasswordLength(oldPassword)&amp;&amp;checkPasswordEquals())&#123;</div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="comment">//响应成功</span></div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="comment">//如果修改成功</span></div><div class="line">				<span class="keyword">if</span>(data.state==<span class="number">1</span>)&#123;</div><div class="line">					alert(data.message);   <span class="comment">//输出提示语句</span></div><div class="line">					<span class="comment">//重定向到登录界面</span></div><div class="line">					<span class="built_in">window</span>.location=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/showLogin.do"</span>;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;  <span class="comment">//如果修改失败</span></div><div class="line">					alert(data.message);  <span class="comment">//输出提示语句</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>对于<code>service</code>中的方法，如何设置其中的返回值<ol>
<li>如果这个返回值不好定义，比如更新用户信息，可能出现<code>用户名不存在</code>，<code>当前登录的用户已经被删除</code>等多种结果，那么这个返回值如何定义呢，只好定义为<code>void</code>，用抛出异常的方式来提醒<code>Controller</code>层处理</li>
<li>如果返回值要么是<code>true</code>，要么是<code>false</code>，那么就可以返回<code>boolean</code>，比如验证用户名，两种结果：用户名存在，用户名不存在，只需要返回布尔值即可</li>
</ol>
</li>
<li>我们可以在<code>cn.tedu.store.controller</code>中新建一个基类<code>BaseController</code>，这个类中定义的是<code>Controller</code>中比较<code>通用的方法</code>，那么如果一个控制器类想用使用其中的方法，只需要继承这个基类即可</li>
<li><strong>在修改用户信息之后，不要忘记更新存储在<code>session</code>中的<code>user</code>对象，使其是最新的用户信息</strong></li>
<li>修改密码完成之后，我们需要清空<code>session</code>，这样拦截器就会拦截器操作个人信息的页面并且让其重新登录</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户管理模块之个人信息修改&quot;&gt;&lt;a href=&quot;#用户管理模块之个人信息修改&quot; class=&quot;headerlink&quot; title=&quot;用户管理模块之个人信息修改&quot;&gt;&lt;/a&gt;用户管理模块之个人信息修改&lt;/h1&gt;&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; cla
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>地址管理之省市区三级联动菜单</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E5%9C%B0%E5%9D%80%E7%AE%A1%E7%90%86%E4%B9%8B%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E8%8F%9C%E5%8D%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/地址管理之省市区三级联动菜单/</id>
    <published>2018-05-21T10:26:00.000Z</published>
    <updated>2018-05-21T10:26:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="地址管理之省市区三级联动菜单"><a href="#地址管理之省市区三级联动菜单" class="headerlink" title="地址管理之省市区三级联动菜单"></a>地址管理之省市区三级联动菜单</h1><p><img src="http://ono60m7tl.bkt.clouddn.com/addresss1.png" alt="三级联动表单"></p>
<h2 id="导入省市区的数据"><a href="#导入省市区的数据" class="headerlink" title="导入省市区的数据"></a>导入省市区的数据</h2><ul>
<li>下载<a href="http://ono60m7tl.bkt.clouddn.com/%E7%9C%81%E5%B8%82%E5%8C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8sql%E4%BB%A3%E7%A0%81.zip" target="_blank" rel="external">sql语句的文件</a></li>
<li>在数据库中执行：<code>source 文件路径</code>即可导入</li>
<li>导入成功之后，在数据库中会出现三张表，分别代表省,市,区</li>
</ul>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><ul>
<li><code>get</code>，<code>set</code>方法</li>
<li><code>hashCode</code>和<code>equals</code>方法</li>
<li>实现序列化接口，生成安全码</li>
</ul>
<h3 id="Province"><a href="#Province" class="headerlink" title="Province"></a>Province</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省的实体类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4983640220555245518L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String provinceCode;  <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> String provinceName;  <span class="comment">//名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvinceCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceCode</span><span class="params">(String provinceCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.provinceCode = provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvinceName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> provinceName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceName</span><span class="params">(String provinceName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.provinceName = provinceName;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((provinceCode == <span class="keyword">null</span>) ? <span class="number">0</span> : provinceCode.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((provinceName == <span class="keyword">null</span>) ? <span class="number">0</span> : provinceName.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Province other = (Province) obj;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (provinceCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.provinceCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!provinceCode.equals(other.provinceCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (provinceName == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.provinceName != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!provinceName.equals(other.provinceName))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Province [id="</span> + id + <span class="string">", provinceCode="</span> + provinceCode</div><div class="line">				+ <span class="string">", provinceName="</span> + provinceName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="City"><a href="#City" class="headerlink" title="City"></a>City</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 城市的实体类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6530707564192968718L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String provinceCode;  <span class="comment">//省的编号</span></div><div class="line">	<span class="keyword">private</span> String cityCode;  <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> String CityName;  <span class="comment">//名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvinceCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceCode</span><span class="params">(String provinceCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.provinceCode = provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCityCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityCode</span><span class="params">(String cityCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cityCode = cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCityName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> CityName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityName</span><span class="params">(String cityName)</span> </span>&#123;</div><div class="line">		CityName = cityName;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result</div><div class="line">				+ ((CityName == <span class="keyword">null</span>) ? <span class="number">0</span> : CityName.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((cityCode == <span class="keyword">null</span>) ? <span class="number">0</span> : cityCode.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((provinceCode == <span class="keyword">null</span>) ? <span class="number">0</span> : provinceCode.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		City other = (City) obj;</div><div class="line">		<span class="keyword">if</span> (CityName == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.CityName != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!CityName.equals(other.CityName))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (cityCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.cityCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cityCode.equals(other.cityCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (provinceCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.provinceCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!provinceCode.equals(other.provinceCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"City [id="</span> + id + <span class="string">", provinceCode="</span> + provinceCode</div><div class="line">				+ <span class="string">", cityCode="</span> + cityCode + <span class="string">", CityName="</span> + CityName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Area"><a href="#Area" class="headerlink" title="Area"></a>Area</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 区/县的实体类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Area</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7024097434624454416L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String areaCode; <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> String cityCode;  <span class="comment">//城市的编号</span></div><div class="line">	<span class="keyword">private</span> String areaName;  <span class="comment">//名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAreaCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> areaCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAreaCode</span><span class="params">(String areaCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.areaCode = areaCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCityCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityCode</span><span class="params">(String cityCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cityCode = cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAreaName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> areaName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAreaName</span><span class="params">(String areaName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.areaName = areaName;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result</div><div class="line">				+ ((areaCode == <span class="keyword">null</span>) ? <span class="number">0</span> : areaCode.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((areaName == <span class="keyword">null</span>) ? <span class="number">0</span> : areaName.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((cityCode == <span class="keyword">null</span>) ? <span class="number">0</span> : cityCode.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Area other = (Area) obj;</div><div class="line">		<span class="keyword">if</span> (areaCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.areaCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!areaCode.equals(other.areaCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (areaName == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.areaName != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!areaName.equals(other.areaName))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (cityCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.cityCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cityCode.equals(other.cityCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Area [id="</span> + id + <span class="string">", areaCode="</span> + areaCode + <span class="string">", cityCode="</span></div><div class="line">				+ cityCode + <span class="string">", areaName="</span> + areaName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>获取获取所有的省份信息</li>
<li>根据选择的省份传回的<code>省份编号</code>查询所有的城市信息</li>
<li>根据选择的城市传回的<code>城市编码</code>查询所有的县区的信息</li>
</ol>
<h3 id="新建DictMapper接口"><a href="#新建DictMapper接口" class="headerlink" title="新建DictMapper接口"></a>新建<code>DictMapper</code>接口</h3><ul>
<li>完成上面的三个功能，因此需要定义三个方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DictMapper</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查询所有的省份</div><div class="line">	 * <span class="doctag">@return</span>  省份集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Province&gt; <span class="title">selectProvince</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> provinceCode</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;City&gt; <span class="title">selectCityByProvinceCode</span><span class="params">(String provinceCode)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据城市的编码查询所有的县区</div><div class="line">	 * <span class="doctag">@param</span> cityCode</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Area&gt; <span class="title">selectAreaByCityCode</span><span class="params">(String cityCode)</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在src-resource-main的mappers文件夹创建DictMapper-xml文件"><a href="#在src-resource-main的mappers文件夹创建DictMapper-xml文件" class="headerlink" title="在src/resource/main的mappers文件夹创建DictMapper.xml文件"></a>在<code>src/resource/main</code>的<code>mappers</code>文件夹创建<code>DictMapper.xml</code>文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> <span class="comment">&lt;!-- namespace指定的DictMapper接口的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.DictMapper"</span>&gt;</span></div><div class="line"> 	<span class="comment">&lt;!-- </span></div><div class="line"> 		List&lt;Province&gt; selectProvince();</div><div class="line"> 		查询所有的省份</div><div class="line"> 	 --&gt;</div><div class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectProvince"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.Province"</span>&gt;</span></div><div class="line"> 		select id,</div><div class="line"> 		province_code as provinceCode,</div><div class="line"> 		province_name as provinceName </div><div class="line"> 		from t_dict_provinces</div><div class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"> 	</div><div class="line"> 	<span class="comment">&lt;!-- </span></div><div class="line"> 		List&lt;City&gt; selectCityByProvinceCode(String provinceCode);</div><div class="line"> 		根据省份的编码查询所有的城市信息</div><div class="line"> 	 --&gt;</div><div class="line"> 	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCityByProvinceCode"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.City"</span>&gt;</span></div><div class="line"> 	 	select id,</div><div class="line"> 	 	province_code as provinceCode,</div><div class="line"> 	 	city_code as cityCode,</div><div class="line"> 	 	city_name as cityName</div><div class="line"> 	 	from t_dict_cities where province_code=#&#123;province_code&#125;</div><div class="line"> 	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"> 	 </div><div class="line"> 	 </div><div class="line"> 	 <span class="comment">&lt;!-- </span></div><div class="line"> 	 	List&lt;Area&gt; selectAreaByCityCode(String cityCode);</div><div class="line"> 	 	根据城市的编码查询所有的县区</div><div class="line"> 	  --&gt;</div><div class="line"> 	  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAreaByCityCode"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.Area"</span>&gt;</span></div><div class="line"> 	  	select id,</div><div class="line"> 	  	area_code as areaCode,</div><div class="line"> 	  	area_name as areaName,</div><div class="line"> 	  	city_code as cityCode</div><div class="line"> 	  	from t_dict_areas where city_code=#&#123;cityCode&#125;</div><div class="line"> 	  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>获取获取所有的省份信息</li>
<li>根据选择的省份传回的<code>省份编号</code>获取所有的城市信息</li>
<li>根据选择的城市传回的<code>城市编码</code>获取所有的县区的信息</li>
</ol>
<h3 id="在cn-tedu-store-service中新建IDictService接口"><a href="#在cn-tedu-store-service中新建IDictService接口" class="headerlink" title="在cn.tedu.store.service中新建IDictService接口"></a>在<code>cn.tedu.store.service</code>中新建<code>IDictService</code>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的业务接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDictService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取所有的省份信息，返回对象集合</div><div class="line">	 * <span class="doctag">@return</span>  Province对象集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Province&gt; <span class="title">getProvinces</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 根据省份的编码获取所有的城市信息</div><div class="line">	 * <span class="doctag">@param</span> provinceCode   省份的编码</div><div class="line">	 * <span class="doctag">@return</span>   所有的城市的集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;City&gt; <span class="title">getCities</span><span class="params">(String provinceCode)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据城市的编码获取所有的县区的信息</div><div class="line">	 * <span class="doctag">@param</span> cityCode  城市的编码</div><div class="line">	 * <span class="doctag">@return</span>  所有县区的集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Area&gt; <span class="title">getAreas</span><span class="params">(String cityCode)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在cn-tedu-store-service中新建DictServiceImpl实现类"><a href="#在cn-tedu-store-service中新建DictServiceImpl实现类" class="headerlink" title="在cn.tedu.store.service中新建DictServiceImpl实现类"></a>在<code>cn.tedu.store.service</code>中新建<code>DictServiceImpl</code>实现类</h3><ul>
<li>使用<code>@service</code>注解来控制反转，新建对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的业务实现类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span> <span class="comment">//控制反转，创建对象</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictServiceImpl</span> <span class="keyword">implements</span> <span class="title">IDictService</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span>   <span class="comment">//自动注入对象</span></div><div class="line">	<span class="keyword">private</span> DictMapper dictMapper;</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">getProvinces</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dictMapper.selectProvince();</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 获取所有的城市信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">getCities</span><span class="params">(String provinceCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dictMapper.selectCityByProvinceCode(provinceCode);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取所有的县区信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Area&gt; <span class="title">getAreas</span><span class="params">(String cityCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dictMapper.selectAreaByCityCode(cityCode);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>获取所有的省份信息(省份下拉选择文本改变发出异步请求)<ol>
<li><code>/dict/getProvince.do</code></li>
<li>请求方式：<code>GET</code></li>
<li>响应方式：<code>@ResponseBody</code></li>
</ol>
</li>
<li>获取对应的城市信息<ol>
<li><code>/dict/getCities.do</code></li>
<li>请求方式：<code>GET</code></li>
<li>请求参数：<code>ProvinceCode</code>：省份编码</li>
<li>响应方式：<code>@ResponseBody</code></li>
</ol>
</li>
<li>获取对应的县区信息<ol>
<li><code>/dict/getArea.do</code></li>
<li>请求方式：<code>GET</code></li>
<li>请求参数：<code>cityCode</code>：城市编码</li>
<li>响应方式：<code>@ResponseBody</code></li>
</ol>
</li>
</ol>
<h3 id="在cn-tedu-store-controller中新建一个DictController类"><a href="#在cn-tedu-store-controller中新建一个DictController类" class="headerlink" title="在cn.tedu.store.controller中新建一个DictController类"></a>在<code>cn.tedu.store.controller</code>中新建一个<code>DictController</code>类</h3><ul>
<li>使用<code>@Controller</code>注解</li>
<li>使用<code>@RequestMapping</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的controller层</div><div class="line"> * 继承父类BaseController</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/dict"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span>  </div><div class="line">	<span class="keyword">private</span> IDictService dictService;  <span class="comment">//自动创建service对象</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 异步获取所有的省份信息，返回给页面</div><div class="line">	 * <span class="doctag">@return</span> 结果集，省份信息</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getProvince.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> ResponseResult&lt;List&lt;Province&gt;&gt; getProvince()&#123;</div><div class="line">		<span class="comment">//创建结果集对象</span></div><div class="line">		ResponseResult&lt;List&lt;Province&gt;&gt; result=<span class="keyword">new</span> ResponseResult&lt;List&lt;Province&gt;&gt;();</div><div class="line">		List&lt;Province&gt; provinces=dictService.getProvinces();</div><div class="line">		result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">		result.setMessage(<span class="string">"响应成功"</span>);</div><div class="line">		result.setData(provinces);  <span class="comment">//添加返回的数据</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    	<span class="comment">/**</span></div><div class="line">	 * 获取城市信息</div><div class="line">	 * <span class="doctag">@param</span> provinceCode  省份的编码</div><div class="line">	 * <span class="doctag">@return</span>  返回结果集</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getCity.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> ResponseResult&lt;List&lt;City&gt;&gt; getCity(String provinceCode)&#123;</div><div class="line">		ResponseResult&lt;List&lt;City&gt;&gt; result=<span class="keyword">new</span> ResponseResult&lt;List&lt;City&gt;&gt;();  <span class="comment">//创建结果集对象</span></div><div class="line">		List&lt;City&gt; cities=dictService.getCities(provinceCode);   <span class="comment">//获取城市信息</span></div><div class="line">		result.setData(cities);   <span class="comment">//将城市信息封装到结果集中</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 异步获取所有县区的信息</div><div class="line">	 * <span class="doctag">@param</span> cityCode  城市编码</div><div class="line">	 * <span class="doctag">@return</span>  结果集，其中封装了县区的信息</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getArea.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> ResponseResult&lt;List&lt;Area&gt;&gt; getAreas(String cityCode)&#123;</div><div class="line">		ResponseResult&lt;List&lt;Area&gt;&gt; result=<span class="keyword">new</span> ResponseResult&lt;List&lt;Area&gt;&gt;();</div><div class="line">		List&lt;Area&gt; areas=dictService.getAreas(cityCode);</div><div class="line">		result.setData(areas);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h2><h3 id="功能分析-3"><a href="#功能分析-3" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>当页面加载的时候调用<code>getProvinces()</code>方法，发送异步请求，这样所有的省份信息都加载出来了</li>
<li>当<code>省份信息的下拉列表select</code>选择改变了,那么调用<code>getCities()</code>方法，这样对应省份的市就加载出来了<ol>
<li><code>onchange=getCities()</code></li>
</ol>
</li>
<li>当<code>市的下拉列表select</code>选择改变了，那么调用<code>getAreas()</code>方法，这样对应的县区就加载出来了<ol>
<li><code>onchange=getAreas()</code></li>
</ol>
</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    getProvinces();  <span class="comment">//页面加载完成之后就调用该方法获取所有的省份信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">	<span class="comment">//获取所有的省份信息</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getProvinces</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/dict/getProvince.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">		<span class="comment">//发出异步请求</span></div><div class="line">		$.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.data.length;i++)&#123;</div><div class="line">					<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span>+data.data[i].provinceCode+<span class="string">"&gt;"</span>+data.data[i].provinceName+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					$(<span class="string">"#receiverState"</span>).append(option);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//获取所有的城市信息</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getCities</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> provinceCode=$(<span class="string">"#receiverState"</span>).val();  <span class="comment">//请求的数据</span></div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/dict/getCity.do?provinceCode="</span>+provinceCode;  <span class="comment">//异步请求的url</span></div><div class="line">		</div><div class="line">		$(<span class="string">"#receiverCity"</span>).html(<span class="string">"&lt;option value='-1'&gt;-------请选择城市---------&lt;/option&gt;"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//如果其中的provinceCode==-1，表示选择了请选择省份的那个选项，此时就不许需要发出异步请求了</span></div><div class="line">		<span class="keyword">if</span>(provinceCode==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//发送异步请求</span></div><div class="line">		$.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.data.length;i++)&#123;</div><div class="line">					<span class="comment">//新建option节点，第一个是文本的值，第二个是value属性的值</span></div><div class="line">					<span class="keyword">var</span> option=<span class="keyword">new</span> Option(data.data[i].cityName,data.data[i].cityCode);</div><div class="line">					$(<span class="string">"#receiverCity"</span>).append(option);  </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//获取所有县区的异步请求</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getAreas</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> cityCode=$(<span class="string">"#receiverCity"</span>).val();  <span class="comment">//请求的数据</span></div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/dict/getArea.do?cityCode="</span>+cityCode;  <span class="comment">// 异步请求的url</span></div><div class="line">		</div><div class="line">		$(<span class="string">"#receiverDistrict"</span>).html(<span class="string">"&lt;option value='-1'&gt;-------请选择县区---------&lt;/option&gt;"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//如果其中的cityCode==-1，表示选择了请选择省份的那个选项，此时就不许需要发出异步请求了</span></div><div class="line">		<span class="keyword">if</span>(cityCode==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//发送异步请求</span></div><div class="line">		$.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.data.length;i++)&#123;</div><div class="line">					<span class="comment">//新建option节点，第一个是文本的值，第二个是value属性的值</span></div><div class="line">					<span class="keyword">var</span> option=<span class="keyword">new</span> Option(data.data[i].areaName,data.data[i].areaCode);</div><div class="line">					$(<span class="string">"#receiverDistrict"</span>).append(option);  </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;地址管理之省市区三级联动菜单&quot;&gt;&lt;a href=&quot;#地址管理之省市区三级联动菜单&quot; class=&quot;headerlink&quot; title=&quot;地址管理之省市区三级联动菜单&quot;&gt;&lt;/a&gt;地址管理之省市区三级联动菜单&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://ono60
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>用户管理模块之用户登录</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E4%B9%8B%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/用户管理模块之用户登录/</id>
    <published>2018-05-21T10:24:56.000Z</published>
    <updated>2018-05-21T10:25:33.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理模块之用户登录"><a href="#用户管理模块之用户登录" class="headerlink" title="用户管理模块之用户登录"></a>用户管理模块之用户登录</h1><h2 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h2><ol>
<li>持久层</li>
<li>业务层</li>
<li>控制层</li>
<li>页面</li>
</ol>
<h2 id="在cn-tedu-store-mapper中新建UserMapper-java接口"><a href="#在cn-tedu-store-mapper中新建UserMapper-java接口" class="headerlink" title="在cn.tedu.store.mapper中新建UserMapper.java接口"></a>在<code>cn.tedu.store.mapper</code>中新建<code>UserMapper.java</code>接口</h2><ul>
<li><strong>由于在用户管理模块之用户注册已经创建了，所以不用新建了</strong></li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><p>验证用户名是否存在，其中返回的是用户对象，这个在前面的注册已经定义过了，是<code>User selectUserByUserName(String userName)</code></p>
<p>​</p>
</li>
</ol>
<h2 id="在cn-tedu-store-service创建IUserService接口和实现类UserServiceImpl"><a href="#在cn-tedu-store-service创建IUserService接口和实现类UserServiceImpl" class="headerlink" title="在cn.tedu.store.service创建IUserService接口和实现类UserServiceImpl"></a>在<code>cn.tedu.store.service</code>创建<code>IUserService</code>接口和实现类<code>UserServiceImpl</code></h2><ul>
<li><strong>由于在用户管理模块之用户注册已经创建了，所以不用新建了</strong></li>
</ul>
<h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ol>
<li>实现用户登录的业务，传入的参数是<code>用户名</code>和<code>密码</code></li>
</ol>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol>
<li>用户登录输入的是<code>用户名</code>和<code>密码</code>，登录不成功无非是是两种可能<ol>
<li>用户名不存在，抛出异常提示</li>
<li>密码不匹配，抛出异常提示</li>
</ol>
</li>
<li>用户登录<code>User login(String userName,String passWord</code>)`<ol>
<li>通过<code>selectUserByUserName</code>返回user对象</li>
<li>判断<code>user</code>是否为<code>null</code></li>
<li>如果<code>user=null</code>，抛出<code>UserNotFoundException</code>异常</li>
<li>如果<code>user！=null</code>，那么验证其中的密码是否正确</li>
<li>如果密码不匹配，抛出<code>PassWordNotMatchException</code>异常</li>
<li>如果密码匹配，那么返回<code>user</code>对象</li>
</ol>
</li>
<li>抛出异常，当然需要有自己的异常类，在<code>cn.tedu.store.service.ex</code>中新建两个异常类<ol>
<li>用户名不存在的异常<code>UserNotFoundException</code>，继承<code>Exception</code>，重写父类的<code>构造方法</code></li>
<li>密码不匹配的异常<code>PasswordNotMatchException</code>,继承<code>Exception</code>，重写父类的<code>构造方法</code></li>
</ol>
</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><code>IUserService</code>接口中定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 实现登录的业务</div><div class="line"> * <span class="doctag">@param</span> userName  用户名</div><div class="line"> * <span class="doctag">@param</span> passWord  密码</div><div class="line"> * <span class="doctag">@return</span>  User对象</div><div class="line"> * <span class="doctag">@throws</span> UserNotFoundException  用户不存在的异常</div><div class="line"> * <span class="doctag">@throws</span> PassWordNotMatchException  密码不匹配的异常</div><div class="line"> */</div><div class="line"><span class="function">User <span class="title">login</span><span class="params">(String userName,String passWord)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException</span>;</div></pre></td></tr></table></figure>
<ul>
<li><code>UserServiceImpl</code>实现类实现方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 登录方法</div><div class="line">	 * 1. 通过selectUserByUserName返回user对象</div><div class="line">	 * 2.判断user是否为null</div><div class="line">	 * 3.如果user=null，抛出UserNotFoundException异常</div><div class="line">	 * 4.如果user！=null，那么验证其中的密码是否正确</div><div class="line">	 * 5.如果密码不匹配，抛出PassWordNotMatchException异常</div><div class="line">	 * 6. 如果密码匹配，那么返回user对象</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException </div><div class="line">	 * <span class="doctag">@throws</span> PassWordNotMatchException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userName, String passWord)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException </span>&#123;</div><div class="line">		</div><div class="line">		User user=userMapper.selectUserByUserName(userName);  <span class="comment">//根据用户名查询，返回user对象</span></div><div class="line">		<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//user为null，表示用户名不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"用户名不存在"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果用户名存在，验证密码</span></div><div class="line">			<span class="keyword">if</span> (passWord.equals(user.getPassword())) &#123;  <span class="comment">//如果密码匹配</span></div><div class="line">				<span class="keyword">return</span> user;   <span class="comment">//返回user对象即可</span></div><div class="line">			&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果密码不相同，那么直接抛出密码不匹配的异常即可</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"密码不匹配"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>TestUser</code>中测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件，测试的业务层，因此需要spring-dao.xml和spring-service.xml配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	String username=<span class="string">"陈加兵"</span>;</div><div class="line">	String password=<span class="string">"123456"</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		User user=userService.login(username, password);</div><div class="line">		System.out.println(<span class="string">"用户登录成功"</span>);</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在cn-tedu-store-controller中新建UserController"><a href="#在cn-tedu-store-controller中新建UserController" class="headerlink" title="在cn.tedu.store.controller中新建UserController"></a>在<code>cn.tedu.store.controller</code>中新建<code>UserController</code></h2><ul>
<li><strong>由于之前新建过了，不需要在新建了</strong></li>
</ul>
<h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><ol>
<li>显示登录页面<ol>
<li><code>/user/showLogin.do</code></li>
</ol>
</li>
<li>处理登录的请求<ol>
<li><code>/user/login.do</code></li>
<li>请求参数：<code>userName</code>和<code>password</code></li>
<li>请求方式<code>POST</code></li>
<li>响应方式：<code>ResposneBody</code></li>
</ol>
</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li>显示用户登录页面</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 显示登录视图 login.jsp</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/showLogin.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 直接返回一个视图名称即可</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>处理异步请求登录的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 点击登录按钮处理异步请求的方法</div><div class="line"> * <span class="doctag">@param</span> username  用户名</div><div class="line"> * <span class="doctag">@param</span> password  密码</div><div class="line"> * <span class="doctag">@param</span> session  session域</div><div class="line"> * <span class="doctag">@return</span>  返回处理结果</div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">login</span><span class="params">(String username,String password,HttpSession session)</span></span>&#123;</div><div class="line">	ResponseResult&lt;Void&gt; result=<span class="keyword">new</span> ResponseResult&lt;Void&gt;();  <span class="comment">//新建返回结果对象</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		User user=userservice.login(username, password);  <span class="comment">//调用service的login方法登录</span></div><div class="line">		result.setState(<span class="number">1</span>);   <span class="comment">//设置响应状态码</span></div><div class="line">		result.setMessage(<span class="string">"登录成功"</span>);  <span class="comment">//设置提示信息</span></div><div class="line">		session.setAttribute(<span class="string">"user"</span>,user);  <span class="comment">//将user对象存放在session中</span></div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123; <span class="comment">//用户名不存在的异常</span></div><div class="line">		result.setState(<span class="number">0</span>);   <span class="comment">//设置响应状态码</span></div><div class="line">		result.setMessage(e.getMessage());  <span class="comment">//设置提示信息</span></div><div class="line">	&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;   <span class="comment">//密码不匹配的异常</span></div><div class="line">		result.setState(<span class="number">0</span>);   <span class="comment">//设置响应状态码</span></div><div class="line">		result.setMessage(e.getMessage());  <span class="comment">//设置提示信息</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;   <span class="comment">//返回结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在login-jsp页面中添加异步请求"><a href="#在login-jsp页面中添加异步请求" class="headerlink" title="在login.jsp页面中添加异步请求"></a>在<code>login.jsp</code>页面中添加异步请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击登录按钮的方法</span></div><div class="line">    $(<span class="string">'#bt-login'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> username=$(<span class="string">"#username"</span>).val();  <span class="comment">//用户名</span></div><div class="line">        <span class="keyword">var</span> password=$(<span class="string">"#password"</span>).val();  <span class="comment">//密码</span></div><div class="line">        <span class="keyword">var</span> d=&#123;<span class="string">"username"</span>:username,<span class="string">"password"</span>:password&#125;;  <span class="comment">//封装请求数据</span></div><div class="line">        <span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/login.do"</span>;  <span class="comment">//请求地址</span></div><div class="line">        <span class="comment">//异步提交请求，进行验证</span></div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="comment">//如果响应成功</span></div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				$(<span class="string">"#showResult"</span>).text(data.message);  <span class="comment">//显示提示信息</span></div><div class="line">				<span class="comment">//如果登录成功</span></div><div class="line">				<span class="keyword">if</span>(data.state==<span class="number">1</span>)&#123;</div><div class="line">					Save();  <span class="comment">//调用save方法保存用户名和密码，保证后面自动登录</span></div><div class="line">				   <span class="comment">//跳转到首页index.jsp</span></div><div class="line">                    <span class="built_in">window</span>.location.href=<span class="string">"&lt;%=request.getContextPath()%&gt;/main/showIndex.do"</span>;</div><div class="line">					</div><div class="line">				&#125;<span class="keyword">else</span>&#123;  <span class="comment">//登录没有成功</span></div><div class="line">					$(<span class="string">"#showResult"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);  <span class="comment">//设置提示信息的文本颜色为红色</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);        </div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"> $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ($.cookie(<span class="string">"rmbUser"</span>) == <span class="string">"true"</span>) &#123;</div><div class="line">            $(<span class="string">"#ck_rmbUser"</span>).attr(<span class="string">"checked"</span>, <span class="literal">true</span>);</div><div class="line">            $(<span class="string">"#username"</span>).val($.cookie(<span class="string">"username"</span>));</div><div class="line">            $(<span class="string">"#password"</span>).val($.cookie(<span class="string">"password"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//记住用户名密码,保存在cookie中</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Save</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ($(<span class="string">"#ck_rmbUser"</span>).prop(<span class="string">"checked"</span>)) &#123;</div><div class="line">            <span class="keyword">var</span> str_username = $(<span class="string">"#username"</span>).val();</div><div class="line">            <span class="keyword">var</span> str_password = $(<span class="string">"#password"</span>).val();</div><div class="line">            $.cookie(<span class="string">"rmbUser"</span>, <span class="string">"true"</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;); <span class="comment">//存储一个带7天期限的cookie</span></div><div class="line">            $.cookie(<span class="string">"username"</span>, str_username, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</div><div class="line">            $.cookie(<span class="string">"password"</span>, str_password, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            $.cookie(<span class="string">"rmbUser"</span>, <span class="string">"false"</span>, &#123; <span class="attr">expire</span>: <span class="number">-1</span> &#125;);</div><div class="line">            $.cookie(<span class="string">"username"</span>, <span class="string">""</span>, &#123; <span class="attr">expires</span>: <span class="number">-1</span> &#125;);</div><div class="line">            $.cookie(<span class="string">"password"</span>, <span class="string">""</span>, &#123; <span class="attr">expires</span>: <span class="number">-1</span> &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>实现登录的时候，不可以使用<code>用户名</code>和<code>密码</code>直接查询人数，因为<code>sql</code>是不区分大小写的，但是我们的密码是区分大小写的，比如<code>select * from t_user where username=? and password=?</code>,这个是不可以直接使用的，应该是使用用户名查询返回<code>User</code>对象，然后在比较用户输入的密码和对象中的密码是否相同：<code>password.equals(user.getPassWord())</code></li>
<li>在需要修改前端页面的时候，不要大幅度的修改其中的<code>css</code>文件，可以使用<code>内嵌式</code>的样式修改即可</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户管理模块之用户登录&quot;&gt;&lt;a href=&quot;#用户管理模块之用户登录&quot; class=&quot;headerlink&quot; title=&quot;用户管理模块之用户登录&quot;&gt;&lt;/a&gt;用户管理模块之用户登录&lt;/h1&gt;&lt;h2 id=&quot;开发顺序&quot;&gt;&lt;a href=&quot;#开发顺序&quot; class=&quot;
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Spring之AOP之底层实现</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Spring%E4%B9%8BAOP%E4%B9%8B%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Spring之AOP之底层实现/</id>
    <published>2018-05-21T10:22:48.000Z</published>
    <updated>2018-05-21T10:23:11.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring之AOP之底层实现"><a href="#Spring之AOP之底层实现" class="headerlink" title="Spring之AOP之底层实现"></a>Spring之AOP之底层实现</h1><h2 id="静态代理实现"><a href="#静态代理实现" class="headerlink" title="静态代理实现"></a>静态代理实现</h2><ul>
<li>定义<code>IStudnetService</code>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * IStudentService的接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义<code>StudentServiceImpl</code>实现方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">IStudentService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentService的add方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义<code>StudentAop</code>切面类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 切面类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentAOP</span> </span>&#123;</div><div class="line">	<span class="comment">//之前执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.before...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//之后执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.after"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//在之后执行，只在没有出现异常的时候执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.afterReturning"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//之后执行，但是只在出现异常的时候执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.throwing"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//环绕方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arounding</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.arounding"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义<code>StudentProxy</code>代理类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态代理类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentProxy</span> <span class="keyword">implements</span> <span class="title">IStudentService</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> StudentAOP studentAOP;   <span class="comment">//依赖注入切面对象</span></div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> IStudentService studentService;  <span class="comment">//目标对象</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			studentAOP.arounding();  <span class="comment">//执行环绕方法</span></div><div class="line">			studentAOP.before();  <span class="comment">//执行切面类的方法</span></div><div class="line">			studentService.add();  <span class="comment">//执行目标对象的方法</span></div><div class="line">			studentAOP.after();  <span class="comment">//执行切面的after方法</span></div><div class="line">			studentAOP.afterReturning();  <span class="comment">//执行切面类afterReturning的方法</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			studentAOP.afterThrowing();  <span class="comment">//执行切面类的方法，在出现异常之后执行</span></div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			studentAOP.arounding();  <span class="comment">//执行环绕方法</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>,<span class="string">"spring-aop.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//创建Service，其中使用的是动态代理类</span></div><div class="line">	IStudentService studentService=ac.getBean(<span class="string">"studentProxy"</span>,IStudentService.class);</div><div class="line">	studentService.add();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h2><ul>
<li>代理类实现<code>java.lang.reflect.InvocationHandler</code>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 动态代理的类</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>   <span class="comment">// 创建对象</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Object object; <span class="comment">// 目标对象</span></div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> StudentAOP studentAOP; <span class="comment">// 注入切面类</span></div><div class="line"></div><div class="line">	<span class="comment">// 获取动态代理类的对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object object)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.object=object;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 第一个参数：目标类的类加载器</div><div class="line">		 * 第二个参数：目标类的接口</div><div class="line">		 * 第三个参数：动态代理的实例</div><div class="line">		 */</div><div class="line">		<span class="keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> proxy ：被代理的对象</div><div class="line">	 * <span class="doctag">@param</span> method : 要调用的方法</div><div class="line">	 * <span class="doctag">@param</span> args : 方法调用的时候所需要的参数</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">			<span class="keyword">throws</span> Throwable &#123;</div><div class="line">		</div><div class="line">		studentAOP.before();  <span class="comment">//调用切面的before方法</span></div><div class="line">		</div><div class="line">		<span class="comment">//通过反射调用目标类的方法</span></div><div class="line">		Object result=method.invoke(object, args);  <span class="comment">//调用目标类的方法</span></div><div class="line">		studentAOP.after();  <span class="comment">//调用切面的after方法</span></div><div class="line">		</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>,<span class="string">"spring-aop.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取动态代理类的对象</span></div><div class="line">	ProxyHandler proxyHandler=ac.getBean(<span class="string">"proxyHandler"</span>,ProxyHandler.class);</div><div class="line">	</div><div class="line">	<span class="comment">//获取代理类的对象</span></div><div class="line">	IStudentService studentService=(IStudentService) proxyHandler.getObject(<span class="keyword">new</span> StudentServiceImpl());</div><div class="line">	studentService.add();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring之AOP之底层实现&quot;&gt;&lt;a href=&quot;#Spring之AOP之底层实现&quot; class=&quot;headerlink&quot; title=&quot;Spring之AOP之底层实现&quot;&gt;&lt;/a&gt;Spring之AOP之底层实现&lt;/h1&gt;&lt;h2 id=&quot;静态代理实现&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之AOP</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Spring%E4%B9%8BAOP/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Spring之AOP/</id>
    <published>2018-05-21T10:22:06.000Z</published>
    <updated>2018-05-21T10:22:25.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring之AOP"><a href="#Spring之AOP" class="headerlink" title="Spring之AOP"></a>Spring之AOP</h1><h2 id="Spring框架两大核心内容"><a href="#Spring框架两大核心内容" class="headerlink" title="Spring框架两大核心内容"></a>Spring框架两大核心内容</h2><h3 id="IOC-（DI）"><a href="#IOC-（DI）" class="headerlink" title="IOC （ＤＩ）"></a>IOC （ＤＩ）</h3><ul>
<li><p><code>ＩＯＣ</code>：控制反转</p>
<ul>
<li>将创建和管理对象全部交给框架完成</li>
</ul>
</li>
<li><p><code>DI</code> : 依赖注入</p>
<ul>
<li>为成员变量赋值</li>
<li>其中有不同的方法赋值，但是我们推荐使用<code>set</code>方法注入或者注解方式</li>
</ul>
</li>
</ul>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul>
<li>面向切面编程，是面向对象编程的重要组成部分，在不改变业务逻辑功能的基础上，对<strong>横切逻辑</strong>进行扩展</li>
<li><code>aspectj</code>框架是<code>aop</code>编程思想的体现，<code>spring-aop</code>对<code>aspectj</code>又进一步的封装</li>
<li>Aop的实现原理是<code>jdk的动态代理</code>和<code>Cglib代理</code></li>
<li>如果<code>IOC容器组件</code>实现接口使用<code>JDK动态代理</code>，如果没有实现接口使用<code>Cglib代理</code></li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="依赖jar包"><a href="#依赖jar包" class="headerlink" title="依赖jar包"></a>依赖jar包</h3><ul>
<li><code>aspectjweaver</code></li>
<li><code>aspectjrt</code></li>
<li><code>spring-aop</code><ul>
<li>这个是spring对<code>aspectj</code>的封装，因此我们使用起来更加简单</li>
</ul>
</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul>
<li>在<code>pom.xml</code>中添加如下依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 导入aspectj依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 导入spring的aop --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建一个aop的实现类"><a href="#创建一个aop的实现类" class="headerlink" title="创建一个aop的实现类"></a>创建一个aop的实现类</h3><ul>
<li>创建类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>  <span class="comment">//spring自动创建对象</span></div><div class="line"><span class="meta">@Aspect</span>     <span class="comment">//表示当前类是一个切面类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAop</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Before</span>("bean(bean的名称)")  表示该方法在这个bean中的所有方法执行之前执行</div><div class="line">	 * 	其中可以使用通配符，比如bean("*ServiceImpl")  表示全部的service类，比如userServiceImpl</div><div class="line">	 */</div><div class="line">	<span class="meta">@Before</span>(<span class="string">"bean(userServiceImpl)"</span>)<span class="comment">//方法执行之前</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"方法执行之前..............."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在方法之后执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@After</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"在方法执行之后执行"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在业务方法没有异常的时候才会执行，并且实在<span class="doctag">@After</span>之后执行</div><div class="line">	 * 如果业务方法有异常，那么不会执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@AfterReturning</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"方法在after之后执行，并且这个业务方法没有出现异常"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在业务方法发生异常才会执行，并且在<span class="doctag">@After</span>之后执行</div><div class="line">	 * 如果没有发生异常，不会执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@AfterThrowing</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"方法发生异常执行...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 环绕通知</div><div class="line">	 * <span class="doctag">@param</span> jp</div><div class="line">	 * <span class="doctag">@throws</span> Throwable </div><div class="line">	 */</div><div class="line">	<span class="meta">@Around</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">		System.out.println(<span class="string">"环绕通知 .....之前"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//调用业务层的方法,其中的Object是接收业务层方法的返回值</span></div><div class="line">		Object object =jp.proceed();  </div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"环绕通知..........之后"</span>);</div><div class="line">		<span class="keyword">return</span> object;   <span class="comment">//这里的返回值必须返回，否则在业务层将不会获取到</span></div><div class="line">	&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义配置文件"><a href="#定义配置文件" class="headerlink" title="定义配置文件"></a>定义配置文件</h3><ul>
<li>配置注解扫描(<code>spring-aop.xm</code>l)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义spring组件扫描componet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.aop"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 解析切面注解 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="通知-5种"><a href="#通知-5种" class="headerlink" title="通知(5种)"></a>通知(5种)</h2><ul>
<li><code>@Before</code>：在业务方法执行之前调用</li>
<li><code>@After</code>：在方法之后执行</li>
<li><code>@AfterReturning</code>：在方法之后执行，只有在业务方法没有出现异常的时候才会执行</li>
<li><code>@AfterThrowing</code> ： 在方法之后执行，只有在业务方法出现异常的时候才会执行</li>
<li><code>@Around</code> : 环绕通知，在业务方法执行之前和之后执行，即使在<code>@Before</code>之前执行，在<code>@After之后</code>执行，必须又返回值，这里的返回值就是业务层方法的返回值，如果不返回，那么业务层方法就获取不到返回值</li>
</ul>
<h2 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h2><ul>
<li>业务层的所有方法，叫做连接点</li>
<li>业务类中可以被增强的方法都叫做连接点</li>
</ul>
<h2 id="切点"><a href="#切点" class="headerlink" title="切点"></a>切点</h2><ul>
<li>能切入切面逻辑的方法，叫做切点</li>
<li><strong>实际被增强的方法叫做切入点</strong> ，其他的那些没有被增强的方法(连接点)不是切点</li>
</ul>
<h2 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h2><ul>
<li>定义了增强方法的类就叫做切面</li>
</ul>
<h2 id="定义切点"><a href="#定义切点" class="headerlink" title="定义切点"></a>定义切点</h2><h3 id="第一种方式-基于spring创建的bean"><a href="#第一种方式-基于spring创建的bean" class="headerlink" title="第一种方式(基于spring创建的bean)"></a>第一种方式(基于spring创建的bean)</h3><ul>
<li><code>bena</code>的切点定义 ： <code>(bean(&quot;userServiceImpl&quot;))</code>,这个是作用到该业务类中的所有方法上，并不能定义到某一个方法上</li>
<li><code>bean(&quot;*ServiceImpl&quot;)</code>：作用到多个业务层，比如：<code>userServiceImpl</code>,<code>addressServiceImpl</code></li>
<li><code>bean(&quot;userServiceImpl&quot;)||bean(&quot;addressServiceImpl&quot;)</code>： 只作用到当前的两个业务层</li>
</ul>
<h3 id="第二种方式-基于类的"><a href="#第二种方式-基于类的" class="headerlink" title="第二种方式(基于类的)"></a>第二种方式(基于类的)</h3><ul>
<li><code>(within(&quot;全类名&quot;))</code>： 其中写的是全类名</li>
</ul>
<ul>
<li><code>(within(&quot;cn.tedu.store.service.UserServiceImpl&quot;))</code>：作用于<code>UserServiceImpl</code>这个业务层中的所有方法</li>
<li><code>(within(&quot;cn.tedu.store.service.*ServiceImpl&quot;))</code>: 使用<code>*</code>通配符，作用到全部的业务层</li>
</ul>
<h3 id="第三种方式-基于方法的"><a href="#第三种方式-基于方法的" class="headerlink" title="第三种方式(基于方法的)"></a>第三种方式(基于方法的)</h3><ul>
<li><code>(&quot;execution(* cn.tedu.store.service.UserServiceImpl.login(..))&quot;)</code> ：第一个<code>*</code>表示方法的返回类型，一般使用<code>*</code>表示，其中的形式是<code>全类名.方法名(..)</code></li>
<li><code>(&quot;execution(* cn.tedu.store.service.UserServiceImpl.get*(..))&quot;)</code>:这个将作用于<code>UserServiceImpl</code>这个业务类中的所有以<code>get</code>开头的方法</li>
<li><code>(&quot;execution(* cn.tedu.store.service.*ServiceImpl.login(..))&quot;)</code>: 这个将作用于所有的业务类中的所有以<code>get</code>开头的方法</li>
<li><code>(&quot;execution(* cn.tedu.store..get*(..))&quot;)</code> :这个将作用于<code>cn.tedu.store</code>这个包和其子包下的所有类中的所有以<code>get</code>开头的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAop</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    	在调用UserServiceImpl中的login()方法之前执行这个方法</div><div class="line">    */</div><div class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* cn.tedu.store.service.UserServiceImpl.login(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"TestAop.text"</span>);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试登录的业务方法的性能</div><div class="line">	 */</div><div class="line">	<span class="meta">@Around</span>(<span class="string">"execution(* cn.tedu.store.service.UserServiceImpl.login(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">test1</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">		Long before=System.currentTimeMillis();  <span class="comment">//获取执行之前的系统时间</span></div><div class="line">		Object object=jp.proceed();  <span class="comment">//调用业务层的方法</span></div><div class="line">		Long after=System.currentTimeMillis();  <span class="comment">//获取执行之后的系统时间</span></div><div class="line">		System.out.println(after-before);</div><div class="line">		<span class="keyword">return</span> object;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>测试系统性能</li>
<li>打印日志</li>
<li>事务处理</li>
<li>……………………………………</li>
</ol>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li>基于动态代理完成</li>
<li>Aop的实现原理是<code>jdk的动态代理</code>和<code>Cglib代理</code></li>
<li><code>cglib代理</code>使用的是<code>继承</code>，<code>动态代理</code>使用的是<code>接口</code>，如果需要添加横切逻辑的类没有接口，那么使用的是cglib代理，如果有接口，使用的是jdk的动态代理</li>
<li><code>spring-aop</code>是对<code>aspectj</code>的进一步封装</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/aop%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png" alt="aop原理图"></li>
</ul>
<h2 id="Spring-aop-处理事务"><a href="#Spring-aop-处理事务" class="headerlink" title="Spring-aop 处理事务"></a>Spring-aop 处理事务</h2><h3 id="处理的前提"><a href="#处理的前提" class="headerlink" title="处理的前提"></a>处理的前提</h3><ul>
<li><strong>默认发生<code>RuntimeException</code>或者其子类类型异常时，<code>spring-aop</code>会捕获异常，并且处理事务</strong></li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ol>
<li>创建事务管理器对象</li>
<li>开启基于注解的事务管理</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 注入数据源，这里使用的是上面配置好的DataSource --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 开启事务注解 ,transaction-manager指定的是上面配置的事务管理器的id--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注解配置事务-Transactional"><a href="#注解配置事务-Transactional" class="headerlink" title="注解配置事务@Transactional"></a>注解配置事务<code>@Transactional</code></h3><ul>
<li>可以在service的实现类上添加，那么所有的实现方法都会被事务管理器管理</li>
<li>可以在某一个方法上添加，那么只有配置了注解的方法才会被事务管理器管理</li>
<li>可以在<code>Service</code>的接口上添加注解，那么所有的接口方法都会被事务管理器管理</li>
<li><strong>我们推荐在<code>Service</code>的接口类上添加注解,并且在只涉及到<code>查询</code>语句的方法中设置传播行为为只读<code>@Transactional(readOnly=true)</code></strong></li>
</ul>
<h3 id="Spring事务的传播属性"><a href="#Spring事务的传播属性" class="headerlink" title="Spring事务的传播属性"></a>Spring事务的传播属性</h3><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PROPAGATION_REQUIRED</strong></td>
<td style="text-align:center">0</td>
<td>支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是<strong>Spring默认的事务的传播。</strong></td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td style="text-align:center">1</td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td style="text-align:center">2</td>
<td>支持当前事务，如果当前没有事务，就抛出异常。</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td style="text-align:center">3</td>
<td>新建事务，如果当前存在事务，把当前事务挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td style="text-align:center">4</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td style="text-align:center">5</td>
<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td style="text-align:center">6</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</td>
</tr>
</tbody>
</table>
<h3 id="Spring事务的隔离级别"><a href="#Spring事务的隔离级别" class="headerlink" title="Spring事务的隔离级别"></a>Spring事务的隔离级别</h3><table>
<thead>
<tr>
<th>名称</th>
<th>值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ISOLATION_DEFAULT</td>
<td>-1</td>
<td>这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应</td>
</tr>
<tr>
<td>ISOLATION_READ_UNCOMMITTED</td>
<td>1</td>
<td>这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻读。</td>
</tr>
<tr>
<td>ISOLATION_READ_COMMITTED</td>
<td>2</td>
<td>保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。</td>
</tr>
<tr>
<td>ISOLATION_REPEATABLE_READ</td>
<td>4</td>
<td>这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻读。</td>
</tr>
<tr>
<td>ISOLATION_SERIALIZABLE</td>
<td>8</td>
<td>这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻读。</td>
</tr>
</tbody>
</table>
<h3 id="配置须知"><a href="#配置须知" class="headerlink" title="配置须知"></a>配置须知</h3><ul>
<li>我们知道其实只有在涉及到数据库的修改才应该被事务管理，查询不需要被事务管理，但是一旦我们在一个<code>Service</code>接口上添加了<code>@Transactional</code>这个注解，那么默认这个接口中所有的方法都会被事务管理，因为这些方法都使用了默认的传播属性<code>PROPAGATION_REQUIRED</code>，我们可以在只涉及到<code>查询</code>语句的方法上添加<code>@Transactional(readyOnly=true)</code>，这样可以优化事务管理</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>接口上一旦添加了事务的注解，那么所有的方法都会被管理，但是我们可以设置只涉及到查询语句的方法传播属性为只读</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 博客的业务层接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Transactional</span>  <span class="comment">//在接口中添加事务管理，那么其中的所有方法都被事务管理了</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBlogService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取当前用户的所有博客分类</div><div class="line">	 * <span class="doctag">@param</span> bloggerId  博主id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)  <span class="comment">//设置传播属性为只读，因为其中只涉及了查询语句</span></div><div class="line">	<span class="function">List&lt;BlogType&gt; <span class="title">getBlogTypeList</span><span class="params">(Integer bloggerId)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加博客</div><div class="line">	 * <span class="doctag">@param</span> blog  Blog对象，其中封装了需要添加的内容</div><div class="line">	 */</div><div class="line"><span class="comment">//	@Transactional(propagation=Propagation.REQUIRED)  //这个是默认的，可以不用定义，因为在接口上已经定义了</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 分页获取博客总数</div><div class="line">	 * <span class="doctag">@param</span> bloggerId</div><div class="line">	 * <span class="doctag">@param</span> offest</div><div class="line">	 * <span class="doctag">@param</span> count</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog&gt; <span class="title">getBlogList</span><span class="params">(Integer bloggerId,Integer offest,Integer count)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取博客总数</div><div class="line">	 * <span class="doctag">@param</span> bloggerId</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">Integer <span class="title">getBlogCount</span><span class="params">(Integer bloggerId,String title,Integer typeId)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量删除博客</div><div class="line">	 * <span class="doctag">@param</span> ids</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">moveBlogByIdsBatch</span><span class="params">(Integer[] ids)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据id查询博客信息</div><div class="line">	 * <span class="doctag">@param</span> id  主键id</div><div class="line">	 * <span class="doctag">@return</span>  返回Blog对象，其中封装了需要的信息</div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">Blog <span class="title">getBlogById</span><span class="params">(Integer id)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据日期分类</div><div class="line">	 * <span class="doctag">@param</span> bloggerId</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog_Count_ReleaseDateStr_Vo&gt; <span class="title">getBlogGroupByReleaseDateStr</span><span class="params">(Integer bloggerId)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 按照博客分类来获取博客信息</div><div class="line">	 * <span class="doctag">@param</span> typeId  分类id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog&gt; <span class="title">getBlogByTypeId</span><span class="params">(Integer typeId,Integer offest,Integer count)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 按照日期分类获取博客信息</div><div class="line">	 * <span class="doctag">@param</span> bloggerId  博主id</div><div class="line">	 * <span class="doctag">@param</span> releaseDateStr  日期</div><div class="line">	 * <span class="doctag">@param</span> offest  偏移量</div><div class="line">	 * <span class="doctag">@param</span> count  数量</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog&gt; <span class="title">getBlogByreleaseDateStr</span><span class="params">(@Param(<span class="string">"bloggerId"</span>)</span>Integer bloggerId,@<span class="title">Param</span><span class="params">(<span class="string">"releaseDateStr"</span>)</span>String releaseDateStr,@<span class="title">Param</span><span class="params">(<span class="string">"offest"</span>)</span>Integer offest,@<span class="title">Param</span><span class="params">(<span class="string">"count"</span>)</span>Integer count)</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 按照日期查询博客数量</div><div class="line">	 * <span class="doctag">@param</span> bloggerId  博主id</div><div class="line">	 * <span class="doctag">@param</span> releaseDateStr  日期</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">Integer <span class="title">getBlogCount</span><span class="params">(Integer bloggerId,String releaseDateStr)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改博客的点击次数</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@param</span> clickHit</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modifyclickHit</span><span class="params">(Integer id,Integer clickHit)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring之AOP&quot;&gt;&lt;a href=&quot;#Spring之AOP&quot; class=&quot;headerlink&quot; title=&quot;Spring之AOP&quot;&gt;&lt;/a&gt;Spring之AOP&lt;/h1&gt;&lt;h2 id=&quot;Spring框架两大核心内容&quot;&gt;&lt;a href=&quot;#Spring框
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之使用总结</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Mybatis%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Mybatis之使用总结/</id>
    <published>2018-05-21T10:20:56.000Z</published>
    <updated>2018-05-21T10:21:36.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis之使用总结"><a href="#Mybatis之使用总结" class="headerlink" title="Mybatis之使用总结"></a>Mybatis之使用总结</h1><h2 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h2><ul>
<li>如果需要使用多表连接查询，使用<code>resultMap</code>对应表与实体类的对应关系太麻烦，我们可以定义一个<code>值对象</code>，其中封装了多表连接查询返回的字段，我们直接使用值对象接收返回的结果即可</li>
<li>比如我们在商城网站上的<code>显示购物车的模块</code>，使用的<code>CartVo</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 购物车的值对象</div><div class="line"> * 用于接收多表连接查询的结果</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8904622535687816912L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;    <span class="comment">//主键 购物车表中的主键</span></div><div class="line">	<span class="keyword">private</span> String goodsId;  <span class="comment">//商品的id</span></div><div class="line">	<span class="keyword">private</span> Integer uid;  <span class="comment">//用户id</span></div><div class="line">	<span class="keyword">private</span> String image;  <span class="comment">//图片地址</span></div><div class="line">	<span class="keyword">private</span> String title;  <span class="comment">//商品标题</span></div><div class="line">	<span class="keyword">private</span> Integer price; <span class="comment">//商品价格</span></div><div class="line">	<span class="keyword">private</span> Integer num;  <span class="comment">//加入购物车的商品数量</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGoodsId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsId</span><span class="params">(String goodsId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.goodsId = goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.uid = uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.title = title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CartVo [id="</span> + id + <span class="string">", goodsId="</span> + goodsId + <span class="string">", uid="</span> + uid</div><div class="line">				+ <span class="string">", image="</span> + image + <span class="string">", title="</span> + title + <span class="string">", price="</span> + price</div><div class="line">				+ <span class="string">", num="</span> + num + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="表与实体类中的字段不对应"><a href="#表与实体类中的字段不对应" class="headerlink" title="表与实体类中的字段不对应"></a>表与实体类中的字段不对应</h2><ul>
<li>一般在数据库中定义字段的格式是使用下划线<code>_</code>连接的，但是在java中定义是使用<code>驼峰式</code>的命名风格，因此难免会出现字段不一样的情况，我们一般可以使用<code>resultMap</code>实现其的对应关系，或者在查询的时候，使用别名即可</li>
</ul>
<h2 id="Mapper方法中参数问题"><a href="#Mapper方法中参数问题" class="headerlink" title="Mapper方法中参数问题"></a>Mapper方法中参数问题</h2><ul>
<li>默认的mapper接口中的方法只能有一个参数，但是我们可以使用<code>@Param(&quot;&quot;)</code>这个注解来新增加参数</li>
</ul>
<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul>
<li>批量删除mapper接口中方法传入的是数组，必须使用<code>@Param()</code>标记，否则将不能识别</li>
<li>使用的sql语句： <code>delete from 表名 where id  in (.....)</code></li>
<li>我们可以在<code>&lt;delete&gt;</code>节点中使用<code>&lt;forEach&gt;</code>标签来遍历传入的数组</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"> 	void deleteCartById(Integer[] ids);</div><div class="line"> 	批量删除</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCartById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">  		delete from t_cart </div><div class="line">  		where</div><div class="line">  		id in</div><div class="line">  		<span class="comment">&lt;!-- </span></div><div class="line">  			遍历数组ids</div><div class="line">  			collection:需要遍历的数组</div><div class="line">  			item: 数组中的每一个值</div><div class="line">  			open ： 开始的内容</div><div class="line">  			close: 结束的内容</div><div class="line">  			separator ：每个元素的分割符</div><div class="line">  			最后拼接的就是  (id,id,id,id,id)</div><div class="line">  		 --&gt;</div><div class="line">  		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">  			#&#123;id&#125;</div><div class="line">  		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis之使用总结&quot;&gt;&lt;a href=&quot;#Mybatis之使用总结&quot; class=&quot;headerlink&quot; title=&quot;Mybatis之使用总结&quot;&gt;&lt;/a&gt;Mybatis之使用总结&lt;/h1&gt;&lt;h2 id=&quot;多表连接查询&quot;&gt;&lt;a href=&quot;#多表连接查询&quot;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc之文件上传和下载</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Springmvc之文件上传和下载/</id>
    <published>2018-05-21T10:20:12.000Z</published>
    <updated>2018-05-21T10:20:35.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc之文件上传和下载"><a href="#Springmvc之文件上传和下载" class="headerlink" title="Springmvc之文件上传和下载"></a>Springmvc之文件上传和下载</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li><strong>在上传和下载之前需要在对应的根目录下创建对应的文件夹，比如我们在<code>webApp</code>下创建<code>upload</code>文件夹下</strong></li>
</ul>
<p>##　添加依赖</p>
<ul>
<li><code>commons-io</code></li>
<li><code>commons-fileupload</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加文件上传的依赖 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在配置文件中配置-spring-mvc-xml"><a href="#在配置文件中配置-spring-mvc-xml" class="headerlink" title="在配置文件中配置(spring-mvc.xml)"></a>在配置文件中配置(spring-mvc.xml)</h2><ul>
<li><strong><code>id</code>的名称一定是<code>multipartResolver</code>，不能任意指定</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 上传组件的解析器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> </span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">	<span class="comment">&lt;!-- 上传文件大小 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10000000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="制作上传表单"><a href="#制作上传表单" class="headerlink" title="制作上传表单"></a>制作上传表单</h2><ul>
<li>表单的提交方式一定为<code>POST</code></li>
<li>必须追加<code>enctype=&quot;multipart/form-data&quot;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/upload/upload.do"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">	file: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="完成controller"><a href="#完成controller" class="headerlink" title="完成controller"></a>完成controller</h2><ul>
<li>上传的参数一定为<code>MultipartFile file</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uplaod</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IllegalStateException, IOException</span>&#123;</div><div class="line">		String fileName=file.getOriginalFilename();  <span class="comment">//获取文件名</span></div><div class="line">		Long fileSize=file.getSize();   <span class="comment">//获取文件大小</span></div><div class="line">		<span class="comment">//上传  参数是文件上传后储存的路径，最终的文件上传后的文件路径为/home/chenjiabing/Documents/Blog/fileName</span></div><div class="line">		file.transferTo(<span class="keyword">new</span> File(<span class="string">"/home/chenjiabing/Documents/Blog"</span>,fileName));</div><div class="line">		<span class="comment">//重定向到首页</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"redirect:../main/showIndex.do"</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="异步上传文件"><a href="#异步上传文件" class="headerlink" title="异步上传文件"></a>异步上传文件</h2><h3 id="定义表单"><a href="#定义表单" class="headerlink" title="定义表单"></a>定义表单</h3><ul>
<li>设置<code>onchange</code>事件，只要input的改变了，那么就上传文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"iconPic"</span> <span class="attr">onchange</span>=<span class="string">"getImageFun()"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="定义Controller"><a href="#定义Controller" class="headerlink" title="定义Controller"></a>定义Controller</h3><ul>
<li>其中的参数最好定义映射关系<code>@RequestParam(&quot;file&quot;)</code>，否则有时候会出现不对应的情况</li>
<li><strong>数据库中保存的文件的路径不需要保存项目路径，只需要保存项目的文件路径即可，比如<code>/upload/文件名</code>，那么我们使用<code>http://localhost:8080/TeduStore/upload/文件名</code>就能访问到</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getImage.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">getImage</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile file,HttpSession session) <span class="keyword">throws</span> IllegalStateException, IOException</span>&#123;</div><div class="line">	ResponseResult&lt;Void&gt; result=<span class="keyword">new</span> ResponseResult&lt;Void&gt;();  <span class="comment">//创建结果集对象</span></div><div class="line">	</div><div class="line">	String projectPath=session.getServletContext().getRealPath(<span class="string">"/"</span>);  <span class="comment">//获取项目的根路径</span></div><div class="line">	<span class="comment">//如果文件不为空</span></div><div class="line">	<span class="keyword">if</span> (!file.isEmpty()) &#123;</div><div class="line">		String fileName=file.getOriginalFilename();  <span class="comment">//文件的真实名称</span></div><div class="line">           </div><div class="line">           <span class="comment">//使用UUID算法，获取随机的文件名</span></div><div class="line">		UUID uuid=UUID.randomUUID();  </div><div class="line">           </div><div class="line">		<span class="comment">//随机生成的文件名</span></div><div class="line">		fileName=uuid.toString()+fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</div><div class="line">		</div><div class="line">           User user=(User) session.getAttribute(<span class="string">"user"</span>);</div><div class="line">		<span class="comment">//数据库保存的就是 /upload/+文件名即可,不需要保存projectPath+"/upload/"+fileName</span></div><div class="line">		userservice.UpdateImage(user.getId(), <span class="string">"/upload/"</span>+fileName);</div><div class="line">           </div><div class="line">		<span class="comment">//上传文件 上传成功后的路径： 项目的根路径/upload/fileName</span></div><div class="line">		file.transferTo(<span class="keyword">new</span> File(projectPath,<span class="string">"/upload/"</span>+fileName));</div><div class="line">		</div><div class="line">		result.setState(<span class="number">1</span>);</div><div class="line">		result.setMessage(<span class="string">"上传成功"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AJAx异步提交"><a href="#AJAx异步提交" class="headerlink" title="AJAx异步提交"></a>AJAx异步提交</h3><ul>
<li>必须设置<code>contentType:false</code>,<code>processData:false</code></li>
<li>使用<code>FormData</code>对象保存数据，当然处理文件类型(File类型)的，我们也可以存储键值对，比如<code>formdata.append(&quot;username&quot;,&quot;jack&quot;)</code>,最后一起提交即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//上传文件的方法</span></div><div class="line"><span class="function">function <span class="title">getImageFun</span><span class="params">()</span></span>&#123;</div><div class="line">	var file=document.getElementById(<span class="string">"iconPic"</span>).files[<span class="number">0</span>];  <span class="comment">//获取当前的file</span></div><div class="line">	<span class="comment">// 创建FormData对象</span></div><div class="line">	var formData=<span class="keyword">new</span> FormData();</div><div class="line">	formData.append(<span class="string">"file"</span>,file);  <span class="comment">//将文件放入formData中</span></div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="string">"url"</span>:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/getImage.do"</span>,</div><div class="line">		<span class="string">"data"</span>:formData,</div><div class="line">		<span class="string">"type"</span>:<span class="string">"post"</span>,</div><div class="line">		<span class="string">"dataType"</span>:<span class="string">"json"</span>,   <span class="comment">//返回数据类型</span></div><div class="line">		<span class="string">"contentType"</span>:<span class="keyword">false</span>,  <span class="comment">//不设置上传文件类型  ，因为上传的文件有多种类型的</span></div><div class="line">		<span class="string">"processData"</span>:<span class="keyword">false</span>,    <span class="comment">//不处理数据</span></div><div class="line">		<span class="string">"success"</span>:function(obj)&#123;</div><div class="line">			alert(obj.message);</div><div class="line">			var url=window.URL.createObjectURL(file);  <span class="comment">//获取上传的的本地路径</span></div><div class="line">			$(<span class="string">"#icon"</span>).attr(<span class="string">"src"</span>,url);  <span class="comment">//将上面的头像显示为当前选择的图片</span></div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><ul>
<li>直接在输入地址即可，比如：<code>http://localhost:8080/TeduStore/upload.do/download.do?fileName=1.jpg</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文件下载</div><div class="line"> * <span class="doctag">@param</span> fileName  文件名</div><div class="line"> * <span class="doctag">@param</span> request  </div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */	</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/download.do"</span>)</div><div class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download(<span class="meta">@RequestParam</span>(<span class="string">"fileName"</span>)String fileName,HttpServletRequest request) <span class="keyword">throws</span> IOException&#123;</div><div class="line">	<span class="comment">//获取下载文件的路径，在文件中的真实路径</span></div><div class="line">	String path=request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</div><div class="line">	<span class="comment">//下载文件的全路径</span></div><div class="line">	File file=<span class="keyword">new</span> File(path+File.separator+fileName);</div><div class="line">	HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();  </div><div class="line">       <span class="comment">//下载显示的文件名，解决中文名称乱码问题  </span></div><div class="line">       String downloadFielName = <span class="keyword">new</span> String(fileName.getBytes(<span class="string">"UTF-8"</span>),<span class="string">"iso-8859-1"</span>);</div><div class="line">       <span class="comment">//通知浏览器以attachment（下载方式）打开图片</span></div><div class="line">       headers.setContentDispositionFormData(<span class="string">"attachment"</span>, downloadFielName); </div><div class="line">       <span class="comment">//application/octet-stream ： 二进制流数据（最常见的文件下载）。</span></div><div class="line">       headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</div><div class="line">        </div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(FileUtils.readFileToByteArray(file),    </div><div class="line">               headers, HttpStatus.CREATED); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc之文件上传和下载&quot;&gt;&lt;a href=&quot;#Springmvc之文件上传和下载&quot; class=&quot;headerlink&quot; title=&quot;Springmvc之文件上传和下载&quot;&gt;&lt;/a&gt;Springmvc之文件上传和下载&lt;/h1&gt;&lt;h2 id=&quot;前提&quot;&gt;&lt;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之密码加密</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Spring%E4%B9%8B%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Spring之密码加密/</id>
    <published>2018-05-21T10:19:21.000Z</published>
    <updated>2018-05-21T10:19:54.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h1><h2 id="消息摘要-数据的指纹"><a href="#消息摘要-数据的指纹" class="headerlink" title="消息摘要(数据的指纹)"></a>消息摘要(数据的指纹)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>对不固定的消息（字符串，一段文本，一个文件），通过一种特定的算法，得到一个固定长度的文本，固定长度的文本叫做消息摘要</li>
<li>比如<code>我是程序员</code>经过特定的算法之后，得到了消息摘要为：<code>adaf02515dfds7885csdfcdsc</code></li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>数据完整性的检验技术，我们将文本转换为消息摘要，然后比较消息摘要的值是否相等，如果相等那么表示两种文本相同</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>不可逆的，不能从消息摘要再得到原来的文本</li>
</ul>
<h3 id="特定的算法"><a href="#特定的算法" class="headerlink" title="特定的算法"></a>特定的算法</h3><ol>
<li>MD5</li>
<li>SHA</li>
</ol>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="添加依赖jar包"><a href="#添加依赖jar包" class="headerlink" title="添加依赖jar包"></a>添加依赖jar包</h4><ul>
<li><code>commons-codec</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试MD5Hex"><a href="#测试MD5Hex" class="headerlink" title="测试MD5Hex"></a>测试MD5Hex</h3><ul>
<li>得到的是32位的16进制的字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">		String str1=<span class="string">"你们好，未来的程序员!"</span>;</div><div class="line">		String strMessageString=DigestUtils.md5Hex(str1);</div><div class="line">		System.out.println(strMessageString);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">//读取文件</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		InputStream inputStream=<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/home/chenjiabing/Documents/Blog/AOP.md"</span>));</div><div class="line">		String message=DigestUtils.md5Hex(inputStream);</div><div class="line">		System.out.println(message);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="密码加密-1"><a href="#密码加密-1" class="headerlink" title="密码加密"></a>密码加密</h2><ul>
<li>避免在数据库中明文保存密码，通过消息摘要技术对密码进行加密</li>
</ul>
<h3 id="明文"><a href="#明文" class="headerlink" title="明文"></a>明文</h3><ul>
<li>没有加密的文字(字符串)，能看懂的文字</li>
</ul>
<h3 id="密文"><a href="#密文" class="headerlink" title="密文"></a>密文</h3><ul>
<li>经过加密后的文字(字符串)，看不出来明文的意思</li>
</ul>
<p>###　加盐处理　salt</p>
<ul>
<li>为了提高密码的安全性</li>
<li>就是在用户的密码之后随便添加一个字符串，然后连接在一起生成摘要，那么即使获取摘要，也不会被破解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">	String str1=<span class="string">"123456"</span>;</div><div class="line">	String salt=<span class="string">"这个是加盐处理"</span>;  <span class="comment">//需要加盐，随便定义一个字符串</span></div><div class="line">	String message=DigestUtils.md5Hex(str1+salt);  <span class="comment">//获取加盐之后的消息摘要</span></div><div class="line">	System.out.println(message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="密码的安全性处理"><a href="#密码的安全性处理" class="headerlink" title="密码的安全性处理"></a>密码的安全性处理</h3><ul>
<li>涉及到密码： 登录，注册，修改密码</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>创建一个<code>MD5Password工具</code>类，用于加密密码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 密码加密的类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Password</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SALT=<span class="string">"加油,骚年!"</span>;  <span class="comment">//加盐处理</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取加密之后的密码</div><div class="line">	 * <span class="doctag">@param</span> password 用户输入的密码</div><div class="line">	 * <span class="doctag">@return</span>  加密之后的密码</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title">getMd5Password</span><span class="params">(String password)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> DigestUtils.md5Hex(password+SALT);  <span class="comment">//使用了加盐处理</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在注册的时候对输入的密码进行加密存储到数据库中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * 1. 调用selectUserByUserName(User user)方法判断用户名是否存在，返回对象u</div><div class="line">	 * 2. 判断u是否为null，</div><div class="line">	 * 3. 如果为null，调用insertUser(user)方法添加</div><div class="line">	 * 4. 如果不为null，抛出异常提示controller用户名存在(UserNameAlreadyExistException)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException </span>&#123;</div><div class="line">		User u=userMapper.selectUserByUserName(user.getUsername());  <span class="comment">//调用usermapper中的方法</span></div><div class="line">		<span class="keyword">if</span> (u!=<span class="keyword">null</span>) &#123;  <span class="comment">//如果u不为null，表示用户名已经存在与数据库中，不可以再次注册了，因此抛出异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNameAlreadyExistException(<span class="string">"用户名已经存在，请重新输入!!!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果u==null，表示用户名不存在，可以添加</span></div><div class="line">			<span class="comment">//获取加密之后的密码</span></div><div class="line">			String md5Password=MD5Password.getMd5Password(user.getPassword());</div><div class="line">			<span class="comment">//将加密之后的密码设置到user中，保存到数据库中</span></div><div class="line">			user.setPassword(md5Password); </div><div class="line">			userMapper.insertUser(user);  <span class="comment">//直接调用持久层方法插入数据即可</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在登录的时候，将用户输入的密码进行加密获取到加密之后的密码，然后和数据库中的密码比较</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 登录方法</div><div class="line">	 * 1. 通过selectUserByUserName返回user对象</div><div class="line">	 * 2.判断user是否为null</div><div class="line">	 * 3.如果user=null，抛出UserNotFoundException异常</div><div class="line">	 * 4.如果user！=null，那么验证其中的密码是否正确</div><div class="line">	 * 5.如果密码不匹配，抛出PassWordNotMatchException异常</div><div class="line">	 * 6. 如果密码匹配，那么返回user对象</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException </div><div class="line">	 * <span class="doctag">@throws</span> PassWordNotMatchException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userName, String passWord)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException </span>&#123;</div><div class="line">		</div><div class="line">		User user=userMapper.selectUserByUserName(userName);  <span class="comment">//根据用户名查询，返回user对象</span></div><div class="line">		<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//user为null，表示用户名不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"用户名不存在"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果用户名存在，验证密码</span></div><div class="line">			</div><div class="line">			<span class="comment">//获取加密之后的密码，实际是一个消息摘要</span></div><div class="line">			String md5Password=MD5Password.getMd5Password(passWord);</div><div class="line">			</div><div class="line">			<span class="comment">//使用加密之后获取的消息摘要和数据库中对应的密码比较</span></div><div class="line">			<span class="keyword">if</span> (md5Password.equals(user.getPassword())) &#123;  <span class="comment">//如果密码匹配</span></div><div class="line">				<span class="keyword">return</span> user;   <span class="comment">//返回user对象即可</span></div><div class="line">			&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果密码不相同，那么直接抛出密码不匹配的异常即可</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"密码不匹配"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在修改中，将旧密码加密后和数据库中的密码比较，并且将新密码加密更新到数据库中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 修改密码</div><div class="line">	 * 1. 根据id查询用户信息，返回user</div><div class="line">	 * 2. 如果user=null,抛出用户不存在的异常</div><div class="line">	 * 3. 如果user！=null，比较user中的密码和用户输入的旧密码oldPassword是否相同</div><div class="line">	 * 4. 如果密码不相同，抛出密码不匹配的异常</div><div class="line">	 * 5. 如果密码相同，表示用户输入的旧密码是正确的，那么更新密码即可 </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">			String newPassword) <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException &#123;</div><div class="line">		User user=userMapper.seletUserById(id);  <span class="comment">//根据id查询，返回user对象</span></div><div class="line">		<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;  <span class="comment">//如果用户不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"当前登录的用户不存在"</span>);  <span class="comment">//抛出用户不存在的异常</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果当前登录的用户存在</span></div><div class="line">			<span class="comment">//获取旧密码的加密之后的密码</span></div><div class="line">			String oldMd5Password=MD5Password.getMd5Password(oldPassword);</div><div class="line">			</div><div class="line">			<span class="comment">//使用加密之后的密码和数据库中的密码比较</span></div><div class="line">			<span class="keyword">if</span> (!user.getPassword().equals(oldMd5Password)) &#123; <span class="comment">//如果返回的user对象中的密码和用户输入的旧密码不匹配</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"输入的旧密码不匹配"</span>);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果输出的旧密码正确</span></div><div class="line">				User u1=<span class="keyword">new</span> User();   <span class="comment">//创建User对象，封装修改所需的参数</span></div><div class="line">				<span class="comment">//获取加密之后的新密码</span></div><div class="line">				String newMd5Password=MD5Password.getMd5Password(newPassword);</div><div class="line">				</div><div class="line">				u1.setPassword(newMd5Password);  <span class="comment">//封装新密码，其中是加密之后的密码</span></div><div class="line">				u1.setId(id);  <span class="comment">//封装id</span></div><div class="line">				userMapper.update(u1);  <span class="comment">//调用修改的方法</span></div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码加密&quot;&gt;&lt;a href=&quot;#密码加密&quot; class=&quot;headerlink&quot; title=&quot;密码加密&quot;&gt;&lt;/a&gt;密码加密&lt;/h1&gt;&lt;h2 id=&quot;消息摘要-数据的指纹&quot;&gt;&lt;a href=&quot;#消息摘要-数据的指纹&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc拦截器拦截Ajax请求</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AAAjax%E8%AF%B7%E6%B1%82/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/拦截器拦截Ajax请求/</id>
    <published>2018-05-21T10:16:29.000Z</published>
    <updated>2018-05-21T10:18:42.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拦截器拦截Ajax请求"><a href="#拦截器拦截Ajax请求" class="headerlink" title="拦截器拦截Ajax请求"></a>拦截器拦截Ajax请求</h1><p>##　问题</p>
<ul>
<li>如果我们在拦截器中定义了拦截器的路径为<code>/user/*</code>这个地址,并且拦截器拦截器之后，如果没有登录，那么<code>重定向</code>到<code>登录界面</code>。但是我们在<code>未登录</code>的前提下使用<code>Ajax</code>异步请求了<code>/user/addUser.do</code>这个地址，出现了拦截器是拦截了，但是并没有重定向到登录界面。</li>
</ul>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul>
<li>可以参照这篇文章 ：<a href="http://www.cnblogs.com/dudu/p/ajax_302_found.html" target="_blank" rel="external">http://www.cnblogs.com/dudu/p/ajax_302_found.html</a></li>
</ul>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ul>
<li>我们可以使用<code>$.ajax</code>中的<code>error</code>中的方法内直接重定向</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    		<span class="attr">url</span>:url,</div><div class="line">    		<span class="attr">type</span>:<span class="string">"GET"</span>,</div><div class="line">    		<span class="attr">data</span>:d,</div><div class="line">    		<span class="attr">dataType</span>:<span class="string">"json"</span>,</div><div class="line">    		<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    			alert(data.message);</div><div class="line">    		&#125;,</div><div class="line">    		<span class="comment">//一旦拦截器拦截url的请求，那么会执行error中的回调方法</span></div><div class="line">    		<span class="comment">//这个是失败的执行的回调方法，我们可以在其中重定向到登录界面</span></div><div class="line">    		error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    			<span class="built_in">window</span>.location=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/showLogin.do"</span>;</div><div class="line">    		&#125;</div><div class="line">    	&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;拦截器拦截Ajax请求&quot;&gt;&lt;a href=&quot;#拦截器拦截Ajax请求&quot; class=&quot;headerlink&quot; title=&quot;拦截器拦截Ajax请求&quot;&gt;&lt;/a&gt;拦截器拦截Ajax请求&lt;/h1&gt;&lt;p&gt;##　问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们在拦截器中定义了拦截器
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>用户管理模块之用户注册</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E4%B9%8B%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/用户管理模块之用户注册/</id>
    <published>2018-05-09T00:47:43.000Z</published>
    <updated>2018-05-09T07:04:05.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理模块之用户注册"><a href="#用户管理模块之用户注册" class="headerlink" title="用户管理模块之用户注册"></a>用户管理模块之用户注册</h1><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul>
<li>注册<ul>
<li>验证用户名是否已经存在</li>
<li>验证邮箱</li>
<li>验证电话号码</li>
</ul>
</li>
<li>登录</li>
<li>个人信息修改</li>
</ul>
<h2 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h2><ul>
<li>创建数据库和表<ul>
<li>需要注意的是：一些字段不能为空，但是我们在设计表的时候不需要设计，只需要在前端设计表单的时候检查字段是否为空即可。</li>
<li>字段<code>修改的人</code>，<code>修改的时间</code>，<code>创建的人</code>，<code>创建的时间</code>这四个字段建议创建，便于后面管理</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> tedu_store;</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</div><div class="line">                    username <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">unique</span>,</div><div class="line">                   	<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>),email <span class="built_in">varchar</span>(<span class="number">50</span>),</div><div class="line">                   	phone <span class="built_in">varchar</span>(<span class="number">32</span>),</div><div class="line">                   	image <span class="built_in">varchar</span>(<span class="number">100</span>),        </div><div class="line">                    gender <span class="built_in">int</span>(<span class="number">1</span>),             //<span class="number">0</span>表示男，<span class="number">1</span>表示女</div><div class="line">                    created_user <span class="built_in">varchar</span>(<span class="number">50</span>),  //创建表的人</div><div class="line">                    created_time <span class="built_in">date</span>,         //创建的时间</div><div class="line">                    modified_user <span class="built_in">varchar</span>(<span class="number">50</span>),   //修改的人</div><div class="line">                    modified_time <span class="built_in">date</span>           //修改的时间</div><div class="line">                   )<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</div></pre></td></tr></table></figure>
<p><img src="http://ono60m7tl.bkt.clouddn.com/storeUser.png" alt="User表"></p>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><ul>
<li>变量类型应该是使用<code>包装类型</code>，比如<code>Integer</code></li>
<li>变量应该是<code>驼峰式</code>的，即不应该使用<code>下划线</code></li>
<li><code>无参</code>，<code>全参</code>构造方法</li>
<li><code>set</code>,<code>get</code>方法</li>
<li><code>hashCode</code> ,<code>equals</code>方法重写</li>
<li>实现序列化接口,生成安全码</li>
<li>重写<code>toString</code>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户的实体类</div><div class="line"> * 无参，全参构造方法</div><div class="line"> * set,get方法</div><div class="line"> * hashCode equals方法重写</div><div class="line"> * 实现序列化接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5260484517511749238L</span>;  <span class="comment">//安全码</span></div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//id主键</span></div><div class="line">	<span class="keyword">private</span> String username;  <span class="comment">//用户名</span></div><div class="line">	<span class="keyword">private</span> String password;  <span class="comment">//密码</span></div><div class="line">	<span class="keyword">private</span> String email;   <span class="comment">//邮箱</span></div><div class="line">	<span class="keyword">private</span> String phone;   <span class="comment">//电话号码</span></div><div class="line">	<span class="keyword">private</span> String image;   <span class="comment">//图片的地址</span></div><div class="line">	<span class="keyword">private</span> Integer  gender;  <span class="comment">//性别</span></div><div class="line">	<span class="keyword">private</span> String createdUser;  <span class="comment">//创建表的人</span></div><div class="line">	<span class="keyword">private</span> Date createdTime;   <span class="comment">//创建表的时间</span></div><div class="line">	<span class="keyword">private</span> String modifiedUser;   <span class="comment">//修改表的人</span></div><div class="line">	<span class="keyword">private</span> Date modifiedTime;   <span class="comment">//修改表的时间</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.email = email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.phone = phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCreatedUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> createdUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedUser</span><span class="params">(String createdUser)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.createdUser = createdUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> createdTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedTime</span><span class="params">(Date createdTime)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.createdTime = createdTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getModifiedUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> modifiedUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifiedUser</span><span class="params">(String modifiedUser)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.modifiedUser = modifiedUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getModifiedTime</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> modifiedTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifiedTime</span><span class="params">(Date modifiedTime)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.modifiedTime = modifiedTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result</div><div class="line">				+ ((createdTime == <span class="keyword">null</span>) ? <span class="number">0</span> : createdTime.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((createdUser == <span class="keyword">null</span>) ? <span class="number">0</span> : createdUser.hashCode());</div><div class="line">		result = prime * result + ((email == <span class="keyword">null</span>) ? <span class="number">0</span> : email.hashCode());</div><div class="line">		result = prime * result + ((gender == <span class="keyword">null</span>) ? <span class="number">0</span> : gender.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((image == <span class="keyword">null</span>) ? <span class="number">0</span> : image.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((modifiedTime == <span class="keyword">null</span>) ? <span class="number">0</span> : modifiedTime.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((modifiedUser == <span class="keyword">null</span>) ? <span class="number">0</span> : modifiedUser.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((password == <span class="keyword">null</span>) ? <span class="number">0</span> : password.hashCode());</div><div class="line">		result = prime * result + ((phone == <span class="keyword">null</span>) ? <span class="number">0</span> : phone.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((username == <span class="keyword">null</span>) ? <span class="number">0</span> : username.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		User other = (User) obj;</div><div class="line">		<span class="keyword">if</span> (createdTime == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.createdTime != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!createdTime.equals(other.createdTime))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (createdUser == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.createdUser != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!createdUser.equals(other.createdUser))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (email == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.email != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!email.equals(other.email))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (gender == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.gender != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!gender.equals(other.gender))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.image != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!image.equals(other.image))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (modifiedTime == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.modifiedTime != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!modifiedTime.equals(other.modifiedTime))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (modifiedUser == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.modifiedUser != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!modifiedUser.equals(other.modifiedUser))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.password != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(other.password))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (phone == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.phone != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!phone.equals(other.phone))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.username != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!username.equals(other.username))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span></div><div class="line">				+ password + <span class="string">", email="</span> + email + <span class="string">", phone="</span> + phone</div><div class="line">				+ <span class="string">", image="</span> + image + <span class="string">", gender="</span> + gender + <span class="string">", createdUser="</span></div><div class="line">				+ createdUser + <span class="string">", createdTime="</span> + createdTime</div><div class="line">				+ <span class="string">", modifiedUser="</span> + modifiedUser + <span class="string">", modifiedTime="</span></div><div class="line">				+ modifiedTime + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h3><ul>
<li>提交的<code>username</code>，<code>password</code>，<code>email</code>，<code>phone</code>，其中<code>username</code>不能重复，因此需要判断用户名是否存在</li>
<li>上面的四个字段都不能为<code>空</code>，虽然在表中没有设计，但是在<code>JSP</code>页面使用了<code>js</code>控制了</li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><p>验证用户名是否存在(异步Ajax)</p>
<ol>
<li>持久层需要定义一个方法：根据用户名查找用户信息，如果返回的值不为<code>null</code>表示用户名已经存在，如果不存在表示可以注册</li>
<li><code>service层</code>需要验证查询的结果是否为<code>null</code>，如果为空，返回<code>true</code>，表示用户名不存在，那么可以使用这个用户名注册，如果不为<code>null</code>，返回<code>false</code>，那么不可以使用这个用户名注册</li>
</ol>
</li>
<li><p>验证邮箱是否存在(异步Ajax)</p>
<ol>
<li>持久层需要定义一个方法：根据邮箱查询人数，那么如果<code>人数 &gt;=1</code>表示已经存在该邮箱，否则不存在，可以注册</li>
<li><code>service层</code>需要验证返回的<code>人数是否等于0</code>,如果不是，返回<code>false</code>表示邮箱已经存在，不能使用，如果返回<code>true</code>表示邮箱不存在，可以使用该邮箱注册</li>
</ol>
</li>
<li><p>验证电话号码是否存在(异步Ajax)</p>
<ol>
<li>持久层定义一个方法： 根据电话号码查询人数，那么如果<code>人数 &gt;=1</code>表示已经存在该号码，否则不存在，可以注册</li>
<li><code>service</code>层需要验证返回的<code>人数是否等于0</code>，如果不是，返回<code>false</code>表示电话号码已经存在，不能使用这个号码注册，如果返回<code>true</code>表示号码不存在，可以使用这个号码注册</li>
</ol>
<p>​</p>
</li>
</ol>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ul>
<li><code>regist.jsp</code>表单提交  ———&gt; <code>Controller</code>中对应的处理请求的方法 ———–&gt; <code>service</code>层中业务逻辑   ——–&gt; <code>持久</code>层，操作数据库，返回数据给<code>service</code> </li>
</ul>
<h3 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h3><ul>
<li>我们开发的顺序应该是和执行顺序相反，这样便于编写代码</li>
<li>即是： <code>持久层mapper</code>操作数据库 ———&gt; <code>Service层</code>业务逻辑层 —————-&gt; <code>Controller层</code> ———————&gt; <code>JSP</code></li>
</ul>
<h3 id="持久层-mapper或者dao"><a href="#持久层-mapper或者dao" class="headerlink" title="持久层(mapper或者dao)"></a>持久层(mapper或者dao)</h3><h4 id="在cn-tedu-store-mapper包下创建UsreMapper接口"><a href="#在cn-tedu-store-mapper包下创建UsreMapper接口" class="headerlink" title="在cn.tedu.store.mapper包下创建UsreMapper接口"></a>在<code>cn.tedu.store.mapper</code>包下创建UsreMapper接口</h4><ul>
<li>其中实现<code>插入用户</code>的功能</li>
<li>其中需要保证<code>用户名</code>唯一，因此需要验证用户名是否存在，那么需要一个方法根据用户名查找用户</li>
<li><strong>注意：如果表中的字段和实体类中的字段不一致，那么在查询返回字段的时候一定要起一个别名，这个别名要和实体类中的字段相同，否则不能成功调用<code>set</code>方法为指定字段赋值</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**	</span></div><div class="line"> * 用户类的mapper层</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加用户信息</div><div class="line">	 * <span class="doctag">@param</span> user User对象 其中封装的是用户的信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 根据用户名查找对象</div><div class="line">	 * <span class="doctag">@param</span> username  用户名</div><div class="line">	 * <span class="doctag">@return</span>  如果存在返回User对象，否则返回null</div><div class="line">	 */</div><div class="line">	<span class="function">User <span class="title">selectUserByUserName</span><span class="params">(String username)</span></span>;</div><div class="line">	</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 通过邮箱查询</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span> 如果返回的数&gt;=1表示已经存在，返回0表示没有</div><div class="line">	 */</div><div class="line">	<span class="function">Integer <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 通过电话号码查询</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span>  如果返回的数&gt;=1表示已经存在这个电话号码，如果返回0表示不存在这个电话号码可以注册</div><div class="line">	 * 	 */</div><div class="line">	<span class="function">Integer <span class="title">selectByPhone</span><span class="params">(String phone)</span></span>;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在src-main-resource-mapper文件夹新建UserMapper-xml"><a href="#在src-main-resource-mapper文件夹新建UserMapper-xml" class="headerlink" title="在src/main/resource/mapper文件夹新建UserMapper.xml"></a>在<code>src/main/resource/mapper</code>文件夹新建<code>UserMapper.xml</code></h4><ul>
<li><code>&lt;mapper namespace=&quot;&quot;&gt;</code>写的是<code>UserMapper</code>的全类名</li>
</ul>
<ul>
<li>在其中添加一个<code>insert</code>节点，用于执行插入语句</li>
<li>添加一个<code>select</code>用于根据用户名查询用户信息，<strong>其中返回的结果字段如果和实体类属性不一致，那么需要起别名和实体类属性对应</strong></li>
<li>添加一个<code>select</code>语句根据邮箱<code>email</code>查询，返回的是<code>人数</code>，用于验证邮箱</li>
<li>添加一个<code>select</code>语句根据电话号码<code>phone</code>查询，返回的是人数，用于验证电话号码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- namespace指定的UserMapper接口的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.UserMapper"</span>&gt;</span></div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- </span></div><div class="line"> 		对应的方法： void insertUser(User user);</div><div class="line"> 		功能 ： 添加用户信息</div><div class="line"> 		返回值： 默认返回的是受影响的行数，不需要写返回类型，除非是select语句一定要写返回类型resultType或者resultMap</div><div class="line"> 		id ： 是UserMapper.java接口中的方法名称</div><div class="line"> 		parameterType ： 参数类型，写的是全类名。这里如果是基本类型，比如String,Integer可以不用写，如果是实体类对象最好是写上</div><div class="line">  --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line"> 	insert into 			t_user(username,password,email,phone,image,gender,created_user,created_time,modified_user,modified_time)</div><div class="line"> 	values(#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;phone&#125;,#&#123;image&#125;,#&#123;gender&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;)</div><div class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"> </div><div class="line"> </div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"> 	User selectUserByUserName(String username);</div><div class="line"> 	根据用户名查询用户信息，如果存在返回对象，否则返回null</div><div class="line"> 	resultType：返回值类型</div><div class="line"> 	如果表中的字段和实体类中的字段不相同，那么需要指定别名，否则不能成功赋值</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByUserName"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line">  	select id,username,password,email,gender,image,</div><div class="line">  	phone,created_user as createdUser,</div><div class="line">  	created_time as createdTime,</div><div class="line">  	modified_user as modifiedUser,</div><div class="line">  	modified_time as modifiedTime</div><div class="line">  	from t_user where username=#&#123;username&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line">     </div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line">  	Integer selectByEmail(String email);</div><div class="line">  	功能： 通过邮箱查找</div><div class="line">  	resultType : 返回的是Integer类型的，需要写全类名，在select语句中必须定义返回值类型</div><div class="line">   --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByEmail"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">  	select count(*) from t_user where email=#&#123;email&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line">   </div><div class="line">   <span class="comment">&lt;!-- </span></div><div class="line">  	Integer selectByPhone(String phone);</div><div class="line">  	功能： 通过电话号码查询，返回的是人数</div><div class="line">   --&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPhone"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">   		select count(*) from t_user where phone=#&#123;phone&#125;</div><div class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		</div><div class="line">		User user =<span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"郑元梅"</span>);</div><div class="line">		user.setPassword(<span class="string">"123456"</span>);</div><div class="line">		user.setEmail(<span class="string">"1836581289@163.com"</span>);</div><div class="line">		user.setPhone(<span class="string">"1836581289"</span>);		</div><div class="line">		ac.close();</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserByUserName</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">				AbstractApplicationContext ac</div><div class="line">					= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">						<span class="string">"spring-mvc.xml"</span>,</div><div class="line">						<span class="string">"spring-dao.xml"</span>);</div><div class="line">				</div><div class="line">				<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">				UserMapper userMapper</div><div class="line">					= ac.getBean(</div><div class="line">						<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">			</div><div class="line">				User user=userMapper.selectUserByUserName(<span class="string">"陈加兵"</span>);</div><div class="line">				System.out.println(user);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByEmail</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">				AbstractApplicationContext ac</div><div class="line">					= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">						<span class="string">"spring-mvc.xml"</span>,</div><div class="line">						<span class="string">"spring-dao.xml"</span>);</div><div class="line">				</div><div class="line">				<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">				UserMapper userMapper</div><div class="line">					= ac.getBean(</div><div class="line">						<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">			</div><div class="line">				Integer count=userMapper.selectByEmail(<span class="string">"1836581289@163.com"</span>);</div><div class="line">				System.out.println(count);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>, <span class="string">"spring-dao.xml"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper = ac.getBean(<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line"></div><div class="line">		Integer count = userMapper.selectByPhone(<span class="string">"1836581289"</span>);</div><div class="line">		System.out.println(count);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="业务层-service"><a href="#业务层-service" class="headerlink" title="业务层(service)"></a>业务层(service)</h3><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><ul>
<li>在业务层中调用持久层的方法，如果此时的<code>username</code>已经存在了，那么抛出<code>异常</code>，如果不存在就添加即可。</li>
<li>具体的逻辑：<ol>
<li>调用<code>selectUserByUserName(User user)</code>方法判断用户名是否存在，返回对象<code>u</code></li>
<li>判断u是否为<code>null</code></li>
<li>如果为<code>null</code>，调用<code>insertUser(user)</code>方法添加</li>
<li>如果不为null，抛出异常提示<code>controller</code>用户名存在(<code>UserNameAlreadyExistException</code>)</li>
</ol>
</li>
</ul>
<ul>
<li><p>业务层通过<code>抛出异常的信息</code>提示<code>Controller</code>应该处理怎样的结果</p>
<p>​</p>
<p>​</p>
</li>
</ul>
<h4 id="在cn-tedu-store-service-ex包中新建异常类UserNameAlreadyExistException"><a href="#在cn-tedu-store-service-ex包中新建异常类UserNameAlreadyExistException" class="headerlink" title="在cn.tedu.store.service.ex包中新建异常类UserNameAlreadyExistException"></a>在<code>cn.tedu.store.service.ex</code>包中新建异常类<code>UserNameAlreadyExistException</code></h4><ul>
<li>用户名存在的异常</li>
</ul>
<ul>
<li><strong>继承<code>Exception</code>，重写其中的构造方法，那么会在调用的时候会要求捕捉或者抛出，会提示开发者处理。如果继承了<code>RuntimeException</code>,这个是运行时异常，那么在调用的时候是不会提醒开发者捕捉或者抛出异常，因此我们这里要继承<code>Exception</code>这个父类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户名存在抛出的异常</div><div class="line"> * 继承Exception，实现其中的构造方法</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNameAlreadyExistException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message, Throwable cause,</span></span></div><div class="line">			<span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace) &#123;</div><div class="line">		<span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message, cause);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(cause);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-service中新建接口IUserService"><a href="#在cn-tedu-store-service中新建接口IUserService" class="headerlink" title="在cn.tedu.store.service中新建接口IUserService"></a>在<code>cn.tedu.store.service</code>中新建接口<code>IUserService</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理用户业务逻辑的接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * <span class="doctag">@param</span> user User对象</div><div class="line">	 * <span class="doctag">@throws</span> UserNameAlreadyExistException   用户名已经存在抛出的异常</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证邮箱是否存在</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span> 如果=0返回true，邮箱可以使用。如果 &gt;=1返回false，邮箱不可以使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkEmail</span><span class="params">(String email)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证电话号码是否存在</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span> 如果返回true表示电话号码可以使用，如果返回false表示电话号码不可以使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkPhone</span><span class="params">(String phone)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证用户名是否存在</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@return</span>  返回true表示用户名不存在，可以注册，返回false表示用户名已经存在，不可使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-service中新建IUserService接口的实现类UserServiceImpl"><a href="#在cn-tedu-store-service中新建IUserService接口的实现类UserServiceImpl" class="headerlink" title="在cn.tedu.store.service中新建IUserService接口的实现类UserServiceImpl"></a>在<code>cn.tedu.store.service</code>中新建<code>IUserService</code>接口的实现类<code>UserServiceImpl</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * IUserService接口的实现类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */ </div><div class="line"><span class="meta">@Service</span>   <span class="comment">//注解标记，用于spring自动创建对象，类名首字母小写</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</div><div class="line">	<span class="meta">@Resource</span>  <span class="comment">//自动注入对象，自动创建UserMapper对象</span></div><div class="line">	<span class="keyword">private</span> UserMapper userMapper;  <span class="comment">//UseMapper的对象，用于调用操作数据库的方法</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * 1. 调用selectUserByUserName(User user)方法判断用户名是否存在，返回对象u</div><div class="line">	 * 2. 判断u是否为null，</div><div class="line">	 * 3. 如果为null，调用insertUser(user)方法添加</div><div class="line">	 * 4. 如果不为null，抛出异常提示controller用户名存在(UserNameAlreadyExistException)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException </span>&#123;</div><div class="line">		User u=userMapper.selectUserByUserName(user.getUsername());  <span class="comment">//调用usermapper中的方法</span></div><div class="line">		<span class="keyword">if</span> (u!=<span class="keyword">null</span>) &#123;  <span class="comment">//如果u不为null，表示用户名已经存在与数据库中，不可以再次注册了，因此抛出异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNameAlreadyExistException(<span class="string">"用户名已经存在，请重新输入!!!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果u==null，表示用户名不存在，可以添加</span></div><div class="line">			userMapper.insertUser(user);  <span class="comment">//直接调用持久层方法插入数据即可</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//验证邮箱是否存在，返回true表示邮箱可以使用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userMapper.selectByEmail(email)==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//验证电话号码是否可用，如果返回true表示可用，false表示不可用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userMapper.selectByPhone(phone)==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//验证用户名是否存在，返回true表示不存在，可用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">		User user=userMapper.selectUserByUserName(userName);</div><div class="line">		<span class="keyword">return</span> user==<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试service"><a href="#测试service" class="headerlink" title="测试service"></a>测试service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRegistService</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="comment">//加载Spring的配置文件</span></div><div class="line">			AbstractApplicationContext ac</div><div class="line">				= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">					<span class="string">"spring-dao.xml"</span>,</div><div class="line">					<span class="string">"spring-service.xml"</span>);</div><div class="line">			</div><div class="line">			IUserService userService=ac.getBean(<span class="string">"userServiceImpl"</span>,IUserService.class);</div><div class="line">			</div><div class="line">			User user=<span class="keyword">new</span> User();</div><div class="line">			user.setUsername(<span class="string">"郑元梅"</span>);</div><div class="line">			user.setPassword(<span class="string">"12345678"</span>);</div><div class="line">			user.setEmail(<span class="string">"1879626@163.com"</span>);</div><div class="line">			user.setPhone(<span class="string">"138525855"</span>);</div><div class="line">			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				userService.register(user);  <span class="comment">//调用service中的注册方法</span></div><div class="line">			&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">				System.out.println(e.getMessage());  <span class="comment">//输出错误提示信息</span></div><div class="line">			&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckEmailService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkEmail(<span class="string">"187962@163.com"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"邮箱不存在，可以注册"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"邮箱存在，不可以注册"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckPhoneService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkPhone(<span class="string">"1836581289"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"电话号码不存在，可以注册"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"电话号码存在，不可以注册"</span>);</div><div class="line">	&#125;</div><div class="line">       </div><div class="line">   <span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckUserNameService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkUserName(<span class="string">"Jack"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"用户名不存在，，可以使用"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"用户名已经已经存在，不可用"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="控制层-controller"><a href="#控制层-controller" class="headerlink" title="控制层(controller)"></a>控制层(controller)</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ol>
<li>异步验证用户名(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkUserName.do</code></li>
</ol>
</li>
<li>异步验证电话号码(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkPhone.do</code></li>
</ol>
</li>
<li>异步验证邮箱(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkEmail.do</code></li>
</ol>
</li>
<li>显示注册页面 <ol>
<li><code>/user/showRegister.do</code></li>
</ol>
</li>
<li>点击注册按钮，实现注册(异步提交)<ol>
<li><code>/user/register.do</code></li>
<li>在其中还是要检测用户名是否存在，因为当你在前面输入的时候可能检测到的用户名不存在，但是如果另外一个人也用的和你一样的用户名，并且他先提交了，那么此时如果不检查，就会发生冲突了</li>
</ol>
</li>
</ol>
<h4 id="在cn-tedu-store-bean包中新建ResponseResult"><a href="#在cn-tedu-store-bean包中新建ResponseResult" class="headerlink" title="在cn.tedu.store.bean包中新建ResponseResult"></a>在<code>cn.tedu.store.bean</code>包中新建ResponseResult</h4><ul>
<li>封装异步请求结果</li>
<li>其中的<code>T</code>是用来指定<code>泛型</code>的，如果使用<code>ResponseResult&lt;List&lt;User&gt;&gt; responseResult=new ResponseResult&lt;List&lt;User&gt;&gt;();</code>创建对象，那么这个<code>T</code>的泛型就是<code>List&lt;User&gt;</code></li>
<li>如果不需要指定泛型，那么可以使用<code>Void</code>指定即可，那么就不能为<code>data</code>赋值了，因为你的泛型指定了<code>Void</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 封装异步请求的返回的结果类型</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;  泛型，</div><div class="line"> 				用于封装返回数据，如果创建对象为这样ResponseResult&lt;List&lt;User&gt;&gt; 								responseResult=new ResponseResult&lt;List&lt;User&gt;&gt;();</div><div class="line"> * 				那么此时的data类型是List&lt;User&gt;类型的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer state;  <span class="comment">//响应状态码</span></div><div class="line">	<span class="keyword">private</span> String message;   <span class="comment">//响应信息</span></div><div class="line">	<span class="keyword">private</span> T data;  <span class="comment">//响应的数据</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> state;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(Integer state)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.state = state;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.message = message;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> data;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.data = data;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((data == <span class="keyword">null</span>) ? <span class="number">0</span> : data.hashCode());</div><div class="line">		result = prime * result + ((message == <span class="keyword">null</span>) ? <span class="number">0</span> : message.hashCode());</div><div class="line">		result = prime * result + ((state == <span class="keyword">null</span>) ? <span class="number">0</span> : state.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		ResponseResult other = (ResponseResult) obj;</div><div class="line">		<span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.data != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!data.equals(other.data))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.message != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!message.equals(other.message))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.state != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!state.equals(other.state))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"ResponseResult [state="</span> + state + <span class="string">", message="</span> + message</div><div class="line">				+ <span class="string">", data="</span> + data + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-controller中创建UserController类"><a href="#在cn-tedu-store-controller中创建UserController类" class="headerlink" title="在cn.tedu.store.controller中创建UserController类"></a>在<code>cn.tedu.store.controller</code>中创建<code>UserController</code>类</h4><ul>
<li>添加<code>@Controller</code>注解</li>
<li>使用<code>@RequestMapping(&quot;/user&quot;)</code>添加一个二级路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="comment">// 创建Service对象，自动注入</span></div><div class="line">	<span class="keyword">private</span> IUserService userservice;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 显示注册视图 register.jsp</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/showRegister.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">showRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 直接返回一个视图名称即可</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证用用户名，异步请求, 用户名失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkUserName.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkUserName</span><span class="params">(</span></span></div><div class="line">			@RequestParam(<span class="string">"username"</span>) String userName) &#123;</div><div class="line">		System.out.println(userName);</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkUserName(userName); <span class="comment">// 调用service验证方法</span></div><div class="line">		<span class="comment">// 如果falg==true,表示用户名可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);   <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"用户名可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"用户名不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证电话号码，文本框失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkPhone.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkPhone(phone);</div><div class="line">		<span class="comment">// 如果falg==true,表示电话号码可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"电话号码可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"电话号码不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证邮箱地址，文本框失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkEmail.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkEmail(email);</div><div class="line">		<span class="comment">// 如果falg==true,表示邮箱可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"邮箱地址可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"邮箱地址不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 点击提交按异步请求注册</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@param</span> password  密码</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@param</span> phone  电话号码</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/register.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">register</span><span class="params">(@RequestParam(<span class="string">"uname"</span>)</span>String userName,@<span class="title">RequestParam</span><span class="params">(<span class="string">"upwd"</span>)</span>String password,String email,String phone)</span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		</div><div class="line">		User user=<span class="keyword">new</span> User();   <span class="comment">//创建User对象</span></div><div class="line">		user.setUsername(userName);</div><div class="line">		user.setPassword(password);</div><div class="line">		user.setEmail(email);</div><div class="line">		user.setPhone(phone);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			userservice.register(user);  <span class="comment">//调用业务层的注册方法</span></div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置注册成功的状态吗</span></div><div class="line">			result.setMessage(<span class="string">"注册成功"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置注册失败的状态吗</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Regist-jsp页面设计"><a href="#Regist-jsp页面设计" class="headerlink" title="Regist.jsp页面设计"></a>Regist.jsp页面设计</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><ul>
<li>文本框失去焦点发出异步请求验证用户名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器用户名是否已经存在**/</span></div><div class="line">  		 $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkUserName.do?username="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#unamespan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求验证邮箱</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器邮箱是否已经存在**/</span></div><div class="line">      $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkEmail.do?email="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#emailspan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#emailspan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#emailspan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求验证电话号码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器电话号码是否已经存在**/</span></div><div class="line">      $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkPhone.do?phone="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#phonespan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#phonespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#phonespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求实现注册</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发出异步请求</span></div><div class="line">  	 $.ajax(&#123;</div><div class="line">  		 <span class="attr">url</span>:<span class="string">"&lt;%=request.getContextPath()%&gt;/user/register.do"</span>,</div><div class="line">  		 <span class="attr">type</span>:<span class="string">"POST"</span>,</div><div class="line">  		 <span class="attr">data</span>: $(<span class="string">"#form-register"</span>).serialize(),   <span class="comment">//提交表单中的所有数据</span></div><div class="line">  		 dataType:<span class="string">"json"</span>,</div><div class="line">  		 <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  			 <span class="comment">//判断状态码，如果用户已经存在</span></div><div class="line">  			<span class="keyword">if</span>(obj.state==<span class="number">0</span>)&#123;	</div><div class="line">  			<span class="comment">//设置提示语句	</span></div><div class="line">  			$(<span class="string">"#unamespan"</span>).text(obj.message);</div><div class="line">  			$(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">  			&#125;<span class="keyword">else</span>&#123;</div><div class="line">  			 	<span class="comment">//注册成功跳转到登录界面</span></div><div class="line">  			 	<span class="comment">// showLogin.do</span></div><div class="line">  			&#125;</div><div class="line">  		 &#125;</div><div class="line">  	 &#125;);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>新建的异常类最好继承<code>Exception</code>，那么在调用带有抛出异常的信息的service方法会在编辑提示捕捉或者抛出，便于提示开发者完成相应的逻辑</li>
<li><strong>数据库表中的字段是以<code>下划线</code>形式定义的，比如<code>created_user</code>,但是java中的实体类定义的字段的形式是<code>驼峰式</code>的，比如<code>createdUser</code>，那么这样的话，表中的字段和实体类类的属性就不是一一对应了，因此在查询数据的时候，需要对返回结果起和实体类字段一样的别名，否则将不能成功赋值</strong></li>
<li>在写<code>XXMapper.xml</code>文件的时候,<code>select</code>节点是一定要有返回值类型的<code>resultType</code>或者<code>resultMap</code>的，即使是基本类型</li>
<li>在<code>service</code>中，如果逻辑比较简单，比如验证邮箱，验证号码等，那么不需要抛出异常，只需要定义返回值提示<code>Controller层</code>即可</li>
</ol>
<ul>
<li>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=35idjy1iqdk4g" target="_blank" rel="external">https://cloud.tencent.com/developer/support-plan?invite_code=35idjy1iqdk4g</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户管理模块之用户注册&quot;&gt;&lt;a href=&quot;#用户管理模块之用户注册&quot; class=&quot;headerlink&quot; title=&quot;用户管理模块之用户注册&quot;&gt;&lt;/a&gt;用户管理模块之用户注册&lt;/h1&gt;&lt;h2 id=&quot;实现的功能&quot;&gt;&lt;a href=&quot;#实现的功能&quot; class
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>搭建工程</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E6%90%AD%E5%BB%BA%E5%B7%A5%E7%A8%8B/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/搭建工程/</id>
    <published>2018-05-09T00:46:52.000Z</published>
    <updated>2018-05-09T00:47:16.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul>
<li><code>Spring + SpringMVC + Mybatis</code>  ———–  <code>SSM</code></li>
</ul>
<h2 id="创建工程步骤"><a href="#创建工程步骤" class="headerlink" title="创建工程步骤"></a>创建工程步骤</h2><ul>
<li>创建<code>Maven</code>工程</li>
<li>添加<code>web.xml</code>和<code>tomcat</code>运行环境</li>
<li>创建包的结构<ul>
<li>实体类的包：<code>cn.tedu.store.bean</code></li>
<li>控制器层：<code>cn.tedu.store.controller</code></li>
<li>业务层 : <code>cn.tedu.store.service</code></li>
<li>持久层 ：<code>cn.tedu.store.mapper</code></li>
</ul>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/storepackage.png" alt="包的结构"></p>
<ul>
<li>添加依赖<code>pom.xml</code><ul>
<li><code>spring-webmvc</code></li>
<li><code>spring-jdbc</code></li>
<li><code>mybatis</code></li>
<li><code>mybatis-spring</code></li>
<li><code>commons-dbcp</code></li>
<li><code>jackson</code></li>
<li><code>junit</code></li>
<li><code>jstl</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring 整合jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MySQL驱动jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP连接池--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jackson，自动转换为JSON数据 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jstl标签库 用于jsp页面标签 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>添加配置文件(<code>src/main/resource</code>文件下)</p>
<ul>
<li>创建一个新的文件夹 <code>mappers</code>，存放<code>mybaits</code>的映射文件： <code>XXXMapper.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- namespace指定的UserMapper的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.UserMapper"</span>&gt;</span></div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
<ul>
<li>创建一个<code>db.properties</code>文件，其中存放的是<code>dbcp</code>连接池的配置属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/tedu_store?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=2</div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<p>​</p>
<ul>
<li>创建一个<code>spring-mvc.xml</code>配置文件，用于配置<code>springmvc</code>的配置信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.controller"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置ViewResolver视图解析器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/web/"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置驱动，用于@ResponseBody的使用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 其中还需要定义拦截器和其他的配置 --&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
<ul>
<li>创建一个<code>spring-dao.xml</code>配置文件，用于配置数据库的链接信息</li>
</ul>
<p>​</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.mapper"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 加载db.properties,其中定义了数据库的配置信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置MapperScannerConfigurer --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 用于配置持久层接口在哪里，指定mapper的包，spring会自动为我们创建这个XXXMapper接口的对象，名称为类名首字母小写</span></div><div class="line">		--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.tedu.store.mapper"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line"></div><div class="line"> 	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line"></div><div class="line"> 		<span class="comment">&lt;!-- 用于配置数据库连接池 --&gt;</span></div><div class="line"></div><div class="line"> 		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line"></div><div class="line"> 		<span class="comment">&lt;!-- 用于配置持久层映射文件在哪里,所有的xml文件，使用通配符 --&gt;</span></div><div class="line"></div><div class="line"> 		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mappers/*.xml"</span> /&gt;</span></div><div class="line"></div><div class="line"> 	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>创建一个<code>spring-service.xml</code>配置文件，用于配置业务逻辑信息</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.service"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div></pre></td></tr></table></figure>
<p>  ​</p>
<ul>
<li>修改<code>web.xml</code>文件，添加前端控制器<code>DispatcherServlet</code>和解决中文乱码的过滤器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置中文乱码过滤器 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 针对所有的路径都需要过滤 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置前端控制器DispathcerServlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="文件约束"><a href="#文件约束" class="headerlink" title="文件约束"></a>文件约束</h2><ul>
<li><code>spring</code>和<code>springmvc</code>配置文件的约束</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>XXXMapper.xml</code>的约束</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建工程&quot;&gt;&lt;a href=&quot;#搭建工程&quot; class=&quot;headerlink&quot; title=&quot;搭建工程&quot;&gt;&lt;/a&gt;搭建工程&lt;/h1&gt;&lt;h2 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>商城网站之模块设计</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99%E4%B9%8B%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/商城网站之模块设计/</id>
    <published>2018-05-09T00:46:07.000Z</published>
    <updated>2018-05-09T00:46:35.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM-商城"><a href="#SSM-商城" class="headerlink" title="SSM - 商城"></a>SSM - 商城</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul>
<li>注册</li>
<li>登录</li>
<li>个人信息修改</li>
</ul>
<h3 id="地址管理"><a href="#地址管理" class="headerlink" title="地址管理"></a>地址管理</h3><ul>
<li>添加收货地址</li>
<li>查询所有的收货地址</li>
<li>修改</li>
<li>删除</li>
</ul>
<h3 id="商品"><a href="#商品" class="headerlink" title="商品"></a>商品</h3><ul>
<li>商品分类</li>
<li>商品展示</li>
<li>商品详情</li>
</ul>
<h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><ul>
<li>将商品添加到购物车</li>
<li>购物车管理</li>
</ul>
<h2 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h2><ul>
<li>显示订单</li>
<li>付款</li>
</ul>
<h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><ol>
<li>需求分析</li>
<li>概要设计</li>
<li>详细设计</li>
<li>编码</li>
<li>测试</li>
<li>交付</li>
<li>维护</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSM-商城&quot;&gt;&lt;a href=&quot;#SSM-商城&quot; class=&quot;headerlink&quot; title=&quot;SSM - 商城&quot;&gt;&lt;/a&gt;SSM - 商城&lt;/h1&gt;&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/选择排序/</id>
    <published>2018-05-09T00:44:07.000Z</published>
    <updated>2018-05-09T00:45:04.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="思想-从小到大"><a href="#思想-从小到大" class="headerlink" title="思想(从小到大)"></a>思想(从小到大)</h2><ul>
<li>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>假设数组中有个<code>n</code>元素</li>
<li><code>第一趟</code>：在整个数组中选择出最小的元素，和数组中的第一个元素交换位置，那么此时的第一个元素就是最小的</li>
<li><code>第二趟</code>： 从第二个元素开始再次查找剩余数组中最小的元素，和数组中的第二个元素交换位置，那么此时的第一个和第二个元素就是最小的</li>
<li><code>第三趟</code>： 从第三个元素开始再次查找剩余数组中最小的元素，和数组中的第三个元素交换位置，那么此时的前三个就是从小到大的排序</li>
<li><code>第四趟</code>………………………….<code>第n-1趟</code></li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h1&gt;&lt;h2 id=&quot;思想-从小到大&quot;&gt;&lt;a href=&quot;#思想-从小到大&quot; class=&quot;headerlink&quot; title=&quot;思想(
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>插入排序算法</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/插入排序算法/</id>
    <published>2018-05-09T00:43:57.000Z</published>
    <updated>2018-05-09T00:44:35.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序算法"><a href="#插入排序算法" class="headerlink" title="插入排序算法"></a>插入排序算法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><ul>
<li>我们以<code>从小到大</code>的排序进行讲解</li>
</ul>
<ul>
<li>插入排序就是将一个元素插入到一个已经是有序的序列中， 通过遍历比较这个<code>待插入元素</code>和有序的序列元素之间的大小，来比较需要插入的位置，使其仍然是一个有序的数组。</li>
<li><strong>数组插入的算法：向后移动元素给待插入的数据位置</strong></li>
</ul>
<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><ul>
<li><code>第一趟</code>：假设我们需要排序的数组大小为<code>n</code>，一般的思想是先假设<code>第一个元素</code>是有序的，即是已经排序好的，那么第二个元素此时就是<code>待插入的元素</code>，我们拿这个待插入的元素和第一个元素比较大小，如果小的话，那么就将其插入到第一个元素的前面，此时待插入元素就变成了第一个，如果大于的话，就不需要改变位置。那么此时这个数组的前两个元素就是有序的</li>
<li><code>第二趟</code>： 经过第一趟的，前面两个元素已经是有序的，那么此时的第三个元素就是<code>待插入元素</code>，这个待插入元素先和第二个元素进行比较，如果大于的话，那么就不需要再和第一个元素比较了，当前位置不用改变就可以维持前面三个元素是有序的。如果是小于的话，此时的第二个元素就需要向后移动位置，因为这里可以肯定的是这个待插入元素一定是在其前面插入的，具体的位置没有确定而已。第二个元素向后移动之后，那么此时就需要和第一个元素比较，如果大于的话，那么就插在第一个和第二个元素之间成为当前数组的第二个元素即可，如果小于的话，那么就插入到第一个元素之前，同样的是第一个元素要向后移动为其腾出位置。</li>
<li><code>第三趟</code>…………………………………<code>第n-1</code>趟</li>
</ul>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul>
<li>平均时间复杂度：<code>O(n2)</code></li>
<li>空间复杂度：<code>O(1)</code>  (用于记录需要插入的数据)</li>
<li>稳定性：稳定</li>
</ul>
<h2 id="算法实现-—-java"><a href="#算法实现-—-java" class="headerlink" title="算法实现 — java"></a>算法实现 — java</h2><ul>
<li>需要注意的是判断条件一定是<code>j&gt;=0&amp;&amp;insertNode&lt;array[j]</code>，因为如果调换顺序的话，那么会造成数组<code>下标越界</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 这个是从小到大的插入排序</div><div class="line">* @Param array  待排序的数组</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</div><div class="line">	<span class="comment">//我们假设第一个元素已经是有序的，因此从第二个开始遍历，总共需要遍历n-1次</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> insertNode=array[i];  <span class="comment">//这个就是待插入的数，需要和在之前的元素比较</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> j=i-<span class="number">1</span>;   <span class="comment">//这个的初始值是待插入数字的前一个数字</span></div><div class="line">		</div><div class="line">		<span class="comment">//如果待插入的数字比前面的元素小并且此时的j没有到达第一个元素(j&gt;=0)</span></div><div class="line">		<span class="comment">//循环结束的条件是insertNode&gt;=array[j],那么此时的insertNode需要插入的位置就是array[j+1]这个位置了</span></div><div class="line">		<span class="comment">//需要注意的是&amp;&amp;是短路与的判断，因此需要将j&gt;=0放在前面，否则如果是insertNode&lt;array[j]&amp;&amp;j&gt;=0的形式，那么当j=-1的时候就会造成下标数组越界</span></div><div class="line">		<span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;insertNode&lt;array[j])&#123;</div><div class="line">			array[j+<span class="number">1</span>]=array[j];  <span class="comment">//元素后移，以便插入   </span></div><div class="line">			j--;   <span class="comment">//比较的元素的下标此时需要前移，和待插入的数据进行比较</span></div><div class="line">		&#125;</div><div class="line">		array[j+<span class="number">1</span>]=insertNode;  <span class="comment">//这个位置就是待插入元素需要插入的位置</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插入排序算法&quot;&gt;&lt;a href=&quot;#插入排序算法&quot; class=&quot;headerlink&quot; title=&quot;插入排序算法&quot;&gt;&lt;/a&gt;插入排序算法&lt;/h1&gt;&lt;h2 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JQuery实现AJAX异步提交</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/JQuery%E5%AE%9E%E7%8E%B0AJAX%E5%BC%82%E6%AD%A5%E6%8F%90%E4%BA%A4/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/JQuery实现AJAX异步提交/</id>
    <published>2018-05-09T00:42:04.000Z</published>
    <updated>2018-05-09T00:42:24.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery实现AJAX异步提交"><a href="#JQuery实现AJAX异步提交" class="headerlink" title="JQuery实现AJAX异步提交"></a>JQuery实现AJAX异步提交</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><a href="http://ono60m7tl.bkt.clouddn.com/jquery-3.2.1.min.js" target="_blank" rel="external">点击下载JQurery的文件</a></li>
</ul>
<ul>
<li>添加<code>JQuery</code>的文件： <code>&lt;script type=&quot;text/javascript&quot; src=&quot;文件路径&quot;&gt;&lt;/script&gt;</code></li>
</ul>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax({})"></a>$.ajax({})</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul>
<li>其中的<code>url</code>，<code>type</code>等    前面的<code>key</code>可以不用加<code>双引号</code>，也可以加上</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">				<span class="attr">url</span>: <span class="string">'/path/to/file'</span>,    <span class="comment">//请求的路径</span></div><div class="line">				type: <span class="string">'default GET (Other values: POST)'</span>,  <span class="comment">//请求方式，默认为get</span></div><div class="line">				dataType: <span class="string">'default: Intelligent Guess (Other values: xml, json, script, or html)'</span>,  <span class="comment">//响应的回来的数据类型，如果指定了json，那么就不需要将返回转换为JSON数据了</span></div><div class="line">				data: &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;,   <span class="comment">//请求数据，无论是get还是post都是这种形式的</span></div><div class="line">    			success: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;&#125;    <span class="comment">//响应成功调用的方法，obj是返回的数据</span></div><div class="line">			&#125;)</div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>在前面博文中的<a href="https://chenjiabing666.github.io/2018/05/04/Springmvc%E5%93%8D%E5%BA%94Ajax%E8%AF%B7%E6%B1%82-ResponseBody/">Springmvc响应Ajax请求(@ResponseBody)</a>，我们使用<code>$.ajax({})</code>来发出请求获取<code>City集合</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据选择的省份获取市</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCity</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> province=$(<span class="string">"#province"</span>).val();  <span class="comment">//获取下拉菜单的值，这里返回的是省份的编号</span></div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/menu/getCity.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">"province"</span>:province&#125;;   <span class="comment">//将省份的编号传入</span></div><div class="line">	</div><div class="line">	<span class="comment">//每次都要清空之前的城市</span></div><div class="line">	$(<span class="string">"#city"</span>).html(<span class="string">"&lt;option value='-1'&gt;请选择市&lt;/option&gt;"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//如果用户点击了请选择省，那么返回的值就是-1，此时不需要发出异步请求</span></div><div class="line">	<span class="keyword">if</span>(province==<span class="number">-1</span>)&#123;</div><div class="line">		<span class="keyword">return</span>;  </div><div class="line">	&#125;</div><div class="line">       </div><div class="line">	<span class="comment">//使用Post请求发出AJAX请求，返回的是一个集合，因此转换为JSON数据的obj是一个数组</span></div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: url,    <span class="comment">//请求的路径</span></div><div class="line">		type:<span class="string">"POST"</span>,  <span class="comment">// 请求方式，默认为get</span></div><div class="line">		dataType: <span class="string">"json"</span>,  <span class="comment">//响应的回来的数据类型，如果指定了json，那么就不需要将返回转换为JSON数据了</span></div><div class="line">		data:d,   <span class="comment">//请求数据</span></div><div class="line">		success: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123; <span class="comment">//响应成功调用的方法，obj是返回的数据</span></div><div class="line">			</div><div class="line">			<span class="comment">//如果返回的是一个空的，直接返回即可，不需要后续的操作</span></div><div class="line">			<span class="keyword">if</span>(obj.lengt==<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//循环遍历返回的JSON数组</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;obj.length;i++)&#123;</div><div class="line">				<span class="comment">//创建option，用于插入节点</span></div><div class="line">				<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span> + obj[i].code + <span class="string">"&gt;"</span>+obj[i].name+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">				<span class="comment">//将option插入到下拉列表中</span></div><div class="line">				$(<span class="string">"#city"</span>).append(option);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;   </div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h2><ul>
<li>只适用于<code>GET</code>的异步请求</li>
</ul>
<h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	url :请求路径，其中参数必须封装在其中，比如 : http://lcoalhost:8080/web1/regist?name=chenjiabing&amp;age=1</div><div class="line">	function（data,status,xhr）：这个是回调函数</div><div class="line">								data：请求返回的数据</div><div class="line">								status : 请求的状态，其中的有success,error</div><div class="line">								xhr: 这个是XMLHttpRequest对象</div><div class="line">*/</div><div class="line">$.get(<span class="string">'url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> url=<span class="string">"http://localhost:8080/web1/user/regist.do?username=chenjiabing&amp;password=12345"</span> ;  <span class="comment">//请求的url</span></div><div class="line">        $.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</div><div class="line">            <span class="comment">//如果响应成功，输出返回的数据</span></div><div class="line">            <span class="keyword">if</span>(status==<span class="string">"success"</span>) &#123;</div><div class="line">                alert(data);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                alert(<span class="string">"响应失败"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="post"><a href="#post" class="headerlink" title="$.post"></a>$.post</h2><ul>
<li>只适用于<code>POST</code>请求</li>
</ul>
<h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	url ： 异步请求的路径，其中不用封装数据</div><div class="line">	function（data,status,xhr） :回调函数</div><div class="line">							  data： 请求返回的数据</div><div class="line">							  status：请求的状态，其中的值有success，error</div><div class="line">							  xhr: XMLHttpRequest对象</div><div class="line">*/</div><div class="line">$.post(<span class="string">'url'</span>, &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>) </span>&#123;</div><div class="line">				<span class="comment">/*optional stuff to do after success */</span></div><div class="line">			&#125;);</div></pre></td></tr></table></figure>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">    $("#btn") .click(function()&#123;</div><div class="line">       var url="http://localhost:8080/web1/user/regist.do;   //请求路径</div><div class="line">       var d=&#123;"username":"陈加兵","password":"123456"&#125;;   //发送的请求参数</div><div class="line">        $.post(url,d,function(data,status,xhr)&#123;</div><div class="line">            if(status=="success")&#123;</div><div class="line">                alert(data);</div><div class="line">            &#125;else</div><div class="line">            &#123;</div><div class="line">                alert("响应失败");</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JQuery实现AJAX异步提交&quot;&gt;&lt;a href=&quot;#JQuery实现AJAX异步提交&quot; class=&quot;headerlink&quot; title=&quot;JQuery实现AJAX异步提交&quot;&gt;&lt;/a&gt;JQuery实现AJAX异步提交&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc中的转发重定向和拦截器</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/Springmvc%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%8F%91%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/Springmvc中的转发重定向和拦截器/</id>
    <published>2018-05-09T00:40:51.000Z</published>
    <updated>2018-05-18T08:52:43.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc中的转发重定向和拦截器"><a href="#Springmvc中的转发重定向和拦截器" class="headerlink" title="Springmvc中的转发重定向和拦截器"></a>Springmvc中的转发重定向和拦截器</h1><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><blockquote>
<p>可变参数在设计方法时，使用<code>数据类型...</code>来声明参数类型，例如：<code>public static void function(int... numbers)</code><br>在实现方法体时，可变参数是作为数组来处理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(Test.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</div><div class="line">		System.out.println(Test.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... numbers)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</div><div class="line">			sum+=numbers[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sum;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 每个方法中，最多只允许存在1个可变参数，并且，如果存在<strong>可变参数</strong>,那么必须是最后一个参数</p>
</blockquote>
<h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><ul>
<li>在控制器内部处理请求的方法中，默认返回字符串时的处理方式是<code>转发</code>，转发的值是<code>view</code>组件的名称，比如<code>return &quot;login&quot;</code>，实质上会根据视图解析器(<code>ViewResolver</code>)得到最终负责显示的页面，而通过<code>return redirect:路径</code>这样的语法表示重定向，在<code>redirect:</code>右侧的内容是路径，这个路径通常使用相对的路径，是以当前客户端的地址栏中的路径为标准进行参考，例如当前的地址为：<code>http://localhost:8080/Project/user/reg.do</code>，然后<code>return &quot;redirect:login.do&quot;</code>,则会重定向到<code>http://localhost:8080/Project/user/login.do</code>,如果<code>return &quot;redirect:/main/index.do&quot;</code>或者<code>return &quot;redirect:../main/index.do&quot;</code>，则会重定向到<code>http://localhost:8080/Project/main/index.do</code></li>
</ul>
<h3 id="forward"><a href="#forward" class="headerlink" title="forward:"></a><code>forward:</code></h3><ul>
<li>不添加任何字段，那么spring中默认的是转发，比如<code>return login</code>,那么这个会经过视图解析器进行解析，跳转到指定的视图。但是如果添加了<code>forward</code>，那么就不经过视图解析器，而是直接进行跳转，我们一般都是转发到<code>controller</code>中的方法，比如<code>return forward:../user/showLogin.do</code></li>
</ul>
<h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect:"></a><code>redirect:</code></h3><ul>
<li>重定向 ： <code>return &quot;redirect:login.do&quot;</code></li>
<li>返回的是一个Controller方法的路径，而不是一个view，这个不会经过视图解析器，而是直接跳转</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/handle_reg.do"</span>, method=RequestMethod.POST)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">handleReg</span><span class="params">(User user,ModelMap map)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			userService.reg(user);</div><div class="line">			System.out.println(<span class="string">"注册成功！"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="string">"redirect:login.do"</span>;  <span class="comment">//重定向到login.do这个控制方法，login.do对应的就是转发到login.jsp</span></div><div class="line">		&#125; <span class="keyword">catch</span> (UsernameConflictException e) &#123;</div><div class="line">			System.out.println(e.getMessage());</div><div class="line">			map.put(<span class="string">"errorMessage"</span>, e.getMessage());</div><div class="line">			<span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"login.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">handleLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol>
<li>拦截器(<code>interceptor</code>)是springmvc中的一个<code>组件</code>，是运行在<code>DispatcherServlet</code>之后，运行在<code>Controller</code>之前的</li>
<li>拦截器可以决定对某些符合条件的进行<code>拦截</code>或者<code>放行</code>，所以，通常用于对一些具有相同运行条件的功能进行约束</li>
</ol>
<h2 id="使用拦截器"><a href="#使用拦截器" class="headerlink" title="使用拦截器"></a>使用拦截器</h2><h3 id="自定义拦截器类"><a href="#自定义拦截器类" class="headerlink" title="自定义拦截器类"></a>自定义拦截器类</h3><ol>
<li>创建一个拦截类(<code>DemoInterceptor</code>)，实现<code>HandlerInterceptor</code>接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 处理器执行之前调用</div><div class="line">	 * <span class="doctag">@param</span> request  HttpServletRequest对象，可以获取请求参数等等</div><div class="line">	 * <span class="doctag">@param</span> response HttpServletResponse对象</div><div class="line">	 * <span class="doctag">@param</span> Handler  拦截器的Controller对象</div><div class="line">	 * <span class="doctag">@return</span> 如果返回false，就会中断处理流程，不会处理后续的拦截器和Controller。如果返回true，则会执行后续的拦截器和处理器</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"DemoInterceptor的PreHandler执行"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 处理器执行之后调用,跳转到指定视图之前调用</div><div class="line">	 * <span class="doctag">@param</span> request  HttpServletRequest对象</div><div class="line">	 * <span class="doctag">@param</span> response HttpServletResponse对象</div><div class="line">	 * <span class="doctag">@param</span> Handler  拦截器的Controller对象</div><div class="line">	 * <span class="doctag">@param</span> modelAndView  ModelAndView对象，其中存放的是处理结果和视图的信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler,</div><div class="line">			ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 1. 可以自己设计逻辑，例如某些情况下返回false，返回true</div><div class="line">		 * 2. 返回true表示执行后续的处理器和拦截器，返回false会中断处理流程</div><div class="line">		 */</div><div class="line">		System.out.println(<span class="string">"handler:"</span>+handler);</div><div class="line">		System.out.println(<span class="string">"DemoInterceptor的PostHandler执行"</span>);</div><div class="line">		<span class="comment">//设置视图的名称，那么执行完成之后就会条跳转到index.jsp页面</span></div><div class="line">		<span class="comment">//modelAndView.setViewName("index");  </span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 请求处理完成之后调用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler, Exception ex)</div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"DemoInterceptor的afterCompletion执行"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在springmvc的配置文件中配置"><a href="#在springmvc的配置文件中配置" class="headerlink" title="在springmvc的配置文件中配置"></a>在springmvc的配置文件中配置</h3><ol>
<li>配置拦截的路径：<code>&lt;mvc:mapping path=&quot;&quot;/&gt;</code> 可以使用通配符<code>*</code> 比如：<code>/**</code>匹配所有的路径，<code>/user/*</code>只能匹配<code>/user</code>的子路径</li>
<li>配置不拦截的路径 ： <code>&lt;mvc:exclude-mapping path=&quot;&quot;/&gt;</code>  可以配置<code>多个</code></li>
<li>配置拦截器类(<code>bean</code>) : <code>&lt;bean class=&quot;&quot;&gt;</code>  </li>
</ol>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>必须按照上面的顺序配置，否则将会报错</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 配置拦截器,其中可以配置多个拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">       </div><div class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">	</div><div class="line">		<span class="comment">&lt;!-- 配置拦截器的拦截路径，拦截/user下的全部处理器方法映射</span></div><div class="line">			比如：http://localhost:8080/Springmvc/user/login.do这个请求就会被拦截</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置不被该拦截器拦截器的controller方法,这个是可选配置</span></div><div class="line">			比如：http://localhost:8080/Springmvc/user/index.do将不会被拦截器</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/index.do"</span>/&gt;</span> </div><div class="line">           <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login.do"</span>/&gt;</span>  </div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置拦截器的bean，指定的是全类名 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.interceptor.DemoInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">       </div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="其中实现的方法"><a href="#其中实现的方法" class="headerlink" title="其中实现的方法"></a>其中实现的方法</h2><ol>
<li><code>public boolean preHandle(HttpServletRequest request,HttpServletResponse response, Object handler)</code><ul>
<li>该方法在<code>controller</code>处理请求之前执行</li>
<li>如果返回的<code>false</code>，则会中断处理流程，不会执行后续的拦截器和处理器，返回<code>true</code>会执行后续的拦截器和处理器</li>
<li>可以自行设计逻辑返回<code>false</code>或者<code>true</code></li>
</ul>
</li>
<li><code>public void postHandle(HttpServletRequest request,HttpServletResponse response, Object handler,ModelAndView modelAndView)</code><ul>
<li>处理器执行之后，视图处理之前调用，此时可以通过对<code>ModelAndView</code>对数据和视图进行处理</li>
<li>当然需要<code>prehandler</code>方法返回<code>true</code>才会执行</li>
</ul>
</li>
<li><code>public void afterCompletion(HttpServletRequest request,HttpServletResponse response, Object handler, Exception ex)</code><ul>
<li>所有的请求处理完毕之后调用，比如性能监控中，我们可以在此记录结束时间和消耗时间，还可以进行一些资源处理</li>
<li>当然需要<code>prehandler</code>方法返回<code>true</code>才会执行</li>
</ul>
</li>
</ol>
<h3 id="演示登录检查"><a href="#演示登录检查" class="headerlink" title="演示登录检查"></a>演示登录检查</h3><ol>
<li>登录检查： 当涉及到用户信息的修改，查看什么的，必须要验证是否登录，因此需要设计拦截器验证登录</li>
<li>先设定登录数据，即： 在<code>login.jsp</code>中添加登录按钮，登录完成之后，需要自己定义一个标记存储在<code>session</code>中，比如<code>用户的id</code>或者<code>用户的对象</code></li>
<li>我们使用用户的<code>id</code>作为标记验证是否已经的登录，如果用户登录成功，会在<code>session</code>中添加一个<code>uid</code>的属性</li>
<li>用户退出登录使用<code>session.invalidate();</code>清除<code>session</code>，并且重定向到<code>登录界面</code></li>
</ol>
<h4 id="自定义拦截器-LoginInterceptor"><a href="#自定义拦截器-LoginInterceptor" class="headerlink" title="自定义拦截器(LoginInterceptor)"></a>自定义拦截器(LoginInterceptor)</h4><ul>
<li>具体流程在<code>prehandler</code>方法中写的很清楚</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 在处理器执行之前调用(non-Javadoc)</div><div class="line">	 * 1. 获取session</div><div class="line">	 * 2. 读取session中的uid的值</div><div class="line">	 * 		如果为null，表示没有登录，那么直接重定向到登录界面，同时返回false，不需要执行后面的流程了</div><div class="line">	 * 		如果不为null，表示已经登录了，那么直接返回true，继续执行后面的拦截器或者处理器</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		HttpSession session=request.getSession();   <span class="comment">//获取session</span></div><div class="line">		Object uid=session.getAttribute(<span class="string">"uid"</span>);  <span class="comment">//读取session中的对象</span></div><div class="line">		<span class="comment">//如果uid存在，那么即可登录完成</span></div><div class="line">		<span class="keyword">if</span> (uid!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;   <span class="comment">//返回true，登录成功就需要执行后续的流程</span></div><div class="line">		&#125;</div><div class="line">		response.sendRedirect(request.getContextPath()+<span class="string">"/user/login.do"</span>);  <span class="comment">//重定向到登录界面</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;   <span class="comment">//返回false，后面的流程也不用执行了，直接中断</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler,</div><div class="line">			ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler, Exception ex)</div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="springmvc中配置拦截器"><a href="#springmvc中配置拦截器" class="headerlink" title="springmvc中配置拦截器"></a>springmvc中配置拦截器</h4><ul>
<li>由于这里只是跳转到用户中心需要验证登录，那么只是匹配了<code>user_center.do</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置拦截器,其中可以配置多个拦截器 --&gt;</span>    </div><div class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/user_center.do"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.interceptor.LoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h2><ul>
<li>根据在<code>springmvc</code>配置文件中配置的顺序执行，即是在<code>&lt;mvc:interceptors&gt;</code>下配置的拦截器的顺序，如果对同一个路径进行了拦截器，那么先配置的先拦截</li>
</ul>
<h2 id="拦截器和过滤器的区别-主要的区别"><a href="#拦截器和过滤器的区别-主要的区别" class="headerlink" title="拦截器和过滤器的区别(主要的区别)"></a>拦截器和过滤器的区别(主要的区别)</h2><ol>
<li>拦截器是springmvc中，仅仅当使用<code>springmvc</code>才可以使用拦截器，过滤器是<code>Java EE</code>体系中的，无论使用哪种框架都可以使用过滤器</li>
<li>拦截器在<code>DispatcherServlet</code>之后，在处理器之前执行，过滤器在<code>DispatcherServlet</code>之前执行</li>
<li>过滤器会在所有的<code>servlet</code>之前执行(所有的请求都会执行)，而拦截器会在springmvc中<code>DispatcherServlet</code>之后执行，所以过滤器在项目中可以过滤任何请求（只要是配置了对应的路径），而拦截器只会在<code>DispatcherServlet</code>处理的请求的基础之上进行拦截</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>当多种请求都需要做相同或者极为相似的任务时，可以使用拦截器</li>
<li>开发好拦截器，那么需要在<code>springmvc</code>的配置文件中配置</li>
<li>在<code>&lt;mvc:interceptors&gt;</code>可以有如果若干个<code>&lt;mvc:interceptor&gt;</code>,即是配置若干个拦截器，配置的多个拦截器将会形成<strong>拦截器链</strong>，如果配置多个拦截器对同一个路径都会拦截，那么会按照配置的节点顺序执行。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc中的转发重定向和拦截器&quot;&gt;&lt;a href=&quot;#Springmvc中的转发重定向和拦截器&quot; class=&quot;headerlink&quot; title=&quot;Springmvc中的转发重定向和拦截器&quot;&gt;&lt;/a&gt;Springmvc中的转发重定向和拦截器&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc解决中文乱码问题</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/Springmvc%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/Springmvc解决中文乱码问题/</id>
    <published>2018-05-09T00:39:48.000Z</published>
    <updated>2018-05-09T00:40:35.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc解决中文乱码问题"><a href="#Springmvc解决中文乱码问题" class="headerlink" title="Springmvc解决中文乱码问题"></a>Springmvc解决中文乱码问题</h1><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><ul>
<li>在表单提交的时候，如果遇到中文乱码的情况，springmvc提供了一个<code>CharacterEncodingFilter</code>过滤器，我们只需要在<code>web.xml</code>文件中配置即可</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>表单的提交方式必须是<code>post</code></li>
<li>在<code>web.xml</code>中配置<code>CharacterEncodingFilter</code>编码格式要和<code>JSP</code>页面的编码格式一致</li>
<li>解决中文乱码必须使用过滤器(在DispatcherServlet之前执行)，而不能使用springmvc的拦截器，因为过滤器在<code>DispatcherServlet</code>之前，所以设置好编码后，<code>DispatcherServlet</code>和<code>Controller</code>都可以获取到正确的数据，而拦截器运行在<code>DispatcherServlet</code>之后，也即是意味着<code>DispatcherServlet</code>获取的数据已经是乱码，那么在拦截器中调整乱码是没有意义的</li>
</ol>
<h3 id="在web-xml配置"><a href="#在web-xml配置" class="headerlink" title="在web.xml配置"></a>在<code>web.xml</code>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 配置 CharacterEncodingFilter解决中文乱码问题--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置编码格式为UTF-8 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><ul>
<li>即使配置了中文乱码过滤器<code>CharacterEncodingFilter</code>，但是这个只会针对<code>POST</code>请求才会起作用，如果我们在使用<code>GET</code>请求的时候携带的参数有中文的话，那么服务器接收的时候就会产生中文乱码。</li>
<li>我们在eclipse中修改<code>Tomcat</code>的<code>server.xml</code>文件中的内容参数即可，如下：</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/s1.png" alt="server.xml"></p>
<ul>
<li>我们只需要在<code>&lt;connector connectionTimeout=&quot;20000&quot;......&gt;</code>在这个最后加上<code>URIEncoding=&quot;UTF-8&quot;</code>即可</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>那么以后创建项目时候的完整的web.xml如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></div><div class="line">	<span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Springmvc<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置前端控制器DispatcherServlet --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置springMVC配置文件的路径，这里如果想要使用默认的可以不用配置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- classpath表示根路径，这里找的项目根路径下的applicationContext.xml --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 当tomcat启动的时候就加载，设置启动的优先级 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置分发规则，这个是用来控制所有的请求,只要是请求后缀为.do的都会拦截分发 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置 CharacterEncodingFilter解决中文乱码问题--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置编码格式为UTF-8 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc解决中文乱码问题&quot;&gt;&lt;a href=&quot;#Springmvc解决中文乱码问题&quot; class=&quot;headerlink&quot; title=&quot;Springmvc解决中文乱码问题&quot;&gt;&lt;/a&gt;Springmvc解决中文乱码问题&lt;/h1&gt;&lt;h2 id=&quot;POST&quot;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之增删改查</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis之增删改查/</id>
    <published>2018-05-04T10:04:29.000Z</published>
    <updated>2018-05-11T03:53:33.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis的增删改查"><a href="#Mybatis的增删改查" class="headerlink" title="Mybatis的增删改查"></a>Mybatis的增删改查</h1><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><ul>
<li>在增加数据的时候，mybatis默认返回的是受影响的行数，因此不需要指定<code>ResultType</code>指定返回类型</li>
<li>在<code>UserMapper.java</code>接口中添加方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	<span class="doctag">@param</span> user User对象</div><div class="line">*/</div><div class="line"><span class="function">Integer <span class="title">reg</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>UserMapper.xml</code>文件中添加<code>&lt;insert&gt;</code>节点</p>
<ul>
<li><code>#{}</code>中填写的是<code>User</code>对象的属性名称</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- parameterType属性的值是参数类型 </span></div><div class="line">	--&gt;</div><div class="line">	<span class="comment">&lt;!-- 节点中间编写SQL语句 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">		<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</div><div class="line">		INSERT INTO user (</div><div class="line">			username, password</div><div class="line">		) VALUES (</div><div class="line">			#&#123;username&#125;, #&#123;password&#125;</div><div class="line">		)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		</div><div class="line">		<span class="comment">//新建User对象</span></div><div class="line">		User user = <span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">		user.setPassword(<span class="string">"123456"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//调用reg(user)，进行添加，返回的是受影响的行数</span></div><div class="line">		Integer affectedRows</div><div class="line">			= userMapper.reg(user);</div><div class="line">		</div><div class="line">		System.out.println(</div><div class="line">			<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">		ac.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="在Mybatis中增加数据时获取自增主键的id"><a href="#在Mybatis中增加数据时获取自增主键的id" class="headerlink" title="在Mybatis中增加数据时获取自增主键的id"></a>在Mybatis中增加数据时获取自增主键的id</h2><ul>
<li>首先<code>mybatis</code>在处理增加数据的功能时，只是返回<code>受影响的行数</code>，所以在持久层中并不会返回新增加的</li>
<li>如果需要获取自增主键<code>Id</code>，首先，在<code>XML</code>映射的<code>&lt;insert&gt;</code>节点中需要添加<code>2</code>个属性<ul>
<li><code>useGeneratedKeys</code> ：设置是否返回自增主键，如果为<code>true</code>则返回，默认为<code>false</code></li>
<li><code>keyProperty</code> ： 配置自增主键在表中对应的字段 ，因为有时候在表中的自增主键的字段可能不是<code>id</code>，因此需要指定</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- parameterType属性的值是参数类型 </span></div><div class="line">	useGeneratedKeys: 指定是否返回自增主键，默认为false</div><div class="line">	keyProperty:配置自增主键在表中对应的字段 </div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">	<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</div><div class="line">	INSERT INTO user (</div><div class="line">		username, password</div><div class="line">	) VALUES (</div><div class="line">		#&#123;username&#125;, #&#123;password&#125;</div><div class="line">	)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>此时的<code>mybatis</code>执行<code>insert</code>方法之后，即是调用<code>reg(user)</code>，返回的还是<code>受影响的行数</code>，并不是此时的自增主键<code>id</code>的值。而是在调用这个方法的时候将<code>id</code>封装到指定的<code>方法参数</code>中，即是封装到<code>user</code>中了，因此只有调用者才可以获取<code>id</code>，而持久层无法获取</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	</div><div class="line">	<span class="comment">//新建User对象，此时并没有设置id的值</span></div><div class="line">	User user = <span class="keyword">new</span> User();</div><div class="line">	user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">	user.setPassword(<span class="string">"123456"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//调用reg(user)，进行添加，返回的是受影响的行数，但是此时已经将id封装到参数User对象中了</span></div><div class="line">	Integer affectedRows</div><div class="line">		= userMapper.reg(user);</div><div class="line">	</div><div class="line">	System.out.println(</div><div class="line">		<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">	<span class="comment">//直接获取Uesr对象中的id值，这个是自增主键返回的值</span></div><div class="line">	System.out.println(<span class="string">"id = "</span>+user.getId());</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul>
<li><strong>在删除数据的时候，自动会返回受影响的行数，不需要在<code>delete</code>节点中定义返回类型，只有在查询数据的时候才会定义返回类型</strong></li>
</ul>
<ul>
<li>在<code>UserMapper.java</code>中添加一个接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据id删除数据，返回受影响的行数，返回1，如果删除失败返回0</span></div><div class="line"><span class="function">Integer <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;delete&gt;</code>节点</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 删除用户数据根据id</span></div><div class="line">	Integer deleteUserById(int id)</div><div class="line">	parameterType: 指定参数类型，这里也可以不需要指定</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">	delete from user where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>删除数据是不可逆的，通常不会真正的删除数据，我们会使用备份，日志等手段来保存数据，在许多软件上看到的删除也许都是<code>修改</code>操作，通常在表中有一个字段<code>is_deleted</code>标记是否删除，如果执行删除，那么就会设置其值为<code>true</code>表示已经删除了，那么此时将不会显示在客户端，让客户以为已经被删除了</strong></li>
</ul>
<h2 id="Mybaits参数规则"><a href="#Mybaits参数规则" class="headerlink" title="Mybaits参数规则"></a>Mybaits参数规则</h2><ul>
<li><strong><code>mybatis</code>默认支持一个参数，即是定义的接口方法中只能有一个参数</strong></li>
<li>如果需要支持多个参数，那么需要使用<code>@Param()</code>注解</li>
<li>如果接口方法中的参数类型是基本类型的可以不用<code>parameterType</code>指定类型，如果不是基本类型的，规范要求需要使用<code>parameterType</code>指定类型，但是可以不写</li>
</ul>
<h2 id="Param"><a href="#Param" class="headerlink" title="@Param()"></a>@Param()</h2><ul>
<li><strong>mybatis默认支持一个参数，即是定义的接口方法中只能有一个参数</strong></li>
<li>在设计java接口方法时，如果需要指定多个参数，那么必须使用<code>@Param()</code></li>
<li>如果想要支持多个参数，需要使用<code>@Param()</code>来指定参数，比如<code>Integer ChangePassword(@Param(&quot;id&quot;)Integer id,@Param(&quot;newPassword&quot;)String newPassword);</code><ul>
<li>其中<code>@Param(&quot;key&quot;)</code>中的<code>value</code>在配置增删改查的时候是使用<code>#{key}</code>表达式取出的</li>
</ul>
</li>
<li><code>mybaits</code>在处理过程中，本质上是使用了<code>Map</code>对参数进行了封装的。即是<code>@Param(&quot;&quot;)</code>注解中给出的参数值是<code>Map</code>中的<code>key</code>，调用方法时给出的参数值是Map中的<code>value</code>值，而最终在<code>XML</code>文件中使用<code>#{}</code>获取值，其实是使用Map中的<code>get(key)</code>方法获取的</li>
</ul>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ul>
<li><p><strong>在修改数据的时候，mybatis自动返回受影响的行数，因此我们不需要定义返回类型，默认的返回数据就是受影响的行数</strong></p>
</li>
<li><p>在<code>UserMapper.java</code>接口中定义根据<code>id</code>修改数据的方法</p>
<ul>
<li>使用<code>@Param()</code>注解来标记多个参数</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 修改密码</div><div class="line"> * <span class="doctag">@param</span> id  id</div><div class="line"> * <span class="doctag">@param</span> newPassword  新密码</div><div class="line"> * <span class="doctag">@return</span>  受影响的行数</div><div class="line"> */</div><div class="line"><span class="function">Integer <span class="title">ChangePassword</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"newPassword"</span>)</span>String newPassword)</span>;</div></pre></td></tr></table></figure>
<ul>
<li><p>在<code>UserMapper.xml</code>中添加<code>&lt;update&gt;</code>节点</p>
<ul>
<li><strong>其中<code>#{}</code>表达式中的字段为<code>@Param(&quot;value&quot;)</code>中的<code>value</code></strong></li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 修改密码</span></div><div class="line">	Integer ChangePassword(@Param("id")Integer id,@Param("newPassword")String newPassword);</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"ChangePassword"</span>&gt;</span></div><div class="line">	update user set password=#&#123;newPassword&#125; where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testChangePassword</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//调用删除的方法</span></div><div class="line">	<span class="keyword">int</span> affectRow=userMapper.ChangePassword(<span class="number">3</span>, <span class="string">"12345895"</span>);</div><div class="line">	System.out.println(affectRow);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="案例：修改用户密码"><a href="#案例：修改用户密码" class="headerlink" title="案例：修改用户密码"></a>案例：修改用户密码</h3><h4 id="用户提供数据"><a href="#用户提供数据" class="headerlink" title="用户提供数据"></a>用户提供数据</h4><ul>
<li>旧密码：<code>oldPassword</code></li>
<li>新密码：<code>newPassword</code></li>
</ul>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>通过<code>id</code>查找用户信息<ol>
<li>不可以使用<code>select * from user where id=? and password=?</code>,因为这个是<strong>不区分大小写</strong>的,我们应该先根据<code>id</code>获取用户信息，再比较<code>password</code></li>
<li>在<code>UserserviceImpl</code>中完成验证逻辑，如果用户不存在，那么抛出用户不存在的异常，如果存在就验证原密码和是否匹配</li>
</ol>
</li>
<li>用户信息存在，那么就要验证用户输入的<code>oldPassword</code>和用户信息中的<code>原密码</code>是否相同了，如果不相同，抛出<code>密码不匹配的异常</code>，如果相同，那么就可以修改密码</li>
<li>修改密码</li>
</ol>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>我们编写了一个<code>UserService</code>中编写逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangePasssword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">		String newPassword) <span class="keyword">throws</span> UserNotFoundException, PasswordNotMatchException&#123;</div><div class="line">	User user=<span class="keyword">this</span>.findUserById(id);  <span class="comment">//获取用户信息</span></div><div class="line">	<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//如果用户信息不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"操作失败，用户信息不存在"</span>);</div><div class="line">	&#125;<span class="keyword">else</span> &#123; <span class="comment">//用户存在，则判断原密码</span></div><div class="line">		<span class="keyword">if</span> (user.getPassword().equals(oldPassword)) &#123;<span class="comment">//如果密码匹配</span></div><div class="line">			</div><div class="line">			userMapper.ChangePassword(id, newPassword);  <span class="comment">//修改密码</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//原密码不匹配</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PasswordNotMatchException(<span class="string">"操作失败，原密码不正确"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>那么在<code>Controller</code>中如果要调用这个<code>ChangePasssword</code>将会通过处理异常来判断哪里是出错了，并给出友好的提示</li>
</ul>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="单条数据的查询"><a href="#单条数据的查询" class="headerlink" title="单条数据的查询"></a>单条数据的查询</h3><ul>
<li>根据<code>id</code>的查询返回的查询结果就是单条数据，比如：<code>select * from user where id=1</code></li>
<li><strong>单条记录的查询在编写<code>接口方法</code>的时候，只需要返回一个<code>实体类对象</code>即可</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据id查询用户信息</div><div class="line"> * <span class="doctag">@param</span> id  用户id</div><div class="line"> * <span class="doctag">@return</span> 返回User对象</div><div class="line"> */</div><div class="line"><span class="function">User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;select&gt;</code>节点<ul>
<li>需要使用<code>resultType</code>指定返回的类型，因为参数是基本类型，因此不需要使用<code>parameterType</code>指定参数类型</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	select * from user where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="多条记录的查找"><a href="#多条记录的查找" class="headerlink" title="多条记录的查找"></a>多条记录的查找</h3><ul>
<li>有些查找语句返回的是多条记录，那么我们可以使用<code>List&lt;&gt;</code>集合来接收返回的结果，不能直接使用<code>实体类对象</code>来接收</li>
<li>在<code>UserMapper.java</code>中定义接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据密码查找用户</div><div class="line"> * <span class="doctag">@param</span> password 用户密码</div><div class="line"> * <span class="doctag">@return</span> 返回的是一个用户的集合</div><div class="line"> */</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByPassword</span><span class="params">(String password)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中添加<code>&lt;select&gt;</code>节点<ul>
<li>这里的<code>resultType</code>虽然返回的是<code>User集合</code>，但是这里的类型还是需要写User类型</li>
<li>由于参数是基本类型，因此不需要使用<code>parameterType</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	List&lt;User&gt; findUserByPassword(String password);</div><div class="line">	resultType: 虽然返回的是User集合，但是这里的类型还是需要写User类型</div><div class="line"> --&gt;</div><div class="line"> </div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByPassword"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line"> 	select * from user where password=#&#123;password&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//获取User集合</span></div><div class="line">	List&lt;User&gt; users=userMapper.findUserByPassword(<span class="string">"12345895"</span>);</div><div class="line">	System.out.println(users);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>xxMapper.xml</code>中配置的节点的<code>id</code>要和<code>xxMapper.java</code>中的<code>方法名</code>相同</li>
<li>mybatis默认支持一个参数，但是我们可以使用<code>@Param(&quot;&quot;)</code>指定多个参数，不过在使用<code>#{}</code>取值的时候要和<code>@Param(&quot;&quot;)</code>中的参数一致</li>
<li>获取自增主键并不是作为方法的返回值，而是在调用方法的时候将自增主键的值设置在方法参数的对象中，那么此时的调用者就可以获取到<code>自增主键</code>的值</li>
<li>增加，修改，删除，方法返回的永远是受影响的行数</li>
<li><strong>在定义实体类属性的时候，尽量使用<code>包装类</code>，比如<code>Integer age</code></strong></li>
<li><strong>只要是<code>&lt;select&gt;</code>节点，那么必须写返回类型<code>resultType</code>，无论是基本型还是其他类型</strong></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis的增删改查&quot;&gt;&lt;a href=&quot;#Mybatis的增删改查&quot; class=&quot;headerlink&quot; title=&quot;Mybatis的增删改查&quot;&gt;&lt;/a&gt;Mybatis的增删改查&lt;/h1&gt;&lt;h2 id=&quot;增加数据&quot;&gt;&lt;a href=&quot;#增加数据&quot; cla
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>快速排序算法</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/快速排序算法/</id>
    <published>2018-05-04T09:55:26.000Z</published>
    <updated>2018-05-04T10:07:37.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h1><h2 id="思想-从小到大排序"><a href="#思想-从小到大排序" class="headerlink" title="思想(从小到大排序)"></a>思想(从小到大排序)</h2><ul>
<li>快速排序是使用<code>分治法</code>来完成的</li>
<li>基本思想就是先从其中选取一个<code>基准值</code>，然后从数组的两端开始移动查找，在<code>右边</code>移动查找到比<code>基准值</code>小的数据停止移动，此时在<code>左边</code>查找到比<code>基准值</code>大的数据也停止查找，<code>交换</code>这两个查找到的数据，交换完成之后两端继续移动查找，如果左边找到比基准值大的，右边找到比基准值小的数据，再次交换。直到查找到同一个数据上(相遇)或者”擦肩而过”。那么将<code>基准值</code>与<code>相遇的那个值</code>交换，此时就能够保证在基准值左边的都是比基准值小的，在其右边的都是比其大的数，此时一轮查找结束。接下来这个基准值将一个数组分成了<code>两半</code>，左边的是小的，右边是大的，那么我们再分别对左边和右边的数据进行相同的操作，直至不可拆分成新的子序列为止。</li>
<li>快速排序的最坏运行时间是<code>O(n2)</code>，但期望的运行时间是<code>O(nlgn)</code>。</li>
</ul>
<h2 id="选取数组的第一个数为基准值"><a href="#选取数组的第一个数为基准值" class="headerlink" title="选取数组的第一个数为基准值"></a>选取数组的第一个数为基准值</h2><ul>
<li>我们选取数组的<code>第一个元素</code>作为基准值</li>
<li>此时先从数组的最右边开始查找，如果找到比基准值小的停止查找，再从最左边开始查找，直至找到比基准值大的，那么两边就交换，交换完成之后，最右边再次开始查找，找到就等待左边找到数交换，直至双方相遇。那么把相遇的那个点的数据和基准值交换即可，那么现在在基准值左边的都是小的，在右边的都是大的，此时的基准值将数组分成了两个子序列，再对子序列进行重复的操作，直到不可拆分成子序列。</li>
</ul>
<ul>
<li>实现的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">	        </div><div class="line">	        <span class="comment">//递归结束的条件，如果此时的子序列只有一个元素就是low=high，就不用排序了</span></div><div class="line">	        <span class="keyword">if</span>(low&gt;=high)&#123;</div><div class="line">	            <span class="keyword">return</span>;</div><div class="line">	        &#125;</div><div class="line">	        </div><div class="line">	        <span class="keyword">int</span> i=low;   <span class="comment">//i从最左边开始查找</span></div><div class="line">	        <span class="keyword">int</span> j=high;   <span class="comment">//i从最右边开始查找</span></div><div class="line">	        <span class="keyword">int</span> temp = arr[low]; <span class="comment">//设置基准值为第一个元素，temp</span></div><div class="line">	        </div><div class="line">	        <span class="comment">//如果此时的i和j没有相遇，一直进行下去</span></div><div class="line">	        <span class="keyword">while</span> (i&lt;j) &#123;</div><div class="line">	        	<span class="comment">//先从右边开始查找，如果没有找到比基准值小的并且没有相遇，那么继续向右查找</span></div><div class="line">	            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</div><div class="line">	                j--;   <span class="comment">//向左移动</span></div><div class="line">	            &#125;</div><div class="line">	            </div><div class="line">	            <span class="comment">//再从左边开始查找，如果没有找到比基准值大的并且没有相遇，那么继续向左查找</span></div><div class="line">	            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</div><div class="line">	                i++;   <span class="comment">// 向右移动</span></div><div class="line">	            &#125;</div><div class="line">	           </div><div class="line">	           <span class="comment">//代码能够运行到这里，那么表示已经找到了右面小于基准值的，左面大于基准值的，那么就可以交换数据了</span></div><div class="line">	           <span class="comment">//这里的i&lt;j用于控制在最后相遇的时候还要交换数据，不必交换了，可以省去一次的交换</span></div><div class="line">	          <span class="keyword">if</span> (i&lt;j) &#123;</div><div class="line">	        	  	<span class="comment">//交换数据</span></div><div class="line">	        	   	<span class="keyword">int</span> t = arr[j];</div><div class="line">	                arr[j] = arr[i];</div><div class="line">	                arr[i] = t;</div><div class="line">	          &#125;</div><div class="line">	             </div><div class="line"></div><div class="line">	        &#125;</div><div class="line">	        </div><div class="line">	        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></div><div class="line">	         arr[low] = arr[i];  <span class="comment">//第一个元素设置为i和j相遇的那个值</span></div><div class="line">	         arr[i] = temp;   <span class="comment">//相遇的那个地方设置为基准值</span></div><div class="line">	         </div><div class="line">	        <span class="comment">//递归调用左半数组，以基准值为中心切割</span></div><div class="line">	        quickSort(arr, low, j-<span class="number">1</span>);</div><div class="line">	        <span class="comment">//递归调用右半数组</span></div><div class="line">	        quickSort(arr, j+<span class="number">1</span>, high);</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] array=&#123; <span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">24</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">45</span>,<span class="number">88</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">25</span>&#125;;</div><div class="line">quickSort(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">	System.out.print(array[i]+<span class="string">"\t"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="另外一种方式"><a href="#另外一种方式" class="headerlink" title="另外一种方式"></a>另外一种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">		  <span class="keyword">int</span> i=low;</div><div class="line">		  <span class="keyword">int</span> j=high;</div><div class="line">		  <span class="keyword">int</span> temp=array[low];  <span class="comment">//选取第一个为基准数</span></div><div class="line">		  <span class="comment">//如果此时的还没有相遇，表示没有结束</span></div><div class="line">		  <span class="keyword">while</span>(i&lt;j)&#123;</div><div class="line">			  <span class="comment">//因为基准数是最左面的，因此从最右面开始查找</span></div><div class="line">			  <span class="comment">//当当前的值比基准值大，并且i和j不相等，即是没有相遇</span></div><div class="line">			  <span class="keyword">while</span>(temp&lt;array[j]&amp;&amp;i&lt;j)&#123;</div><div class="line">				  j--;   <span class="comment">//向左移动，继续查找</span></div><div class="line">			  &#125;</div><div class="line">			  </div><div class="line">			  <span class="comment">//从左面开始查找，如果查找到的数据array[i]小于基准值并且i和j没有相遇，那么继续向右移动查找</span></div><div class="line">			  <span class="keyword">while</span>(array[i]&lt;temp&amp;&amp;i&lt;j)&#123;</div><div class="line">				  i++;  <span class="comment">//继续向右移动查找</span></div><div class="line">			  &#125;</div><div class="line">			  </div><div class="line">			<span class="comment">//代码能够运行到这里，那么表示已经找到了右面小于基准值的，左面大于基准值的，那么就可以交换数据了</span></div><div class="line">	          <span class="keyword">if</span> (i&lt;j) &#123;</div><div class="line">	        	   	<span class="keyword">int</span> t = array[j];</div><div class="line">	                array[j] = array[i];</div><div class="line">	                array[i] = t;</div><div class="line">	          &#125;</div><div class="line">		  &#125;</div><div class="line">		  </div><div class="line">		  low=i;</div><div class="line">		  high=j;</div><div class="line">		  </div><div class="line">		  <span class="keyword">return</span> j ;   <span class="comment">//返回当前的基准值在数组中的索引，用于分割子序列</span></div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 </div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort1</span><span class="params">(<span class="keyword">int</span>[] arrary,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">		 <span class="comment">//停止条件，如果low&gt;high表示相遇，那么停止递归</span></div><div class="line">		 <span class="keyword">if</span>(low&gt;high)&#123;</div><div class="line">			 <span class="keyword">return</span>;</div><div class="line">		 &#125;</div><div class="line">		 <span class="keyword">int</span> index=partition(arrary, low, high);  <span class="comment">//获取基准值的位置</span></div><div class="line">		 quickSort1(arrary, low, index-<span class="number">1</span>);   <span class="comment">//左边的</span></div><div class="line">		 quickSort1(arrary,index+<span class="number">1</span>,high);  <span class="comment">//右边的</span></div><div class="line">		 </div><div class="line">	 &#125;</div></pre></td></tr></table></figure>
<h3 id="为什么从最右边开始查找"><a href="#为什么从最右边开始查找" class="headerlink" title="为什么从最右边开始查找"></a>为什么从最右边开始查找</h3><ul>
<li>如果从<code>最左边</code>开始查找，那么有可能某一次查找到了比基准值大的数，停止查找，等待最右边查找到比基准值小的数，但是此时最右边一直在查找，直到和其相遇都没有查找到比基准值小的数据，那么此时的的基准值就需要和这个比它还大的值交换，那么出现的结果就是此时的数组的第一个数是比基准值大的，违背了左边都是比基准值小的，右边都是比基准值大的。</li>
<li>如果从最右边开始查找，即使当某一个时刻查找到了比基准值小的数据，停止查找，等待左边查找到比基准值大的数据。但是左边没有找到，直至相遇，那么此时相遇的这个数任然是比基准值小的，因此和基准值交换是没有问题的</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/as02446418/article/details/47395867" target="_blank" rel="external">https://blog.csdn.net/as02446418/article/details/47395867</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速排序算法&quot;&gt;&lt;a href=&quot;#快速排序算法&quot; class=&quot;headerlink&quot; title=&quot;快速排序算法&quot;&gt;&lt;/a&gt;快速排序算法&lt;/h1&gt;&lt;h2 id=&quot;思想-从小到大排序&quot;&gt;&lt;a href=&quot;#思想-从小到大排序&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
