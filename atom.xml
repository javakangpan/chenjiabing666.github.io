<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-05-04T10:05:33.917Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis之增删改查</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis之增删改查/</id>
    <published>2018-05-04T10:04:29.000Z</published>
    <updated>2018-05-04T10:05:33.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis的增删改查"><a href="#Mybatis的增删改查" class="headerlink" title="Mybatis的增删改查"></a>Mybatis的增删改查</h1><h2 id="增加数据-lt-insert-gt"><a href="#增加数据-lt-insert-gt" class="headerlink" title="增加数据&lt;insert&gt;"></a>增加数据<code>&lt;insert&gt;</code></h2><ul>
<li>在增加数据的时候，mybatis默认返回的是受影响的行数，因此不需要指定<code>ResultType</code>指定返回类型</li>
<li>在<code>UserMapper.java</code>接口中添加方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	<span class="doctag">@param</span> user User对象</div><div class="line">*/</div><div class="line"><span class="function">Integer <span class="title">reg</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>UserMapper.xml</code>文件中添加<code>&lt;insert&gt;</code>节点</p>
<ul>
<li><code>#{}</code>中填写的是<code>User</code>对象的属性名称</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- parameterType属性的值是参数类型 </span></div><div class="line">	--&gt;</div><div class="line">	<span class="comment">&lt;!-- 节点中间编写SQL语句 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">		<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</div><div class="line">		INSERT INTO user (</div><div class="line">			username, password</div><div class="line">		) VALUES (</div><div class="line">			#&#123;username&#125;, #&#123;password&#125;</div><div class="line">		)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		</div><div class="line">		<span class="comment">//新建User对象</span></div><div class="line">		User user = <span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">		user.setPassword(<span class="string">"123456"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//调用reg(user)，进行添加，返回的是受影响的行数</span></div><div class="line">		Integer affectedRows</div><div class="line">			= userMapper.reg(user);</div><div class="line">		</div><div class="line">		System.out.println(</div><div class="line">			<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">		ac.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="在Mybatis中增加数据时获取自增主键的id"><a href="#在Mybatis中增加数据时获取自增主键的id" class="headerlink" title="在Mybatis中增加数据时获取自增主键的id"></a>在Mybatis中增加数据时获取自增主键的id</h2><ul>
<li>首先<code>mybatis</code>在处理增加数据的功能时，只是返回<code>受影响的行数</code>，所以在持久层中并不会返回新增加的</li>
<li>如果需要获取自增主键<code>Id</code>，首先，在<code>XML</code>映射的<code>&lt;insert&gt;</code>节点中需要添加<code>2</code>个属性<ul>
<li><code>useGeneratedKeys</code> ：设置是否返回自增主键，如果为<code>true</code>则返回，默认为<code>false</code></li>
<li><code>keyProperty</code> ： 配置自增主键在表中对应的字段 ，因为有时候在表中的自增主键的字段可能不是<code>id</code>，因此需要指定</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- parameterType属性的值是参数类型 </span></div><div class="line">	useGeneratedKeys: 指定是否返回自增主键，默认为false</div><div class="line">	keyProperty:配置自增主键在表中对应的字段 </div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">	<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</div><div class="line">	INSERT INTO user (</div><div class="line">		username, password</div><div class="line">	) VALUES (</div><div class="line">		#&#123;username&#125;, #&#123;password&#125;</div><div class="line">	)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>此时的<code>mybatis</code>执行<code>insert</code>方法之后，即是调用<code>reg(user)</code>，返回的还是<code>受影响的行数</code>，并不是此时的自增主键<code>id</code>的值。而是在调用这个方法的时候将<code>id</code>封装到指定的<code>方法参数</code>中，即是封装到<code>user</code>中了，因此只有调用者才可以获取<code>id</code>，而持久层无法获取</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	</div><div class="line">	<span class="comment">//新建User对象，此时并没有设置id的值</span></div><div class="line">	User user = <span class="keyword">new</span> User();</div><div class="line">	user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">	user.setPassword(<span class="string">"123456"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//调用reg(user)，进行添加，返回的是受影响的行数，但是此时已经将id封装到参数User对象中了</span></div><div class="line">	Integer affectedRows</div><div class="line">		= userMapper.reg(user);</div><div class="line">	</div><div class="line">	System.out.println(</div><div class="line">		<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">	<span class="comment">//直接获取Uesr对象中的id值，这个是自增主键返回的值</span></div><div class="line">	System.out.println(<span class="string">"id = "</span>+user.getId());</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除数据-lt-delete-gt"><a href="#删除数据-lt-delete-gt" class="headerlink" title="删除数据&lt;delete&gt;"></a>删除数据<code>&lt;delete&gt;</code></h2><ul>
<li><strong>在删除数据的时候，自动会返回受影响的行数，不需要在<code>delete</code>节点中定义返回类型，只有在查询数据的时候才会定义返回类型</strong></li>
</ul>
<ul>
<li>在<code>UserMapper.java</code>中添加一个接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据id删除数据，返回受影响的行数，返回1，如果删除失败返回0</span></div><div class="line"><span class="function">Integer <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;delete&gt;</code>节点</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 删除用户数据根据id</span></div><div class="line">	Integer deleteUserById(int id)</div><div class="line">	parameterType: 指定参数类型，这里也可以不需要指定</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">	delete from user where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>删除数据是不可逆的，通常不会真正的删除数据，我们会使用备份，日志等手段来保存数据，在许多软件上看到的删除也许都是<code>修改</code>操作，通常在表中有一个字段<code>is_deleted</code>标记是否删除，如果执行删除，那么就会设置其值为<code>true</code>表示已经删除了，那么此时将不会显示在客户端，让客户以为已经被删除了</strong></li>
</ul>
<h2 id="Mybaits参数规则"><a href="#Mybaits参数规则" class="headerlink" title="Mybaits参数规则"></a>Mybaits参数规则</h2><ul>
<li><strong><code>mybatis</code>默认支持一个参数，即是定义的接口方法中只能有一个参数</strong></li>
<li>如果需要支持多个参数，那么需要使用<code>@Param()</code>注解</li>
<li>如果接口方法中的参数类型是基本类型的可以不用<code>parameterType</code>指定类型，如果不是基本类型的，规范要求需要使用<code>parameterType</code>指定类型，但是可以不写</li>
</ul>
<h2 id="Param"><a href="#Param" class="headerlink" title="@Param()"></a>@Param()</h2><ul>
<li><strong>mybatis默认支持一个参数，即是定义的接口方法中只能有一个参数</strong></li>
<li>在设计java接口方法时，如果需要指定多个参数，那么必须使用<code>@Param()</code></li>
<li>如果想要支持多个参数，需要使用<code>@Param()</code>来指定参数，比如<code>Integer ChangePassword(@Param(&quot;id&quot;)Integer id,@Param(&quot;newPassword&quot;)String newPassword);</code><ul>
<li>其中<code>@Param(&quot;key&quot;)</code>中的<code>value</code>在配置增删改查的时候是使用<code>#{key}</code>表达式取出的</li>
</ul>
</li>
<li><code>mybaits</code>在处理过程中，本质上是使用了<code>Map</code>对参数进行了封装的。即是<code>@Param(&quot;&quot;)</code>注解中给出的参数值是<code>Map</code>中的<code>key</code>，调用方法时给出的参数值是Map中的<code>value</code>值，而最终在<code>XML</code>文件中使用<code>#{}</code>获取值，其实是使用Map中的<code>get(key)</code>方法获取的</li>
</ul>
<h2 id="修改数据-lt-update-gt"><a href="#修改数据-lt-update-gt" class="headerlink" title="修改数据&lt;update&gt;"></a>修改数据<code>&lt;update&gt;</code></h2><ul>
<li><p><strong>在修改数据的时候，mybatis自动返回受影响的行数，因此我们不需要定义返回类型，默认的返回数据就是受影响的行数</strong></p>
</li>
<li><p>在<code>UserMapper.java</code>接口中定义根据<code>id</code>修改数据的方法</p>
<ul>
<li>使用<code>@Param()</code>注解来标记多个参数</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 修改密码</div><div class="line"> * <span class="doctag">@param</span> id  id</div><div class="line"> * <span class="doctag">@param</span> newPassword  新密码</div><div class="line"> * <span class="doctag">@return</span>  受影响的行数</div><div class="line"> */</div><div class="line"><span class="function">Integer <span class="title">ChangePassword</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"newPassword"</span>)</span>String newPassword)</span>;</div></pre></td></tr></table></figure>
<ul>
<li><p>在<code>UserMapper.xml</code>中添加<code>&lt;update&gt;</code>节点</p>
<ul>
<li><strong>其中<code>#{}</code>表达式中的字段为<code>@Param(&quot;value&quot;)</code>中的<code>value</code></strong></li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 修改密码</span></div><div class="line">	Integer ChangePassword(@Param("id")Integer id,@Param("newPassword")String newPassword);</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"ChangePassword"</span>&gt;</span></div><div class="line">	update user set password=#&#123;newPassword&#125; where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testChangePassword</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//调用删除的方法</span></div><div class="line">	<span class="keyword">int</span> affectRow=userMapper.ChangePassword(<span class="number">3</span>, <span class="string">"12345895"</span>);</div><div class="line">	System.out.println(affectRow);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="案例：修改用户密码"><a href="#案例：修改用户密码" class="headerlink" title="案例：修改用户密码"></a>案例：修改用户密码</h3><h4 id="用户提供数据"><a href="#用户提供数据" class="headerlink" title="用户提供数据"></a>用户提供数据</h4><ul>
<li>旧密码：<code>oldPassword</code></li>
<li>新密码：<code>newPassword</code></li>
</ul>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>通过<code>id</code>查找用户信息<ol>
<li>不可以使用<code>select * from user where id=? and password=?</code>,因为这个是<strong>不区分大小写</strong>的,我们应该先根据<code>id</code>获取用户信息，再比较<code>password</code></li>
<li>在<code>UserserviceImpl</code>中完成验证逻辑，如果用户不存在，那么抛出用户不存在的异常，如果存在就验证原密码和是否匹配</li>
</ol>
</li>
<li>用户信息存在，那么就要验证用户输入的<code>oldPassword</code>和用户信息中的<code>原密码</code>是否相同了，如果不相同，抛出<code>密码不匹配的异常</code>，如果相同，那么就可以修改密码</li>
<li>修改密码</li>
</ol>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>我们编写了一个<code>UserService</code>中编写逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangePasssword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">		String newPassword) <span class="keyword">throws</span> UserNotFoundException, PasswordNotMatchException&#123;</div><div class="line">	User user=<span class="keyword">this</span>.findUserById(id);  <span class="comment">//获取用户信息</span></div><div class="line">	<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//如果用户信息不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"操作失败，用户信息不存在"</span>);</div><div class="line">	&#125;<span class="keyword">else</span> &#123; <span class="comment">//用户存在，则判断原密码</span></div><div class="line">		<span class="keyword">if</span> (user.getPassword().equals(oldPassword)) &#123;<span class="comment">//如果密码匹配</span></div><div class="line">			</div><div class="line">			userMapper.ChangePassword(id, newPassword);  <span class="comment">//修改密码</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//原密码不匹配</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PasswordNotMatchException(<span class="string">"操作失败，原密码不正确"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>那么在<code>Controller</code>中如果要调用这个<code>ChangePasssword</code>将会通过处理异常来判断哪里是出错了，并给出友好的提示</li>
</ul>
<h2 id="查询数据-lt-select-gt"><a href="#查询数据-lt-select-gt" class="headerlink" title="查询数据&lt;select&gt;"></a>查询数据<code>&lt;select&gt;</code></h2><h3 id="单条数据的查询"><a href="#单条数据的查询" class="headerlink" title="单条数据的查询"></a>单条数据的查询</h3><ul>
<li>根据<code>id</code>的查询返回的查询结果就是单条数据，比如：<code>select * from user where id=1</code></li>
<li><strong>单条记录的查询在编写<code>接口方法</code>的时候，只需要返回一个<code>实体类对象</code>即可</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据id查询用户信息</div><div class="line"> * <span class="doctag">@param</span> id  用户id</div><div class="line"> * <span class="doctag">@return</span> 返回User对象</div><div class="line"> */</div><div class="line"><span class="function">User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;select&gt;</code>节点<ul>
<li>需要使用<code>resultType</code>指定返回的类型，因为参数是基本类型，因此不需要使用<code>parameterType</code>指定参数类型</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	select * from user where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="多条记录的查找"><a href="#多条记录的查找" class="headerlink" title="多条记录的查找"></a>多条记录的查找</h3><ul>
<li>有些查找语句返回的是多条记录，那么我们可以使用<code>List&lt;&gt;</code>集合来接收返回的结果，不能直接使用<code>实体类对象</code>来接收</li>
<li>在<code>UserMapper.java</code>中定义接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据密码查找用户</div><div class="line"> * <span class="doctag">@param</span> password 用户密码</div><div class="line"> * <span class="doctag">@return</span> 返回的是一个用户的集合</div><div class="line"> */</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByPassword</span><span class="params">(String password)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中添加<code>&lt;select&gt;</code>节点<ul>
<li>这里的<code>resultType</code>虽然返回的是<code>User集合</code>，但是这里的类型还是需要写User类型</li>
<li>由于参数是基本类型，因此不需要使用<code>parameterType</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	List&lt;User&gt; findUserByPassword(String password);</div><div class="line">	resultType: 虽然返回的是User集合，但是这里的类型还是需要写User类型</div><div class="line"> --&gt;</div><div class="line"> </div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByPassword"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line"> 	select * from user where password=#&#123;password&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//获取User集合</span></div><div class="line">	List&lt;User&gt; users=userMapper.findUserByPassword(<span class="string">"12345895"</span>);</div><div class="line">	System.out.println(users);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>xxMapper.xml</code>中配置的节点的<code>id</code>要和<code>xxMapper.java</code>中的<code>方法名</code>相同</li>
<li>mybatis默认支持一个参数，但是我们可以使用<code>@Param(&quot;&quot;)</code>指定多个参数，不过在使用<code>#{}</code>取值的时候要和<code>@Param(&quot;&quot;)</code>中的参数一致</li>
<li>获取自增主键并不是作为方法的返回值，而是在调用方法的时候将自增主键的值设置在方法参数的对象中，那么此时的调用者就可以获取到<code>自增主键</code>的值</li>
<li>增加，修改，删除，方法返回的永远是受影响的行数</li>
<li><strong>在定义实体类属性的时候，尽量使用<code>包装类</code>，比如`Integer age</strong>`</li>
<li><strong>只要是<code>&lt;select&gt;</code>节点，那么必须写返回类型<code>resultType</code>，无论是基本型还是其他类型</strong></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis的增删改查&quot;&gt;&lt;a href=&quot;#Mybatis的增删改查&quot; class=&quot;headerlink&quot; title=&quot;Mybatis的增删改查&quot;&gt;&lt;/a&gt;Mybatis的增删改查&lt;/h1&gt;&lt;h2 id=&quot;增加数据-lt-insert-gt&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Mybatis" scheme="http://chenjiabing666.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://chenjiabing666.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>快速排序算法</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/快速排序算法/</id>
    <published>2018-05-04T09:55:26.000Z</published>
    <updated>2018-05-04T09:55:44.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h1><h2 id="思想-从小到大排序"><a href="#思想-从小到大排序" class="headerlink" title="思想(从小到大排序)"></a>思想(从小到大排序)</h2><ul>
<li>快速排序是使用<code>分治法</code>来完成的</li>
<li>基本思想就是先从其中选取一个<code>基准值</code>，然后从数组的两端开始移动查找，在<code>右边</code>移动查找到比<code>基准值</code>小的数据停止移动，此时在<code>左边</code>查找到比<code>基准值</code>大的数据也停止查找，<code>交换</code>这两个查找到的数据，交换完成之后两端继续移动查找，如果左边找到比基准值大的，右边找到比基准值小的数据，再次交换。直到查找到同一个数据上(相遇)或者”擦肩而过”。那么将<code>基准值</code>与<code>相遇的那个值</code>交换，此时就能够保证在基准值左边的都是比基准值小的，在其右边的都是比其大的数，此时一轮查找结束。接下来这个基准值将一个数组分成了<code>两半</code>，左边的是小的，右边是大的，那么我们再分别对左边和右边的数据进行相同的操作，直至不可拆分成新的子序列为止。</li>
<li>快速排序的最坏运行时间是<code>O(n2)</code>，但期望的运行时间是<code>O(nlgn)</code>。</li>
</ul>
<p>##选取数组的第一个数为基准值</p>
<ul>
<li>我们选取数组的<code>第一个元素</code>作为基准值</li>
<li>此时先从数组的最右边开始查找，如果找到比基准值小的停止查找，再从最左边开始查找，直至找到比基准值大的，那么两边就交换，交换完成之后，最右边再次开始查找，找到就等待左边找到数交换，直至双方相遇。那么把相遇的那个点的数据和基准值交换即可，那么现在在基准值左边的都是小的，在右边的都是大的，此时的基准值将数组分成了两个子序列，再对子序列进行重复的操作，直到不可拆分成子序列。</li>
</ul>
<ul>
<li>实现的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">	        </div><div class="line">	        <span class="comment">//递归结束的条件，如果此时的子序列只有一个元素就是low=high，就不用排序了</span></div><div class="line">	        <span class="keyword">if</span>(low&gt;=high)&#123;</div><div class="line">	            <span class="keyword">return</span>;</div><div class="line">	        &#125;</div><div class="line">	        </div><div class="line">	        <span class="keyword">int</span> i=low;   <span class="comment">//i从最左边开始查找</span></div><div class="line">	        <span class="keyword">int</span> j=high;   <span class="comment">//i从最右边开始查找</span></div><div class="line">	        <span class="keyword">int</span> temp = arr[low]; <span class="comment">//设置基准值为第一个元素，temp</span></div><div class="line">	        </div><div class="line">	        <span class="comment">//如果此时的i和j没有相遇，一直进行下去</span></div><div class="line">	        <span class="keyword">while</span> (i&lt;j) &#123;</div><div class="line">	        	<span class="comment">//先从右边开始查找，如果没有找到比基准值小的并且没有相遇，那么继续向右查找</span></div><div class="line">	            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</div><div class="line">	                j--;   <span class="comment">//向左移动</span></div><div class="line">	            &#125;</div><div class="line">	            </div><div class="line">	            <span class="comment">//再从左边开始查找，如果没有找到比基准值大的并且没有相遇，那么继续向左查找</span></div><div class="line">	            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</div><div class="line">	                i++;   <span class="comment">// 向右移动</span></div><div class="line">	            &#125;</div><div class="line">	           </div><div class="line">	           <span class="comment">//代码能够运行到这里，那么表示已经找到了右面小于基准值的，左面大于基准值的，那么就可以交换数据了</span></div><div class="line">	           <span class="comment">//这里的i&lt;j用于控制在最后相遇的时候还要交换数据，不必交换了，可以省去一次的交换</span></div><div class="line">	          <span class="keyword">if</span> (i&lt;j) &#123;</div><div class="line">	        	  	<span class="comment">//交换数据</span></div><div class="line">	        	   	<span class="keyword">int</span> t = arr[j];</div><div class="line">	                arr[j] = arr[i];</div><div class="line">	                arr[i] = t;</div><div class="line">	          &#125;</div><div class="line">	             </div><div class="line"></div><div class="line">	        &#125;</div><div class="line">	        </div><div class="line">	        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></div><div class="line">	         arr[low] = arr[i];  <span class="comment">//第一个元素设置为i和j相遇的那个值</span></div><div class="line">	         arr[i] = temp;   <span class="comment">//相遇的那个地方设置为基准值</span></div><div class="line">	         </div><div class="line">	        <span class="comment">//递归调用左半数组，以基准值为中心切割</span></div><div class="line">	        quickSort(arr, low, j-<span class="number">1</span>);</div><div class="line">	        <span class="comment">//递归调用右半数组</span></div><div class="line">	        quickSort(arr, j+<span class="number">1</span>, high);</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] array=&#123; <span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">24</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">45</span>,<span class="number">88</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">25</span>&#125;;</div><div class="line">quickSort(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">	System.out.print(array[i]+<span class="string">"\t"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="另外一种方式"><a href="#另外一种方式" class="headerlink" title="另外一种方式"></a>另外一种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">		  <span class="keyword">int</span> i=low;</div><div class="line">		  <span class="keyword">int</span> j=high;</div><div class="line">		  <span class="keyword">int</span> temp=array[low];  <span class="comment">//选取第一个为基准数</span></div><div class="line">		  <span class="comment">//如果此时的还没有相遇，表示没有结束</span></div><div class="line">		  <span class="keyword">while</span>(i&lt;j)&#123;</div><div class="line">			  <span class="comment">//因为基准数是最左面的，因此从最右面开始查找</span></div><div class="line">			  <span class="comment">//当当前的值比基准值大，并且i和j不相等，即是没有相遇</span></div><div class="line">			  <span class="keyword">while</span>(temp&lt;array[j]&amp;&amp;i&lt;j)&#123;</div><div class="line">				  j--;   <span class="comment">//向左移动，继续查找</span></div><div class="line">			  &#125;</div><div class="line">			  </div><div class="line">			  <span class="comment">//从左面开始查找，如果查找到的数据array[i]小于基准值并且i和j没有相遇，那么继续向右移动查找</span></div><div class="line">			  <span class="keyword">while</span>(array[i]&lt;temp&amp;&amp;i&lt;j)&#123;</div><div class="line">				  i++;  <span class="comment">//继续向右移动查找</span></div><div class="line">			  &#125;</div><div class="line">			  </div><div class="line">			<span class="comment">//代码能够运行到这里，那么表示已经找到了右面小于基准值的，左面大于基准值的，那么就可以交换数据了</span></div><div class="line">	          <span class="keyword">if</span> (i&lt;j) &#123;</div><div class="line">	        	   	<span class="keyword">int</span> t = array[j];</div><div class="line">	                array[j] = array[i];</div><div class="line">	                array[i] = t;</div><div class="line">	          &#125;</div><div class="line">		  &#125;</div><div class="line">		  </div><div class="line">		  low=i;</div><div class="line">		  high=j;</div><div class="line">		  </div><div class="line">		  <span class="keyword">return</span> j ;   <span class="comment">//返回当前的基准值在数组中的索引，用于分割子序列</span></div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 </div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort1</span><span class="params">(<span class="keyword">int</span>[] arrary,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">		 <span class="comment">//停止条件，如果low&gt;high表示相遇，那么停止递归</span></div><div class="line">		 <span class="keyword">if</span>(low&gt;high)&#123;</div><div class="line">			 <span class="keyword">return</span>;</div><div class="line">		 &#125;</div><div class="line">		 <span class="keyword">int</span> index=partition(arrary, low, high);  <span class="comment">//获取基准值的位置</span></div><div class="line">		 quickSort1(arrary, low, index-<span class="number">1</span>);   <span class="comment">//左边的</span></div><div class="line">		 quickSort1(arrary,index+<span class="number">1</span>,high);  <span class="comment">//右边的</span></div><div class="line">		 </div><div class="line">	 &#125;</div></pre></td></tr></table></figure>
<h3 id="为什么从最右边开始查找"><a href="#为什么从最右边开始查找" class="headerlink" title="为什么从最右边开始查找"></a>为什么从最右边开始查找</h3><ul>
<li>如果从<code>最左边</code>开始查找，那么有可能某一次查找到了比基准值大的数，停止查找，等待最右边查找到比基准值小的数，但是此时最右边一直在查找，直到和其相遇都没有查找到比基准值小的数据，那么此时的的基准值就需要和这个比它还大的值交换，那么出现的结果就是此时的数组的第一个数是比基准值大的，违背了左边都是比基准值小的，右边都是比基准值大的。</li>
<li>如果从最右边开始查找，即使当某一个时刻查找到了比基准值小的数据，停止查找，等待左边查找到比基准值大的数据。但是左边没有找到，直至相遇，那么此时相遇的这个数任然是比基准值小的，因此和基准值交换是没有问题的</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/as02446418/article/details/47395867" target="_blank" rel="external">https://blog.csdn.net/as02446418/article/details/47395867</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速排序算法&quot;&gt;&lt;a href=&quot;#快速排序算法&quot; class=&quot;headerlink&quot; title=&quot;快速排序算法&quot;&gt;&lt;/a&gt;快速排序算法&lt;/h1&gt;&lt;h2 id=&quot;思想-从小到大排序&quot;&gt;&lt;a href=&quot;#思想-从小到大排序&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序算法</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/冒泡排序算法/</id>
    <published>2018-05-04T09:54:34.000Z</published>
    <updated>2018-05-04T09:55:04.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>比较相邻的两个数，将值较大的元素放在最前面，由于较小的数字像泡泡一样浮上来，因此取名为冒泡</li>
</ul>
<h2 id="从后向前比较-小的数上浮"><a href="#从后向前比较-小的数上浮" class="headerlink" title="从后向前比较(小的数上浮)"></a>从后向前比较(小的数上浮)</h2><ul>
<li><code>第一趟</code>：从数组的最后一个元素和倒数第二个元素比较，小的上浮(交换)，之后倒数第二个和倒数第三个数字比较，小的上浮(交换)，直至第二个数字和第一个数字比较，小的上浮,那么经过一趟排序之后，此时的第一个元素就是<strong>最小的</strong></li>
<li><code>第二趟</code>： 经过第一趟之后，第一个就是最小的数字，因此第二趟就不比较第一个和第二个数字了。从最后一个元素和倒数第二个元素比较，小的上浮，直至第三个元素和第二个元素比较，小的上浮，那么此时的第二个就是仅次于第一个的小的元素</li>
<li><code>第三趟</code>：和前面一样的比较，不过就是不用比较第二个和第三个元素了，因为经过第一趟和第二趟之后，数组中的第一个和第二个元素已经是最小的两个了。经过第三趟比较，第三个元素是仅次于第一个和第二个元素小的元素</li>
<li><code>第四趟</code>，<code>第五趟</code>………………………………</li>
</ul>
<ul>
<li><strong>从上面我们可以得出，假设数组中有<code>n</code>个元素，那么需要经过<code>n-1</code>趟排序才可以完成全部的比较，最后一趟可以比较出倒数第一个和倒数第二个元素的大小</strong></li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒泡排序算法之从后向前比较排序</div><div class="line"> * <span class="doctag">@param</span> a  需要排序的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">	<span class="comment">// 外层循环控制排序的趟数，总共需要n-1趟排序</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="comment">//内层循环控制的是每一趟排序需要比较的次数，j=a.length-1 表示从最后一个元素开始比较，j&gt;i是用于控制每趟之后比较的次数</span></div><div class="line">		<span class="comment">//比如，经过第一趟之后，那么第一个元素肯定是最小的，因此就不需要将第二个元素和其比较了，第二趟之后第二个元素第一个和第二个元素就是最小的，都需要比较了</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=a.length-<span class="number">1</span>;j&gt;i;j--)&#123;</div><div class="line">			<span class="comment">//比较大小，较小的就上浮</span></div><div class="line">			<span class="keyword">if</span>(a[j]&lt;a[j-<span class="number">1</span>])&#123;</div><div class="line">				<span class="comment">//交换位置</span></div><div class="line">				<span class="keyword">int</span> temp=a[j];</div><div class="line">				a[j]=a[j-<span class="number">1</span>];</div><div class="line">				a[j-<span class="number">1</span>]=temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="从前向后比较-大的数字下沉"><a href="#从前向后比较-大的数字下沉" class="headerlink" title="从前向后比较(大的数字下沉)"></a>从前向后比较(大的数字下沉)</h2><ul>
<li><code>第一趟</code>：从第一个元素和第二个元素进行比较，较大的下沉(交换)，然后第二个元素和第三个元素比较，较大的下沉，直至倒数第二个和最后一个比较，大的下沉，那么此时的<strong>最后一个数就是最大的</strong></li>
<li><code>第二趟</code>： 从第一个元素和第二个元素进行比较，较大的下沉，然后第二个和第三个比较，直至倒数第三个和倒数第二个比较，大的下沉，那么此时的倒数第二个数是仅次于最后一个数小的元素。因为经过<code>第一趟</code>之后，最后一个元素已经是最大的，因此不需要比较了</li>
<li><code>第三趟</code>： 经过第二趟之后，倒数第二个仅次于最后一个元素小的元素了，因此在第三趟中只需要比较到倒数第四个和倒数第三个元素的大小即可，大的下沉，那么此时的倒数第三个元素又是前面所有元素中最大的，因此在第四趟排序就不需要和其比较了。</li>
<li><code>第四趟</code>……………………………………………………</li>
</ul>
<ul>
<li>从上面我们可以得出结论： 假设有<code>n</code>个元素，那么总共需要进行<code>n-1</code>趟排序</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 冒泡排序算法之从前向后比较排序</div><div class="line">	 * <span class="doctag">@param</span> a  需要排序的数组</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">		<span class="comment">// 外层循环控制排序的趟数，总共需要n-1趟排序</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</div><div class="line">			<span class="comment">//内层循环控制每趟循环比较的次数，j=0表示从第一个元素开始进行比较，j&lt;a.length-1-i用来控制每趟循环之后不用再比较的元素索引</span></div><div class="line">			<span class="comment">//比如第一趟循环之后，最后一个元素就是最大的，那么在第二趟循环就不需要和其比较了</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++) &#123;</div><div class="line">				<span class="comment">//相邻的元素进行比较，如果前面的大于后面的就交换位置</span></div><div class="line">				<span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</div><div class="line">					<span class="keyword">int</span> temp = a[j];</div><div class="line">					a[j] = a[j + <span class="number">1</span>];</div><div class="line">					a[j + <span class="number">1</span>] = temp;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;冒泡排序算法&quot;&gt;&lt;a href=&quot;#冒泡排序算法&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序算法&quot;&gt;&lt;/a&gt;冒泡排序算法&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/JSON/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/JSON/</id>
    <published>2018-05-04T09:53:41.000Z</published>
    <updated>2018-05-04T09:54:05.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>数据组织的一种方式</li>
</ul>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ul>
<li><code>key-value</code>形式的组织</li>
</ul>
<h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><ul>
<li>对象保存在<code>{}</code>中，并且以<code>key-value</code>的形式存储</li>
<li><strong>其中的<code>key</code>必须是加上<code>双引号</code>，不能是<code>单引号</code></strong></li>
</ul>
<ul>
<li><code>{&quot;key1&quot;,value1,&quot;key2&quot;,value2,..........}</code><ul>
<li>其中的<code>value</code>可以是任意类型的，比如<code>整数</code>，<code>字符串</code>等</li>
</ul>
</li>
<li><code>{&quot;name&quot;:&quot;Jack&quot;,&quot;age&quot;:22}</code>，这个是简单的对象</li>
<li>对象之中还可以<strong>嵌套（对象之中嵌套对象）</strong></li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"Jack"</span>,</div><div class="line">    <span class="attr">"age"</span>:<span class="number">22</span></div><div class="line">    <span class="string">"data"</span>:&#123;</div><div class="line">    		<span class="attr">"name"</span>:<span class="string">"admin"</span>,</div><div class="line">    		<span class="attr">"age"</span>:<span class="number">33</span>,</div><div class="line">    		<span class="attr">"telephone"</span>:<span class="string">"1235488"</span>,</div><div class="line">    		<span class="attr">"password"</span>:<span class="string">"12345686"</span></div><div class="line">			&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JSON数组"><a href="#JSON数组" class="headerlink" title="JSON数组"></a>JSON数组</h3><ul>
<li>使用<code>[]</code>保存数组</li>
<li>独立的数组：<code>[&quot;admin&quot;,&quot;Tom&quot;,&quot;JACk&quot;]</code></li>
<li>数组中包含对象</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"Jack"</span>,<span class="attr">"age"</span>:<span class="number">22</span>&#125;,</div><div class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"Tom"</span>,<span class="attr">"age"</span>:<span class="number">33</span>&#125;,</div><div class="line">    <span class="string">"date"</span>:<span class="string">"2012-12-12"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>在对象中也是可以包含<code>JSON数组</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"employees"</span>: [</div><div class="line">                    &#123; <span class="attr">"firstName"</span>:<span class="string">"John"</span> , <span class="attr">"lastName"</span>:<span class="string">"Doe"</span> &#125;,</div><div class="line">                    &#123; <span class="attr">"firstName"</span>:<span class="string">"Anna"</span> , <span class="attr">"lastName"</span>:<span class="string">"Smith"</span> &#125;,</div><div class="line">                    &#123; <span class="attr">"firstName"</span>:<span class="string">"Peter"</span> , <span class="attr">"lastName"</span>:<span class="string">"Jones"</span> &#125;</div><div class="line">				],</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"JACK"</span>,</div><div class="line">    <span class="attr">"age"</span>:<span class="number">22</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="访问JSON对象"><a href="#访问JSON对象" class="headerlink" title="访问JSON对象"></a>访问JSON对象</h2><ul>
<li>定义一个JSON对象并且获取</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="string">"name"</span>:<span class="string">"Jack"</span>,</div><div class="line">    <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">    <span class="string">"data"</span>:&#123;</div><div class="line">    		<span class="string">"name"</span>:<span class="string">"admin"</span>,</div><div class="line">    		<span class="string">"age"</span>:<span class="number">33</span>,</div><div class="line">    		<span class="string">"telephone"</span>:<span class="string">"1235488"</span>,</div><div class="line">    		<span class="string">"password"</span>:<span class="string">"12345686"</span></div><div class="line">			&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> name=obj.name;</div><div class="line"><span class="keyword">var</span> age=obj.age;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dataName=obj.data.name;</div><div class="line"><span class="keyword">var</span> dataAge=obj.data.age;</div></pre></td></tr></table></figure>
<h2 id="访问JSON数组"><a href="#访问JSON数组" class="headerlink" title="访问JSON数组"></a>访问JSON数组</h2><ul>
<li>定义并且访问<ul>
<li>我们定义一个对象，其中包含一个JSON数组<code>employees</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testJSON</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//定义一个对象，其中包含JSON数组employees</span></div><div class="line">	<span class="keyword">var</span> obj = &#123;</div><div class="line">		    <span class="string">"employees"</span>: [</div><div class="line">		                    &#123; <span class="string">"firstName"</span>:<span class="string">"John"</span> , <span class="string">"lastName"</span>:<span class="string">"Doe"</span> &#125;,</div><div class="line">		                    &#123; <span class="string">"firstName"</span>:<span class="string">"Anna"</span> , <span class="string">"lastName"</span>:<span class="string">"Smith"</span> &#125;,</div><div class="line">		                    &#123; <span class="string">"firstName"</span>:<span class="string">"Peter"</span> , <span class="string">"lastName"</span>:<span class="string">"Jones"</span> &#125;</div><div class="line">						],</div><div class="line">		    <span class="string">"name"</span>:<span class="string">"JACK"</span>,</div><div class="line">		    <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">		&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//遍历其中的JSON数组employees</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;obj.employees.length;i++)&#123;</div><div class="line">		<span class="built_in">console</span>.log(obj.employees[i].firstName+<span class="string">"-----"</span>+obj.employees[i].lastName);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSON-parse-str"><a href="#JSON-parse-str" class="headerlink" title="JSON.parse(str)"></a>JSON.parse(str)</h2><ul>
<li>将字符串形式的<code>JSON对象</code>转换成为<code>JSON对象</code>，即是去掉<code>引号</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p=<span class="string">'&#123;"name":"陈加兵","age":22&#125;'</span>;   <span class="comment">//这个是json字符串</span></div><div class="line"></div><div class="line"><span class="comment">//这样取值肯定不行，因为此时的p并不是JSON对象，而是一个字符串形式的JSON对象</span></div><div class="line"></div><div class="line">alert(p.name+<span class="string">"---&gt;"</span>+p.age);  </div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(p);     <span class="comment">//将字符串形式的json对象转换成真正的JSON对象</span></div><div class="line">alert(obj.name + <span class="string">"---&gt;"</span> + obj.age);  <span class="comment">//此时就可以取出其中的值了</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h
    
    </summary>
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>javascript实现Ajax</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/javascript%E5%AE%9E%E7%8E%B0Ajax/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/javascript实现Ajax/</id>
    <published>2018-05-04T09:52:53.000Z</published>
    <updated>2018-05-04T09:53:23.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript实现Ajax"><a href="#javascript实现Ajax" class="headerlink" title="javascript实现Ajax"></a>javascript实现Ajax</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>异步的<code>javascript</code>和<code>XML</code>，实现异步提交功能的技术(XMLHttpRequest)</li>
<li>不响应页面的前提下，服务器可以响应其中的一小部分数据到页面上</li>
</ul>
<h2 id="实现的步骤"><a href="#实现的步骤" class="headerlink" title="实现的步骤"></a>实现的步骤</h2><h3 id="创建XMLHttpRequest"><a href="#创建XMLHttpRequest" class="headerlink" title="创建XMLHttpRequest"></a>创建XMLHttpRequest</h3><ul>
<li>解决浏览器兼容问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> xmlhttp;</div><div class="line">	<span class="comment">//判断当前浏览器是否识别XMLHttpRequest</span></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line"> 			&#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line"> 				xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line"> 			&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line"> 			&#123;<span class="comment">// code for IE6, IE5</span></div><div class="line"> 				xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line"> 			&#125;</div><div class="line"> 		<span class="keyword">return</span> xmlhttp;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数：请求的方式</span></div><div class="line"><span class="comment">//第二： 请求的url</span></div><div class="line"><span class="comment">//第三个：是否为异步，true表示异步，false表示同步</span></div><div class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"Url"</span>,<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<h3 id="接收服务器响应数据"><a href="#接收服务器响应数据" class="headerlink" title="接收服务器响应数据"></a>接收服务器响应数据</h3><ul>
<li><code>xhr.onreadystatechange</code> : 表示从发送请求到响应请求的状态变化，根据状态的变化，处理数据5种状态</li>
<li><code>xhr.readyState</code> ： 获取状态值<ul>
<li><code>0</code> : 表示<code>xhr</code>对象创建，但是还未初始化</li>
<li><code>1</code> ：初始化完成，发送请求</li>
<li><code>2</code> ： 接收服务器的响应</li>
<li><code>3</code>：解析服务器断响应的数据</li>
<li><code>4</code>： 响应数据</li>
</ul>
</li>
<li><code>xhr.status</code> : 获取响应状态码 <ul>
<li><code>200</code> ：表示<code>ok</code></li>
<li><code>if(xhr.status==200)</code></li>
</ul>
</li>
<li><code>xhr.responseText</code> : 获取文本数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用于监听</span></div><div class="line">		xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//如果数据响应成功，并且状态码为200</span></div><div class="line">			<span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>) &#123;</div><div class="line">				<span class="comment">//处理数据</span></div><div class="line">				<span class="keyword">var</span> text=xhr.responseText;   <span class="comment">//获取文本数据</span></div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>请求本地的<code>file.text</code>文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadText</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> xhr;</div><div class="line">	<span class="comment">//判断当前浏览器是否识别XMLHttpRequest</span></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line"> 			&#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line"> 				xhr=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line"> 			&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line"> 			&#123;<span class="comment">// code for IE6, IE5</span></div><div class="line"> 				xhr=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line"> 			&#125;</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//用于监听</span></div><div class="line"> 		xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 			<span class="comment">//如果数据响应成功，并且状态码为200</span></div><div class="line"> 			<span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>) &#123;</div><div class="line"> 				<span class="comment">//处理数据</span></div><div class="line"> 				<span class="keyword">var</span> text=xhr.responseText;   <span class="comment">//获取文本数据</span></div><div class="line"> 				alert(text);</div><div class="line"> 			&#125;</div><div class="line"> 		&#125;</div><div class="line">	</div><div class="line">             <span class="comment">//异步请求</span></div><div class="line"> 		xhr.open(<span class="string">"GET"</span>,<span class="string">"file.text"</span>,<span class="literal">true</span>);  </div><div class="line"> 		xhr.send();  <span class="comment">//发送请求</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;javascript实现Ajax&quot;&gt;&lt;a href=&quot;#javascript实现Ajax&quot; class=&quot;headerlink&quot; title=&quot;javascript实现Ajax&quot;&gt;&lt;/a&gt;javascript实现Ajax&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis配置事务管理器</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis配置事务管理器/</id>
    <published>2018-05-04T09:52:03.000Z</published>
    <updated>2018-05-04T10:00:08.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis配置事务管理器"><a href="#Mybatis配置事务管理器" class="headerlink" title="Mybatis配置事务管理器"></a>Mybatis配置事务管理器</h1><ul>
<li>数据库中的事务可以保证在连续执行的<strong>多条写操作(增删改)</strong>时，这多条操作要么成功，要么全部失败，以保证数据和逻辑的完整及严谨</li>
<li>在使用<code>mybatis</code>时，无需考虑事务如何创建，如何提交等，只需要配置好事务管理器</li>
</ul>
<h2 id="配置事务管理器-DataSourceTransactionManager"><a href="#配置事务管理器-DataSourceTransactionManager" class="headerlink" title="配置事务管理器(DataSourceTransactionManager)"></a>配置事务管理器(DataSourceTransactionManager)</h2><ul>
<li>在spring的配置文件中配置即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置MapperScannerConfigurer,自动扫描整个包，并且spring会自动创建UserMapper接口对象--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">			<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!-- 配置XML文件的位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"classpath:mappers/UserMapper.xml"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="comment">&lt;!--配置事务管理器，需要用到前面配置的数据源datasource--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="开启事务注解"><a href="#开启事务注解" class="headerlink" title="开启事务注解"></a>开启事务注解</h2><ul>
<li>直接在<code>spring</code>配置文件中配置即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启事务注解 ,transaction-manager指定的是上面配置的事务管理器的id--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在需要使用事务的方法上添加-Transactional注解-或者是Service类上"><a href="#在需要使用事务的方法上添加-Transactional注解-或者是Service类上" class="headerlink" title="在需要使用事务的方法上添加@Transactional注解(或者是Service类上)"></a>在需要使用事务的方法上添加<code>@Transactional</code>注解(或者是Service类上)</h2><ul>
<li>如果添加在类上，那么类中的全部方法都会被事务管理器管理</li>
<li>如果添加在方法上，那么只有这个方法会被管理</li>
<li>事务只发生在<code>service</code>的</li>
</ul>
<ul>
<li>在方法上添加注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangePasssword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">		String newPassword) <span class="keyword">throws</span> UserNotFoundException, PasswordNotMatchException&#123;</div><div class="line">	User user=<span class="keyword">this</span>.findUserById(id);  <span class="comment">//获取用户信息</span></div><div class="line">	<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//如果用户信息不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"操作失败，用户信息不存在"</span>);</div><div class="line">	&#125;<span class="keyword">else</span> &#123; <span class="comment">//用户存在，则判断原密码</span></div><div class="line">		<span class="keyword">if</span> (user.getPassword().equals(oldPassword)) &#123;<span class="comment">//如果密码匹配</span></div><div class="line">			User user1=<span class="keyword">new</span> User();</div><div class="line">			user1.setPassword(newPassword);</div><div class="line">			userMapper.update(user1);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//原密码不匹配</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PasswordNotMatchException(<span class="string">"操作失败，原密码不正确"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>service</code>类上添加<code>@Transactional</code>注解，那么类中的整个方法都会被管理</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>  </div><div class="line"><span class="meta">@Transactional</span>   <span class="comment">//配置事务管理</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> UserMapper userMapper;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h2><ul>
<li>在<code>spring-service.xml</code>中开启组件扫描<code>service</code>即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.spring.service"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事务如何处理"><a href="#事务如何处理" class="headerlink" title="事务如何处理"></a>事务如何处理</h2><ul>
<li><strong>在spring处理事务时，如果遇到<code>RuntimeException</code>就会自动回滚</strong></li>
</ul>
<h2 id="完整的spring配置文件"><a href="#完整的spring配置文件" class="headerlink" title="完整的spring配置文件"></a>完整的spring配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置MapperScannerConfigurer,自动扫描整个包，并且spring会自动创建UserMapper接口对象--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">			<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!-- 配置XML文件的位置,其中的值是一个数组 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/UserMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/DormitoryMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 开启事务注解 ,transaction-manager指定的是上面配置的事务管理器的id--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis配置事务管理器&quot;&gt;&lt;a href=&quot;#Mybatis配置事务管理器&quot; class=&quot;headerlink&quot; title=&quot;Mybatis配置事务管理器&quot;&gt;&lt;/a&gt;Mybatis配置事务管理器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数据库中的事务可以保证在连续执行
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之多表查询</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E4%B9%8B%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis之多表查询/</id>
    <published>2018-05-04T09:51:10.000Z</published>
    <updated>2018-05-04T09:51:35.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis之多表查询"><a href="#Mybatis之多表查询" class="headerlink" title="Mybatis之多表查询"></a>Mybatis之多表查询</h1><h2 id="一对一的查询-lt-assocation-gt"><a href="#一对一的查询-lt-assocation-gt" class="headerlink" title="一对一的查询(&lt;assocation&gt;)"></a><code>一对一</code>的查询(<code>&lt;assocation&gt;</code>)</h2><h3 id="创建Java类"><a href="#创建Java类" class="headerlink" title="创建Java类"></a>创建Java类</h3><ul>
<li>创建<code>User</code>类(用户类)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6716332190979093860L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="keyword">private</span> Department department;   <span class="comment">//Department对象</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">(Department department)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.department = department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((age == <span class="keyword">null</span>) ? <span class="number">0</span> : age.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((department == <span class="keyword">null</span>) ? <span class="number">0</span> : department.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((password == <span class="keyword">null</span>) ? <span class="number">0</span> : password.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((username == <span class="keyword">null</span>) ? <span class="number">0</span> : username.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		User other = (User) obj;</div><div class="line">		<span class="keyword">if</span> (age == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.age != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!age.equals(other.age))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (department == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.department != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!department.equals(other.department))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.password != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(other.password))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.username != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!username.equals(other.username))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span></div><div class="line">				+ password + <span class="string">", age="</span> + age + <span class="string">", department="</span> + department</div><div class="line">				+ <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建<code>Department</code>类(部门类)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Department other = (Department) obj;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Department [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li>我们知道<code>一个用户只能属于一个部门</code>，因此这里在<code>User</code>类中只是使用了<code>Department</code>对象，而不是个<code>集合</code></li>
<li>那么我们想要查询所有的用户信息和其所在的部门信息，此时的<code>sql</code>语句为:<code>select * from user u left join department d on u.department_id=d.id;</code>。但是我们在mybaits中如果使用这条语句查询，那么返回的结果类型是什么呢？如果是<code>User</code>类型的，那么查询结果返回的还有<code>Department</code>类型的数据，那么肯定会对应不上的。</li>
<li>我们可以使用<code>resultMap</code>解决对应问题</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>使用<code>resultMap</code>解决查询结果的对应问题<ul>
<li>这里一定要在<code>resultMap</code>将每一个字段和查询结果返回的字段对应上，否则此时的结果就为<code>null</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义resultMap --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">id</span>=<span class="string">"UserDepartment"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置id的对应 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置其他字段的对应关系</span></div><div class="line">		column: 查询结果中的列名字，如果没有起别名，那么就是表中的字段名</div><div class="line">		property: java类中的属性名称</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置对1的数据类型，即User类中的Department对象是单一的具体类型</span></div><div class="line">		property: 这个是在User类中的字段名称</div><div class="line">		javaType: 这个是java类的全名，是Department类的全名</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> <span class="attr">javaType</span>=<span class="string">"cn.tedu.spring.entity.Department"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	User findUserAndDepartment();</div><div class="line">	resultMap: 指定上面resultMap的id的值</div><div class="line"> --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndDepartment"</span> <span class="attr">resultMap</span>=<span class="string">"UserDepartment"</span>&gt;</span></div><div class="line"> 	select *  from user u left join department d on u.department_id=d.id</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndDepartment</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		List&lt;User&gt; users=userMapper.findUserAndDepartment();</div><div class="line">		<span class="keyword">for</span> (User user : users) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">		ac.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="一对多的查询-lt-collection-gt"><a href="#一对多的查询-lt-collection-gt" class="headerlink" title="一对多的查询(&lt;collection&gt;)"></a><code>一对多</code>的查询(<code>&lt;collection&gt;</code>)</h2><ul>
<li>一个宿舍可以住多个学生，那么我们通过宿舍查询学生，那么就是<code>一对多</code>查询</li>
</ul>
<h3 id="创建Java"><a href="#创建Java" class="headerlink" title="创建Java"></a>创建Java</h3><ul>
<li>创建<code>Student</code>类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8673238196042278929L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((age == <span class="keyword">null</span>) ? <span class="number">0</span> : age.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Student other = (Student) obj;</div><div class="line">		<span class="keyword">if</span> (age == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.age != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!age.equals(other.age))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建<code>Dormitory</code>类<ul>
<li>其中有一个<code>Set&lt;Student&gt;</code>集合用来存储学生对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dormitory</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1359749532219773083L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String number;  <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students;  <span class="comment">//学生集合，一个宿舍可以住多个学生</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> number;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String number)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.number = number;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> students;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.students = students;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((number == <span class="keyword">null</span>) ? <span class="number">0</span> : number.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((students == <span class="keyword">null</span>) ? <span class="number">0</span> : students.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Dormitory other = (Dormitory) obj;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (number == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.number != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!number.equals(other.number))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (students == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.students != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!students.equals(other.students))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Dormitory [id="</span> + id + <span class="string">", number="</span> + number + <span class="string">", students="</span></div><div class="line">				+ students + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><ul>
<li>student</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,age <span class="built_in">int</span>,dormitory_id <span class="built_in">int</span>);</div></pre></td></tr></table></figure>
<ul>
<li>dormitory</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> dormitory(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="built_in">number</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>);</div></pre></td></tr></table></figure>
<h3 id="创建DormitoryMapper-java-接口"><a href="#创建DormitoryMapper-java-接口" class="headerlink" title="创建DormitoryMapper.java(接口)"></a>创建DormitoryMapper.java(接口)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DormitoryMapper</span> </span>&#123;</div><div class="line">	<span class="comment">//查询所有的宿舍信息</span></div><div class="line">	<span class="function">List&lt;Dormitory&gt; <span class="title">findDormitories</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">//根据id查询宿舍信息</span></div><div class="line">	<span class="function">Dormitory <span class="title">findDormitory</span><span class="params">(Integer id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建DormitoryMapper-xml"><a href="#创建DormitoryMapper-xml" class="headerlink" title="创建DormitoryMapper.xml"></a>创建DormitoryMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;  </div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- MyBatis的接口映射文件，根节点是mapper --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 接口映射文件是与Java接口文件(interface)相对应的 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 根节点的namespace属性用于指定Java接口文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.spring.mapper.DormitoryMapper"</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 定义resultMap</span></div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.tedu.spring.entity.Dormitory"</span> <span class="attr">id</span>=<span class="string">"DormitoryStudentRs"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 因为Dormitoy中的Student使用set集合存储的，因此这里使用collection标签</span></div><div class="line">			property ： Java类中的集合对象</div><div class="line">			ofType： 集合对象的泛型类型</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"cn.tedu.spring.entity.Student"</span>&gt;</span></div><div class="line">			</div><div class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 	List&lt;Dormitory&gt; findDormitories();</span></div><div class="line">			查询所有的宿舍信息</div><div class="line">			resultMap： 指定前面定义的resultMap</div><div class="line">	 --&gt;</div><div class="line">	 </div><div class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findDormitories"</span> <span class="attr">resultMap</span>=<span class="string">"DormitoryStudentRs"</span>&gt;</span></div><div class="line">	 	select * from student s left join dormitory d on s.dormitory_id=d.id</div><div class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	 </div><div class="line">	 <span class="comment">&lt;!-- </span></div><div class="line">	 	Dormitory findDormitory(Integer id);</div><div class="line">	  --&gt;</div><div class="line">	  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findDormitory"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.Dormitory"</span>&gt;</span></div><div class="line">	  	select * from dormitory where id=#&#123;id&#125;</div><div class="line">	  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="在spring配置文件中添加DormitoryMapper-xml文件"><a href="#在spring配置文件中添加DormitoryMapper-xml文件" class="headerlink" title="在spring配置文件中添加DormitoryMapper.xml文件"></a>在<code>spring</code>配置文件中添加<code>DormitoryMapper.xml</code>文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!-- 配置XML文件的位置,其中的值是一个数组 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">array</span>&gt;</span>	</div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/UserMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/DormitoryMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindDormitory</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	<span class="comment">//获取DormitoryMapper对象</span></div><div class="line">	DormitoryMapper dormitoryMapper=ac.getBean(<span class="string">"dormitoryMapper"</span>,DormitoryMapper.class);</div><div class="line">	</div><div class="line">       <span class="comment">//执行查询方法</span></div><div class="line">	List&lt;Dormitory&gt; dormitories=dormitoryMapper.findDormitories();</div><div class="line">	<span class="keyword">for</span> (Dormitory dormitory : dormitories) &#123;</div><div class="line">		System.out.println(dormitory);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis之多表查询&quot;&gt;&lt;a href=&quot;#Mybatis之多表查询&quot; class=&quot;headerlink&quot; title=&quot;Mybatis之多表查询&quot;&gt;&lt;/a&gt;Mybatis之多表查询&lt;/h1&gt;&lt;h2 id=&quot;一对一的查询-lt-assocation-gt&quot;&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之ResultMap</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E4%B9%8BResultMap/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis之ResultMap/</id>
    <published>2018-05-04T09:49:51.000Z</published>
    <updated>2018-05-04T09:50:47.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis之ResultMap"><a href="#Mybatis之ResultMap" class="headerlink" title="Mybatis之ResultMap"></a>Mybatis之ResultMap</h1><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><ul>
<li>通常实体类中的属性要和数据库表中的字段一致，包括类型，字段名称</li>
<li>因此我们在单表查询的时候不需要使用&lt;<code>resultMap&gt;</code>指定实体类和表中的字段对应关系，但是如果我们在查询的时候使用了别名，或者属性字段和表的字段不一致，那么我们就需要用<code>&lt;resultMap&gt;</code>指定对应关系了</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>创建一个User类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6716332190979093860L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span></div><div class="line">				+ password + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建user表<ul>
<li>表中的字段和<code>User</code>实体类一致</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,username <span class="built_in">varchar</span>(<span class="number">20</span>),age <span class="built_in">int</span> ,<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">20</span>));</div></pre></td></tr></table></figure>
<h2 id="根据id查询用户信息-使用resultType指定结果类型"><a href="#根据id查询用户信息-使用resultType指定结果类型" class="headerlink" title="根据id查询用户信息(使用resultType指定结果类型)"></a>根据id查询用户信息(使用<code>resultType</code>指定结果类型)</h2><ul>
<li>直接在<code>UserMapper.xml</code>中配置<code>&lt;select&gt;即可</code><ul>
<li>使用<code>resultType</code>指定返回的结果类型</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	User findUserById(Integer id);</div><div class="line">	resultType: 指定返回的结果类型</div><div class="line"> --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line"> 	select username,password,age,id from user where id=#&#123;id&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>上面的查询返回的结果字段和<code>User</code>实体类中的属性字段一致，因此只需要指定<code>resultType</code>即可对应。但是如果我们查询的语句如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	User findUserById(Integer id);</div><div class="line">	resultType: 指定返回的结果类型</div><div class="line"> --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line"> 	select username name,password pw,age,id from user where id=#&#123;id&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>那么此时返回的结果中，<code>User</code>类中的<code>username</code>，<code>password</code>值为<code>null</code>，因为没有对应上，这里使用了<code>别名</code></li>
</ul>
<h2 id="使用resultMap解决别名或者字段不对应的问题"><a href="#使用resultMap解决别名或者字段不对应的问题" class="headerlink" title="使用resultMap解决别名或者字段不对应的问题"></a>使用<code>resultMap</code>解决别名或者字段不对应的问题</h2><ul>
<li>如果实体类中的字段和表中的字段一致，但是查询结果中使用了别名，那么需要使用<code>&lt;resultMap&gt;</code>来设置对应关系</li>
<li>如果实体类中的字段和表中的字段不一致，那么返回的查询结果即使不使用别名也会不对应，因此此时还是需要使用<code>&lt;resultMap&gt;</code>来设置对应关系</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 指定resultMap</span></div><div class="line"> 	type: 指定java类的全名</div><div class="line"> 	id： 唯一标识</div><div class="line">  --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">id</span>=<span class="string">"UserMap"</span>&gt;</span></div><div class="line"> 	<span class="comment">&lt;!-- id指定主键的对应关系，这里主键没有使用别名，因此不需要指定对应关系，可以自动对应上</span></div><div class="line"> 	&lt;id column="id" property="id"/&gt; --&gt;</div><div class="line"> 	</div><div class="line"> 	<span class="comment">&lt;!-- result ： 指定主键之外的属性</span></div><div class="line"> 		column: 查询结果中的字段</div><div class="line"> 		property：java类中的对应属性</div><div class="line"> 	 --&gt;</div><div class="line"> 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pw"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- </span></div><div class="line"> 	User findUserById(Integer id);</div><div class="line"> 	resultMap: 指定返回的结果类型为前面定义的resultMap</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></div><div class="line">  	select username name,password pw,age,id from user where id=#&#123;id&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFinduserById</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	</div><div class="line">	User user=userMapper.findUserById(<span class="number">3</span>);</div><div class="line">	System.out.println(user);</div><div class="line">	</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-lt-resultMap-gt-来解决多表之间的查询"><a href="#使用-lt-resultMap-gt-来解决多表之间的查询" class="headerlink" title="使用&lt;resultMap&gt;来解决多表之间的查询"></a>使用<code>&lt;resultMap&gt;</code>来解决多表之间的查询</h2><ul>
<li>后面的多表关联查询会讲到</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>实体类中的属性是和表中的属性一致的，普通的java类或许不相同</li>
<li>如果查询返回的结果字段和java类中的属性字段一致，那么就不需要使用<code>resultMap</code>,而是能够自动的对应上</li>
<li>如果返回查询结果字段和java类中的属性字段不一致，那么就需要使用<code>resultMap</code>来设置对应关系了</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis之ResultMap&quot;&gt;&lt;a href=&quot;#Mybatis之ResultMap&quot; class=&quot;headerlink&quot; title=&quot;Mybatis之ResultMap&quot;&gt;&lt;/a&gt;Mybatis之ResultMap&lt;/h1&gt;&lt;h2 id=&quot;实体类&quot;&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis之动态sql</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/%E5%8A%A8%E6%80%81sql/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/动态sql/</id>
    <published>2018-05-04T09:48:53.000Z</published>
    <updated>2018-05-04T09:49:30.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><h2 id="if子句"><a href="#if子句" class="headerlink" title="if子句"></a>if子句</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul>
<li><code>&lt;if test=&quot;&quot;&gt;</code><ul>
<li><code>test</code>中填写的是判断条件</li>
</ul>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="更新密码或者年龄"><a href="#更新密码或者年龄" class="headerlink" title="更新密码或者年龄"></a>更新密码或者年龄</h4><ul>
<li>首先在<code>UserMapper.java</code>中添加抽象方法<ul>
<li>因为要一个方法兼具更新密码或者更新年龄的功能，那么我们直接使用一个<code>实体类对象</code>作为方法参数即可</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新数据，比如密码或者年龄</div><div class="line"> * <span class="doctag">@param</span> user  User对象，其中封装了用户密码或者用户的年龄</div><div class="line"> * <span class="doctag">@return</span> 受影响的行数，成功返回1，否则返回0</div><div class="line"> */</div><div class="line"><span class="function">Integer <span class="title">update</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;update&gt;</code>节点<ul>
<li>只能修改密码或者年龄，不能同时修改，因为如果同时修改拼接而成的<code>sql</code>语句将会少了一个逗号<code>,</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	update user </div><div class="line">	set</div><div class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">		password=#&#123;password&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></div><div class="line">		age=#&#123;age&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试<ul>
<li>修改年龄<code>age</code>，因此只需要在新建的<code>User</code>对象中添加<code>age</code>的值即可，那么此时<code>password</code>的值不能设置</li>
<li>同时要设置<code>id</code>的值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//新建一个User对象</span></div><div class="line">	User user=<span class="keyword">new</span> User();</div><div class="line">	user.setId(<span class="number">3</span>);  <span class="comment">//设置id</span></div><div class="line">	user.setAge(<span class="number">33</span>);  <span class="comment">//设置年龄</span></div><div class="line">	<span class="keyword">int</span> affectRows=userMapper.update(user);</div><div class="line">	System.out.println(affectRows);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="根据用户名或者用户id查询信息"><a href="#根据用户名或者用户id查询信息" class="headerlink" title="根据用户名或者用户id查询信息"></a>根据用户名或者用户id查询信息</h4><ul>
<li>在<code>UserMpper.java</code>中添加接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 查找用户信息，根据用户名或者用户id查询</div><div class="line"> * <span class="doctag">@param</span> user  User对象，其中封装了用户名或者用户id</div><div class="line"> * <span class="doctag">@return</span> 用户对象</div><div class="line"> */</div><div class="line"><span class="function">User <span class="title">findUser</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">		User findUser(User user); </div><div class="line">		不能同时查询，缺少连接符号 and or</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">		select * from user </div><div class="line">		where </div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></div><div class="line">			id=#&#123;id&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">			username=#&#123;username&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		<span class="comment">//新建一个User对象</span></div><div class="line">		User user=<span class="keyword">new</span> User();</div><div class="line">		user.setId(<span class="number">3</span>);  <span class="comment">//设置id</span></div><div class="line">		<span class="comment">//根据id查找</span></div><div class="line">		System.out.println(userMapper.findUser(user));</div><div class="line">		ac.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="choose【了解】"><a href="#choose【了解】" class="headerlink" title="choose【了解】"></a>choose【了解】</h2><ul>
<li>相当于java中的<code>switch</code>，通常与<code>when</code>搭配使用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">	select * from user where</div><div class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">        	password=#&#123;password&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></div><div class="line">        	id=#&#123;id&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="where元素"><a href="#where元素" class="headerlink" title="where元素"></a>where元素</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>我们使用动态sql语句构建的语句如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> &gt;</span></div><div class="line">	select * from user </div><div class="line">    where </div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">    	password=#&#123;password&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">    	and username=#&#123;username&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果传入的参数<code>User</code>对象中只是设置了<code>username</code>的值，那么此时的sql语句将会变成<code>select * from user where and username=#{username}</code>,很明显多了一个<code>and</code></li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li><code>&lt;where&gt;</code>标签主要是用于简化<code>where</code>子句的编写，<code>&lt;where&gt;</code>可以替代sql语句中的<code>where</code>，而且还可以将后面多余的<code>and</code>或者<code>or</code>去掉</li>
</ul>
<h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select 字段 from 表名</div><div class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">		.....</div><div class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul>
<li>我们使用<code>&lt;where&gt;</code>标签解决上面的问题</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> &gt;</span></div><div class="line">	select * from user </div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">           and password=#&#123;password&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">            and username=#&#123;username&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果此时在<code>User</code>对象中只是设置了一个<code>username</code>的值，那么会去掉前面的<code>and</code>关键字，并且此时的sql语句会变成：<code>select * from user where username=#{username}</code></li>
</ul>
<h2 id="set元素"><a href="#set元素" class="headerlink" title="set元素"></a>set元素</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul>
<li>我们使用动态sql构建一个更新语句，如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	 	update user </div><div class="line">	 	set</div><div class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">	 		password=#&#123;password&#125;,</div><div class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	</div><div class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></div><div class="line">	 		age=#&#123;age&#125;,</div><div class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	</div><div class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">	 		username=#&#123;username&#125;</div><div class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	</div><div class="line">	 	where id=#&#123;id&#125;</div><div class="line">	 <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>从上面的<code>&lt;update&gt;</code>中可以看出，如果我们在<code>User</code>对象中没有设置<code>password,age,username</code>的值，那么构建出来的sql语句变成了<code>update user set where id=#{id}</code>，很明显是一个错误的语句。</li>
<li>如果在<code>User</code>对象中值设置了<code>password</code>的值，那么这里的sql语句变成了<code>update user set password=#{password}, where id=#{id}</code>,很明显，这个sql多了一个逗号</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>我们可以使用<code>&lt;set&gt;</code>,可以在<code>&lt;set&gt;</code>元素所在位置输出一个<code>set</code>关键字，而且可以去除内容结尾中无关的<code>逗号</code>，有了<code>&lt;set&gt;</code>元素，那么我们可以动态的修改字段</li>
</ul>
<h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">update table_name </div><div class="line">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">		......</div><div class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li>解决上面的问题</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	 	update user </div><div class="line">	 	<span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">                password=#&#123;password&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></div><div class="line">                age=#&#123;age&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">                username=#&#123;username&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">	 	where id=#&#123;id&#125;</div><div class="line">	 <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="where-元素"><a href="#where-元素" class="headerlink" title="where 元素"></a>where 元素</h2><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><ul>
<li>使用动态sql可以解决SQL语句中代码复用问题，即2处或者多处高度相似的代码，在使用动态SQL之后，1个方法和1个映射就可以解决</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>虽然在动态sql中，有很多标签可以实现对<code>SQL</code>语句的编程，但是，使用动态SQL的原则应该是希望代码复用，而不是编程，更不要用动态sql解决业务方法的问题</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态sql&quot;&gt;&lt;a href=&quot;#动态sql&quot; class=&quot;headerlink&quot; title=&quot;动态sql&quot;&gt;&lt;/a&gt;动态sql&lt;/h1&gt;&lt;h2 id=&quot;if子句&quot;&gt;&lt;a href=&quot;#if子句&quot; class=&quot;headerlink&quot; title=&quot;if子句&quot;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis入门程序</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/MyBatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/MyBatis入门程序/</id>
    <published>2018-05-04T09:47:40.000Z</published>
    <updated>2018-05-04T09:48:00.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis入门程序"><a href="#MyBatis入门程序" class="headerlink" title="MyBatis入门程序"></a>MyBatis入门程序</h2><h3 id="设计案例"><a href="#设计案例" class="headerlink" title="设计案例"></a>设计案例</h3><p>实现向<code>tedu_ums</code>数据库的<code>t_users</code>数据表中插入数据。</p>
<h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p>1 创建项目<code>DAY07-MyBatis-Sample</code>，生成<code>web.xml</code>，在<code>web.xml</code>中配置（2项），添加<code>spring-webmvc</code>依赖，复制Spring配置文件，添加Tomcat运行环境；</p>
<p>2 添加新的依赖：<code>mybatis</code>、<code>mybatis-spring</code>、<code>spring-jdbc</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring-JDBC --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>以上依赖中，<code>spring-jdbc</code>的版本需与<code>spring-webmvc</code>保持一致！（同一个项目中，以<code>spring-</code>作为前缀的依赖都应该使用相同版本）</strong></p>
<p>3 创建实现类<code>cn.tedu.spring.entity.User</code>，在该类中声明<code>Integer id</code>、<code>String username</code>、<code>String password</code>属性，及相关方法；</p>
<p>4 设计持久层接口：创建<code>cn.tedu.spring.mapper.UserMapper</code>接口，并在接口中添加抽象方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer reg(User user);</div></pre></td></tr></table></figure>
<p>注意：增删改操作固定返回受影响的行数，在设计方法时，可以将返回值声明为Integer类型，或使用void表示无返回值也可以。</p>
<p>5 从FTP下载<code>mybatis.zip</code>文件，将解压得到的<code>EmpMapper.xml</code>重命名为<code>UserMapper.xml</code>（推荐这样命名），然后在项目的<code>src\main\resource</code>新建文件夹<code>mappers</code>，将<code>UserMapper.xml</code>复制到<code>mappers</code>文件夹中；</p>
<p>6  编辑<code>UserMapper.xml</code>文件：</p>
<p>​    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- MyBatis的接口映射文件，根节点是mapper --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 接口映射文件是与Java接口文件(interface)相对应的 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 根节点的namespace属性用于指定Java接口文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> </span></div><div class="line">	<span class="attr">namespace</span>=<span class="string">"cn.tedu.spring.mapper.UserMapper"</span>&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- parameterType属性的值是参数类型 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 节点中间编写SQL语句 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">		<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</div><div class="line">		INSERT INTO t_users (</div><div class="line">			username, password</div><div class="line">		) VALUES (</div><div class="line">			#&#123;username&#125;, #&#123;password&#125;</div><div class="line">		)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>7 添加依赖：<code>mysql-connector-xxxx</code>、<code>dbcp</code>、<code>junit</code>；</p>
<p>8 在<code>src\main\resources</code>下配置<code>db.properties</code>；</p>
<p>9 从此前的项目中复制<code>spring-dao.xml</code>，在该配置文件中，至少配置了：加载<code>db.properties</code>、<code>BasicDataSource</code></p>
<p>10 在<code>spring-dao.xml</code>中，配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置MapperScannerConfigurer ，扫描mapper的配置在哪里--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">		<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!-- 配置XML文件的位置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></div><div class="line">		<span class="attr">value</span>=<span class="string">"classpath:mappers/UserMapper.xml"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>11 编写测试类，添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	</div><div class="line">	User user = <span class="keyword">new</span> User();</div><div class="line">	user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">	user.setPassword(<span class="string">"123456"</span>);</div><div class="line">	Integer affectedRows</div><div class="line">		= userMapper.reg(user);</div><div class="line">	System.out.println(</div><div class="line">		<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">	</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>在spring中配置mybatis的步骤：<ul>
<li>配置扫描<code>xxmapper.xml</code>的<code>MapperScannerConfigurer</code></li>
<li>配置<code>SqlSessionFactoryBean</code>，需要用到数据库连接池的<code>数据源datasource</code></li>
</ul>
</li>
</ul>
<ul>
<li>完整的依赖文件<code>pom.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- MySQL --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>完整的<code>db.properties</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=5</div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<ul>
<li>完整的<code>spring-dao.xml</code>文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span>  </div><div class="line">	<span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span> </div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line">		</div><div class="line">	<span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置MapperScannerConfigurer,自动扫描整个包，并且spring会自动创建UserMapper接口对象--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">			<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!-- 配置XML文件的位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"classpath:mappers/UserMapper.xml"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MyBatis入门程序&quot;&gt;&lt;a href=&quot;#MyBatis入门程序&quot; class=&quot;headerlink&quot; title=&quot;MyBatis入门程序&quot;&gt;&lt;/a&gt;MyBatis入门程序&lt;/h2&gt;&lt;h3 id=&quot;设计案例&quot;&gt;&lt;a href=&quot;#设计案例&quot; class=&quot;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc响应Ajax请求(@ResponseBody)</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Springmvc%E5%93%8D%E5%BA%94Ajax%E8%AF%B7%E6%B1%82-ResponseBody/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Springmvc响应Ajax请求-ResponseBody/</id>
    <published>2018-05-04T09:46:35.000Z</published>
    <updated>2018-05-04T09:47:15.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc响应Ajax请求-ResponseBody"><a href="#Springmvc响应Ajax请求-ResponseBody" class="headerlink" title="Springmvc响应Ajax请求(@ResponseBody)"></a>Springmvc响应Ajax请求(@ResponseBody)</h1><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><ul>
<li>创建<code>maven project</code></li>
<li>选择<code>war</code>包</li>
<li>自动生成<code>web.xml</code>   </li>
<li><code>Target Runtime</code> 选择 <code>Tomcat</code></li>
<li>添加依赖<code>pom.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring 整合jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- MySQL --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置前端控制器和解决中乱码的过滤器(<code>web.xml</code>)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置中文乱码的过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--加载spring配置文件--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置<code>spring-mvc.xml</code><ul>
<li><strong>要想使用<code>@ResponseBody</code>这个注解来接收<code>Ajax</code>发送过来的请求，必须加上注解驱动<code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code></strong></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> </span></div><div class="line">	<span class="attr">base-package</span>=<span class="string">"cn.tedu.spring.controller"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置ViewResolver --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/web/"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置注解扫描，用于ajax的注解扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编写前端表单"><a href="#编写前端表单" class="headerlink" title="编写前端表单"></a>编写前端表单</h2><ul>
<li>其实并不是使用表单提交的，可以不使用表单</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">	姓名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">onblur</span>=<span class="string">"checkName()"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"nameSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="效果和实现-RequestBody"><a href="#效果和实现-RequestBody" class="headerlink" title="效果和实现(@RequestBody)"></a>效果和实现(<code>@RequestBody</code>)</h2><h3 id="用户名文本框失去焦点，异步检测用户"><a href="#用户名文本框失去焦点，异步检测用户" class="headerlink" title="用户名文本框失去焦点，异步检测用户"></a>用户名文本框失去焦点，异步检测用户</h3><ul>
<li>用户名文本框失去焦点发生请求处理方法，<code>检测用户名</code><ul>
<li>请求方式<code>POST</code></li>
<li>返回的值不再是<code>视图的名称</code>，而是处理请求的结果，即使返回给<code>Ajax</code>请求的数据</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/checkName.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span>   <span class="comment">//使用@ResponseBody，表示这个是处理ajax的请求</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">checkName</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"0"</span>;  <span class="comment">//表示admin这个用户名不能使用，已经存在</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="string">"1"</span>;  <span class="comment">//表示此时的用户名不存在，可以使用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>前端编写<code>Ajax</code>请求（<code>JQUERY</code>）</strong><ul>
<li>使用<code>JQuery</code>中的<code>Ajax</code>请求</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加jquery文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=request.getContextPath() %&gt;/web/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> name=$(<span class="string">"#name"</span>).val(); <span class="comment">//获取用户名</span></div><div class="line">        <span class="keyword">if</span>(name==<span class="string">""</span>)&#123;</div><div class="line">            alert(<span class="string">"用户名不能为空"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkName.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">        $.post(url,&#123;<span class="string">'name'</span>:name&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">            <span class="comment">//如果状态码正确</span></div><div class="line">            <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(responseData==<span class="string">"0"</span>)&#123;</div><div class="line">                    <span class="comment">//为节点添加提示内容</span></div><div class="line">                    $(<span class="string">"#nameSpan"</span>).text(<span class="string">"用户名已经存在，请重新输入"</span>);</div><div class="line">                    $(<span class="string">"#nameSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);  <span class="comment">//设置颜色为红色</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    $(<span class="string">"#nameSpan"</span>).text(<span class="string">"用户名不存在，可以使用"</span>);</div><div class="line">                    $(<span class="string">"#nameSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;<span class="string">`</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>使用<code>javascript</code>发出<code>Ajax</code>请求<ul>
<li><code>GET</code>请求 ：<code>xhr.open(&quot;GET&quot;,&quot;&lt;%=request.getContextPath()%&gt;/user/checkName.do?name=&quot;+name,true);</code></li>
<li><code>POST</code>请求需要将数据封装到<code>xhr.send(data)</code>中</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用POST请求</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNameFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> xhr=getXHR();  <span class="comment">//获取XHR</span></div><div class="line">	<span class="comment">//监听状态改变</span></div><div class="line">	xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>)&#123;</div><div class="line">			<span class="keyword">var</span> text=xhr.responseText;  <span class="comment">//获取返回的数据</span></div><div class="line">			<span class="keyword">if</span>(Text==<span class="string">"0"</span>)&#123;</div><div class="line">				alert(<span class="string">"用户名已经存在，请重新输入"</span>);</div><div class="line">				</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				alert(<span class="string">"用户名不存在，可以使用"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> name=$(<span class="string">"#name"</span>).val();  <span class="comment">//获取name文本框中的值</span></div><div class="line">	<span class="keyword">if</span>(name==<span class="string">""</span>)&#123;</div><div class="line">		alert(<span class="string">"用户名不能为空"</span>);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//编写请求</span></div><div class="line">	xhr.open(<span class="string">"POST"</span>,<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkName.do"</span>,<span class="literal">true</span>);</div><div class="line">	<span class="comment">//在open之后，send之前添加请求头信息</span></div><div class="line">	xhr.setRequestHeader(<span class="string">"content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    <span class="comment">//在send之中添加请求信息</span></div><div class="line">	xhr.send(<span class="string">"name="</span>+name);  <span class="comment">//发送请求</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><ul>
<li><p><strong>配置注解驱动支持该注解的使用，直接在<code>spring-mvc.xml</code>中配置即可<code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code></strong></p>
</li>
<li><p><strong>添加<code>jackson</code>的依赖，处理<code>json</code>数据</strong></p>
<ul>
<li>我们需要<code>三个jar包</code>，我们只需要添加<code>jackson-databind</code>即可，就会自动的导入其他的两个</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/jackson.png" alt="jackson的jar包"></p>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加jackson --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>用于响应<code>Ajax</code>请求</li>
<li>使用<code>@ResponseBody</code>标记的<code>Controller</code>方法的返回值，不再是返回的<code>视图名称</code>,而是返回的给<code>Ajax</code>的请求结果，可以是<code>String</code>，<code>List</code>,<code>Map</code>,<code>单个对象</code>等</li>
</ul>
<h3 id="返回单个值"><a href="#返回单个值" class="headerlink" title="返回单个值"></a>返回单个值</h3><ul>
<li>返回的单个值，比如<code>String</code>，<code>int</code>，<code>boolean</code></li>
<li>直接使用上面的例子即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/checkName.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span>   <span class="comment">//使用@ResponseBody，表示这个是处理ajax的请求</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">checkName</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"0"</span>;  <span class="comment">//表示admin这个用户名不能使用，已经存在</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="string">"1"</span>;  <span class="comment">//表示此时的用户名不存在，可以使用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回Map"><a href="#返回Map" class="headerlink" title="返回Map"></a>返回Map</h3><ul>
<li>这里我们返回的是一个<code>Map&lt;String,Object&gt;</code></li>
<li><strong>使用了<code>JackSon</code>，spring会将<code>Map</code>自动转换成<code>JSON对象</code>，那么我们在<code>JSP</code>中就可以用JSON来获取数据即可</strong></li>
<li>编写<code>Controller</code>方法，使用<code>@ResponseBody</code>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testMap.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span>   <span class="comment">//使用注解</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">testMap</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name,@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span>Integer age)</span>&#123;</div><div class="line">	System.out.println(name+<span class="string">"---"</span>+age); <span class="comment">//接收请求参数</span></div><div class="line">	Map&lt;String, Object&gt; map=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();  <span class="comment">//新建一个Map</span></div><div class="line">	<span class="comment">//新建User对象</span></div><div class="line">	User user1=<span class="keyword">new</span> User();</div><div class="line">	user1.setName(<span class="string">"JACK"</span>);</div><div class="line">	user1.setAge(<span class="number">22</span>);</div><div class="line">	</div><div class="line">	User user2=<span class="keyword">new</span> User();</div><div class="line">	user2.setAge(<span class="number">33</span>);</div><div class="line">	user2.setName(<span class="string">"Tom"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//将上面的User对象添加到map中</span></div><div class="line">	map.put(<span class="string">"u1"</span>,user1);</div><div class="line">	map.put(<span class="string">"u2"</span>,user2);</div><div class="line">	<span class="keyword">return</span> map;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>jsp</code>页面中添加一个方法，用于发出<code>Ajax</code>请求<ul>
<li>使用返回的数据(<code>JSON对象</code>)，直接使用<code>data.key</code>的形式即可取出<code>Map</code>中的值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ajax请求testMap.do</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMap</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/testMap.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">'name'</span>:<span class="string">'陈加兵'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;;   <span class="comment">//需要发出请求的参数</span></div><div class="line">	$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">		<span class="comment">//如果状态码正确</span></div><div class="line">		<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">			<span class="keyword">var</span> user1=responseData.u1;   <span class="comment">//取出key为u1的值，是一个user对象</span></div><div class="line">			<span class="keyword">var</span> user2=responseData.u2;   <span class="comment">//取出key为u2的值，是一个user对象</span></div><div class="line">			alert(<span class="string">"u1 = "</span>+user1.name+<span class="string">"---"</span>+user1.age);  <span class="comment">//打印出u1中的name，age的值</span></div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回List"><a href="#返回List" class="headerlink" title="返回List"></a>返回List</h3><ul>
<li>这里的返回值是<code>List&lt;Object&gt;</code></li>
<li><code>JackSon</code>会自动将<code>List</code>转换成<code>JSON数组</code>，在<code>JSP</code>页面就可以使用<code>JSON</code>的方式来获取数据</li>
</ul>
<ul>
<li>比如：<code>[{&quot;name&quot;:&quot;JACK&quot;,&quot;age&quot;:22},{&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:33},10]</code>，这个是一个<code>JSON数组</code>的形式，因此我们在<code>js</code>中需要遍历这个数组</li>
<li><code>Controller</code>中方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testList.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">testList</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></div><div class="line">		@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) &#123;</div><div class="line">	System.out.println(name + <span class="string">"---"</span> + age); <span class="comment">// 接收请求参数</span></div><div class="line">	List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</div><div class="line">	<span class="comment">// 新建User对象</span></div><div class="line">	User user1 = <span class="keyword">new</span> User();</div><div class="line">	user1.setName(<span class="string">"JACK"</span>);</div><div class="line">	user1.setAge(<span class="number">22</span>);</div><div class="line"></div><div class="line">	User user2 = <span class="keyword">new</span> User();</div><div class="line">	user2.setAge(<span class="number">33</span>);</div><div class="line">	user2.setName(<span class="string">"Tom"</span>);</div><div class="line">	<span class="comment">//将数据添加到其中</span></div><div class="line">	list.add(user1);</div><div class="line">	list.add(user2);</div><div class="line">	<span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>jsp</code>中使用发出<code>Ajax</code>请求<ul>
<li>此时返回的是数组，因此需要循环遍历</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ajax请求testList.do</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/testList.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">'name'</span>:<span class="string">'陈加兵'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;;   <span class="comment">//需要发出请求的参数</span></div><div class="line">	$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">		<span class="comment">//如果状态码正确</span></div><div class="line">		<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">			<span class="comment">//此时返回的是一个数组，因此我们需要循环遍历这个数组，但是其中的元素是一个User对象，因此可以使用key-value的形式取出其中的值</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;responseData.length;i++)&#123;</div><div class="line">				<span class="comment">//将数据输出到控制台</span></div><div class="line">				<span class="built_in">console</span>.log(responseData[i].name+<span class="string">"-----&gt;"</span> + responseData[i].age);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回单个对象"><a href="#返回单个对象" class="headerlink" title="返回单个对象"></a>返回单个对象</h3><ul>
<li>返回的是一个对象，比如一个<code>User</code>对象，<code>JackSon</code>会将其转换成为<code>JSON对象</code>返回给浏览器</li>
<li>返回的是对象，那么我们在<code>js</code>中可以直接使用<code>key-value</code>的形式取出其中的值</li>
<li><code>Controller</code>中的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testObject.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testObject</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></div><div class="line">		@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) &#123;</div><div class="line">	System.out.println(name + <span class="string">"---"</span> + age); <span class="comment">// 接收请求参数</span></div><div class="line">	User user=<span class="keyword">new</span> User();</div><div class="line">	user.setName(<span class="string">"JACK"</span>);</div><div class="line">	user.setAge(<span class="number">22</span>);</div><div class="line">	<span class="keyword">return</span> user;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>发出<code>Ajax</code>请求，并且接收数据<ul>
<li>直接使用取值即可</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ajax请求testObject.do</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/testObject.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">'name'</span>:<span class="string">'陈加兵'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;;   <span class="comment">//需要发出请求的参数</span></div><div class="line">	$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">		<span class="comment">//如果状态码正确</span></div><div class="line">		<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">			<span class="built_in">console</span>.log(responseData.name+<span class="string">"----"</span>+responseData.age);</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="省市二级菜单联动"><a href="#省市二级菜单联动" class="headerlink" title="省市二级菜单联动"></a>省市二级菜单联动</h3><ul>
<li>前端使用下拉菜单<code>&lt;select&gt;</code>实现<ol>
<li>加载页面完成之后，发送一个异步请求，请求所有的<code>省份</code>,在省的下拉菜单中显示出来</li>
<li>当用户选择了某个省之后，那么发送一个异步请求，获取当前省的所有<code>市</code>的信息，并且显示在市的下拉菜单中</li>
<li>在<code>省</code>的下拉菜单中需要使用<code>onchange</code>监听选项的改变，只要选项改变了就要发出异步请求，返回对应城市的信息</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">省：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">id</span>=<span class="string">"province"</span> <span class="attr">onchange</span>=<span class="string">"getCity()"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span>请选择省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">市：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span>请选择市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--加载jquery--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=request.getContextPath() %&gt;/web/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//只要页面加载完成之后就会执行其中的逻辑</span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		getProvince();   <span class="comment">//页面加载完成就调用这个方法发出异步请求</span></div><div class="line">		</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">//获取省份的方法</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getProvince</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/menu/getProvince.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">		<span class="keyword">var</span> d=&#123;&#125;;   <span class="comment">//没有数据提交</span></div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="comment">//循环遍历返回的JSON数组</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</div><div class="line">					<span class="comment">//创建option，用于插入节点</span></div><div class="line">					<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span> + data[i].code + <span class="string">"&gt;"</span>+data[i].name+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					<span class="comment">//将option插入到下拉列表中</span></div><div class="line">					$(<span class="string">"#province"</span>).append(option);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//根据选择的省份获取市</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getCity</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> province=$(<span class="string">"#province"</span>).val();  <span class="comment">//获取下拉菜单的值，这里返回的是省份的编号</span></div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/menu/getCity.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">		<span class="keyword">var</span> d=&#123;<span class="string">"province"</span>:province&#125;;   <span class="comment">//将省份的编号传入</span></div><div class="line">		</div><div class="line">		<span class="comment">//每次都要清空之前的城市</span></div><div class="line">		$(<span class="string">"#city"</span>).html(<span class="string">"&lt;option value='-1'&gt;请选择市&lt;/option&gt;"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//如果用户点击了请选择省，那么返回的值就是-1，此时不需要发出异步请求</span></div><div class="line">		<span class="keyword">if</span>(province==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">return</span>;  </div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//发出异步请求</span></div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="comment">//如果返回的是一个空的，直接返回即可，不需要后续的操作</span></div><div class="line">				<span class="keyword">if</span>(data.lengt==<span class="number">0</span>)&#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//循环遍历返回的JSON数组</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</div><div class="line">					<span class="comment">//创建option，用于插入节点</span></div><div class="line">					<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span> + data[i].code + <span class="string">"&gt;"</span>+data[i].name+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					<span class="comment">//将option插入到下拉列表中</span></div><div class="line">					$(<span class="string">"#city"</span>).append(option);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);	</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>Controller</code>编写方法<ol>
<li>展示页面的方法(<code>showMenu.do</code>)</li>
<li>返回<code>省份信息</code>的方法</li>
<li>返回<code>城市信息</code>方法</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示页面</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/showMenu.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showMenu</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"menu"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//异步请求返回省份的信息</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getProvince.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">getProvince</span><span class="params">()</span></span>&#123;</div><div class="line">	Province p1=<span class="keyword">new</span> Province();</div><div class="line">	p1.setName(<span class="string">"江苏"</span>);</div><div class="line">	p1.setCode(<span class="number">1001</span>);</div><div class="line">	</div><div class="line">	Province p2=<span class="keyword">new</span> Province();</div><div class="line">	p2.setName(<span class="string">"山东"</span>);</div><div class="line">	p2.setCode(<span class="number">1002</span>);</div><div class="line">	</div><div class="line">	List&lt;Province&gt; provinces=<span class="keyword">new</span> ArrayList&lt;Province&gt;();</div><div class="line">	provinces.add(p1);</div><div class="line">	provinces.add(p2);</div><div class="line">	<span class="keyword">return</span> provinces;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//异步获取城市信息的方法，这里没有操作数据库，仅仅是模拟，因此只要返回数据即可</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getCity.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">getCity</span><span class="params">(@RequestParam(<span class="string">"province"</span>)</span> Integer code)</span>&#123;</div><div class="line">	System.out.println(code);</div><div class="line">	List&lt;City&gt; cities=<span class="keyword">new</span> ArrayList&lt;City&gt;();</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 如果这里涉及到数据库操作</div><div class="line">	 * 		1. 调用service的方法查询，service调用dao的方法查询</div><div class="line">	 * 		2. dao中的查询： 根据code查询出对应的城市即可，当然是联表查询</div><div class="line">	 * 		3. select c.name,c.code from city c join province p on c.provice_id=p.id;</div><div class="line">	 * 		4. mybatis调用第三步的查询语句，直接返回的就是List&lt;City&gt;集合</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="comment">//这里省略if的判断，主要是看效果</span></div><div class="line">	City c1=<span class="keyword">new</span> City();</div><div class="line">	c1.setName(<span class="string">"南京"</span>);</div><div class="line">	c1.setCode(<span class="number">123</span>);</div><div class="line">	</div><div class="line">	City c2=<span class="keyword">new</span> City();</div><div class="line">	c2.setName(<span class="string">"淮安"</span>);</div><div class="line">	c2.setCode(<span class="number">1223</span>);</div><div class="line">	cities.add(c1);</div><div class="line">	cities.add(c2);</div><div class="line">	 </div><div class="line">	<span class="keyword">return</span> cities;   <span class="comment">//返回集合</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><strong><code>springmvc</code>会通过<code>jackson</code>将返回给<code>ajax</code>请求的对象自动封装成<code>JSON对象</code>，那么在<code>JSP</code>页面我们就可以使用<code>JSON</code>的读取方式获取返回的数据即可</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc响应Ajax请求-ResponseBody&quot;&gt;&lt;a href=&quot;#Springmvc响应Ajax请求-ResponseBody&quot; class=&quot;headerlink&quot; title=&quot;Springmvc响应Ajax请求(@ResponseBody)
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring配置DBCP连接池</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Spring%E9%85%8D%E7%BD%AEDBCP%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Spring配置DBCP连接池/</id>
    <published>2018-05-04T09:45:53.000Z</published>
    <updated>2018-05-04T09:46:12.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring配置DBCP连接池"><a href="#Spring配置DBCP连接池" class="headerlink" title="Spring配置DBCP连接池"></a>Spring配置DBCP连接池</h1><h2 id="建立数据库配置文件jdbc-properties"><a href="#建立数据库配置文件jdbc-properties" class="headerlink" title="建立数据库配置文件jdbc.properties"></a>建立数据库配置文件jdbc.properties</h2><ul>
<li><p>在<code>resource</code>文件下新建一个<code>jdbc.properties</code>文件，内容如下</p>
<ul>
<li>在每一个键值对的后面不可以有空格，将光标移动到后面，如果紧贴着即可</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/tedu_ums?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=5    </div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<ul>
<li><p>在spring配置文件中配置<code>DBCP</code>数据源</p>
<ul>
<li>直接使用spring的表达式获取文件中的值即可</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">        <span class="comment">&lt;!--初始化链接数量--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">        <span class="comment">&lt;!--最大链接数量--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring配置DBCP连接池&quot;&gt;&lt;a href=&quot;#Spring配置DBCP连接池&quot; class=&quot;headerlink&quot; title=&quot;Spring配置DBCP连接池&quot;&gt;&lt;/a&gt;Spring配置DBCP连接池&lt;/h1&gt;&lt;h2 id=&quot;建立数据库配置文件jdbc
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc处理异常</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Springmvc%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Springmvc处理异常/</id>
    <published>2018-05-04T09:44:41.000Z</published>
    <updated>2018-05-04T09:45:33.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC处理异常"><a href="#Spring-MVC处理异常" class="headerlink" title="Spring MVC处理异常"></a>Spring MVC处理异常</h1><h2 id="关于异常"><a href="#关于异常" class="headerlink" title="关于异常"></a>关于异常</h2><ul>
<li>异常的体系结构：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Throwable</div><div class="line">		Error</div><div class="line">			OutOfMemoryError（OOM）</div><div class="line">		Exception</div><div class="line">			RuntimeException</div><div class="line">				NullPointerException：某个为null的对象调用了属性或方法</div><div class="line">				ClassCastException：强制转换为不匹配的数据类型</div><div class="line">				ClassNotFoundException：尝试加载的类不存在</div><div class="line">				IndexOutOfBoundsException：使用List集合时使用了越界的索引</div><div class="line">					ArrayIndexOutOfBoundsException：使用Array时使用了越界的索引</div><div class="line">			SQLException：数据库相关异常</div><div class="line">			IOException：输入输出（读写）异常</div><div class="line">				FileNotFoundException：文件找不到</div></pre></td></tr></table></figure>
<h2 id="在Spring-MVC中处理异常"><a href="#在Spring-MVC中处理异常" class="headerlink" title="在Spring MVC中处理异常"></a>在Spring MVC中处理异常</h2><ul>
<li>在Spring MVC中，提供了一种统一处理某种异常的机制，例如通过配置，可以对整个项目中的<code>NullPointerException</code>进行处理，那么，无论是项目的哪个环节出现该异常，都会自动按照配置的方式进行处理，而不用每个方法中逐一编写相关代码。</li>
</ul>
<h2 id="准备演示案例"><a href="#准备演示案例" class="headerlink" title="准备演示案例"></a>准备演示案例</h2><ul>
<li><p>创建项目<code>DAY07-SpringMVC-Exception</code>，设计请求路径：</p>
<p>  <code>http://SERVER:PORT/PROJECT/ex1.do</code></p>
<p>  <code>http://SERVER:PORT/PROJECT/ex2.do</code></p>
</li>
<li><p>以上3个请求将分别由<code>ex1.jsp</code>、<code>ex2.jsp</code>页面显示。</p>
</li>
</ul>
<h2 id="使用SimpleMappingExceptionResolver"><a href="#使用SimpleMappingExceptionResolver" class="headerlink" title="使用SimpleMappingExceptionResolver"></a>使用SimpleMappingExceptionResolver</h2><ul>
<li>在Spring MVC中，有<code>SimpleMappingExceptionResolver</code>类，用于配置<strong>异常与View组件</strong>的映射关系，如果确定某种异常出现后都会显示某个View组件，则在Spring的配置文件中：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"xx.xx.SimpleMappingExceptionResolver"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"异常类的全名"</span>&gt;</span>View组件名<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"异常类的全名"</span>&gt;</span>View组件名<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"异常类的全名"</span>&gt;</span>View组件名<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>经过以上配置后，整个项目运行到任何位置，一旦出现以上配置过的异常，都会转发到匹配的View组件，在项目的各个方法中，不必再处理已经配置过的异常！</p>
</li>
<li><p>这种做法的不足在于：只要是同一种异常，都是转发到同一个View组件，无法根据实际运行状态进行更加细化的处理，例如无法提示是哪个值错误或者某些原因导致的异常。</p>
</li>
</ul>
<h2 id="使用-ExceptionHandler"><a href="#使用-ExceptionHandler" class="headerlink" title="使用@ExceptionHandler"></a>使用@ExceptionHandler</h2><p><strong>注意：使用SimpleMappingExceptionResolver处理异常时，不可以使用@ExceptionHandler！</strong></p>
<ul>
<li>当需要统一处理异常时，可以在控制器类中自定义方法（方法名称自定义），并在方法上方添加<code>@ExceptionHandler</code>，与处理请求的方法类似，可以按需添加方法的参数，需要注意的，必须有<code>Exception</code>参数：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(</span></span></div><div class="line">	HttpServletRequest request,</div><div class="line">	Exception ex) &#123;</div><div class="line">	System.out.println(ex.getClass());</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> NullPointerException) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"error1"</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> ArrayIndexOutOfBoundsException) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"error2"</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"error3"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种做法，是作用于当前控制器类内部的所有请求的处理！对其它控制器类中的异常是没有影响的！</li>
</ul>
<h1 id="Spring-MVC小结"><a href="#Spring-MVC小结" class="headerlink" title="Spring MVC小结"></a>Spring MVC小结</h1><ol>
<li>解决MVC中V与C的关系的，即如何接收请求并响应；</li>
<li>在Spring的配置文件中，最主要的配置是组件扫描和ViewResolver；</li>
<li>重点掌握<code>@RequestMapping</code>注解，还有<code>@RequestParam</code>注解；</li>
<li>掌握在处理请求时，如何获取请求参数（2种）和封装转发数据（<code>ModelMap</code>）；</li>
<li>理解转发和重定向；</li>
<li><p>学会使用<code>Interceptor</code>；</p>
</li>
<li><p>学会处理异常。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-MVC处理异常&quot;&gt;&lt;a href=&quot;#Spring-MVC处理异常&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC处理异常&quot;&gt;&lt;/a&gt;Spring MVC处理异常&lt;/h1&gt;&lt;h2 id=&quot;关于异常&quot;&gt;&lt;a href=&quot;#关
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MVC处理异常</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/MVC%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/MVC处理异常/</id>
    <published>2018-05-04T09:42:42.000Z</published>
    <updated>2018-05-04T09:42:42.928Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Springmvc之向JSP页面提供数据(request，session)</title>
    <link href="http://chenjiabing666.github.io/2018/04/26/Springmvc%E4%B9%8B%E5%90%91JSP%E9%A1%B5%E9%9D%A2%E6%8F%90%E4%BE%9B%E6%95%B0%E6%8D%AE-request%EF%BC%8Csession/"/>
    <id>http://chenjiabing666.github.io/2018/04/26/Springmvc之向JSP页面提供数据-request，session/</id>
    <published>2018-04-26T02:04:43.000Z</published>
    <updated>2018-04-26T02:05:13.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc之向JSP页面提供数据-request，session"><a href="#Springmvc之向JSP页面提供数据-request，session" class="headerlink" title="Springmvc之向JSP页面提供数据(request，session)"></a>Springmvc之向JSP页面提供数据(request，session)</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><p><strong>Springmvc默认就是转发,因此可以在request域中共享数据</strong></p>
</li>
<li><p>表单提交，注册</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/login.do"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">	username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	age:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>User类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用HttpServletRequest转发"><a href="#使用HttpServletRequest转发" class="headerlink" title="使用HttpServletRequest转发"></a>使用HttpServletRequest转发</h2><ul>
<li>直接使用<code>HttpServletRequest</code>中的<code>setAttribute(key,value)</code>即可添加属性值<code>request</code>域中，那么在JSP页面即可使用<code>EL表达式</code>获取</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> user 接收请求参数</div><div class="line"> * <span class="doctag">@param</span> request   添加属性值request域中</div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user,HttpServletRequest request,HttpServletResponse response)</span> </span>&#123;</div><div class="line">	System.out.println(user);</div><div class="line">	request.setAttribute(<span class="string">"user"</span>, user);</div><div class="line">	<span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【不常用】使用ModelAndView转发"><a href="#【不常用】使用ModelAndView转发" class="headerlink" title="【不常用】使用ModelAndView转发"></a>【不常用】使用ModelAndView转发</h2><ul>
<li><code>ModelAndView</code>中本身就是用来存储数据和视图的，因此我们可以使用ModelAndView来传值</li>
<li><strong><code>ModelAndView</code>会利用<code>HttpServletRequest</code>中的<code>setAttribute(key,value)</code>将数据存储在<code>requst</code>域中</strong></li>
<li><code>Model</code>表示的就是转发的数据，可以通过<code>ModelAndView(String viewName,Map&lt;String,?&gt; map)</code>构造方法封装<code>Model</code>，其中<code>Model</code>的类型就是<code>Map&lt;String,?&gt;</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">	System.out.println(user);</div><div class="line">	<span class="comment">//创建一个Map，存储数据</span></div><div class="line">	Map&lt;String, User&gt; map=<span class="keyword">new</span> HashMap&lt;String, User&gt;();</div><div class="line">	<span class="comment">//将获取的user对象存储进去</span></div><div class="line">	map.put(<span class="string">"user"</span>, user);</div><div class="line">	<span class="comment">//返回一个ModelAndView对象，第一个参数是视图，第二个是Map存储数据</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, map);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【推荐使用】使用ModelMap转发"><a href="#【推荐使用】使用ModelMap转发" class="headerlink" title="【推荐使用】使用ModelMap转发"></a>【推荐使用】使用ModelMap转发</h2><ul>
<li><p>利用<code>HttpServletRequest</code>中的<code>setAtttibute()</code>添加数据到<code>request</code>域中</p>
</li>
<li><p>直接在处理请求的方法中，添加<code>ModelMap</code>类型的参数，当需要转发数据时，调用它的<code>addAttribute</code>方法封装数据，如果需要封装多条，多次调用即可</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user,ModelMap map)</span> </span>&#123;</div><div class="line">	System.out.println(user);</div><div class="line">	<span class="comment">//将数据存储在ModelMap中</span></div><div class="line">	map.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">	<span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><ul>
<li>从源代码可以看出，<code>ModelMap</code>实际上是实现了Map接口，因此我们也可以直接使用Map传值<ul>
<li>直接在方法的参数中声明即可，spring会自动注入</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user,Map&lt;String, Object&gt; map)</span> </span>&#123;</div><div class="line">	System.out.println(user);</div><div class="line">	<span class="comment">//将数据存储在ModelMap中</span></div><div class="line">	map.put(<span class="string">"user"</span>, user);</div><div class="line">	<span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul>
<li><p><strong>浏览器关闭或者在session的指定时间内没有操作，那么session会自动关闭</strong></p>
</li>
<li><p>通常会把访问的用户的唯一标识（用户的<code>ID</code>或用户名，邮箱等）和使用频率使用较高的数据（用户名，昵称，头像）存储在<code>Session</code>中。</p>
</li>
</ul>
<h2 id="使用HttpSession"><a href="#使用HttpSession" class="headerlink" title="使用HttpSession"></a>使用HttpSession</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user,HttpSession session)</span> </span>&#123;</div><div class="line">	<span class="comment">//将id存储在session中</span></div><div class="line">	session.setAttribute(<span class="string">"uid"</span>, <span class="string">"9527"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc之向JSP页面提供数据-request，session&quot;&gt;&lt;a href=&quot;#Springmvc之向JSP页面提供数据-request，session&quot; class=&quot;headerlink&quot; title=&quot;Springmvc之向JSP页面提供数据
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc之接受请求参数</title>
    <link href="http://chenjiabing666.github.io/2018/04/26/Springmvc%E4%B9%8B%E6%8E%A5%E5%8F%97%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>http://chenjiabing666.github.io/2018/04/26/Springmvc之接受请求参数/</id>
    <published>2018-04-26T02:03:59.000Z</published>
    <updated>2018-04-26T02:04:24.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc之接受请求参数"><a href="#Springmvc之接受请求参数" class="headerlink" title="Springmvc之接受请求参数"></a>Springmvc之接受请求参数</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>新建一个表单提交<ul>
<li>请求地址： <code>http://localhost:8080/ProjectName/user/login.do</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/login.do"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">	username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	age:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="【不推荐】HttpServletRequest"><a href="#【不推荐】HttpServletRequest" class="headerlink" title="【不推荐】HttpServletRequest"></a>【不推荐】HttpServletRequest</h2><ul>
<li>直接使用<code>HttpServeletRequest</code>作为方法参数，<code>spring</code>会自动为其注入</li>
<li>需要手动转换参数的类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</div><div class="line">	String username=request.getParameter(<span class="string">"username"</span>);</div><div class="line">	String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">	<span class="keyword">int</span> age=Integer.parseInt(request.getParameter(<span class="string">"age"</span>));  <span class="comment">//转换类型</span></div><div class="line">	System.out.println(username+<span class="string">"---&gt;"</span>+password);</div><div class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="直接在方法中声明对应的参数-name的属性必须和方法参数一致"><a href="#直接在方法中声明对应的参数-name的属性必须和方法参数一致" class="headerlink" title="直接在方法中声明对应的参数(name的属性必须和方法参数一致)"></a>直接在方法中声明对应的参数(name的属性必须和方法参数一致)</h2><ul>
<li><strong>表单中的<code>name</code>属性要和方法中的参数一致</strong></li>
<li><strong>涉及到类型转换，直接在方法中申明不同类型的参数即可</strong></li>
<li>优点： 方便，并且可以使Springmvc自动处理数据类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password,Integer age)</span> </span>&#123;</div><div class="line">	System.out.println(username + <span class="string">"---&gt;"</span> + password+<span class="string">"-----&gt;"</span>+age);</div><div class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【推荐】-RequestParam"><a href="#【推荐】-RequestParam" class="headerlink" title="【推荐】@RequestParam"></a>【推荐】@RequestParam</h2><ul>
<li>使用该注解可以获取请求参数，方法中的参数可以与表单中的<code>name</code>属性不一致</li>
<li><strong>使用<code>@RequestParam</code>这个获取的值必须包含在请求参数中，否则报错，除非设置<code>required</code>属性为<code>false</code></strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用<span class="doctag">@RequestParam</span>获取请求参数</div><div class="line"> * <span class="doctag">@RequestParam</span>()中的value属性为form表单中对应的name属性</div><div class="line"> * 自动转换数据类型，只需要定义方法参数为所需的数据类型即可，spring会为我们自动转换</div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(value = <span class="string">"username"</span>)</span> String name,</span></div><div class="line">		@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String pwd,@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) &#123;</div><div class="line">	System.out.println(name + <span class="string">"---&gt;"</span> + pwd+<span class="string">"-----&gt;"</span>+age);</div><div class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p><code>value</code> 指定请求中对应的属性名称，这个就像表单中定义的name属性</p>
</li>
<li><p><code>required</code><br>指定是否这个参数必须包含在请求地址中，默认是<code>true</code>，即是<strong>如果不包含这个参数那么就会报错。</strong></p>
</li>
<li><p><code>defaultValue</code> 指定默认的值，如果设置了<code>required=false</code>，并且没有设置这个值，那么默认的是<code>null</code>，但是也是可以使用这个属性来设置参数默认的值。当然对于设置了int类型的参数，那么并没有指定其值，那么将会报错，因为<code>int</code>类型没有<code>null</code>，只有<code>Integer</code>类型的才有，因此需要设置成Integer</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这里的获取请求参数中的username，age的值</div><div class="line"> * 其中username的这个注解默认的是required=true，因此这个是不可以没有的</div><div class="line"> * age的这个注解设置了required=false，表示可以没有这个参数，但是如果没有这个参数，那么默认的是null，但是int类型的没有null，因此也会是报错的，有两种解决方式：</div><div class="line"> * 		1) 通过defalutValue设置其默认的值</div><div class="line"> * 		2) 如果我们就想要设其为null，可以使用封装类Integer类型即可</div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testRequestParams"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestParams</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>)</span> String username,@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"age"</span>,required=<span class="keyword">false</span>)</span> <span class="keyword">int</span> age) </span>&#123;</div><div class="line">	System.out.println(<span class="string">"username,age  "</span>+ username+<span class="string">"  ,  "</span>+age);</div><div class="line">	<span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="【推荐】使用自定义数据类型-JavaBean"><a href="#【推荐】使用自定义数据类型-JavaBean" class="headerlink" title="【推荐】使用自定义数据类型(JavaBean)"></a>【推荐】使用自定义数据类型(JavaBean)</h2><ul>
<li>如果传过来的请求参数很多，那么我们使用上面的方法获取请求参数，需要申明很多的方法参数。但是我们可以将传递过来的请求参数封装成一个<code>JavaBean</code>，那么我们直接传入一个JavaBean对象即可接收全部的请求参数。</li>
</ul>
<ul>
<li>声明一个User类，其中必须为每一个属性添加 <code>set</code>方法，并且其中的变量名要和表单中的<code>name</code>属性一致</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>那么我们此时的<code>UserController</code>中的<code>login</code>方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		System.out.println(user);</div><div class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>以上的所有方法并不冲突，可以混合使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 混合使用案例</div><div class="line">*/</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user,@RequestParam(<span class="string">"gender"</span>)</span>String gender) </span>&#123;</div><div class="line">	System.out.println(user);</div><div class="line">	<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不建议使用<code>HttpServletRequest</code>方法获取，另外的方法都是非常好用的方法，根据实际情况进行选取即可</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc之接受请求参数&quot;&gt;&lt;a href=&quot;#Springmvc之接受请求参数&quot; class=&quot;headerlink&quot; title=&quot;Springmvc之接受请求参数&quot;&gt;&lt;/a&gt;Springmvc之接受请求参数&lt;/h1&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc之RequestMapping</title>
    <link href="http://chenjiabing666.github.io/2018/04/26/Springmvc%E4%B9%8BRequestMapping/"/>
    <id>http://chenjiabing666.github.io/2018/04/26/Springmvc之RequestMapping/</id>
    <published>2018-04-26T02:00:43.000Z</published>
    <updated>2018-04-26T02:01:33.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc之RequestMapping"><a href="#Springmvc之RequestMapping" class="headerlink" title="Springmvc之RequestMapping"></a>Springmvc之RequestMapping</h1><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h2><ul>
<li><p>标记客户的请求与哪一个类和方法对应</p>
</li>
<li><p>使用<code>@RequestMapping</code>同时对类和方法进行注解，相当于最终将这两处的注解路径拼接起来，比如类上使用<code>@RequestMapping(&quot;/user&quot;)</code>,在方法上使用<code>@RequestMapping(&quot;/login.do&quot;)</code>,那么拼接时访问的路径为<code>http://localhost:8080/ProjectName/user/login.do</code></p>
</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p><strong><code>value</code></strong> ： 默认的属性，表示映射的地址，如果只有这一个属性，那么默认可以不写value，比如<code>@RequestMapping(&quot;/login.do&quot;)</code>和<code>@RequestMapping(value=&quot;/login.do&quot;)</code>是一样的效果</p>
</li>
<li><p><strong><code>method</code></strong>：指定是请求的方式，我们知道请求的方式有<code>post</code>,<code>get</code>,<code>put</code>,<code>delete</code>。一般常用的是post,get，一旦我们在其中定义这个method属性，那么如果请求的方式不是这个method指定的属性值，那么就不会访问到这个方法。</p>
<ul>
<li><p>其实只要不指定这个<code>method</code>属性，无论是post还是get方式的都会执行这个方法，只有当其设置了<code>method</code>属性才会做限定</p>
</li>
<li><p>比如我们使用了 <code>@RequestMapping(value=&quot;login.do&quot;,method=RequestMethod.GET)</code>，但是我们使用表单提交的是<code>&lt;form action=&quot;&lt;%=request.getContextPath%&gt;/project/user/login.do&quot; method=&quot;post&quot;&gt;&lt;/form&gt;</code>,那么这个表单的请求就不会对应上面的注解的方法，因为表单的提交方式是<code>post</code>，但是RequestMapping定义的是<code>method</code>是<code>get</code>方式,会响应<code>405错误</code></p>
</li>
</ul>
</li>
<li><p><strong><code>params</code></strong> ： params是用来指定请求中包含的参数，其中的值是一个<strong>字符串数组</strong>的形式，并且这个还支持简答的表达式</p>
<ol>
<li><code>param</code>: 表示请求参数中必须包含<code>param</code>这个参数至于为其赋予的值可以随便，但是必须包含这个字段</li>
<li><code>param!=value</code>： 表示请求参数中必须包含param这个参数，但是为其赋予的值不能等于value这个值，其他的什么值都是可以的</li>
<li><code>!param</code> ：表示请求参数中一定不能包含这个param字段，如果包含这个字段，那么将不能映射到这个地址</li>
<li><code>{“param1”，“param2”}</code>  ：  指定请求参数中必须包含着两个请求参数，至于为其赋什么值随便</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	 * 请求的参数中必须不能包含name属性，age必须不能等于12，必须包含sex，address必须等于xuzhou</div><div class="line">	 */</div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testParams"</span>,params=&#123;<span class="string">"!name"</span>,<span class="string">"age!=12"</span>,<span class="string">"sex"</span>,<span class="string">"address=xuzhou"</span>&#125;)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"testParams"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>headers</code></strong> : <code>headers</code>和<code>params</code>同样是支持简单的表达式，同样是一个字符串数组，这里一样的是适用于上面的表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 请求的参数中必须不能包含name属性，age必须不能等于12，必须包含sex，address必须等于xuzhou</div><div class="line"> * 请求头中的Accept-Language不能等于zh-CN,zh;q=0.8</div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testParams"</span>,params=&#123;<span class="string">"!name"</span>,<span class="string">"age!=12"</span>,<span class="string">"sex"</span>,<span class="string">"address=xuzhou"</span>&#125;,headers=&#123;<span class="string">"Accept-Language!=zh-CN,zh;q=0.8"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"testParams"</span>);</div><div class="line">	<span class="keyword">return</span> SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RequestMapping支持Ant风格的通配符"><a href="#RequestMapping支持Ant风格的通配符" class="headerlink" title="RequestMapping支持Ant风格的通配符"></a>RequestMapping支持Ant风格的通配符</h2><ul>
<li>在学习struts2中的时候也是支持通配符调用的，比如<em>_</em>等。现在springmvc中也是支持通配符风格的，但是只支持Ant风格的，如下：<ul>
<li><code>？</code>： 表示一个任意的字符 springmvc/testAnt?<code>可以使用</code>springmvc/testAnta`这个地址来访问，其中最后一个a可以替换成任意的字符</li>
<li><code>*</code> :   表示支持多个任意的字符  <code>/spingmvc/testAnt/*</code> 可以使用<code>springmvc/testAnt/aaaaa</code>这个地址来访问，其中最后一层的路径可以使用任意的字符串替换</li>
<li><code>**</code> :    匹配多层路径  <code>/springmvc/testAnt/**</code> 可以使用<code>/springmvc/testAnt/user/test</code>这个来访问，当然也可以是多层的路径</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	 * 这里的* 表示支持任意多个字符，因此这里可以使用:springmvc/testAnt/user这个地址来访问，其中最后一层use可以写成任意的字符串即可</div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/testAnt/*"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testAnt</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"testAnt"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc之RequestMapping&quot;&gt;&lt;a href=&quot;#Springmvc之RequestMapping&quot; class=&quot;headerlink&quot; title=&quot;Springmvc之RequestMapping&quot;&gt;&lt;/a&gt;Springmvc之Requ
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc入门</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Springmvc%E5%85%A5%E9%97%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Springmvc入门/</id>
    <published>2018-04-24T03:14:16.000Z</published>
    <updated>2018-04-24T03:14:43.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc入门"><a href="#Springmvc入门" class="headerlink" title="Springmvc入门"></a>Springmvc入门</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li><p>解决<code>V(View)</code>和<code>C(Controller)</code>的交互问题,即解决了Controller如果接收了用户的请求，并将结果响应给用户的问题</p>
</li>
<li><p>springmvc约定了一套处理用户请求的流程</p>
</li>
</ul>
<h2 id="Springmvc的核心组件"><a href="#Springmvc的核心组件" class="headerlink" title="Springmvc的核心组件"></a>Springmvc的核心组件</h2><ol>
<li><code>DispatcherServlet</code> ：前端控制器，请求入口</li>
<li><code>HandlerMapping</code> ： 控制器，其中存放着处理请求的组件，请求派发</li>
<li><code>Controller</code> ：控制器，处理请求</li>
<li><code>ModelAndView</code> ：模型，封装业务处理结果和视图</li>
<li><code>ViewResolver</code> : 视图解析器，显示视图</li>
</ol>
<h2 id="springmvc处理流程"><a href="#springmvc处理流程" class="headerlink" title="springmvc处理流程"></a>springmvc处理流程</h2><ol>
<li>用户发出请求，请求交给前端控制器(<code>DispatcherServlet</code>)处理</li>
<li>DispatcherServlet通过<code>HandlerMapping</code>找到<code>Controller</code>中相对应的组件处理请求</li>
<li>执行<code>Controller</code>组件约定方法处理请求，在约定方法调用模型组件(<code>Service,Dao</code>)完成业务逻辑,约定方法返回一个<code>ModelAndView</code>对象，封装了处理结果和视图名称信息</li>
<li>控制器接收了<code>ModelAndView</code>之后，调用视图解析器(<code>ViewResolver</code>)组件，定位到指定的<code>View(JSP)</code>并且传递处理结果，生成响应界面结果</li>
</ol>
<p><img src="http://ono60m7tl.bkt.clouddn.com/springmvc.png" alt="springmvc处理流程"></p>
<h2 id="创建一个Springmvc项目"><a href="#创建一个Springmvc项目" class="headerlink" title="创建一个Springmvc项目"></a>创建一个Springmvc项目</h2><ul>
<li>创建<code>maven</code>项目</li>
<li>导入<code>web.xml</code></li>
<li>配置<code>tomact</code>项目运行环境(<code>项目右击 --&gt; properties - &gt; Target Runtimes</code>)</li>
<li>配置<code>pom.xml</code>依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>添加springmvc的配置文件在resource目录下(<code>applicationContext.xml</code>)<ul>
<li><strong>开启组件扫描</strong></li>
<li><strong>配置视图解析器，用来定义跳转的视图，在视图解析中，最后的jsp文件在  <code>perfix +  controller中返回的字符串 + suffix</code></strong></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 开启组件扫描 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.springmvc"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置视图解析器:</span></div><div class="line">		prefix:表示前缀</div><div class="line">		suffix：表示后缀</div><div class="line">		如果controller中返回的是success这个字符串，那么对应的视图是/WEB-INF/JSP/success.jsp这个视图</div><div class="line">	--&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/JSP/"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置前端控制器(DispatcherServlet),在<code>web.xml</code>中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置前端控制器DispatcherServlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置springMVC配置文件的路径，这里如果想要使用默认的可以不用配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- classpath表示根路径，这里找的项目根路径下的applicationContext.xml --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 当tomcat启动的时候就加载，设置启动的优先级 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置分发规则，这个是用来控制所有的请求,只要是请求后缀为.do的都会拦截分发--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>cn.tedu.springmvc.controller</code>包中创建一个<code>UserController</code>类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testHello</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;  <span class="comment">//返回视图，这里通过视图解析器之后对应的是 /WEB-INF/JSP/success.jsp</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在 <code>WEB-INF/JSP/</code>中创建一个<code>success.jsp</code>页面，添加一个<code>&lt;h1&gt;Hello World&lt;/h1&gt;</code></li>
</ul>
<ul>
<li>此时启动项目，打开浏览器输入<code>http://localhost:8080/Springmvc_01/user/hello.do</code>，那么就会看见成功跳转到success.jsp页面，显示文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc入门&quot;&gt;&lt;a href=&quot;#Springmvc入门&quot; class=&quot;headerlink&quot; title=&quot;Springmvc入门&quot;&gt;&lt;/a&gt;Springmvc入门&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;head
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解的使用和组件扫描</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Spring%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Spring注解的使用和组件扫描/</id>
    <published>2018-04-24T03:13:38.000Z</published>
    <updated>2018-04-24T03:24:04.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring注解的使用和组件扫描"><a href="#Spring注解的使用和组件扫描" class="headerlink" title="Spring注解的使用和组件扫描"></a>Spring注解的使用和组件扫描</h1><h2 id="【非常重要】-组件扫描-Component-Scan"><a href="#【非常重要】-组件扫描-Component-Scan" class="headerlink" title="【非常重要】 组件扫描(Component-Scan)"></a>【非常重要】 组件扫描(Component-Scan)</h2><ul>
<li><p>通过配置组件扫描，可以使得spring自动扫描package，而不必在spring的配置文件中逐一声明各个<code>&lt;bean&gt;</code></p>
</li>
<li><p>在配置组件扫描时，指定的包是“根包”，即例如指定了<code>cn.tedu.spring</code>,spring不只会扫描这个包，还会扫描它的各个层级子包，例如：<code>cn.tedu.spring.dao</code></p>
</li>
<li><p>直接在spring的配置文件中开启组件扫描即可 <code>&lt;context:component-scan base-package=&quot;cn.tedu.spring&quot;&gt;&lt;/context:component-scan&gt;</code></p>
</li>
<li><p><strong>注意</strong>： 仅仅开启组件扫描<code>spring</code>是不会自动管理bean的，而是自动的扫描<code>package</code>，要想自动管理bean，那么还需要配置注解</p>
</li>
</ul>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul>
<li><p>在类的声明上方添加<code>@Component</code>注解，可以是的spring知道这个类是一个组件，需要进行管理，所以如过某个类需要被Spring管理，应该将这个类放在被扫描的包中，并且添加注解</p>
</li>
<li><p>由Spring扫描到的组件(由<code>@Component</code>注解标记的类)，会由Spring自动设置<code>Bean Id</code>，值为将<strong>类名首字母小写</strong>的名称，例如组件类的名称是<code>UserDao</code>，则配置的Bean的id是<code>userDao</code>，如果需要自定义Bean，那么可以直接在注解中设置，比如<code>@Component(&quot;id&quot;)</code></p>
</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>一定要是在开启组件扫描的包下使用注解，否则将不会扫描到配置的注解</li>
</ul>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul>
<li><p>可以混用，暂时这几个注解没有差异，完全功能相同，但是我们还是要根据规则使用</p>
</li>
<li><p><code>@Component</code> ： 通用注解</p>
</li>
<li><code>@Service</code> ： 用于对业务逻辑类的注解(Service层)</li>
<li><code>@Controller</code> ： 用于对控制器类的注解</li>
<li><code>@Repository</code> ：用于对持久层处理类的注解(Dao层)</li>
<li><p><code>@Named</code> ：通用注解(不用)</p>
</li>
<li><p>以上5个注解从实现目标和效果是等效的，但是基于方便理解代码的目的，应该按需使用，了；例如对名为<code>UserService</code>类的，应该使用<code>@Service</code></p>
</li>
</ul>
<h3 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h3><h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><ul>
<li>在类的声明语句上方添加这个注解，用于设置bean的作用域,比如<code>@Scope(&quot;prototype&quot;)</code>表示非单例，默认是单例</li>
</ul>
<h4 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h4><ul>
<li>在单例模式下设置是否懒加载，例如<code>@Lazy(&quot;true&quot;)</code>用于设置成懒加载</li>
<li>在类的声明语句上方添加</li>
<li>前面之前已经说过，在创建Bean的时候默认使用的是单例模式下的饿汉式的创建，即是在spring配置文件加载的时候创建</li>
</ul>
<h4 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h4><ul>
<li>将方法设置为生命周期的初始化方法</li>
<li>设置初始化方法，直接在初始化方法的声明语句中添加即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化方法： 应该是public的，无返回参数，无参数的</div><div class="line"> */</div><div class="line"><span class="meta">@PostConstruct</span>   <span class="comment">//定义初始化方法，在构造方法之后执行</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"初始化方法"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="PreDestroy-单例模式下才会销毁"><a href="#PreDestroy-单例模式下才会销毁" class="headerlink" title="@PreDestroy(单例模式下才会销毁)"></a>@PreDestroy(单例模式下才会销毁)</h4><ul>
<li>在方法的声明语句上方使用，可以将这个方法设置为生命周期的销毁方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PreDestroy</span>   <span class="comment">//定义销毁方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"销毁方法"</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="注入值"><a href="#注入值" class="headerlink" title="注入值"></a>注入值</h3><h4 id="Autowired-（不推荐使用）"><a href="#Autowired-（不推荐使用）" class="headerlink" title="@Autowired （不推荐使用）"></a>@Autowired （不推荐使用）</h4><ul>
<li><p>在类中，在声明属性的上方添加<code>@Autowired</code>，用于标记该属性是自动装配值</p>
</li>
<li><p><strong>这种自动装配默认按照类型(<code>byType</code>)实现自动装配</strong></p>
</li>
<li><p><strong>如果需要按照名称(byName)来自动装配,还需要使用<code>@Qualifier(&quot;userDao&quot;)</code>来组合使用，注解中配置的名称是需要注入的值的<code>Bean-Id</code></strong></p>
</li>
</ul>
<ul>
<li><code>UserDao</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Repository(&quot;userDao&quot;)</div><div class="line">public class UserDaoImpl implements UserDao&#123;</div><div class="line">	public void reg() &#123;</div><div class="line">		System.out.println(&quot;reg&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>UserService</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reg</span><span class="params">()</span></span>&#123;</div><div class="line">		userDao.reg();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Resource-推荐使用"><a href="#Resource-推荐使用" class="headerlink" title="@Resource (推荐使用)"></a>@Resource (推荐使用)</h4><ul>
<li>在需要注入的属性的上方添加该注解</li>
<li><strong>默认先按照名称来自动装配的(byName),如果名称对应不上，那么按照类型(byType)进行匹配</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span>   <span class="comment">//这里会先自动匹配和属性名一样的Bean Id，如果没有匹配到，那么就按照类型进行匹配</span></div><div class="line"><span class="keyword">private</span> UserDao userDao;</div></pre></td></tr></table></figure>
<ul>
<li><strong>如果使用<code>@Resource(name=&quot;userDaoImpl&quot;)</code>，name属性指定的是<code>Bean Id</code>,添加了name属性，那么只是按照名称来装配，如果这个名称对应的Bean不存在，那么就注入失败</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span>(name=<span class="string">"userDaoImpl"</span>)   <span class="comment">//这里只会匹配Bean Id为userDaoImpl的，如果匹配不上，那么报异常</span></div><div class="line"><span class="keyword">private</span> UserDao userDao;</div></pre></td></tr></table></figure>
<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><ul>
<li><p>使用<code>@Value</code>注解添加在属性的声明的上方，可以对属性注入值</p>
</li>
<li><p>直接注入值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span>(<span class="string">"陈加兵"</span>)</div><div class="line"><span class="keyword">private</span> String name;</div></pre></td></tr></table></figure>
<ul>
<li>在使用<code>@Value(&quot;#{beanId.属性名}&quot;)</code>的注解时还可以使用Spring表达式</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Value(#&#123;jdbc.url&#125;)</div><div class="line">private String url;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring注解的使用和组件扫描&quot;&gt;&lt;a href=&quot;#Spring注解的使用和组件扫描&quot; class=&quot;headerlink&quot; title=&quot;Spring注解的使用和组件扫描&quot;&gt;&lt;/a&gt;Spring注解的使用和组件扫描&lt;/h1&gt;&lt;h2 id=&quot;【非常重要】-组件
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring表达式和自动装配</title>
    <link href="http://chenjiabing666.github.io/2018/04/24/Spring%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://chenjiabing666.github.io/2018/04/24/Spring表达式和自动装配/</id>
    <published>2018-04-24T03:12:59.000Z</published>
    <updated>2018-04-24T03:13:14.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring表达式和自动装配"><a href="#Spring表达式和自动装配" class="headerlink" title="Spring表达式和自动装配"></a>Spring表达式和自动装配</h1><h2 id="【重要】spring表达式"><a href="#【重要】spring表达式" class="headerlink" title="【重要】spring表达式"></a>【重要】spring表达式</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li><p>通过spring表达式可以在配置<code>Y</code>节点时，如果Y的某些属性需要注入值，可以是已经配置的好的<code>X</code>类的节点中的值</p>
</li>
<li><p>直接使用<code>#{id.属性名}</code></p>
</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>必须为每个属性都要设置<code>set</code>方法</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>新建两个类</p>
</li>
<li><p>Message</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> List&lt;String&gt; cities;   <span class="comment">//城市 。List集合</span></div><div class="line">	<span class="keyword">private</span> Set&lt;String&gt; friend;   <span class="comment">//Set集合</span></div><div class="line">	<span class="keyword">private</span> Map&lt;Integer,String&gt; bookes;  <span class="comment">//Map集合</span></div><div class="line">	<span class="keyword">private</span> Properties properties;   <span class="comment">//Properties集合</span></div><div class="line">	<span class="keyword">private</span> String[] names;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> String[] getNames() &#123;</div><div class="line">		<span class="keyword">return</span> names;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String[] names)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.names = names;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getCities</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> cities;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCities</span><span class="params">(List&lt;String&gt; cities)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cities = cities;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getFriend</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> friend;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFriend</span><span class="params">(Set&lt;String&gt; friend)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.friend = friend;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getBookes</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> bookes;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookes</span><span class="params">(Map&lt;Integer, String&gt; bookes)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.bookes = bookes;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> properties;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.properties = properties;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ValueBean的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueBean</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取不是集合类型的值"><a href="#获取不是集合类型的值" class="headerlink" title="获取不是集合类型的值"></a>获取不是集合类型的值</h4><ul>
<li>在sprig的配置文件中配置如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"cities"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>徐州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>无锡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>常州<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:set</span> <span class="attr">id</span>=<span class="string">"friends"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>陈加兵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:set</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"bookes"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1001"</span> <span class="attr">value</span>=<span class="string">"java编程基础"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1002"</span> <span class="attr">value</span>=<span class="string">"java编程思想"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 引入外部的Properties文件，location指定的就是位置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"properties"</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">util:properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Message"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- List集合的注入 ref指定的上面定义的List的id --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cities"</span> <span class="attr">ref</span>=<span class="string">"cities"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Set集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"friend"</span> <span class="attr">ref</span>=<span class="string">"friends"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Map集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookes"</span> <span class="attr">ref</span>=<span class="string">"bookes"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- properties的集合的注入 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span> <span class="attr">ref</span>=<span class="string">"properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 为数组赋值 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"names"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>Alex<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>Billy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置ValueBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueBean"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.ValueBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- value的值是使用spring表达式获取的，形式为：#&#123;前面定义好的id.属性名&#125; --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;message.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引用数组集合或者List的值"><a href="#引用数组集合或者List的值" class="headerlink" title="引用数组集合或者List的值"></a>引用数组集合或者List的值</h4><ul>
<li>直接使用 <code>#{bean的id.数组名[index]}</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置ValueBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueBean"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.ValueBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- value的值是使用spring表达式获取的，形式为：#&#123;前面定义好的id.属性名&#125; --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;message.names[0]&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="ValueBean的name属性设置为Person中的Address对象的city值"><a href="#ValueBean的name属性设置为Person中的Address对象的city值" class="headerlink" title="ValueBean的name属性设置为Person中的Address对象的city值"></a>ValueBean的name属性设置为Person中的Address对象的city值</h4><ul>
<li><p><code>#{person.address.city}</code></p>
</li>
<li><p>Person类中有一个成员变量是Address类的对象</p>
</li>
<li>这里不再写这三个类了，直接在spring中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 创建一个Address的实例 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Address"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"无锡"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pro"</span> <span class="attr">value</span>=<span class="string">"江苏"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.Person"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 引用上面address --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置ValueBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueBean"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.beans.ValueBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- value的值是使用spring表达式获取的，形式为：#&#123;前面定义好的id.属性名&#125; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;person.address.city&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引用Map集合中的某个value"><a href="#引用Map集合中的某个value" class="headerlink" title="引用Map集合中的某个value"></a>引用Map集合中的某个value</h4><ol>
<li><code>#{id.Map名称.key名称}</code></li>
<li><code>#{id.Map名称[&#39;key名称&#39;]}</code></li>
</ol>
<h2 id="【了解】spring表达式支持方法的调用"><a href="#【了解】spring表达式支持方法的调用" class="headerlink" title="【了解】spring表达式支持方法的调用"></a>【了解】spring表达式支持方法的调用</h2><h2 id="【了解】-自动装装配-autowire"><a href="#【了解】-自动装装配-autowire" class="headerlink" title="【了解】 自动装装配(autowire)"></a>【了解】 自动装装配(autowire)</h2><ul>
<li><code>&lt;bean id=&quot;&quot; class=&quot;&quot; autowire=&quot;&quot;&gt;</code></li>
<li>自动装配表现为不需要配置<code>&lt;property&gt;</code>节点来注入，spring会自动的为属性注入值</li>
<li><p>在<code>bean</code>节点中添加<code>autowire</code>属性以配置自动装配，当值为<code>byName</code>，表示根据名称自动装配，即spring会检查这个bean的所有属性名称，然后在搜平日那个管理的所有Bean中查找bean-id一致的Bean对象，如果找到，则自动赋值</p>
</li>
<li><p>当取值为<code>byType</code>时，表示根据类型自动装配，及自动化赋值的标准是找数据类型匹配的Bean对象，需要注意的是：如果根据类型装配，必须保证可以匹配上的，由spring自动管理的Bean只有一个，如果有2个或者更多，会导致异常</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>UserDao</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class UserDao()&#123;</div><div class="line">	public void reg()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>UserService</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> UserDao userDao;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reg</span><span class="params">()</span></span>&#123;</div><div class="line">		userDao.reg();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>spring 的配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.UserDao"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--这里不需要配置property节点来ref上面定义的bean，只需要使用自动装配即可--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.UserService"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring表达式和自动装配&quot;&gt;&lt;a href=&quot;#Spring表达式和自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring表达式和自动装配&quot;&gt;&lt;/a&gt;Spring表达式和自动装配&lt;/h1&gt;&lt;h2 id=&quot;【重要】spring表达式&quot;&gt;&lt;a
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
