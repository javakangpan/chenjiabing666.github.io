<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-03-30T23:27:11.027Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Struts之获取请求参数</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/Struts%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/Struts之获取请求参数/</id>
    <published>2018-03-30T23:26:35.000Z</published>
    <updated>2018-03-30T23:27:11.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h1><ul>
<li>在Servlet中可以调用HttpServletRequest的getParameter()的方法接收传递过来的请求参数，但是在struts2中对这种方式进行了三种封装</li>
<li>我们一般发出请求都是通过表单传递的，但是在服务端如果获取表单传递过来的值，其中有三种不同的方式</li>
</ul>
<h2 id="属性驱动"><a href="#属性驱动" class="headerlink" title="属性驱动"></a>属性驱动</h2><ul>
<li><p>属性驱动就是将一个Action类作为一个POJO类，在类中定义表单的请求参数的<code>name</code>属性，但是还要为这些成员变量设置get，set方法。因为在获取请求参数的时候自动调用的是set方法，获取参数的时候调用的是get方法。</p>
</li>
<li><p>当表单提交的时候，实际上是提交了表单元素的值，之后会给ACtion类中的属性设置值(set)，因此这里的属性需要添加set方法</p>
</li>
<li><p>当表单请求成功的时候，实际上是先经过Action类，然后跳转到指定的视图，这个过程都是转发(ddispatcher)，因此会保留request域中的键值对，此时在success.jsp页面中使用EL表达式取值即可(get方法),取值使用的是属性的get方法，因此需要添加get方法</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>SimpleAction类，其中定义了属性<ul>
<li><strong>为每一个属性都需要添加get，set方法</strong></li>
<li><strong>表单提交之后会自动调用属性的set方法为其赋值</strong></li>
<li><strong>跳转到指定视图之后，使用EL表达式取值时会调用属性的get方法</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;  <span class="comment">//姓名</span></div><div class="line">	<span class="keyword">private</span> String password;  <span class="comment">//密码</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(name+<span class="string">"----"</span>+password);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml 配置Action</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>index.jsp 提价表单<ul>
<li><strong>input中的属性<code>name</code>对应的是SimpleAction的属性名</strong></li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;%</div><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";</div><div class="line">%&gt;</div><div class="line">&lt;form action="&lt;%=basePath %&gt;simple" method="post"&gt;</div><div class="line">	name:&lt;input type="text" name="name"&gt;</div><div class="line">	password:&lt;input type="text" name="password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp 表单提交成功之后跳转的视图</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;name &#125;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;password &#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h2 id="域驱动"><a href="#域驱动" class="headerlink" title="域驱动"></a>域驱动</h2><ul>
<li><p>域驱动是将表单中name属性抽象出一个JavaBean类成为一个modle，并不是Action类成为modle了，只需要在Action类引用JavaBean的对象即可(作为成员变量，get，set，方法都有)</p>
</li>
<li><p>既然Action类中的成员变量已经是JavaBean的对象了，那么表单的中name属性的设置就要使用OGNL形式的取该对象中的属性了，而不是像属性驱动一样直接设置的属性</p>
</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li>JavaBean实体类<ul>
<li><strong>必须为每一个属性设置get，set方法</strong></li>
<li><strong>必须有无参构造</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * POJO类，model 其中必须为每一个属性设置get，set方法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 姓名</span></div><div class="line">	<span class="keyword">private</span> String password; <span class="comment">// 密码</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Action类<ul>
<li><strong>JavaBean对象作为其成员变量，必须为这个成员变量设置get,set方法</strong></li>
<li><strong>必须有一个无参构造</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user; <span class="comment">// POJO类对象，必须有set，get方法，和无参构造方法</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(user.getName() + <span class="string">"---&gt;"</span> + user.getPassword());</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml配置同上</li>
</ul>
<ul>
<li>index.jsp 表单提交<ul>
<li>input中的name属性使用OGNL表达式来设置其值</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";</div><div class="line">%&gt;</div><div class="line">&lt;form action="&lt;%=basePath %&gt;simple" method="post"&gt;</div><div class="line">	name:&lt;input type="text" name="user.name"&gt;</div><div class="line">	password:&lt;input type="text" name="user.password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp页面<ul>
<li>此时使用EL表达式取值，也是使用OGNL形式的取值方式</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;requestScope.user.name &#125;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;requestScope.user.password &#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h2 id="模型驱动"><a href="#模型驱动" class="headerlink" title="模型驱动"></a>模型驱动</h2><ul>
<li><p>模型驱动和域驱动比较相似，都是用一个JavaBean类作为model，但是模型驱动必须实现ModelDriven&lt;&gt;这个接口,这个可以指定一个泛型，其中泛型类为JavaBean的类，必须实现的方法是getmodel()方法</p>
</li>
<li><p><code>Type getModel(){}</code>  返回一个Type对象，这个对象是在实现接口的时候定义泛型类(JavaBean类)</p>
</li>
<li><p>使用模型驱动，那么表单中的name属性值就不需要使用OGNL表达式了，而是直接使用属性字段即可，这个和属性驱动一样的</p>
</li>
</ul>
<ul>
<li><p>JavaBean类，这个和上面的一样</p>
</li>
<li><p>Action类，实现了ModelDriver<javabean> 接口</javabean></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现ModelDriven接口&lt;&gt;指定的泛型为JavaBean类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span>,<span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user; <span class="comment">// POJO类对象，必须有set，get方法，和无参构造方法</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(user.getName() + <span class="string">"---&gt;"</span> + user.getPassword());</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"调用了getModel方法"</span>);</div><div class="line">		<span class="comment">// 如果对象为空，就创建一个对象，然后返回</span></div><div class="line">		<span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.user = <span class="keyword">new</span> User();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml 同上</li>
</ul>
<ul>
<li>index.jsp  表单提交<ul>
<li><strong>这里name属性值直接使用JavaBean属性即可，必须字段一样</strong></li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action="&lt;%=basePath %&gt;simple" method="post"&gt;</div><div class="line">	name:&lt;input type="text" name="name"&gt;</div><div class="line">	password:&lt;input type="text" name="password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp<ul>
<li>取值仍然使用的是OGNL形式的取值方式</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;requestScope.user.name &#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;requestScope.user.password &#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>根据我的经验，在框架整合的基础上，我们必须使得单独的实体类对应一张表，那么此时就需要使得Action类和JavaBean分离，因此我推荐使用第二种方式，第三种方式还需要实现接口，对类的污染比较严重</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;获取请求参数&quot;&gt;&lt;a href=&quot;#获取请求参数&quot; class=&quot;headerlink&quot; title=&quot;获取请求参数&quot;&gt;&lt;/a&gt;获取请求参数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Servlet中可以调用HttpServletRequest的getParameter()的方
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts之Action类访问Servlet_API</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/Struts%E4%B9%8BAction%E7%B1%BB%E8%AE%BF%E9%97%AEServlet-API/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/Struts之Action类访问Servlet-API/</id>
    <published>2018-03-30T23:25:22.000Z</published>
    <updated>2018-03-30T23:25:53.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Action类访问Servlet-API"><a href="#Action类访问Servlet-API" class="headerlink" title="Action类访问Servlet API"></a>Action类访问Servlet API</h1><ul>
<li>Struts2并未直接和Servlet API耦合，这是Struts2的一个改良之处。但是对于web应用控制器而言，不访问Servlet API是不可能，因此下面我们介绍三种方式访问Servlet API</li>
</ul>
<h2 id="ActionContext"><a href="#ActionContext" class="headerlink" title="ActionContext"></a>ActionContext</h2><ul>
<li>使用这个可以获取Servlet中<code>HttpServletRequest</code>,<code>HttpSession</code>,<code>ServletContext</code></li>
</ul>
<h3 id="其中的方法"><a href="#其中的方法" class="headerlink" title="其中的方法"></a>其中的方法</h3><ul>
<li><p><code>static ActionContext getContext()</code>返回一个实例化ActionContext对象，用于调用下面的方法</p>
</li>
<li><p><code>Object get(key)</code>  返回ActionContext中存放的键值对的值  其实这里获取的是Servlet中<code>HttpServletRequest</code>对象的属性</p>
</li>
<li><p><code>Object put(key,value)</code> 向ActionContext中存放键值对,同样该方法用于存放<code>HttpServletRequest</code>的属性</p>
</li>
<li><p><code>Map getSession()</code><br>返回一个Map对象，不过这个模拟了<code>HttpSession</code>的用法，只不过现在向其中存放键值对使用put,获取属性用get</p>
</li>
<li><p><code>Map getApplication()</code><br>返回一个Map对象，不过这个模拟了Servlet中的<code>ServletContext</code>对象的方法。只不过存放和获取属性的方法用的分别是put和get</p>
</li>
<li><p><code>Map getParameters()</code><br>获取所有的请求参数，类似调用HttpServletRequest对象的getParameterMap()方法</p>
</li>
<li><p><code>Map setSession(Map session)</code><br>直接传入一个Map实例，将其中的kay-value转换成session的属性名和属性值</p>
</li>
<li><p><code>Map setApplication(Map application)</code><br>直接传入一个Map实例，将Map实例中的key-value转换成属性名，属性值</p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>如果想要使用这个类，当然需要实例化的对象，其中提供了一个获取对象的静态方法，就是上面方法中的第一个</p>
</li>
<li><p>我们在Action方法中使用这个设置request域，session域中的属性</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">		ActionContext actionContext=ActionContext.getContext();  <span class="comment">//获取实例化对象</span></div><div class="line">		<span class="comment">//向request域中存放键值对</span></div><div class="line">		actionContext.put(<span class="string">"name"</span>, <span class="string">"jack"</span>);</div><div class="line">		<span class="comment">//获取request域中的name值</span></div><div class="line">		System.out.println(actionContext.get(<span class="string">"name"</span>));</div><div class="line"></div><div class="line">		<span class="comment">//向session中存放键值对</span></div><div class="line">		actionContext.getSession().put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//向application中存放键值对</span></div><div class="line">		actionContext.getApplication().put(<span class="string">"a"</span>, <span class="string">"b"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp 使用EL表达式获取</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">&lt;h1&gt;request域中的name:$&#123;requestScope.name&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;session域中的password: $&#123;sessionScope.password &#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;application域中的a: $&#123;a &#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>虽说现在可以向各种域中添加属性获取属性，但是我们不可以移除属性，所以说这种方法不如直接使用Servlet API功能更加强大</li>
</ul>
<h2 id="实现接口访问Servlet-API"><a href="#实现接口访问Servlet-API" class="headerlink" title="实现接口访问Servlet API"></a>实现接口访问Servlet API</h2><ul>
<li>实现接口访问对一个Action类的污染实在太严重了，这个是不推荐使用的，可以了解一下</li>
</ul>
<h3 id="可以实现的接口"><a href="#可以实现的接口" class="headerlink" title="可以实现的接口"></a>可以实现的接口</h3><ul>
<li><p><code>ServletContextAware</code><br>实现该接口的Action可以直接访问用户请求的ServletContext实例</p>
</li>
<li><p><code>ServletRequestAware</code><br>实现该接口的Action可以直接访问用户请求的HttpServletRequest实例</p>
</li>
<li><p><code>ServletResponseAware</code><br>实现该接口的Action可以直接访问请求的HttpServletResponse实例</p>
</li>
</ul>
<h2 id="ServletActionContext（推荐）"><a href="#ServletActionContext（推荐）" class="headerlink" title="ServletActionContext（推荐）"></a>ServletActionContext（推荐）</h2><ul>
<li>使用这个类可以直接获取<code>HttpServletRequest</code>，<code>HttpServletResponse</code>等对象，其功能比第一种更加强大，因此推荐使用这种方式获取Servlet API</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p><code>PageContext getPageContext()</code><br>取得web应用的PageContext对象</p>
</li>
<li><p>HttpServletRequest getRequest()<br>获取HttpServletRequest对象</p>
</li>
<li><p><code>HttpServletResponse getResponse()</code><br>获取HttpServletResponse对象</p>
</li>
<li><p><code>ServletContext  getServletContext()</code><br>获取ServletContext对象</p>
</li>
</ul>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul>
<li>我们在Action类中使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//获取Request域的对象</span></div><div class="line">		HttpServletRequest request=ServletActionContext.getRequest();</div><div class="line">		request.setAttribute(<span class="string">"name"</span>, <span class="string">"jack"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取Session域的对象</span></div><div class="line">		HttpSession session=request.getSession();</div><div class="line">		session.setAttribute(<span class="string">"password"</span>, <span class="string">"123456"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取Response的对象</span></div><div class="line">		HttpServletResponse response=ServletActionContext.getResponse();</div><div class="line"></div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>直接获取Servlet API中的对象，可以使用的功能更加强大，因此推荐使用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Action类访问Servlet-API&quot;&gt;&lt;a href=&quot;#Action类访问Servlet-API&quot; class=&quot;headerlink&quot; title=&quot;Action类访问Servlet API&quot;&gt;&lt;/a&gt;Action类访问Servlet API&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2之动态调用</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/Struts2%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/Struts2之动态调用/</id>
    <published>2018-03-30T23:22:58.000Z</published>
    <updated>2018-03-30T23:23:29.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态调用"><a href="#动态调用" class="headerlink" title="动态调用"></a>动态调用</h1><h2 id="什么是动态调用"><a href="#什么是动态调用" class="headerlink" title="什么是动态调用"></a>什么是动态调用</h2><ul>
<li>动态调用就是一个Action类对应着多个请求，比如一个Action类中包含许多的方法，实现动态调用就是让这些方法都配上不同的URL请求映射，这个就是动态调用</li>
</ul>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul>
<li>我们知道如果一个Action类只是对应着一个URL请求，那么我们要写很多Action类，但是如果我们使用了动态调用，那么就可以减少很多的重复工作</li>
</ul>
<h2 id="method实现动态调用"><a href="#method实现动态调用" class="headerlink" title="method实现动态调用"></a>method实现动态调用</h2><p>-在struts核心配置文件详解(action)中已经详细讲解了method的用法，使用这个方式可以指定Action类中的不同的方法映射请求，那么就完成了动态调用</p>
<h2 id="action名-方法名"><a href="#action名-方法名" class="headerlink" title="action名!方法名"></a>action名!方法名</h2><ul>
<li>这种方式不推荐使用，要想使用的话还要开启开关，如下<ul>
<li><code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot; /&gt;</code>将这个常量设置<code>true</code>才能使用</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>创建SimpleAction的类<ul>
<li>这个Action类中有一个login方法，我们的动态调用这个login方法，使用<code>action名!方法名</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//实现登录的action</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"这个是login方法......"</span>);</div><div class="line">		<span class="keyword">return</span> INPUT;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>struts.xml</code>中的配置(在src目录下)<ul>
<li>开启开关</li>
<li>配置SimpleAction这Action类</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 开启开关，否则不能使用!的方式 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 定义这个包下的默认处理类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 这个是SimpleAction的类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="输入地址"><a href="#输入地址" class="headerlink" title="输入地址"></a>输入地址</h3><ul>
<li><p>假设项目的名称为web1，那么在地址栏中输入的url为：<code>http://localhost:8080/web1/simple!login</code>,注意这个感叹号一定是英文的</p>
</li>
<li><p>输入成功之后我们看到可以正确跳转，那么就成功了</p>
</li>
</ul>
<h2 id="通配符的方式"><a href="#通配符的方式" class="headerlink" title="通配符的方式"></a>通配符的方式</h2><ul>
<li><p>使用这种方式首先需要关闭上面开启的开关，当然如果你没有开启，那么就不用配置，因为其中默认就是关闭的</p>
<ul>
<li><code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;false&quot; /&gt;</code></li>
<li>这种方式是官网推荐使用</li>
</ul>
</li>
<li><p>在Servelt设置url的时候也使用过通配符，一般都是使用*来替代的。现在使用通配符也是一样的道理，也是可以使用动态调用的。</p>
</li>
<li><p>这种方式是和method方式配合使用的，在我看来就是<code>method</code>方式，只不过通过通配符传参而已</p>
</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li>我们还是使用上面的SimpleAction类，仍然是调用其中的login方法，不过struts.xml此时的配置文件改变了</li>
</ul>
<ul>
<li>struts.xml<ul>
<li>关闭开关(默认是关闭的)</li>
<li>定义SimpleAction类的action</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 设置为false，关闭开关，默认是关闭的，因此可以不设置  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 定义action，其中name属性使用一个*的通配符，method=&#123;1&#125;，这个1就是用来接收第一个通配符*的内容</span></div><div class="line">			假设此时输入的Simple_regist ,那么此时&#123;1&#125;=regist</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple_*"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>此时如果我们的项目名称为让web1，那么输入的url为<code>http://localhost:8080/Struts2/simple_login.action</code>,那么就会调用SimpleAction中的login方法执行</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>推荐使用method和通配符的方式实现动态调用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态调用&quot;&gt;&lt;a href=&quot;#动态调用&quot; class=&quot;headerlink&quot; title=&quot;动态调用&quot;&gt;&lt;/a&gt;动态调用&lt;/h1&gt;&lt;h2 id=&quot;什么是动态调用&quot;&gt;&lt;a href=&quot;#什么是动态调用&quot; class=&quot;headerlink&quot; title=&quot;什么是
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>struts核心配置文件详解(result配置)</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/struts%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3-result%E9%85%8D%E7%BD%AE/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/struts核心配置文件详解-result配置/</id>
    <published>2018-03-30T23:22:03.000Z</published>
    <updated>2018-03-30T23:22:32.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struts核心配置文件详解-result配置"><a href="#struts核心配置文件详解-result配置" class="headerlink" title="struts核心配置文件详解(result配置)"></a>struts核心配置文件详解(result配置)</h1><h2 id="配置处理结果-result"><a href="#配置处理结果-result" class="headerlink" title="配置处理结果(result)"></a>配置处理结果(result)</h2><ul>
<li>我们在包中定义的<code>&lt;result name=&quot;&quot; type=&quot;&quot;&gt;value&lt;/result&gt;</code>,这个是用来根据action方法返回的字符串，跳转到指定的视图或者其他的action。<ul>
<li>name指定的是action方法返回的结果。</li>
<li>type 指定的是跳转的类型，默认的是dispatcher，相当于Servlet中的RequestDispatcher,地址栏中的url不会改变</li>
</ul>
</li>
</ul>
<ul>
<li>如果一个action方法中可能返回的值是多个，比如如果测试成功返回success，测试失败返回input，出现异常返回error，那么此时就需要用到多个<code>&lt;result&gt;</code>标签来定义这些返回值跳转的视图</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol>
<li><p>dispatcher</p>
<ul>
<li><p>表示采用的跳转方式为转发，这个和Servlet中的RequestDispathcher是一个原理，地址栏的url是不会改变的</p>
</li>
<li><p>dispatcher 结果类型是在Action与JSP页面之中的一种默认的跳转发方式，相当于之间的Servlet中的转发(RequestDispatcher)</p>
</li>
</ul>
</li>
<li><p>redirect</p>
<ul>
<li><p>用于跳转到其他的页面，但是这个地址栏的url是改变的</p>
</li>
<li><p>这个结果类型主要用于重定向到指定的视图资源，这个和dispatcher比较相似，但是这个地址改变了。相当于Servlet中的sendirect()这个方法。</p>
</li>
</ul>
</li>
<li><p>chain</p>
<ul>
<li><p>Action链式处理结果类型</p>
</li>
<li><p>很多时候，当一个Action处理完之后并不想转发到视图资源，而是想要跳转到指定的Action继续未完成的处理，这时就需要使用chain，使得两个Action成为链式处理。</p>
</li>
<li><p>范例如下： 其中<result>中的value要写成指定的<action>标签中的name值，如果不是一个包中的，还要引入另外一个包中的action，看上面的内容</action></result></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">class</span>=<span class="string">"com.action.regist"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.action.LoginAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>freemaker</p>
<ul>
<li>用于与FreeMaker整合的结果类型</li>
</ul>
</li>
<li><p>httpheader</p>
<ul>
<li>用于控制特殊的HTTP行为的结果类型</li>
</ul>
</li>
<li><p>redirectAction</p>
<ul>
<li><p>用于直接跳转到其他Action的结果类型</p>
</li>
<li><p>上面说个redirect是用于重定向到指定的视图资源的，那么这个是用于重定向到指定的Action类的，这个和chain类型非常相似，不过一个是重定向，一个是转发，当然其中的request中的内容会丢失。</p>
</li>
</ul>
</li>
<li><p>stream</p>
<ul>
<li>用于浏览器返回一个InputStream的结果类型（一般用于下载）</li>
</ul>
</li>
<li><p>velocity</p>
<ul>
<li>用于与Velocity整合的结果类型</li>
</ul>
</li>
<li><p>xslt</p>
<ul>
<li>用于与XML/XSTL整合的结果类型</li>
</ul>
</li>
<li><p>plainText</p>
<ul>
<li>用于显示某个页面的原始代码的结果类型</li>
</ul>
</li>
</ol>
<h3 id="局部结果"><a href="#局部结果" class="headerlink" title="局部结果"></a>局部结果</h3><ul>
<li>配置局部结果就是在作为<action>的子标签配置，就是上面的配置方式，但是这种局部配置只针对自己的父标签的action起作用。如下：</action></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- name指定了包的名称，extends指定继承的类，namespace指定url路径，这里使用/表示在根路径下就可以直接访问 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置全局结果"><a href="#配置全局结果" class="headerlink" title="配置全局结果"></a>配置全局结果</h3><ul>
<li>当我们需要一个视图可能这个package中action都需要，如果一个action中定义一个这样的result难免有些多余，现在我们使用<global-results>只需要在<package>元素内定义一次即可，一旦有返回值满足即可调用这个视图。比如我们定义一个错误处理的界面，因为这个处理视图是一样的，只需要配置全局result即可。</package></global-results></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">”Login”</span> <span class="attr">extends</span>=<span class="string">”struts-default”</span> <span class="attr">namespace</span>=<span class="string">”/user”</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">global-results</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">!—只要执行action的类返回error就会跳转到error.jsp--!</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”error”</span>&gt;</span>error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">”login”class</span>=<span class="string">”com.action.LoginAction”</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”success”</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>根据上面的配置，如果此时login这个action返回的字符串为error，那么此时的全局配置结果就起作用了，就会跳转到error.jsp页面</p>
</li>
<li><p>但是我们一个action处理错误的页面和特殊，虽然返回的是error，但是我就想跳转到其他的页面，那么可以在这个action的标签下重新定义一个结果，此时的局部结果就会覆盖全局结果</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;struts核心配置文件详解-result配置&quot;&gt;&lt;a href=&quot;#struts核心配置文件详解-result配置&quot; class=&quot;headerlink&quot; title=&quot;struts核心配置文件详解(result配置)&quot;&gt;&lt;/a&gt;struts核心配置文件详解(r
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>struts核心配置文件详解(action配置)</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/struts%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3-action%E9%85%8D%E7%BD%AE/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/struts核心配置文件详解-action配置/</id>
    <published>2018-03-30T23:21:10.000Z</published>
    <updated>2018-03-30T23:21:46.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struts核心配置文件详解-action配置"><a href="#struts核心配置文件详解-action配置" class="headerlink" title="struts核心配置文件详解(action配置)"></a>struts核心配置文件详解(action配置)</h1><h2 id="配置action"><a href="#配置action" class="headerlink" title="配置action"></a>配置action</h2><ul>
<li>前面我们已经说过Action类的三个实现方式，现在我们该说说Action类在struts.xml中的配置问题了</li>
</ul>
<h2 id="指定特定的方法执行-method"><a href="#指定特定的方法执行-method" class="headerlink" title="指定特定的方法执行(method)"></a>指定特定的方法执行(method)</h2><ul>
<li><p>我们知道ActionSupport类实际上相当与一个POJO类，这个和springmvc不同，struts2中的控制层Action类没有和实体类分离，其中可以有很多的方法，我们知道struts2默认调用的<code>execute</code>方法，但是如果我们想要指定其他的方法来处理请求呢，这时我们就需要使用<code>method</code>这个属性了</p>
</li>
<li><p>method: 是<code>&lt;action name=&quot;&quot; class=&quot;&quot; method=&quot;&quot;&gt;</code>标签中的属性,指定的是Action类中的方法名，如果不使用这属性，那么默认的值是<code>execute</code></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  使用method指定 SimpleAction中的login方法执行这个login.action这个URL --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置默认的处理类"><a href="#配置默认的处理类" class="headerlink" title="配置默认的处理类"></a>配置默认的处理类</h2><ul>
<li><p>上面我们讲解了method的使用方式，但是现在有一个问题，如果一个Action类中有多个处理方法，那么每次定义action都需要在其中指定相同的class属性，如果我们把这个class抽离出来，不用每一个action都写class属性。</p>
</li>
<li><p>只需要在<package>标签内部加上<code>&lt;default-class-ref class=&quot;&quot;&gt;</code>即可，那么这个<package>包下的所有的action没有设置class的是属性的都是使用的这个默认的处理类。</package></package></p>
</li>
<li><p>但是如果<code>&lt;action&gt;</code>标签中指定了<code>class</code>属性，那么会覆盖这个默认的处理类</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 定义这个包下的默认处理类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--  这个action使用的是另外一个处理类，此时的默认处理类对这个action没有作用，被覆盖掉--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"testaction"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.TestAction"</span> &gt;</div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 这个action没有指定class属性，那么就会使用默认处理类的exit方法 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simpleAction"</span> <span class="attr">method</span>=<span class="string">"exit"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--  使用method指定 SimpleAction中的login方法执行这个login.action这个URL，同样的没有指定class，使用默认处理类中的login方法 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span>  <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置默认的处理action"><a href="#配置默认的处理action" class="headerlink" title="配置默认的处理action"></a>配置默认的处理action</h2><p>-如果用户输入的的URL地址在这个<code>&lt;package&gt;</code>下，即是namespace符合，但是在其中没有相应的action的做出响应，可能是地址输错了，此时的我们需要使其跳转到error.jsp页面，给用户一个提示。那么我们这个时候就需要使用默认的action。</p>
<ul>
<li>默认的action的作用就是在用户输入地址没有响应，但是符合<code>&lt;package&gt;</code>下的一个<code>namespace</code>，那么可能是用户输错了，那么我们为了提高友好性，此时需要跳转到error.jsp页面，此时就需要一个默认的action类映射了</li>
</ul>
<p>-直接在<code>&lt;package&gt;</code> 定义即可，其中的<code>name</code>属性指定的package下的已经存在的action的名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 指定默认的action，如果在namespace路径下的找不到指定的action来映射请求，那么就会使用package下的默认的action来做出响应</span></div><div class="line">			name： 指定这个package下的action的名字，相当于已经定义好的action</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 定义这个包下的默认处理类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--  使用method指定 SimpleAction中的login方法执行这个login.action这个URL，同样的没有指定class，使用默认处理类中的login方法 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span>  <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;struts核心配置文件详解-action配置&quot;&gt;&lt;a href=&quot;#struts核心配置文件详解-action配置&quot; class=&quot;headerlink&quot; title=&quot;struts核心配置文件详解(action配置)&quot;&gt;&lt;/a&gt;struts核心配置文件详解(a
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2Action类实现</title>
    <link href="http://chenjiabing666.github.io/2018/03/30/Struts2Action%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://chenjiabing666.github.io/2018/03/30/Struts2Action类实现/</id>
    <published>2018-03-30T04:58:24.000Z</published>
    <updated>2018-03-30T05:00:20.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Action类的实现方式"><a href="#Action类的实现方式" class="headerlink" title="Action类的实现方式"></a>Action类的实现方式</h1><h2 id="Action类的实现方式-1"><a href="#Action类的实现方式-1" class="headerlink" title="Action类的实现方式"></a>Action类的实现方式</h2><ul>
<li><p>如果想要浏览器可以映射到其中的方法，那么必须返回一个String，使用这个值指示需要跳转的视图或者Action</p>
</li>
<li><p>Struts中的Action类实际上可以是一个POJO类，其中也是可以定义许多的方法，但是如果在struts.xml的配置文件中特指调用哪个方法的话，那么就会默认会调用名为execute的方法。后续将会讲如何调用类中其他的方法</p>
</li>
</ul>
<h2 id="普通的pojo类"><a href="#普通的pojo类" class="headerlink" title="普通的pojo类"></a>普通的pojo类</h2><ul>
<li>不需要实现或者继承任何类，只是一个普通的类</li>
<li>这个普通的类中有一个名为execute的方法，返回的一个字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"这是一个普通的pojo类"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml  配置跳转的视图</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置跳转到添加学生页面的action --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simpleAction"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="继承ActionSupport"><a href="#继承ActionSupport" class="headerlink" title="继承ActionSupport"></a>继承ActionSupport</h2><ul>
<li>在其中封装了execute方法，我们只需要覆盖即可</li>
<li><p>在这个类中还默认的封装了一些静态变量，比如：</p>
<ul>
<li><code>public static final String EOORO=”error”</code></li>
<li><code>public static final String INPUT=”input”</code></li>
<li><code>public static final String LOGIN=”login”</code></li>
<li><code>public static final String NONE=’none’</code></li>
<li><code>public static final String SUCCESS=”success”</code></li>
</ul>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionSupportAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"继承了ActionSupport"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts中配置<ul>
<li>同上</li>
</ul>
</li>
</ul>
<h2 id="实现Action类"><a href="#实现Action类" class="headerlink" title="实现Action类"></a>实现Action类</h2><ul>
<li>实现这个类，同样是还要实现其中的execute方法</li>
<li><p>其中也是和ActionSupport一样，封装了许多的字符串静态变量，我们自己调用即可。同上</p>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * action类： 这里实现的Action接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"cchjemko"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml配置 同上  只需要改变<action>中的name 和 class即可</action></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Action类的实现方式&quot;&gt;&lt;a href=&quot;#Action类的实现方式&quot; class=&quot;headerlink&quot; title=&quot;Action类的实现方式&quot;&gt;&lt;/a&gt;Action类的实现方式&lt;/h1&gt;&lt;h2 id=&quot;Action类的实现方式-1&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2核心配置文件(package)</title>
    <link href="http://chenjiabing666.github.io/2018/03/30/Struts2%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://chenjiabing666.github.io/2018/03/30/Struts2核心配置文件/</id>
    <published>2018-03-30T04:57:35.000Z</published>
    <updated>2018-03-30T23:20:28.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struts核心配置文件详解"><a href="#struts核心配置文件详解" class="headerlink" title="struts核心配置文件详解"></a>struts核心配置文件详解</h1><h2 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h2><ul>
<li><p>在核心配置文件中需要配置<code>&lt;package&gt;</code></p>
</li>
<li><p><package>元素可以把逻辑上相关的一组Action、Result、Intercepter等元素封装起来，形成一个独立的模块，package可以继承其他的package，也可以作为父包被其他的package继承</package></p>
</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><code>name</code><ul>
<li>这是一个必填的属性，指定包的名字，便于其他的包引用，因为其他的包可以继承这个包</li>
</ul>
</li>
</ul>
<ul>
<li><code>extends</code> ： 该属性是一个选择属性，表示继承其他的包，但是我们一般都会继承struts-default<ul>
<li>如果我们学到了处理json数据的时候，我们将会继承处理json的包</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>namespace</code> ：该属性是一个可选属性，指定该包的命名空间，默认的是“/”,以为一个配置文件中可能有相同名字的action，如果配置不同的namespace，那么就可以配置相同的action的名字</p>
<ul>
<li><p>namespace配置的是包的命名空间，同一个命名空间里面不能有同名的Action，当然不同的命名空间里面是可以有同名的Action的。类似于Java的包的功能，namespace可以有效的防止action重名的冲突，因为配置了namespace后，在访问action的时候就需要添加namespace来作为action的前缀。如果不配置namespace，表示是默认的namespace，那么访问的时候不需要添加namespace前缀。</p>
</li>
<li><p>比如有一个项目为Web1，在struts.xml的<code>&lt;package namespace = &quot;/student&quot;&gt;</code>,这个包的下面有一个<code>&lt;action name =&quot;add&quot;&gt;</code>,那么我们要访问这个action使用的url为：<br><code>http://localhost:8080/Web1/student/add.action</code></p>
</li>
</ul>
</li>
<li><p><code>abstract</code>：这是一个可选属性，表示这个包是否是抽象的，抽象包不能包含action定义</p>
</li>
</ul>
<h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!—指定了继承自strtus-default这个类，namespace指定了命名空间，那么当其中的action访问的时候要必须使用如下:http:</span>//<span class="attr">localhost:8080</span>/<span class="attr">web1</span>/<span class="attr">user</span>/*<span class="attr">--</span>!&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/user"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="引入另一个包中的action"><a href="#引入另一个包中的action" class="headerlink" title="引入另一个包中的action"></a>引入另一个包中的action</h3><ul>
<li><p>需求： 前面我们都是跳转到指定的视图，但是我们也是可以跳转到指定的action，但是这个要跳转的action和当前的action不是一个包中的。</p>
</li>
<li><p>此时我们就需要在当前包中引入另外一个包中的action，那么我们可以如下设置</p>
<ul>
<li><code>&lt;param name=&quot;namespace&quot;&gt;</code>中的值为另外一个包的namespace</li>
<li><code>&lt;param name=&quot;actionName&quot;&gt;</code>中的值为需要跳转到的action名字</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.action.LoginAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- namespace指定另外一个包中的namespace，actionName指定action的名字 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>regist<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Regist"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">class</span>=<span class="string">"com.action.RegistAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="包含另外一个包（include"><a href="#包含另外一个包（include" class="headerlink" title="包含另外一个包（include)"></a>包含另外一个包（include)</h3><ul>
<li><p>一个项目中的配置文件中可能需要定义很多个package和action，那么都写在一个xml文件中，不免有些混乱，因此需要使用include包含其他的配置文件，相当于jsp文件中的<code>&lt;jsp:include&gt;</code>,要注意的是配置文件都要放在项目的src目录下</p>
<ul>
<li><code>&lt;include file=”user.xml”&gt;&lt;/include&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="配置处理结果-result"><a href="#配置处理结果-result" class="headerlink" title="配置处理结果(result)"></a>配置处理结果(result)</h2><ul>
<li>我们在包中定义的<code>&lt;result name=&quot;&quot; type=&quot;&quot;&gt;value&lt;/result&gt;</code>,这个是用来根据action方法返回的字符串，跳转到指定的视图或者其他的action。<ul>
<li>name指定的是action方法返回的结果。</li>
<li>type 指定的是跳转的类型，默认的是dispatcher，相当于Servlet中的RequestDispatcher,地址栏中的url不会改变</li>
</ul>
</li>
</ul>
<ul>
<li>如果一个action方法中可能返回的值是多个，比如如果测试成功返回success，测试失败返回input，出现异常返回error，那么此时就需要用到多个<code>&lt;result&gt;</code>标签来定义这些返回值跳转的视图</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol>
<li><p>dispatcher</p>
<ul>
<li><p>表示采用的跳转方式为转发，这个和Servlet中的RequestDispathcher是一个原理，地址栏的url是不会改变的</p>
</li>
<li><p>dispatcher 结果类型是在Action与JSP页面之中的一种默认的跳转发方式，相当于之间的Servlet中的转发(RequestDispatcher)</p>
</li>
</ul>
</li>
<li><p>redirect</p>
<ul>
<li><p>用于跳转到其他的页面，但是这个地址栏的url是改变的</p>
</li>
<li><p>这个结果类型主要用于重定向到指定的视图资源，这个和dispatcher比较相似，但是这个地址改变了。相当于Servlet中的sendirect()这个方法。</p>
</li>
</ul>
</li>
<li><p>chain</p>
<ul>
<li><p>Action链式处理结果类型</p>
</li>
<li><p>很多时候，当一个Action处理完之后并不想转发到视图资源，而是想要跳转到指定的Action继续未完成的处理，这时就需要使用chain，使得两个Action成为链式处理。</p>
</li>
<li><p>范例如下： 其中<result>中的value要写成指定的<action>标签中的name值，如果不是一个包中的，还要引入另外一个包中的action，看上面的内容</action></result></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">class</span>=<span class="string">"com.action.regist"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.action.LoginAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>freemaker</p>
<ul>
<li>用于与FreeMaker整合的结果类型</li>
</ul>
</li>
<li><p>httpheader</p>
<ul>
<li>用于控制特殊的HTTP行为的结果类型</li>
</ul>
</li>
<li><p>redirectAction</p>
<ul>
<li><p>用于直接跳转到其他Action的结果类型</p>
</li>
<li><p>上面说个redirect是用于重定向到指定的视图资源的，那么这个是用于重定向到指定的Action类的，这个和chain类型非常相似，不过一个是重定向，一个是转发，当然其中的request中的内容会丢失。</p>
</li>
</ul>
</li>
<li><p>stream</p>
<ul>
<li>用于浏览器返回一个InputStream的结果类型（一般用于下载）</li>
</ul>
</li>
<li><p>velocity</p>
<ul>
<li>用于与Velocity整合的结果类型</li>
</ul>
</li>
<li><p>xslt</p>
<ul>
<li>用于与XML/XSTL整合的结果类型</li>
</ul>
</li>
<li><p>plainText</p>
<ul>
<li>用于显示某个页面的原始代码的结果类型</li>
</ul>
</li>
</ol>
<h3 id="局部结果"><a href="#局部结果" class="headerlink" title="局部结果"></a>局部结果</h3><ul>
<li>配置局部结果就是在作为<action>的子标签配置，就是上面的配置方式，但是这种局部配置只针对自己的父标签的action起作用。如下：</action></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- name指定了包的名称，extends指定继承的类，namespace指定url路径，这里使用/表示在根路径下就可以直接访问 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置全局结果"><a href="#配置全局结果" class="headerlink" title="配置全局结果"></a>配置全局结果</h3><ul>
<li>当我们需要一个视图可能这个package中action都需要，如果一个action中定义一个这样的result难免有些多余，现在我们使用<global-results>只需要在<package>元素内定义一次即可，一旦有返回值满足即可调用这个视图。比如我们定义一个错误处理的界面，因为这个处理视图是一样的，只需要配置全局result即可。</package></global-results></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">”Login”</span> <span class="attr">extends</span>=<span class="string">”struts-default”</span> <span class="attr">namespace</span>=<span class="string">”/user”</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">global-results</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">!—只要执行action的类返回error就会跳转到error.jsp--!</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”error”</span>&gt;</span>error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">”login”class</span>=<span class="string">”com.action.LoginAction”</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”success”</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>根据上面的配置，如果此时login这个action返回的字符串为error，那么此时的全局配置结果就起作用了，就会跳转到error.jsp页面</p>
</li>
<li><p>但是我们一个action处理错误的页面和特殊，虽然返回的是error，但是我就想跳转到其他的页面，那么可以在这个action的标签下重新定义一个结果，此时的局部结果就会覆盖全局结果</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;struts核心配置文件详解&quot;&gt;&lt;a href=&quot;#struts核心配置文件详解&quot; class=&quot;headerlink&quot; title=&quot;struts核心配置文件详解&quot;&gt;&lt;/a&gt;struts核心配置文件详解&lt;/h1&gt;&lt;h2 id=&quot;包-package&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2入门</title>
    <link href="http://chenjiabing666.github.io/2018/03/30/Struts2%E5%85%A5%E9%97%A8/"/>
    <id>http://chenjiabing666.github.io/2018/03/30/Struts2入门/</id>
    <published>2018-03-30T04:57:22.000Z</published>
    <updated>2018-03-30T04:59:07.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门操作"><a href="#入门操作" class="headerlink" title="入门操作"></a>入门操作</h1><p>##导入jar 包</p>
<ul>
<li>到官网下载相应的jar包</li>
<li>导入前阶段必须的jar包</li>
</ul>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul>
<li>在eclipse中创建一个web项目</li>
<li>在webContent下WEB-INF/lib下导入需要的jar包即可</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/jar%E5%8C%85_struts.png" alt="jar包示意图"></p>
<h2 id="配置核心过滤器-StrutsPrepareAndExecuteFilter-（web-xml"><a href="#配置核心过滤器-StrutsPrepareAndExecuteFilter-（web-xml" class="headerlink" title="配置核心过滤器 StrutsPrepareAndExecuteFilter  （web.xml)"></a>配置核心过滤器 StrutsPrepareAndExecuteFilter  （web.xml)</h2><ul>
<li><p>核心过滤器相当于springmvc中的前端控制器的功能，都是用来分发请求的</p>
</li>
<li><p>这里的核心过滤器默认分发的请求是以<code>.action</code>结尾的请求，因此我们可以使用这个默认的，但是我们也可以自己配置自己的，下面我配置的是所有的请求都分发</p>
</li>
<li><p>在<code>web.xml</code>中配置</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  配置struts2的核心过滤器 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- struts2中默认的访问路径是以.action结尾的路径才会分发，</span></div><div class="line">   因此我们这里需要设置即使不是.action结尾的也能分发请求给对应的action --&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建action类"><a href="#创建action类" class="headerlink" title="创建action类"></a>创建action类</h2><ul>
<li>定义action类有两种方法，一种是实现<code>Action</code>接口，一种是继承<code>ActionSupport</code>,这个在第二章会详细讲解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.Action;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * action类： 这里实现的Action接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"cchjemko"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建核心配置文件"><a href="#创建核心配置文件" class="headerlink" title="创建核心配置文件"></a>创建核心配置文件</h2><ul>
<li><p>文件名为： <code>struts.xml</code></p>
</li>
<li><p>存放的路径： 在<code>src</code>目录下，或者自己创建的源文件夹的根目录下</p>
</li>
<li><p>struts.xml 内容</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.1//EN" "http://struts.apache.org/dtds/struts-2.1.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--定义package ，name是这个package的名字，唯一标识</span></div><div class="line">		extends: 该属性是一个选择属性，表示继承其他的包，但是我们一般都会继承struts-default</div><div class="line">		namespace：该属性是一个可选属性，指定该包的命名空间，默认的是“/”,以为一个配置文件中可能有相同名字的action，如果配置不同的namespace，那么就可以配置相同的action的名字，这个和调用执行请求的url息息相关</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置测试的action类，其中name是调用的别名，class是Action类的全路径 类名+包名--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"testaction"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.TestAction"</span> &gt;</span></div><div class="line">		<span class="comment">&lt;!--name是Action类中返回的值，/jsp/success.jsp是对应的跳转视图，这里如果返回success，那么跳转到/jsp/success.jsp这个视图--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><ul>
<li><p>前面的核心配置文件中定义了跳转的视图为 /jsp/success.jsp</p>
</li>
<li><p>在<code>webContent</code>下创建一个jsp文件夹，在其中创建一个<code>success.jsp</code>文件</p>
</li>
</ul>
<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><ul>
<li><p>开启tomcat，在浏览器张输入：<code>http://localhost:8080/Struts2/testaction.action</code></p>
</li>
<li><p>执行成功之后，我们将会看到调用上面的链接，页面就会跳转到success.jsp页面</p>
</li>
<li><p>但是我们看到地址依然没有改变，因为struts默认的跳转是以转发的方式，不是重定向，后面我们会讲到怎样设置跳转方式</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;入门操作&quot;&gt;&lt;a href=&quot;#入门操作&quot; class=&quot;headerlink&quot; title=&quot;入门操作&quot;&gt;&lt;/a&gt;入门操作&lt;/h1&gt;&lt;p&gt;##导入jar 包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;到官网下载相应的jar包&lt;/li&gt;
&lt;li&gt;导入前阶段必须的jar包&lt;/li&gt;
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>JDBC干货二</title>
    <link href="http://chenjiabing666.github.io/2018/03/30/JDBC%E5%B9%B2%E8%B4%A7%E4%BA%8C/"/>
    <id>http://chenjiabing666.github.io/2018/03/30/JDBC干货二/</id>
    <published>2018-03-30T04:54:52.000Z</published>
    <updated>2018-03-30T04:56:30.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h1><h2 id="Properties属性配置对象"><a href="#Properties属性配置对象" class="headerlink" title="Properties属性配置对象"></a>Properties属性配置对象</h2><h3 id="什么是properties"><a href="#什么是properties" class="headerlink" title="什么是properties"></a>什么是properties</h3><ul>
<li>程序猿可以把工程中出现的某些数据以配置文件的形式保存起来，就是处理 <code>*.properties</code>文件的对象，在properties文件中是以键值对形式保存的数据</li>
</ul>
<h3 id="把数据库中的信息存放到该文件中"><a href="#把数据库中的信息存放到该文件中" class="headerlink" title="把数据库中的信息存放到该文件中"></a>把数据库中的信息存放到该文件中</h3><ul>
<li>其中存放的是driver ,url , username,password</li>
</ul>
<h3 id="为什么要保存到该配置文件中"><a href="#为什么要保存到该配置文件中" class="headerlink" title="为什么要保存到该配置文件中"></a>为什么要保存到该配置文件中</h3><ul>
<li>因为以后的工作中有更换数据库的需求，此时如果写在java类中修改比较麻烦，所以需要把这些数据保存到配置文件中</li>
</ul>
<h3 id="存放数据"><a href="#存放数据" class="headerlink" title="存放数据"></a>存放数据</h3><ul>
<li>在src的目录下创建一个<code>jdbc.properties</code>配置文件</li>
<li>将数据库的信息保存到其中(键值对的形式)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">url=jdbc:mysql://localhost:3306/jdbc</div><div class="line">username=root</div><div class="line">password=root</div></pre></td></tr></table></figure>
<h3 id="存放数据注意事项"><a href="#存放数据注意事项" class="headerlink" title="存放数据注意事项"></a>存放数据注意事项</h3><ul>
<li>数据是以键值的形式存放的（key-value）</li>
<li>value的值不能带有引号，并且后面不能有空格</li>
</ul>
<h3 id="读取Properties配置文件中的信息"><a href="#读取Properties配置文件中的信息" class="headerlink" title="读取Properties配置文件中的信息"></a>读取Properties配置文件中的信息</h3><ul>
<li>既然我们将数据库中的配置信息存放到配置文件中，我们当然需要将其读取到java代码中使用</li>
<li>前提：这个配置文件在src目录下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPro</span><span class="params">()</span></span>&#123;</div><div class="line">	Properties properties=<span class="keyword">new</span> Properties();  <span class="comment">//创建Properties对象</span></div><div class="line">	<span class="comment">//使用类加载器生成输入流（读取）  前提是该配置文件必须在src目录下</span></div><div class="line">	InputStream ips=TestProperties.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		properties.load(ips);</div><div class="line">		String s1=properties.getProperty(<span class="string">"url"</span>);   <span class="comment">//直接读取，以键值</span></div><div class="line">		System.out.println(s1);</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定义此时的工具类"><a href="#定义此时的工具类" class="headerlink" title="定义此时的工具类"></a>定义此时的工具类</h2><ul>
<li><p>我们引用了配置文件，那么我们的工具类就需要改变了，在工具类需要读取配置文件中数据库信息</p>
</li>
<li><p>我们知道数据库的配置信息是不变的，因此我们不需要每次连接都加载一次，所以我们可以将读取数据库配置信息的代码放在静态语句块中，那么只有当类加载的时候才会加载一次</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 数据库封装类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driver;   <span class="comment">//驱动</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;  <span class="comment">//url</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String username;  <span class="comment">//用户名</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;  <span class="comment">//密码</span></div><div class="line"></div><div class="line">	<span class="comment">//静态语句块,只在使用类加载的时候加载一次，因为其中的数据不用每次都加载，所以只需要加载一次</span></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		Properties properties=<span class="keyword">new</span> Properties();  <span class="comment">//创建对象</span></div><div class="line">		<span class="comment">//使用类加载器读取文件输入流</span></div><div class="line">		InputStream ips=DBUtils.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			properties.load(ips);</div><div class="line">			<span class="comment">//读取属性值</span></div><div class="line">			driver=properties.getProperty(<span class="string">"driver"</span>);</div><div class="line">			url=properties.getProperty(<span class="string">"url"</span>);</div><div class="line">			username=properties.getProperty(<span class="string">"username"</span>);</div><div class="line">			password=properties.getProperty(<span class="string">"password"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取连接对象</div><div class="line">	 * <span class="doctag">@param</span> user  数据库用户名</div><div class="line">	 * <span class="doctag">@param</span> password 密码</div><div class="line">	 * <span class="doctag">@param</span> database : 数据库名称</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 注册驱动</span></div><div class="line">		<span class="comment">// 链接数据库</span></div><div class="line">		Connection connection = DriverManager.getConnection(</div><div class="line">				url, username, password);</div><div class="line">		<span class="keyword">return</span> connection;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 关闭数据库资源</div><div class="line">	 * <span class="doctag">@param</span> connection 连接对象</div><div class="line">	 * <span class="doctag">@param</span> statement Statement对象</div><div class="line">	 * <span class="doctag">@param</span> resultSet 结果集</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement,</span></span></div><div class="line">			ResultSet resultSet) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</div><div class="line">				resultSet.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</div><div class="line">				statement.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</div><div class="line">				connection.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			exception.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="什么是数据库连接池-DBCP-DatabaseConnection-Pool"><a href="#什么是数据库连接池-DBCP-DatabaseConnection-Pool" class="headerlink" title="什么是数据库连接池(DBCP DatabaseConnection Pool)"></a>什么是数据库连接池(DBCP DatabaseConnection Pool)</h3><ul>
<li>一套管理数据库连接的api</li>
</ul>
<h3 id="为什么用"><a href="#为什么用" class="headerlink" title="为什么用"></a>为什么用</h3><ul>
<li>如果没有数据库连接池的话，每次和数据库进行交互都需要建立连接和关闭连接，如果有1万次交互就有一万次建立和关闭连接，频繁开关连接非常消耗资源。使用数据库连接池，可以设置一个初始连接数量，如果有连接需求会和连接池要，连接池中有空闲连接则用空闲的，如果没有此时会检测是否是最大数量，如果是则等待，如果不是则创建新的连接，每个连接使用完之后会归还到连接池中。等待连接池的，如果有归还的连接会直接得到此连接进行操作</li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li>使用数据库连接池，可以设置一个初始连接数量，如果有连接需求会和连接池要，连接池中有空闲连接则用空闲的，如果没有此时会检测是否是最大数量，如果是则等待，如果不是则创建新的连接，每个连接使用完之后会归还到连接池中。等待连接池的，如果有归还的连接会直接得到此</li>
</ul>
<h3 id="如何使用数据库连接池"><a href="#如何使用数据库连接池" class="headerlink" title="如何使用数据库连接池"></a>如何使用数据库连接池</h3><ol>
<li><p>下载jar包</p>
<ul>
<li>去maven私服中，找到dbcp-1.4版本的</li>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>初次使用（连接数据库）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建数据源对象</span></div><div class="line">		BasicDataSource dataSource=<span class="keyword">new</span> BasicDataSource();</div><div class="line"></div><div class="line">		<span class="comment">//设置连接信息  driver url username password</span></div><div class="line">		dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">		dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>);</div><div class="line">		dataSource.setUsername(<span class="string">"root"</span>);</div><div class="line">		dataSource.setPassword(<span class="string">"root"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//设置连接池策略信息</span></div><div class="line">		dataSource.setInitialSize(<span class="number">3</span>);  <span class="comment">//设置初始连接数量</span></div><div class="line">		dataSource.setMaxActive(<span class="number">5</span>);  <span class="comment">//设置最大连接数量</span></div><div class="line"></div><div class="line">		<span class="comment">//获取连接</span></div><div class="line">		Connection connection=dataSource.getConnection();</div><div class="line"></div><div class="line">		System.out.println(connection);</div></pre></td></tr></table></figure>
<h2 id="JDBC工具类终极版"><a href="#JDBC工具类终极版" class="headerlink" title="JDBC工具类终极版"></a>JDBC工具类终极版</h2><ul>
<li>使用数据库连接池</li>
<li>使用了properties配置文件的形式存储数据库配置信息</li>
</ul>
<h3 id="jdbc-properties-key-value-键值对形式存储"><a href="#jdbc-properties-key-value-键值对形式存储" class="headerlink" title="jdbc.properties(key-value  键值对形式存储)"></a>jdbc.properties(key-value  键值对形式存储)</h3><ul>
<li>value最后不能有空格</li>
<li>value的值不能用引号</li>
<li>因为使用的是类加载器加载的，因此这个文件的位置应该在src目录下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">url=jdbc:mysql://localhost:3306/jdbc</div><div class="line">username=root</div><div class="line">password=root</div><div class="line">initSize=3</div><div class="line">maxSize=5</div></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>数据库的配置信息不是经常改变的，因此不用每次使用都重新加载，只需要加载一次(静态语句块)</p>
</li>
<li><p>数据源和数据库连接池的配置信息(初始连接数量，最大连接数量) 只需要加载一次（静态语句块)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 数据库封装类 ： 终极版</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driver;   <span class="comment">//驱动</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;  <span class="comment">//url</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String username;  <span class="comment">//用户名</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;  <span class="comment">//密码</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String maxSize;  <span class="comment">//最大连接数量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String initSize;  <span class="comment">//初始化连接数量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BasicDataSource dataSource;  <span class="comment">//数据源</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">//静态语句块,只在使用类加载的时候加载一次，因为其中的数据是不会经常改变的，所以只需要加载一次</span></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		Properties properties=<span class="keyword">new</span> Properties();  <span class="comment">//创建对象</span></div><div class="line">		<span class="comment">//使用类加载器读取文件输入流</span></div><div class="line">		InputStream ips=DBUtils.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			properties.load(ips);</div><div class="line">			<span class="comment">//读取属性值</span></div><div class="line">			driver=properties.getProperty(<span class="string">"driver"</span>);</div><div class="line">			url=properties.getProperty(<span class="string">"url"</span>);</div><div class="line">			username=properties.getProperty(<span class="string">"username"</span>);</div><div class="line">			password=properties.getProperty(<span class="string">"password"</span>);</div><div class="line">			initSize=properties.getProperty(<span class="string">"initSize"</span>);</div><div class="line">			maxSize=properties.getProperty(<span class="string">"maxSize"</span>);</div><div class="line"></div><div class="line">			dataSource=<span class="keyword">new</span> BasicDataSource();   <span class="comment">//获取数据源</span></div><div class="line">			<span class="comment">//设置数据源的属性-----数据库的配置信息</span></div><div class="line">			dataSource.setDriverClassName(driver);</div><div class="line">			dataSource.setUrl(url);</div><div class="line">			dataSource.setUsername(username);</div><div class="line">			dataSource.setPassword(password);</div><div class="line">			dataSource.setInitialSize(Integer.parseInt(initSize));</div><div class="line">			dataSource.setMaxActive(Integer.parseInt(maxSize));</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"配置文件jdbc.properties读取失败！！！"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取数据库连接</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Connection connection=dataSource.getConnection();</div><div class="line">		<span class="keyword">return</span> connection;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 关闭数据库资源</div><div class="line">	 * <span class="doctag">@param</span> connection 连接对象</div><div class="line">	 * <span class="doctag">@param</span> statement Statement对象</div><div class="line">	 * <span class="doctag">@param</span> resultSet 结果集</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement,</span></span></div><div class="line">			ResultSet resultSet) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</div><div class="line">				resultSet.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</div><div class="line">				statement.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</div><div class="line">				connection.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			exception.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> com.jsnu.db.DBUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDBUtils</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">		Connection connection = <span class="keyword">null</span>;</div><div class="line">		Statement statement = <span class="keyword">null</span>;</div><div class="line">		ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection = DBUtils.getConnection();  <span class="comment">//获取连接</span></div><div class="line"></div><div class="line">			statement = connection.createStatement();  <span class="comment">//创建Statement语句对象</span></div><div class="line"></div><div class="line">			String select_sql = <span class="string">"select * from t"</span>;</div><div class="line"></div><div class="line">			resultSet = statement.executeQuery(select_sql);  <span class="comment">//执行查询方法</span></div><div class="line"></div><div class="line">			<span class="keyword">while</span> (resultSet.next()) &#123;</div><div class="line">				<span class="keyword">int</span> id = resultSet.getInt(<span class="string">"id"</span>);   <span class="comment">//获取属性</span></div><div class="line">				String name = resultSet.getString(<span class="string">"name"</span>);</div><div class="line">				<span class="keyword">int</span> age = resultSet.getInt(<span class="string">"age"</span>);</div><div class="line">				System.out.println(id + <span class="string">"---"</span> + age + <span class="string">" ----"</span> + name);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			DBUtils.close(connection, statement, resultSet);  <span class="comment">//关闭资源</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试等待"><a href="#测试等待" class="headerlink" title="测试等待"></a>测试等待</h3><ul>
<li><p>我们知道连接池有最大的连接限制，只要连接的数量需求超过最大值，那么我们就需要等待，直到连接池中有空闲的连接。</p>
</li>
<li><p>上面我们设置的最大连接数量为5，此时我们利用多线程来测试等待的过程</p>
</li>
<li><p>connection.close 就是归还连接，因为连接关闭了</p>
</li>
<li><p>线程类：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDButils2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Connection connection=DBUtils.getConnection();</div><div class="line">			System.out.println(connection);  <span class="comment">//获取连接</span></div><div class="line">			System.out.println(<span class="keyword">this</span>.getName()+ <span class="string">"： 正在运行"</span>);</div><div class="line">			Thread.sleep(<span class="number">5000</span>);   <span class="comment">//睡眠5s</span></div><div class="line">			connection.close();  <span class="comment">//关闭连接，相当于释放连接，归还到连接池中</span></div><div class="line">			System.out.println(<span class="keyword">this</span>.getName()+<span class="string">":连接已经归还"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>main方法中测试<ul>
<li>在main方法中创建了六个线程，那么最大的连接数量是5，此时肯定有一个线程在等待获取连接，直到前面的线程归还连接才会执行</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">6</span>;i++)&#123;</div><div class="line">			TestDButils2 testDButils2=<span class="keyword">new</span> TestDButils2();</div><div class="line">			testDButils2.start();   <span class="comment">//线程启动</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h2><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul>
<li>代码结构更加清晰，比拼接字符串出错概率要低</li>
<li><p>执行效率要比Statement高（效果不是太明显）因为使Statement每次执行sql都需要把sql编译成执行计划，而PrepareStatement只需要创建时转化一次，之后只需要修改里面的值即可，所以效率会高</p>
</li>
<li><p>有预编译可避免sql注入，预编译的时候把sql语句的逻辑已经定死，不能再向其中添加新的逻辑</p>
</li>
</ul>
<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><ul>
<li>创建用户表<ul>
<li>drop table user if exists;   //有则先删除</li>
<li>create table user(id int primary key auto_increment,username varchar(10),password varchar(20));</li>
<li>insert into user(username,password) values(‘libai’,’admin’),(‘zhaosi’,’123456’);</li>
</ul>
</li>
</ul>
<ul>
<li>用户登录<ul>
<li>根据用户名和密码查询人数，如果 &gt;0 表示有这个人，如果 &lt;0 登录失败</li>
<li>select count(*) from user where username=”libai” and password=”admin”;</li>
<li>我们只需要使用<code>select count(*) from user where username=&#39;xds&#39; and password=&#39;&#39; or &#39;1&#39;=&#39;1&#39;</code> 那么会直接登录成功，无论用户名和密码是多少。这种是使用Statement才会生效，因为其中的sql是拼接的。我们只需要输入密码为  <code>&#39; or &#39;1&#39;=1</code>即可sql注入</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day02&quot;&gt;&lt;a href=&quot;#Day02&quot; class=&quot;headerlink&quot; title=&quot;Day02&quot;&gt;&lt;/a&gt;Day02&lt;/h1&gt;&lt;h2 id=&quot;Properties属性配置对象&quot;&gt;&lt;a href=&quot;#Properties属性配置对象&quot; class=&quot;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JDBC" scheme="http://chenjiabing666.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>JDBC干货一</title>
    <link href="http://chenjiabing666.github.io/2018/03/30/JDBC%E5%B9%B2%E8%B4%A7%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2018/03/30/JDBC干货一/</id>
    <published>2018-03-30T04:54:41.000Z</published>
    <updated>2018-03-30T04:55:34.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h2><ul>
<li>Java Database Connectivity</li>
<li>JDBC是java中一套和数据库进行交互的API(应用程序编程接口)</li>
</ul>
<h2 id="为什么使用JDBC"><a href="#为什么使用JDBC" class="headerlink" title="为什么使用JDBC"></a>为什么使用JDBC</h2><ul>
<li>因为java程序猿需要连接各种数据库（oracle，mysql，db2等）为了避免java程序猿每一种数据库都需要学习一遍，sun公司提出一个JDBC接口，各个数据库厂商去针对此接口写实现类（数据库驱动），这样的话java程序猿连接数据库只需要掌握JDBC接口的调用就可以操作各种数据库</li>
</ul>
<h2 id="eclipse配置maven"><a href="#eclipse配置maven" class="headerlink" title="eclipse配置maven"></a>eclipse配置maven</h2><ol>
<li>本机安装maven</li>
<li><p>修改远程仓库地址</p>
<ul>
<li>maven的配置文件settings中修改   <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">        &lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></div><div class="line">	    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">proxies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">servers</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servers</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>Tedu Maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--&lt;url&gt;http://maven.tedu.cn/nexus/content/groups/public&lt;/url&gt;--&gt;</span></div><div class="line">			 <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在eclispe中配置  </p>
<ul>
<li>window —- &gt; perferences —- &gt; Maven — &gt; User Settings  —- &gt; 在Global Settings中选择你的maven配置文件settings即可</li>
<li>OK</li>
</ul>
</li>
<li><p>新建项目</p>
<ul>
<li>New — &gt; Maven Project  — &gt; Create Simple Project </li>
<li>第一次创建可能需要很长的时间</li>
</ul>
</li>
<li><p>在pom.xml中写上依赖</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.tedu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JDBCMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="如何使用JDBC"><a href="#如何使用JDBC" class="headerlink" title="如何使用JDBC"></a>如何使用JDBC</h2><ul>
<li>创建maven工程</li>
<li>下载mysql相关jar包</li>
<li>登录阿里私服： maven.aliyun.cn</li>
</ul>
<h2 id="执行方法-Statement"><a href="#执行方法-Statement" class="headerlink" title="执行方法(Statement)"></a>执行方法(Statement)</h2><ul>
<li><code>execute(sql)</code>  执行DDL  create alter</li>
<li><code>executeUpdate(sql)</code> 执行DML insert  update  delete</li>
<li><code>executeQuery(sql)</code>  执行select语句</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">      Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);   <span class="comment">//注册驱动</span></div><div class="line"><span class="comment">//链接数据库</span></div><div class="line">Connection connection=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line"><span class="comment">//创建Statement，执行sql语句的对象</span></div><div class="line">Statement statement =connection.createStatement();</div><div class="line"></div><div class="line">String sql_create=<span class="string">"create table if not exists t(id int primary key auto_increment,age int ,name varchar(10))"</span>;</div><div class="line"></div><div class="line">String sql_insert=<span class="string">"insert into t(age,name) values(22,'jack'),(33,'tom')"</span>;</div><div class="line"></div><div class="line">String sql_sselect=<span class="string">"select * from t"</span>;</div><div class="line"><span class="comment">//执行create 语句</span></div><div class="line">Boolean flag=statement.execute(sql_create);</div><div class="line">System.out.println(flag);</div><div class="line"><span class="comment">//执行insert语句</span></div><div class="line"><span class="keyword">int</span> row=statement.executeUpdate(sql_insert);</div><div class="line">System.out.println(row);</div><div class="line"><span class="comment">//执行select</span></div><div class="line">ResultSet resultSet=statement.executeQuery(sql_sselect);</div><div class="line"><span class="keyword">while</span>(resultSet.next())&#123;</div><div class="line">	<span class="keyword">int</span> id=resultSet.getInt(<span class="string">"id"</span>);</div><div class="line">	<span class="keyword">int</span> age=resultSet.getInt(<span class="string">"age"</span>);</div><div class="line">	String name = resultSet.getString(<span class="string">"name"</span>);</div><div class="line">	System.out.println(id+<span class="string">"----"</span>+age+<span class="string">"----"</span>+name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ResultSet-查询得到结果集"><a href="#ResultSet-查询得到结果集" class="headerlink" title="ResultSet(查询得到结果集)"></a>ResultSet(查询得到结果集)</h2><ul>
<li><p>代表查询语句得到的结果集(executeQuery)</p>
</li>
<li><p>见到resultSet 就用while</p>
</li>
<li><p>next() 移动游标  有下一条返回true，没有返回false</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">      Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);  <span class="comment">//加载驱动</span></div><div class="line">      </div><div class="line">      <span class="comment">// 链接数据库</span></div><div class="line">Connection connection=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">Statement statement =connection.createStatement();   <span class="comment">//获取执行sql语句对象</span></div><div class="line">      String sql_sselect=<span class="string">"select * from t"</span>;   <span class="comment">//创建sql语句</span></div><div class="line">      ResultSet resultSet=statement.executeQuery(sql_sselect);  <span class="comment">//获取结果集</span></div><div class="line"></div><div class="line"><span class="keyword">while</span>(resultSet.next())&#123;</div><div class="line">	<span class="keyword">int</span> id=resultSet.getInt(<span class="string">"id"</span>);</div><div class="line">	<span class="keyword">int</span> age=resultSet.getInt(<span class="string">"age"</span>);</div><div class="line">	String name = resultSet.getString(<span class="string">"name"</span>);</div><div class="line">	System.out.println(id+<span class="string">"----"</span>+age+<span class="string">"----"</span>+name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关闭资源-close"><a href="#关闭资源-close" class="headerlink" title="关闭资源(close)"></a>关闭资源(close)</h2><ul>
<li><p>关闭Connection</p>
<ul>
<li>如果sql执行完，继续持有连接没有意义，会造成服务器压力过大，所以需要关闭</li>
</ul>
</li>
<li><p>关闭Statement</p>
<ul>
<li>会占用内存的资源，所以用完就关闭</li>
</ul>
</li>
<li><p>关闭ResultSet</p>
<ul>
<li>因为ResultSet对象中包含查询结果的数据，会占用内存空间</li>
</ul>
</li>
</ul>
<h2 id="关闭顺序"><a href="#关闭顺序" class="headerlink" title="关闭顺序"></a>关闭顺序</h2><ul>
<li>ResultSet , Statement , Connection</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testException</span><span class="params">()</span> </span>&#123;</div><div class="line">		Connection connection = <span class="keyword">null</span>;  <span class="comment">//申明Connection为null</span></div><div class="line">		Statement statement = <span class="keyword">null</span>;   <span class="comment">// 申明 Statement为null</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 注册驱动</span></div><div class="line">			<span class="comment">// 链接数据库</span></div><div class="line">			connection = DriverManager.getConnection(</div><div class="line">					<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">			<span class="comment">// 创建Statement，执行sql语句的对象</span></div><div class="line">			statement = connection.createStatement();</div><div class="line">			String sql_insert = <span class="string">"insert into t(age,name) values(22,'marry'),(33,'Alice')"</span>;</div><div class="line">			<span class="keyword">int</span> row=statement.executeUpdate(sql_insert);</div><div class="line">			System.out.println(row);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			System.out.println(<span class="string">"出异常"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					statement.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					connection.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="JDBC封装"><a href="#JDBC封装" class="headerlink" title="JDBC封装"></a>JDBC封装</h2><ul>
<li>目的：把频繁出现的代码封装起来，起到代码复用的作用，从而提高开发效率</li>
</ul>
<ol>
<li>创建DBUtils类(数据库工具类)<ol>
<li>封装建立数据连接</li>
<li>封装关闭资源</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 数据库封装类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取连接对象</div><div class="line">	 * <span class="doctag">@param</span> user  数据库用户名</div><div class="line">	 * <span class="doctag">@param</span> password 密码</div><div class="line">	 * <span class="doctag">@param</span> database : 数据库名称</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String user, String password,</span></span></div><div class="line">			String database) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 注册驱动</span></div><div class="line">		<span class="comment">// 链接数据库</span></div><div class="line">		Connection connection = DriverManager.getConnection(</div><div class="line">				<span class="string">"jdbc:mysql://localhost:3306/"</span> + database, user, password);</div><div class="line">		<span class="keyword">return</span> connection;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 关闭数据库资源</div><div class="line">	 * <span class="doctag">@param</span> connection 连接对象</div><div class="line">	 * <span class="doctag">@param</span> statement Statement对象</div><div class="line">	 * <span class="doctag">@param</span> resultSet 结果集</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement,</span></span></div><div class="line">			ResultSet resultSet) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</div><div class="line">				resultSet.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</div><div class="line">				statement.close();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</div><div class="line">				connection.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">			exception.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   <span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUntils</span><span class="params">()</span></span>&#123;</div><div class="line">	Connection connection=<span class="keyword">null</span>;</div><div class="line">	Statement statement=<span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet=<span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		 connection=DBUtils.getConnection(<span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"jdbc"</span>);  <span class="comment">//获取连接</span></div><div class="line">		 statement=connection.createStatement();</div><div class="line">		 <span class="comment">//插入数据</span></div><div class="line">		 <span class="keyword">int</span> row = statement.executeUpdate(<span class="string">"insert into t(age,name) values(22,'陈加兵'),(33,'Jackson')"</span>);</div><div class="line">		 System.out.println(row);</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JDBC&quot;&gt;&lt;a href=&quot;#JDBC&quot; class=&quot;headerlink&quot; title=&quot;JDBC&quot;&gt;&lt;/a&gt;JDBC&lt;/h1&gt;&lt;h2 id=&quot;什么是JDBC&quot;&gt;&lt;a href=&quot;#什么是JDBC&quot; class=&quot;headerlink&quot; title=&quot;什么是
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JDBC" scheme="http://chenjiabing666.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作六</title>
    <link href="http://chenjiabing666.github.io/2018/03/28/SQL%E6%93%8D%E4%BD%9C%E5%85%AD/"/>
    <id>http://chenjiabing666.github.io/2018/03/28/SQL操作六/</id>
    <published>2018-03-28T04:17:56.000Z</published>
    <updated>2018-03-28T04:18:41.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day06"><a href="#Day06" class="headerlink" title="Day06"></a>Day06</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h3><ul>
<li><p><strong>什么是视图</strong>： 在数据库中存在多种对象，表和视图都是数据库中的对象，创建视图时视图名称不能和表名相同，实际上，视图就代表一个sql查询语句，也可以理解成视图是一张虚拟的表，但是虚拟表中的数据会<em>随着原表数据的改变而改变</em></p>
</li>
<li><p><strong>为什么使用视图</strong>： </p>
<ul>
<li>因为有些数据的查询需要书写大量的sql语句，每次书写比较麻烦，使用视图可起到重用sql语句的作用</li>
<li>可以通过视图隐藏敏感信息，比如隐藏员工工资的字段，那么我们可以创建一个视图，其中不包含工资这个字段</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>创建视图的格式</strong>： create view 视图名 as  子查询</p>
<ul>
<li><code>create view view_emp_10 as(select * from emp where deptno=10);</code>  创建一个视图view_emp_10  （简单视图）</li>
<li>create view view_dep_20 as(select * from EMP where deptno=20 and sal&lt;3000 ); 创建emp表部门是20，工资小于3000的视图</li>
<li>create view view_emp_sum_max(select max(sal),sum(sal),min(sal) from EMP);  复杂视图，只能查看，不能删除修改插入</li>
</ul>
</li>
<li><p><strong>如何查看视图</strong>： 查询的方式和表的查询方式一样(select)</p>
</li>
</ul>
<h3 id="视图分类"><a href="#视图分类" class="headerlink" title="视图分类"></a>视图分类</h3><ul>
<li>简单视图 ： 创建视图的子查询中 不包含去重，函数，聚合，关联查询的视图成为简单视图<ul>
<li>简单视图可以实现增删改查</li>
</ul>
</li>
<li>复杂视图 ： 和简单视图相反   <ul>
<li>复杂视图是能查询</li>
</ul>
</li>
</ul>
<h3 id="视图数据污染"><a href="#视图数据污染" class="headerlink" title="视图数据污染"></a>视图数据污染</h3><ul>
<li><strong>什么是数据污染</strong>： 在视图中插入一条数据，在视图中不显示，但是在原表中显示的数据，称为数据污染</li>
</ul>
<ul>
<li>在视图中只要进行insert操作时才会造成数据污染，因为update和delete只能操作视图中存在的数据</li>
</ul>
<ul>
<li>如果一旦执行插入语句，但是插入的数据不符合创建视图时的子查询条件，那么就会插入视图中失败，但是会插入到原表中，这个是我们不需要的，这个就叫做视图数据污染。</li>
</ul>
<h3 id="往视图中插入数据，删除数据，修改数据"><a href="#往视图中插入数据，删除数据，修改数据" class="headerlink" title="往视图中插入数据，删除数据，修改数据"></a>往视图中插入数据，删除数据，修改数据</h3><ul>
<li><p>简单视图： </p>
<ul>
<li><strong>删除数据</strong>：  如果将视图中的数据删除了，那么原表中的数据也会删除掉</li>
<li><p><strong>插入数据</strong>：  如果插入的数据符合创建视图的子查询的条件，那么就会将数据插入进视图和原表中，如果不符合创建视图时的子查询的条件，那么数据只会插入到原表中，不会插入进视图。</p>
<ul>
<li>比如上面创建的view_emp_10视图，子查询条件为deptno=10,如果插入视图的数据的的deptno字段为10，那么就会显示在视图和表中，如果不为10，那么只会显示在表中。</li>
</ul>
</li>
<li><p><strong>更新数据</strong>： 如果更新后的数据不符合创建视图时子查询的条件的话，那么这些数据就会移除视图，但是原表中还会显示，只是不在视图中显示。 如果满足子查询的条件，那么就会成功更新在视图中，原表和视图的数据都会更新并且都会显示</p>
<ul>
<li>比如上面创建的view_emp_10的视图，如果我们将视图中的一条数据的deptno改为11，那么这条数据将不会显示在视图中，只会显示在原表中。</li>
</ul>
</li>
<li><p><strong>总结</strong>：</p>
<ul>
<li>更新和删除都是对视图中已经存在的数据进行操作，如果存在就会直接删除和更新，并且原表中的数据也会同时被删除和更新，但是如果执行更新操作，更新后的条件不符合创建视图时子查询的条件，那么这些数据将不会显示在视图中，但是在表中还是存在的</li>
<li>插入数据有可能会造成数据污染</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="避免视图数据污染-with-check-option"><a href="#避免视图数据污染-with-check-option" class="headerlink" title="避免视图数据污染(with check option)"></a>避免视图数据污染(with check option)</h3><ul>
<li>我们在创建的视图的时候加上<code>with check option</code> 即可<ul>
<li><code>create view v_emp_30 as(select * from EMP where deptno=30) with check option;</code></li>
<li>现在我们在往v_emp_30的视图中插入数据，其中字段deptno不等于30，那么就会报错，因为不符合创建视图时的子查询条件</li>
<li>但是如果我们没有使用<code>with check option</code>，那么我们就会插入成功，虽然不会在视图中显示，但是插入到原表中了，造成了视图数据污染</li>
</ul>
</li>
</ul>
<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><ul>
<li><p>我们创建一个视图</p>
<ul>
<li><code>create view view_emp_10 as(select * from emp where deptno=10);</code></li>
</ul>
</li>
<li><p>现在我们需要为子查询加上一个条件 工资大于3000的，即是 创建一张视图，里面数据是部门号为10，工资大于3000的全部员工信息，那么我们就需要在原有的view_emp_10的基础上修改</p>
<ul>
<li><code>create  or replace view view_emp_10 as(select * from EMP where deptno=10 and sal&gt;3000);</code>直接在create后面加上<code>or replace</code>即可，有就替换</li>
</ul>
</li>
</ul>
<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><ul>
<li>格式 ：drop view 视图名称  </li>
<li><p>drop view_emp_10;  删除视图view_emp_10，如果存在就删除，不存在就报错</p>
</li>
<li><p>加上关键字  <code>if exists</code> 如果存在就删除，不存在也不报错</p>
<ul>
<li><code>drop view if exists view_emp_10;</code></li>
</ul>
</li>
<li><p><strong>如果创建视图的时候对视图中的字段使用了别名，那么以后对视图的操作只能使用别名来操作</strong></p>
<ul>
<li><code>create view view_1 as(select ename name from emp where deptno=10);</code>  这里面的子查询将字段ename起了别名，那么我们在以后操作的时候只能使用别名对这个字段操作</li>
</ul>
</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li><p>创建视图显示每个部门对应的员工的名字</p>
<ul>
<li>`create view view_emp_dept as(select d.dname,e.ename from EMP e join Dept d on d.deptno=e.deptno);</li>
</ul>
</li>
<li><p>修改上面的视图在上面题的前提下只显示工资在3000以内的</p>
<ul>
<li><code>create or replace  view view_emp_dept as(select d.dname,e.ename from EMP e join Dept d on d.deptno=e.deptno where e.sal&lt;3000);</code></li>
</ul>
</li>
<li><p>删除上面的视图</p>
<ul>
<li><code>drop view if exists v_emp_dept;</code></li>
</ul>
</li>
</ul>
<h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><ul>
<li><p><strong>什么是索引</strong>： </p>
<ul>
<li>索引是用来提高查询速度的技术，类似于一个目录，查询数据时会从索引中对数据进行定位，然后直接找到数据所在的位置</li>
</ul>
</li>
<li><p><strong>为什么使用索引</strong> ： </p>
<ul>
<li>因为不使用索引的话，查询数据会按照磁盘块一块一块的去查，如果数据量很大，效率很低</li>
</ul>
</li>
<li><p>索引分为聚集索引和非聚集索引</p>
<ul>
<li>在mysql中数据库会为主键自动创建聚集索引，聚集索引中数据是有序保存</li>
</ul>
</li>
</ul>
<ul>
<li><p>索引内部实现原理 ：</p>
<ul>
<li>B+tree </li>
</ul>
</li>
<li><p>数据库中创建索引的过程是数据库内部自己控制，然后使用索引的过程也是数据库自己操作的，不需要程序猿干涉</p>
</li>
</ul>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><ul>
<li><p>格式： <code>create index 索引名 on 表名(字段名([长度]));</code></p>
</li>
<li><p>创建索引之前先查询title=’100’的数据，看看查询时间</p>
<ul>
<li>select * from item2 where title=’100’;</li>
</ul>
</li>
<li><p>创建title索引</p>
<ul>
<li>create index index_title on item2(title);</li>
</ul>
</li>
<li><p>再次查询，查看时间 </p>
<ul>
<li>select * from item2 where title=’100’;</li>
</ul>
</li>
</ul>
<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><ul>
<li>格式: <code>show index from 表名</code></li>
<li>其中包含主键的索引，这个是自动创建的</li>
</ul>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><ul>
<li>格式：<code>drop index 索引名 on 表名</code></li>
<li>drop index index_title on item2;</li>
</ul>
<h3 id="索引是越多越好吗？有索引就一定好吗？"><a href="#索引是越多越好吗？有索引就一定好吗？" class="headerlink" title="索引是越多越好吗？有索引就一定好吗？"></a>索引是越多越好吗？有索引就一定好吗？</h3><ul>
<li>因为索引会占用磁盘空间，所以创建索引需谨慎，只创建查询需求的索引</li>
<li>索引要建立在大量的数据的表中，如果数据量不够大，可能会降低查询效率</li>
</ul>
<h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><ul>
<li><p>创建索引的时候指定多个字段，此时如果查询数据正好过滤条件为这多个字段的话，可以降低磁盘块的访问，从而提高查询效率</p>
</li>
<li><p>创建复合索引: create index index_title_price on item2(title,price);</p>
</li>
<li><p>执行查询语句</p>
<ul>
<li><code>select * from item2 where title=&#39;100&#39; and price &lt;100000;</code> 可以看出查询效率很高</li>
</ul>
</li>
</ul>
<h3 id="创建表的时候直接创建索引"><a href="#创建表的时候直接创建索引" class="headerlink" title="创建表的时候直接创建索引"></a>创建表的时候直接创建索引</h3><ul>
<li><code>create table t_index(id int,age int ,index index index_age(age));</code></li>
<li>直接在字段后面写入  <code>index 名字(字段)</code></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>索引会占磁盘空间，不是越多越好</li>
<li>数据量小的表不要创建索引</li>
<li>对于经常出现在<code>where</code> ，<code>order by</code>，<code>distinct</code> 后面的字段创建索引 ，效果更好</li>
<li>不要在频繁修改的表中创建索引</li>
</ul>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul>
<li>什么是约束： 约束就是对表字段的数据进行限制的规则</li>
</ul>
<h3 id="唯一约束-unique"><a href="#唯一约束-unique" class="headerlink" title="唯一约束 unique"></a>唯一约束 unique</h3><ul>
<li>添加唯一约束的字段，这个字段的值不能重复,否则报错</li>
<li><code>crate table t(id int ,age int unique);</code></li>
</ul>
<h3 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束 (primary key)"></a>主键约束 (primary key)</h3><ul>
<li><p>创建表时添加主键约束</p>
<ul>
<li><code>create table t(id int primary key auto_increment,age int);</code></li>
</ul>
</li>
<li><p>创建表之后添加主键 (primary key(字段名) )</p>
<ul>
<li><code>alter table t add primary key(id);</code></li>
</ul>
</li>
<li><p>删除主键约束</p>
<ul>
<li>格式： alter table 表名 drop primary key </li>
<li><code>alter table t drop primary key;</code></li>
</ul>
</li>
</ul>
<h3 id="自增约束-auto-increment"><a href="#自增约束-auto-increment" class="headerlink" title="自增约束(auto_increment)"></a>自增约束(auto_increment)</h3><ul>
<li>当字段赋的值为null时，字段会自动增长</li>
<li>如果删除了某条数据，自增数值不会减少</li>
<li><p>自增的基础是根据字段的最大值来自增的</p>
</li>
<li><p><code>create table t(id int primary key auto_increment,age int);</code></p>
</li>
<li><p>如果使用delete清空表(<code>delete from t</code>) ,那么自增的值不会从头开始</p>
</li>
<li><p>如果使用<code>truncate table t</code> 的方式清空表，那么自增的值会从头开始，则从1开始</p>
</li>
</ul>
<h3 id="外键约束（foreign-key）"><a href="#外键约束（foreign-key）" class="headerlink" title="外键约束（foreign key）"></a>外键约束（foreign key）</h3><ul>
<li>外键约束是保证一个表或者两个表之间数据一致性和完整性的约束</li>
<li>工作中除非特殊情况，一般不使用外键约束，通过代码逻辑进行限制，避免测试时不必要的麻烦</li>
<li>外键的值通常是另外一张表的主键</li>
<li>外键可以重复，可以为null，但不能是另外一张表中不存在的数据<br>-</li>
<li>使用外键约束的<strong>条件</strong>：<ol>
<li>必须保证两张表使用相同的引擎(engine)</li>
<li>引擎必须是innodb,myisam不支持外键约束</li>
</ol>
</li>
<li><p>外键和关联字段必须是相同的数据类型，比如一张表的主键id的外键，那么这个外键一定要是int类型</p>
</li>
<li><p><strong>外键所对应的关联字段如果不是主键，会自动为该字段创建索引</strong></p>
</li>
</ul>
<h4 id="创建外键约束"><a href="#创建外键约束" class="headerlink" title="创建外键约束"></a>创建外键约束</h4><ul>
<li><p>格式 ：</p>
<ul>
<li><code>create table t(id int primary key auto_increment,deptid int,constraint 约束名 foregin key(deptid) references 关联的表名(关联表的字段名))</code></li>
</ul>
</li>
<li><p>创建两张表 t_emp 和 t_dept</p>
<ul>
<li>先创建部门表  <code>create table t_dept(id int primary key auto_increment,name varchar(10));</code></li>
<li>创建t_emp  <code>create table t_emp(id int primary key auto_increment,name varchar(10),deptid int,constraint fk_dept foreign key(deptid) references t_dept(id));</code></li>
</ul>
</li>
<li><p>测试：</p>
<ul>
<li>如果插入数据到t_emp中的时候，其中的deptid的值在t_dept中的id不存在的话，那么插入失败，因为两个是外键关联的</li>
<li>如果想要删除t_dept的数据，但是在t_emp中的还有关联的数据(即是deptid)，那么删除失败，只有将t_emp中关联的数据字段deptid设置为null，此时在删除才会成功</li>
</ul>
</li>
</ul>
<h4 id="外键总结"><a href="#外键总结" class="headerlink" title="外键总结"></a>外键总结</h4><ul>
<li>保证一个表或两个表之间的数据一致性和完整性，工作不怎用，外键的值是关联表的主键，值可以是null可以重复，不能是不存在的数据，使用外键必须两张表使用innodb引擎，数据类型要一致，会自动添加索引</li>
</ul>
<h3 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束(not null)"></a>非空约束(not null)</h3><ul>
<li>该字段的值不能为null，否则报错</li>
</ul>
<h3 id="默认约束-default"><a href="#默认约束-default" class="headerlink" title="默认约束(default)"></a>默认约束(default)</h3><ul>
<li>给字段设置默认值</li>
<li><code>create table t(id int primary key auto_increment,age int not null default 0);</code>  设置字段age设置默认值为0 ，如果插入数据的时候没有插入age的值，那么默认赋值为0</li>
</ul>
<h3 id="check-约束"><a href="#check-约束" class="headerlink" title="check 约束"></a>check 约束</h3><ul>
<li>在mysql中不生效，但是语法不报错</li>
<li><code>create table t_check(id int,age int,check(age&gt;10));</code></li>
</ul>
<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul>
<li>事务是数据库执行sql语句的工作单元或者最小单元，写在事务里面的sql要么同时成功，要么同时失败</li>
</ul>
<h3 id="事务的ACID性质-重要，面试常考"><a href="#事务的ACID性质-重要，面试常考" class="headerlink" title="事务的ACID性质(重要，面试常考)"></a>事务的ACID性质(重要，面试常考)</h3><ul>
<li>Automicity ： 原子性 ： 最小，不能拆分</li>
<li>Consistency： 一致性  ： 要么同时成功，要么同时失败</li>
<li>Isolation：   隔离性  ： 事务和事务之间互不影响</li>
<li>Durablity ：  持久性 ： 事务执行完之后数据持久保存到数据库中</li>
</ul>
<h3 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h3><ul>
<li>show variables lile “%autocommit%”</li>
<li>set autocommit=0/1</li>
<li>开启 begin</li>
<li>commit  </li>
<li>rollback</li>
<li>savepoint  s1</li>
<li>rollback to s1</li>
</ul>
<h3 id="事务案例"><a href="#事务案例" class="headerlink" title="事务案例"></a>事务案例</h3><ul>
<li>转账</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day06&quot;&gt;&lt;a href=&quot;#Day06&quot; class=&quot;headerlink&quot; title=&quot;Day06&quot;&gt;&lt;/a&gt;Day06&lt;/h1&gt;&lt;h2 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作五</title>
    <link href="http://chenjiabing666.github.io/2018/03/28/SQL%E6%93%8D%E4%BD%9C%E4%BA%94/"/>
    <id>http://chenjiabing666.github.io/2018/03/28/SQL操作五/</id>
    <published>2018-03-27T22:59:18.000Z</published>
    <updated>2018-03-28T04:17:26.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day05"><a href="#Day05" class="headerlink" title="Day05"></a>Day05</h1><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h2><h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h3><blockquote>
<p>当前表的数据和当前表里面的数据有关联关系</p>
</blockquote>
<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><blockquote>
<p>学生和老师的关系就是多对多的关系<br>一个学生可以被多个老师教，一个老师可以教多个学生</p>
</blockquote>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><blockquote>
<p>创建教师表 teacher(id,name)<br>创建学生表 stu(id,name)<br>创建第三张关系表t_s(sid,t_id)</p>
</blockquote>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li><p>查询学生小明的所有老师</p>
<ul>
<li>通过小明查询出小明的id</li>
<li>得到小明的id 在关系表中查询出对应的老师的id</li>
<li>通过关系表中的老师的id再和教师表关联查询查出所有的老师</li>
<li><code>select name from teacher where id in ( select t_s.tid from stu join t_s on stu.id=t_s.sid where stu.name=&#39;小明&#39;);</code>  子查询方式，但是子查询中使用了内连接，也可以使用等值连接</li>
<li><code>select t_s.tid from stu join t_s on stu.id=t_s.sid  join teacher t on t.id=tid where stu.name=&#39;小明&#39;;</code> 使用内连接的方式查询，多个join连接，where条件语句应该放在最后一个join的on的后面</li>
</ul>
</li>
<li><p>查询所有老师对应的所有学生0</p>
<ul>
<li><code>select t.name t_name,stu.name s_name from stu join t_s on stu.id=t_s.sid  join teacher t on t.id=tid;</code></li>
</ul>
</li>
<li><p>查询唐僧的所有学生</p>
<ul>
<li><code>select t.name t_name,stu.name s_name from stu join t_s on stu.id=t_s.sid  join teacher t on t.id=tid where t.name=&#39;唐僧&#39;;</code></li>
</ul>
</li>
</ul>
<h2 id="如何让两张表建立关系"><a href="#如何让两张表建立关系" class="headerlink" title="如何让两张表建立关系"></a>如何让两张表建立关系</h2><ul>
<li><p>自关联</p>
<ul>
<li>自关联是在一张表中，这张表中要有一个字段记录上级的主键</li>
</ul>
</li>
<li><p>一对一： </p>
<ul>
<li>需要在从表中有个字段表示主表的主键值   （外键）</li>
</ul>
</li>
<li><p>一对多</p>
<ul>
<li>部门和员工为例，需要在多的一端通过字段记录另外一张的表的主键 （外键）</li>
</ul>
</li>
<li><p>多对多</p>
<ul>
<li>需要准备一张关系表，表中保存两张表的主键值（第三张表） （外键）</li>
</ul>
</li>
</ul>
<h2 id="连接方式和关联关系的区别"><a href="#连接方式和关联关系的区别" class="headerlink" title="连接方式和关联关系的区别"></a>连接方式和关联关系的区别</h2><ul>
<li>连接方式： 包括内连接，等值连接，左/右外连接 是指查询两张表时使用的查询方式</li>
<li>关联关系： 一对一，一对多，多对多  是指两张表之间存在的逻辑关系</li>
</ul>
<h2 id="数据库设计值权限管理"><a href="#数据库设计值权限管理" class="headerlink" title="数据库设计值权限管理"></a>数据库设计值权限管理</h2><h3 id="什么是权限管理"><a href="#什么是权限管理" class="headerlink" title="什么是权限管理"></a>什么是权限管理</h3><ul>
<li>不同用户登录网站后可能会有不同的权限，实现此功能的过程称为权限管理</li>
</ul>
<h3 id="权限管理表的实现"><a href="#权限管理表的实现" class="headerlink" title="权限管理表的实现"></a>权限管理表的实现</h3><ul>
<li>总共需要5张表<ul>
<li>用户表 角色表  权限表  用户和角色关系表   角色和权限的关系表</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day05&quot;&gt;&lt;a href=&quot;#Day05&quot; class=&quot;headerlink&quot; title=&quot;Day05&quot;&gt;&lt;/a&gt;Day05&lt;/h1&gt;&lt;h2 id=&quot;关联关系&quot;&gt;&lt;a href=&quot;#关联关系&quot; class=&quot;headerlink&quot; title=&quot;关联关系&quot;
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作四</title>
    <link href="http://chenjiabing666.github.io/2018/03/26/SQL%E6%93%8D%E4%BD%9C%E5%9B%9B/"/>
    <id>http://chenjiabing666.github.io/2018/03/26/SQL操作四/</id>
    <published>2018-03-26T11:14:40.000Z</published>
    <updated>2018-03-27T08:42:20.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day-04"><a href="#Day-04" class="headerlink" title="Day 04"></a>Day 04</h1><h2 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h2><h3 id="商城建表语句"><a href="#商城建表语句" class="headerlink" title="商城建表语句"></a>商城建表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_item`</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_item`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品id'</span>,</div><div class="line">  <span class="string">`category_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类id'</span>,</div><div class="line">  <span class="string">`item_type`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品系列'</span>,</div><div class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品标题'</span>,</div><div class="line">  <span class="string">`sell_point`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品卖点'</span>,</div><div class="line">  <span class="string">`price`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品单价'</span>,</div><div class="line">  <span class="string">`num`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'库存数量'</span>,</div><div class="line">  <span class="string">`barcode`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'条形码'</span>,</div><div class="line">  <span class="string">`image`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'图片路径'</span>,</div><div class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'商品状态  1：上架   2：下架   3：删除'</span>,</div><div class="line">  <span class="string">`priority`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'显示优先级'</span>,</div><div class="line">  <span class="string">`created_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</div><div class="line">  <span class="string">`modified_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</div><div class="line">  <span class="string">`created_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人'</span>,</div><div class="line">  <span class="string">`modified_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_item`</span> <span class="keyword">VALUES</span> </div><div class="line">(<span class="string">'10000000'</span>,<span class="number">238</span>,<span class="string">'牛皮纸记事本'</span>,<span class="string">'广博(GuangBo)10本装40张A5牛皮纸记事本子日记本办公软抄本GBR0731'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">23</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/00GuangBo1040A5GBR0731/collect.png'</span>,<span class="number">1</span>,<span class="number">53</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000001'</span>,<span class="number">238</span>,<span class="string">'牛皮纸记事本'</span>,<span class="string">'广博(GuangBo)10本装40张A5牛皮纸记事本子日记本办公软抄本GBR0731'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">23</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/00GuangBo1040A5GBR0731/collect.png'</span>,<span class="number">1</span>,<span class="number">62</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000002'</span>,<span class="number">238</span>,<span class="string">'皮面日程本'</span>,<span class="string">'广博(GuangBo)皮面日程本子 计划记事本效率手册米色FB60322'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">46</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/001GuangBo)FB60322/collect.png'</span>,<span class="number">1</span>,<span class="number">49</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000021'</span>,<span class="number">238</span>,<span class="string">'皮面日程本'</span>,<span class="string">'广博(GuangBo)皮面日程本子 计划记事本效率手册蓝色FB60321'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">22</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/001GuangBo)FB60322/collect.png'</span>,<span class="number">1</span>,<span class="number">73</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000003'</span>,<span class="number">238</span>,<span class="string">'记事本日记本笔记本'</span>,<span class="string">'广博(GuangBo)16K115页线圈记事本子日记本文具笔记本图案随机'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">13</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/01GuangBo16K115FB60506/collect.png'</span>,<span class="number">1</span>,<span class="number">58</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000004'</span>,<span class="number">241</span>,<span class="string">'计算器'</span>,<span class="string">'得力（deli）1548A商务办公桌面计算器 太阳能双电源'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">58</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/002calculator1548A/collect.png'</span>,<span class="number">1</span>,<span class="number">42</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000005'</span>,<span class="number">241</span>,<span class="string">'圆珠笔'</span>,<span class="string">'施耐德（Schneider） K15 经典款圆珠笔 (5支混色装)'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">29</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/03SchneiderK15/collect.png'</span>,<span class="number">1</span>,<span class="number">36</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000006'</span>,<span class="number">236</span>,<span class="string">'票据网格拉链袋'</span>,<span class="string">'三木(SUNWOOD) C4523 票据网格拉链袋/文件袋 12个装 颜色随机'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">28</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/04_SUNWOODC452312/collect.png'</span>,<span class="number">1</span>,<span class="number">53</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000007'</span>,<span class="number">163</span>,<span class="string">'燃 7000经典版'</span>,<span class="string">'戴尔Dell 燃700金色'</span>,<span class="string">'下单赠12000毫安移动电源'</span>,<span class="number">32999</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000gold/collect.png'</span>,<span class="number">1</span>,<span class="number">59</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000008'</span>,<span class="number">163</span>,<span class="string">'燃 7000经典版'</span>,<span class="string">'戴尔Dell 燃700R1605银色'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4549</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000R1605Ssilvery/collect.png'</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000009'</span>,<span class="number">163</span>,<span class="string">'燃 7000学习版'</span>,<span class="string">'戴尔Dell 燃700金色'</span>,<span class="string">'下单赠12000毫安移动电源'</span>,<span class="number">39929</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000gold/collect.png'</span>,<span class="number">1</span>,<span class="number">84</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000010'</span>,<span class="number">163</span>,<span class="string">'燃 7000学习版'</span>,<span class="string">'戴尔Dell 燃700R1605银色'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">5559</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000R1605Ssilvery/collect.png'</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000011'</span>,<span class="number">163</span>,<span class="string">'燃 7000高配版'</span>,<span class="string">'戴尔Dell 燃700金色'</span>,<span class="string">'下单赠12000毫安移动电源'</span>,<span class="number">3994</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000gold/collect.png'</span>,<span class="number">1</span>,<span class="number">56</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000012'</span>,<span class="number">163</span>,<span class="string">'燃 7000高配版'</span>,<span class="string">'戴尔Dell 燃700R1605银色'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">6559</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/11DELLran7000R1605Ssilvery/collect.png'</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000013'</span>,<span class="number">238</span>,<span class="string">'A5优品商务笔记本'</span>,<span class="string">'齐心（COMIX）C5902 A5优品商务笔记本子记事本日记本122张'</span>,<span class="string">'下单即送10400毫安移动电源！再赠手机魔法盒！'</span>,<span class="number">41</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/02COMIXC5902A5122blue/collect.png'</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000014'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4600</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12(DELL)XPS13gold/collect.png'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000015'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4601</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12DELLXPS13-silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">73</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000016'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4602</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12(DELL)XPS13gold/collect.png'</span>,<span class="number">1</span>,<span class="number">64</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000017'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4604</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12DELLXPS13-silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000018'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4605</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12(DELL)XPS13gold/collect.png'</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000019'</span>,<span class="number">163</span>,<span class="string">'XPS13-9360'</span>,<span class="string">'戴尔(DELL)XPS13-9360-R1609 13.3'</span>,<span class="string">'仅上海，广州，沈阳仓有货！预购从速！'</span>,<span class="number">4899</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/12DELLXPS13-silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000020'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310低配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5119</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">50</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000021'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310低配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5129</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">48</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000022'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310经典版'</span>,<span class="string">'联想（Lenovo）IdeaPad310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5119</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">90</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000023'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310经典版'</span>,<span class="string">'联想（Lenovo）IdeaPad310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5129</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000024'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310高配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5119</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">60</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000025'</span>,<span class="number">163</span>,<span class="string">'IdeaPad310高配版'</span>,<span class="string">'联想（Lenovo）IdeaPad310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">5129</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/13LenovoIdeaPad310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">80</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000026'</span>,<span class="number">163</span>,<span class="string">'YOGA710'</span>,<span class="string">'联想（Lenovo）YOGA710 14英寸触控笔记本（i7-7500U 8G 256GSSD 2G独显 全高清IPS 360°翻转 正版office）金'</span>,<span class="string">'【0元献礼】好评过万，销量传奇！经典蓝光电视，独有自然光技术专利，过大年带最好的回家！【0元白条试用，1001个拜年计划】'</span>,<span class="number">59999</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/14LenovoYOGA710 _gold/collect.png'</span>,<span class="number">1</span>,<span class="number">19</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000027'</span>,<span class="number">163</span>,<span class="string">'YOGA710'</span>,<span class="string">'联想（Lenovo）YOGA710 14英寸触控笔记本（i7-7500U 8G 256GSSD 2G独显 全高清IPS 360°翻转 正版office）银'</span>,<span class="string">'【0元献礼】好评过万，销量传奇！经典蓝光电视，独有自然光技术专利，过大年带最好的回家！【0元白条试用，1001个拜年计划】'</span>,<span class="number">59999</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/14LenovoYOGA710 _silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">55</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000028'</span>,<span class="number">163</span>,<span class="string">'310低配版'</span>,<span class="string">'联想（Lenovo）小新310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4939</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">19</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000029'</span>,<span class="number">163</span>,<span class="string">'310低配版'</span>,<span class="string">'联想（Lenovo）小新310低配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4839</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">27</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000030'</span>,<span class="number">163</span>,<span class="string">'310经典版'</span>,<span class="string">'联想（Lenovo）小新310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4739</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">78</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000031'</span>,<span class="number">163</span>,<span class="string">'310经典版'</span>,<span class="string">'联想（Lenovo）小新310经典版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4639</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000032'</span>,<span class="number">163</span>,<span class="string">'310高配版'</span>,<span class="string">'联想（Lenovo）小新310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4539</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_black/collect.png'</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000033'</span>,<span class="number">163</span>,<span class="string">'310高配版'</span>,<span class="string">'联想（Lenovo）小新310高配版'</span>,<span class="string">'清仓！仅北京，武汉仓有货！'</span>,<span class="number">4439</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/15Lenovo_xiaoxin_310_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">18</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000034'</span>,<span class="number">163</span>,<span class="string">'YOGA900'</span>,<span class="string">'联想（Lenovo）YOGA900绿色'</span>,<span class="string">'青春的活力 清新漂亮高端大气上档次'</span>,<span class="number">5200</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/16LenovoYOGA900green/collect.png'</span>,<span class="number">1</span>,<span class="number">63</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000035'</span>,<span class="number">163</span>,<span class="string">'YOGA900'</span>,<span class="string">'联想（Lenovo）YOGA900粉色'</span>,<span class="string">'青春的活力 清新漂亮高端大气上档次'</span>,<span class="number">5200</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/16LenovoYOGA900pink/collect.png'</span>,<span class="number">1</span>,<span class="number">62</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000036'</span>,<span class="number">163</span>,<span class="string">'YOGA900'</span>,<span class="string">'联想（Lenovo）YOGA900红色'</span>,<span class="string">'青春的活力 清新漂亮高端大气上档次'</span>,<span class="number">5200</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/16LenovoYOGA900red/collect.png'</span>,<span class="number">1</span>,<span class="number">21</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000037'</span>,<span class="number">163</span>,<span class="string">'小新13旗舰版'</span>,<span class="string">'联想(Lenovo)小新Air13 Pro 13.3英寸14.8mm超轻薄笔记本电脑'</span>,<span class="string">'青春的活力 青年专属'</span>,<span class="number">6439</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/17Lenovo)xiaoxinAir13Pro_gold/collect.png'</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000038'</span>,<span class="number">163</span>,<span class="string">'小新13旗舰版'</span>,<span class="string">'联想(Lenovo)小新Air13 Pro 13.3英寸14.8mm超轻薄笔记本电脑'</span>,<span class="string">'青春的活力 青年专属'</span>,<span class="number">6439</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/17Lenovo)xiaoxinAir13Pro_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000039'</span>,<span class="number">163</span>,<span class="string">'XPS15'</span>,<span class="string">'戴尔(DELL) XPS15 银色'</span>,<span class="string">'限时特价！好评过万条优秀产品！'</span>,<span class="number">3333</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/18(DELL)XPS15_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">37</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000391'</span>,<span class="number">163</span>,<span class="string">'XPS15'</span>,<span class="string">'戴尔(DELL) XPS15 金色'</span>,<span class="string">'限时特价！好评过万条优秀产品！'</span>,<span class="number">3333</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/18(DELL)XPS15_silvery/collect.png'</span>,<span class="number">1</span>,<span class="number">81</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000040'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 1TB IPS Win10)触控银'</span>,<span class="number">4443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">35</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000401'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 1TB IPS Win10)触控白'</span>,<span class="number">4443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">86</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000402'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 512GB IPS Win10)触控银'</span>,<span class="number">6443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">84</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000403'</span>,<span class="number">163</span>,<span class="string">'DELL 15MF Pro'</span>,<span class="string">'戴尔(DELL)魔方15MF Pro-R2505TSS灵越'</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 512GB IPS Win10)触控白'</span>,<span class="number">6443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/19DELL15MF Pro/collect.png'</span>,<span class="number">1</span>,<span class="number">63</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000041'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 1TGB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">61</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000411'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i5-7200U 8GB 256GB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">60</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000412'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 1TB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000413'</span>,<span class="number">163</span>,<span class="string">'DELL XPS15-9550'</span>,<span class="string">'戴尔(DELL) XPS15升级版 '</span>,<span class="string">'15.6英寸二合一翻转笔记本电脑 (i7-7200U 8GB 256GB IPS Win10)触控'</span>,<span class="number">8443</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/20DellXPS15-9550/collect.png'</span>,<span class="number">1</span>,<span class="number">83</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000042'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i5 6代 红色'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">4399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">99</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000421'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i7 6700 红'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">6399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">74</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000422'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i5 6代 黄'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">4399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000424'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i5 6代 蓝'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">4399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">87</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'100000425'</span>,<span class="number">163</span>,<span class="string">'ThinkPad New s1'</span>,<span class="string">'联想ThinkPad New S2（01CD） i7 6700 蓝'</span>,<span class="string">'经典回顾！超值特惠！'</span>,<span class="number">6399</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/21ThinkPad_New_S1/collect.png'</span>,<span class="number">1</span>,<span class="number">59</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000043'</span>,<span class="number">917</span>,<span class="string">'书包 bag'</span>,<span class="string">'乐尚书包 电脑包 bag黑色'</span>,<span class="string">'给你满载而归的喜悦！'</span>,<span class="number">89</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/22_LEXON_LNE6025B06T/collect.png'</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="string">'10000044'</span>,<span class="number">917</span>,<span class="string">'书包 bag'</span>,<span class="string">'乐尚书包 电脑包 bag粉色'</span>,<span class="string">'给你满载而归的喜悦！'</span>,<span class="number">89</span>,<span class="number">99999</span>,<span class="literal">NULL</span>,<span class="string">'/images/portal/22_LEXON_LNE6025B06T/collect.png'</span>,<span class="number">1</span>,<span class="number">62</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'2017-10-25 15:08:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_item_category`</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_item_category`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</div><div class="line">  <span class="string">`parent_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'父分类id'</span>,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'名称'</span>,</div><div class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'状态   1：正常   2：删除'</span>,</div><div class="line">  <span class="string">`sort_order`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'排序号'</span>,</div><div class="line">  <span class="string">`is_parent`</span> tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否是父分类   1：是  0：否'</span>,</div><div class="line">  <span class="string">`created_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</div><div class="line">  <span class="string">`modified_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</div><div class="line">  <span class="string">`created_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建人'</span>,</div><div class="line">  <span class="string">`modified_user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1183</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_item_category`</span> <span class="keyword">VALUES</span> </div><div class="line">(<span class="number">163</span>,<span class="number">162</span>,<span class="string">'笔记本'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">236</span>,<span class="number">229</span>,<span class="string">'文件管理'</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">238</span>,<span class="number">229</span>,<span class="string">'本册/便签'</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">241</span>,<span class="number">229</span>,<span class="string">'笔类'</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>),</div><div class="line">(<span class="number">917</span>,<span class="number">913</span>,<span class="string">'双肩包'</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'2017-10-25 15:00:55'</span>,<span class="string">'admin'</span>,<span class="string">'admin'</span>);</div></pre></td></tr></table></figure>
<h3 id="员工建表语句"><a href="#员工建表语句" class="headerlink" title="员工建表语句"></a>员工建表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> EMP(</div><div class="line">EMPNO <span class="built_in">int</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</div><div class="line">ENAME <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">JOB <span class="built_in">varchar</span>(<span class="number">9</span>),</div><div class="line">MGR <span class="built_in">int</span>(<span class="number">4</span>),</div><div class="line">HIREdate <span class="built_in">date</span>,</div><div class="line">SAL <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>),</div><div class="line">COMM <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>),</div><div class="line">DEPTNO <span class="built_in">int</span>(<span class="number">4</span>)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> Dept(</div><div class="line">DEPTNO <span class="built_in">int</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</div><div class="line">DNAME <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</div><div class="line">LOC <span class="built_in">varchar</span>(<span class="number">13</span>)</div><div class="line">);</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">10</span>,<span class="string">'ACCOUNTING'</span>,<span class="string">'NEW YORK'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">20</span>,<span class="string">'RESEARCH'</span>,<span class="string">'DALLAS'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">30</span>,<span class="string">'SALES'</span>,<span class="string">'CHICAGO'</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Dept <span class="keyword">VALUES</span> (<span class="number">40</span>,<span class="string">'OPERATIONS'</span>,<span class="string">'BOSTON'</span>);</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DEPT;</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7369</span>,<span class="string">'SMITH'</span>,<span class="string">'CLERK'</span>,<span class="number">7902</span>,<span class="keyword">str_to_date</span>(<span class="string">'17-12-1980'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">800</span>,<span class="literal">null</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7499</span>,<span class="string">'ALLEN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'20-2-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1600</span>,<span class="number">300</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7521</span>,<span class="string">'WARD'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'22-2-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1250</span>,<span class="number">500</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7566</span>,<span class="string">'JONES'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="keyword">str_to_date</span>(<span class="string">'2-4-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">2975</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7654</span>,<span class="string">'MARTIN'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'28-9-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1250</span>,<span class="number">1400</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7698</span>,<span class="string">'BLAKE'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="keyword">str_to_date</span>(<span class="string">'1-5-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">2850</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7782</span>,<span class="string">'CLARK'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="keyword">str_to_date</span>(<span class="string">'9-6-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">2450</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7839</span>,<span class="string">'KING'</span>,<span class="string">'PRESIDENT'</span>,<span class="literal">NULL</span>,<span class="keyword">str_to_date</span>(<span class="string">'17-11-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">5000</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7844</span>,<span class="string">'TURNER'</span>,<span class="string">'SALESMAN'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'8-9-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1500</span>,<span class="number">0</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7900</span>,<span class="string">'JAMES'</span>,<span class="string">'CLERK'</span>,<span class="number">7698</span>,<span class="keyword">str_to_date</span>(<span class="string">'3-12-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">950</span>,<span class="literal">NULL</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7902</span>,<span class="string">'FORD'</span>,<span class="string">'ANALYST'</span>,<span class="number">7566</span>,<span class="keyword">str_to_date</span>(<span class="string">'3-12-1981'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">3000</span>,<span class="literal">NULL</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> EMP <span class="keyword">VALUES</span></div><div class="line">(<span class="number">7934</span>,<span class="string">'MILLER'</span>,<span class="string">'CLERK'</span>,<span class="number">7782</span>,<span class="keyword">str_to_date</span>(<span class="string">'23-1-1982'</span>,<span class="string">'%d-%m-%Y'</span>),<span class="number">1300</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">commit</span>;</div></pre></td></tr></table></figure>
<h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><blockquote>
<p>分组查询 通常和聚合函数结合使用<br>通常查询每个部门(性别/分类) 就以部门(性别/分类)为分组条件<br>group by语句的位置<br>可以对多个字段进行分组<br>格式:<code>select 字段 from 表名 where 条件 group by 分组字段  having 聚合函数条件 order by 字段  limit n,m  分页</code></p>
</blockquote>
<ul>
<li><p>查询emp表中<strong>每个部门</strong>的编号(deptno)，人数，工资总和 最后根据人数进行升序排序，如果人数一致，根据工资总和降序排列</p>
<ul>
<li><code>select deptno,count(*) c,sum(sal) s from emp group by deptno order by c asc,s desc;</code></li>
</ul>
</li>
<li><p>查询工资平均在1000-3000之间的员工信息，每个部门的编号，平均工资，最低工资，最高工资，根据平均工资进行升序排列</p>
<ul>
<li><code>select deptno,avg(sal) a,min(sal),max(sal) from emp where sal between 1000 and 3000 group by deptno order by a;</code></li>
</ul>
</li>
<li><p>查询含有上级领导的员工，每个职业的人数，工资的总和，平均工资，最低工资，最后根据人数进行降序排列，如果人数一致，根据平均工资进行升序排列</p>
<ul>
<li><code>select count(*) c,sum(sal),avg(sal) a,min(sal) from emp where mgr is not null group by job order by c desc,a asc;</code></li>
</ul>
</li>
<li><p>每个部门中，每个主管的手下人数（两个分组，使用逗号即可）</p>
<ul>
<li><code>select deptno,mgr ,count(*)from emp where mgr is not null group by deptno,mgr;</code></li>
</ul>
</li>
<li><p>每种工作的平均工资</p>
<ul>
<li><code>select job,avg(sal) from emp group by job;</code></li>
</ul>
</li>
<li><p>每年的入职人数</p>
<ul>
<li><p>其中hiredate的格式是2015-01-02(<code>%Y-%m-%d</code>),因此这里需要用到日期截取的函数<code>extract()</code>，具体使用参看<a href="https://chenjiabing666.github.io/2018/03/24/SQL%E6%93%8D%E4%BD%9C%E4%B8%89/#%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0">SQL操作三</a></p>
</li>
<li><p><code>select extract(year from hiredate) year,count(*) from emp group by y;</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a>having子句</h2><ul>
<li><p>聚合函数不可以对where结合使用</p>
<ul>
<li><code>select deptno,avg(sal) a from emp where a&gt;2000 group by deptno;</code> 这句话是错误的，因为<code>avg(sal)</code>是聚合函数，不能和where结合使用</li>
</ul>
</li>
<li><p>having中也是可以使用普通字段的过滤，不一定是聚合函数，但是聚合函数的过滤只能使用having，但是建议写在where条件语句中</p>
</li>
<li><p>对聚合函数的结构进行条件过滤要使用having</p>
</li>
<li><p>having语句要写在<code>group by</code> 后面</p>
<ul>
<li><code>select from  where  group by having order by limit</code></li>
</ul>
</li>
</ul>
<ul>
<li>查询每个部门中平均工资，只显示平均工资大于2000的<ul>
<li><code>select deptno,avg(sal) a from emp group by deptno having a&gt;2000;</code></li>
</ul>
</li>
</ul>
<ul>
<li><p>查询所有分类商品所对应的库存总量中，高于1000的总量</p>
<ul>
<li>这个就是查询每一种商品的库存(group by ) ，库存高于1000(having)</li>
<li><code>select category_id, sum(num) sum from t_item group by category_id having  sum&gt;1000;</code></li>
</ul>
</li>
<li><p>查询所有分类商品所对应的平均单价中，低于1000的均价</p>
<ul>
<li><code>select category_id, avg(price) avg from t_item group by category_id having  avg&lt;100;</code></li>
</ul>
</li>
<li><p>查询编号238和编号917分类商品的平均单价</p>
<ul>
<li>这里没有查询编号就是category_id的值，没有涉及到聚合函数，因此可以使用<code>where</code>条件进行过滤</li>
<li><p><code>&gt; select category_id, avg(price) avg from t_item where category_id in(238,917) group by category_id ;</code></p>
</li>
<li><p>虽然没有涉及到聚合函数，但是我们也是可以使用having子句进行过滤（<strong>不建议</strong>）</p>
</li>
<li><code>select category_id, avg(price) avg from t_item  group by category_id  having category_id in(238,917);</code></li>
</ul>
</li>
<li><p>查询emp中，每个部门的平均工资高于2000的部门的编号，部门的人数，平均人数，平均工资，最后根据平均工资进行升序排列</p>
<ul>
<li><code>select avg(sal) avg,deptno,count(*) from emp group by deptno having avg&gt;2000 order by avg;</code></li>
</ul>
</li>
<li><p>查询emp表中名字中不是以k开头的信息，每个部门的最低工资高于1000的部门的编号，工资总和，平均工资以及最低工资，最后根据平均工资进行升序排列</p>
<ul>
<li><code>select deptno,sum(sal) sum,avg(sal) avg,min(sal) min from emp where ename not like &#39;k%&#39; group by deptno having min&gt;1000 order by avg;</code></li>
</ul>
</li>
<li><p>查询emp表中部门编号是10,30号部门的员工，每个职业的最高工资低于5000的职业的名称，人数，平均工资，最高工资，最后根据人数进行升序排列，如果人数一致，根据最高工资进行降序排列</p>
<ul>
<li><code>select max(sal) max,job,avg(sal) avg,count(*) c from emp where deptno in(10,30) group by  job having avg&lt;5000 order by c asc,max desc;</code></li>
</ul>
</li>
<li><p>查询emp表中，每个部门的编号，人数，工资总和，最高工资以及最低工资，过滤掉最高工资是5000的部门，根据部门的人数进行升序排列，如果人数一致，则根据最高工资进行降序排列。</p>
<ul>
<li><code>select deptno,count(*) c,sum(sal) sum,max(sal) max,min(sal) min from emp group by deptno having max !=5000 order by c asc,max desc;</code></li>
</ul>
</li>
<li><p>查询emp表中工资在1000~3000之间的员工信息，每个部门的编号，工资总和，平均工资，过滤掉平均工资低于2000的部门，按照平均工资进行升序排列</p>
<ul>
<li><code>select deptno,sum(sal) sum,avg(sal) avg from emp where sal between 1000 and 3000  group by deptno having avg &gt;=2000 order by avg;</code></li>
</ul>
</li>
<li><p>查询emp表中名字不是以‘S’开头，每个职位的名字，人数，工资总和，最高工资，过滤掉工资是3000的职位，根据人数进行升序排列，如果人数一致，根据工资总和进行降序排列。</p>
<ul>
<li><code>select job,count(*) c,sum(sal) sum,max(sal) max from emp where ename not  like &#39;s%&#39;and sal !=3000 group by job  order by c asc,sum desc;</code></li>
</ul>
</li>
</ul>
<ul>
<li>查询emp表的信息，每个职位的名称，人数，平均工资，最低工资，过滤掉平均工资是3000的职位信息，根据人数进行降序排列，如果人数一致，根据平均工资进行升序排列<ul>
<li><code>select job,count(*) c,avg(sal) avg,min(sal) min from emp group by job having avg !=3000 order by c desc,avg asc;</code></li>
</ul>
</li>
</ul>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="Mysql子查询"><a href="#Mysql子查询" class="headerlink" title="Mysql子查询"></a>Mysql子查询</h3><blockquote>
<p>子查询 ： 嵌套到sql语句里面的查询sql语句称为”子查询”</p>
<p><strong>子查询中返回的字段一定要和查询的判断条件字段类型一致，否则没有意义，比如 ： 这里的最高员工工资，那么子查询返回的一定是一个字段并且这个字段是最高的工资。当然子查询中也是可以返回多个值，那么此时需要使用in关键字判断</strong></p>
<p>如果子查询中返回的是一个值，比如最大工资，那么我们可以使用 <code>=</code> <code>&gt;</code> <code>&lt;</code> <code>!=</code><br>如果子查询中返回的是一组值，那么我们就不能使用 = 或者 !=  我们可以使用<code>in</code>关键字</p>
</blockquote>
<ul>
<li><p>查询工资最高的员工的所有信息</p>
<ul>
<li>子查询中返回的是最高工资</li>
<li><code>select * from emp where sal=(select max(sal) from emp);</code></li>
</ul>
</li>
<li><p>工资多于平均工资的员工信息</p>
<ul>
<li>子查询中返回的是平均工资</li>
<li><code>select * from emp where sal &gt; (select avg(sal) from emp);</code></li>
</ul>
</li>
<li><p>最后入职的员工信息</p>
<ul>
<li>子查询中返回的是最后入职的日期</li>
<li><code>select * from emp where hiredate=(select max(hiredate) from emp);</code></li>
</ul>
</li>
<li><p>查询出有商品的分类信息</p>
<ul>
<li>子查询中返回的是t_item中不重复的category_id的值，这个就是在t_item_category中的id，因此我们只需要将t_item_category中的id值在t_item中的信息查询出来即可、</li>
<li>由于子查询中可能返回的不是一个值，而是一组值，因此使用<code>in</code></li>
<li><code>select * from t_item_category where id in(select category_id from t_item where category_id is not null);</code></li>
</ul>
</li>
<li><p>查询工资高于20号部门最高工资的员工的所有信息</p>
<ul>
<li><code>select * from emp where sal&gt;(select max(sal) from emp where deptno=20);</code></li>
</ul>
</li>
<li><p>查询emp表中姓名是‘KING’所属的部门的编号，名称</p>
<ul>
<li>emp表中存放的是员工信息，dept表中存放的是部门信息，emp表中的deptno对应的dept表中的deptno(相当于外键)</li>
<li>子查询是返回的emp表中ename为king的部门编号</li>
<li><code>select deptno,dname from dept where deptno = (select distinct deptno from emp where ename=&#39;king&#39;);</code></li>
</ul>
</li>
<li><p>查询部门名称是SALES的部门下所有员工的编号，姓名，职位，以及所属部门的编号</p>
<ul>
<li>emp和dept表是以deptno关联的</li>
<li><code>select empno,ename,job,deptno from emp where deptno=(select deptno from dept where dname=&quot;sales&quot;);</code></li>
</ul>
</li>
<li><p>查询部门地址是DALLAS的部门下所有员工的所有信息</p>
<ul>
<li>仍然是emp和dept的查询</li>
<li><code>select * from emp where deptno in (select deptno from dept where loc=&#39;dallas&#39;);</code></li>
</ul>
</li>
<li><p>查询跟JONES同样工作的员工的所有信息（包含JONES）</p>
<ul>
<li><code>select * from emp where job=(select job from emp where ename=&#39;jones&#39;);</code></li>
</ul>
</li>
<li><p>查询跟JONES同样工作的员工的所有信息（不包含JONES）</p>
<ul>
<li>where句中可以包含子查询，也可以包含其他的条件，使用and或者or</li>
<li><code>select * from emp where job=(select job from emp where ename=&#39;jones&#39;) and ename!=&#39;jones&#39;;</code></li>
</ul>
</li>
<li><p>查询部门平均工资最高的部门详情</p>
<ul>
<li>复杂写法：<ul>
<li><strong><code>(select * from t) new</code> 这个可以当做一个新表进行查询，也是一种嵌套查询</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">max</span>(a),deptno <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">avg</span>(sal) a,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)<span class="keyword">new</span>)n);</div><div class="line">``` </div><div class="line">- 简单写法</div><div class="line">    - 查询每个部门的deptno，然后对平均工资进行降序排序，之后取其中的第一条数据，那么就是平均工资最大的。</div><div class="line">```sql</div><div class="line"> <span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> deptno=(<span class="keyword">select</span> deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(sal) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>查询所有分类产品商品库存总量最大的分类详情<ul>
<li>简单写法<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_item_category <span class="keyword">where</span> <span class="keyword">id</span> =(<span class="keyword">select</span>     category_id <span class="keyword">from</span> t_item <span class="keyword">group</span> <span class="keyword">by</span> category_id         <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sum</span>(<span class="keyword">num</span>) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>子查询可以写在where后面作为查询条件</li>
<li>可以写在from后面作为一张新表，<strong>作为新表时必须起别名</strong><ul>
<li><code>select * from (select * from t_item where title like &#39;%广博%&#39; limit 0,10) newtable;</code></li>
<li>上面的select子句中返回的字段就是新表newtable的字段</li>
</ul>
</li>
<li><p>可以把子查询写在创建表的时候、</p>
<ul>
<li><code>select table t_item_new as (select title,price from t_item from t_item where price&gt;1000)</code></li>
</ul>
</li>
<li><p>子查询可以嵌套n层</p>
</li>
</ul>
<h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><blockquote>
<p>同时查询多张表信息中的字段<br>同时查询多张表的字段的时候，一定要指定关联关系，否则就会出现笛卡尔积的错误，比如外键关联，emp和dept表中的deptno是对应字段的关系（相当于外键）</p>
<ul>
<li>查看每个员工的名字以及所在部门的名字<ul>
<li><code>select ename,dname from emp,dept where emp.deptno=dept.deptno;</code></li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>查询在new york 工作的员工<ul>
<li><code>select ename from emp,dept where dept.loc=&#39;new york&#39; and emp.deptno=dept.deptno;</code></li>
</ul>
</li>
</ul>
<ul>
<li>查看工资高于3000的员工，名字，工资，部门名，所在地<ul>
<li>这里的关联关系依然是两张表中都有deptno字段</li>
<li><code>select ename,sal,dname,loc from emp,dept where emp.deptno=dept.deptno and sal&gt;3000;</code></li>
</ul>
</li>
</ul>
<h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><blockquote>
<p>笛卡尔积通常是一种错误的查询结果<br>笛卡尔积是在不谢关联关系的情况下，查询出来的两张表的乘积</p>
</blockquote>
<ul>
<li>查看每个员工的名字以及所在部门的名字<ul>
<li><code>select ename,dname from emp,dept where emp.deptno=dept.deptno;</code></li>
<li>上面的sql语句如果没写where中的子句，那么就会出现笛卡尔积的错误，因为没有设置关联关系</li>
</ul>
</li>
</ul>
<h3 id="等值连接-内连接"><a href="#等值连接-内连接" class="headerlink" title="等值连接/内连接"></a>等值连接/内连接</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><blockquote>
<p><code>select * from A,B where A.x=B.x and age&gt;18;</code></p>
</blockquote>
<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><blockquote>
<p>select * from A [inner] join B on A.x=B.x where age&gt;18;</p>
</blockquote>
<ul>
<li><p>查询在new york 工作的员工</p>
<ul>
<li><code>select * from emp e join dept d on e.deptno=d.deptno where d.loc=&#39;new york&#39;;</code></li>
</ul>
</li>
<li><p>查看工资高于3000的员工，名字，工资，部门名，所在地</p>
<ul>
<li><code>select ename ,sal,dname,loc from emp e join dept d on e.deptno=d.deptno where sal&gt;3000;</code></li>
</ul>
</li>
</ul>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>等值连接和内连接只能查询有关联关系的数据，如果其中的数据没有关联关系，那么没有关联关系的数据查询不出来</p>
</blockquote>
<h2 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h2><blockquote>
<p>两张表中其中有数据没有关联关系，那么使用等值连接和内连接就查询不出来，因此需要使用左外连接<br>查询结构以左边的表为主，内容全部显示，左边的只是显示有关系的</p>
<p><code>select * from emp e left join dept d on e.deptno=d.deptno;</code></p>
</blockquote>
<h2 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h2><blockquote>
<p>两张表中其中有数据没有关联关系，那么使用等值连接和内连接就查询不出来，因此需要使用左外连接<br>查询结构以右边的表为主，内容全部显示，左边的只是显示有关系的</p>
<p><code>select * from emp e right join dept d on e.deptno=d.deptno;</code></p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li><p>查询出所有可以匹配的商品分类及商品数据</p>
<ul>
<li><code>select c.name , t.* from t_item t,t_item_category c where t.category_id=c.id;</code>  等值连接</li>
<li><code>select t.* ,c.name from t_item t join t_item_category c on t.category_id = c.id;</code>  内连接</li>
</ul>
</li>
<li><p>查询出所有的分类,以及与之匹配的商品</p>
<ul>
<li>这里侧重于查询分类，如果某一个分类中没有商品，那么使用等值连接和内连接就会导致查询不到所有的分类，因此这里可以使用左外连接或者右外连接，以分类所在的表(t_item_category)为主</li>
<li><code>select c.name,t.*  from t_item_category c  left join t_item t on t.category_id=c.id;</code>   左外连接</li>
<li><code>select c.name,t.*  from t_item t  right join t_item_category c on t.category_id=c.id;</code>   右外连接</li>
</ul>
</li>
<li><p>查询出所有的商品,以及与之匹配的分类</p>
<ul>
<li>这里侧重于所有的商品，如果其中某一件商品与分类没有关联关系，即是没有指定分类，那么我们使用等值连接或者内连接就会查询不到这件商品，我们可以使用左外连接或者右外连接</li>
<li>商品类(t_item)  分类（t_item_category）</li>
<li><code>select t.title,c.name  from t_item t left join t_item_category c on c.id=t.category_id;</code>  左外连接</li>
<li><code>select t.title,c.name  from t_item_category c right join t_item t  on c.id=t.category_id;</code>  右外连接</li>
</ul>
</li>
<li><p>每个部门的人数,根据人数排序</p>
<ul>
<li><code>select deptno count(*) c from emp group by deptno order by c;</code></li>
</ul>
</li>
<li><p>每个部门中，每个主管的手下人数</p>
<ul>
<li><code>select deptno,mgr,count(*) from emp group by deptno,mgr;</code></li>
</ul>
</li>
<li><p>每种工作的平均工资</p>
<ul>
<li><code>select  job,avg(sal) avg from emp group by job;</code></li>
</ul>
</li>
<li><p>每年的入职人数</p>
<ul>
<li><code>select extract(year from hiredate) year, count(*) from emp group by year;</code></li>
</ul>
</li>
<li><p>少于等于3个人的部门</p>
<ul>
<li><code>select deptno, count(*) c from emp group by deptno having c&lt;=3;</code></li>
</ul>
</li>
<li><p>拿最低工资的员工信息</p>
<ul>
<li><code>select * from emp having sal=min(sal);</code>  (不推荐)</li>
<li><code>select * from emp having sal=(select min(sal) from emp);</code></li>
</ul>
</li>
<li><p>只有一个下属的主管信息</p>
<ul>
<li><code>select e.* from emp e join (select count(*) c ,mgr from emp group by mgr having c=1)newtable on newtable.mgr=e.empno;</code></li>
</ul>
</li>
<li><p>平均工资最高的部门编号</p>
<ul>
<li><code>select deptno from emp group by deptno order by avg(sal) desc limit 0,1</code></li>
</ul>
</li>
<li><p>下属人数最多的人，查询其个人信息</p>
<ul>
<li>先分组查询出所有的主管的信息，然后根据人数降序排列，最后取出第一条就是数据就是下属人数最多的主管</li>
<li><code>select * from emp group by mgr order by count(*) desc limit 0,1;</code></li>
</ul>
</li>
<li><p>拿最低工资的人的信息</p>
<ul>
<li><code>select * from emp where sal=(select min(sal) from emp);</code></li>
</ul>
</li>
<li><p>最后入职的员工信息</p>
<ul>
<li><code>select * from emp where hiredate=(select max(hiredate) from emp);</code></li>
</ul>
</li>
<li><p>工资多于平均工资的员工信息</p>
<ul>
<li><code>select * from emp where sal&gt;(select avg(sal) from emp);</code></li>
</ul>
</li>
<li><p>查询员工信息，部门名称</p>
<ul>
<li><code>select e.*,d.dname from emp e join dept d on e.deptno=d.deptno;</code></li>
</ul>
</li>
<li><p>员工信息，部门名称，所在城市</p>
<ul>
<li><code>select e.*,d.dname,d.loc from emp e join dept d on e.deptno=d.deptno;</code></li>
</ul>
</li>
<li><p>DALLAS 市所有的员工信息</p>
<ul>
<li><code>select e.* from emp e join dept d on e.deptno=d.deptno where d.loc=&#39;DALLAS&#39;;</code></li>
</ul>
</li>
<li><p>按城市分组，计算每个城市的员工数量</p>
<ul>
<li><code>select loc ,count(*) from (select e.*,d.dname,d.loc from emp e join dept d on e.deptno=d.deptno) newtable group by newtable.loc;</code></li>
<li><code>select d.loc,count(*) from emp e join dept d on e.deptno=d.deptno group by loc;</code></li>
</ul>
</li>
<li><p>查询员工信息和他的主管姓名</p>
<ul>
<li>员工信息和主管姓名在同一张表中，我们可以抽离出主管编号mgr和ename组成一张新表，那么我们就可以使用关联查询了</li>
<li><p><code>select e.*,n.ename &#39;主管名字&#39; from emp e join (select mgr,ename from emp) n on e.empno=n.mgr;</code></p>
</li>
<li><p>或者我们可以不抽离字段，而是直接整个当做一张新表</p>
</li>
<li><code>select e.*,n.ename mgrname from emp e join emp n on e.empno=n.mgr;</code></li>
</ul>
</li>
<li><p>员工信息，员工主管名字，部门名</p>
<ul>
<li><strong>直接join（可以连接多张表）,直接在后面join即可</strong></li>
<li><p><code>select e.*,n.ename mgrname,dname from emp e join emp n on e.empno=n.mgr join dept d on e.deptno=d.deptno;</code></p>
</li>
<li><p>把上面的查询结果当成一张新表，和dept内连接即可</p>
</li>
<li><code>select new.*,d.dname from (select e.*,n.ename mgrname from emp e join emp n on e.empno=n.mgr) new join dept d on new.deptno=d.deptno;</code></li>
</ul>
</li>
</ul>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>如果涉及到两张表，甚至多张表，想要查询某张表的所有信息，此时就需要使用左/右外连接，因为如果某条数据没有关联关系，那么使用等值连接或者内连接将会缺失没有关联关系的数据。</p>
<p>如果涉及到多张表的时候，使用内连接可以连接多张表，直接在后面添加join即可，比如</p>
<blockquote>
<p><code>select e.*,n.ename mgrname,dname from emp e join emp n on e.empno=n.mgr join dept d on e.deptno=d.deptno;</code></p>
</blockquote>
<p>分组(group by)是对前面查询到的结果进行分组，因此在where条件语句后，也是在内连接之后，因为必须查询到完整的一张表才能进行分组</p>
<p>推荐使用内连接，不使用等值连接</p>
<p><strong>使用内连接的时候，where条件语句一定要放在 on的后面，即使是多个内连接(多个join)，也必须放在最后一个join的on的后面，不影响结果</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day-04&quot;&gt;&lt;a href=&quot;#Day-04&quot; class=&quot;headerlink&quot; title=&quot;Day 04&quot;&gt;&lt;/a&gt;Day 04&lt;/h1&gt;&lt;h2 id=&quot;创建数据库和表&quot;&gt;&lt;a href=&quot;#创建数据库和表&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作三</title>
    <link href="http://chenjiabing666.github.io/2018/03/24/SQL%E6%93%8D%E4%BD%9C%E4%B8%89/"/>
    <id>http://chenjiabing666.github.io/2018/03/24/SQL操作三/</id>
    <published>2018-03-24T01:10:58.000Z</published>
    <updated>2018-03-24T01:11:27.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h1><h2 id="查询null"><a href="#查询null" class="headerlink" title="查询null"></a>查询null</h2><ul>
<li><p>查询列值为null  (is null)</p>
<ul>
<li><code>select * from emp where mgr is null;</code> 查询上级领导为空的员工</li>
</ul>
</li>
<li><p>查询列值不为null  (is not null)</p>
<ul>
<li><code>select * from emp where mgr is not null and comm&gt;0;</code> </li>
</ul>
</li>
</ul>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><blockquote>
<p>如果表中的字段名称太长或者不是很容易直接看懂，那么我们可以使用别名，使用的方式有三种：</p>
<ul>
<li><code>select ename &quot;姓名&quot; from emp;</code></li>
<li><code>select ename as &quot;姓名&quot; from emp;</code></li>
<li><code>select ename 姓名 from emp;</code></li>
</ul>
</blockquote>
<h2 id="去除重复的值-distinct"><a href="#去除重复的值-distinct" class="headerlink" title="去除重复的值(distinct)"></a>去除重复的值(distinct)</h2><blockquote>
<p><code>select distinct job from emp;</code></p>
</blockquote>
<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><blockquote>
<p>条件语句支持的运算符： &gt;  &lt;  =   !=  &gt;=  &lt;=  !=(&lt;&gt;)</p>
</blockquote>
<h2 id="and-和-or"><a href="#and-和-or" class="headerlink" title="and 和 or"></a>and 和 or</h2><blockquote>
<p>and 并且  多个条件属于与的关系<br>or 或者   </p>
<ul>
<li><code>select * from user where id=1 or id=2;</code>  查询id=1的数据或者id=2的数据 ,如果这两个都存在，那么将会全部返回</li>
</ul>
</blockquote>
<h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2><ul>
<li><code>_</code> 代表单个未知字符<ul>
<li>第二个字母为a :  <code>_a%</code></li>
<li>倒数第三个字母为a  ：<code>%a__</code></li>
</ul>
</li>
<li><p><code>%</code> 代表多个未知字符</p>
<ul>
<li>以a开头的 : <code>a%</code></li>
<li>以a结尾的  ：<code>%a</code></li>
<li>包含a :<code>%a%</code></li>
</ul>
</li>
<li><p><code>select * from user where name like &#39;_加%&#39;;</code> </p>
</li>
<li><code>select * from user where name like &#39;_加_&#39;;</code>  此时匹配的名字是三个字符，比如 陈加兵</li>
</ul>
<h3 id="not-like-不包含"><a href="#not-like-不包含" class="headerlink" title="not like  (不包含)"></a>not like  (不包含)</h3><blockquote>
<p><code>select * from user where name not like &#39;_加%&#39;;</code></p>
</blockquote>
<h2 id="between-…-and-在-之间"><a href="#between-…-and-在-之间" class="headerlink" title="between … and  (在..之间)"></a>between … and  (在..之间)</h2><blockquote>
<p>在两个数之间<br><code>select * from t_item where price between 10 and 100;</code>   查询价格在10 到 100之间的数据</p>
</blockquote>
<h2 id="in-查询的值为多个"><a href="#in-查询的值为多个" class="headerlink" title="in  (查询的值为多个)"></a>in  (查询的值为多个)</h2><blockquote>
<p>查询某个字段的值为多个值的时候使用in<br><code>select * from t_item where price in(100,200,233);</code> </p>
</blockquote>
<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><ul>
<li><p>升序（默认 asc）<br>  -<code>select price from t_item  order by price</code></p>
<ul>
<li>order by 写在后面，如果有where条件，那么要写在where条件的后面</li>
<li><code>select price from t_item where price&lt;100 order by price;</code></li>
</ul>
</li>
<li><p>降序（desc）</p>
<ul>
<li><code>select price from t_item  order by price desc</code></li>
</ul>
</li>
<li><p>如果需要多个字段进行排序，则在by的后面写多个字段</p>
<ul>
<li><code>select  category_id,price from t_item  order by category_id,price desc;</code> 按照分类id升序，价格降序</li>
</ul>
</li>
<li><p>查询带燃字的商品，按照价格降序排列</p>
<ul>
<li><code>select title,price from t_item where title like &quot;%燃%&quot; order by price;</code></li>
</ul>
</li>
</ul>
<h2 id="分页-limit-子句"><a href="#分页-limit-子句" class="headerlink" title="分页 limit 子句"></a>分页 limit 子句</h2><ul>
<li><code>limit n,m</code>  ： n表示跳过的条数，m表示每页显示的条数</li>
<li><p>写在排序（order by 字句）的后面，如果没有排序写在where后面</p>
<ul>
<li><code>limit 0,5</code>  查询第一页，每页显示5条</li>
<li><code>limit 10,5</code>  查询第三页，每页显示5条</li>
<li><code>limit 12,3</code>  查询第五页 每页3条</li>
</ul>
</li>
<li><p><code>select price from t_item order by price limit 10,10;</code>  按照价格升序排列，显示第二页，每页10条</p>
</li>
<li><p><code>select price from t_item where price &lt;100 limit 0,10;</code>  查询价格小于100的记录，显示第一页，每页10条</p>
</li>
</ul>
<h2 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat() 函数"></a>concat() 函数</h2><blockquote>
<p>concat()函数可以实现多个字符串的拼接</p>
</blockquote>
<ul>
<li><p>在终端直接输入 <code>select concat(&#39;a&#39;,&#39;b&#39;);</code> </p>
</li>
<li><p><code>select concat(price,&quot;元&quot;) from t_item limit 0,3;</code> 查询商品，并且将查询到的价格和元这个单位拼接。相当于显示的是价格只是每个价格后面添加了单位 比如： 23元</p>
</li>
<li><p>将标题和单价拼到一起进行展现</p>
<ul>
<li><code>select concat(price,&quot;元&quot;,title) from t_item limit 0,5;</code></li>
</ul>
</li>
</ul>
<h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><blockquote>
<p>支持加减乘除，取余(%)等效mod(n,m)</p>
</blockquote>
<ul>
<li><p>查询商品并在结果中显示商品的总价值</p>
<ul>
<li><p><code>select price,num ,price*num &#39;总价&#39; from t_item;</code>  </p>
</li>
<li><p>直接做运算即可，可以使用别名解释字段的含义</p>
</li>
</ul>
</li>
</ul>
<h2 id="日期相关函数"><a href="#日期相关函数" class="headerlink" title="日期相关函数"></a>日期相关函数</h2><ul>
<li><p>获取当前时间+时间</p>
<ul>
<li>now()</li>
<li>在终端输入<code>select now();</code></li>
</ul>
</li>
<li><p>获取当前日期</p>
<ul>
<li>curdate()</li>
</ul>
</li>
</ul>
<ul>
<li><p>获取当前时间</p>
<ul>
<li>curtime()</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li><code>select now(),curdate(),curtime();</code></li>
</ul>
</li>
<li><p>从日期和时间中获取日期</p>
<ul>
<li>date(now())</li>
</ul>
</li>
<li><p>从日期和时间中获取时间</p>
<ul>
<li>time(now())</li>
</ul>
</li>
<li><p>extract() 提取年月日时分秒的函数</p>
<ul>
<li><code>select extract(year from now());</code></li>
<li><code>select extract(month from now());</code></li>
<li><code>select extract(day from now());</code></li>
<li><code>select extract(hour from now());</code></li>
<li><code>select extract(minute from now());</code></li>
<li><code>select extract(second from now());</code></li>
</ul>
</li>
</ul>
<h2 id="DATE-FORMATE-函数-日期格式化"><a href="#DATE-FORMATE-函数-日期格式化" class="headerlink" title="DATE_FORMATE() 函数  日期格式化"></a>DATE_FORMATE() 函数  日期格式化</h2><ul>
<li><p>format</p>
<ul>
<li>%Y 4位年 2018</li>
<li>%y 2位   18</li>
<li>%m 月   05</li>
<li>%c 月   5</li>
<li>%d 日   </li>
<li>%H  24小时制</li>
<li>%i  分</li>
<li>%s 秒</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li><code>select date_format(now(),&#39;%Y年%m月%d日 %h时%i分%s秒&#39;);</code>  输出  2018年03月23日 03时44分51秒</li>
</ul>
</li>
<li><p>查询商品 并显示商品上传日期</p>
<ul>
<li><code>select title,date_format(created_time,&#39;%Y年%m月%d日 %h时%i分%s秒&#39;) from t_item;</code></li>
</ul>
</li>
</ul>
<h2 id="str-to-date-把字符串转成日期格式"><a href="#str-to-date-把字符串转成日期格式" class="headerlink" title="str_to_date  把字符串转成日期格式"></a>str_to_date  把字符串转成日期格式</h2><ul>
<li>将’2018年10月22日’ 转换成日期<ul>
<li><code>select str_to_date(&quot;2018年10月23日&quot;,&#39;%Y年%m月%d日&#39;);</code></li>
<li>第一个参数是即将要转换的字符串日期，第二个参数是这个字符串日期的格式，用来解析这个字符串。</li>
<li>输出：  2018-10-23</li>
</ul>
</li>
</ul>
<h2 id="IFNULL-函数"><a href="#IFNULL-函数" class="headerlink" title="IFNULL()  函数"></a>IFNULL()  函数</h2><ul>
<li><p>age=ifnull(a,b) 如果a是null，age=b，如果不是null，age=a;</p>
</li>
<li><p>把奖金是null 设置成0</p>
<ul>
<li><code>update emp set comm=ifnull(comm,0);</code>  如果奖金comm是null，那么comm=0，如果不是空 comm=comm，还是原来的值</li>
</ul>
</li>
</ul>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul>
<li><p>对多行数据进行合并统计</p>
<ul>
<li>sum() 求和<ul>
<li><code>select sum(num) from t_item where price&lt;100;</code></li>
</ul>
</li>
<li>avg() ： 求平均值<ul>
<li><code>select avg(price) from t_item;</code></li>
</ul>
</li>
<li>count() 计算数量<ul>
<li><code>select count(</code>*<code>) from t_item where price&lt;100;</code></li>
</ul>
</li>
<li>max() 最大值<ul>
<li><code>select max(price) from t_item;</code></li>
</ul>
</li>
<li>min() 最小值<ul>
<li><code>select min(price) from t_item;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li>查询DELL的平均单价<ul>
<li><code>select avg(price) &quot;平均单价&quot; from t_item where title like &quot;%DELL%&quot;;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="字符串的函数"><a href="#字符串的函数" class="headerlink" title="字符串的函数"></a>字符串的函数</h3><ul>
<li>char_length(str)</li>
<li>instr(str,substr) </li>
<li>locate(substr,str)  </li>
<li>insert(str,start,end,newStr)</li>
<li>lower(str)</li>
<li>upper(str)</li>
<li>left(str,count)</li>
<li>right(str,count)</li>
<li>trim(str)</li>
<li>substring(str,index)</li>
<li>substring(str,index,length);</li>
<li>repeat(str,count)</li>
<li>replace(str,old,new)</li>
<li>reverse()</li>
</ul>
<h3 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h3><ul>
<li>floor(num)</li>
<li>round(num)</li>
<li>round(num,m)</li>
<li>truncate(num,m) </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day03&quot;&gt;&lt;a href=&quot;#Day03&quot; class=&quot;headerlink&quot; title=&quot;Day03&quot;&gt;&lt;/a&gt;Day03&lt;/h1&gt;&lt;h2 id=&quot;查询null&quot;&gt;&lt;a href=&quot;#查询null&quot; class=&quot;headerlink&quot; title=&quot;查
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作二</title>
    <link href="http://chenjiabing666.github.io/2018/03/22/SQL%E6%93%8D%E4%BD%9C%E4%BA%8C/"/>
    <id>http://chenjiabing666.github.io/2018/03/22/SQL操作二/</id>
    <published>2018-03-22T09:28:54.000Z</published>
    <updated>2018-03-22T09:30:14.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h1><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><blockquote>
<p>1.数据库字符集 要设置成utf8</p>
<ol>
<li>表的字符集 设置为utf8</li>
<li>windows系统的命令行里，有些版本是gbk的编码格式，可以通过<code>set names gbk；</code>的方式把mysql接收到数据是的解码格式设置为gbk，这个位置的gbk和数据库还有表的utf8没有关系</li>
<li>在windows系统中修改mysql默认的数据库编码，找到安装文件中的my.ini的配置文件 在里面添加时如下代码：<code>character-set-server=utf8</code></li>
</ol>
</blockquote>
<h2 id="eclipse-下写sql"><a href="#eclipse-下写sql" class="headerlink" title="eclipse 下写sql"></a>eclipse 下写sql</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote>
<ol>
<li>下载mysql驱动jar包</li>
<li>window -&gt; show view -&gt; other -&gt; Data Management -&gt; Data source(open) / SQL Results(open)</li>
<li>找到控制台的Data source explor中，然后点击DataBaseConnetctions -&gt; new</li>
<li>选择Mysql</li>
<li>点击下拉箭头右面的加号</li>
<li>选择5.1  点击jarList  clearAll</li>
<li>点击add jar 在弹出窗口中找到下载的jar文件 然后ok<br>8.修改URL  只需要修改最后面的database即可，这个是选择需要操作的数据库</li>
<li>输入密码，save password</li>
<li>点击test connection 如果显示ping Successd则点击finish</li>
<li>在 Database Connections下的New MySQL 右键 选择</li>
<li>type中选择mysql5.1  Name中选Neq Mysql Database中选择database  在最右侧如果显示connected，那么可以开始写sql语句</li>
</ol>
</blockquote>
<h3 id="自定义代码块"><a href="#自定义代码块" class="headerlink" title="自定义代码块"></a>自定义代码块</h3><blockquote>
<p>点击windows -&gt; 搜索 templates -&gt; 选择SQL下editor下的templates -&gt; New（新建）</p>
</blockquote>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="主键-primary-key"><a href="#主键-primary-key" class="headerlink" title="主键(primary key)"></a>主键(primary key)</h3><blockquote>
<p>主键特点 ： 非空 唯一<br><code>CREATE TABLE user(id int PRIMARY KEY,age    int);</code></p>
</blockquote>
<h3 id="自增-auto-increment"><a href="#自增-auto-increment" class="headerlink" title="自增(auto_increment)"></a>自增(auto_increment)</h3><blockquote>
<p>一般和主键一起使用<br><code>create table t5(id int primary key auto_increment,name varchar(10));</code><br>如果设置了自增长，那么在插入数据的时候主键可以不设置值。也可以赋值为null，数据库会自动为这个主键赋值(在原来的基础上自增+1)</p>
</blockquote>
<h3 id="非空-not-null"><a href="#非空-not-null" class="headerlink" title="非空(not null)"></a>非空(not null)</h3><blockquote>
<p><code>create table user(id int primary key,age int not null);</code></p>
</blockquote>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote>
<p>直接使用<code>comment</code>来添加字段注释即可<br><code>create table t6(id int comment &#39;用户的id&#39;,age int comment &#39;用户的年龄&#39;);</code></p>
</blockquote>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>数据库中sql语句执行的最小单元</li>
<li>不能分割执行事务内的sql语句，只能是同时执行成功，或者同时执行失败，否则可能出现安全性问题</li>
<li>一个事务中的代码块包含多条sql语句，只有一起执行成功才能成功，只要有一条出现错误都会失败,因为开启事务的话，每操作的一条语句产生的结果都是存储在内存中的，没有及时更新到数据库中，只有提交之后才能更新到数据库中</li>
</ul>
<h3 id="关闭自动提交"><a href="#关闭自动提交" class="headerlink" title="关闭自动提交"></a>关闭自动提交</h3><blockquote>
<p>mysql的自动提交属性自动是开启的，就是每执行一次sql语句就会自动提交，如果需要使用事务功能，那么需要将其关闭，因为一旦提交了，数据就会发生改变，但是事务的功能就是当所有的sql语句都执行完才提交，因此要将其关闭。</p>
</blockquote>
<ul>
<li><p>显示自动提交的状态</p>
<ul>
<li><code>show variables like &#39;%autocommit%&#39;;</code> 显示为on表示开启的</li>
</ul>
</li>
<li><p>关闭自动提交</p>
<ul>
<li><code>set autocommit=0;</code>   此时再次查询状态就会显示OFF</li>
</ul>
</li>
<li><p>再次开启自动提交</p>
<ul>
<li><code>set autocommit=1</code> 开启自动提交，此时查看就实现为on</li>
</ul>
</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol>
<li>创建表，插入数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> USR(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),money <span class="built_in">int</span>);</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="literal">NULL</span>,<span class="string">'超人'</span>,<span class="number">200</span>),(<span class="literal">NULL</span>,<span class="string">'蝙蝠侠'</span>,<span class="number">205</span>);</div></pre></td></tr></table></figure>
<ol>
<li>关闭自动提交</li>
<li>让超人的钱+100  <code>update user set money=300 where id=1</code></li>
<li>打开另外一个窗口登录mysql，可以查看此时的超人看看钱是不是300，我们可以看到此时的数据并没有改变，因为我们关闭了自动提交，如果我们此时在原来窗口输入 <code>commit;</code>,那么在看看另外的登录窗口就会发现数据改变了。</li>
</ol>
<h3 id="回滚-rollback"><a href="#回滚-rollback" class="headerlink" title="回滚(rollback)"></a>回滚(rollback)</h3><blockquote>
<p>当你之前的操作没有提交的话，那么你使用rollback这个命令，那么就会回滚到初始状态</p>
</blockquote>
<h3 id="回滚点-savepoint"><a href="#回滚点-savepoint" class="headerlink" title="回滚点(savepoint)"></a>回滚点(savepoint)</h3><blockquote>
<p>前提是没有设置了自动提交，才能回滚到保存点<br><code>savepint s1(标识);</code>  ： 设置保存点<br>回滚到保存点，那么保存点之前的操作都是存在的，一旦提交之后就会执行保存点之前的操作。 <code>rollback to s1;</code></p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>当将自动提交设置为关闭状态，当改变数据库的内容时，只要手动提交输入 <code>commit;</code>，才能更新到数据库中，否则就只是在内存中改变了。</p>
</blockquote>
<ul>
<li>begin 起始点</li>
<li>savepoint s(标识) 设置回滚点</li>
<li>commit  提交</li>
<li>rollback 回滚</li>
<li>rollback to … 回滚到指定的回滚点</li>
</ul>
<h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><h3 id="数据库定义语言-DDL"><a href="#数据库定义语言-DDL" class="headerlink" title="数据库定义语言 DDL"></a>数据库定义语言 DDL</h3><ul>
<li>Data Definition Language  数据库定义语言</li>
<li>常见命令： create  drop alter truncate</li>
<li>这些命令不支持事务，就是没有提交也会生效</li>
</ul>
<h3 id="数据操纵语言-DML"><a href="#数据操纵语言-DML" class="headerlink" title="数据操纵语言 DML"></a>数据操纵语言 DML</h3><ul>
<li>Data Manipulation Language :数据操作语言</li>
<li>常见命令： insert update delete select</li>
<li>支持事务，可以回滚，不提交将不会生效</li>
</ul>
<h3 id="数据查询语言-DQL"><a href="#数据查询语言-DQL" class="headerlink" title="数据查询语言 DQL"></a>数据查询语言 DQL</h3><ul>
<li>Data Query Language  : 数据查询语言</li>
<li>常见命令： select（也属于DML）</li>
</ul>
<h3 id="TCL"><a href="#TCL" class="headerlink" title="TCL"></a>TCL</h3><ul>
<li>Transaction Control Language ： 事务控制语言</li>
<li>常见命令： begin commit  rollback savepoint</li>
</ul>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><ul>
<li>Data Control Language  : 数据控制语言</li>
<li>给用户分配权限相关的sql语言</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><p>整数</p>
<ul>
<li>int 4字节</li>
<li>bigint 8字节</li>
</ul>
</li>
<li><p>浮点数</p>
<ul>
<li>double(m,d): m代表数据的总长度，d表示小数点后面的位数</li>
<li>decimal(m,d): m代表数据的总长度，d表示小数点后面的位数</li>
<li>double精度比float高，decimal精度比double高</li>
</ul>
</li>
<li><p>字符串类型</p>
<ul>
<li>char(n) : 固定长度，即是存了abc也是占满了n长度 执行效率高  总长255</li>
<li>varchar(n) : 可变长度 存abc 占3个长度 节省空间  最大长度65535，但是超过255建议使用text</li>
<li>text(n) : 可变长度  最大65535</li>
</ul>
</li>
<li><p>日期类型</p>
<ul>
<li>date  : 只能存储年月日</li>
<li>time ： 只能存储时分秒</li>
<li>datetime  ：  年月日时分秒  默认值为null  最大值9999-12-31</li>
<li>timestamp ： 年月日时分秒   默认值是当前时间  最大值2038-01-19</li>
<li>创建表插入数据：<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> p(d1 <span class="built_in">date</span>, d2 <span class="keyword">time</span>,d3 datetime,d4 <span class="keyword">timestamp</span>);</div><div class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> p <span class="keyword">values</span>(<span class="string">'2018-03-08'</span>,<span class="literal">null</span>,null.null);</div><div class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> p <span class="keyword">values</span>(<span class="string">'2018-03-08'</span>,<span class="string">'12:06:03'</span>,<span class="literal">null</span>,<span class="literal">null</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day02&quot;&gt;&lt;a href=&quot;#Day02&quot; class=&quot;headerlink&quot; title=&quot;Day02&quot;&gt;&lt;/a&gt;Day02&lt;/h1&gt;&lt;h2 id=&quot;乱码问题&quot;&gt;&lt;a href=&quot;#乱码问题&quot; class=&quot;headerlink&quot; title=&quot;乱码问题&quot;
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL操作一</title>
    <link href="http://chenjiabing666.github.io/2018/03/21/SQL%E6%93%8D%E4%BD%9C%E4%B8%80/"/>
    <id>http://chenjiabing666.github.io/2018/03/21/SQL操作一/</id>
    <published>2018-03-21T08:57:43.000Z</published>
    <updated>2018-03-27T01:11:59.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day01-基本的语句"><a href="#Day01-基本的语句" class="headerlink" title="Day01-基本的语句"></a>Day01-基本的语句</h1><h2 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h2><blockquote>
<p>因为传统的文本形式存储数据存在很多的弊端：</p>
<ol>
<li>执行效率低</li>
<li>占用内存</li>
</ol>
</blockquote>
<h2 id="什么是DB"><a href="#什么是DB" class="headerlink" title="什么是DB"></a>什么是DB</h2><blockquote>
<p><code>Database</code> ： 数据库<br>数据库本质是文件集（多个文件）<br>会按照特定存储规范进行数据增删改查</p>
</blockquote>
<h2 id="什么是DBMS"><a href="#什么是DBMS" class="headerlink" title="什么是DBMS"></a>什么是DBMS</h2><blockquote>
<p><code>DateBaseManagementSystem</code> : 数据库管理系统，本质就是管理数据库文件的软件</p>
<ol>
<li><code>Oracle</code></li>
<li><code>Mysql</code></li>
<li><code>DB2</code></li>
<li><code>Sqlite</code></li>
<li><code>SqlServer</code></li>
</ol>
</blockquote>
<h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><blockquote>
<p>关系型数据库</p>
<blockquote>
<ol>
<li>是经过数学理论验证过，可以保存现实生活中任何关系的数据库（其中的高级映射，比如一对多，多对一，一对一都是关系）</li>
<li>关系数据库是以表为单位进行存储的</li>
<li><code>Oracle</code> <code>mysql</code> <code>DB2</code> <code>sqlite</code> <code>sqlserver</code>都是关系型数据库</li>
</ol>
</blockquote>
<p>非关系型数据库</p>
<blockquote>
<ol>
<li><code>Redis</code>数据库是非关系型数据库</li>
<li>以<code>key-value</code>形式进行存储</li>
</ol>
</blockquote>
</blockquote>
<h2 id="主流关系型数据库介绍"><a href="#主流关系型数据库介绍" class="headerlink" title="主流关系型数据库介绍"></a>主流关系型数据库介绍</h2><blockquote>
<p><code>Mysql</code> ： 开源 卖服务赚钱 被sun公司收购 sun被oracle收购</p>
<blockquote>
<p>5.5版本因为oracle技术大牛对其进行升级，性能大幅提升，Mysql 从6.0开始收费，导致原来的mysql工程师跳槽创建了<code>MariaDB</code>,MariaDB内部实际上就是mysql，创建者的女儿叫Maria</p>
</blockquote>
<p><code>Oracle</code></p>
<blockquote>
<ol>
<li>闭源  卖产品</li>
<li>支持windows，Linux</li>
</ol>
</blockquote>
<p><code>DB2</code></p>
<blockquote>
<ol>
<li>闭源 大型数据库 通常是国字头的企业在用</li>
</ol>
</blockquote>
<p><code>sqlite</code></p>
<blockquote>
<ol>
<li>轻量级数据库，大小几十k，应用于移动或者嵌入式设备</li>
</ol>
</blockquote>
<p><code>SQLServer</code></p>
<blockquote>
<ol>
<li>微软公司 闭源 主要.net开发的网站中</li>
</ol>
</blockquote>
</blockquote>
<h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><blockquote>
<p>端口号<code>3306</code><br>编码格式 <code>utf8</code></p>
</blockquote>
<h2 id="数据库相关SQL"><a href="#数据库相关SQL" class="headerlink" title="数据库相关SQL"></a>数据库相关SQL</h2><h3 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h3><blockquote>
<p><code>Strctured Query Language</code> ： 结构化查询语言<br>通过sql语言和DBMS（数据库管理软件）进行交互</p>
</blockquote>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><blockquote>
<p>终端中输入： <code>mysql -u root -p</code><br>输入密码即可,没有密码直接回车即可</p>
</blockquote>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote>
<p><code>create database d_name ;</code> 创建数据库d_name<br><code>drop database d_name;</code> 删除数据库d_name<br><code>show databases;</code>  显示所有的数据库<br><code>show create database d_name;</code> 查看单个数据库<br><code>use d_name;</code> 使用当前的数据库d_name<br><code>create database db_name character set utf8;</code>创建数据库指定字符集</p>
</blockquote>
<h2 id="表相关SQL"><a href="#表相关SQL" class="headerlink" title="表相关SQL"></a>表相关SQL</h2><h3 id="什么是表"><a href="#什么是表" class="headerlink" title="什么是表"></a>什么是表</h3><blockquote>
<p>表是数据库中存放数据的单元，任何数据都是存放到表中<br>类似java中的Class，表中的字段对应class的属性</p>
</blockquote>
<h3 id="数据库表的引擎"><a href="#数据库表的引擎" class="headerlink" title="数据库表的引擎"></a>数据库表的引擎</h3><blockquote>
<p><code>innoDB</code> : 支持数据库的高级操作，包括事务 主键 外键等<br><code>myisam</code> : 只具备基本的数据库储功能</p>
</blockquote>
<h3 id="创建表时指定引擎和字符集"><a href="#创建表时指定引擎和字符集" class="headerlink" title="创建表时指定引擎和字符集"></a>创建表时指定引擎和字符集</h3><blockquote>
<p>格式 ：<code>create table t_name(字段名 字段类型,....) engine=myisam charset=utf8;</code></p>
</blockquote>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><blockquote>
<p>格式: <code>create table 表名(字段名 类型,字段名 类型,......);</code><br>例子： <code>create table name(id int,name char(10),age int);</code><br>执行原理： 当在中断输入建表语句 终端会把写好的sql发送给DBMS，然后解析到create table时，识别出要创建一个表。</p>
</blockquote>
<h3 id="查询所有表"><a href="#查询所有表" class="headerlink" title="查询所有表"></a>查询所有表</h3><blockquote>
<p><code>show tables ;</code></p>
</blockquote>
<h3 id="查询单个表"><a href="#查询单个表" class="headerlink" title="查询单个表"></a>查询单个表</h3><blockquote>
<p><code>show create table tale_name;</code><br>使用上面的语句会出现创建表的语句和字符编码</p>
</blockquote>
<h3 id="查看表的字段属性"><a href="#查看表的字段属性" class="headerlink" title="查看表的字段属性"></a>查看表的字段属性</h3><blockquote>
<p><code>desc table_name ;</code></p>
</blockquote>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="修改表的名称"><a href="#修改表的名称" class="headerlink" title="修改表的名称"></a>修改表的名称</h3><blockquote>
<p>格式 : rename table 原名 to 新名<br><code>rename table user to t_user;</code></p>
</blockquote>
<h3 id="修改表的属性（引擎和字符集）"><a href="#修改表的属性（引擎和字符集）" class="headerlink" title="修改表的属性（引擎和字符集）"></a>修改表的属性（引擎和字符集）</h3><blockquote>
<p>格式 ：alter table 表名 engine-innoDB charset=utf8;<br><code>alter table t  engine=InnoDB charset=GBK;</code></p>
</blockquote>
<h3 id="添加表字段"><a href="#添加表字段" class="headerlink" title="添加表字段"></a>添加表字段</h3><ul>
<li>在最后添加<blockquote>
<p>格式 ： alter table 表名 add 字段名 字段类型;<br><code>alter table t add age int;</code></p>
</blockquote>
</li>
<li>在最前添加<blockquote>
<p>格式： alter table 表名 add 字段名 字段类型 first;<br><code>alter table t add newage int first;</code></p>
</blockquote>
</li>
<li>在某个字段后面添加<blockquote>
<p>格式： alter table 表名 add 字段名 字段类型 after 字段名;<br><code>alter table t add birthday varchar(10) after id;</code></p>
</blockquote>
</li>
</ul>
<h3 id="修改字段名和类型"><a href="#修改字段名和类型" class="headerlink" title="修改字段名和类型"></a>修改字段名和类型</h3><blockquote>
<p>alter table 表名 change 原字段名 新字段名 新的字段类型 ;<br><code>alter table t change birthday bth Date;</code></p>
</blockquote>
<h3 id="修改字段类型和位置"><a href="#修改字段类型和位置" class="headerlink" title="修改字段类型和位置"></a>修改字段类型和位置</h3><blockquote>
<p>alter table 表名 modify 字段名 类型 位置（first/after 字段名）;<br><code>alter table t modify name int after age;</code>  将name移到age的后面，并且修改了name字段的类型为int<br> <code>alter table t modify name  varchar(10) first;</code>  将字段name移到最前面</p>
</blockquote>
<h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><blockquote>
<p>alter table 表名 drop 字段名;<br><code>alter table t drop bth;</code> 将t表中的bth字段删除</p>
</blockquote>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><blockquote>
<p>格式 ： drop table 表名 ;</p>
</blockquote>
<h2 id="数据相关的SQL-CRUD"><a href="#数据相关的SQL-CRUD" class="headerlink" title="数据相关的SQL(CRUD)"></a>数据相关的SQL(CRUD)</h2><h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h3><ul>
<li>全表插入<blockquote>
<p>格式 insert into 表名 values(value1,value2,…)<br>格式要求: values里面的值的<em>数量</em>和<em>顺序</em>必须要和表的字段一致<br><code>insert into user values(1,&#39;jack&#39;,22);</code></p>
</blockquote>
</li>
<li><p>指定字段插入</p>
<blockquote>
<p>格式： insert into 表名(字段1,字段2,..) values(value1，value2,….)<br><code>insert into user(id,name,age) values(1,&#39;jack&#39;,22);</code><br>格式要求： values中的值必须和前面格式的字段一致。</p>
</blockquote>
</li>
<li><p>插入多组数据</p>
<blockquote>
<p>格式： insert into values(第一组数据),(第二组数据)….<br><code>insert into user values(1,&quot;孙悟空&quot;,22),(2,&quot;唐僧&quot;,44);</code></p>
</blockquote>
</li>
<li><p>指定字段插入多组数据</p>
<blockquote>
<p><code>insert into user(age) values(22),(33);</code></p>
</blockquote>
</li>
</ul>
<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><ul>
<li>查询所有字段<blockquote>
<p>格式：<code>select * from 表名</code><br>select <code>*</code> from user;</p>
</blockquote>
</li>
<li>查询指定字段<blockquote>
<p>格式：select 字段1,字段2 from 表名<br><code>select name.age from user;</code></p>
</blockquote>
</li>
</ul>
<h3 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h3><ul>
<li><p>更新表中所有的字段</p>
<blockquote>
<p>格式： update 表名 set 字段名 = 新的值;<br><code>update user set age=22;</code></p>
</blockquote>
</li>
<li><p>改变指定条件的字段</p>
<blockquote>
<p>格式： update 表名 set 字段名 = 新的值 where 条件;<br><code>update user set age=22 where id=1;</code> 修改id=1的那一行数据的age</p>
</blockquote>
</li>
</ul>
<h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><ul>
<li><p>指定条件删除</p>
<blockquote>
<p>格式： delete from 表名 where 条件 ;<br><code>delet from user where id=2;</code>  删除id=2的那一行数据</p>
</blockquote>
</li>
<li><p>不指定条件删除，那么将会删除整张表数据</p>
<blockquote>
<p><code>delete from user;</code></p>
</blockquote>
</li>
</ul>
<h3 id="TRUNCATE语句"><a href="#TRUNCATE语句" class="headerlink" title="TRUNCATE语句"></a>TRUNCATE语句</h3><blockquote>
<p><code>trucate table 表名;</code> 先删除表，然后再创建一样的空表（表的名字相同，字段不变，主要的功能就是清空表中的数据）</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day01-基本的语句&quot;&gt;&lt;a href=&quot;#Day01-基本的语句&quot; class=&quot;headerlink&quot; title=&quot;Day01-基本的语句&quot;&gt;&lt;/a&gt;Day01-基本的语句&lt;/h1&gt;&lt;h2 id=&quot;数据库简介&quot;&gt;&lt;a href=&quot;#数据库简介&quot; class
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Excel表格的写入读取</title>
    <link href="http://chenjiabing666.github.io/2017/09/27/Excel%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%86%99%E5%85%A5%E8%AF%BB%E5%8F%96/"/>
    <id>http://chenjiabing666.github.io/2017/09/27/Excel表格的写入读取/</id>
    <published>2017-09-27T06:03:06.000Z</published>
    <updated>2017-09-27T06:04:35.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Excel的读取和写入"><a href="#Excel的读取和写入" class="headerlink" title="Excel的读取和写入"></a>Excel的读取和写入</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote>
<p>首先需要导入jar包，请点击<a href="http://download.csdn.net/download/qq_34162294/9997646" target="_blank" rel="external">这里下载</a></p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>我们知道<code>Excel</code>表格在<code>2007</code>之后就不一样了，后缀名变为<code>xlsx</code>，之前的后缀名为<code>xls</code>,因此读取和写入的操作就对应着不同的方式，但是只是读取和写入的类不同了，思想还是一样的。</p>
<p>我们要知道一个Excel文件(工作簿)包含三部分，分别是工作表(<code>sheet</code>),行(<code>row</code>),列(<code>cell</code>)</p>
</blockquote>
<h2 id="工作簿"><a href="#工作簿" class="headerlink" title="工作簿"></a>工作簿</h2><blockquote>
<p>工作簿对应的类是 <code>XSSFWorkbook</code>(2007之后),在2007之前对应的类是<code>HSSFWorkbook</code></p>
</blockquote>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<p><code>new XSSFWorkbook()</code>   创建一个工作簿用于写入文件</p>
<p><code>new XSSFWorkbook(java.io.InputStream inputstream)</code>  创建一个工作簿，用于读取文件</p>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>XSSFFont createFont()</code>   返回一个<code>XSSFont</code>类的对象，主要用于设置字体用的</li>
<li><code>XSSFSheet createSheet()</code>   创建一个工作表</li>
<li><code>XSSFSheet    createSheet(String name)</code>   创建一个工作表并且指定姓名</li>
<li><code>XSSFCellStyle    createCellStyle()</code>   创建一个单元格风格类的一个对象，便于设置单元格的属性</li>
<li><code>write(OutputStream out)</code>    用于将文件写入到文件中</li>
<li><code>close()</code>  </li>
<li><code>setSheetName(int sheetIx,String name)</code>  为指定索引的工作表设置名称</li>
<li><code>XSSFSheet getSheetAt(int index)</code>   获取指定索引的工作表对象，这个是用来读取文件的时候用的</li>
</ul>
</blockquote>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="读取文件的例子"><a href="#读取文件的例子" class="headerlink" title="读取文件的例子"></a>读取文件的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  File file = <span class="keyword">new</span> File(<span class="string">"F:\\demo1.xlsx"</span>);</div><div class="line"><span class="comment">//创建输入流</span></div><div class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line"><span class="comment">//创建工作簿读取</span></div><div class="line">XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream);</div></pre></td></tr></table></figure>
<h4 id="写入文件的例子"><a href="#写入文件的例子" class="headerlink" title="写入文件的例子"></a>写入文件的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">XSSFWorkbook book=<span class="keyword">new</span> XSSFWorkbook();  <span class="comment">//创建工作簿</span></div><div class="line"></div><div class="line">.....省略写入的内容</div><div class="line"></div><div class="line">FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\demo1.xlsx"</span>);  <span class="comment">//创建输出流</span></div><div class="line"></div><div class="line">book.write(out);     <span class="comment">//写入到指定的文件</span></div><div class="line"></div><div class="line">book.close(); <span class="comment">// 关闭</span></div><div class="line">out.close();</div></pre></td></tr></table></figure>
<h2 id="工作表-sheet"><a href="#工作表-sheet" class="headerlink" title="工作表(sheet)"></a>工作表(sheet)</h2><blockquote>
<p>工作表对应的类为<code>XSSFSheet</code>,2007之前对应的是HSSFSheet<br>一般工作表都是在工作簿基础上创建的，因此构造函数也用不到，所以这里就不多说了</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><p><code>int    addMergedRegion(CellRangeAddress region)</code>  合并单元格</p>
</li>
<li><p><code>XSSFRow    createRow(int rownum)</code>   创建一个行   rownum表示创建第几行，这是一个行的索引(0开始)  便于写入</p>
</li>
<li><p><code>XSSFRow getRow(int index)</code>  获取指定索引的那一行，便于读取</p>
</li>
<li><p><code>int getLastRowNum()</code>     获取文件中最后一行的索引，这个通常在读取的时候用到</p>
</li>
<li><p><code>int getFirsetRowNum()</code>   获取文件第一行的索引</p>
</li>
</ul>
</blockquote>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建工作簿对象</span></div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">        XSSFSheet sheet = workbook.createSheet(<span class="string">"第一张表"</span>);   <span class="comment">//创建工作表对象</span></div><div class="line"></div><div class="line">        <span class="comment">//合并单元格    CellRangeAddress cell=new CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol) </span></div><div class="line">        <span class="comment">//这里表示合并第一行的1-10列</span></div><div class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>));</div></pre></td></tr></table></figure>
<h4 id="创建一行"><a href="#创建一行" class="headerlink" title="创建一行"></a>创建一行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">XSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">XSSFSheet sheet = workbook.createSheet(<span class="string">"第一张表"</span>);   <span class="comment">//创建工作表对象</span></div><div class="line">XSSFRow row=sheet.createRow(<span class="number">0</span>);   <span class="comment">//创建第一行</span></div></pre></td></tr></table></figure>
<h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><blockquote>
<p>行对应的类为<code>XSFFRow</code>,2007之前对应的是HSSFRow</p>
</blockquote>
<h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>XSSFCell    createCell(int columnIndex)</code>  创建一列  columnIndex表示列的索引(0开始)</p>
</li>
<li><p><code>short    getFirstCellNum()</code>   返回文件中第一个列的索引，便于以后读取</p>
</li>
<li><p><code>short    getLastCellNum()</code>   返回全部的列数(不是索引)，这个和Sheet中getRowNum()方法不同，便于以后读取文件</p>
</li>
<li><p><code>XSSFCell    getCell(int cellnum)</code>    获取指定索引的那一列，便于以后的读取</p>
</li>
<li><p><code>XSSCellStyle getCellStyle()</code>   获取单元格风格的对象</p>
</li>
<li><p><code>void setCellStyle(XSSFCellStyle style)</code>  将设置的风格样式添加到单元格中，否则将不会起作用</p>
</li>
</ul>
</blockquote>
<h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><blockquote>
<p>列对应的类为<code>XSSFCell</code>,2007之前对应的是HSSFCell</p>
</blockquote>
<h3 id="常用的单元格类型"><a href="#常用的单元格类型" class="headerlink" title="常用的单元格类型"></a>常用的单元格类型</h3><blockquote>
<p>常用的单元格的类型有字符串，数字，布尔值，空值，可以使用<code>XSSFCell</code>的<code>int getCellType()</code> 方法获取类型</p>
<ul>
<li><code>CELL_TYPE_BLANK</code> 空值</li>
<li><code>CELL_TYPE_STRING</code>  字符串</li>
<li><code>CELL_TYPE_NUMERIC</code>   数字(浮点值，整型)</li>
<li><code>CELL_TYPE_BOOLEAN</code> 布尔值(True,FALSE)</li>
</ul>
</blockquote>
<h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>int getCellType()</code>获取单元格类型  可以和常用的单元格类型进行比较，然后使用不同的读取方法读取</p>
</li>
<li><p><code>XSSFCellStyle    getCellStyle()</code>   获取单元格风格对象，便于后面设置单元格的风格</p>
</li>
<li><p><code>setCellValue(Object value)</code>  设置单元格的内容，可以是任意类型的</p>
</li>
<li><p><code>java.util.Date    getDateCellValue()</code>   读取单元格的日期内容</p>
</li>
<li><p><code>String    getStringCellValue()</code>   读取单元格中的字符串内容</p>
</li>
<li><p><code>double    getNumericCellValue()</code>    读取单元格中的数字类型的内容</p>
</li>
<li><p><code>boolean    getBooleanCellValue()</code>   获取单元格中的布尔类型的内容</p>
</li>
</ul>
</blockquote>
<h2 id="设置单元格样式"><a href="#设置单元格样式" class="headerlink" title="设置单元格样式"></a>设置单元格样式</h2><blockquote>
<p>对应的类为<code>XSSFCellStyle</code></p>
</blockquote>
<h3 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><p><code>void    setAlignment(HorizontalAlignment align)</code>   设置水平对齐方式 </p>
</li>
<li><p><code>void    setVerticalAlignment(VerticalAlignment align)</code>   设置垂直的对齐方式</p>
</li>
<li><p><code>void    setTopBorderColor(XSSFColor color)</code>   设置上边框的颜色(还有Left,right..)</p>
</li>
<li><p><code>void    setFont(Font font)</code>   设置字体  这里的Font是org.apache.poi.ss.usermodel.Font</p>
</li>
<li><p><code>void    setBorderTop(BorderStyle border)</code>   设置上边框的样式，在BorderStyle类中有很多的样式</p>
</li>
<li><p><code>void    setRotation(short rotation)</code> 设置文字的旋转度数</p>
</li>
</ul>
</blockquote>
<h2 id="单元格字体的设置"><a href="#单元格字体的设置" class="headerlink" title="单元格字体的设置"></a>单元格字体的设置</h2><blockquote>
<p>对应的类为<code>XSSFFont</code></p>
</blockquote>
<h3 id="常用的方法-4"><a href="#常用的方法-4" class="headerlink" title="常用的方法:"></a>常用的方法:</h3><blockquote>
<ul>
<li><p><code>void    setBold(boolean bold)</code>  是否设置加粗</p>
</li>
<li><p><code>void    setItalic(boolean italic)</code>   设置是否倾斜</p>
</li>
<li><p><code>void    setUnderline(FontUnderline underline)</code> 设置下划线</p>
</li>
<li><p><code>void    setStrikeout(boolean strikeout)</code>   设置是否带有删除线</p>
</li>
<li><p><code>void    setColor(XSSFColor color)</code>   设置字体的颜色,只需要调用XSSFColor静态颜色变量即可</p>
</li>
<li><p><code>void    setFontHeight(double height)</code>   设置字体高度</p>
</li>
<li><p><code>void    setFontHeightInPoints(short height)</code> 设置字号</p>
</li>
<li><p><code>void    setFontName(java.lang.String name)</code>   设置字体样式(黑体，楷体…)</p>
</li>
</ul>
</blockquote>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.util.HSSFColor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.FontUnderline;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.HorizontalAlignment;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.VerticalAlignment;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFColor;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFFont;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(); <span class="comment">// 创建工作簿</span></div><div class="line">		XSSFSheet sheet = workbook.createSheet(<span class="string">"第一个工作表"</span>); <span class="comment">// 创建一个工作表</span></div><div class="line">		XSSFCellStyle style = workbook.createCellStyle(); <span class="comment">// 创建单元格风格对象</span></div><div class="line">		sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>)); <span class="comment">// 合并第一行的单元格</span></div><div class="line">		style.setAlignment(HorizontalAlignment.CENTER); <span class="comment">// 设置水平居中</span></div><div class="line">		style.setVerticalAlignment(VerticalAlignment.CENTER); <span class="comment">// 设置垂直居中</span></div><div class="line"></div><div class="line">		XSSFFont font = workbook.createFont(); <span class="comment">// 创建字体的对象</span></div><div class="line">		font.setFontName(<span class="string">"黑体"</span>); <span class="comment">// 设置字体的样式为黑体</span></div><div class="line">		font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">20</span>); <span class="comment">// 设置字体的大小</span></div><div class="line">		font.setBold(<span class="keyword">true</span>); <span class="comment">// 设置粗体</span></div><div class="line">		font.setItalic(<span class="keyword">true</span>); <span class="comment">// 设置倾斜</span></div><div class="line">		font.setColor(HSSFColor.RED.index); <span class="comment">// 设置字体的颜色</span></div><div class="line">		font.setUnderline(FontUnderline.SINGLE); <span class="comment">// 设置下划线</span></div><div class="line">		font.setStrikeout(<span class="keyword">false</span>); <span class="comment">// 设置不带下划线</span></div><div class="line"></div><div class="line">		style.setFont(font); <span class="comment">// 将设置的字体添加到单元格样式中，显示出来</span></div><div class="line"></div><div class="line">		XSSFRow row1 = sheet.createRow(<span class="number">0</span>); <span class="comment">// 创建第一个行</span></div><div class="line">		XSSFCell cell1 = row1.createCell(<span class="number">0</span>); <span class="comment">// 创建第一行的第一列</span></div><div class="line">		cell1.setCellStyle(style); <span class="comment">// 将上面定义的风格设置到这个单元格中，这个是必须有的，否则根本不起作用</span></div><div class="line">		cell1.setCellValue(<span class="string">"员工信息表"</span>); <span class="comment">// 设置单元格的内容</span></div><div class="line"></div><div class="line">		<span class="comment">// 设置第二行的前三列的值</span></div><div class="line">		XSSFRow row2 = sheet.createRow(<span class="number">1</span>);</div><div class="line">		row2.createCell(<span class="number">0</span>).setCellValue(<span class="string">"姓名"</span>);</div><div class="line">		row2.createCell(<span class="number">1</span>).setCellValue(<span class="string">"性别"</span>);</div><div class="line">		row2.createCell(<span class="number">2</span>).setCellValue(<span class="string">"年龄"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 设置第三行的前三列</span></div><div class="line">		XSSFRow row3 = sheet.createRow(<span class="number">2</span>);</div><div class="line">		row3.createCell(<span class="number">0</span>).setCellValue(<span class="string">"陈加兵"</span>);</div><div class="line">		row3.createCell(<span class="number">1</span>).setCellValue(<span class="string">"男"</span>);</div><div class="line">		row3.createCell(<span class="number">2</span>).setCellValue(<span class="number">22</span>); <span class="comment">// 设置数字</span></div><div class="line"></div><div class="line">		<span class="comment">// 设置第四行的前三列</span></div><div class="line">		XSSFRow row4 = sheet.createRow(<span class="number">3</span>);</div><div class="line">		row4.createCell(<span class="number">0</span>).setCellValue(<span class="string">"郑元梅"</span>);</div><div class="line">		row4.createCell(<span class="number">1</span>).setCellValue(<span class="string">"女"</span>);</div><div class="line">		row4.createCell(<span class="number">2</span>).setCellValue(<span class="number">22</span>); <span class="comment">// 设置数字</span></div><div class="line"></div><div class="line">		<span class="comment">// 创建输出流对象</span></div><div class="line">		FileOutputStream stream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(</div><div class="line">				<span class="string">"F:\\demo2.xlsx"</span>));</div><div class="line">		workbook.write(stream); <span class="comment">// 写入文件</span></div><div class="line">		workbook.close(); <span class="comment">// 关闭</span></div><div class="line">		stream.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="写入文件-1"><a href="#写入文件-1" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo1</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"F:\\demo2.xlsx"</span>);</div><div class="line">		FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file); <span class="comment">// 创建输入流</span></div><div class="line">		XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream); <span class="comment">// 创建读取工作簿的对象</span></div><div class="line">		XSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>); <span class="comment">// 获取第一个工作表的对象</span></div><div class="line"></div><div class="line">		<span class="comment">// 第一次循环取得所有的行的对象 getLastRowNum()是得到最后一行的索引</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sheet.getLastRowNum(); i++) &#123;</div><div class="line">			XSSFRow row = sheet.getRow(i); <span class="comment">// 获取每一行的对象</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row.getLastCellNum(); j++) &#123;</div><div class="line">				XSSFCell cell = row.getCell(j); <span class="comment">// 获取每一行的每一列</span></div><div class="line">				<span class="keyword">int</span> type = cell.getCellType(); <span class="comment">// 获取每一个单元格对应的类型</span></div><div class="line">				<span class="keyword">switch</span> (type) &#123;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_BOOLEAN:   <span class="comment">//如果是布尔类型</span></div><div class="line">					<span class="keyword">boolean</span> b=cell.getBooleanCellValue();</div><div class="line">					System.out.print(b + <span class="string">"    "</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_NUMERIC:  <span class="comment">//如果是数字类型</span></div><div class="line">					<span class="keyword">double</span> d=cell.getNumericCellValue();   <span class="comment">//获取值</span></div><div class="line">					System.out.print( d+ <span class="string">"    "</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_STRING:  <span class="comment">//如果是字符串类型的</span></div><div class="line">					String s=cell.getStringCellValue();</div><div class="line">					System.out.print( s+ <span class="string">"   "</span>);   </div><div class="line">				<span class="keyword">case</span> XSSFCell.CELL_TYPE_BLANK:   <span class="comment">//如果是空值</span></div><div class="line">					System.out.print(<span class="string">"      "</span>);</div><div class="line">				<span class="keyword">default</span>:</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		workbook.close();  <span class="comment">//关闭</span></div><div class="line">		inputStream.close();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><p><a href="http://tool.oschina.net/apidocs/apidoc?api=apache-POI" target="_blank" rel="external">POI文档</a></p>
</li>
<li><p><a href="http://lsieun.blog.51cto.com/9210464/1836601" target="_blank" rel="external">http://lsieun.blog.51cto.com/9210464/1836601</a></p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Excel的读取和写入&quot;&gt;&lt;a href=&quot;#Excel的读取和写入&quot; class=&quot;headerlink&quot; title=&quot;Excel的读取和写入&quot;&gt;&lt;/a&gt;Excel的读取和写入&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;head
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="POI(Excel)" scheme="http://chenjiabing666.github.io/tags/POI-Excel/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结四(EL表达式)</title>
    <link href="http://chenjiabing666.github.io/2017/09/26/JSP%E6%80%BB%E7%BB%93%E5%9B%9B-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2017/09/26/JSP总结四-EL表达式/</id>
    <published>2017-09-26T12:07:16.000Z</published>
    <updated>2017-09-27T06:03:48.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结四-EL表达式"><a href="#JSP总结四-EL表达式" class="headerlink" title="JSP总结四(EL表达式)"></a>JSP总结四(EL表达式)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>JSP页面尽量不要使用<code>scriptlet</code>编写<code>java</code>代码，因此我们可以使用<code>EL</code>表达式可以替代<code>Java</code>语句的使用</p>
</blockquote>
<h2 id="隐含对象"><a href="#隐含对象" class="headerlink" title="隐含对象"></a>隐含对象</h2><h3 id="与属性相关的隐含对象"><a href="#与属性相关的隐含对象" class="headerlink" title="与属性相关的隐含对象"></a>与属性相关的隐含对象</h3><blockquote>
<p>属性的隐含对象有<code>PageScope</code>,<code>requestScop</code>e,<code>sessionScope</code>,<code>applicationScope</code>分别对应的是<code>JSP</code>中的<code>PageContext</code>,<code>request</code>,<code>session</code>,<code>application</code>，因此可以取得<code>JSP</code>对象使用<code>setAttribute()</code>设置的属性，如果没有使用EL隐含对象获取属性的值，那么默认是从<code>PageScope</code>开始寻找</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    request.setAttribute(<span class="string">"login"</span>,<span class="string">'true'</span>);   <span class="comment">//绑定request对象的属性</span></div><div class="line">    session.setAttribute(<span class="string">"login"</span>,<span class="string">'true'</span>);   <span class="comment">//绑定session对象的属性</span></div><div class="line">    application.setAttribute(<span class="string">"login"</span>,<span class="string">"true"</span>);  <span class="comment">//设置application对象的属性</span></div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;%--获取request绑定的属性值  相当于request.getAttribute(<span class="string">"login"</span>);--%&gt;</div><div class="line">&lt;h1&gt;$&#123;requestScope.login&#125;&lt;h1&gt;</div><div class="line"></div><div class="line">&lt;%--获取session绑定的属性值--%&gt;</div><div class="line">&lt;h1&gt;$&#123;sessionScope.login&#125;&lt;h1&gt;</div></pre></td></tr></table></figure>
<h3 id="与请求参数相关的隐含对象-param-paramValues"><a href="#与请求参数相关的隐含对象-param-paramValues" class="headerlink" title="与请求参数相关的隐含对象(param,paramValues)"></a>与请求参数相关的隐含对象(param,paramValues)</h3><blockquote>
<p>与请求参数相关的EL隐含对象有<code>param</code>,<code>paramValues</code>。我们可以使用EL表达式可以获取表单提交的请求参数。</p>
<p>下面我们使用表单提交，测试一下</p>
<blockquote>
<p>JSP代码(表单提交)</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;form action="demo1.jsp" method="get"&gt;</div><div class="line">    姓名:&lt;input type="text" name="username"&gt;</div><div class="line">    密码:&lt;input type="password" name="password"&gt;</div><div class="line">    &lt;input type="submit" value="提交"&gt;</div><div class="line">    </div><div class="line">    爱好:</div><div class="line">    打棒球：&lt;input type="checkbox" name="hobbies"&gt;</div><div class="line">    打羽毛球：&lt;input type="checkbox" name="hobbies"&gt;</div><div class="line">    </div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>demo1.jsp 文件（接收请求参数）</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%--获取提交的请求参数username，password </div><div class="line">    相当于使用如下代码:</div><div class="line">        request.getParameter("username");</div><div class="line">        request.getParameter("password");</div><div class="line">--%&gt;</div><div class="line">&lt;h1&gt;$&#123;param.username&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;param.password&#125;&lt;/h1&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;%--获取多选框的值  相当于使用下面的代码:</div><div class="line">    request.getParameterValues("hobbies")[0]</div><div class="line">--%&gt;</div><div class="line">&lt;h1&gt;$&#123;paramValues.hobbies[0]&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;paramValues.hobbies[1]&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h3 id="与标头-Header-相关的隐含对象"><a href="#与标头-Header-相关的隐含对象" class="headerlink" title="与标头(Header)相关的隐含对象"></a>与标头(Header)相关的隐含对象</h3><blockquote>
<p>如果想要取得用户请求的表头数据，那么使用<code>header</code>或者<code>headerValues</code>隐含对象。例如使用<code>${header[&quot;User-Agent&quot;]}</code> 这个相当于使用<code>&lt;%=request.getHeader(&quot;User-Agent&quot;)%&gt;</code>。 <code>HeaderValues</code>对象相当于使用<code>request.getHeaders()</code>  </p>
</blockquote>
<h3 id="cookie隐含对象"><a href="#cookie隐含对象" class="headerlink" title="cookie隐含对象"></a>cookie隐含对象</h3><blockquote>
<p><code>cookie</code>的隐含对象可以取得用户设置的<code>Cookie</code>设置的值。如果在<code>Cookie</code>中设置了<code>username</code>属性，那么可以使用<code>${cookie.username}</code></p>
</blockquote>
<h3 id="初始参数隐含对象"><a href="#初始参数隐含对象" class="headerlink" title="初始参数隐含对象"></a>初始参数隐含对象</h3><blockquote>
<p>隐含对象<code>initParam</code>可以用来取得<code>web.xml</code>中设置的<code>ServletContext</code>初始参数，也就是在<code>&lt;context-param&gt;</code>中设置的初始参数。例如<code>${initParam.initcount}</code>的作用，相当于<code>&lt;%=ServletContext.getInitParameter(&quot;initCount&quot;)%&gt;</code></p>
</blockquote>
<h2 id="EL运算符"><a href="#EL运算符" class="headerlink" title="EL运算符"></a>EL运算符</h2><blockquote>
<p>使用EL运算符直接实现一些算术运算符，逻辑运算符，就如同一般常见的程序语言中的运算</p>
</blockquote>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote>
<p>可以直接使用加减乘除 <code>${1+2}</code>,<code>${5/2}</code>,<code>${5*3}</code></p>
</blockquote>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote>
<p><code>${true and false}=false</code>,<code>${true and true}=true</code>,<code>${true or false}=true</code></p>
</blockquote>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><blockquote>
<p>可以直接在EL表达式比较大小，返回的也是<code>false</code>和<code>true</code>，可以用来判断，如下：<br><code>${1&lt;2}=false</code> ,<code>${(10*10)&gt;200}=true</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;c:if text="$&#123;6&gt;5&#125;"&gt;</div><div class="line">    &lt;c:out value="可以直接使用EL表达式进行比较"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结四-EL表达式&quot;&gt;&lt;a href=&quot;#JSP总结四-EL表达式&quot; class=&quot;headerlink&quot; title=&quot;JSP总结四(EL表达式)&quot;&gt;&lt;/a&gt;JSP总结四(EL表达式)&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结三(JSTL核心标签库的使用)</title>
    <link href="http://chenjiabing666.github.io/2017/09/22/JSP%E6%80%BB%E7%BB%93%E4%B8%89-JSTL%E6%A0%B8%E5%BF%83%E6%A0%87%E7%AD%BE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2017/09/22/JSP总结三-JSTL核心标签库的使用/</id>
    <published>2017-09-22T06:39:43.000Z</published>
    <updated>2017-10-01T07:58:08.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结三-JSTL核心标签库的使用"><a href="#JSP总结三-JSTL核心标签库的使用" class="headerlink" title="JSP总结三(JSTL核心标签库的使用)"></a>JSP总结三(JSTL核心标签库的使用)</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>其实在我们编写JSP网页的时候是不希望在JSP页面中出现Java代码的，这里我们就要使用<code>JSTL</code>的核心标签库来实现。</p>
<p>想要使用JSTL，一定要填上这句话：<code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</code></p>
</blockquote>
<h2 id="属性处理与输出标签"><a href="#属性处理与输出标签" class="headerlink" title="属性处理与输出标签"></a>属性处理与输出标签</h2><h3 id="属性处理标签"><a href="#属性处理标签" class="headerlink" title="属性处理标签"></a>属性处理标签</h3><blockquote>
<p>在定义变量的时候，我们难免会用到Java代码，但是这里我们介绍<code>&lt;c:set&gt;</code>标签，这个能够实现变量的定义</p>
<p><code>&lt;c:set&gt;</code>标签中的属性有 <code>var</code>(定义的变量)、<code>value</code>(变量的值)、<code>target</code>(为JavaBean对象赋值的时候使用)、<code>scope</code>(设置变量的存活范围，有<code>request</code>,<code>session</code>,<code>application</code>,<code>page</code>)、<code>property</code>(<code>JavaBean</code>的变量)</p>
<p>使用<code>set</code>标签相当于调用存活范围内的<code>setAttribute()</code>方法来绑定属性</p>
<ul>
<li>定义一个普通的变量:   </li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--x的值为10，这句话相当于String x="10" --%&gt;</div><div class="line">&lt;c:set var="x" value="10"&gt;&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>定义<code>session</code>范围的变量(当然还可以定义其他存活范围的变量，这里就不一一讲了)</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--seesion范围的变量代表整个会话期间都是可以共享这个变量的，相当于下面这句话：</div><div class="line">        session.setAttribute("x",100);</div><div class="line">        在另外一个JSP文件中可以使用下面的语句得到其中的值：</div><div class="line">        </div><div class="line">        session.getAttribute("x");</div><div class="line">        &lt;c:out value="$&#123;sessionScope.x&#125;"&gt;&lt;/c:out&gt;</div><div class="line">--%&gt;</div><div class="line">&lt;c:set var="x" value="100" scope="session"&gt;&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>设置<code>JavaBean</code>对象的值：</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%--获取JavaBean的对象person,如果没有那么就是直接创建一个对象，范围为session,下面可以用到 --%&gt;</div><div class="line">&lt;jsp:useBean id="person" class="com.Person" scope="session"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">&lt;%-- target是对象的person，这里使用EL表达式，得到session范围内的Person对象 --%&gt;</div><div class="line">&lt;c:set target="$&#123;sessionScope.person &#125;" property="username" value="陈加兵"&gt;&lt;/c:set&gt;</div><div class="line"></div><div class="line">&lt;%-- 输出变量的username的值，这里使用的EL表达式  相当于  session.getAttribute("person").getUsername() --%&gt;</div><div class="line">&lt;c:out value="$&#123;sessionScope.person.username &#125;"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>如果设置的值太冗长了，那么可以在标签体的中间设置</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:set scope="request"&gt;陈加兵&lt;/c:set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>移除变量 使用的是<code>&lt;c:remove&gt;</code>(一定要指定存活范围)</li>
</ul>
</blockquote>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%--移除session范围内的变量x  相当于  session.removeAttribute(<span class="string">"x"</span>)  </div><div class="line">    这里一定要指定范围</div><div class="line">--%&gt;</div><div class="line">&lt;c:remove var=<span class="string">"x"</span> scope=<span class="string">"session"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="输出标签"><a href="#输出标签" class="headerlink" title="输出标签"></a>输出标签</h3><blockquote>
<p><code>&lt;c:out&gt;</code>相当于<code>out.println()</code>方法，是一个用来向网页中输出内容的</p>
<p>其中的属性有<code>value</code> (输出的内容，其中可以是JEL的${}或者一个字符串) ，<code>escapeXml</code>(这个使用来控制是否将输出的内容中有<code>html</code>标签的是否用替代字符替换，默认为<code>true</code>表示用替代字符替换),<code>default</code>(如果输出的内容为<code>null</code>或者为空的时候那么就直接不显示任何内容，但是我们可以定义<code>default</code>的值来默认显示的值)</p>
<ul>
<li>使用<code>EL</code>表达式输出</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--输出request范围内的属性x   相当于 out.println(request.getAttribute("x"))--%&gt;</div><div class="line">&lt;c:out value="$&#123;requestScope.x&#125;"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>直接使用字符串输出一个值</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;c:out value="我是陈加兵"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>输出<code>html</code>语句</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--设置escapeXml为false--%&gt;</div><div class="line">&lt;c:out value="&lt;h1&gt;我是陈加兵&lt;/h1&gt;" escapeXml="false"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>指定输出的默认的内容</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%--如果$&#123;param.username&#125;为空，那么就输出0--%&gt;</div><div class="line">&lt;c:out value="$&#123;param.username&#125;" default="0"&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<h2 id="流程处理标签"><a href="#流程处理标签" class="headerlink" title="流程处理标签"></a>流程处理标签</h2><blockquote>
<p>流程处理就是判断，循环语句</p>
</blockquote>
<h3 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h3><blockquote>
<p><code>&lt;c:if&gt;</code>可以判断语句是否正确，如果正确即可执行，但是这个标签没有<code>else</code>语句，只能处理判断为正确的结果<br>其中的属性有<code>test</code>，这个是设置判断条件的，如果为<code>true</code>即可执行，反之不执行，<code>var</code>是保留判断结果的<br><code>test</code>中的判断条件既可以是<code>EL</code>表达式也可以是<code>&lt;%=%&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &lt;c:set var="salary" value="$&#123;3000 &#125;"&gt;&lt;/c:set&gt;</div><div class="line"></div><div class="line">&lt;%-- test中写的是判断条件，如果为true那么才执行，这里写的是EL表达式，当然也是可以用&lt;%=%&gt; --%&gt;</div><div class="line">   </div><div class="line">&lt;c:if test="$&#123;salary&gt;2000 &#125;"&gt;</div><div class="line">	&lt;c:out value="这个员工的工资大于2000"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>
<h3 id="高级判断"><a href="#高级判断" class="headerlink" title="高级判断"></a>高级判断</h3><blockquote>
<p>前面的说过的<code>&lt;c:if&gt;</code>仅仅当判断为真时才执行，但是我们想要当不为真时也执行语句，这时我们要使用<code>&lt;c:choose&gt;</code>,<code>&lt;c:when&gt;</code>,<code>&lt;c:otherwise&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   &lt;%--  判断题必须在choose中 --%&gt;</div><div class="line">&lt;c:choose&gt;</div><div class="line">	&lt;%-- 如果提交的username和password都对的话，那么就登录成功  相当于if --%&gt;</div><div class="line">	&lt;c:when test='$&#123;param.username=="陈加兵" &amp;&amp; param.password=="123456"&#125;'&gt;</div><div class="line">		&lt;h1&gt;</div><div class="line">			&lt;c:out value="$&#123;param.username &#125;"&gt;&lt;/c:out&gt;</div><div class="line">			登录成功</div><div class="line">		&lt;/h1&gt;</div><div class="line">	&lt;/c:when&gt;</div><div class="line"></div><div class="line">	&lt;%--	相当于else --%&gt;</div><div class="line">	&lt;c:otherwise&gt;</div><div class="line">		&lt;h1&gt;</div><div class="line">			&lt;c:out value="$&#123;param.username &#125;"&gt;&lt;/c:out&gt;</div><div class="line">			登录失败</div><div class="line">		&lt;/h1&gt;</div><div class="line">	&lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
<h2 id="网页导入和重定向标签"><a href="#网页导入和重定向标签" class="headerlink" title="网页导入和重定向标签"></a>网页导入和重定向标签</h2><h3 id="网页导入标签"><a href="#网页导入标签" class="headerlink" title="网页导入标签"></a>网页导入标签</h3><blockquote>
<p>之前学过JSP中的网页导入，一个是静态导入，一个是动态导入，详情请看上篇文章。</p>
<p>在JSTL中也有一个标签(<code>&lt;c:import&gt;</code>)，用于动态导入网页,并且还可以使用&lt;<code>c:param</code>&gt;设置传入的参数</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &lt;%-- url就是要导入的网页，name是设置初始值的变量，value是设置的值。在demo1.jsp中可以使用        request.getParameter(String name)取得参数 --%&gt;</div><div class="line">&lt;c:import url="demo1.jsp"&gt;</div><div class="line">	&lt;c:param name="username" value="陈加兵"&gt;&lt;/c:param&gt;</div><div class="line">	&lt;c:param name="password" value="123456"&gt;&lt;/c:param&gt;</div><div class="line">&lt;/c:import&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>除了导入<code>web</code>应用程序中的网页，我们还可以导入非目前<code>web</code>应用程序中的网页</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%--导入百度的首页，并且设置字符集为utf-8，注意这里一定要设置网页的字符集格式和当前的jsp格式一样，否则会出现乱码--%&gt;</div><div class="line">&lt;c:import url="http://www.baidu.com"&gt;&lt;/c:import charEncoding="utf-8"&gt;</div></pre></td></tr></table></figure>
<h3 id="重定向标签"><a href="#重定向标签" class="headerlink" title="重定向标签"></a>重定向标签</h3><blockquote>
<p>之前的重定向必须使用<code>HttpServletResponse</code>的<code>sendRedirect()</code>方法</p>
<p>现在我们可以使用<code>JSTL</code>标签<code>&lt;c:redirect url&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:redirect url="demo1.jsp"&gt;&lt;/c:rediect&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>当然我们也是可以传入参数的，使用<code>&lt;c:param name=&quot;&quot; value=&quot;&quot;&gt;</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:redirect url="demo1.jsp"&gt;</div><div class="line">    &lt;c:param name="username" value="陈加兵"/&gt;</div><div class="line">&lt;/c:rediect&gt;</div></pre></td></tr></table></figure>
<h2 id="错误处理标签"><a href="#错误处理标签" class="headerlink" title="错误处理标签"></a>错误处理标签</h2><blockquote>
<p>在之前的JSP文件中，必须定义<code>errorPage</code>属性才能跳转到指定的页面或者处理错误</p>
<p>现在我们使用<code>JSTL</code>标签<code>&lt;c:catch&gt;</code>,可以捕捉异常，如果有异常就会将异常对象保存下来</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   &lt;%--捕捉异常，如果有了异常，那么保存在error变量中 --%&gt;</div><div class="line">&lt;c:catch var="error"&gt;</div><div class="line">	$&#123;10/0 &#125;</div><div class="line">&lt;/c:catch&gt;</div><div class="line"></div><div class="line">&lt;%-- 如果捕捉到了异常，那么error就不是null --%&gt;</div><div class="line">&lt;c:if test="$&#123;error!=null &#125;"&gt;</div><div class="line">	&lt;h1&gt;</div><div class="line">		&lt;c:out value="$&#123;error.message &#125;"&gt;&lt;/c:out&gt;</div><div class="line">	&lt;/h1&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure>
<h2 id="迭代标签"><a href="#迭代标签" class="headerlink" title="迭代标签"></a>迭代标签</h2><blockquote>
<p>迭代标签用于数组，集合，列表的输出。</p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p>forEach既可以循环也可以迭代</p>
</blockquote>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote>
<ul>
<li><code>var</code> 变量，用于输出</li>
<li><code>items</code>   将要迭代的对象</li>
<li><code>valueStatus</code>   迭代的状态</li>
<li><code>begin</code>   如果指定了bengin，就在items下标为begin的位置进行迭代</li>
<li><code>end</code>     如果指定了end，那么就在items下表为end的位置结束迭代</li>
<li><code>step</code>    指定迭代的步长，默认的是1</li>
</ul>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">      &lt;!-- 循环输出[0,8]之中的所有的整数 --&gt;</div><div class="line">		&lt;c:forEach var="item" begin="0" end="8"&gt;</div><div class="line">			&lt;c:out value="$&#123;item&#125;"&gt;&lt;/c:out&gt;</div><div class="line">		&lt;/c:forEach&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">		</div><div class="line">		&lt;!-- 循环输出[0,8]之中的所有的整数 ,指定步长为2--&gt;</div><div class="line">		&lt;c:forEach var="item" begin="0" end="8" step="2"&gt;</div><div class="line">			&lt;c:out value="$&#123;item&#125;"&gt;&lt;/c:out&gt;</div><div class="line">		&lt;/c:forEach&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;%</div><div class="line">	List list=new ArrayList();</div><div class="line"> 	for(int i=0;i&lt;3;i++)&#123;</div><div class="line"> 		list.add(i);</div><div class="line"> 	&#125;</div><div class="line">	request.setAttribute("items", list);</div><div class="line"></div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;!-- item是创建的变量用来存储迭代中的值，items是迭代的对象，其中的值使用EL表达式给出 --&gt;</div><div class="line">&lt;c:forEach var="item" items="$&#123;requestScope.items &#125;"&gt;</div><div class="line">	&lt;c:out value="$&#123;item &#125;"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:forEach&gt;</div></pre></td></tr></table></figure>
<h3 id="forTokens"><a href="#forTokens" class="headerlink" title="forTokens"></a>forTokens</h3><blockquote>
<p>用于将一个字符串按照定义的符号分隔出来。</p>
</blockquote>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><blockquote>
<ul>
<li><code>var</code> 变量，用于输出</li>
<li><code>items</code>  将要迭代的string对象</li>
<li><code>delims</code>   指定分隔字符串的分隔符，可以定义多个分隔符</li>
<li><code>varStatus</code>   迭代的状态</li>
<li><code>begin</code>     </li>
<li><code>end</code></li>
<li><code>step</code></li>
</ul>
</blockquote>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">	String str="c,v,d,s,a|v,d";</div><div class="line">	request.setAttribute("str",str);</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;c:forTokens var="item" items="$&#123;requestScope.str &#125;" delims=",|"&gt;</div><div class="line">	&lt;c:out value="$&#123;item &#125;"&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:forTokens&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结三-JSTL核心标签库的使用&quot;&gt;&lt;a href=&quot;#JSP总结三-JSTL核心标签库的使用&quot; class=&quot;headerlink&quot; title=&quot;JSP总结三(JSTL核心标签库的使用)&quot;&gt;&lt;/a&gt;JSP总结三(JSTL核心标签库的使用)&lt;/h1&gt;&lt;h2
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP总结二(动作元素)</title>
    <link href="http://chenjiabing666.github.io/2017/09/20/JSP%E6%80%BB%E7%BB%93%E4%BA%8C-%E5%8A%A8%E4%BD%9C%E5%85%83%E7%B4%A0/"/>
    <id>http://chenjiabing666.github.io/2017/09/20/JSP总结二-动作元素/</id>
    <published>2017-09-20T14:51:42.000Z</published>
    <updated>2017-09-22T02:14:24.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP总结二-动作元素"><a href="#JSP总结二-动作元素" class="headerlink" title="JSP总结二(动作元素)"></a>JSP总结二(动作元素)</h1><h2 id="lt-jsp-include-gt"><a href="#lt-jsp-include-gt" class="headerlink" title="&lt;jsp:include&gt;"></a><code>&lt;jsp:include&gt;</code></h2><blockquote>
<p>前面介绍了一种指令元素<code>include</code>，那是一种静态包含<code>JSP</code>文件，这个标签是动态包含一个<code>JSP</code>页面，也就是被包含的<code>JSP</code>页面和原JSP将合并在一起，转译为一个<code>Servlet</code>类。这是有一定的局限性的，如变量的定义不能重复。</p>
<p>动态的包含JSP文件即是被包含的JSP和原JSP分别转译为一个Servlet类，这就保证了其中的变量可以重复定义了，因为并不是在一个类中了</p>
<p><code>&lt;jsp:include page=&quot;相对的文件路径&quot;&gt;&lt;/jsp:include&gt;</code>这种标签转译为Servlet和指令元素<code>include</code>是一样的</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;%--动态导入在编译的时候是两个jsp文件各自编译成一个Servlet文件，因此其中的变量是不可以共享的，在当前页面中还是可以定义导入页面定义的变量 --%&gt;</div><div class="line">&lt;jsp:include page="form.jsp"&gt;</div><div class="line">    //定义的param可以在form.jsp中使用request.getParameter(String name)取得其中的值</div><div class="line">    &lt;jsp:param value="陈加兵" name="username"/&gt;</div><div class="line">    &lt;jsp:param value="123456" name="password"/&gt;</div><div class="line">&lt;/jsp:include&gt;</div></pre></td></tr></table></figure>
<h2 id="lt-jsp-forward-gt"><a href="#lt-jsp-forward-gt" class="headerlink" title="&lt;jsp:forward&gt;"></a><code>&lt;jsp:forward&gt;</code></h2><blockquote>
<p>这是将请求转发给另外一个JSP或者Servlet文件处理，这个和<code>RequestDispatcher</code>是一样的原理，就是Servlet中转发<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//绑定属性，在login.jsp中可以获取</div><div class="line">request.setAttribute("username","陈加兵");</div><div class="line"></div><div class="line">//当前页面的请求将会交给login.jsp文件处理</div><div class="line">&lt;jsp:forward page='login.jsp'&gt;&lt;/jsp:forward&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="lt-jsp-useBean-gt"><a href="#lt-jsp-useBean-gt" class="headerlink" title="&lt;jsp:useBean&gt;"></a><code>&lt;jsp:useBean&gt;</code></h2><blockquote>
<p>这个动作元素是用来搭配<code>JavaBean</code>组件的标准标签。<br><code>JavaBean</code>必须满足下面的条件：</p>
<blockquote>
<ul>
<li>必须实现<code>Java.io.Serializable</code>接口</li>
<li>没有公开的(<code>public</code>)类变量</li>
<li>具有无参构造函数（默认的都有）</li>
<li>具有公开的设置方法（<code>setter</code>）与取值方法（<code>getter</code>）</li>
</ul>
</blockquote>
<p>下面就是一个<code>JavaBean</code>组件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//这里的变量的值一定要和表单的中的name属性的值一样，否则不能获取</span></div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">Checkout</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"陈加兵"</span>.equals(username)&amp;&amp;<span class="string">"123456"</span>.equals(password);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用<code>JavaBean</code>的目的是减少<code>Scriptlet</code>的使用。其中搭配<code>&lt;jsp:useBean&gt;</code>来使用这个<code>JavaBean</code>,并且使用<code>&lt;jsp:setProperty&gt;</code>与<code>&lt;jsp:getProperty&gt;</code>对<code>javaBean</code>进行设值与取值</p>
<p>注意<code>javaBean</code>一定要搭配表单使用，因为设值的值其实是隐式的调用<code>request.getParameter(String name)</code>来获取表单的值</p>
<p>下面是一个登录的表单(注意这里的<code>input</code>中的<code>name</code>属性的值一定要和<code>JavaBean</code>组件类的成员变量的名字一样)</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;!--提交给Demo1.jsp处理，下面就实现Demo1.jsp--&gt;</div><div class="line">&lt;form action="Demo1.jsp"&gt;</div><div class="line">	&lt;label&gt;姓名：&lt;/label&gt;</div><div class="line">	&lt;input type="text" name="username"&gt;</div><div class="line">	&lt;label&gt;密码：&lt;/label&gt;</div><div class="line">	&lt;input type="password" name="password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>下面我们写一个<code>JSP</code>文件设置<code>JavaBean</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;%--使用JavaBean person是Person创建的对象，相当于 Person person=new Person() </div><div class="line">		其中class是JavaBean的类所在的路径(在com包下的Person文件中)</div><div class="line">		id就是相当于创建的对象</div><div class="line">	--%&gt;</div><div class="line">	&lt;jsp:useBean id="person" class="com.Person"&gt;&lt;/jsp:useBean&gt;</div><div class="line">	</div><div class="line">	&lt;%--为username和password设置值,相当于下面的语句</div><div class="line">	person.setUsername(request.getParameter("username"));</div><div class="line">	person.setPassword(request.getParameter("password"));</div><div class="line">	JavaBean中的变量一定要和表单中的值一样，否则就不能对应，出现错误 </div><div class="line">	其中name就是指定上面的id，即是使用的对象，property就是指定变量</div><div class="line">	--%&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="uesrname" name="person"/&gt;</div><div class="line">	&lt;jsp:setProperty property="password" name="person"/&gt;</div><div class="line">	</div><div class="line">	&lt;%--age是另外的变量，并没有对应着表单的name属性，因此我们可以单独的为其设置值，使用value实行即可设置，这里不必考虑类型，因为在内部会自动转换成JavaBean中的类型 --%&gt;</div><div class="line">	&lt;jsp:setProperty property="age" name="person" value="20"/&gt;</div><div class="line">	</div><div class="line">	&lt;%--获取设置的值，相当于下面的语句：</div><div class="line">		person.getUsername();</div><div class="line">		person.getPassword();</div><div class="line">		person.getAge();</div><div class="line">	 --%&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="username" name="person" /&gt;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="password" name="person" /&gt;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;&lt;jsp:getProperty property="age" name="person" /&gt;&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>其实我们还可以不但可以将表单中的值赋值给变量，还可以使用<code>value</code>和<code>param</code>自己设置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 将请求的url中的password的值赋值给username，注意这里的使用的get的请求的话，提交的时候url会有请求值的</div><div class="line">		http:<span class="comment">//localhost:8080/web2/JSP/Demo1.jsp?username=%E9%99%88%E5%8A%A0%E5%85%B5&amp;password=123456</span></div><div class="line">	 --%&gt;</div><div class="line">	&lt;jsp:setProperty property=<span class="string">"username"</span> name=<span class="string">"person"</span> param=<span class="string">"password"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;%--age是另外的变量，并没有对应着表单的name属性，因此我们可以单独的为其设置值，使用value实行即可设置，这里不必考虑类型，因为在内部会自动转换成JavaBean中的类型 --%&gt;</div><div class="line">	&lt;jsp:setProperty property=<span class="string">"age"</span> name=<span class="string">"person"</span> value=<span class="string">"20"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="JavaBean的存活范围"><a href="#JavaBean的存活范围" class="headerlink" title="JavaBean的存活范围"></a>JavaBean的存活范围</h2><blockquote>
<p><code>Scope</code>属性决定了javabean对象的存在的范围。可选值有:</p>
<blockquote>
<ol>
<li><code>page</code>(默认值)</li>
<li><p><code>request</code></p>
</li>
<li><p><code>session</code></p>
</li>
<li><p><code>application</code></p>
</li>
</ol>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:useBean id="person" class="com.anllin.bean.Person" scope="page"&gt;&lt;/jsp:useBean&gt;</div></pre></td></tr></table></figure>
<h3 id="在page范围"><a href="#在page范围" class="headerlink" title="在page范围"></a>在page范围</h3><blockquote>
<p>客户每次请求访问<code>jsp</code>页面时，都会创建一个<code>javabean</code>对象。JavaBean对象的有效范围就是当前的<code>jsp</code>文件中，如果不在当前Jsp中，那么就不可以使用该<code>JavaBean</code>对象中设置的值</p>
<p>比如使用<code>forward</code>转发给另外一个JSP文件，那么此时就会再创建一个<code>JavaBean</code>对象，原来页面的JavaBean对象并没有传过来，也就不能使用其中的值，这个和变量的共享是一个道理的，这个JavaBean对象只能在当前的Jsp文件中调用，不能实现共享</p>
</blockquote>
<h3 id="在request范围"><a href="#在request范围" class="headerlink" title="在request范围"></a>在request范围</h3><blockquote>
<p>客户每次请求访问jsp页面时，都会创建新的javabean对象。有效范围为：</p>
<blockquote>
<ul>
<li><p>客户请求访问的当前jsp网页。</p>
</li>
<li><p>和当前网页共享一个客户请求的网页，即当前jsp网页中<code>&lt;%@include %&gt;</code>指令以及<code>&lt;forward&gt;</code>标记包含的其他jsp文件,也就是转发和包含的Jsp文件也是可以共享这个<code>JavaBean</code>对象的，这个和Servlet中的<code>request</code>是一样的，一旦转发了，就可以通过<code>setAttribute()</code>设置属性，那么在转发的页面中就可以访问这个属性</p>
</li>
</ul>
<ul>
<li><p>当所有共享同一个客户请求的jsp页面执行完毕并向客户端发加响应时，javabean对象结束生命周期。</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在<code>httpServletRequest</code>对象中，属性名javabean的<code>id</code>,属性值为<code>javabean</code>对象，因此可以通过<code>HttpRequest.getAttribute()</code>方法取得<code>javabean</code>对象</p>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">    //Demo1.jsp文件  表单请求提交的JSp文件</div><div class="line">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    </div><div class="line">    &lt;%--设置scope属性为request，这个是必须的，这里的JavaBean对象为person--%&gt;</div><div class="line">	&lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="uesrname" name="person"/&gt;</div><div class="line">	&lt;jsp:setProperty property="password" name="person"/&gt;</div><div class="line">	</div><div class="line">	&lt;jsp:setProperty property="age" name="person" value="20"/&gt;</div><div class="line">&gt; </div><div class="line">e    </div><div class="line">    &lt;%--转发请求到Demo2.jsp文件中，那么就可以在Demo.jsp中共享person对象了--%&gt;</div><div class="line">    &lt;jsp:forward page="Demo2.jsp"&gt;&lt;/jsp:forward&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"></div><div class="line">//Demo2.jsp</div><div class="line"></div><div class="line"></div><div class="line">    &lt;%@page import="com.Person"%&gt;</div><div class="line">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">        pageEncoding="UTF-8"%&gt;</div><div class="line">    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    </div><div class="line">    &lt;%-- 使用JavaBean,这里的scope是必须的，一定要和Demo1.jsp一样，id也要一样 --%&gt;</div><div class="line">    &lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;%--获取username的值 --%&gt;</div><div class="line">    &lt;jsp:getProperty property="username" name="person"/&gt;</div><div class="line"></div><div class="line">    &lt;%</div><div class="line">        //使用HttpServletRequest获取对象person</div><div class="line">        Person p=(Person)request.getAttribute("person");</div><div class="line">        out.println(p.getUsername());  //获取username的值</div><div class="line">    %&gt;</div><div class="line"></div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="在session范围内"><a href="#在session范围内" class="headerlink" title="在session范围内"></a>在session范围内</h3><blockquote>
<ul>
<li><p>我们知道<code>HttpSession</code>是可以在会话期间实现数据共享的，只要是同一个项目中的<code>Jsp</code>文件都是可以共享这个JavaBean对象，但是并不是永久的，因为会话也是有时间限制的，</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在HttpSession对象中，属性名为javabean的id,属性值为javabean对象。除了可以通过javabean的id直接引用javabean对象外，也可以通过<code>HttpSession.getAttribute（）</code>方法取得<code>javabean</code>对象</p>
</li>
<li><p>一定要注意在每一个<code>&lt;jsp:useBean&gt;</code>中都要写上<code>scope=&quot;session&quot;</code></p>
</li>
</ul>
</blockquote>
<h3 id="在application范围内"><a href="#在application范围内" class="headerlink" title="在application范围内"></a>在application范围内</h3><blockquote>
<ul>
<li><p>我们知道<code>ServletContext</code>存在于整个web应用的生命周期，这个不像<code>session</code>，一旦设置的会话时间结束，那么就不存在了，这个是永远存在的，只要web程序在继续</p>
</li>
<li><p><code>javabean</code>对象作为属性保存在<code>application</code>对象中，属性名为<code>javabean</code>的id，属性值为javabean对象，除了可以通过javabean的<code>id</code>直接引用对象外，也可以通过javabean的<code>application.getAttribute()</code>方法取得javabean对象</p>
</li>
</ul>
</blockquote>
<h3 id="重要的属性"><a href="#重要的属性" class="headerlink" title="重要的属性"></a>重要的属性</h3><blockquote>
<p>其实<jsp:usebean>不仅仅可以对于表单中请求可以转换为对象的值，上面我们说过了存活范围，其实只要在这个请求范围内，并且将对象绑定到响应的属性上面，那么就可以在jsp文件中使用改标签接收其值。</jsp:usebean></p>
<p>其实一般在表单提交之后，我们会使用Sevlet文件验证是否密码和用户名正确，那么就不是直接提交给jsp文件，此时就像上面说过的，不影响标签的使用，只要将JavaBean对象绑定到响应范围的属性上，便是可以实现对象的共享，代码如下：</p>
<blockquote>
<p>ServletDemo文件</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		<span class="comment">//创建对象，并且设置值</span></div><div class="line">			Person person=<span class="keyword">new</span> Person();</div><div class="line">			person.setUsername(<span class="string">"陈加兵"</span>);</div><div class="line">			person.setPassword(<span class="string">"123456"</span>);</div><div class="line">			</div><div class="line">			<span class="comment">//将JavaBean对象绑定到request上，相当于存活范围为request</span></div><div class="line">			<span class="comment">//注意这里的键值一定要是和对象的名称一样，否则不行</span></div><div class="line">			request.setAttribute(<span class="string">"person"</span>, person);</div><div class="line">			<span class="comment">//转发请求到jsp文件，下面我们就将在jsp文件中使用JavaBean标签接收</span></div><div class="line">			RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">"JSP/demo1.jsp"</span>);</div><div class="line">			dispatcher.forward(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>demo1.jsp:上面文件转发过来的，接收JavaBean对象</p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;%-- 使用标签接收转发过来的JavaBean对象，scope一定要设置为request,id就是传过来的对象，一定要和前面的名称一样，下面的语句相当于：</div><div class="line">	Person person=(Person)request.getAttribute("person");</div><div class="line"> --%&gt;</div><div class="line">&lt;jsp:useBean id="person" class="com.Person" scope="request"&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;&lt;jsp:getProperty property="username" name="person"/&gt;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.cnblogs.com/zfc2201/archive/2011/08/17/2143615.html" target="_blank" rel="external">http://www.cnblogs.com/zfc2201/archive/2011/08/17/2143615.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP总结二-动作元素&quot;&gt;&lt;a href=&quot;#JSP总结二-动作元素&quot; class=&quot;headerlink&quot; title=&quot;JSP总结二(动作元素)&quot;&gt;&lt;/a&gt;JSP总结二(动作元素)&lt;/h1&gt;&lt;h2 id=&quot;lt-jsp-include-gt&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Java-Web" scheme="http://chenjiabing666.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://chenjiabing666.github.io/tags/JSP/"/>
    
  </entry>
  
</feed>
