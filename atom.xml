<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-12-30T05:27:46.613Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker搭建私有仓库</title>
    <link href="http://chenjiabing666.github.io/2018/12/30/docker%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://chenjiabing666.github.io/2018/12/30/docker搭建私有仓库/</id>
    <published>2018-12-30T05:27:20.000Z</published>
    <updated>2018-12-30T05:27:46.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li><code>docker pull registry</code></li>
<li><code>docker run --name registry -p 5000:5000 -d registry</code></li>
<li>启动完成后访问<code>http:// 192.168.174.130:5000/v2/_catalog</code>即可看到如下的内容说明启动成功：</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"repositories"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>添加信任（无论是下载还是上传都需要添加，这里的ip和端口指定的是私有仓库的宿主机的ip）：</strong></p>
<ul>
<li><code>vim /etc/docker/daemon.json</code>，添加如下的内容：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"insecure-registries":["192.168.174.130:5000"]</div></pre></td></tr></table></figure>
<ul>
<li>重启docker ,<code>systemctl restart docker</code></li>
</ul>
</li>
</ul>
<h2 id="上传镜像到私有仓库"><a href="#上传镜像到私有仓库" class="headerlink" title="上传镜像到私有仓库"></a>上传镜像到私有仓库</h2><ul>
<li><code>docker tag jdk8 192.168.174.130:5000/jdk8</code>： 标记该镜像<ul>
<li>指定仓库所在的ip和端口号</li>
<li>第一个jdk8是当前的镜像名称（或者填Id），后一个是上传到仓库中的名字，可以任意起</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>docker images</code>：此时查看镜像，发现多了一个<code>192.168.174.130:5000/jdk8</code>的镜像</p>
</li>
<li><p><code>docker push 192.168.174.130:5000/jdk8</code> ：将标记的镜像上传到私有仓库中</p>
</li>
<li><p>此时再次访问<code>http:// 192.168.174.130:5000/v2/_catalog</code>，将会看到如下内容</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"repositories"</span>: [</div><div class="line">    <span class="string">"jdk8"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><ul>
<li><p>添加信任</p>
<ul>
<li>vim /etc/docker/daemon.json`，添加如下的内容：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"insecure-registries":["192.168.174.130:5000"]</div></pre></td></tr></table></figure>
<ul>
<li>重启docker ,<code>systemctl restart docker</code></li>
</ul>
</li>
</ul>
<ul>
<li>下载，需要指定ip和端口：<code>docker pull 192.168.174.130:5000/jdk8</code></li>
</ul>
<h2 id="Docker-Maven插件自动上传镜像到私有仓库"><a href="#Docker-Maven插件自动上传镜像到私有仓库" class="headerlink" title="Docker Maven插件自动上传镜像到私有仓库"></a>Docker Maven插件自动上传镜像到私有仓库</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><h4 id="仓库所在服务器的配置"><a href="#仓库所在服务器的配置" class="headerlink" title="仓库所在服务器的配置"></a>仓库所在服务器的配置</h4><ul>
<li><p><strong>添加信任，同上</strong></p>
</li>
<li><p>修改 <code>/etc/sysconfig/docker</code>文件：<code>vim /etc/sysconfig/docker</code></p>
<ul>
<li><p>在最下面添加一行<code>DOCKER_OPTS=&#39;-H unix:///var/run/docker.sock -H 0.0.0.0:2375&#39;</code></p>
<ul>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/docker2.png?raw=true" alt=""></li>
</ul>
</li>
</ul>
</li>
<li><code>vim /lib/systemd/system/docker.service</code>添加如下内容<ul>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/docker1.png?raw=true" alt=""></li>
</ul>
</li>
</ul>
<ul>
<li>执行下面的命令刷新配置并且重启docker</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<ul>
<li><p>开启防火墙的端口：<code>firewall-cmd --zone=public --add-port=2375/tcp --permanent</code></p>
</li>
<li><p>重新载入配置<code>firewall-cmd --reload</code></p>
</li>
</ul>
<h4 id="项目中的配置"><a href="#项目中的配置" class="headerlink" title="项目中的配置"></a>项目中的配置</h4><ul>
<li>在pom.xml文件中添加如下内容：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 指定的最终打成jar包的名字 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- SpringBoot的maven插件 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!-- 注意imageName需要指定的`IP:端口/image_name`的格式--&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.174.130:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!-- 指定基础镜像，不需要运行，相当于 from hub.c.163.com/library/java:8-alpine --&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>hub.c.163.com/library/java:8-alpine<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!--覆盖相同标签镜像--&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">forceTags</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceTags</span>&gt;</span>    </div><div class="line">					<span class="comment">&lt;!-- 运行jar包 --&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>["java", "-jar", "/$&#123;project.build.finalName&#125;.jar"]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!-- 指定私有仓库所在服务器的2375端口，之前配置过可以远程访问的那个 --&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.174.130:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>在命令台运行如下的命令，即可完成生成镜像并且上传到私有仓库</strong><ul>
<li><code>mvn clean package docker:build -DpushImage</code></li>
</ul>
</li>
<li><strong>上述命令的解析如下：</strong><ul>
<li><code>mvn clean package</code>：maven打jar包</li>
<li><code>docker:build</code>：docker构建镜像的命令</li>
<li><code>-DpushImage</code>： 将生成的镜像上传到私有仓库中</li>
</ul>
</li>
</ul>
<ul>
<li><strong>执行并且运行成功之后访问<code>http://192.168.174.130:5000/v2/_catalog</code>，将会出现如下的内容</strong></li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"repositories"</span>: [</div><div class="line">    <span class="string">"demo"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>访问<code>http://192.168.174.130:5000/v2/demo/tags/list</code>，可以看到demo这个镜像的所有版本</strong></li>
</ul>
<p><img src="https://github.com/chenjiabing666/BlogImage/blob/master/docker3.png?raw=true" alt=""></p>
<ul>
<li>上面的运行完成之后，查看项目中自动生成Dockerfile，如下：</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> hub.c.<span class="number">163</span>.com/library/java:<span class="number">8</span>-alpine</div><div class="line"><span class="keyword">ADD</span> /demo.jar //</div><div class="line"><span class="keyword">ENTRYPOINT</span> ["java", "-jar", "/demo.jar"]</div></pre></td></tr></table></figure>
<h4 id="拉取上传的镜像并且运行"><a href="#拉取上传的镜像并且运行" class="headerlink" title="拉取上传的镜像并且运行"></a>拉取上传的镜像并且运行</h4><ul>
<li>在拉取之前需要添加信任</li>
<li>使用 <code>docker pull 192.168.174.130:5000/demo:0.0.1-SNAPSHOT</code>下载仓库中的镜像</li>
<li>运行镜像：<code>docker run --name demo -p 7001:7001 -d f7f36f3f3f06</code><ul>
<li><strong>其中生成的镜像端口为项目自己本身配置的端口，只需要映射出去即可</strong></li>
</ul>
</li>
<li>此时我们可以访问<code>http://192.168.174.128:7001/</code>，就能看到eureka注册中心的页面</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li><a href="https://gitee.com/chenjiabing666/docker-maven.git" target="_blank" rel="external">https://gitee.com/chenjiabing666/docker-maven.git</a></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_39623859/article/details/80072545" target="_blank" rel="external">https://blog.csdn.net/qq_39623859/article/details/80072545</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker私有仓库&quot;&gt;&lt;a href=&quot;#Docker私有仓库&quot; class=&quot;headerlink&quot; title=&quot;Docker私有仓库&quot;&gt;&lt;/a&gt;Docker私有仓库&lt;/h1&gt;&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerli
    
    </summary>
    
      <category term="docker" scheme="http://chenjiabing666.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://chenjiabing666.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile</title>
    <link href="http://chenjiabing666.github.io/2018/12/30/Dockerfile/"/>
    <id>http://chenjiabing666.github.io/2018/12/30/Dockerfile/</id>
    <published>2018-12-30T05:26:02.000Z</published>
    <updated>2018-12-30T05:26:37.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><ul>
<li><p>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p>
</li>
<li><p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FROM image:tag</code></td>
<td>指定基础镜像，有点继承的意思</td>
</tr>
<tr>
<td><code>MAINTAINER user_name</code></td>
<td>声明镜像的创建者</td>
</tr>
<tr>
<td><code>ENV key value</code></td>
<td>设置环境变量，可以设置多条,比如 ENV VERSION=1.0</td>
</tr>
<tr>
<td><code>RUN command</code></td>
<td>核心命令，多个命令用&amp;&amp;连接即可</td>
</tr>
<tr>
<td><code>ADD source_dir/file dest_dir/file</code></td>
<td>将宿主机的文件负复制到容器内，如果是一个压缩文件，将会自动解压缩</td>
</tr>
<tr>
<td><code>COPY source_dir/file dest_dir/file</code></td>
<td>和ADD命令类似，但是不能自动解压缩</td>
</tr>
<tr>
<td><code>WORKDIR path_dir</code></td>
<td>指定当前的工作目录，由于分层的概念，每一个命令的工作目录都不同，因此需要使用该命令显示指定工作目录</td>
</tr>
<tr>
<td>CMD args</td>
<td>在构建容器的时候使用，会docker run 后的args覆盖</td>
</tr>
<tr>
<td>ENTRYPOINT  args</td>
<td>和CMD相似，但是不会被docker run后的args覆盖</td>
</tr>
<tr>
<td>VOLUME</td>
<td>将本地文件夹挂载到容器中</td>
</tr>
</tbody>
</table>
<h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><ul>
<li>我们使用阿里云的镜像加速</li>
<li><code>vim /etc/docker/daemon.json</code>,设置如下内容即可：</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="attr">"registry-mirrors"</span>:[<span class="string">"https://rxx4pnmv.mirror.aliyuncs.com"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="构建简单的JDK镜像"><a href="#构建简单的JDK镜像" class="headerlink" title="构建简单的JDK镜像"></a>构建简单的JDK镜像</h2><ul>
<li>新建一个<code>Dockerfile</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 初始镜像,默认拉去lastest的</span></div><div class="line"><span class="keyword">FROM</span> centos</div><div class="line"><span class="comment"># 指定镜像的构建者</span></div><div class="line"><span class="keyword">MAINTAINER</span> chenjiabing666</div><div class="line"><span class="comment"># 切换工作目到usr，这个是容器中的目录</span></div><div class="line"><span class="keyword">WORKDIR</span> /usr</div><div class="line"><span class="comment"># 新建 /usr/local/java目录</span></div><div class="line"><span class="keyword">RUN</span> mkdir /usr/local/java</div><div class="line"><span class="comment"># 添加本地的jdk到容器中并且解压</span></div><div class="line"><span class="keyword">ADD</span> jdk-8u172-linux-x64.tar.gz /usr/local/java/</div><div class="line"><span class="comment"># 设置环境变量</span></div><div class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_181</div><div class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib;$JAVA_HOME/jre/lib</div><div class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin</div></pre></td></tr></table></figure>
<ul>
<li><code>docker build -t jdk8 .</code>：构建镜像</li>
<li><code>docker run --name jdk -di jdk8</code>：运行镜像</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/wo18237095579/article/details/80540571" target="_blank" rel="external">https://blog.csdn.net/wo18237095579/article/details/80540571</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DockerFile&quot;&gt;&lt;a href=&quot;#DockerFile&quot; class=&quot;headerlink&quot; title=&quot;DockerFile&quot;&gt;&lt;/a&gt;DockerFile&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们
    
    </summary>
    
      <category term="docker" scheme="http://chenjiabing666.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://chenjiabing666.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot实现BCrypt密码加密</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/SpringBoot%E5%AE%9E%E7%8E%B0BCrypt%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/SpringBoot实现BCrypt密码加密/</id>
    <published>2018-12-25T13:07:15.000Z</published>
    <updated>2018-12-25T13:07:44.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-实现-BCrypt密码加密"><a href="#SpringBoot-实现-BCrypt密码加密" class="headerlink" title="SpringBoot 实现 BCrypt密码加密"></a>SpringBoot 实现 BCrypt密码加密</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>出于安全的考虑，一些敏感的信息是绝对不能以明文的方式存储在数据库中的，比如密码通常是通过哈希算法进行加密的。有很多标准的算法比如<code>SHA</code>和<code>MD5</code>，结合<code>salt</code>（盐）是一种不错的选择，但是如果知道其加密的规则还是相对不安全。</li>
<li>Spring security提供了<code>BCryptPasswordEncoder</code>类，使用Bcrypt强哈希方法来加密密码</li>
<li><strong>Bcrypt强哈希算法每次加密的结果都是不一样的。</strong></li>
</ul>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul>
<li><code>public String encode(CharSequence rawPassword)</code>： 对给定的内容进行加密，返回加密后的字符串</li>
<li><code>public boolean matches(CharSequence rawPassword, String encodedPassword)</code>： 比较给定的字符串和加密后的字符串是否是同一个<ul>
<li><code>rawPassword</code>：未加密的字符串</li>
<li><code>encodedPassword</code>： 加密后的字符串</li>
</ul>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>引入spring security的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>添加security的配置类，如下:<ul>
<li><strong>在其中注入<code>BCryptPasswordEncoder</code></strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Spring security的配置类</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		http.authorizeRequests()</div><div class="line">		.antMatchers(<span class="string">"/**"</span>)</div><div class="line">		.permitAll()</div><div class="line">		.anyRequest()</div><div class="line">		.authenticated()</div><div class="line">		.and().csrf().disable();</div><div class="line">		<span class="keyword">super</span>.configure(http);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 注入BCryptPasswordEncoder</div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>主配置类添加<code>@EnableWebSecurity</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableWebSecurity</span>   <span class="comment">//开启security</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServerApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>在业务层实现登录和注册的功能 ，对密码进行加密和校验</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> UserRepository userRepository;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;  <span class="comment">//注入bcryct加密</span></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		user.setPassword(bCryptPasswordEncoder.encode(user.getPassword())); <span class="comment">//对密码进行加密</span></div><div class="line">		User user2 = userRepository.save(user);</div><div class="line">		<span class="keyword">return</span> user2;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResultInfo <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		ResultInfo resultInfo=<span class="keyword">new</span> ResultInfo();</div><div class="line">		User user2 = userRepository.findByName(user.getName());  </div><div class="line">		<span class="keyword">if</span> (user2==<span class="keyword">null</span>) &#123;</div><div class="line">			resultInfo.setCode(<span class="string">"-1"</span>);</div><div class="line">			resultInfo.setMessage(<span class="string">"用户名不存在"</span>);</div><div class="line">			<span class="keyword">return</span> resultInfo;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//判断密码是否正确</span></div><div class="line">		<span class="keyword">if</span> (!bCryptPasswordEncoder.matches(user.getPassword(),user2.getPassword())) &#123;</div><div class="line">			resultInfo.setCode(<span class="string">"-1"</span>);</div><div class="line">			resultInfo.setMessage(<span class="string">"密码不正确"</span>);</div><div class="line">			<span class="keyword">return</span> resultInfo;</div><div class="line">		&#125;</div><div class="line">		resultInfo.setMessage(<span class="string">"登录成功"</span>);</div><div class="line">		<span class="keyword">return</span> resultInfo;</div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li><a href="https://gitee.com/chenjiabing666/auth-server.git" target="_blank" rel="external">https://gitee.com/chenjiabing666/auth-server.git</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot-实现-BCrypt密码加密&quot;&gt;&lt;a href=&quot;#SpringBoot-实现-BCrypt密码加密&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 实现 BCrypt密码加密&quot;&gt;&lt;/a&gt;SpringBoot 实现 
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>zuul服务网关</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/zuul%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/zuul服务网关/</id>
    <published>2018-12-25T13:05:22.000Z</published>
    <updated>2018-12-25T13:06:01.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Zuul包含了对请求的路由和过滤两个主要的功能，其中路由功能负责将外部的请求转发到具体的微服务实例上，是实现外部访问统一入口的基础上，而过滤功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。</li>
<li>Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他微服务的信息，也即以后访问微服务都是通过Zuul跳转后获得</li>
<li>代理+路由+过滤三大功能</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>需要和Eureka客户端结合使用，依赖如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--zuul的依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>添加配置，将其注册到eureka中，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9001</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    instance-id:</span> <span class="string">zuul.com</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">zuul</span>   <span class="comment">#应用的名称，在同一个eureka中必须不重复</span></div></pre></td></tr></table></figure>
<ul>
<li>在主启动类上添加<code>@EnableZuulProxy</code>这个注解，如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>  <span class="comment">//开启eurkea客户端</span></div><div class="line"><span class="meta">@EnableZuulProxy</span>   <span class="comment">//开启zuul</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptGetWayZuul9001Application</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>启动即可，在eureka中看到注册进入即可</li>
<li><strong>之后只需要通过zuul访问其他的微服务提供者即可，比如服务提供者的实例名称为<code>dept-provider</code>，那么通过zuul访问的路径为<code>http://localhost:9001/dept-provider/dept/1</code></strong></li>
</ul>
<h2 id="路由映射规则"><a href="#路由映射规则" class="headerlink" title="路由映射规则"></a>路由映射规则</h2><h3 id="代理名称"><a href="#代理名称" class="headerlink" title="代理名称"></a>代理名称</h3><ul>
<li>之前的配置访问的还是需要带上微服务的实例名称，但是我们不想微服务的实例名称暴露，那么此时就需要使用代理名称替代，配置如下:<ul>
<li>使用<code>ignored-services</code>忽略真实的服务名称访问，可以同时指定多个，其中服务名称必须和服务配置文件中一样，不能使用和</li>
<li>在routes下指定多个路由映射规则</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line">  <span class="comment"># 忽略真实的服务名称实例访问，是一个Set集合，可以指定多个，取消全部使用 "*"即可</span></div><div class="line"><span class="attr">  ignored-services:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">order-provider</span></div><div class="line">  <span class="comment">#routes下面指定代理规则，可以同时指定多个</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment">#指定第一个规则，这里的名称任意</span></div><div class="line"><span class="attr">    api-order:</span></div><div class="line">      <span class="comment">#指定的实例名称</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">order-provider</span></div><div class="line">      <span class="comment">#指定可以访问的路由</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-order/**</span></div></pre></td></tr></table></figure>
<ul>
<li>按照上面的配置完成之后就可以直接使用映射的路由访问即可，如：<code>http://zuul.com:9001/api-dept/dept/1</code></li>
</ul>
<h2 id="设置统一前缀"><a href="#设置统一前缀" class="headerlink" title="设置统一前缀"></a>设置统一前缀</h2><ul>
<li>我们可以在所有的访问uri前面加上统一的前缀，配置如下:<ul>
<li>使用<code>zuul.prefix</code>加上统一的前缀即可</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line">  <span class="comment">#加上统一的前缀，那么访问的时候一定要加上这个前缀才可以访问到</span></div><div class="line"><span class="attr">  prefix:</span> <span class="string">/chenjiabing</span></div><div class="line">  <span class="comment"># 忽略真实的服务名称实例访问，是一个Set集合，可以指定多个，取消全部使用 "*"即可</span></div><div class="line"><span class="attr">  ignored-services:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">dept-provider</span></div><div class="line">  <span class="comment">#routes下面指定代理规则，可以同时指定多个</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment">#指定第一个规则，这里的名称任意</span></div><div class="line"><span class="attr">    api-dept:</span></div><div class="line">      <span class="comment">#指定的实例名称</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">dept-provider</span></div><div class="line">      <span class="comment">#指定可以访问的路由</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-dept/**</span></div></pre></td></tr></table></figure>
<ul>
<li>通过上面的配置，此时的访问路径变成<code>http://zuul.com:9001/chenjiabing/api-dept/dept/1</code></li>
</ul>
<h2 id="某个uri取消路由"><a href="#某个uri取消路由" class="headerlink" title="某个uri取消路由"></a>某个uri取消路由</h2><ul>
<li><p>使用<code>zuul.ignored-services</code>是忽略一个或者多个微服务的全部接口，但是如果我们可以更细化</p>
</li>
<li><p>如果我们需要隐藏一些敏感的接口不给访问，我们可以在yml文件中配置，如下:</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  ignored-patterns:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">/api-order/order/list</span>   <span class="comment"># 取消指定的一个</span></div><div class="line"><span class="bullet">  -</span> <span class="string">/api-order/order/**</span>     <span class="comment"># 使用通配符去掉order下的全部接口</span></div></pre></td></tr></table></figure>
<h2 id="传递敏感头信息"><a href="#传递敏感头信息" class="headerlink" title="传递敏感头信息"></a>传递敏感头信息</h2><ul>
<li>默认zuul是不能传递头信息的，比如cookie，默认的设置了三个字段，如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Set&lt;String&gt; sensitiveHeaders = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</div><div class="line">			Arrays.asList(<span class="string">"Cookie"</span>, <span class="string">"Set-Cookie"</span>, <span class="string">"Authorization"</span>));</div></pre></td></tr></table></figure>
<ul>
<li>如果我们想让它不过滤，只需要将其设置为空，或者不配置其他的，如下：<ul>
<li>将<code>sensitive-headers</code>这个值设置为空即可</li>
<li><strong>这个配置只是针对<code>order-provider</code>这个微服务起作用</strong></li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment">#指定第一个规则，这里的名称任意</span></div><div class="line"><span class="attr">    api-order:</span></div><div class="line">      <span class="comment">#指定的实例名称</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">order-provider</span></div><div class="line">      <span class="comment">#指定可以访问的路由</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-order/**</span></div><div class="line"><span class="attr">      sensitive-headers:</span>   <span class="comment"># 设置为空即可，那么就可以传递敏感头信息了</span></div></pre></td></tr></table></figure>
<ul>
<li>上面的配置是针对单个服务的设置，我们也可以配置针对所有的服务，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  sensitive-headers:</span>   <span class="comment"># 设置所有的服务都取消敏感头信息</span></div></pre></td></tr></table></figure>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul>
<li>Filter 的生命周期有 4 个，分别是 “PRE”、“ROUTING”、“POST” 和“ERROR”，整个生命周期可以用下图来表示 </li>
<li><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fqmg1wtyhdj30pl0fqdgt.jpg" alt=""></li>
<li>生命周期解释如下：<ul>
<li><strong><code>PRE</code>：</strong>这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现<strong>身份验证、鉴权、限流、参数校验、请求转发</strong>，在集群中选择请求的微服务、记录调试信息等。</li>
<li><strong><code>ROUTING</code>：</strong>这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用 Apache HttpClient 或 Netfilx Ribbon 请求微服务。</li>
<li><strong><code>POST</code>：</strong>这种过滤器在路由到微服务以后执行。这种过滤器可用来为<strong>响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端</strong>等。</li>
<li><strong><code>ERROR</code>：</strong>在其他阶段发生错误时执行该过滤器。 除了默认的过滤器类型，Zuul 还允许我们创建自定义的过滤器类型。例如，我们可以定制一种 STATIC 类型的过滤器，直接在 Zuul 中生成响应，而不将请求转发到后端的微服务。</li>
</ul>
</li>
</ul>
<h3 id="前置过滤器的使用"><a href="#前置过滤器的使用" class="headerlink" title="前置过滤器的使用"></a>前置过滤器的使用</h3><ul>
<li>利用前置过滤器实现检测token是否正确，如果不正确，那么直接返回权限不足401状态码，不路由微服务</li>
<li>继承<code>ZuulFilter</code></li>
<li>注入到ioc容器中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 	自定义过滤器，用于实现鉴权，前置过滤器</div><div class="line"> *  	继承ZuulFilter</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>  <span class="comment">//一定要注入到ioc容器中</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	判断过滤器是否被执行，返回true表示被会被执</div><div class="line">	 * 	 在这里我们可以限制过滤器的执行范围，可以根据指定的条件判断这个请求是否被过滤</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *	 过滤器的具体实现逻辑</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> ZuulException</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</div><div class="line">		RequestContext requestContext = RequestContext.getCurrentContext();  <span class="comment">//获取请求上下文</span></div><div class="line">		HttpServletRequest request = requestContext.getRequest();  <span class="comment">//获取HttpServletRequest</span></div><div class="line">		String token = request.getParameter(<span class="string">"token"</span>);  <span class="comment">//获取传递过来的请求参数</span></div><div class="line">		<span class="comment">//如果token是空的，返回权限不足，一般返回的状态码是401</span></div><div class="line">		<span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</div><div class="line">			requestContext.setSendZuulResponse(<span class="keyword">false</span>);  <span class="comment">//设置false，此时的zuul不对此路由</span></div><div class="line">			requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());  <span class="comment">//设置401</span></div><div class="line"><span class="comment">//			requestContext.setResponseBody("no power");  //设置响应的消息</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	指定过滤器的类型，前置，后置.................</div><div class="line">	 * 1、其中FilterConstants这个常量类中定义了过滤器常用的变量</div><div class="line">	 * 	    public static final String ERROR_TYPE = "error";</div><div class="line">			public static final String POST_TYPE = "post";</div><div class="line">			public static final String PRE_TYPE = "pre";</div><div class="line">			public static final String ROUTE_TYPE = "route";	</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> FilterConstants.PRE_TYPE;    <span class="comment">//前置过滤器 pre</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	过滤器执行的顺序，数字越小优先级越高</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//一般前置过滤器放在org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter这个过滤器之前即可，只需要将其对应的顺序-1</span></div><div class="line">		<span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER-<span class="number">1</span>; </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="后置过滤器的使用"><a href="#后置过滤器的使用" class="headerlink" title="后置过滤器的使用"></a>后置过滤器的使用</h3><ul>
<li>利用后置过滤器在响应头中添加内容，和前置过滤器的使用一样，只是使用的过滤器的类型不用，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 后置过滤器，在响应头中添加一些内容</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span> <span class="comment">//注入</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddResponseHeaderFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</div><div class="line">		RequestContext requestContext = RequestContext.getCurrentContext();  <span class="comment">//获取请求上下文</span></div><div class="line">		HttpServletResponse response = requestContext.getResponse();  <span class="comment">//获取HttpServletResponse</span></div><div class="line">		response.addHeader(<span class="string">"X-Foo"</span>, <span class="string">"add header"</span>);  <span class="comment">//添加头信息</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> FilterConstants.POST_TYPE; <span class="comment">//后置过滤器</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//在org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter#filterOrder()这个过滤一起之前执行即可</span></div><div class="line">		<span class="keyword">return</span> FilterConstants.SEND_RESPONSE_FILTER_ORDER-<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="禁用某种过滤器"><a href="#禁用某种过滤器" class="headerlink" title="禁用某种过滤器"></a>禁用某种过滤器</h2><ul>
<li>如果我们想要禁用某种过滤器（自定义或者zuul自身的），我们可以在配置中设置，格式：<code>zuul.&lt;SimpleClassName&gt;.&lt;filterType&gt;.disable=true</code>，比如禁用我们TokenFilter，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  TokenFilter:</span>  <span class="comment"># 类的名字</span></div><div class="line"><span class="attr">    pre:</span>        <span class="comment"># 类型</span></div><div class="line"><span class="attr">      disable:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><ul>
<li><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/74942405" target="_blank" rel="external">https://blog.csdn.net/tianyaleixiaowu/article/details/74942405</a></li>
<li><a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin" target="_blank" rel="external">https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin</a></li>
<li>系统按照恒定的速率往指定大小的桶里添加令牌，每来一个请求就消耗一个令牌，如果桶内没有令牌表示此事的请求流量已经超过设置的大小了，应该做出相应的响应或者直接抛出异常</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>使用前置过滤器，在请求被转发之前调用，<strong>限流的过滤器应该是所有过滤器中优先级最大的</strong></li>
<li>使用google开源的组件<code>Guava</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</div><div class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</div><div class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</div><div class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 	限流	，前置过滤器</div><div class="line"> * 	限流的过滤器的优先级应该是最高，数字最小</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RateLimiter RATE_LIMITER=RateLimiter.create(<span class="number">100</span>);  <span class="comment">//程每秒钟往桶里放置100个令牌</span></div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 	tryAcquire()：如果获取不到一个令牌,表示流量超时了，没有等待时间</div><div class="line">		 *  tryAcquire(int permits, long timeout, TimeUnit unit)：获取permits个令牌，如果在指定的时间timeout内，还是没有获取到指定的permits个令牌，那么就返回false</div><div class="line">		 */</div><div class="line">		<span class="keyword">if</span> (!RATE_LIMITER.tryAcquire()) &#123;</div><div class="line">			RequestContext requestContext = RequestContext.getCurrentContext();</div><div class="line">			requestContext.setSendZuulResponse(<span class="keyword">false</span>);  <span class="comment">//不路由</span></div><div class="line">			requestContext.setResponseStatusCode(HttpStatus.FORBIDDEN.value());  <span class="comment">//403拒绝访问</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//也可以直接抛出异常</span></div><div class="line"><span class="comment">//		if (!RATE_LIMITER.tryAcquire()) &#123;</span></div><div class="line"><span class="comment">//			throw new RuntimeException();  //抛出异常</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> FilterConstants.PRE_TYPE;  <span class="comment">//前置</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//org.springframework.cloud.netflix.zuul.filters.pre.ServletDetectionFilter#filterOrder()这个过滤器的优先级是最高的，只需要-1即可</span></div><div class="line">		<span class="keyword">return</span> FilterConstants.SERVLET_DETECTION_FILTER_ORDER-<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多维度限流"><a href="#多维度限流" class="headerlink" title="多维度限流"></a>多维度限流</h3><ul>
<li><a href="https://segmentfault.com/a/1190000012252677" target="_blank" rel="external">https://segmentfault.com/a/1190000012252677</a></li>
</ul>
<h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><ul>
<li><a href="https://www.jianshu.com/p/f89f5557990f" target="_blank" rel="external">https://www.jianshu.com/p/f89f5557990f</a></li>
<li>一些api只有具有某些权限的时候才可以被调用，比如用户的一些相关信息，只有在用户登录之后才可以调用，否则将会提示没有权限</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li>我们在用户登录成功之后会在返回头中添加cookie的值为<code>openId=random(随机数)</code>，并且将其保存在<code>redis</code>中（key=openId_userId，value=random）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 登录的方法，登录成功响应头返回添加cookie</div><div class="line"> * <span class="doctag">@param</span> response</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/login"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</div><div class="line">	<span class="comment">//登录的逻辑。。。。。</span></div><div class="line">	 </div><div class="line">	<span class="comment">//设置cookie的值</span></div><div class="line">	Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"openId"</span>, UUID.randomUUID().toString());  </div><div class="line">	cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);  </div><div class="line">	response.addCookie(cookie);  <span class="comment">//添加到响应头中</span></div><div class="line">	</div><div class="line">	<span class="comment">//添加到redis中，key=openId_userId,value=uuid的值</span></div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="string">"登录成功"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们事先将指定权限的接口uri存放在数据库中，在zuul中定义一个鉴权的过滤器，如果请求过来了，判断这个uri是否需要某种权限才能调用，如果不需要直接路由即可，如果需要那么判断<code>cookie</code>中是否有openId，如果没有表示没有登录，权限不够，如果有，需要判断和redis中的值是否相同，如果相同，表示有权限，直接路由到服务即可<ul>
<li><strong>这里将部分逻辑写在<code>shouldFilter()</code>方法中，限制范围（判断请求的uri是否需要鉴权），<code>run()</code>方法中只需要判断是否具有权限即可</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 	自定义过滤器，用于实现鉴权，前置过滤器</div><div class="line"> *  	继承ZuulFilter</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>  <span class="comment">//一定要注入到ioc容器中</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span>   </div><div class="line">	<span class="keyword">private</span> UriService uriservice;   <span class="comment">//注入</span></div><div class="line">    </div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate; <span class="comment">//redis</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	判断过滤器是否被执行，返回true表示被会被执行（经过run方法）</div><div class="line">	 * 	只需要判断请求的uri是存在数据库中即可</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">		RequestContext context=RequestContext.getCurrentContext();  <span class="comment">//获取上下文</span></div><div class="line">		HttpServletRequest request = context.getRequest();  <span class="comment">//获取request</span></div><div class="line">		String uri=request.getRequestURI();  <span class="comment">//获取请求的uri</span></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 	伪代码如下：</div><div class="line">		 *		1、List&lt;URL&gt; uriList=uriservice.getUrlList();  //获取需要权限访问的uri列表</div><div class="line">		 *		2、判断请求的uri是否在uriList中</div><div class="line">		 *			1、如果不存在，return false，表示不用执行过滤的逻辑（run方法）直接路由到指定的服务即可</div><div class="line">		 *			2、如果不存在返回true，表示执行过滤的逻辑（run方法）</div><div class="line">		 */</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *  	过滤器的具体实现逻辑，经过shouldFilter方法之后，能够执行到这里的表示这个请求的uri需要验证权限</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> ZuulException</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</div><div class="line">		RequestContext requestContext = RequestContext.getCurrentContext();  <span class="comment">//获取请求上下文</span></div><div class="line">		HttpServletRequest request = requestContext.getRequest();  <span class="comment">//获取HttpServletRequest</span></div><div class="line">		Cookie[] cookies = request.getCookies();   <span class="comment">//获取cookie</span></div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *  伪代码如下：</div><div class="line">		 *			1、判断cookie中是否存在openId</div><div class="line">		 *				1、如果不存在，返回权限不足的提示信息</div><div class="line">		 *				2、如果存在，需要判断redis中存储的openId的值是否和携带过来的cookie值相同</div><div class="line">		 *					1、如果不相同，返回权限不足的提示信息</div><div class="line">		 *					2、如果相同，表示这个请求具有相应的权限</div><div class="line">		 */</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> FilterConstants.PRE_TYPE;    <span class="comment">//前置过滤器 pre</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//一般前置过滤器放在org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter这个过滤器之前即可，只需要将其对应的顺序-1</span></div><div class="line">		<span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER-<span class="number">1</span>; </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</div><div class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 跨域的配置类</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span>   <span class="comment">//配置类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> UrlBasedCorsConfigurationSource source=<span class="keyword">new</span> UrlBasedCorsConfigurationSource();</div><div class="line">		<span class="keyword">final</span> CorsConfiguration config=<span class="keyword">new</span> CorsConfiguration();</div><div class="line">		config.setAllowCredentials(<span class="keyword">true</span>);   <span class="comment">//支持cookie跨域</span></div><div class="line">		config.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>));  <span class="comment">//配置允许跨域访问的域名，这里*表示全部</span></div><div class="line">		config.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));  <span class="comment">//设置允许的头</span></div><div class="line">		config.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>)); <span class="comment">//设置允许跨域的方法，GET,POST....,这里表示允许全部</span></div><div class="line">		config.setMaxAge(<span class="number">300l</span>);  <span class="comment">//缓存时间，在指定的时间内，对于相同的请求就不需要再次检查了</span></div><div class="line">		source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="超时时间设置"><a href="#超时时间设置" class="headerlink" title="超时时间设置"></a>超时时间设置</h2><ul>
<li>我们在使用zuul访问服务的时候，一旦服务超过很短的时间没有响应，那么zuul就会自动熔断，默认的时间是<strong>2秒</strong>，但是可以通过配置修改，如下：<ul>
<li>由于zuul使用ribbon实现负载均衡，因此这里还需要配置ribbon的超时时间，否则配置将不会生效</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">    host:</span>  <span class="comment"># 配置zuul的超时时间</span></div><div class="line"><span class="attr">        connect-timeout-millis:</span> <span class="number">60000</span>  <span class="comment"># 默认2秒，  </span></div><div class="line"><span class="attr">        socket-timeout-millis:</span> <span class="number">60000</span></div><div class="line">    </div><div class="line"><span class="attr">ribbon:</span>   <span class="comment"># zuul使用服务发现的时候，要想让上面的配置生效，必须配置ribbon的超时时间</span></div><div class="line"><span class="attr">  ReadTimeout:</span> <span class="number">60000</span>     <span class="comment"># 请求处理时间。</span></div><div class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">60000</span>   <span class="comment"># 请求连接时间。</span></div></pre></td></tr></table></figure>
<h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><ul>
<li><strong>当请求的服务响应时间超时或者服务不可用的时候zuul会直接响应异常</strong>，我们可以设置熔断，只需要在zuul的服务中配置即可，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.tedu.zuul.hystrix;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置zuul的熔断</div><div class="line"> * 实现FallbackProvider接口</div><div class="line"> * 出现熔断的情况如下：</div><div class="line"> * 	1、当请求的服务响应超时</div><div class="line"> * 	2、当请求的服务不能正常提供服务</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>  <span class="comment">//注入到IOC容器</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFallback</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 这个方法返回的是serviceId，如果返回的单个服务，那么只针对一个服务熔断</div><div class="line">	 * 如果想要针对所有的服务进行配置熔断，只需要返回*即可</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"order-provider"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 发生熔断的响应方法</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">				<span class="keyword">return</span> HttpStatus.OK;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="number">200</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="string">"OK"</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">//设置响应的内容</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(<span class="string">"fallback"</span>.getBytes());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">				HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line">				headers.setContentType(MediaType.APPLICATION_JSON);</div><div class="line">				<span class="keyword">return</span> headers;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="zuul的重试"><a href="#zuul的重试" class="headerlink" title="zuul的重试"></a>zuul的重试</h2><ul>
<li>有时候因为网络或者其它原因，服务可能会暂时的不可用，这个时候我们希望可以再次对服务进行重试，Zuul也帮我们实现了此功能，需要结合Spring Retry 一起来实现</li>
<li>依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 超时重试 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中配置如下：<ul>
<li><strong>在zuul中开启重试机制</strong></li>
<li><strong>配置ribbon的重试次数</strong></li>
<li><em>默认请求超时时间很短，还可以配置ribbon的超时时间</em></li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  retryable:</span> <span class="literal">true</span>  <span class="comment"># 开启重试机制</span></div><div class="line"></div><div class="line"><span class="attr">ribbon:</span>    <span class="comment"># zuul内部使用的是ribbon实现负载均衡的，因此配置ribbon的重试次数</span></div><div class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">2</span>   <span class="comment"># 同一个服务的最大重试次数</span></div><div class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">2</span>   <span class="comment"># 对于切换的下一个实例的重试次数</span></div></pre></td></tr></table></figure>
<h2 id="Zuul的高可用"><a href="#Zuul的高可用" class="headerlink" title="Zuul的高可用"></a>Zuul的高可用</h2><ul>
<li>将多个zuul的微服务注册到Eureka中的（集群）</li>
<li>Nginx和Zuul混搭的方式，可以将Nginx的请求转发到多个zuul中，zuul再路由给指定的微服务</li>
</ul>
<h2 id="完整的配置"><a href="#完整的配置" class="headerlink" title="完整的配置"></a>完整的配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="comment">#  TokenFilter:</span></div><div class="line"><span class="comment">#    pre:</span></div><div class="line"><span class="comment">#      disable: true</span></div><div class="line">  <span class="comment"># 忽略真实的服务名称实例访问，是一个Set集合，可以指定多个，取消全部使用 "*"即可</span></div><div class="line"><span class="attr">  sensitive-headers:</span>   <span class="comment"># 设置所有的服务都取消敏感头信息</span></div><div class="line"><span class="attr">  ignored-services:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">order-provider</span></div><div class="line"><span class="comment">#  ignored-patterns:</span></div><div class="line"><span class="comment">#  - /api-order/order/list   # 取消指定的一个</span></div><div class="line"><span class="comment">#  - /api-order/order/**     # 使用通配符去掉order下的全部接口</span></div><div class="line">  <span class="comment">#routes下面指定代理规则，可以同时指定多个</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment">#指定第一个规则，这里的名称任意</span></div><div class="line"><span class="attr">    api-order:</span></div><div class="line">      <span class="comment">#指定的实例名称</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">order-provider</span></div><div class="line">      <span class="comment">#指定可以访问的路由</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-order/**</span></div></pre></td></tr></table></figure>
<h2 id="消费端的使用"><a href="#消费端的使用" class="headerlink" title="消费端的使用"></a>消费端的使用</h2><ul>
<li>前提：<ul>
<li>zuul微服务（zuul-server）注册到eureka注册中心</li>
<li>微服务提供者注册到Eureka注册中心，zuul-server配置的路由是api-order</li>
<li>服务消费者注册到Eureka中</li>
</ul>
</li>
<li>那么如果消费者想用通过zuul-server访问到服务提供者，那么可以直接写<code>http://zuul-server/api-order/order/{id}</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URI_PRFIX=<span class="string">"http://zuul-server/api-order"</span>;  <span class="comment">//直接使用zuul网管连接订单的服务提供者</span></div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">	</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line">		<span class="keyword">return</span> restTemplate.getForObject(URI_PRFIX+<span class="string">"/order/"</span>+id, Order.class);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li><a href="https://gitee.com/chenjiabing666/zuul-server.git" target="_blank" rel="external">https://gitee.com/chenjiabing666/zuul-server.git</a></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/FsvZgkvpI0S6rposacGiiQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/FsvZgkvpI0S6rposacGiiQ</a></li>
<li><a href="https://windmt.com/2018/04/23/spring-cloud-11-zuul-filter/" target="_blank" rel="external">https://windmt.com/2018/04/23/spring-cloud-11-zuul-filter/</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-netflix/2.0.x/single/spring-cloud-netflix.html#_router_and_filter_zuul" target="_blank" rel="external">https://cloud.spring.io/spring-cloud-netflix/2.0.x/single/spring-cloud-netflix.html#_router_and_filter_zuul</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zuul&quot;&gt;&lt;a href=&quot;#Zuul&quot; class=&quot;headerlink&quot; title=&quot;Zuul&quot;&gt;&lt;/a&gt;Zuul&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Config统一配置中心</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/Config(%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83)/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/Config(统一配置中心)/</id>
    <published>2018-12-24T16:24:18.000Z</published>
    <updated>2018-12-25T13:04:28.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Config-统一配置中心"><a href="#Config-统一配置中心" class="headerlink" title="Config 统一配置中心"></a>Config 统一配置中心</h1><h2 id="为什么使用？"><a href="#为什么使用？" class="headerlink" title="为什么使用？"></a>为什么使用？</h2><ul>
<li>方便维护：微服务可能成百个，如果一个个配置都是在项目中配置的话，会给运维造成不必要的麻烦</li>
<li>安全：配置统一是由运维来操作，如果涉及到数据库的账户和密码，肯定是不能让开发知道的</li>
</ul>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ul>
<li>添加依赖:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- config server的依赖 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- eureka客户端的依赖 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置如下：<ul>
<li>这里使用的是git仓库，当然也是可以使用svn</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3344</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">config-server</span>   <span class="comment">#应用的名称，在同一个eureka中必须不重复</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/chenjiabing666/dept-config.git</span>  <span class="comment"># git仓库的地址，如果是ssh方式的不需要指定用户名和密码，但是需要在github上添加秘钥</span></div><div class="line"><span class="attr">          username:</span> <span class="string">******</span> <span class="comment"># 用户名</span></div><div class="line"><span class="attr">          password:</span> <span class="string">******</span>     <span class="comment"># 密码</span></div><div class="line"><span class="attr">          basedir:</span> <span class="attr">C:/images/config-server</span>   <span class="comment"># 本地的路径，将会自动在这个路径创建一个git仓库</span></div></pre></td></tr></table></figure>
<ul>
<li>在主启动类上添加<code>@EnableConfigServer</code>这个注解，如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">//开启eureka</span></div><div class="line"><span class="meta">@EnableConfigServer</span>  <span class="comment">//开启config sever</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>此时需要在远程的github仓库创建如下内容：</li>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/config.png?raw=true" alt=""></li>
<li>此时访问如下的路径：<code>http://localhost:3344/orderClient9002-{profile}.yml</code>，就会输出orderClient9002的内容<ul>
<li>如果后缀写的是<code>.json</code>就会以json格式输出，是<code>.properties</code>就会以properties的格式输出</li>
<li>如果输出报错说明配置的内容有错误</li>
</ul>
</li>
</ul>
<h3 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h3><ul>
<li><code>/name-{profile}.yml</code> <ul>
<li>name是github仓库中的文档名称</li>
<li>{profile}是springBoot的profile，可以指定任意的环境</li>
<li>这里默认是master分支的内容</li>
</ul>
</li>
<li><code>/label/name-{profile}.yml</code><ul>
<li>lable是仓库的分支名称</li>
</ul>
</li>
</ul>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul>
<li><a href="https://github.com/chenjiabing666/cloud-config-server.git" target="_blank" rel="external">https://github.com/chenjiabing666/cloud-config-server.git</a></li>
</ul>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>启动配置中心的服务端，将其注入到eureka的注册中心</li>
<li>客户端相通过注册中心找到服务端的实例，然后读取到github仓库中对应的配置</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 统一配置中心的客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- eureka注册中心的客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中（<code>bootstrap.xml</code>）中配置：<ul>
<li><strong><code>bootstrap.xml</code>是最高级的，其中的配置项不会被application.yml或者application.properties覆盖</strong></li>
<li><strong>其中一定要配置eureka的客户端，否则将不能找到统一配置中心的配置</strong></li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attr">eureka:</span>   <span class="comment"># 配置eureka客户端，一定要bootstrap文件中配置，因为需要到注册中心获取配置中心的服务端的地址，如果配置在github上面的配置，那么将会找不到配置中心的服务端</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">orderClient9002</span>   <span class="comment"># 配置项目的名称，也是github中对应配置文件的名称（去掉后缀）</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span>   <span class="comment"># 开启config的客户端</span></div><div class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span>   <span class="comment"># 指定eureka中的配置中心服务端的实例名称</span></div><div class="line"><span class="attr">      profile:</span> <span class="string">dev</span>   <span class="comment"># 指定配置文件的环境</span></div><div class="line"><span class="attr">      label:</span> <span class="string">master</span>  <span class="comment"># 指定需要访问github上的分支，这里不填默认是master分支</span></div></pre></td></tr></table></figure>
<ul>
<li>在主启动类上不需要对应的注解，只需要添加eureka客户端的注解即可，如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">//开启eureka</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderClient9001Application</span> </span>&#123;</div></pre></td></tr></table></figure>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><ul>
<li><a href="https://github.com/chenjiabing666/config-client.git" target="_blank" rel="external">https://github.com/chenjiabing666/config-client.git</a></li>
</ul>
<h2 id="配置中心服务端的高可用"><a href="#配置中心服务端的高可用" class="headerlink" title="配置中心服务端的高可用"></a>配置中心服务端的高可用</h2><ul>
<li><strong>只需要同时开启多个服务端即可，相当于配置了一个集群</strong></li>
</ul>
<h2 id="spring-cloud-bus"><a href="#spring-cloud-bus" class="headerlink" title="spring cloud bus"></a>spring cloud bus</h2><ul>
<li>git仓库的配置改变了，但是统一配置中心并不能及时更新，因此我们需要一种机制能够保证git仓库中的配置改变了就会及时通知配置中心，bus就是这种机制</li>
</ul>
<h3 id="使用（bus-rabbitmq）"><a href="#使用（bus-rabbitmq）" class="headerlink" title="使用（bus + rabbitmq）"></a>使用（bus + rabbitmq）</h3><h4 id="配置中心的服务端"><a href="#配置中心的服务端" class="headerlink" title="配置中心的服务端"></a>配置中心的服务端</h4><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring cloud bus 消息总线的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中配置<strong>eureka</strong>和<strong>rabbitmq</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3344</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">config-server</span>   <span class="comment"># 应用的名称，在同一个eureka中必须不重复</span></div><div class="line"><span class="attr">  rabbitmq:</span>              <span class="comment"># rabbitmq配置的</span></div><div class="line"><span class="attr">    host:</span> <span class="number">39.105</span><span class="number">.123</span><span class="number">.197</span>  <span class="comment"># 主机的地址</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span>            <span class="comment"># 端口</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span>       <span class="comment"># 用户名</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span>      <span class="comment"># 密码</span></div><div class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span>     <span class="comment"># 虚拟主机</span></div><div class="line"></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/chenjiabing666/dept-config.git</span>  <span class="comment"># git仓库的地址，如果是ssh方式的不需要指定用户名和密码，但是需要在github上添加秘钥</span></div><div class="line"><span class="attr">          username:</span> <span class="string">******</span> <span class="comment"># 用户名</span></div><div class="line"><span class="attr">          password:</span> <span class="string">******</span>     <span class="comment"># 密码</span></div><div class="line"><span class="attr">          basedir:</span> <span class="attr">C:/images/config-server</span>   <span class="comment"># 本地的路径，将会自动在这个路径创建一个git仓库</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>开启刷新配置的uri：</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">management:</span>   <span class="comment"># 开启刷新配置的地址 /bus-refresh</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      exposure:</span></div><div class="line"><span class="attr">        include:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">bus-refresh</span></div></pre></td></tr></table></figure>
<ul>
<li>主启动类上添加eureka和config的server</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">//开启eureka</span></div><div class="line"><span class="meta">@EnableConfigServer</span>  <span class="comment">//开启config sever</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>启动之后将会发现在rabbitmq中新增了一个队列，如下:</li>
</ul>
<p><img src="https://github.com/chenjiabing666/BlogImage/blob/master/bus1.png?raw=true" alt=""></p>
<ul>
<li><strong>在github仓库中新增一个配置文件orderClient9001.yml:</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9001</span></div><div class="line">  </div><div class="line"><span class="attr">person:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">chenjaibing</span></div><div class="line"><span class="attr">  age:</span> <span class="number">20</span></div></pre></td></tr></table></figure>
<h5 id="完整的配置"><a href="#完整的配置" class="headerlink" title="完整的配置"></a>完整的配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3344</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">config-server</span>   <span class="comment"># 应用的名称，在同一个eureka中必须不重复</span></div><div class="line"><span class="attr">  rabbitmq:</span>              <span class="comment"># rabbitmq配置的</span></div><div class="line"><span class="attr">    host:</span> <span class="number">39.105</span><span class="number">.123</span><span class="number">.197</span>  <span class="comment"># 主机的地址</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span>            <span class="comment"># 端口</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span>       <span class="comment"># 用户名</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span>      <span class="comment"># 密码</span></div><div class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span>     <span class="comment"># 虚拟主机</span></div><div class="line"></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/chenjiabing666/dept-config.git</span>  <span class="comment"># git仓库的地址，如果是ssh方式的不需要指定用户名和密码，但是需要在github上添加秘钥</span></div><div class="line"><span class="attr">          username:</span> <span class="string">chenjiabing666</span> <span class="comment"># 用户名</span></div><div class="line"><span class="attr">          password:</span> <span class="string">**********</span>     <span class="comment"># 密码</span></div><div class="line"><span class="attr">          basedir:</span> <span class="attr">C:/images/config-server</span>   <span class="comment"># 本地的路径，将会自动在这个路径创建一个git仓库</span></div><div class="line">          </div><div class="line"><span class="attr">management:</span>   <span class="comment"># 开启刷新配置的地址 /bus-refresh</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      exposure:</span></div><div class="line"><span class="attr">        include:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">bus-refresh</span></div></pre></td></tr></table></figure>
<h4 id="配置中心的客户端"><a href="#配置中心的客户端" class="headerlink" title="配置中心的客户端"></a>配置中心的客户端</h4><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring cloud bus 消息总线的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>添加eureka、rabbitmq、config client的配置（<strong>bootstrap.xml</strong>）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="attr">eureka:</span>   <span class="comment"># 配置eureka客户端，一定要bootstrap文件中配置，因为需要到注册中心获取配置中心的服务端的地址，如果配置在github上面的配置，那么将会找不到配置中心的服务端</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">orderClient9001</span>   <span class="comment"># 配置项目的名称，也是github中对应配置文件的名称（去掉后缀）</span></div><div class="line"><span class="attr">  rabbitmq:</span>              <span class="comment"># rabbitmq配置的</span></div><div class="line"><span class="attr">    host:</span> <span class="number">39.105</span><span class="number">.123</span><span class="number">.197</span>  <span class="comment"># 主机的地址</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span>            <span class="comment"># 端口</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span>       <span class="comment"># 用户名</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span>      <span class="comment"># 密码</span></div><div class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span>     <span class="comment"># 虚拟主机</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span>   <span class="comment"># 开启config的客户端</span></div><div class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span>   <span class="comment"># 指定eureka中的配置中心服务端的实例名称</span></div><div class="line"><span class="attr">      profile:</span> <span class="string">dev</span>   <span class="comment"># 指定配置文件的环境</span></div><div class="line"><span class="attr">      label:</span> <span class="string">master</span>  <span class="comment"># 指定需要访问github上的分支，这里不填默认是master分支</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>新增一个Person类，其中的属性来自配置文件，并且通过controller读取其中的值，用作测试</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"person"</span>)  <span class="comment">//读取配置文件中前缀为person的值，并且赋值给其中的变量</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> Person person;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取配置文件中的值</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/person"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> person;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在主启动类上只需要开启eureka客户端即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">//开启eureka</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderClient9001Application</span> </span>&#123;</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul>
<li>启动eurkea，config server，config client</li>
<li>访问<code>http://localhost:9001/person</code>，返回一个person的信息</li>
<li>此时我们修改github仓库中的person的配置，再次访问<code>http://localhost:9001/person</code>,但是值并没有改变</li>
<li>我们通过post请求访问<code>http://localhost:3344/actuator/bus-refresh</code>（config server端的接口，自动生成的），再次获取person的信息之后，发现改变了，此时说明我们的配置成功了</li>
</ul>
<h4 id="在github中配置提交代码自动更新"><a href="#在github中配置提交代码自动更新" class="headerlink" title="在github中配置提交代码自动更新"></a>在github中配置提交代码自动更新</h4><ul>
<li>之前我们更新配置之后都是需要手动的post一个请求才会自动更新，现在我们可以在github中配置自动更新。<ul>
<li>在github仓库中的webhooks中配置一个post请求，地址写外网访问到bus-refresh即可。</li>
</ul>
</li>
</ul>
<h4 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h4><ul>
<li><a href="https://github.com/chenjiabing666/cloud-bus" target="_blank" rel="external">https://github.com/chenjiabing666/cloud-bus</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Config-统一配置中心&quot;&gt;&lt;a href=&quot;#Config-统一配置中心&quot; class=&quot;headerlink&quot; title=&quot;Config 统一配置中心&quot;&gt;&lt;/a&gt;Config 统一配置中心&lt;/h1&gt;&lt;h2 id=&quot;为什么使用？&quot;&gt;&lt;a href=&quot;#为什么
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring sleuth 服务追踪</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/spring-sleuth-%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/spring-sleuth-服务追踪/</id>
    <published>2018-12-24T16:23:20.000Z</published>
    <updated>2018-12-24T16:23:47.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-sleuth-服务追踪"><a href="#spring-sleuth-服务追踪" class="headerlink" title="spring  sleuth- 服务追踪"></a>spring  sleuth- 服务追踪</h1><h2 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h2><ul>
<li>Zipkin 是一个开放源代码分布式的跟踪系统，由Twitter公司开源，它致力于收集服务的定时数据，以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。</li>
<li>每个服务向zipkin报告计时数据，zipkin会根据调用关系通过Zipkin UI生成依赖关系图，显示了多少跟踪请求通过每个服务，该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈。</li>
<li>Zipkin提供了可插拔数据存储方式：In-Memory、MySql、Cassandra以及Elasticsearch。接下来的测试为方便直接采用In-Memory方式进行存储，生产推荐Elasticsearch。</li>
</ul>
<h3 id="服务端的安装"><a href="#服务端的安装" class="headerlink" title="服务端的安装"></a>服务端的安装</h3><ul>
<li>使用docker安装：<code>docker run --name zipkin -d -p 9411:9411 openzipkin/zipkin</code></li>
<li>访问<code>http://localhost:9411/zipkin/</code>即可看到可视化的界面</li>
</ul>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><ul>
<li>需要在每一个项目中（包括提供者，消费者，网关等），依赖如下:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- zipkin的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- sleuth的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在上面所有的项目中添加如下的配置：<ul>
<li><strong>在开发环境中可以指定抽样的比例为1，在生产环境中可以使用默认的即可</strong></li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  zipkin:</span></div><div class="line"><span class="attr">    base-url:</span> <span class="attr">http://192.168.174.128:9411</span>   <span class="comment"># 指定zipkin的服务端的地址</span></div><div class="line"><span class="attr">  sleuth:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      client:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    sampler:</span></div><div class="line"><span class="attr">      probability:</span> <span class="number">1.0</span> <span class="comment"># 将采样比例设置为 1.0，也就是全部都需要。默认是 0.1</span></div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.ityouknow.com/springcloud/2018/02/02/spring-cloud-sleuth-zipkin.html" target="_blank" rel="external">http://www.ityouknow.com/springcloud/2018/02/02/spring-cloud-sleuth-zipkin.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-sleuth-服务追踪&quot;&gt;&lt;a href=&quot;#spring-sleuth-服务追踪&quot; class=&quot;headerlink&quot; title=&quot;spring  sleuth- 服务追踪&quot;&gt;&lt;/a&gt;spring  sleuth- 服务追踪&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix断路器、熔断器</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8%E3%80%81%E7%86%94%E6%96%AD%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/Hystrix断路器、熔断器/</id>
    <published>2018-12-24T16:21:38.000Z</published>
    <updated>2018-12-24T16:22:01.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hystrix-断路器、熔断器"><a href="#Hystrix-断路器、熔断器" class="headerlink" title="Hystrix 断路器、熔断器"></a>Hystrix 断路器、熔断器</h1><h2 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h2><ul>
<li><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</p>
<p>如果下图所示：A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起了B的不可用，并将不可用像滚雪球一样放大到C和D时，雪崩效应就形成了。</p>
</li>
</ul>
<p><img src="http://www.itmind.net/assets/images/2017/springcloud/hystrix-1.png" alt=""></p>
<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul>
<li>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，Hystrix能够保证在一个依赖出现问题的情况下，不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性。</li>
<li>断路器本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期，可处理的备选响应（FallBack），而不是长时间等待或者抛出调用方法无法处理的异常，这样就保证了调用方线程不会被长时间，不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>简单的说就是当程序出现异常的时候返回一个错误的状态告知其他的服务，而不是任由异常发展下去导致整个系统的瘫痪</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>服务提供者</li>
</ul>
<h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>什么是服务降级？当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</li>
<li>如果还是不理解，那么可以举个例子：假如目前有很多人想要给我付钱，但我的服务器除了正在运行支付的服务之外，还有一些其它的服务在运行，比如搜索、定时任务和详情等等。然而这些不重要的服务就占用了JVM的不少内存与CPU资源，为了能把钱都收下来（钱才是目标），我设计了一个动态开关，把这些不重要的服务直接在最外层拒掉，这样处理后的后端处理收钱的服务就有更多的资源来收钱了（收钱速度更快了），这就是一个简单的服务降级的使用场景。</li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li>服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，我们可以将一些 不重要或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。 </li>
</ul>
<h3 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h3><ul>
<li><strong>在客户端结合Feign配置熔断处理，当没有服务提供者或者服务出现异常的时候就会调用熔断Hystrix定制的接口，返回特定的错误信息</strong></li>
</ul>
<h3 id="使用Feign达到服务降级"><a href="#使用Feign达到服务降级" class="headerlink" title="使用Feign达到服务降级"></a>使用Feign达到服务降级</h3><ul>
<li><strong>服务降级是在客户端配置，与服务提供者无关</strong></li>
<li>添加依赖如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- feign的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Hystrix的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- eureka的客户端依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- ribbon的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>使用<code>@FeignClient</code>在<strong>公共模块上</strong>创建一个接口实现负载均衡，如下：<ul>
<li><code>@FeignClient(name=&quot;DEPT-PROVIDER&quot;,fallbackFactory=DeptFallBack.class)</code><ul>
<li><code>name</code>：指定服务提供者的实例名称</li>
<li><code>fallbackFactory</code>：熔断处理的接口，在下面会定义</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> cn.tedu.provider.domain.Dept;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Hystrix和Feign结合实现服务的降级</div><div class="line"> * <span class="doctag">@FeignClient</span> 标注这个接口使用Feign实现负载均衡</div><div class="line"> * 	1、name指定了微服务提供者的实例名称</div><div class="line"> * 	2、fallbackFactory指定了熔断的接口，一旦出现异常就会调用这个接口的方法返回指定的熔断信息</div><div class="line"> */</div><div class="line"><span class="meta">@FeignClient</span>(name=<span class="string">"DEPT-PROVIDER"</span>,fallbackFactory=DeptFallBack.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptFeign</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取部门，使用Get方式请求</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/dept/&#123;id&#125;"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function">Dept <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加部门，使用POST请求的方式</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/dept"</span>,method=RequestMethod.POST)</div><div class="line">	<span class="function">Dept <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<strong>公共模块</strong>创建熔断处理的接口，如下：<ul>
<li><strong>这个类需要使用<code>FallbackFactory</code>，其中的泛型是Feign定义的接口</strong></li>
<li><strong>一定要使用<code>@Component</code>这个注解将其注入到IOC容器中</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> cn.tedu.provider.domain.Dept;</div><div class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  针对DeptFiegn接口的服务熔断的公共类，在其中可以对各个接口进行服务熔断响应进行定制</div><div class="line"> *  1、这个接口必须实现`feign.hystrix.FallbackFactory`</div><div class="line"> *  2、这个FallbackFactory中的泛型必须是`<span class="doctag">@FeignClient</span>`标注的接口（实现负载均衡）</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>   <span class="comment">//一定要将其注入到容器中</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptFallBack</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">DeptFeign</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 实现其中的方法</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> DeptFeign <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="comment">//直接return这个接口的对象，并且实现其中的所有接口方法，下面的每一个接口返回的信息就将是服务熔断返回的消息</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DeptFeign() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(Integer id)</span> </span>&#123;   <span class="comment">//根据Id获取异常之后就会返回其中的信息</span></div><div class="line">				Dept dept=<span class="keyword">new</span> Dept();</div><div class="line">				dept.setDeptId(-<span class="number">1</span>);</div><div class="line">				dept.setDeptName(<span class="string">"服务熔断......"</span>);</div><div class="line">				<span class="keyword">return</span> dept;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;  <span class="comment">//添加异常返回这个信息</span></div><div class="line">				dept.setDeptId(-<span class="number">1</span>);</div><div class="line">				dept.setDeptName(<span class="string">"服务熔断......"</span>);</div><div class="line">				<span class="keyword">return</span> dept;</div><div class="line">			&#125;&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在消费者端controller中调用Feign的接口即可，如果程序抛出异常或者没有服务提供者，那么将会调用定义好的熔断方法，返回对应的信息，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> DeptFeign deptFeign;  <span class="comment">//直接注入Feign接口，不过需要在主启动类上扫描该类所在的包或者父包</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据部门Id获取部门</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line">		<span class="keyword">return</span> deptFeign.get(id);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加部门，json方式提交</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> deptFeign.addDept(dept);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在消费者端开启feign对Hystrix的支持，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">feign:</span></div><div class="line"><span class="attr">  hystrix:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<ul>
<li>在消费者的启动类上添加注解，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">//开启eureka</span></div><div class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">//开启熔断器</span></div><div class="line"><span class="meta">@EnableFeignClients</span>(basePackages= &#123;<span class="string">"cn.tedu.api.*"</span>&#125;)  <span class="comment">//由于是分模块开发，feignclient是定义在公共模块的，因此必须指定basePackages扫描@FeignClient所在的包</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages= &#123;<span class="string">"cn.tedu.api.*"</span>,<span class="string">"cn.tedu.client.*"</span>&#125;) <span class="comment">//由于分模块开发，因此必须扫描Hystrix定义的fallbackFactory所在的包，同时也要扫描本模块所在的包，当然可以直接扫描cn.tedu.*这个包</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderClient9002Application</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>源码<ul>
<li><a href="https://gitee.com/chenjiabing666/order-api.git" target="_blank" rel="external">order-api</a></li>
<li><a href="https://gitee.com/chenjiabing666/order-client9002.git" target="_blank" rel="external">order-client</a></li>
</ul>
</li>
</ul>
<h3 id="使用RestTemplate服务降级"><a href="#使用RestTemplate服务降级" class="headerlink" title="使用RestTemplate服务降级"></a>使用RestTemplate服务降级</h3><ul>
<li>添加依赖，如下:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Hystrix的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>启动类上开启熔断</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">//开启eureka</span></div><div class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">//开启服务熔断</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderClient9001Application</span> </span>&#123;</div></pre></td></tr></table></figure>
<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ul>
<li>第一种的实现方式就是每一个方法都对应一个熔断的方法（复杂，很难拓展和管理）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URI_PRFIX=<span class="string">"http://zuul-server/api-order"</span>;  <span class="comment">//直接使用zuul网管连接订单的服务提供者</span></div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">	</div><div class="line">    <span class="comment">//使用@HystrixCommand这个注解，其中指定熔断后调用的方法</span></div><div class="line">	<span class="meta">@HystrixCommand</span>(fallbackMethod=<span class="string">"getOrderFallback"</span>)   </div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line">		System.out.println(<span class="number">1</span>/<span class="number">0</span>);   <span class="comment">//特意出异常</span></div><div class="line">		<span class="keyword">return</span> restTemplate.getForObject(URI_PRFIX+<span class="string">"/order/"</span>+id, Order.class);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	服务的熔断方法，只有当没有服务提供者提供服务或者程序出现异常的时候才会执行这个方法</div><div class="line">	 * 	注意：</div><div class="line">	 * 		1、返回的类型一定要相同或者是其子类</div><div class="line">	 * 		2、入参的参数和类型一定要相同</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">getOrderFallback</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line">		Order order=<span class="keyword">new</span> Order();</div><div class="line">		order.setOrderId(-<span class="number">1</span>);</div><div class="line">		order.setOrderNum(<span class="string">"太拥挤了，请稍后再试......"</span>);</div><div class="line">		<span class="keyword">return</span> order;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="默认的熔断"><a href="#默认的熔断" class="headerlink" title="默认的熔断"></a>默认的熔断</h3><ul>
<li>上面是针对一对一的熔断，每个接口都要写一个熔断方法，但是我们也可以针对一个类写一个默认的熔断方法即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用<span class="doctag">@DefaultProperties</span>指定默认的熔断方法</div><div class="line"> * 	1、需要熔断机制的接口上只需要添加<span class="doctag">@HystrixCommand</span>注解即可</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@DefaultProperties</span>(defaultFallback=<span class="string">"defaultFallBack"</span>)   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URI_PRFIX=<span class="string">"http://zuul-server/api-order"</span>;  <span class="comment">//直接使用zuul网管连接订单的服务提供者</span></div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">	</div><div class="line">	<span class="meta">@HystrixCommand</span>   <span class="comment">//使用这个注解，其中指定熔断后调用的方法</span></div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line">		System.out.println(<span class="number">1</span>/<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> restTemplate.getForObject(URI_PRFIX+<span class="string">"/order/"</span>+id, Order.class);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *  	默认的熔断方法</div><div class="line">	 *  	1、参数必须为空</div><div class="line">	 *  	2、返回的类型有特殊要求	</div><div class="line">	 *  		1、必须和出现熔断的方法的返回类型相同或者是其子类</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">defaultFallBack</span><span class="params">()</span> </span>&#123;</div><div class="line">		Order order=<span class="keyword">new</span> Order();</div><div class="line">		order.setOrderId(-<span class="number">1</span>);</div><div class="line">		order.setOrderNum(<span class="string">"太拥挤了，请稍后再试......"</span>);</div><div class="line">		<span class="keyword">return</span> order;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h2><h3 id="ribbon-Hystrix"><a href="#ribbon-Hystrix" class="headerlink" title="ribbon+ Hystrix"></a>ribbon+ Hystrix</h3><ul>
<li>熔断超时时间默认是<strong>1秒</strong>，即是当请求的服务在一秒之内没有执行完成，那么将会直接熔断，调用熔断方法，返回熔断信息，如下：<ul>
<li>请求这个接口将会直接熔断，因为这里等待的时间超过了设置的时间</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>  <span class="comment">//使用这个注解，其中指定熔断后调用的方法</span></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		Thread.sleep(<span class="number">2000</span>);</div><div class="line">	&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> restTemplate.getForObject(URI_PRFIX+<span class="string">"/order/"</span>+id, Order.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="直接在-HystrixCommand注解中配置"><a href="#直接在-HystrixCommand注解中配置" class="headerlink" title="直接在@HystrixCommand注解中配置"></a>直接在@HystrixCommand注解中配置</h4><ul>
<li>我们可以通过配置改变这个默认的时间，如下：<ul>
<li>直接在<code>@HystrixCommand</code>的注解中配置</li>
<li>一些常用的常量配置都可以在<code>com.netflix.hystrix.HystrixCommandProperties</code>这个类中找到</li>
<li><strong>单位毫秒</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(commandProperties=&#123;</div><div class="line">		<span class="meta">@HystrixProperty</span>(name=<span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value=<span class="string">"3000"</span>)</div><div class="line">	&#125;)   <span class="comment">//使用这个注解，其中指定熔断后调用的方法</span></div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line"><span class="comment">//		System.out.println(1/0);</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">2000</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> restTemplate.getForObject(URI_PRFIX+<span class="string">"/order/"</span>+id, Order.class);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="配置文件中配置"><a href="#配置文件中配置" class="headerlink" title="配置文件中配置"></a>配置文件中配置</h4><ul>
<li>直接在配置文件中配置，但是在需要熔断的方法上面一定要加上<code>@HystrixCommand</code>这个注解</li>
<li>针对所有的方法设置超时时间，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">hystrix:</span></div><div class="line"><span class="attr">  command:</span></div><div class="line"><span class="attr">    default:</span></div><div class="line"><span class="attr">      execution:</span></div><div class="line"><span class="attr">        isolation:</span></div><div class="line"><span class="attr">          thread:</span></div><div class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">3000</span></div></pre></td></tr></table></figure>
<ul>
<li>针对指定的方法设置超时时间，如下：<ul>
<li><strong>也可以对指定的方法指定<code>commandKey</code>,只需要在@HystrixCommand这个注解中指定这个属性即可，默认是方法的名称</strong></li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">hystrix:</span></div><div class="line"><span class="attr">  command:</span></div><div class="line"><span class="attr">    getOrder:</span>  <span class="comment"># 方法名称</span></div><div class="line"><span class="attr">      execution:</span></div><div class="line"><span class="attr">        isolation:</span></div><div class="line"><span class="attr">          thread:</span></div><div class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">3000</span></div></pre></td></tr></table></figure>
<h3 id="Feign-Hystrix"><a href="#Feign-Hystrix" class="headerlink" title="Feign+Hystrix"></a>Feign+Hystrix</h3><ul>
<li>在使用Feign+Hystrix实现服务熔断的时候，虽然我们在配置文件中改变了hystrix的默认的熔断超时时间，但是并不作用，如下:</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">hystrix:</span></div><div class="line"><span class="attr">  command:</span></div><div class="line"><span class="attr">    default:</span>  <span class="comment"># 方法名称</span></div><div class="line"><span class="attr">      execution:</span></div><div class="line"><span class="attr">        isolation:</span></div><div class="line"><span class="attr">          thread:</span></div><div class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">7000</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>上面的配置并不起作用，因为<code>Feign</code>也是使用<code>ribbon</code>的，ribbon也是有超时时间的，默认也是一秒，因此我们要想上面的配置生效，必须指定ribbon的超时时间，并且Hystrix的超时时间应该比ribbon的时间长，因为ribbon还有重试机制，只有当重试也失效之后才应该熔断，完整的配置如下</strong>:</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ribbon:</span>   <span class="comment"># 设置ribbon的超时时间，这里使用Feign会和Hystrix的超时间相互干扰</span></div><div class="line"><span class="attr">  ReadTimeout:</span> <span class="number">5000</span></div><div class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">3000</span></div><div class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">true</span>  <span class="comment">#对所有操作都进行重试。</span></div><div class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">2</span>     <span class="comment"># 切换实例的重试次数。 </span></div><div class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">1</span>               <span class="comment"># 对当前实例的重试次数。</span></div><div class="line"></div><div class="line"><span class="attr">hystrix:</span></div><div class="line"><span class="attr">  command:</span></div><div class="line"><span class="attr">    default:</span>  </div><div class="line"><span class="attr">      execution:</span></div><div class="line"><span class="attr">        isolation:</span></div><div class="line"><span class="attr">          thread:</span></div><div class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">7000</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="https://blog.csdn.net/east123321/article/details/82385816" target="_blank" rel="external">https://blog.csdn.net/east123321/article/details/82385816</a></li>
</ul>
<h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><h3 id="熔断器的状态机"><a href="#熔断器的状态机" class="headerlink" title="熔断器的状态机"></a>熔断器的状态机</h3><ul>
<li><img src="https://images2015.cnblogs.com/blog/978381/201705/978381-20170516093016728-916759277.png" alt=""></li>
</ul>
<ul>
<li><code>Closed</code>：熔断器关闭状态，调用失败次数积累，到了阈值（或一定比例）则启动熔断机制；</li>
<li><code>Open</code>：熔断器打开状态，此时对下游的调用都内部直接返回错误，不走网络，但设计了一个时钟选项，默认的时钟达到了一定时间（这个时间一般设置成平均故障处理时间，也就是MTTR），到了这个时间，进入半熔断状态；</li>
<li><code>Half-Open</code>：半熔断状态，允许定量的服务请求，如果调用都成功（或一定比例）则认为恢复了，关闭熔断器，否则认为还没好，又回到熔断器打开状态； </li>
</ul>
<h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>circuitBreaker.enabled</td>
<td>是否开启熔断器</td>
<td>默认true</td>
</tr>
<tr>
<td>circuitBreaker.sleepWindowInMilliseconds</td>
<td>熔断多少秒后去尝试请求</td>
<td>当熔断器处于open的时候，并且达到了这个阈值，熔断器处于half-open状态，当再次有请求过来的时候就会尝试再次请求服务，而不是直接熔断服务，当此时访问服务正常的话，那么熔断器就会关闭。默认值5000毫秒</td>
</tr>
<tr>
<td>circuitBreaker.requestVolumeThreshold</td>
<td>在使用统计信息做出打开/关闭决策之前，必须在统计窗口中进行的请求数量</td>
<td>默认20</td>
</tr>
<tr>
<td>circuitBreaker.errorThresholdPercentage</td>
<td>失败率达到多少百分比后熔断</td>
<td>默认值50，即是请求失败率达到50%熔断器处于open状态</td>
</tr>
<tr>
<td>commandKey</td>
<td></td>
<td>默认值：当前执行方法名</td>
</tr>
</tbody>
</table>
<h3 id="直接在-HystrixCommand注解中配置熔断"><a href="#直接在-HystrixCommand注解中配置熔断" class="headerlink" title="直接在@HystrixCommand注解中配置熔断"></a>直接在@HystrixCommand注解中配置熔断</h3><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Hystrix的依赖 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>直接在消费者端使用即可，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用<span class="doctag">@DefaultProperties</span>指定默认的熔断方法</div><div class="line"> * 	1、需要熔断机制的接口上只需要添加<span class="doctag">@HystrixCommand</span>注解即可</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@DefaultProperties</span>(defaultFallback=<span class="string">"defaultFallBack"</span>)   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URI_PRFIX=<span class="string">"http://zuul-server/api-order"</span>;  <span class="comment">//直接使用zuul网管连接订单的服务提供者</span></div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">	</div><div class="line">	<span class="meta">@HystrixCommand</span>(commandProperties=&#123;</div><div class="line">			<span class="meta">@HystrixProperty</span>(name=<span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value=<span class="string">"3000"</span>),  <span class="comment">//设置超时时间</span></div><div class="line">			<span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.enabled"</span>,value=<span class="string">"true"</span>),  <span class="comment">// 开启熔断</span></div><div class="line">			<span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.requestVolumeThreshold"</span>,value=<span class="string">"10"</span>),  <span class="comment">//最小请求数</span></div><div class="line">			<span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value=<span class="string">"10000"</span>),  <span class="comment">//请求重试时间，单位毫秒</span></div><div class="line">			<span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.errorThresholdPercentage"</span>,value=<span class="string">"60"</span>),   <span class="comment">//失败率</span></div><div class="line">	&#125;)   <span class="comment">//使用这个注解，其中指定熔断后调用的方法</span></div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/order/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (id==<span class="number">1</span>) &#123;   <span class="comment">//模拟异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> restTemplate.getForObject(URI_PRFIX+<span class="string">"/order/"</span>+id, Order.class);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *  	默认的熔断方法</div><div class="line">	 *  	1、参数必须为空</div><div class="line">	 *  	2、返回的类型有特殊要求	</div><div class="line">	 *  		1、必须和出现熔断的方法的返回类型相同或者是其子类</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Order <span class="title">defaultFallBack</span><span class="params">()</span> </span>&#123;</div><div class="line">		Order order=<span class="keyword">new</span> Order();</div><div class="line">		order.setOrderId(-<span class="number">1</span>);</div><div class="line">		order.setOrderNum(<span class="string">"太拥挤了，请稍后再试......"</span>);</div><div class="line">		<span class="keyword">return</span> order;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>上面的配置完成之后，先请求传入id=1，达到失败率50%，那么熔断器就会开启，此时再传入id=1，那么本应该正常访问的，但是此时会被熔断，经过10000毫秒之后，再次访问传入id=2，请求成功之后，表示熔断机制关闭了</strong></li>
</ul>
<h3 id="使用配置文件实现"><a href="#使用配置文件实现" class="headerlink" title="使用配置文件实现"></a>使用配置文件实现</h3><ul>
<li>在需要熔断的方法上面添加<code>@HystrixCommand</code>这个注解</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">hystrix:</span></div><div class="line"><span class="attr">  command:</span></div><div class="line"><span class="attr">    default:</span>  <span class="comment"># 这里使用default，但是如果针对单个方法，可以使用方法名称</span></div><div class="line"><span class="attr">      execution:</span></div><div class="line"><span class="attr">        isolation:</span></div><div class="line"><span class="attr">          thread:</span></div><div class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">3000</span></div><div class="line"><span class="attr">      circuitBreaker:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        requestVolumeThreshold:</span> <span class="number">10</span></div><div class="line"><span class="attr">        sleepWindowInMilliseconds:</span> <span class="number">10000</span></div><div class="line"><span class="attr">        errorThresholdPercentage:</span> <span class="number">60</span></div></pre></td></tr></table></figure>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul>
<li><a href="https://gitee.com/chenjiabing666/order-client.git" target="_blank" rel="external">https://gitee.com/chenjiabing666/order-client.git</a></li>
</ul>
<h2 id="Hystrix-Dashboard-图形化监控"><a href="#Hystrix-Dashboard-图形化监控" class="headerlink" title="Hystrix Dashboard  图形化监控"></a>Hystrix Dashboard  图形化监控</h2><ul>
<li>主要是用来监控服务提供者的情况（服务提供者必须实现了Hystrix的熔断机制才能被监控）</li>
</ul>
<h3 id="Hystrix-dashboard-服务端配置"><a href="#Hystrix-dashboard-服务端配置" class="headerlink" title="Hystrix-dashboard 服务端配置"></a>Hystrix-dashboard 服务端配置</h3><ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>添加eureka客户端的依赖，并且将其注册到eureka中</li>
<li>在主启动类上添加对应的注解<code>@EnableHystrixDashboard</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableHystrixDashboard</span>   <span class="comment">//开启Hystrix-dashboard</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>     <span class="comment">//eureka的客户端</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>配置如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">3366</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">hystrix-dashborad</span>   <span class="comment">#应用的名称，在同一个eureka中必须不重复</span></div></pre></td></tr></table></figure>
<ul>
<li>启动服务访问地址：<code>http://localhost:3366/hystrix</code>，将会出现如下界面:</li>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/hystrix1.png?raw=true" alt=""></li>
</ul>
<ul>
<li>源码：<a href="https://gitee.com/chenjiabing666/hystrix-dashboard.git" target="_blank" rel="external">https://gitee.com/chenjiabing666/hystrix-dashboard.git</a></li>
</ul>
<h3 id="被监控服务的创建"><a href="#被监控服务的创建" class="headerlink" title="被监控服务的创建"></a>被监控服务的创建</h3><ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Hystrix的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置如下：<ul>
<li><strong>必须配置<code>endpoints</code>，否则将会连接补上</strong></li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="attr">hystrix:</span></div><div class="line"><span class="attr">  command:</span></div><div class="line"><span class="attr">    default:</span>  <span class="comment"># 这里使用default，但是如果针对单个方法，可以使用方法名称</span></div><div class="line"><span class="attr">      execution:</span></div><div class="line"><span class="attr">        isolation:</span></div><div class="line"><span class="attr">          thread:</span></div><div class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">3000</span></div><div class="line"><span class="attr">      circuitBreaker:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        requestVolumeThreshold:</span> <span class="number">10</span></div><div class="line"><span class="attr">        sleepWindowInMilliseconds:</span> <span class="number">10000</span></div><div class="line"><span class="attr">        errorThresholdPercentage:</span> <span class="number">60</span></div><div class="line">        </div><div class="line"><span class="attr">ribbon:</span>   <span class="comment"># 设置ribbon的超时时间，这里使用Feign会和Hystrix的超时间相互干扰</span></div><div class="line"><span class="attr">  ReadTimeout:</span> <span class="number">5000</span></div><div class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">3000</span></div><div class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">true</span>  <span class="comment">#对所有操作都进行重试。</span></div><div class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">2</span>     <span class="comment"># 切换实例的重试次数。 </span></div><div class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">1</span>               <span class="comment"># 对当前实例的重试次数。</span></div><div class="line">  </div><div class="line"><span class="attr">management:</span>    <span class="comment"># 配置节点，一定要配置，否则将不能连接上</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      exposure:</span></div><div class="line"><span class="attr">        include:</span> <span class="string">hystrix.stream</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>在主启动类上必须添加注解`@EnableCircuitBreaker</strong>`</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   <span class="comment">//开启eureka</span></div><div class="line"><span class="meta">@EnableCircuitBreaker</span>   <span class="comment">//开启熔断</span></div><div class="line"><span class="meta">@EnableFeignClients</span>(basePackages= &#123;<span class="string">"cn.tedu.api.feign"</span>&#125;)  <span class="comment">//扫描FeignClient</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages= &#123;<span class="string">"cn.tedu.*"</span>&#125;)   <span class="comment">//扫描Hystrix的fallbackFactory</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderClient9002Application</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li><p>启动成功后在<code>hystrix-dashboard</code>添加如下地址即可被监控:</p>
<ul>
<li><code>http://localhost:9002/actuator/hystrix.stream</code></li>
</ul>
</li>
<li><p>源码（<code>order-client9002</code>）：<a href="https://github.com/chenjiabing666/order-parent.git" target="_blank" rel="external">https://github.com/chenjiabing666/order-parent.git</a></p>
</li>
</ul>
<h3 id="详细指标"><a href="#详细指标" class="headerlink" title="详细指标"></a>详细指标</h3><ul>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/hystrix2.jpg?raw=true" alt=""></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="熔断发生的场景"><a href="#熔断发生的场景" class="headerlink" title="熔断发生的场景"></a>熔断发生的场景</h3><ul>
<li>达到配置的超时时间</li>
<li>没有服务提供者提供服务</li>
<li>服务提供者程序发生异常</li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>Feign+Hystrix的方式配置Hystrix的超时时间一定还要配置Ribbon的超时时间</li>
<li>Feign+Hystrix的熔断配置和Ribbon+Hystrix的配置方式基本相同</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.cnblogs.com/yawen/p/6655352.html" target="_blank" rel="external">https://www.cnblogs.com/yawen/p/6655352.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hystrix-断路器、熔断器&quot;&gt;&lt;a href=&quot;#Hystrix-断路器、熔断器&quot; class=&quot;headerlink&quot; title=&quot;Hystrix 断路器、熔断器&quot;&gt;&lt;/a&gt;Hystrix 断路器、熔断器&lt;/h1&gt;&lt;h2 id=&quot;服务雪崩&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Feign（负载均衡）</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/Feign%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/Feign负载均衡/</id>
    <published>2018-12-24T16:20:36.000Z</published>
    <updated>2018-12-24T16:21:17.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feign-负载均衡"><a href="#Feign-负载均衡" class="headerlink" title="Feign 负载均衡"></a>Feign 负载均衡</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</li>
<li>声明式的接口+注解</li>
<li>使用的是轮询的算法</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><strong>添加依赖（消费者端和公共模块端）</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!--feign的依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--eureka客户端的依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--ribbon的依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>创建两个<strong>服务提供者</strong>，实例名称为<code>DEPT-PROVIDER</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Id获取部门</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line">		Dept dept=<span class="keyword">new</span> Dept();</div><div class="line">		dept.setDeptId(id);</div><div class="line">		dept.setDeptName(<span class="string">"8081"</span>);</div><div class="line">		<span class="keyword">return</span> dept;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加部门</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 */</div><div class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dept;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>一般我们需要将feign接口写在公共的项目中，因为接口不止一个项目使用，可以提供给多个项目使用，在<code>dept-api</code>这个项目中添加如下的feign接口,其中<code>@FeignClient</code>这个注解的value属性必须和对应的服务提供者的实例名称相同</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.tedu.api.feign;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> cn.tedu.api.doamin.Dept;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 1、配置一个Feign的客户端，使用<span class="doctag">@FeignClient</span>()，其中的name是微服务提供者的实例名称</div><div class="line"> * 2、其中的restful风格的api只能使用RequestMapping，不能使用GetMapping等，有些版本可能会报错</div><div class="line"> * 3、怎样和提供者的api对应呢？</div><div class="line"> * 		1、并不是方法名称一致，根据uri来区分的，只要uri访问一致，那么就会匹配对应的服务提供者的api</div><div class="line"> * 		2、虽然不是根据方法名称来匹配，但是我们最好保持一致</div><div class="line"> */</div><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"DEPT-PROVIDER"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptFeign</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取部门，使用Get方式请求</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/dept/&#123;id&#125;"</span>,method=RequestMethod.GET)</div><div class="line">	<span class="function">Dept <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加部门，使用POST请求的方式</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/dept"</span>,method=RequestMethod.POST)</div><div class="line">	<span class="function">Dept <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建消费者，添加上面的dept-api这个坐标，直接注入<code>DeptFeign</code>这个接口实例即可使用，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> DeptFeign deptFeign;  <span class="comment">//直接注入Feign接口，不过需要在主启动类上扫描该类所在的包或者父包</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据部门Id获取部门</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</div><div class="line">		<span class="keyword">return</span> deptFeign.get(id);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加部门，json方式提交</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> deptFeign.addDept(dept);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在消费者的主启动类上添加<code>@EnableFeignClients</code>这个注解，注意一定要扫描带有<code>@FeignClient</code>这个注解的接口的包或者父包，将其注入到ioc容器中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>    <span class="comment">//eureka客户端</span></div><div class="line"><span class="meta">@EnableFeignClients</span>(basePackages= &#123;<span class="string">"cn.tedu.api"</span>&#125;)   <span class="comment">//开启Feign，其中basePackages扫描的包一定要是@FeignClient这个注解的所在包或者父包</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer8003Application</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DeptConsumer8003Application.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>消费者端的主启动类上需要使用<code>@EnableFeignClients</code>并且扫描带有<code>@FeignClient</code>这个注解的包或者父包</li>
<li>Feign是和Eureka结合使用的，因此需要添加Eureka的依赖，并且在主启动类上添加对应的注解<code>@EnableEurekaClient</code></li>
<li><strong>Feign的接口怎样和提供者的api对应呢？</strong><ul>
<li>并不是方法名称一致，根据uri来区分的，只要uri访问一致，那么就会匹配对应的服务提供者的api</li>
<li>虽然不是根据方法名称来匹配，但是我们最好保持一致</li>
</ul>
</li>
<li><strong>其中的restful风格的api只能使用<code>RequestMapping</code>，不能使用<code>GetMapping</code>等，有些版本可能会报错</strong></li>
<li>一般使用Feign定义接口都需要放在公共模块中，因为这些接口可能是公用的</li>
</ul>
<h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><ul>
<li>Feign是结合Ribbon使用的，负载均衡算法和Ribbon是一样的，默认采用的是轮询算法，如果需要改变，只需要注入Ribbon的已经有的算法即可，具体操作和Ribbon一样，只需要新建一个配置类类，直接注入接，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</div><div class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Feign的负载均衡算法的配置类，和Ribbon一样</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignRule</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注入随机算法</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RandomRule();   <span class="comment">//直接创建一个随机算法返回即可</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Feign-负载均衡&quot;&gt;&lt;a href=&quot;#Feign-负载均衡&quot; class=&quot;headerlink&quot; title=&quot;Feign 负载均衡&quot;&gt;&lt;/a&gt;Feign 负载均衡&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud的资源</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/Spring%20cloud%E7%9A%84%E4%BC%98%E7%A7%80%E8%B5%84%E6%BA%90/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/Spring cloud的优秀资源/</id>
    <published>2018-12-24T16:19:33.000Z</published>
    <updated>2018-12-24T16:27:21.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-cloud的资源"><a href="#spring-cloud的资源" class="headerlink" title="spring cloud的资源"></a>spring cloud的资源</h2><ul>
<li><a href="https://springcloud.cc/" target="_blank" rel="external">Springcloud中文网</a></li>
<li><a href="https://springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="external">中文文档</a></li>
<li><a href="http://springcloud.cn/" target="_blank" rel="external">中国社区</a></li>
<li><a href="http://springcloud.fun/" target="_blank" rel="external">优质学习资源</a></li>
<li><a href="http://www.cnblogs.com/skyme/p/8976866.html" target="_blank" rel="external">SpringBoot学习资源</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.1.0.M3/single/spring-cloud-netflix.html" target="_blank" rel="external">官方文档</a></li>
<li><a href="http://www.itmuch.com/spring-cloud-sum-eureka/" target="_blank" rel="external">http://www.itmuch.com/spring-cloud-sum-eureka/</a></li>
<li><a href="https://yujunhao8831.github.io/2017/05/27/Spring-Cloud-Eureka-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">指南</a></li>
<li><a href="https://www.cnblogs.com/huangjuncong/tag/SpringCloud/" target="_blank" rel="external">https://www.cnblogs.com/huangjuncong/tag/SpringCloud/</a></li>
<li><a href="https://blog.csdn.net/u012702547/article/details/78547925" target="_blank" rel="external">https://blog.csdn.net/u012702547/article/details/78547925</a></li>
<li><a href="https://www.cnblogs.com/leeSmall/category/1185489.html" target="_blank" rel="external">https://www.cnblogs.com/leeSmall/category/1185489.html</a></li>
<li><a href="https://windmt.com/tags/Spring-Cloud/" target="_blank" rel="external">https://windmt.com/tags/Spring-Cloud/</a></li>
<li><a href="http://www.ityouknow.com" target="_blank" rel="external">http://www.ityouknow.com</a></li>
<li><a href="http://www.itmuch.com/categories/Spring-Cloud" target="_blank" rel="external">http://www.itmuch.com/categories/Spring-Cloud</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;spring-cloud的资源&quot;&gt;&lt;a href=&quot;#spring-cloud的资源&quot; class=&quot;headerlink&quot; title=&quot;spring cloud的资源&quot;&gt;&lt;/a&gt;spring cloud的资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;htt
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ribbon（客户端负载均衡）</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/Ribbon%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/Ribbon客户端负载均衡/</id>
    <published>2018-12-24T16:19:33.000Z</published>
    <updated>2018-12-24T16:20:03.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon-客户端负载均衡"><a href="#Ribbon-客户端负载均衡" class="headerlink" title="Ribbon - 客户端负载均衡"></a>Ribbon - 客户端负载均衡</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。它是一个基于HTTP和TCP的客户端负载均衡器。它可以通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问以达到均衡负载的作用。</li>
</ul>
<h2 id="使用（消费端）"><a href="#使用（消费端）" class="headerlink" title="使用（消费端）"></a>使用（消费端）</h2><ul>
<li>导入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--eureka客户端--&gt;</span>		</div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--ribbon--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在消费端添加如下配置，用来从eureka集群中轮询请求可访问的微服务，不用注册到eureka中，配置如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8003</span></div><div class="line"><span class="attr">  servlet:</span></div><div class="line"><span class="attr">    context-path:</span> <span class="string">/dept-consumer</span></div><div class="line"><span class="attr">eureka:</span>  <span class="comment"># 配置eureka客户端，不用注册到eureka中</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span>   </div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/,http://eureka7001.com:7001/eureka/</span>  <span class="comment"># eureka的暴露地址，指向集群中每一个eureka，多个用都好分隔  </span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span>   <span class="comment"># 只是消费者，因此不用将自己注册到eureka中</span></div></pre></td></tr></table></figure>
<ul>
<li>在restTemplate的配置类中添加一个注解<code>@LoadBalanced</code>，配置如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * RestTemplate的配置类</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年12月6日 下午6:10:58</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@LoadBalanced</span>  <span class="comment">//ribbon实现客户端的负载均衡，默认使用的是轮询的算法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(factory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</div><div class="line">        factory.setReadTimeout(<span class="number">5000</span>);<span class="comment">//单位为ms</span></div><div class="line">        factory.setConnectTimeout(<span class="number">5000</span>);<span class="comment">//单位为ms</span></div><div class="line">        <span class="keyword">return</span> factory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>在主启动类上添加<code>@EnableEurekaClient</code>注解</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(EurekaClientApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>消费者的controller端直接使用微服务的名称访问即可，ribbon会自动根据名称在eureka中查询指定的微服务，不需要写明微服务的ip了</strong>，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">	<span class="comment">//请求路径直接使用微服务的名称即可EUREKA-PROVIDER，eureka-provider是微服务的项目名称(servlet.context-path)</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URI_PREFIX=<span class="string">"http://EUREKA-PROVIDER/eureka-provider"</span>;  </div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 使用RestTemplate发出get请求</div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">		Map&lt;String, Object&gt; params=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">		params.put(<span class="string">"id"</span>, id);</div><div class="line">		Dept dept = restTemplate.getForObject(URI_PREFIX+<span class="string">"/dept/&#123;id&#125;"</span>, Dept.class, params);</div><div class="line">		<span class="keyword">return</span> dept;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>创建两个提供者，提供相同的服务，使用同一个微服务的名称（<code>EUREKA-PROVIDER</code>），这个就相当于是一个集群了，需要改变的就是<code>端口</code>和<code>instance-id</code>，配置如下：</strong></p>
<ul>
<li>第一个服务提供者</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8001</span></div><div class="line"><span class="attr">  servlet:</span></div><div class="line"><span class="attr">    context-path:</span> <span class="string">/eureka-provider</span>    <span class="comment"># 访问的项目名称在配置“集群”的时候也是必须一样的，否则不好调用</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/,http://eureka7001.com:7001/eureka/</span>  <span class="comment"># eureka的暴露地址，直接注册，使用的是eureka的集群</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    instance-id:</span> <span class="attr">eureka-provider:8001</span>    <span class="comment">## instance-id区别服务</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment">## 访问路径可以显示服务主机的IP地址</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-provider</span>   <span class="comment">#微服务的名称，配置集群的时候必须相同</span></div></pre></td></tr></table></figure>
<ul>
<li>第二个服务提供者</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8002</span></div><div class="line"><span class="attr">  servlet:</span></div><div class="line"><span class="attr">    context-path:</span> <span class="string">/eureka-provider</span>    <span class="comment"># 访问的项目名称在配置“集群”的时候也是必须一样的，否则不好调用</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/,http://eureka7001.com:7001/eureka/</span>  <span class="comment"># eureka的暴露地址，直接注册，使用的是eureka的集群</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    instance-id:</span> <span class="attr">eureka-provider:8002</span>    <span class="comment">## instance-id区别服务</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment">## 访问路径可以显示服务主机的IP地址</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-provider</span>   <span class="comment">#微服务的名称，配置集群的时候必须相同</span></div></pre></td></tr></table></figure>
</li>
<li><p>微服务启动，如下图：</p>
</li>
<li><p><img src="https://github.com/chenjiabing666/BlogImage/blob/master/eureka4.png?raw=true" alt=""></p>
</li>
</ul>
<ul>
<li>此时访问<code>http://localhost:8003/dept/-consumer/dept/1</code>可以发现此时的负载均衡的策略默认使用的是轮询算法</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li><strong>负载均衡是在同一个功能的微服务中根据不同的策略选择不同的微服务，因此这些微服务对外暴露的实例名称要相同（spring.application.name）</strong></li>
<li><strong>ribbon是一个客户端的负载均衡，必须要连接eureka，才能在指定的微服务实例中按照策略选择</strong></li>
</ul>
<h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><ul>
<li><strong><code>RoundRobinRule</code>：轮询，默认的算法</strong></li>
<li><strong><code>RandomRule</code> ： 随机算法</strong></li>
<li><code>AvailabilityFilteringRule</code>：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问</li>
<li><code>WeightedResponseTimeRule</code>：根据平均响应时间计算所有的权重，响应时间越快服务权重越大被选中的概率越高，刚启动时统计信息不足，则使用轮询策略，等统计信息足够，会自动切换到WeightedResponseTimeRule</li>
<li><strong><code>RetryRule</code>：先按照轮询策略获取服务，如果服务获取失败则在指定时间内会进行重试，获取可用的服务</strong></li>
<li><code>BestAvailableRule</code>：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li>
<li><code>ZoneAvoidanceRule</code>：复合判断server所在区域的性能和server的可用性选择服务器</li>
</ul>
<h2 id="配置负载均衡策略"><a href="#配置负载均衡策略" class="headerlink" title="配置负载均衡策略"></a>配置负载均衡策略</h2><ul>
<li>直接创建一个配置类，注入想要使用的负载均衡算法即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</div><div class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Ribbon负载均衡算法的配置类</div><div class="line"> * 1、原理：如果用户没有注入自己的算法，那么ribbon默认使用的是轮询算法，如果注入了，那么将会使用注入的</div><div class="line"> */ </div><div class="line"><span class="meta">@Configuration</span>   <span class="comment">//表明这是一个配置类，相当于配置文件xml</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonRule</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置随机算法，改变默认的轮询算法</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">rule</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();   <span class="comment">//直接返回随机算法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义负载均衡算法"><a href="#自定义负载均衡算法" class="headerlink" title="自定义负载均衡算法"></a>自定义负载均衡算法</h2><ul>
<li>未完，待续……</li>
</ul>
<h2 id="超时时间设置"><a href="#超时时间设置" class="headerlink" title="超时时间设置"></a>超时时间设置</h2><ul>
<li>默认超时时间为1000毫秒，如果需要修改超时时间，配置如下:<ul>
<li>由于是http请求，因此这里代表的socket的连接时间和读取时间</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ribbon:</span> </div><div class="line"><span class="attr">  ReadTimeout:</span> <span class="number">5000</span>     <span class="comment"># 请求处理时间。</span></div><div class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">9000</span>   <span class="comment"># 请求连接时间。</span></div></pre></td></tr></table></figure>
<h2 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h2><ul>
<li><a href="https://blog.csdn.net/akaks0/article/details/80039590" target="_blank" rel="external">https://blog.csdn.net/akaks0/article/details/80039590</a></li>
<li>全局配置如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">ribbon:</span> </div><div class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">true</span>  <span class="comment">#对所有操作都进行重试。</span></div><div class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">2</span>     <span class="comment"># 切换实例的重试次数。 </span></div><div class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">1</span>               <span class="comment"># 对当前实例的重试次数。</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ribbon-客户端负载均衡&quot;&gt;&lt;a href=&quot;#Ribbon-客户端负载均衡&quot; class=&quot;headerlink&quot; title=&quot;Ribbon - 客户端负载均衡&quot;&gt;&lt;/a&gt;Ribbon - 客户端负载均衡&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Eureka服务发现和注册</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/Eureka%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%92%8C%E6%B3%A8%E5%86%8C/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/Eureka服务发现和注册/</id>
    <published>2018-12-24T16:18:42.000Z</published>
    <updated>2018-12-24T16:19:09.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eureka-服务发现和注册"><a href="#Eureka-服务发现和注册" class="headerlink" title="Eureka - 服务发现和注册"></a>Eureka - 服务发现和注册</h2><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ul>
<li>新建springBoot项目，选择模块<code>cloud Discovery</code>====&gt;<code>Eureka Server</code></li>
<li>此时的依赖如下：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">		&lt;!-- eureka的服务端 --&gt;		</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;dependencyManagement&gt;</div><div class="line">		&lt;dependencies&gt;</div><div class="line">			&lt;dependency&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</div><div class="line">				&lt;type&gt;pom&lt;/type&gt;</div><div class="line">				&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">			&lt;/dependency&gt;</div><div class="line">		&lt;/dependencies&gt;</div><div class="line">	&lt;/dependencyManagement&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中配置基本的信息，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7001</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span>   <span class="comment">## 实例名称</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 注册中心不向自己注册自己</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否将自己注册到Eureka Server,不去检索服务</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line">      <span class="comment"># 设置与Eureka Server的地址,查询服务和注册服务都需要依赖这个地址.默认是http://localhost:7001/eureka/;多个地址可使用','风格.</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure>
<ul>
<li>在启动类上添加<code>@EnableEurekaServer</code>这个注解即可启动</li>
<li>启动在本地访问：<code>http://localhost:7001/</code>，如果出现下图，那么表示启动成功：</li>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/eureka.png?raw=true" alt=""></li>
</ul>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul>
<li>新建springBoot项目，选择<code>cloud Discovery</code>==&gt;<code>Eureka Discovery</code></li>
<li>新建完成之后，pom文件中的依赖如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    	<span class="comment">&lt;!--eureka客户端的依赖--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置文件需要配置将该项目注册到之前的服务端中</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8003</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-client</span>   <span class="comment">#应用的名称，在同一个eureka中必须不重复</span></div></pre></td></tr></table></figure>
<ul>
<li>此时访问<code>http://localhost:7001</code>将会看到如下界面：</li>
<li><p><img src="https://github.com/chenjiabing666/BlogImage/blob/master/eureka2.png?raw=true" alt=""></p>
</li>
<li><p>通过上图能够看到自己项目已经注册到了eureka中了</p>
</li>
</ul>
<h2 id="细节的完善"><a href="#细节的完善" class="headerlink" title="细节的完善"></a>细节的完善</h2><h3 id="微服务名称的改变"><a href="#微服务名称的改变" class="headerlink" title="微服务名称的改变"></a>微服务名称的改变</h3><ul>
<li>通过上面的图形可以看到默认的名称是<code>192.168.1.1:eureka-client:8003</code>，现在我们需要改变名称，让开发者能够一目了然的知道这个服务是干什么的，配置如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eureka.instance.instance-id=eureka-client:8003  #改变微服务的名称</div></pre></td></tr></table></figure>
<h3 id="访问信息显示IP信息提示"><a href="#访问信息显示IP信息提示" class="headerlink" title="访问信息显示IP信息提示"></a>访问信息显示IP信息提示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eureka.instance.prefer-ip-address=true    ## 显示IP地址</div></pre></td></tr></table></figure>
<h3 id="微服务info内容的说明（客户端）"><a href="#微服务info内容的说明（客户端）" class="headerlink" title="微服务info内容的说明（客户端）"></a>微服务info内容的说明（客户端）</h3><ul>
<li>之前点击微服务名称之后跳转到之后是一个错误页面，现在我们需要返回这个info信息</li>
<li>添加依赖，如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--actuator依赖，不需要填写version，由springBoot父类控制	--&gt;</span>			</div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在pom文件中添加build信息，如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">    </div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 读取以$符号开头的和$符号结尾的，都能够读取 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>$<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>之后只需要在<code>src/main/resuorces/application.yml</code>文件中添加信息即可，格式是键值对的形式，如下：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 说明info的信息，key-value的形式</span></div><div class="line"><span class="attr">info:</span>    </div><div class="line">  <span class="string">app.name:</span> <span class="string">eureka-client</span></div><div class="line">  <span class="string">company.name:</span> <span class="attr">http://chenjiabing666.github.io</span></div><div class="line"><span class="attr">  groupId:</span> <span class="string">$project.groupId$</span></div><div class="line"><span class="attr">  artifactId:</span> <span class="string">$project.artifactId$</span></div><div class="line"><span class="attr">  version:</span> <span class="string">$project.version$</span></div></pre></td></tr></table></figure>
<h2 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h2><ul>
<li><p>在eureka中出现如下内容表示自我保护机制起作用了，如下：</p>
</li>
<li><p><code>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</code></p>
</li>
<li>默认情况下,如果Eureka Server在一定时间内没有收到某个微服务实例的心跳,Eureka Server就会注销这个实例(默认是90秒).<br>但是当网路分区发生故障时,微服务与Eureka Server之间无法正常通信,以上行为就可能非常危险,因为微服务本身是健康的,此时本不应该注销这个服务的.</li>
<li><p>Eureka 通过<strong>自我保护模式</strong>来解决这个问题,当Eureka Server节点在<strong>短时间内丢失过多客户端时(可能发生了网络分区故障)</strong>,那么这个节点就会进入自我保护模式。一旦进入这个模式,Eureka Server就会保护服务注册表中的信息,不再删除服务注册表中的数据(也就是不注销任何微服务).当网络故障恢复后,这个Eureka Server<br>节点会自动退出自我保护模式.</p>
</li>
<li><p>禁用自我保护机制（<strong>生产环境中不推荐</strong>）</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  server:</span></div><div class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 禁用自我保护模式</span></div></pre></td></tr></table></figure>
<h2 id="服务发现（不重要）"><a href="#服务发现（不重要）" class="headerlink" title="服务发现（不重要）"></a>服务发现（不重要）</h2><ul>
<li>为了让别人能够了解这个微服务是干什么的，需要对外暴露一个链接，让别人能够了解到这个微服务是干什么的</li>
<li>在eureka的客户端添加如下controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> DiscoveryClient discoveryClient;  <span class="comment">//服务发现的client</span></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 服务发现</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/discovery"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</div><div class="line">		List&lt;String&gt; list=discoveryClient.getServices();  <span class="comment">//获取所有的微服务实例</span></div><div class="line">		System.out.println(list);</div><div class="line">        <span class="comment">//根据为微服务的名称获取实例</span></div><div class="line">		List&lt;ServiceInstance&gt; serviceList=discoveryClient.getInstances(<span class="string">"EUREKA-PROVIDER"</span>);</div><div class="line">		<span class="keyword">for</span> (ServiceInstance element : serviceList) &#123;</div><div class="line">			System.out.println(element.getServiceId()+<span class="string">"\t"</span>+element.getHost()+<span class="string">"\t"</span>+element.getUri());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在主启动类上添加注解开启服务发现：<code>@EnableDiscoveryClient</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span>   	<span class="comment">//eureka服务客户端</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//eureka服务发现</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaProvider8001Application</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(EurekaProvider8001Application.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>此时访问<code>http://localhost:8001/eureka-provider/dept/discovery</code>控制台就会打印如下信息：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EUREKA-PROVIDER	<span class="number">192.168</span>.1.102	http:<span class="comment">//192.168.1.102:8001</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>此时在消费端就可以通过restTemplate调用这个服务发现的uri获取服务的信息，此处省略</strong></li>
</ul>
<p>eureka3.png</p>
<h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><ul>
<li>在本地模拟开启三个注册中心server，在hosts文件中添加如下的地址：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">eureka7001.com</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">eureka7002.com</span></div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">eureka7003.com</span></div></pre></td></tr></table></figure>
<h3 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h3><ul>
<li><p>分别创建三个eureka服务端，如下：</p>
</li>
<li><p><img src="https://github.com/chenjiabing666/BlogImage/blob/master/eureka3.png?raw=true" alt=""></p>
</li>
<li><p><strong>其中每一个eureka服务端的service-url都必须指向其他的服务端，由此形成一个手拉手的模式</strong></p>
</li>
<li>eureka7001的配置如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7001</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">eureka7001.com</span>   <span class="comment"># 配置主机的名称，之前是需要在hosts文件中做映射的</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 注册中心不向自己注册自己</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否将自己注册到Eureka Server,默认为true.由于当前应用就是Eureka Server,故而设置为false.</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line">      <span class="comment"># 设置与Eureka Server的地址,查询服务和注册服务都需要依赖这个地址,多个地址可使用','风格，配置集群必须指向除自己之外的其他的eureka服务的地址</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></div></pre></td></tr></table></figure>
<ul>
<li>eureka7001的配置如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7002</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">eureka7002.com</span> <span class="comment"># 配置主机的名称，之前是需要在hosts文件中做映射的</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 注册中心不向自己注册自己</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否将自己注册到Eureka Server,默认为true.由于当前应用就是Eureka Server,故而设置为false.</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line">      <span class="comment"># 设置与Eureka Server的地址,查询服务和注册服务都需要依赖这个地址,多个地址可使用','风格，配置集群必须指向除自己之外的其他的eureka服务的地址</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></div></pre></td></tr></table></figure>
<ul>
<li>eureka7001的配置如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7003</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">eureka7003.com</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 注册中心不向自己注册自己</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否将自己注册到Eureka Server,默认为true.由于当前应用就是Eureka Server,故而设置为false.</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line">      <span class="comment"># 设置与Eureka Server的地址</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7001.com:7001/eureka/</span></div></pre></td></tr></table></figure>
<ul>
<li>以上三个服务端配置完成之后，就可以分别访问以下链接：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//eureka7001.com:7001/</span></div><div class="line">http:<span class="comment">//eureka7002.com:7002/</span></div><div class="line">http:<span class="comment">//eureka7003.com:7003/</span></div></pre></td></tr></table></figure>
<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><ul>
<li>只需要将客户端注册到上面的集群中即可，只需要改变<code>eureka.client.serviceUrl.defaultZone</code>的值为eureka集群中的值，配置如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8003</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span>   </div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/,http://eureka7001.com:7001/eureka/</span>  <span class="comment"># eureka的暴露地址，指向集群中每一个eureka，多个用都好分隔  </span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    instance-id:</span> <span class="attr">eureka-client:8003</span>    <span class="comment">## 改变eureka中显示微服务的名称</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment">## 访问路径可以显示服务主机的IP地址</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-client</span>   <span class="comment">#应用的名称，在同一个eureka中必须不重复</span></div><div class="line"></div><div class="line"><span class="comment"># 说明info的信息，key-value的形式</span></div><div class="line"><span class="attr">info:</span>    </div><div class="line">  <span class="string">app.name:</span> <span class="string">eureka-client</span></div><div class="line">  <span class="string">company.name:</span> <span class="attr">http://chenjiabing666.github.io</span></div></pre></td></tr></table></figure>
<h2 id="完整的配置信息"><a href="#完整的配置信息" class="headerlink" title="完整的配置信息"></a>完整的配置信息</h2><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7001</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="comment">#  server:</span></div><div class="line"><span class="comment">#    enable-self-preservation: false   ##禁用自我保护机制，但是生产环境中不推荐</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 注册中心不向自己注册自己</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否将自己注册到Eureka Server,默认为true.由于当前应用就是Eureka Server,故而设置为false.</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line">      <span class="comment"># 设置与Eureka Server的地址,查询服务和注册服务都需要依赖这个地址.默认是http://localhost:8761/eureka/;多个地址可使用','风格.</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure>
<h3 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8003</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka/</span>  <span class="comment"># eureka的暴露地址，直接注册</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    instance-id:</span> <span class="attr">eureka-client:8003</span>    <span class="comment">## 改变eureka中显示微服务的名称</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>       <span class="comment">## 访问路径可以显示服务主机的IP地址</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-client</span>   <span class="comment">#应用的名称，在同一个eureka中必须不重复</span></div></pre></td></tr></table></figure>
<h2 id="Eureka设置用户名和密码访问"><a href="#Eureka设置用户名和密码访问" class="headerlink" title="Eureka设置用户名和密码访问"></a>Eureka设置用户名和密码访问</h2><h2 id="Eureka和zookepper的区别"><a href="#Eureka和zookepper的区别" class="headerlink" title="Eureka和zookepper的区别"></a>Eureka和zookepper的区别</h2><ul>
<li><p>未完，待续……</p>
</li>
<li><p><a href="https://blog.csdn.net/pml18710973036/article/details/64121522" target="_blank" rel="external">https://blog.csdn.net/pml18710973036/article/details/64121522</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_32521313/article/details/79032155" target="_blank" rel="external">https://blog.csdn.net/qq_32521313/article/details/79032155</a></p>
</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://springcloud.cc/" target="_blank" rel="external">Springcloud中文网</a></li>
<li><a href="https://springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="external">中文文档</a></li>
<li><a href="http://springcloud.cn/" target="_blank" rel="external">中国社区</a></li>
<li><a href="http://springcloud.fun/" target="_blank" rel="external">优质学习资源</a></li>
<li><a href="http://www.cnblogs.com/skyme/p/8976866.html" target="_blank" rel="external">SpringBoot学习资源</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.1.0.M3/single/spring-cloud-netflix.html" target="_blank" rel="external">官方文档</a></li>
<li><p><a href="http://www.itmuch.com/spring-cloud-sum-eureka/" target="_blank" rel="external">http://www.itmuch.com/spring-cloud-sum-eureka/</a></p>
</li>
<li><p><a href="https://yujunhao8831.github.io/2017/05/27/Spring-Cloud-Eureka-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">指南</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Eureka-服务发现和注册&quot;&gt;&lt;a href=&quot;#Eureka-服务发现和注册&quot; class=&quot;headerlink&quot; title=&quot;Eureka - 服务发现和注册&quot;&gt;&lt;/a&gt;Eureka - 服务发现和注册&lt;/h2&gt;&lt;h2 id=&quot;服务端&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Spring Data Mongodb</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/SpringBoot%E6%95%B4%E5%90%88Spring-Data-Mongodb/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/SpringBoot整合Spring-Data-Mongodb/</id>
    <published>2018-12-24T16:17:07.000Z</published>
    <updated>2018-12-24T16:17:54.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合Spring-Data-Mongodb"><a href="#SpringBoot整合Spring-Data-Mongodb" class="headerlink" title="SpringBoot整合Spring Data Mongodb"></a>SpringBoot整合Spring Data Mongodb</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>MongoDB是一款<strong>面向文档</strong>的数据库，类似json（Bson）的数据存储格式</li>
</ul>
<h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul>
<li>数据量大</li>
<li>数据价值较低</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><code>docker pull mongo</code></li>
<li><code>docker run --name mymongo -p 27017:27017 -d mongo</code></li>
</ul>
<h2 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h2><table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接,MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody>
</table>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置如下:</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">mongodb-server</span></div><div class="line"><span class="attr">  data:</span></div><div class="line"><span class="attr">    mongodb:</span></div><div class="line"><span class="attr">      host:</span> <span class="string">******</span>  <span class="comment"># 主机地址</span></div><div class="line"><span class="attr">      port:</span> <span class="number">27017</span>           <span class="comment"># 端口</span></div><div class="line"><span class="attr">      database:</span> <span class="string">test</span>        <span class="comment"># 数据库</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9003</span></div></pre></td></tr></table></figure>
<ul>
<li>新建User实体类，存储在MongonDB中，如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@Accessors</span>(chain=<span class="keyword">true</span>)  <span class="comment">//链式调用</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="meta">@Id</span></div><div class="line">	<span class="keyword">private</span> Integer _id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String mobile;</div><div class="line">	<span class="keyword">private</span> Date birthday;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义一个<code>UserRepository</code>继承<code>MongoRepository</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 	用户的dao层的接口，实现MongoRepository</div><div class="line"> * 	第一个泛型指定的是实体类，第二个指定的是主键Id的类型</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt;</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在service使用如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Transactional</span>   <span class="comment">//开启事务</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> UserRepository userRepository;  <span class="comment">//注入</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	添加用户</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</div><div class="line">		User user2 = userRepository.save(user);</div><div class="line">		System.out.println(<span class="number">1</span>/<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> user2;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	批量添加</div><div class="line">	 * <span class="doctag">@param</span> users</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">addUserBatch</span><span class="params">(List&lt;User&gt; users)</span></span>&#123;</div><div class="line">		List&lt;User&gt; user2 = userRepository.saveAll(users);</div><div class="line">		<span class="keyword">return</span> user2;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	根据Id删除</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		userRepository.deleteById(id);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	更新数据，使用的还是save方法，相当于覆盖</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User  <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		User user2 = userRepository.save(user);</div><div class="line">		<span class="keyword">return</span> user2;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Id获取信息</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userRepository.findById(id).get();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	查询全部</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> userRepository.findAll();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	分页查询信息</div><div class="line">	 * <span class="doctag">@param</span> pageSize</div><div class="line">	 * <span class="doctag">@param</span> pageNum</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserList</span><span class="params">(Integer pageNum,Integer pageSize)</span></span>&#123;</div><div class="line">		Pageable pageable=<span class="keyword">new</span> PageRequest(pageNum-<span class="number">1</span>,pageSize);</div><div class="line">		Page&lt;User&gt; pages = userRepository.findAll(pageable);</div><div class="line">		<span class="keyword">if</span> (pages.hasContent()) &#123;</div><div class="line">			<span class="keyword">return</span> pages.getContent();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>未完待续………………..</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li><a href="https://gitee.com/chenjiabing666/mongo-server.git" target="_blank" rel="external">https://gitee.com/chenjiabing666/mongo-server.git</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot整合Spring-Data-Mongodb&quot;&gt;&lt;a href=&quot;#SpringBoot整合Spring-Data-Mongodb&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合Spring Data Mongod
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Token认证</title>
    <link href="http://chenjiabing666.github.io/2018/12/25/Token%E8%AE%A4%E8%AF%81/"/>
    <id>http://chenjiabing666.github.io/2018/12/25/Token认证/</id>
    <published>2018-12-24T16:13:57.000Z</published>
    <updated>2018-12-24T16:14:43.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认证机制"><a href="#认证机制" class="headerlink" title="认证机制"></a>认证机制</h1><h2 id="常见的几种认证机制"><a href="#常见的几种认证机制" class="headerlink" title="常见的几种认证机制"></a>常见的几种认证机制</h2><h3 id="HTTP-Basic-Auth"><a href="#HTTP-Basic-Auth" class="headerlink" title="HTTP Basic Auth"></a>HTTP Basic Auth</h3><ul>
<li>在HTTP中，HTTP基本认证是一种允许Web浏览器或者其他客户端在请求时提供用户名和口令形式的身份凭证的一种登录验证方式。</li>
<li><strong>简单而言，HTTP基本认证就是我们平时在网站中最常用的通过用户名和密码登录来认证的机制。 就是每次请求都会带上用户名和密码</strong></li>
<li><p>优点 </p>
<ul>
<li>HTTP 基本认证是基本上所有流行的网页浏览器都支持。但是基本认证很少在可公开访问的互联网网站上使用，有时候会在小的私有系统中使用。 </li>
<li>适用于各种平台，包括app和web</li>
</ul>
</li>
<li><p>缺点 </p>
<ul>
<li>HTTP 基本认证虽然足够简单，但是前提是在客户端和服务器主机之间的连接足够安全。如果没有使用SSL/TLS这样的传输层安全的协议，那么以明文传输的密钥和口令很容易被拦截。 </li>
<li>由于现存的浏览器保存认证信息直到标签页或浏览器关闭，或者用户清除历史记录。导致了服务器端无法主动来当前用户登出或者认证失效。</li>
</ul>
</li>
</ul>
<h3 id="OAuth（开放授权）"><a href="#OAuth（开放授权）" class="headerlink" title="OAuth（开放授权）"></a>OAuth（开放授权）</h3><ul>
<li>OAuth 是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表等），而无需将用户名和密码提供给第三方应用。 </li>
<li>OAuth 允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的网站（例如，视频编辑网站）在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容。</li>
<li><strong>最常见的就是qq和微信授权登录</strong> </li>
</ul>
<h3 id="Cookie-Session-认证机制"><a href="#Cookie-Session-认证机制" class="headerlink" title="Cookie/Session 认证机制"></a>Cookie/Session 认证机制</h3><ul>
<li>Cookie 是由客户端保存的小型文本文件，其内容为一系列的键值对。Cookie 是由 HTTP 服务器设置的，保存在浏览器中。Cookie会随着 HTTP请求一起发送。 </li>
<li>Session 是存储在服务器端的，避免在客户端 Cookie 中存储敏感数据。Session 可以存储在 HTTP 服务器的内存中，也可以存在内存数据库（如redis）中。 </li>
<li>Cookie/Session认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端的浏览器端创建了一个Cookie对象；通过客户端带上来Cookie对象来与服务器端的session对象匹配来实现状态管理的。默认的，当我们关闭浏览器的时候，cookie会被删除。但可以通过修改cookie 的expire time使cookie在一定时间内有效</li>
<li>缺点：<ul>
<li>平台有限，不适合App端</li>
<li>数据量过大的话，对服务器会造成负担</li>
</ul>
</li>
</ul>
<h3 id="基于-Token-的认证机制"><a href="#基于-Token-的认证机制" class="headerlink" title="基于 Token 的认证机制"></a>基于 Token 的认证机制</h3><ul>
<li>Token机制相对于Cookie机制又有什么好处呢？<ul>
<li><strong>支持跨域访问</strong>: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.</li>
<li><strong>无状态(也称：服务端可扩展行)</strong>:Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li>
<li><strong>更适用CDN</strong>: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.</li>
<li><strong>去耦</strong>: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.</li>
<li><strong>更适用于移动应用</strong>: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。</li>
<li><strong>CSRF</strong>:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。</li>
<li><strong>性能</strong>: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.</li>
<li><strong>不需要为登录页面做特殊处理</strong>: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.</li>
<li><strong>基于标准化</strong>:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.</li>
</ul>
</li>
</ul>
<h3 id="有状态服务和无状态服务"><a href="#有状态服务和无状态服务" class="headerlink" title="有状态服务和无状态服务"></a>有状态服务和无状态服务</h3><ul>
<li><strong>无状态服务</strong>:就是没有特殊状态的服务,各个请求对于服务器来说统一无差别处理,请求自身携带了所有服务端所需要的所有参数(服务端自身不存储跟请求相关的任何数据,不包括数据库存储信息) </li>
<li><strong>有状态服务</strong>:与之相反,有状态服务在服务端保留之前请求的信息,用以处理当前请求,比如<code>session</code>等 </li>
</ul>
<h2 id="基于JWT（JSON-WEB-TOKEN）的Token认证机制实现"><a href="#基于JWT（JSON-WEB-TOKEN）的Token认证机制实现" class="headerlink" title="基于JWT（JSON WEB TOKEN）的Token认证机制实现"></a>基于JWT（JSON WEB TOKEN）的Token认证机制实现</h2><ul>
<li>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。 </li>
</ul>
<h3 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a><strong>头部（Header）</strong></h3><ul>
<li>JWT还需要一个头部，头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。 </li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"typ"</span>: <span class="string">"JWT"</span>,</div><div class="line">    <span class="attr">"alg"</span>: <span class="string">"HS256"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a><strong>载荷（Payload）</strong></h3><ul>
<li>iss: 该JWT的签发者，是否使用是可选的；</li>
<li>sub: 该JWT所面向的用户,一般是用户名，是否使用是可选的；</li>
<li>aud: 接收该JWT的一方，是否使用是可选的；</li>
<li>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</li>
<li>iat(issued at): 在什么时候签发的(UNIX时间)，一般是登录时间，是否使用是可选的；<br>其他还有：</li>
<li>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"iss"</span>: <span class="string">"Online JWT Builder"</span>, </div><div class="line">  <span class="attr">"iat"</span>: <span class="number">1416797419</span>, </div><div class="line">  <span class="attr">"exp"</span>: <span class="number">1448333419</span>, </div><div class="line">  <span class="attr">"aud"</span>: <span class="string">"www.example.com"</span>, </div><div class="line">  <span class="attr">"sub"</span>: <span class="string">"jrocket@example.com"</span>, </div><div class="line">  <span class="attr">"GivenName"</span>: <span class="string">"Johnny"</span>, </div><div class="line">  <span class="attr">"Surname"</span>: <span class="string">"Rocket"</span>, </div><div class="line">  <span class="attr">"Email"</span>: <span class="string">"jrocket@example.com"</span>, </div><div class="line">  <span class="attr">"Role"</span>: [ <span class="string">"Manager"</span>, <span class="string">"Project Administrator"</span> ] </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>将上面的JSON对象进行[base64编码]可以得到编码后的字符串。这个字符串我们将它称作JWT的Payload（载荷）。</strong> </li>
</ul>
<h3 id="签名（Signature）"><a href="#签名（Signature）" class="headerlink" title="签名（Signature）"></a><strong>签名（Signature）</strong></h3><ul>
<li>将头部和载荷编码后的字符串用<code>.</code>分隔（头部在前）,最后将拼接后的字符串和秘钥（secret）用头部指定的算法进行加密得到一个字符串。那么此时完整的JWT的内容就是<strong>头部+载荷+最后加密得到的字符串</strong>，中间用<code>.</code>分割</li>
</ul>
<h2 id="JJWT"><a href="#JJWT" class="headerlink" title="JJWT"></a>JJWT</h2><ul>
<li>Java实现JWT的token生成</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jjwt --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  	生成token</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxIiwiaWF0IjoxNTQ1NTc0ODE1LCJzdWIiOiLpmYjliqDlhbUifQ.WF0VoGSP5oH0XRsCraJ9lRjtVFRs6I0KJpkhFngpwgk</span></div><div class="line">	JwtBuilder builder = Jwts.builder()</div><div class="line">			.setId(<span class="string">"1"</span>)   <span class="comment">//用户Id</span></div><div class="line">               .setIssuedAt(<span class="keyword">new</span> Date())  <span class="comment">//用户登录的日期 </span></div><div class="line">               .setSubject(<span class="string">"陈加兵"</span>)<span class="comment">//用户名</span></div><div class="line">               .signWith(SignatureAlgorithm.HS256, <span class="string">"sercet"</span>);  <span class="comment">//指定签名的算法和秘钥（盐）  </span></div><div class="line">	String token = builder.compact();  <span class="comment">//获取生成的token</span></div><div class="line">	System.out.println(token);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解析token"><a href="#解析token" class="headerlink" title="解析token"></a>解析token</h3><ul>
<li>解析token需要知道秘钥</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	 * 	解析token</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">		Claims claims = Jwts.parser()</div><div class="line">				.setSigningKey(<span class="string">"sercet"</span>)  <span class="comment">//设置解析的秘钥</span></div><div class="line">				.parseClaimsJws(<span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxIiwiaWF0IjoxNTQ1NTc0ODE1LCJzdWIiOiLpmYjliqDlhbUifQ.WF0VoGSP5oH0XRsCraJ9lRjtVFRs6I0KJpkhFngpwgk"</span>)</div><div class="line">				.getBody();</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"用户Id："</span>+claims.getId());</div><div class="line">		System.out.println(<span class="string">"用户名："</span>+claims.getSubject());</div><div class="line">		System.out.println(<span class="string">"登录时间："</span>+claims.getIssuedAt());</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h3><ul>
<li>不设置过期时间默认是无时间限制的</li>
<li><code>JwtBuilder setExpiration(Date exp);</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JwtBuilder builder = Jwts.builder()</div><div class="line">				.setId(<span class="string">"1"</span>)   <span class="comment">//用户Id</span></div><div class="line">                .setIssuedAt(<span class="keyword">new</span> Date())  <span class="comment">//用户登录的日期 </span></div><div class="line">                .setSubject(<span class="string">"陈加兵"</span>)<span class="comment">//用户名</span></div><div class="line">                .setExpiration(<span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime()+<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>))  <span class="comment">//设置过期时间为1小时</span></div><div class="line">                .signWith(SignatureAlgorithm.HS256, <span class="string">"sercet"</span>);  <span class="comment">//指定签名的算法和秘钥（盐）</span></div></pre></td></tr></table></figure>
<h3 id="添加自定义属性"><a href="#添加自定义属性" class="headerlink" title="添加自定义属性"></a>添加自定义属性</h3><ul>
<li><code>JwtBuilder claim(String name, Object value);</code>： 直接添加自定义的属性，key-value形式</li>
<li><code>JwtBuilder addClaims(Map&lt;String, Object&gt; claims);</code>： 直接添加一个Map作为自定义的属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 *  	生成token</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">		JwtBuilder builder = Jwts.builder()</div><div class="line">				.setId(<span class="string">"1"</span>)   <span class="comment">//用户Id</span></div><div class="line">                .setIssuedAt(<span class="keyword">new</span> Date())  <span class="comment">//用户登录的日期 </span></div><div class="line">                .setSubject(<span class="string">"陈加兵"</span>)<span class="comment">//用户名</span></div><div class="line">                .setExpiration(<span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime()+<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>))  <span class="comment">//设置过期时间为1小时</span></div><div class="line">                .signWith(SignatureAlgorithm.HS256, <span class="string">"sercet"</span>) <span class="comment">//指定签名的算法和秘钥（盐）</span></div><div class="line">                .claim(<span class="string">"age"</span>, <span class="number">22</span>)    <span class="comment">//自定义内容</span></div><div class="line">                .claim(<span class="string">"address"</span>, <span class="string">"江苏省"</span>); <span class="comment">//自定义内容</span></div><div class="line">		String token = builder.compact();  <span class="comment">//获取生成的token</span></div><div class="line">		System.out.println(token);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 	解析token</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">		Claims claims = Jwts.parser()</div><div class="line">				.setSigningKey(<span class="string">"sercet"</span>)  <span class="comment">//设置解析的秘钥</span></div><div class="line">				.parseClaimsJws(<span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxIiwiaWF0IjoxNTQ1NTc1ODQzLCJzdWIiOiLpmYjliqDlhbUiLCJleHAiOjE1NDU1Nzk0NDMsImFnZSI6MjIsImFkZHJlc3MiOiLmsZ_oi4_nnIEifQ.uRhzSnsWl5IO-K6SA3zHsqGacZzkOOsFlD8lvqYDleY"</span>)</div><div class="line">				.getBody();</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"用户Id："</span>+claims.getId());</div><div class="line">		System.out.println(<span class="string">"用户名："</span>+claims.getSubject());</div><div class="line">		System.out.println(<span class="string">"登录时间："</span>+claims.getIssuedAt());</div><div class="line">		System.out.println(<span class="string">"过期时间："</span>+claims.getExpiration());</div><div class="line">		System.out.println(<span class="string">"address："</span>+claims.get(<span class="string">"address"</span>));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="在拦截器中配置"><a href="#在拦截器中配置" class="headerlink" title="在拦截器中配置"></a>在拦截器中配置</h2><h3 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a>JWT工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</div><div class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</div><div class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</div><div class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * JWT的工具类</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"jwt.config"</span>)  <span class="comment">//读取配置文件中的配置</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String secret;  <span class="comment">//秘钥</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">long</span> expire;  <span class="comment">//过期时间</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	生成token </div><div class="line">	 * <span class="doctag">@param</span> id  用户的Id</div><div class="line">	 * <span class="doctag">@param</span> subject  用户名</div><div class="line">	 * <span class="doctag">@param</span> role 角色，分为用户和后台管理员</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">encoder</span><span class="params">(String id,String subject,String role)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		JwtBuilder builder = Jwts.builder()</div><div class="line">				.setId(id)   <span class="comment">//用户Id</span></div><div class="line">                .setIssuedAt(<span class="keyword">new</span> Date())  <span class="comment">//用户登录的日期 </span></div><div class="line">                .setSubject(subject)<span class="comment">//用户名</span></div><div class="line">                .setExpiration(<span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime()+expire))  <span class="comment">//设置过期时间为1小时</span></div><div class="line">                .claim(<span class="string">"role"</span>,role)  <span class="comment">//自定义属性，指定角色</span></div><div class="line">                .signWith(SignatureAlgorithm.HS256, secret); <span class="comment">//指定签名的算法和秘钥（盐）</span></div><div class="line">                </div><div class="line">		<span class="keyword">return</span> builder.compact();  </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 	对token进行解码</div><div class="line">	 * <span class="doctag">@param</span> token</div><div class="line">	 * <span class="doctag">@return</span> 解码后的结果集，相当于Map</div><div class="line">	 * <span class="doctag">@throws</span> Exception  如果解码失败会抛出异常</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Claims <span class="title">decoder</span><span class="params">(String token)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">return</span> Jwts.parser()</div><div class="line">				.setSigningKey(secret)  <span class="comment">//设置解析的秘钥</span></div><div class="line">				.parseClaimsJws(token)  <span class="comment">//解析的token</span></div><div class="line">				.getBody();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">jwt:</span> <span class="comment"># JWT的配置</span></div><div class="line"><span class="attr">  config:</span></div><div class="line"><span class="attr">    secret:</span> <span class="string">secret</span>   <span class="comment">## 秘钥</span></div><div class="line"><span class="attr">    expire:</span> <span class="number">3600000</span>  <span class="comment">## 过期时间1个小时</span></div></pre></td></tr></table></figure>
<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</div><div class="line"><span class="keyword">import</span> cn.tedu.auth.util.JwtUtil;</div><div class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * JWT验证token的拦截器</div><div class="line"> * 	改进： 如果没有权限，那么可以跳转到一个指定的错误页面护.......</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> JwtUtil jwtUtil;    <span class="comment">//注入JwtUtil</span></div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		</div><div class="line">		<span class="comment">//获取请求头中的token</span></div><div class="line">		String token=request.getHeader(<span class="string">"token"</span>);</div><div class="line">		<span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</div><div class="line">			response.setStatus(HttpStatus.UNAUTHORIZED.value());  <span class="comment">//设置401响应信息，没有权限</span></div><div class="line">			System.err.println(<span class="string">"没有权限"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">//直接拦截，不继续进行</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//如果有token，需要解码</span></div><div class="line">		Claims claims=<span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			System.err.println(token);</div><div class="line">			claims = jwtUtil.decoder(token);</div><div class="line">			<span class="keyword">if</span> (claims!=<span class="keyword">null</span>) &#123;</div><div class="line">				request.setAttribute(<span class="string">"claims"</span>, claims);  <span class="comment">//放置在request中，后续的接口可能还需使用</span></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			response.setStatus(HttpStatus.UNAUTHORIZED.value());  <span class="comment">//设置401响应信息，没有权限</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>; </div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><ul>
<li><strong>一定要先注入拦截器类，否则拦截器内的其他对象将不能注入</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">webConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注入拦截器，这里一定需要提前注入，否则拦截器中注入的对象将无法注入</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> JwtInterceptor <span class="title">jwtInterceptor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JwtInterceptor();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">		<span class="comment">// 注册自定义拦截器，添加拦截路径和排除拦截路径 ，这里直接使用上面的方法直接获取注入的拦截器即可，否则将会造成拦截器中无法注入其他的对象</span></div><div class="line">		registry.addInterceptor(jwtInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/user/test"</span>)</div><div class="line">				.excludePathPatterns(<span class="string">"/user/login"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>登录成功返回token</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ResultInfo <span class="title">login</span><span class="params">(User user)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		ResultInfo resultInfo=<span class="keyword">new</span> ResultInfo();</div><div class="line">		User user2 = userRepository.findByName(user.getName());  </div><div class="line">		<span class="keyword">if</span> (user2==<span class="keyword">null</span>) &#123;</div><div class="line">			resultInfo.setCode(<span class="string">"-1"</span>);</div><div class="line">			resultInfo.setMessage(<span class="string">"用户名不存在"</span>);</div><div class="line">			<span class="keyword">return</span> resultInfo;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//判断密码是否正确</span></div><div class="line">		<span class="keyword">if</span> (!bCryptPasswordEncoder.matches(user.getPassword(),user2.getPassword())) &#123;</div><div class="line">			resultInfo.setCode(<span class="string">"-1"</span>);</div><div class="line">			resultInfo.setMessage(<span class="string">"密码不正确"</span>);</div><div class="line">			<span class="keyword">return</span> resultInfo;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//生成token</span></div><div class="line">		String token=JwtUtil.encoder(user2.getId()+<span class="string">""</span>, user2.getName(),<span class="string">"user"</span>);</div><div class="line">		System.err.println(token);</div><div class="line">		</div><div class="line">		Map&lt;String, Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">		map.put(<span class="string">"token"</span>, token);   <span class="comment">//返回token</span></div><div class="line">		map.put(<span class="string">"user"</span>, user);</div><div class="line">		resultInfo.setData(map);</div><div class="line">		resultInfo.setMessage(<span class="string">"登录成功"</span>);</div><div class="line">		<span class="keyword">return</span> resultInfo;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>删除操作需要验证token是否具有指定的权限<ul>
<li>拦截器验证</li>
<li>controller中的角色验证码（后期可以使用切面将其提取出来）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *   删除用户</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ResultInfo <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,HttpServletRequest request) </span>&#123;</div><div class="line">	ResultInfo resultInfo=<span class="keyword">new</span> ResultInfo();</div><div class="line">	</div><div class="line">	<span class="comment">//验证角色，之后该段可以直接用切面完成</span></div><div class="line">	Claims claims = (Claims) request.getAttribute(<span class="string">"claims"</span>); <span class="comment">//获取token解析的map</span></div><div class="line">	String role=(String) claims.get(<span class="string">"role"</span>);  <span class="comment">//获取角色</span></div><div class="line">	<span class="keyword">if</span> (!<span class="string">"user"</span>.equals(role)) &#123;</div><div class="line">		resultInfo.setCode(<span class="string">"-1"</span>);</div><div class="line">		resultInfo.setMessage(<span class="string">"权限不足！"</span>);</div><div class="line">		<span class="keyword">return</span> resultInfo;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		resultInfo=userService.deleteById(id);</div><div class="line">		<span class="keyword">return</span> resultInfo;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		resultInfo.setCode(<span class="string">"-1"</span>);</div><div class="line">		resultInfo.setMessage(<span class="string">"异常"</span>);</div><div class="line">		<span class="keyword">return</span> resultInfo;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><ul>
<li>为什么用JWT？<ul>
<li>JWT只通过算法实现对Token合法性的验证，不依赖数据库，Memcached的等存储系统，因此可以做到跨服务器验证，只要密钥和算法相同，不同服务器程序生成的Token可以互相验证。</li>
</ul>
</li>
<li>JWT Token不需要持久化在任何NoSQL中，不然背离其算法验证的初心</li>
<li>在退出登录时怎样实现JWT Token失效呢？<ul>
<li>退出登录， 只要客户端端把Token丢弃就可以了，服务器端不需要废弃Token。</li>
</ul>
</li>
<li>怎样保持客户端长时间保持登录状态？<ul>
<li>服务器端提供刷新Token的接口， 客户端负责按一定的逻辑刷新服务器Token。</li>
</ul>
</li>
<li>服务器端是否应该从JWT中取出userid用于业务查询？<ul>
<li>REST API是无状态的，意味着服务器端每次请求都是独立的，即不依赖以前请求的结果，因此也不应该依赖JWT token做业务查询， 应该在请求报文中单独加个userid 字段。</li>
</ul>
</li>
<li>为了做用户水平越权的检查，可以在业务层判断传入的userid和从JWT token中解析出的userid是否一致， 有些业务可能会允许查不同用户的数据。</li>
</ul>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ul>
<li><strong>常见验证流程:</strong><ul>
<li>用户提交用户名、密码到服务器后台</li>
<li>后台验证用户信息的正确性</li>
<li>若用户验证通过，服务器端生成Token，返回到客户端</li>
<li>客户端保存Token，再下一次请求资源时，附带上Token信息</li>
<li>服务器端（一般在拦截器中进行拦截）验证Token是否由服务器签发的</li>
<li>若Token验证通过，则返回需要的资源</li>
</ul>
</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li><a href="https://gitee.com/chenjiabing666/auth-server.git" target="_blank" rel="external">https://gitee.com/chenjiabing666/auth-server.git</a></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_36838191/article/details/79926196" target="_blank" rel="external">https://blog.csdn.net/qq_36838191/article/details/79926196</a></li>
<li><a href="https://www.cnblogs.com/howhy/p/7063247.html" target="_blank" rel="external">https://www.cnblogs.com/howhy/p/7063247.html</a></li>
<li><a href="https://blog.csdn.net/swl979623074/article/details/81150184" target="_blank" rel="external">https://blog.csdn.net/swl979623074/article/details/81150184</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;认证机制&quot;&gt;&lt;a href=&quot;#认证机制&quot; class=&quot;headerlink&quot; title=&quot;认证机制&quot;&gt;&lt;/a&gt;认证机制&lt;/h1&gt;&lt;h2 id=&quot;常见的几种认证机制&quot;&gt;&lt;a href=&quot;#常见的几种认证机制&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>springBoot整合spring-data-redis</title>
    <link href="http://chenjiabing666.github.io/2018/12/22/springBoot%E6%95%B4%E5%90%88spring-data-redis/"/>
    <id>http://chenjiabing666.github.io/2018/12/22/springBoot整合spring-data-redis/</id>
    <published>2018-12-22T05:09:13.000Z</published>
    <updated>2018-12-22T05:09:57.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合Spring-data-redis"><a href="#SpringBoot整合Spring-data-redis" class="headerlink" title="SpringBoot整合Spring data redis"></a>SpringBoot整合Spring data redis</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">******</span>   <span class="comment">## redis的主机地址</span></div><div class="line"><span class="attr">    port:</span> <span class="number">6379</span></div></pre></td></tr></table></figure>
<h2 id="序列化方式的配置"><a href="#序列化方式的配置" class="headerlink" title="序列化方式的配置"></a>序列化方式的配置</h2><ul>
<li>默认采用的是jdk的序列化</li>
<li>我们可以改变成json序列化方式，如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Redis的配置类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重写Redis序列化方式，使用Json方式:</div><div class="line">     * 当我们的数据存储到Redis的时候，我们的键（key）和值（value）都是通过Spring提供的Serializer序列化到数据库的。RedisTemplate默认使用的是JdkSerializationRedisSerializer，StringRedisTemplate默认使用的是StringRedisSerializer。</div><div class="line">     * Spring Data JPA为我们提供了下面的Serializer：</div><div class="line">     * GenericToStringSerializer、Jackson2JsonRedisSerializer、JacksonJsonRedisSerializer、JdkSerializationRedisSerializer、OxmSerializer、StringRedisSerializer。</div><div class="line">     * 在此我们将自己配置RedisTemplate并定义Serializer。</div><div class="line">     * <span class="doctag">@param</span> redisConnectionFactory</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</div><div class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</div><div class="line"><span class="comment">//      JdkSerializationRedisSerializer jdkSerializationRedisSerializer = new JdkSerializationRedisSerializer();</span></div><div class="line">        GenericJackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</div><div class="line">        <span class="comment">// 设置值（value）的序列化采用FastJsonRedisSerializer。</span></div><div class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</div><div class="line"><span class="comment">//        redisTemplate.setHashValueSerializer(fastJsonRedisSerializer);</span></div><div class="line">        <span class="comment">// 设置键（key）的序列化采用StringRedisSerializer。</span></div><div class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</div><div class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</div><div class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">        redisTemplate.afterPropertiesSet();</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h2><ul>
<li>这个只能存放字符串，如果需要存放对象，那么需要将其转换成json存储即可</li>
</ul>
<h2 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h2><ul>
<li>配置好序列化方式之后，即可注入，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>    <span class="comment">//springBoot测试类，可以自定义测试类，不过需要引用这两个注解</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlueApplicationTests</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">		Person person=<span class="keyword">new</span> Person();</div><div class="line">		person.setAge(<span class="number">22</span>);</div><div class="line">		person.setName(<span class="string">"陈加兵"</span>);</div><div class="line">		redisTemplate.opsForHash().put(<span class="string">"p"</span>, <span class="string">"3"</span>, person);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">		Person person= (Person) redisTemplate.opsForHash().get(<span class="string">"p"</span>, <span class="string">"3"</span>);</div><div class="line">		System.out.println(person);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot整合Spring-data-redis&quot;&gt;&lt;a href=&quot;#SpringBoot整合Spring-data-redis&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合Spring data redis&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Spring-data-jpa</title>
    <link href="http://chenjiabing666.github.io/2018/12/20/SpringBoot%E6%95%B4%E5%90%88Spring-data-jpa/"/>
    <id>http://chenjiabing666.github.io/2018/12/20/SpringBoot整合Spring-data-jpa/</id>
    <published>2018-12-20T15:50:34.000Z</published>
    <updated>2018-12-22T12:46:31.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合Spring-data-jpa"><a href="#SpringBoot整合Spring-data-jpa" class="headerlink" title="SpringBoot整合Spring data jpa"></a>SpringBoot整合Spring data jpa</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加数据库连接池 druid --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><ul>
<li><code>@GeneratedValue(strategy=GenerationType.xxx)</code>指定主键的生成策略<ul>
<li><strong><code>IDENTITY</code>：根据数据库的主键自增长策略</strong></li>
<li><code>GenerationType.TABLE</code>：使用一个特定的数据库表格来保存主键</li>
<li><code>GenerationType.SEQUENCE</code>：在某些数据库中,不支持主键自增长,比如Oracle,其提供了一种叫做”序列(sequence)”的机制生成主键。此时,GenerationType.SEQUENCE就可以作为主键生成策略。该策略的不足之处正好与TABLE相反,由于只有部分数据库(Oracle,PostgreSQL,DB2)支持序列对象,所以该策略一般不应用于其他数据库。类似的,该策略一般与另外一个注解一起使用@SequenceGenerator,@SequenceGenerator注解指定了生成主键的序列.然后JPA会根据注解内容创建一个序列(或使用一个现有的序列)。如果不指定序列,则会自动生成一个序列SEQ_GEN_SEQUENCE</li>
<li><code>GenerationType.AUTO</code>：把主键生成策略交给持久化引擎(persistence engine),持久化引擎会根据数据库在以上三种主键生成策略中选择其中一种。此种主键生成策略比较常用,由于JPA默认的生成策略就是GenerationType.AUTO,所以使用此种策略时.可以显式的指定@GeneratedValue(strategy = GenerationType.AUTO)也可以直接@GeneratedValue</li>
</ul>
</li>
<li>实例如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Id</span></div><div class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)  <span class="comment">//数据库自增</span></div><div class="line"><span class="keyword">private</span> Integer id;</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span>                <span class="comment">## 配置数据源</span></div><div class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://118.31.15.108:3306/jpa?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">****</span></div><div class="line"><span class="attr">    initialSize:</span> <span class="number">5</span></div><div class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></div><div class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></div><div class="line"><span class="attr">    maxWait:</span> <span class="number">6000</span></div><div class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">6000</span></div><div class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">25200000</span></div><div class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></div><div class="line"><span class="attr">    RemoveAbandanded:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    removeAbandonedTimeout:</span> <span class="number">1800</span></div><div class="line"><span class="attr">    logAbandoned:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  jpa:</span></div><div class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span>    <span class="comment">#控制台打印sql语句</span></div><div class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span>   <span class="comment"># 指定数据库的类型，不填会默认检测</span></div><div class="line"><span class="attr">    generate-ddl:</span> <span class="literal">false</span>  <span class="comment">## 是否自动生成表,默认是false</span></div><div class="line"><span class="comment">#    hibernate:</span></div><div class="line"><span class="comment">#      ddl-auto: update</span></div></pre></td></tr></table></figure>
<h2 id="创建一个实体类"><a href="#创建一个实体类" class="headerlink" title="创建一个实体类"></a>创建一个实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户的实体类，其中的变量和数据库默认是以驼峰形式对应的，比如industryId,那么在表中的字段一定要是industry_id，否则将会报错</div><div class="line"> */</div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"t_user"</span>)  <span class="comment">//指定对应数据库对应的表名</span></div><div class="line"><span class="meta">@Entity</span>    <span class="comment">//标记这是一个实体类</span></div><div class="line"><span class="meta">@Data</span>    	<span class="comment">//lombook的自动生成set，get</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="meta">@Id</span>    <span class="comment">//标记主键</span></div><div class="line">	<span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String address;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Integer industryId;   <span class="comment">//在数据库中的对应字段一定要是industry_id</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基本的查询"><a href="#基本的查询" class="headerlink" title="基本的查询"></a>基本的查询</h2><ul>
<li>定义一个<code>UserRepository</code>，相当于Mybatis中的Mapper，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"><span class="keyword">import</span> cn.tedu.jpa.domain.User;</div><div class="line"><span class="keyword">import</span> java.lang.String;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * JpaRepository的接口，相当于mapper</div><div class="line"> * 泛型：JpaRepository&lt;User, Integer&gt; ：第一个是实体类的类型，第二个是主键的类型</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt;</span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据指定条件查询 Byxxx(where xxx=xxx)，除了根据主键查询，否则返回的都是List</div><div class="line">	 * 	其中查询的条件对应的类型必须相同</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 并列条件查询 ，相当于where name=xxx and age=xxx</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;User&gt; <span class="title">findByNameAndAge</span><span class="params">(String name,Integer age)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 三个条件的并列查询 where xxx and xxx and xxx</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;User&gt; <span class="title">findByNameAndAgeAndIndustryId</span><span class="params">(String name,Integer age,Integer industryId)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Top或者First指定返回结果数量,默认返回第一个，相当于limit 1</div><div class="line">	 */</div><div class="line">	<span class="function">User <span class="title">findTopByNameAndAge</span><span class="params">(String name,Integer age)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Topn或者Firstn指定返回结果数量,这里的n表示返回的数量，相当于limit n</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;User&gt; <span class="title">findTop2ByNameAndAge</span><span class="params">(String name,Integer age)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * In 相当于where age in(....) 其中的变量类型可以数组、List、Set只要是Collection即可，泛型必须和查询条件的类型一致</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;User&gt; <span class="title">findByAgeIn</span><span class="params">(Integer[] ages)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 统计数据  相当于select count(*) where age=xxx</div><div class="line">	 */</div><div class="line">	<span class="function">Long <span class="title">countByAge</span><span class="params">(Integer age)</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaServerApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> UserRepository userRepository;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 新增数据（单个）</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		User user=<span class="keyword">new</span> User();</div><div class="line">		user.setAge(<span class="number">22</span>);</div><div class="line">		user.setName(<span class="string">"陈加兵"</span>);</div><div class="line">		User user2 = userRepository.save(user);  <span class="comment">//自增主键的返回</span></div><div class="line">		System.out.println(user);  </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量插入</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">()</span> </span>&#123;</div><div class="line">		User user1=<span class="keyword">new</span> User();</div><div class="line">		user1.setAge(<span class="number">22</span>);</div><div class="line">		user1.setName(<span class="string">"陈加兵"</span>);</div><div class="line">		User user2=<span class="keyword">new</span> User();</div><div class="line">		user2.setAge(<span class="number">22</span>);</div><div class="line">		user2.setName(<span class="string">"陈加兵"</span>);</div><div class="line">		</div><div class="line">		List&lt;User&gt; users=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		users.add(user1);</div><div class="line">		users.add(user2);</div><div class="line">		List&lt;User&gt; usersResturn=userRepository.saveAll(users);   <span class="comment">//返回列表，自增主键的返回</span></div><div class="line">		<span class="keyword">for</span> (User user : usersResturn) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 更新数据，使用的仍然是save方法，如果其中包含id，那么就是更新数据，否则就是添加</div><div class="line">	 * 	1、如果有数据不更新，那么就出入null即可</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">		User user1=<span class="keyword">new</span> User();</div><div class="line">		user1.setId(<span class="number">1</span>);</div><div class="line">		user1.setAge(<span class="number">22</span>);</div><div class="line">		user1.setName(<span class="string">"郑元梅"</span>);</div><div class="line">		User user = userRepository.save(user1);</div><div class="line">		System.out.println(user);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 统计数据</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(userRepository.count());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 统计数据</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countByAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(userRepository.countByAge(<span class="number">23</span>));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByName</span><span class="params">()</span> </span>&#123;</div><div class="line">		List&lt;User&gt; users=userRepository.findTop2ByNameAndAge(<span class="string">"陈加兵"</span>, <span class="number">22</span>);</div><div class="line">		<span class="keyword">for</span> (User user : users) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByAgeIn</span><span class="params">()</span> </span>&#123;</div><div class="line">		Integer[] ages= &#123;<span class="number">22</span>,<span class="number">23</span>&#125;;</div><div class="line">		List&lt;User&gt; users=userRepository.findByAgeIn(ages);</div><div class="line">		<span class="keyword">for</span> (User user : users) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义查询-Query"><a href="#自定义查询-Query" class="headerlink" title="自定义查询@Query"></a>自定义查询@Query</h2><h3 id="使用HQL语句查询"><a href="#使用HQL语句查询" class="headerlink" title="使用HQL语句查询"></a>使用HQL语句查询</h3><ul>
<li>默认使用的就是HQL语句查询的，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用hql表达式查询，其中?1表示对应第一个参数，不能直接使用?作为占位符</div><div class="line"> */</div><div class="line"><span class="meta">@Query</span>(value=<span class="string">"select u from User u where u.age=?1 and u.name=?2"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findUserList</span><span class="params">(Integer age,String name)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="使用sql语句查询"><a href="#使用sql语句查询" class="headerlink" title="使用sql语句查询"></a>使用sql语句查询</h3><ul>
<li>需要指定<code>nativeQuery=true</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用sql语句查询，其中nativeQuery表示使用本地查询，即是sql语句查询</div><div class="line"> */</div><div class="line"><span class="meta">@Query</span>(value=<span class="string">"select * from t_user where age=?1 order by industry_id desc"</span>,nativeQuery=<span class="keyword">true</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findUserListByAge</span><span class="params">(Integer age)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="删除和修改"><a href="#删除和修改" class="headerlink" title="删除和修改"></a>删除和修改</h3><ul>
<li>使用自定义sql的时候，如果涉及到删除和修改的sql需要满足两个条件才能执行，如下：<ul>
<li>使用<code>@Modifying</code>标注</li>
<li>在事务中执行</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 删除和修改信息，必须同时使用<span class="doctag">@Modifying</span>注解标注</div><div class="line">	 */</div><div class="line">	<span class="meta">@Modifying</span></div><div class="line">	<span class="meta">@Query</span>(value=<span class="string">"delete from t_user where industry_id=?1"</span>,nativeQuery=<span class="keyword">true</span>)</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteByIndustryId</span><span class="params">(Integer industryId)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="复杂条件查询"><a href="#复杂条件查询" class="headerlink" title="复杂条件查询"></a>复杂条件查询</h2><ul>
<li>Repository接口需要继承<code>JpaSpecificationExecutor</code>，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">User</span>&gt;</span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>查询如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 *   结果筛选</div><div class="line">	 * <span class="doctag">@param</span> user  封装了查询的条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll_2</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		List&lt;User&gt; users = userRepository.findAll(<span class="keyword">new</span> Specification&lt;User&gt;() &#123;</div><div class="line">			<span class="comment">/**</span></div><div class="line">			 * <span class="doctag">@param</span> root 根对象，用于封装查询的条件，比如name,jack、age 10等</div><div class="line">			 * <span class="doctag">@param</span> query  封装查询关键字  比如group by order by</div><div class="line">			 * <span class="doctag">@param</span> criteriaBuilder  封装对象条件</div><div class="line">			 * <span class="doctag">@return</span> 返回null表示没有查询条件</div><div class="line">			 */</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;User&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</div><div class="line">				<span class="comment">//new 一个集合，存放所有的查询条件</span></div><div class="line">				List&lt;Predicate&gt; predicates=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (!StringUtils.isEmpty(user.getName())) &#123;  <span class="comment">//如果name不是null，就填入到筛选条件中</span></div><div class="line">					<span class="comment">//第一个参数是表达式，第二个参数是值,相当于where name=%name%</span></div><div class="line">					Predicate predicate = criteriaBuilder.like(root.get(<span class="string">"name"</span>).as(String.class),<span class="string">"%"</span>+user.getName()+<span class="string">"%"</span>);</div><div class="line">					predicates.add(predicate);   <span class="comment">//加入到条件集合中</span></div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (!StringUtils.isEmpty(user.getAddress())) &#123; <span class="comment">//如果地址不为空，填入筛选条件</span></div><div class="line">					<span class="comment">//where address=xxx</span></div><div class="line">					Predicate predicate = criteriaBuilder.equal(root.get(<span class="string">"address"</span>).as(String.class), user.getAddress());</div><div class="line">					predicates.add(predicate);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (user.getAge()!=<span class="keyword">null</span>) &#123; <span class="comment">//如果年龄不为空</span></div><div class="line">					<span class="comment">//where age&lt;=xxx</span></div><div class="line">					Predicate predicate = criteriaBuilder.le(root.get(<span class="string">"age"</span>).as(Integer.class), user.getAge());</div><div class="line">					predicates.add(predicate);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				Predicate[] parray=<span class="keyword">new</span> Predicate[predicates.size()];</div><div class="line">				<span class="comment">//返回，这里的使用的and条件，将上面所有的条件用and连接</span></div><div class="line">				<span class="keyword">return</span> criteriaBuilder.and(predicates.toArray(parray));</div><div class="line">		&#125;</div><div class="line">		&#125;);</div><div class="line">	<span class="keyword">return</span> users;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">		User user=<span class="keyword">new</span> User();</div><div class="line">		user.setName(<span class="string">"a"</span>);  <span class="comment">//封装name</span></div><div class="line">		List&lt;User&gt; users = findAll_2(user);</div><div class="line">		<span class="keyword">for</span> (User user2 : users) &#123;</div><div class="line">			System.out.println(user2);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="PageRequest"><a href="#PageRequest" class="headerlink" title="PageRequest"></a>PageRequest</h3><ul>
<li>构造方法如下：<ul>
<li><code>public PageRequest(int page, int size)</code><ul>
<li><code>size</code>：每页查询的大小</li>
<li><code>page</code>：从第几页开始，从0开始，0 表示第一页</li>
</ul>
</li>
<li><code>public PageRequest(int page, int size, Direction direction, String... properties)</code><ul>
<li><code>direction</code>： 排序的方式，枚举类，其中有ASC，DESC</li>
<li><code>properties</code>： 进行排序的字段，可以指定多个</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h3><ul>
<li><code>int getTotalPages()</code>：返回共有多少页数</li>
<li><code>long getTotalElements()</code>：获取总数</li>
<li><code>boolean hasContent();</code>： 当前分页是否有数据</li>
<li><code>List&lt;T&gt; getContent();</code>： 返回当前页所有的数据</li>
<li><code>boolean isFirst();</code>：判断当前的页数是否是第一页</li>
<li><code>boolean isLast();</code>： 是否是最后页</li>
<li><code>boolean hasNext();</code>： 是否还有下一页</li>
<li><code>boolean hasPrevious();</code>： 是否还有前一页</li>
<li><code>Pageable nextPageable();</code>： 获取下一页</li>
<li><code>Pageable previousPageable();</code>：获取前一页</li>
</ul>
<h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><ul>
<li>以相同的排序方式查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//构造分页数据，查找第二页，每页2条记录，order by age,industryId desc</span></div><div class="line">	Pageable pageable=<span class="keyword">new</span> PageRequest(<span class="number">1</span>, <span class="number">2</span>,Direction.DESC,<span class="string">"age"</span>,<span class="string">"industryId"</span>);</div><div class="line">	Page&lt;User&gt; pages = userRepository.findAll(pageable);  <span class="comment">//执行分页查询的方法</span></div><div class="line">	<span class="keyword">if</span> (pages.hasContent()) &#123;  <span class="comment">//如果查询到了内容</span></div><div class="line">		List&lt;User&gt; users = pages.getContent();  <span class="comment">//获取查询到的结果</span></div><div class="line">		<span class="keyword">long</span> total = pages.getTotalElements();   <span class="comment">//获取总数</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不同的排序方式查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">	Order order1=<span class="keyword">new</span> Order(Direction.DESC, <span class="string">"age"</span>);  <span class="comment">//创建排序方式</span></div><div class="line">	Order order2=<span class="keyword">new</span> Order(Direction.ASC, <span class="string">"industryId"</span>);</div><div class="line">	List&lt;Order&gt; orders=<span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">//放入集合</span></div><div class="line">	orders.add(order1);</div><div class="line">	orders.add(order2);</div><div class="line">	</div><div class="line">	Sort sort=<span class="keyword">new</span> Sort(orders);  <span class="comment">//创建Sort</span></div><div class="line">	</div><div class="line">	<span class="comment">//构造分页数据，查找第二页，每页2条记录，order by age desc,industryId asc</span></div><div class="line">	Pageable pageable=<span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>,sort);</div><div class="line">	Page&lt;User&gt; pages = userRepository.findAll(pageable);  <span class="comment">//执行分页查询的方法</span></div><div class="line">	<span class="keyword">if</span> (pages.hasContent()) &#123;  <span class="comment">//如果查询到了内容</span></div><div class="line">		List&lt;User&gt; users = pages.getContent();  <span class="comment">//获取查询到的结果</span></div><div class="line">		<span class="keyword">long</span> total = pages.getTotalElements();   <span class="comment">//获取总数</span></div><div class="line">		<span class="keyword">for</span> (User user : users) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单条件分页查询"><a href="#简单条件分页查询" class="headerlink" title="简单条件分页查询"></a>简单条件分页查询</h3><ul>
<li>方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 根据条件查询的结果分页，相当于select * from user where name=xxx limit #,#</div><div class="line"> */</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name,Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="复杂条件分页查询"><a href="#复杂条件分页查询" class="headerlink" title="复杂条件分页查询"></a>复杂条件分页查询</h3><ul>
<li>Repository接口需要继承<code>JpaSpecificationExecutor</code>，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">User</span>&gt;</span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>和复杂条件查询一样，只是多了一个分页</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 *   结果筛选</div><div class="line">	 * <span class="doctag">@param</span> user  封装了查询的条件</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll_3</span><span class="params">(User user,Integer pageNum,Integer pageSize)</span> </span>&#123;</div><div class="line">		 </div><div class="line">		Pageable pageable=<span class="keyword">new</span> PageRequest(pageNum-<span class="number">1</span>, pageSize);   <span class="comment">//分页的查询</span></div><div class="line">		 </div><div class="line">		Page&lt;User&gt; pages = userRepository.findAll(<span class="keyword">new</span> Specification&lt;User&gt;() &#123;</div><div class="line">			<span class="comment">/**</span></div><div class="line">			 * <span class="doctag">@param</span> root 根对象，用于封装查询的条件，比如name,jack、age 10等</div><div class="line">			 * <span class="doctag">@param</span> query  封装查询关键字  比如group by order by</div><div class="line">			 * <span class="doctag">@param</span> criteriaBuilder  封装对象条件</div><div class="line">			 * <span class="doctag">@return</span> 返回null表示没有查询条件</div><div class="line">			 */</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;User&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</div><div class="line">				<span class="comment">//new 一个集合，存放所有的查询条件</span></div><div class="line">				List&lt;Predicate&gt; predicates=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (!StringUtils.isEmpty(user.getName())) &#123;  <span class="comment">//如果name不是null，就填入到筛选条件中</span></div><div class="line">					<span class="comment">//第一个参数是表达式，第二个参数是值,相当于where name=%name%</span></div><div class="line">					Predicate predicate = criteriaBuilder.like(root.get(<span class="string">"name"</span>).as(String.class),<span class="string">"%"</span>+user.getName()+<span class="string">"%"</span>);</div><div class="line">					predicates.add(predicate);   <span class="comment">//加入到条件集合中</span></div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (!StringUtils.isEmpty(user.getAddress())) &#123; <span class="comment">//如果地址不为空，填入筛选条件</span></div><div class="line">					<span class="comment">//where address=xxx</span></div><div class="line">					Predicate predicate = criteriaBuilder.equal(root.get(<span class="string">"address"</span>).as(String.class), user.getAddress());</div><div class="line">					predicates.add(predicate);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span> (user.getAge()!=<span class="keyword">null</span>) &#123; <span class="comment">//如果年龄不为空</span></div><div class="line">					<span class="comment">//where age&lt;=xxx</span></div><div class="line">					Predicate predicate = criteriaBuilder.le(root.get(<span class="string">"age"</span>).as(Integer.class), user.getAge());</div><div class="line">					predicates.add(predicate);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				Predicate[] parray=<span class="keyword">new</span> Predicate[predicates.size()];</div><div class="line">				<span class="comment">//返回，这里的使用的and条件，将上面所有的条件用and连接</span></div><div class="line">				<span class="keyword">return</span> criteriaBuilder.and(predicates.toArray(parray));</div><div class="line">		&#125;</div><div class="line">		&#125;,pageable);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> pages.getContent();  <span class="comment">//返回结果</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">		User user=<span class="keyword">new</span> User();</div><div class="line">		user.setName(<span class="string">"a"</span>);  <span class="comment">//封装name</span></div><div class="line">		List&lt;User&gt; users = findAll_3(user,<span class="number">1</span>,<span class="number">10</span>);</div><div class="line">		<span class="keyword">for</span> (User user2 : users) &#123;</div><div class="line">			System.out.println(user2);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="查找关键字"><a href="#查找关键字" class="headerlink" title="查找关键字"></a>查找关键字</h2><table>
<thead>
<tr>
<th>关键词</th>
<th>样品</th>
<th>JPQL代码段</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>And</code></td>
<td><code>findByLastnameAndFirstname</code></td>
<td><code>… where x.lastname = ?1 and x.firstname = ?2</code></td>
</tr>
<tr>
<td><code>Or</code></td>
<td><code>findByLastnameOrFirstname</code></td>
<td><code>… where x.lastname = ?1 or x.firstname = ?2</code></td>
</tr>
<tr>
<td><code>Is,Equals</code></td>
<td><code>findByFirstname</code>，<code>findByFirstnameIs</code>，<code>findByFirstnameEquals</code></td>
<td><code>… where x.firstname = ?1</code></td>
</tr>
<tr>
<td><code>Between</code></td>
<td><code>findByStartDateBetween</code></td>
<td><code>… where x.startDate between ?1 and ?2</code></td>
</tr>
<tr>
<td><code>LessThan</code></td>
<td><code>findByAgeLessThan</code></td>
<td><code>… where x.age &lt; ?1</code></td>
</tr>
<tr>
<td><code>LessThanEqual</code></td>
<td><code>findByAgeLessThanEqual</code></td>
<td><code>… where x.age &lt;= ?1</code></td>
</tr>
<tr>
<td><code>GreaterThan</code></td>
<td><code>findByAgeGreaterThan</code></td>
<td><code>… where x.age &gt; ?1</code></td>
</tr>
<tr>
<td><code>GreaterThanEqual</code></td>
<td><code>findByAgeGreaterThanEqual</code></td>
<td><code>… where x.age &gt;= ?1</code></td>
</tr>
<tr>
<td><code>After</code></td>
<td><code>findByStartDateAfter</code></td>
<td><code>… where x.startDate &gt; ?1</code></td>
</tr>
<tr>
<td><code>Before</code></td>
<td><code>findByStartDateBefore</code></td>
<td><code>… where x.startDate &lt; ?1</code></td>
</tr>
<tr>
<td><code>IsNull</code></td>
<td><code>findByAgeIsNull</code></td>
<td><code>… where x.age is null</code></td>
</tr>
<tr>
<td><code>IsNotNull,NotNull</code></td>
<td><code>findByAge(Is)NotNull</code></td>
<td><code>… where x.age not null</code></td>
</tr>
<tr>
<td><code>Like</code></td>
<td><code>findByFirstnameLike</code></td>
<td><code>… where x.firstname like ?1</code></td>
</tr>
<tr>
<td><code>NotLike</code></td>
<td><code>findByFirstnameNotLike</code></td>
<td><code>… where x.firstname not like ?1</code></td>
</tr>
<tr>
<td><code>StartingWith</code></td>
<td><code>findByFirstnameStartingWith</code></td>
<td><code>… where x.firstname like ?1</code>（附加参数绑定<code>%</code>）</td>
</tr>
<tr>
<td><code>EndingWith</code></td>
<td><code>findByFirstnameEndingWith</code></td>
<td><code>… where x.firstname like ?1</code>（与前置绑定的参数<code>%</code>）</td>
</tr>
<tr>
<td><code>Containing</code></td>
<td><code>findByFirstnameContaining</code></td>
<td><code>… where x.firstname like ?1</code>（参数绑定包装<code>%</code>）</td>
</tr>
<tr>
<td><code>OrderBy</code></td>
<td><code>findByAgeOrderByLastnameDesc</code></td>
<td><code>… where x.age = ?1 order by x.lastname desc</code></td>
</tr>
<tr>
<td><code>Not</code></td>
<td><code>findByLastnameNot</code></td>
<td><code>… where x.lastname &lt;&gt; ?1</code></td>
</tr>
<tr>
<td><code>In</code></td>
<td><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td>
<td><code>… where x.age in ?1</code></td>
</tr>
<tr>
<td><code>NotIn</code></td>
<td><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td>
<td><code>… where x.age not in ?1</code></td>
</tr>
<tr>
<td><code>True</code></td>
<td><code>findByActiveTrue()</code></td>
<td><code>… where x.active = true</code></td>
</tr>
<tr>
<td><code>False</code></td>
<td><code>findByActiveFalse()</code></td>
<td><code>… where x.active = false</code></td>
</tr>
<tr>
<td><code>IgnoreCase</code></td>
<td><code>findByFirstnameIgnoreCase</code></td>
<td><code>… where UPPER(x.firstame) = UPPER(?1)</code></td>
</tr>
<tr>
<td><code>Top或者First</code></td>
<td><code>findTopByNameAndAge</code>，<code>findFirstByNameAndAge</code></td>
<td>where … limit 1</td>
</tr>
<tr>
<td><code>Topn或者Firstn</code></td>
<td><code>findTop2ByNameAndAge</code>，<code>findFirst2ByNameAndAge</code></td>
<td>where … limit 2</td>
</tr>
<tr>
<td><code>Distinct</code></td>
<td><code>findDistinctPeopleByLastnameOrFirstname</code></td>
<td>select distinct ….</td>
</tr>
<tr>
<td><code>count</code></td>
<td><code>countByAge</code>，<code>count</code></td>
<td>select count(*)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/" target="_blank" rel="external">https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot整合Spring-data-jpa&quot;&gt;&lt;a href=&quot;#SpringBoot整合Spring-data-jpa&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合Spring data jpa&quot;&gt;&lt;/a&gt;Sprin
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成lombok</title>
    <link href="http://chenjiabing666.github.io/2018/12/20/SpringBoot%E9%9B%86%E6%88%90lombok/"/>
    <id>http://chenjiabing666.github.io/2018/12/20/SpringBoot集成lombok/</id>
    <published>2018-12-20T15:46:20.000Z</published>
    <updated>2018-12-20T15:47:26.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成lombok"><a href="#SpringBoot集成lombok" class="headerlink" title="SpringBoot集成lombok"></a>SpringBoot集成lombok</h1><h2 id="STS安装"><a href="#STS安装" class="headerlink" title="STS安装"></a>STS安装</h2><ul>
<li><a href="https://blog.csdn.net/blueheart20/article/details/52909775" target="_blank" rel="external">https://blog.csdn.net/blueheart20/article/details/52909775</a></li>
</ul>
<h2 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h2><ul>
<li><code>@Getter</code>:   自动生成Getter方法</li>
<li><code>@NonNull</code>：  标识对象是否为空，为空则抛出异常</li>
<li><code>@Setter</code>:  自动生成Setter</li>
<li><code>@ToString</code>：  覆盖tostring方法</li>
<li><code>@Slf4j</code>:  默认使用slf4j的日志对象</li>
<li><code>@EqualsAndHashCode</code>: 覆盖equal和hashCode方法</li>
<li><code>@Data</code>:  @Getter/@Setter, @ToString, @EqualAndHashCode等组合</li>
<li><code>@AllArgsConstructor</code>：自动生成全参构造方法</li>
<li><code>@NoArgsConstructor</code>：自动生成无参构造方法</li>
<li><code>@Accessors(chain = true)</code>：实现链式编程</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- lombok的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>创建实体类，如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span> <span class="comment">// 自动生成get、set、toString、equals方法</span></div><div class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 全参构造方法</span></div><div class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 无参构造方法</span></div><div class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>) <span class="comment">// 链式编程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer orderId; <span class="comment">// 订单Id</span></div><div class="line">	<span class="keyword">private</span> String orderNum; <span class="comment">// 订单编号</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Order order = <span class="keyword">new</span> Order();</div><div class="line">		order.setOrderId(<span class="number">1</span>).setOrderNum(<span class="string">"156416516"</span>); <span class="comment">// 链式调用</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot集成lombok&quot;&gt;&lt;a href=&quot;#SpringBoot集成lombok&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot集成lombok&quot;&gt;&lt;/a&gt;SpringBoot集成lombok&lt;/h1&gt;&lt;h2 id=&quot;S
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成JSR303校验</title>
    <link href="http://chenjiabing666.github.io/2018/12/08/SpringBoot%E9%9B%86%E6%88%90JSR303%E6%A0%A1%E9%AA%8C/"/>
    <id>http://chenjiabing666.github.io/2018/12/08/SpringBoot集成JSR303校验/</id>
    <published>2018-12-08T03:13:03.000Z</published>
    <updated>2018-12-08T03:13:56.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成JSR303"><a href="#SpringBoot集成JSR303" class="headerlink" title="SpringBoot集成JSR303"></a>SpringBoot集成JSR303</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--JSR303校验的依赖 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>实体类添加校验</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="meta">@NotEmpty</span>(message=<span class="string">"姓名不能为空"</span>)</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> userId;</div><div class="line">	</div><div class="line">	<span class="meta">@Length</span>(min=<span class="number">6</span>,max=<span class="number">10</span>,message=<span class="string">"密码必须在6-10位之间"</span>)</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	</div><div class="line">	<span class="meta">@Email</span>(message=<span class="string">"邮箱不符合格式"</span>)</div><div class="line">	<span class="keyword">private</span> String email;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>controller层传参的校验，<strong>必须对参数用@Valid，并且后面必须紧跟着BindingResult，否则将会抛出全局异常</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 校验Person</div><div class="line"> * 必须对参数用<span class="doctag">@Valid</span>，并且后面必须紧跟着BindingResult，否则将会抛出全局异常</div><div class="line"> * <span class="doctag">@param</span> person</div><div class="line"> * <span class="doctag">@param</span> result</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/person"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">addPerson</span><span class="params">(@RequestBody @Valid Person person,</span></span></div><div class="line">		BindingResult result) &#123;</div><div class="line">	<span class="keyword">if</span> (result.hasErrors()) &#123; <span class="comment">// 如果有异常的话，就会返回</span></div><div class="line">		List&lt;ObjectError&gt; allErrors = result.getAllErrors();  <span class="comment">//获取所有的异常信息</span></div><div class="line">		<span class="keyword">for</span> (ObjectError error : allErrors) &#123;</div><div class="line">			System.out.println(error.getCode() + <span class="string">"\t"</span></div><div class="line">					+ error.getDefaultMessage());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> person;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常用的校验注解"><a href="#常用的校验注解" class="headerlink" title="常用的校验注解"></a>常用的校验注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">空检查</div><div class="line"><span class="meta">@Null</span>       验证对象是否为<span class="keyword">null</span></div><div class="line"><span class="meta">@NotNull</span>    验证对象是否不为<span class="keyword">null</span>, 无法查检长度为<span class="number">0</span>的字符串</div><div class="line"><span class="meta">@NotBlank</span> 检查约束字符串是不是Null还有被Trim的长度是否大于<span class="number">0</span>,只对字符串,且会去掉前后空格.</div><div class="line"><span class="meta">@NotEmpty</span> 检查约束元素是否为NULL或者是EMPTY.</div><div class="line"> </div><div class="line">Booelan检查</div><div class="line"><span class="meta">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="keyword">true</span>  </div><div class="line"><span class="meta">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="keyword">false</span>  </div><div class="line"> </div><div class="line">长度检查</div><div class="line"><span class="meta">@Size</span>(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </div><div class="line"><span class="meta">@Length</span>(min=, max=) Validates that the annotated string is between min and max included.</div><div class="line"> </div><div class="line">日期检查</div><div class="line"><span class="meta">@Past</span>           验证 Date 和 Calendar 对象是否在当前时间之前  </div><div class="line"><span class="meta">@Future</span>     	验证 Date 和 Calendar 对象是否在当前时间之后  </div><div class="line"><span class="meta">@Pattern</span>    	验证 String 对象是否符合正则表达式的规则</div><div class="line"> </div><div class="line">数值检查，建议使用在Stirng,Integer类型，不建议使用在<span class="keyword">int</span>类型上，因为表单值为“”时无法转换为<span class="keyword">int</span>，但可以转换为Stirng为<span class="string">""</span>,Integer为<span class="keyword">null</span></div><div class="line"><span class="meta">@Min</span>            验证 Number 和 String 对象是否大等于指定的值  </div><div class="line"><span class="meta">@Max</span>            验证 Number 和 String 对象是否小等于指定的值  </div><div class="line"><span class="meta">@DecimalMax</span> 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</div><div class="line"><span class="meta">@DecimalMin</span> 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</div><div class="line"><span class="meta">@Digits</span>     验证 Number 和 String 的构成是否合法  </div><div class="line"><span class="meta">@Digits</span>(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</div><div class="line"> </div><div class="line"><span class="meta">@Range</span>(min=, max=) 检查数字是否介于min和max之间.</div><div class="line"><span class="meta">@Range</span>(min=<span class="number">10000</span>,max=<span class="number">50000</span>,message=<span class="string">"range.bean.wage"</span>)</div><div class="line"><span class="keyword">private</span> BigDecimal wage;</div><div class="line"> </div><div class="line"><span class="meta">@Valid</span>  递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)</div><div class="line">    </div><div class="line"><span class="meta">@CreditCardNumber</span> 信用卡验证</div><div class="line"></div><div class="line"><span class="meta">@Email</span>  验证是否是邮件地址，如果为<span class="keyword">null</span>,不进行验证，算通过验证。</div><div class="line"></div><div class="line"><span class="meta">@ScriptAssert</span>(lang= ,script=, alias=)</div><div class="line">    </div><div class="line"><span class="meta">@URL</span>(protocol=,host=, port=,regexp=, flags=)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot集成JSR303&quot;&gt;&lt;a href=&quot;#SpringBoot集成JSR303&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot集成JSR303&quot;&gt;&lt;/a&gt;SpringBoot集成JSR303&lt;/h1&gt;&lt;h2 id=&quot;使
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>springBoot集成RestTemplate</title>
    <link href="http://chenjiabing666.github.io/2018/12/03/springBoot%E9%9B%86%E6%88%90RestTemplate/"/>
    <id>http://chenjiabing666.github.io/2018/12/03/springBoot集成RestTemplate/</id>
    <published>2018-12-03T14:36:42.000Z</published>
    <updated>2018-12-03T14:38:00.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成RestTemplate"><a href="#SpringBoot集成RestTemplate" class="headerlink" title="SpringBoot集成RestTemplate"></a>SpringBoot集成RestTemplate</h1><h2 id="构造restful风格的api"><a href="#构造restful风格的api" class="headerlink" title="构造restful风格的api"></a>构造restful风格的api</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepetController</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> DeptService deptService;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Id查找</div><div class="line">	 * <span class="doctag">@param</span> id </div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">		Dept dept = deptService.getDeptById(id);</div><div class="line">		<span class="keyword">return</span> dept;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 分页获取列表</div><div class="line">	 * <span class="doctag">@param</span> pageNum</div><div class="line">	 * <span class="doctag">@param</span> pageSize</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDeptList</span><span class="params">(Integer pageNum,Integer pageSize)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> deptService.getDeptList(pageNum,pageSize);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加dept</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Dept <span class="title">addDepet</span><span class="params">(@RequestBody Dept dept)</span></span>&#123;</div><div class="line">		Dept dept1=deptService.addDept(dept);</div><div class="line">		<span class="keyword">return</span> dept1;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改dept</div><div class="line">	 * <span class="doctag">@param</span> dept</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@PutMapping</span>(<span class="string">"/dept"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modifyDept</span><span class="params">(@RequestBody Dept dept)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> deptService.modifyDept(dept);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Id删除</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@DeleteMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">		<span class="keyword">return</span> deptService.deleteDept(id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><ul>
<li>在使用之前需要在配置文件中注入，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfig</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(factory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</div><div class="line">        factory.setReadTimeout(<span class="number">5000</span>);<span class="comment">//单位为ms</span></div><div class="line">        factory.setConnectTimeout(<span class="number">5000</span>);<span class="comment">//单位为ms</span></div><div class="line">        <span class="keyword">return</span> factory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注入之后即可直接使用了</li>
</ul>
<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="GET（获取数据）"><a href="#GET（获取数据）" class="headerlink" title="GET（获取数据）"></a>GET（获取数据）</h3><h4 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h4><ul>
<li>安全幂等操作</li>
<li>先创建一个GET请求的controller，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过get请求方式</div><div class="line"> * <span class="doctag">@param</span> id </div><div class="line"> * <span class="doctag">@param</span> name</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span>String name)</span>&#123;</div><div class="line">	Dept dept=<span class="keyword">new</span> Dept();</div><div class="line">	dept.setDepetId(id);</div><div class="line">	dept.setDepetName(name);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h4><ul>
<li><code>public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用RestTemplate的getForObject()发出get请求</div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name) <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	<span class="comment">//使用一个Map封装Get请求的参数，其中key一定要和uri中的占位符一致</span></div><div class="line">	Map&lt;String, Object&gt; params=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">	params.put(<span class="string">"id"</span>, id);</div><div class="line">	params.put(<span class="string">"name"</span>, name);</div><div class="line">	Dept dept = restTemplate.getForObject(URL_PRFIX+<span class="string">"&#123;id&#125;/&#123;name&#125;"</span>, Dept.class,params);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>public &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用RestTemplate的getForObject()发出get请求</div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name) <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	<span class="comment">//直接在uri中拼接参数</span></div><div class="line">	Dept dept = restTemplate.getForObject(URL_PRFIX+id+<span class="string">"/"</span>+name, Dept.class);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用RestTemplate的getForObject()发出get请求</div><div class="line"> */</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/&#123;id&#125;/&#123;name&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String name) <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	<span class="comment">//使用&#123;id&#125;作为一个占位符，第三个参数是用来设置这个占位符的值，当然可以有多个占位符</span></div><div class="line">	Dept dept = restTemplate.getForObject(URL_PRFIX+<span class="string">"&#123;id&#125;/&#123;name&#125;"</span>, Dept.class, id,name);</div><div class="line">	<span class="keyword">return</span> dept;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>以上三种形式的请求都是大同小异的，只是入参的方式不同罢了</li>
</ul>
<h3 id="POST（新建、添加）"><a href="#POST（新建、添加）" class="headerlink" title="POST（新建、添加）"></a>POST（新建、添加）</h3><ul>
<li>不安全</li>
<li><code>public &lt;T&gt; T postForObject(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</code><ul>
<li>第一个参数是请求的uri</li>
<li>第二个参数是添加的数据</li>
<li>第三个是返回的数据类型</li>
</ul>
</li>
<li><code>public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType,Map&lt;String, ?&gt; uriVariables)</code><ul>
<li>前三个参数同上</li>
<li>第四个参数是用来封装过滤参数的（?后面的）</li>
</ul>
</li>
<li><code>public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType,Object... uriVariables)</code><ul>
<li>同上</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 新建数据</div><div class="line"> */</div><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/dept"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(@RequestBody Dept dept)</span> <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	Dept dept2 = restTemplate.postForObject(<span class="keyword">new</span> URI(URL_PRFIX), dept, Dept.class);</div><div class="line">	<span class="keyword">return</span> dept2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PUT（更新）"><a href="#PUT（更新）" class="headerlink" title="PUT（更新）"></a>PUT（更新）</h3><ul>
<li><code>public void put(URI url, @Nullable Object request)</code><ul>
<li>第一个参数是地址</li>
<li>第二个参数是更新需要提交的数据</li>
</ul>
</li>
<li><code>public void put(String url, @Nullable Object request, Object... uriVariables)</code><ul>
<li>前两个参数同上</li>
<li>第二个参数是封装需要过滤的数据（？后面的数据）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新数据</div><div class="line"> * <span class="doctag">@param</span> dept</div><div class="line"> * <span class="doctag">@throws</span> RestClientException</div><div class="line"> * <span class="doctag">@throws</span> URISyntaxException</div><div class="line"> */</div><div class="line"><span class="meta">@PutMapping</span>(<span class="string">"/dept"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyDept</span><span class="params">(@RequestBody Dept dept)</span> <span class="keyword">throws</span> RestClientException, URISyntaxException</span>&#123;</div><div class="line">	restTemplate.put(<span class="keyword">new</span> URI(URL_PRFIX), dept);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DELETE（删除）"><a href="#DELETE（删除）" class="headerlink" title="DELETE（删除）"></a>DELETE（删除）</h3><ul>
<li><code>public void delete(URI url)</code><ul>
<li>第一个参数是地址</li>
</ul>
</li>
<li><code>public void delete(String url, Object... uriVariables)</code><ul>
<li>第一个参数是地址</li>
<li>第二个参数是过滤参数（？后面的）</li>
</ul>
</li>
<li><code>public void delete(String url, Map&lt;String, ?&gt; uriVariables)</code><ul>
<li>第二个参数是过滤参数（？后面的）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除数据</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> */</div><div class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</div><div class="line">	restTemplate.delete(URL_PRFIX+<span class="string">"/&#123;id&#125;"</span>, id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html" target="_blank" rel="external">RESTful API 最佳实践</a></li>
<li><p><a href="https://www.cnblogs.com/softidea/p/5977375.html" target="_blank" rel="external">https://www.cnblogs.com/softidea/p/5977375.html</a></p>
</li>
<li><p><a href="https://blog.csdn.net/itguangit/article/details/80198895" target="_blank" rel="external">https://blog.csdn.net/itguangit/article/details/80198895</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot集成RestTemplate&quot;&gt;&lt;a href=&quot;#SpringBoot集成RestTemplate&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot集成RestTemplate&quot;&gt;&lt;/a&gt;SpringBoot集成Re
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>java nio</title>
    <link href="http://chenjiabing666.github.io/2018/12/01/java-nio/"/>
    <id>http://chenjiabing666.github.io/2018/12/01/java-nio/</id>
    <published>2018-12-01T14:05:47.000Z</published>
    <updated>2018-12-01T14:06:56.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓冲区（Buffer）"><a href="#缓冲区（Buffer）" class="headerlink" title="缓冲区（Buffer）"></a>缓冲区（Buffer）</h2><ul>
<li>负责数据的存取，实际上就是一个数组，用于存储不同的数据</li>
<li>除了布尔类型之后，其他类型都有，最常用的就是<code>ByteBuffer</code></li>
</ul>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul>
<li><code>allocate(int capacity)</code>： 分配指定大小的缓冲区（非直接缓冲区）</li>
<li><code>allocateDirect(int capacity)</code>： 分配指定大小的缓冲区（直接缓冲区）</li>
<li><code>put()</code>：向缓冲区中存储数据</li>
<li><code>get(byte[] dst)</code>：从缓冲区获取数据，这里的dst的容量必须和缓冲区的大小一致</li>
<li><code>get(byte[] dst,int offest,int length)</code> ：读取指定长度的内容到dst中，这里的dst容量没有要求</li>
<li><code>flip()</code>： 缓冲区从写模式切换到读模式</li>
<li><code>clear()</code>：清空缓冲区，数据依然存在，只是处于一个“被遗忘”状态，改变的只是<code>limit</code>和<code>position</code></li>
<li><code>array()</code> ：返回实现此缓冲区的 byte 数组 </li>
<li><code>mark()</code>： 标记当前位置（position）</li>
<li><code>reset()</code>：恢复到mark的位置</li>
</ul>
<h3 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h3><ul>
<li><code>capacity</code>：容量，表示缓冲区的最大容量，一旦声明不能改变</li>
<li><code>limit</code>： 界限，缓冲区中可以操作的数据的大小，实际存储数据的大小，limit之后的数据不能进行读写</li>
<li><code>position</code>：位置，表示缓冲区中正在操作数据的位置</li>
<li><code>position&lt;=limit&lt;=capacity</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">	String str=<span class="string">"abcd"</span>;</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//分配1024个字节大小的缓冲区</span></div><div class="line">	buffer.put(str.getBytes());  <span class="comment">//写入数据</span></div><div class="line">	System.out.println(buffer.capacity());  <span class="comment">//容量 1024</span></div><div class="line">	System.out.println(buffer.limit()); <span class="comment">//界限，1024</span></div><div class="line">	System.out.println(buffer.position());  <span class="comment">//正在操作数据的位置  0</span></div><div class="line">	</div><div class="line">	buffer.flip();   <span class="comment">//切换到读模式，读取数据的时候一定要切换，否则将会没有界限</span></div><div class="line">	</div><div class="line">	System.out.println(buffer.capacity());  <span class="comment">//容量 1024</span></div><div class="line">	System.out.println(buffer.limit()); <span class="comment">//界限，4，允许读取的位置只能到4，因为就存储了这么多的数据</span></div><div class="line">	System.out.println(buffer.position());  <span class="comment">//正在操作数据的位置  0</span></div><div class="line">	System.err.println(buffer.get(<span class="number">4</span>));   <span class="comment">//超出界限了，下标记从0开始，0&lt;=index&lt;limit</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取缓冲区中的数据到指定的字节数组中</div><div class="line"> * 1、字节数组的大小一定要和buffer.limit()一样大小，否则会报错</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">	String str=<span class="string">"abcdefg"</span>;</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//申请空间大小</span></div><div class="line">	buffer.put(str.getBytes());  <span class="comment">//存入数据</span></div><div class="line">	buffer.flip();   <span class="comment">//切换到读模式</span></div><div class="line">	<span class="comment">//申请一个字节数组和实际数据一样大,这里必须和缓冲区的实际数据大小一样，否则将会报错</span></div><div class="line">	<span class="keyword">byte</span>[] dst=<span class="keyword">new</span> <span class="keyword">byte</span>[buffer.limit()]; </div><div class="line">	buffer.get(dst);   <span class="comment">//读取缓冲区的数据到dst字节数组中</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(dst));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取一个字节</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">	String str=<span class="string">"abcdefg"</span>;</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">10</span>);  <span class="comment">//申请空间大小</span></div><div class="line">	buffer.put(str.getBytes());  <span class="comment">//存入数据</span></div><div class="line">	buffer.flip();   <span class="comment">//切换到读模式</span></div><div class="line">	System.out.println((<span class="keyword">char</span>)buffer.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试remark和reset</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 测试remark和rest</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">		ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">		String str=<span class="string">"abcdcdscdscds"</span>;</div><div class="line">		buffer.put(str.getBytes());   <span class="comment">//向缓冲区中写入数据</span></div><div class="line">		buffer.flip();  <span class="comment">//切换到读的模式</span></div><div class="line">		<span class="keyword">byte</span>[] dst=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];   <span class="comment">//创建byte数组</span></div><div class="line">		System.out.println(<span class="string">"---------------------读取两个字节的数据----------------------------"</span>);</div><div class="line">		buffer.get(dst,<span class="number">0</span>,<span class="number">2</span>);   <span class="comment">//读取两个字节长度的数据到dst中，此时的position的位置位2</span></div><div class="line">		System.out.println(<span class="keyword">new</span> String(dst));</div><div class="line">		System.out.println(<span class="string">"----------------------标记此时的位置------------------------------"</span>);</div><div class="line">		buffer.mark();  <span class="comment">//标记位置，此时的position的位置位2</span></div><div class="line">		System.out.println(<span class="string">"---------------------继续读取两个字节的数据----------------------------"</span>);</div><div class="line">		buffer.get(dst,buffer.position(),<span class="number">2</span>);  <span class="comment">//继续从当前位置读取两个字节到dst中</span></div><div class="line">		System.out.println(<span class="keyword">new</span> String(dst));</div><div class="line">		System.out.println(buffer.position());  <span class="comment">//此时的position的位置为4</span></div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"---------------------重置缓冲区到remark的位置----------------------------"</span>);</div><div class="line">		buffer.reset();  <span class="comment">//重置缓冲区到rmark的位置</span></div><div class="line">		System.out.println(buffer.position());   <span class="comment">//此时的position为2</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="直接缓冲区"><a href="#直接缓冲区" class="headerlink" title="直接缓冲区"></a>直接缓冲区</h3><ul>
<li>直接字节缓冲区可以通过调用此类的 <code>allocateDirect()</code>工厂方法 来创建。此方法返回的 缓冲区进行分配和取消分配所需成本通常高于非直接缓冲区 。直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此，它们对应用程序的内存需求量造成的影响可能并不明显。所以，建议将直接缓冲区主要分配给那些易受基础系统的机 本机 I/O 操作影响的大型、持久的缓冲区。一般情况下，最好仅在直接缓冲区能在程序性能方面带来明显好处时分配它们。</li>
<li><img src="http://upload-images.jianshu.io/upload_images/8244809-fcb728300855e16b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接缓冲区"></li>
</ul>
<h3 id="非直接缓冲区"><a href="#非直接缓冲区" class="headerlink" title="非直接缓冲区"></a>非直接缓冲区</h3><ul>
<li>在JVM中内存中创建，在每次调用基础操作系统的一个本机IO之前或者之后，虚拟机都会将缓冲区的内容复制到中间缓冲区（或者从中间缓冲区复制内容），缓冲区的内容驻留在JVM内，因此销毁容易，但是占用JVM内存开销，处理过程中有复制操作。</li>
<li><p><img src="http://upload-images.jianshu.io/upload_images/8244809-7cb17b790f670380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非直接缓冲区"></p>
<ul>
<li>写入步骤如下：<ol>
<li>创建一个临时的直接ByteBuffer对象。</li>
<li>将非直接缓冲区的内容复制到临时缓冲中。</li>
<li>使用临时缓冲区执行低层次I/O操作。</li>
<li>临时缓冲区对象离开作用域，并最终成为被回收的无用数据。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="通道（Channel）"><a href="#通道（Channel）" class="headerlink" title="通道（Channel）"></a>通道（Channel）</h2><ul>
<li>通道是双向的，流是单向的</li>
<li>通道相当于输出和输入流</li>
<li>主要的实现类如下：<ul>
<li><code>FileChannel</code>：文件的操作</li>
<li><code>SocketChannel</code>：TCP</li>
<li><code>ServerSocketChannel</code>：TCP</li>
<li><code>DatagramChannel</code>：UDP</li>
</ul>
</li>
</ul>
<h3 id="获取通道"><a href="#获取通道" class="headerlink" title="获取通道"></a>获取通道</h3><ol>
<li>本地IO，提供了<code>getChannel()</code>方法获取通道<ol>
<li><code>FileInputStream</code></li>
<li><code>FileOutputStram</code></li>
<li><code>RandomAccessFile</code></li>
</ol>
</li>
<li>在JDK1.7中的NIO，针对各个通道提供了静态方法<code>open()</code></li>
<li>在JDK1.7中的NIO的Files工具类的<code>newByteChannel()</code></li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>利用通道实现文件的复制（非直接缓冲区）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用getChannel获取通道,实现文件的复制</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	FileInputStream inputStream=<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"C:/images/lifecrystal.png"</span>));</div><div class="line">	FileOutputStream outputStream=<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"C:/images/2.png"</span>));</div><div class="line">	</div><div class="line">	FileChannel inchannel = inputStream.getChannel();  <span class="comment">//获取通道，用于读取</span></div><div class="line">	FileChannel outchannel=outputStream.getChannel();  <span class="comment">//获取通道，用于写入</span></div><div class="line">	</div><div class="line">	ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//申请缓冲区</span></div><div class="line">	<span class="comment">//将通道中的数据写入缓冲区</span></div><div class="line">	<span class="keyword">while</span> (inchannel.read(buffer)!=-<span class="number">1</span>) &#123;</div><div class="line">		buffer.flip(); <span class="comment">//切换到读模式</span></div><div class="line">		<span class="comment">//将缓冲区中的数据写入通道</span></div><div class="line">		outchannel.write(buffer);  </div><div class="line">		buffer.clear();  <span class="comment">//清空缓冲区，继续读取数据</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//关闭通道</span></div><div class="line">	inchannel.close();</div><div class="line">	outchannel.close();</div><div class="line">	inputStream.close();</div><div class="line">	outchannel.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用直接缓冲区完成文件的复制，使用open()的方法获取通道</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 使用直接缓冲区完成文件的复制</div><div class="line">	 * 使用open()的方法获取通道</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="comment">//获取一个读取数据的通道，使用的读模式</span></div><div class="line">		FileChannel inchannel=FileChannel.open(Paths.get(<span class="string">"C:/images/2.png"</span>), StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * StandardOpenOption.CREATE : 如果文件不存在，那么就创建，如果存在将会覆盖，不报错</div><div class="line">		 * StandardOpenOption.CREATE_NEW ： 如果不存在就创建，如果存在，将会报错</div><div class="line">		 */</div><div class="line">		FileChannel outchannel=FileChannel.open(Paths.get(<span class="string">"C:/images/3.png"</span>), StandardOpenOption.CREATE,StandardOpenOption.WRITE,StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		<span class="comment">//创建一个内存映射文件，操作直接缓冲区，和allocatDirect()一样，MapMode.READ_ONLY表示只读的模式，用于读取</span></div><div class="line">		MappedByteBuffer inMappedBuff = inchannel.map(MapMode.READ_ONLY, <span class="number">0</span>, inchannel.size());</div><div class="line">		</div><div class="line">		<span class="comment">//创建一个内容映射文件，MapMode.READ_WRITE表示读写模式，可以读写</span></div><div class="line">		MappedByteBuffer outMappedBuffer = outchannel.map(MapMode.READ_WRITE, <span class="number">0</span>, inchannel.size());</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span>[] dst=<span class="keyword">new</span> <span class="keyword">byte</span>[inMappedBuff.limit()];</div><div class="line">		<span class="comment">//将数据读入到dst中</span></div><div class="line">		inMappedBuff.get(dst);</div><div class="line">		</div><div class="line">		<span class="comment">//将数据从dst中读取到outMappedBuffer</span></div><div class="line">		outMappedBuffer.put(dst);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="通道之间指定进行数据传输"><a href="#通道之间指定进行数据传输" class="headerlink" title="通道之间指定进行数据传输"></a>通道之间指定进行数据传输</h3><ul>
<li><code>transferTo(long position,long count,WritableByteChannel target)</code>:将数据从通道写入可写的通道target中</li>
<li><code>transferFrom(ReadableByteChannel from,long position,long count)</code>：将数据从通道from中读取到通道中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 通道之间直接进行传输</div><div class="line">	 * 	1、transferTo(long position,long count,WritableByteChannel target):将数据从通道写入可写的通道target中</div><div class="line">	 * 	2、transferFrom(ReadableByteChannel from,long position,long count)：将数据从通道from中读取到通道中</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="comment">//获取一个读取数据的通道，使用的读模式</span></div><div class="line">		FileChannel inchannel = FileChannel.open(Paths.get(<span class="string">"C:/images/2.png"</span>),</div><div class="line">				StandardOpenOption.READ);</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * StandardOpenOption.CREATE : 如果文件不存在，那么就创建，如果存在将会覆盖，不报错</div><div class="line">		 * StandardOpenOption.CREATE_NEW ： 如果不存在就创建，如果存在，将会报错</div><div class="line">		 */</div><div class="line">		FileChannel outchannel=FileChannel.open(Paths.get(<span class="string">"C:/images/4.png"</span>), StandardOpenOption.CREATE,StandardOpenOption.WRITE,StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		<span class="comment">//将通道inchannel中的数据直接写入outchannel中</span></div><div class="line">		inchannel.transferTo(<span class="number">0</span>, inchannel.size(), outchannel);</div><div class="line">		</div><div class="line">		<span class="comment">//和上面一样的效果</span></div><div class="line"><span class="comment">//		outchannel.transferFrom(inchannel, 0, inchannel.size());</span></div><div class="line">		</div><div class="line">		inchannel.close();</div><div class="line">		outchannel.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="分散读取"><a href="#分散读取" class="headerlink" title="分散读取"></a>分散读取</h3><ul>
<li>将通道中的数据分散到各个缓冲区中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 分散读取：将通道中的数据写入各个缓冲区中，是按照顺序写入的，第一个缓冲区写满才会写入第二个缓冲区</div><div class="line"> * <span class="doctag">@throws</span> IOException </div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建读写模式的RandomAccessFile</span></div><div class="line">	RandomAccessFile accessFile=<span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"C:/images/2.png"</span>), <span class="string">"rw"</span>);</div><div class="line">	FileChannel inchannel=accessFile.getChannel(); <span class="comment">//读取</span></div><div class="line">	</div><div class="line">	ByteBuffer buffer1=ByteBuffer.allocate(<span class="number">10</span>); <span class="comment">//第一个缓冲区，10个字节大小</span></div><div class="line">	ByteBuffer buffer2=ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//第二个缓冲区</span></div><div class="line">	</div><div class="line">	ByteBuffer[] dst=&#123;buffer1,buffer2&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//分散读取</span></div><div class="line">	inchannel.read(dst);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (ByteBuffer byteBuffer : dst) &#123;</div><div class="line">		byteBuffer.flip();  <span class="comment">//切换到读的模式</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//输出第一个缓冲区的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer1.array()));</div><div class="line">	</div><div class="line">	<span class="comment">//输出第二个缓冲区中的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer2.array()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="聚集写入"><a href="#聚集写入" class="headerlink" title="聚集写入"></a>聚集写入</h3><ul>
<li>将各个缓冲区的数据读入到通道中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	<span class="comment">//创建读写模式的RandomAccessFile</span></div><div class="line">	RandomAccessFile accessFile=<span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"C:/images/2.png"</span>), <span class="string">"rw"</span>);</div><div class="line">	FileChannel inchannel=accessFile.getChannel(); <span class="comment">//读取</span></div><div class="line">	</div><div class="line">	ByteBuffer buffer1=ByteBuffer.allocate(<span class="number">10</span>); <span class="comment">//第一个缓冲区，10个字节大小</span></div><div class="line">	ByteBuffer buffer2=ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//第二个缓冲区</span></div><div class="line">	</div><div class="line">	ByteBuffer[] dst=&#123;buffer1,buffer2&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//分散读取</span></div><div class="line">	inchannel.read(dst);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (ByteBuffer byteBuffer : dst) &#123;</div><div class="line">		byteBuffer.flip();  <span class="comment">//切换到读的模式</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//输出第一个缓冲区的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer1.array()));</div><div class="line">	</div><div class="line">	<span class="comment">//输出第二个缓冲区中的数据</span></div><div class="line">	System.out.println(<span class="keyword">new</span> String(buffer2.array()));</div><div class="line">	</div><div class="line">	System.out.println(<span class="string">"---------------------聚集写入-------------------"</span>);</div><div class="line">	</div><div class="line">	RandomAccessFile accessFile2=<span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"C:/images/6.png"</span>), <span class="string">"rw"</span>);</div><div class="line">	FileChannel outChannel=accessFile2.getChannel();   <span class="comment">//写入数据的通道</span></div><div class="line">	<span class="comment">//聚集写入，将数据从各个缓冲区中写入到通道中</span></div><div class="line">	outChannel.write(dst); </div><div class="line">	</div><div class="line">	inchannel.close();</div><div class="line">	outChannel.close();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="NIO阻塞式"><a href="#NIO阻塞式" class="headerlink" title="NIO阻塞式"></a>NIO阻塞式</h3><ul>
<li>阻塞或者不阻塞是针对<code>SocketChannel</code>，<code>ServerSocketChannel</code></li>
<li>NIO中的套接字可以轻松在阻塞和非阻塞之间切换，这里我们使用NIO实现阻塞式的TCP数据传输</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 客户端使用SocketChannel</div><div class="line">	 * 客户端使用SocketChannel中的write()方法向服务端发送数据，使用read()读取服务端返回的反馈</div><div class="line">	 * 在数据发送完成之后如果不调用shutdownOutput告知服务端数据已传送完成，那么将会一直阻塞下去</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClient</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//获取通道</span></div><div class="line">		SocketChannel clientChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">9898</span>));</div><div class="line">		</div><div class="line">		FileChannel inchannel = FileChannel.open(Paths.get(<span class="string">"C:/images/2.png"</span>), StandardOpenOption.READ);</div><div class="line">		</div><div class="line">		ByteBuffer buffer=ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//循环读取本地图片，并且发送到服务端</span></div><div class="line">		<span class="comment">//1、先使用FileChannel将数据读取到缓冲区中</span></div><div class="line">		<span class="comment">//2、再使用SocketChannel的write方法将缓冲区的数据发送到服务端</span></div><div class="line">		<span class="keyword">while</span>(inchannel.read(buffer)!=-<span class="number">1</span>)&#123;</div><div class="line">			buffer.flip(); <span class="comment">//切换读模式</span></div><div class="line">			clientChannel.write(buffer);  <span class="comment">//发送数据</span></div><div class="line">			buffer.clear(); <span class="comment">//清空缓冲区</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//告诉服务端数据已经传送完成，否则将会一直阻塞</span></div><div class="line">		clientChannel.shutdownOutput();  </div><div class="line">		</div><div class="line">		<span class="comment">//接收服务端的反馈</span></div><div class="line">		<span class="comment">//使用read()方法接收服务端的反馈，将其读入到缓冲区中</span></div><div class="line">		<span class="keyword">while</span>(clientChannel.read(buffer)&gt;<span class="number">0</span>)&#123;</div><div class="line">			buffer.flip();  <span class="comment">//切换读模式</span></div><div class="line">			System.out.println(<span class="string">"服务端："</span>+<span class="keyword">new</span> String(buffer.array()));</div><div class="line">			buffer.clear();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//关闭通道</span></div><div class="line">		inchannel.close();</div><div class="line">		clientChannel.close();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 服务端使用ServerSocketChannel</div><div class="line">	 * 服务端使用SocketChannel的read()方法读取客户端发送的数据，使用write()方法向客户端返回数据</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testServer</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//获取服务端的通道</span></div><div class="line">		ServerSocketChannel serverChannel = ServerSocketChannel.open();</div><div class="line">		</div><div class="line">		<span class="comment">//绑定连接</span></div><div class="line">		serverChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</div><div class="line">		</div><div class="line">		<span class="comment">//获取客户端的连接通道</span></div><div class="line">		SocketChannel clientChannel = serverChannel.accept();</div><div class="line">		</div><div class="line">		<span class="comment">//申请缓冲区</span></div><div class="line">		ByteBuffer byteBuffer=ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">		</div><div class="line">		</div><div class="line">		FileChannel outChannel = FileChannel.open(Paths.get(<span class="string">"C:/images/12.png"</span>), StandardOpenOption.WRITE,StandardOpenOption.CREATE);</div><div class="line">		</div><div class="line">		<span class="comment">//循环接收客户端发送过来的数据，并且将其保存在本地</span></div><div class="line">		<span class="keyword">while</span>(clientChannel.read(byteBuffer)&gt;<span class="number">0</span>)&#123;</div><div class="line">			byteBuffer.flip(); <span class="comment">//切换读模式</span></div><div class="line">			outChannel.write(byteBuffer);  <span class="comment">//写入到本地</span></div><div class="line">			byteBuffer.clear(); <span class="comment">//清空缓冲区</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//服务端发送反馈信息给客户端，使用的还是SocketChannel的write方法</span></div><div class="line">		byteBuffer.put(<span class="string">"服务端接收数据成功"</span>.getBytes());</div><div class="line">		byteBuffer.flip(); <span class="comment">//切换模式</span></div><div class="line">		clientChannel.write(byteBuffer);</div><div class="line">		clientChannel.shutdownOutput();  <span class="comment">//告知客户端传输完成</span></div><div class="line">		</div><div class="line">		<span class="comment">//关闭通道</span></div><div class="line">		outChannel.close();</div><div class="line">		clientChannel.close();</div><div class="line">		serverChannel.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="Selector（选择器）"><a href="#Selector（选择器）" class="headerlink" title="Selector（选择器）"></a>Selector（选择器）</h2><ul>
<li>总的来说，选择器是对通道进行监听，这样就会避免阻塞的发生，实现了多路复用</li>
</ul>
<h3 id="SelectionKey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h3><ul>
<li><p>某个Channel成功连接到另一个服务器称为“ <strong>连接就绪</strong> ”。一个Server Socket Channel准备好接收新进入的连接称为“ <strong>接收就绪</strong> ”。一个有数据可读的通道可以说是“ <strong>读就绪</strong> ”。等待写数据的通道可以说是“ <strong>写就绪</strong> ”。 </p>
</li>
<li><p>选择器是用来轮询监听通道的状态，其中有四种状态如下：</p>
<ul>
<li><code>SelectionKey.OP_CONNECT</code>：连接就绪</li>
<li><code>SelectionKey.OP_ACCEPT</code>：接收就绪</li>
<li><code>SelectionKey.OP_READ</code>：读就绪</li>
<li><code>SelectionKey.OP_WRITE</code>：写就绪</li>
</ul>
</li>
</ul>
<h3 id="NIO非阻塞式"><a href="#NIO非阻塞式" class="headerlink" title="NIO非阻塞式"></a>NIO非阻塞式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 客户端需要使用configureBlocking(false)设置成非阻塞模式的</div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClient</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	<span class="comment">//获取通道</span></div><div class="line">	SocketChannel client = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">9898</span>));</div><div class="line">	<span class="comment">//切换成非阻塞模式</span></div><div class="line">	client.configureBlocking(<span class="keyword">false</span>);</div><div class="line">	</div><div class="line">	ByteBuffer buf=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//申请缓冲区</span></div><div class="line">	</div><div class="line">	Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">	<span class="keyword">while</span>(scanner.hasNext())&#123;</div><div class="line">		String line=scanner.next();  <span class="comment">//读取控制台输入的内容</span></div><div class="line">		buf.put((<span class="keyword">new</span> Date().toString()+<span class="string">"\n"</span>+line).getBytes());  <span class="comment">//向缓冲区写入数据</span></div><div class="line">		buf.flip(); <span class="comment">//切换到读模式</span></div><div class="line">		client.write(buf);  <span class="comment">//向服务端发送数据</span></div><div class="line">		buf.clear();  <span class="comment">//清空缓存区</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	scanner.close();</div><div class="line">	client.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 服务端</div><div class="line"> * 1、将通道注册到选择器中，并且指定监听的事件</div><div class="line"> * 2、程序每次都会轮询的从选择器中选择事件，可以选择不同状态的通道进行操作</div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testServer</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	<span class="comment">//获取通道</span></div><div class="line">	ServerSocketChannel server = ServerSocketChannel.open();</div><div class="line">	</div><div class="line">	<span class="comment">//绑定端口</span></div><div class="line">	server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9898</span>));</div><div class="line">	</div><div class="line">	<span class="comment">//配置非阻塞</span></div><div class="line">	server.configureBlocking(<span class="keyword">false</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取选择器</span></div><div class="line">	Selector selector = Selector.open();</div><div class="line">	</div><div class="line">	<span class="comment">//将通道注册到选择器上，并且知道指定监听的事件为"接收就绪"</span></div><div class="line">	server.register(selector, SelectionKey.OP_ACCEPT);</div><div class="line">	</div><div class="line">	<span class="comment">//轮询式获取选择器上已经准备就绪的事件</span></div><div class="line">	<span class="keyword">while</span>(selector.select()&gt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="comment">//获取当前选择器中所有的选择键(已经准备就绪的)</span></div><div class="line">		Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</div><div class="line">		</div><div class="line">		<span class="comment">//获取迭代器</span></div><div class="line">		Iterator&lt;SelectionKey&gt; iterator = keys.iterator();</div><div class="line">		</div><div class="line">		<span class="comment">//迭代器遍历所有的选择键</span></div><div class="line">		<span class="keyword">while</span>(iterator.hasNext())&#123;</div><div class="line">			<span class="comment">//获取当前选择键</span></div><div class="line">			SelectionKey key = iterator.next();</div><div class="line">			iterator.remove(); <span class="comment">//删除选择键</span></div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (key.isAcceptable()) &#123;  <span class="comment">//如果接收就绪了 </span></div><div class="line">				SocketChannel client = server.accept();  <span class="comment">//获取SocketChannel</span></div><div class="line">				client.configureBlocking(<span class="keyword">false</span>);  <span class="comment">//设置非阻塞模式</span></div><div class="line">				client.register(selector, SelectionKey.OP_READ);  <span class="comment">//将此通道注册到选择器中，指定监听的事件是读就绪</span></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())&#123;  <span class="comment">//如果读就绪</span></div><div class="line">				SocketChannel client = (SocketChannel) key.channel();  <span class="comment">//读就绪了，那么可以获取通道直接读取数据</span></div><div class="line">				ByteBuffer buf=ByteBuffer.allocate(<span class="number">1024</span>);  <span class="comment">//声明一个缓冲区</span></div><div class="line">				<span class="comment">//循环接收客户端的到缓冲区中</span></div><div class="line">				<span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">				<span class="keyword">while</span>((len=client.read(buf))&gt;<span class="number">0</span>)&#123;</div><div class="line">					buf.flip();</div><div class="line">					System.out.println(<span class="keyword">new</span> String(buf.array(),<span class="number">0</span>,len));</div><div class="line">					buf.clear();</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;  <span class="comment">//如果写就绪</span></div><div class="line">				</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;  <span class="comment">//如果连接就绪</span></div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	server.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.cnblogs.com/tengpan-cn/p/5809273.html" target="_blank" rel="external">https://www.cnblogs.com/tengpan-cn/p/5809273.html</a></li>
<li><a href="http://ifeve.com/overview/" target="_blank" rel="external">并发编程网</a></li>
<li><a href="http://www.cnblogs.com/snailclimb/p/9086334.html" target="_blank" rel="external">http://www.cnblogs.com/snailclimb/p/9086334.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓冲区（Buffer）&quot;&gt;&lt;a href=&quot;#缓冲区（Buffer）&quot; class=&quot;headerlink&quot; title=&quot;缓冲区（Buffer）&quot;&gt;&lt;/a&gt;缓冲区（Buffer）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;负责数据的存取，实际上就是一个数组，用于存储不同的数据&lt;
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java基础" scheme="http://chenjiabing666.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件之Rabbitmq</title>
    <link href="http://chenjiabing666.github.io/2018/11/15/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BRabbitmq/"/>
    <id>http://chenjiabing666.github.io/2018/11/15/消息中间件之Rabbitmq/</id>
    <published>2018-11-15T14:15:01.000Z</published>
    <updated>2018-11-15T14:16:19.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ【消息中间件】"><a href="#RabbitMQ【消息中间件】" class="headerlink" title="RabbitMQ【消息中间件】"></a>RabbitMQ【消息中间件】</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>RabbitMQ是实现AMQP（高级消息队列协议）的消息中间件的一种，最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</li>
<li>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</li>
<li><strong>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</strong></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><code>docker pull rabbitmq:3.7-management</code></li>
<li><code>docker run --name rabbitmq -p 15672:15672 -p 5672:5672 -d df80af9ca0c9</code></li>
<li>安装运行成功之后访问：<code>http://[ip]:15672</code>即可登录</li>
<li><img src="https://github.com/chenjiabing666/BlogImage/blob/master/rabbit1.png?raw=true" alt="示例图"></li>
</ul>
<h2 id="四种类型的交换器（exchange）"><a href="#四种类型的交换器（exchange）" class="headerlink" title="四种类型的交换器（exchange）"></a>四种类型的交换器（exchange）</h2><ul>
<li><a href="https://baijiahao.baidu.com/s?id=1577456875919174629&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">https://baijiahao.baidu.com/s?id=1577456875919174629&amp;wfr=spider&amp;for=pc</a></li>
</ul>
<h3 id="direct（点对点、单播，直连）"><a href="#direct（点对点、单播，直连）" class="headerlink" title="direct（点对点、单播，直连）"></a>direct（点对点、单播，直连）</h3><ul>
<li>直连型交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应队列的 </li>
</ul>
<h3 id="fanout（扇形，广播模式，订阅模式）"><a href="#fanout（扇形，广播模式，订阅模式）" class="headerlink" title="fanout（扇形，广播模式，订阅模式）"></a>fanout（扇形，广播模式，订阅模式）</h3><ul>
<li>扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列。不同于直连交换机，路由键在此类型上不启任务作用。如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的发送给这所有的N个队列</li>
<li>路由键对这个交换机 不起作用，只要发送给扇形交换机的消息，那么都会发送给和其绑定的所有队列</li>
</ul>
<h3 id="topic（主题）"><a href="#topic（主题）" class="headerlink" title="topic（主题）"></a>topic（主题）</h3><ul>
<li><p>直连交换机的<code>routing_key</code>方案非常简单，如果我们希望一条消息发送给多个队列，那么这个交换机需要绑定上非常多的<code>routing_key</code>，假设每个交换机上都绑定一堆的<code>routing_key</code>连接到各个队列上。那么消息的管理就会异常地困难。</p>
</li>
<li><p>所以<code>RabbitMQ</code>提供了一种主题交换机，发送到主题交换机上的消息需要携带指定规则的<code>routing_key</code>，主题交换机会根据这个规则将数据发送到对应的(多个)队列上。</p>
<p>主题交换机的<code>routing_key</code>需要有一定的规则，交换机和队列的<code>binding_key</code>需要采用<code>*.#.*.....</code>的格式，每个部分用<code>.</code>分开，其中：</p>
<ul>
<li><code>*</code>表示一个<strong>单词</strong><ul>
<li><code>rabbit.*</code>能够匹配到<code>rabbit.new</code></li>
<li><code>rabbit.*</code>不能够匹配到<code>rabbit.new.old</code></li>
</ul>
</li>
<li><code>#</code>表示任意数量（零个或多个）<strong>单词</strong>。<ul>
<li><code>rabbit.#</code>能够匹配到<code>rabbit.new</code></li>
<li><code>rabbit.#</code>能够匹配到<code>rabbit.new.old</code></li>
</ul>
</li>
<li>假设有一条消息的<code>routing_key</code>为<code>fast.rabbit.white</code>,那么带有这样<code>binding_key</code>的几个队列都会接收这条消息</li>
</ul>
</li>
<li><p><img src="http://upload-images.jianshu.io/upload_images/1479657-48e5409a26f0c75b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ul>
<h3 id="header（头，首部）"><a href="#header（头，首部）" class="headerlink" title="header（头，首部）"></a>header（头，首部）</h3><ul>
<li>类似主题交换机，但是头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。 </li>
<li>此交换机有个重要参数：”x-match”</li>
<li>当”x-match”为“any”时，消息头的任意一个值被匹配就可以满足条件</li>
</ul>
<h3 id="交换机属性"><a href="#交换机属性" class="headerlink" title="交换机属性"></a>交换机属性</h3><ul>
<li>除交换机类型外，在声明交换机时还可以附带许多其他的属性，其中最重要的几个分别是：<ul>
<li><code>Name</code>：交换机名称</li>
<li><code>Durability</code>：是否持久化。如果持久性，则RabbitMQ重启后，交换机还存在</li>
<li><code>Auto-delete</code>：当所有与之绑定的消息队列都完成了对此交换机的使用后，删掉它</li>
</ul>
</li>
</ul>
<h2 id="Queue【队列】"><a href="#Queue【队列】" class="headerlink" title="Queue【队列】"></a>Queue【队列】</h2><ul>
<li>基本的属性如下：<ul>
<li><code>name</code>：名称</li>
<li><code>durable</code>：是否持久化，如果不持久化，那么重启后将会不存在</li>
<li><code>exclusive</code>：独享（只被一个连接（connection）使用，而且当连接关闭后队列即被删除） </li>
<li><code>autoDelete</code>：自动删除，当最后一个消费者退订后即被删除 </li>
<li><code>arguments</code>：其他</li>
</ul>
</li>
</ul>
<h2 id="springBoot整合RabbitMQ"><a href="#springBoot整合RabbitMQ" class="headerlink" title="springBoot整合RabbitMQ"></a>springBoot整合RabbitMQ</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- rabbitmq启动器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置连接信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring.rabbitmq.host=192.168.0.86    ## 主机地址</div><div class="line">spring.rabbitmq.port=5672           ## 端口</div><div class="line">spring.rabbitmq.username=admin     ## 用户名</div><div class="line">spring.rabbitmq.password=123456    ## 密码</div><div class="line">spring.rabbitmq.virtual-host=/    ## 虚拟主机，这里的用户名和密码一定要对这个虚拟主机有权限</div></pre></td></tr></table></figure>
<ul>
<li>配置一个Topic交换机和对应的队列，配置类如下，会自动创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Topic交换机的配置类</div><div class="line"> * 1、配置完成之后，当使用到的时候会自动创建，不需要手动的创建，当然使用rabbitAdmin也是可以手动创建的</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span>   <span class="comment">//指定这是一个配置类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConfig</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建队列 queue1</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue_1"</span>,<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建队列 queue2</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Queue <span class="title">queue2</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//指定名称和持久化</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue_2"</span>,<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建topic交换机</div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topic1</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"topic_1"</span>); </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将交换机topic1和队列queue1通过路邮键message_1绑定在一起</div><div class="line">	 * <span class="doctag">@param</span> topic1 交换机1 ，这里通过名称匹配，因为是通过<span class="doctag">@Bean</span>自动注入的</div><div class="line">	 * <span class="doctag">@param</span> queue1 队列1  这里通过名称匹配，因为是通过<span class="doctag">@Bean</span>自动注入的</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Binding <span class="title">bindTopic1AndQueu1</span><span class="params">(TopicExchange topic1,Queue queue1 )</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> BindingBuilder.bind(queue1).to(topic1).with(<span class="string">"message_1"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将交换机topic1和队列queue2通过路邮键message_2绑定在一起</div><div class="line">	 * <span class="doctag">@param</span> topic1</div><div class="line">	 * <span class="doctag">@param</span> queue1</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Binding <span class="title">bindTopic1AndQueu2</span><span class="params">(TopicExchange topic1,Queue queue2 )</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> BindingBuilder.bind(queue2).to(topic1).with(<span class="string">"message_2"</span>);</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动类添加注解<code>@EnableRabbit</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableRabbit</span>             <span class="comment">//开启rabbitmq</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span>  </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//继承SpringBootServletInitializer实现war包的发布</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(DemoApplication.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>发送消息和接受消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitServiceImpl</span> <span class="keyword">implements</span> <span class="title">RabbitServie</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate发送消息;</div><div class="line"></div><div class="line">    <span class="comment">//使用rabbitTemplate发送消息</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</div><div class="line">		Map&lt;String, Object&gt; map=<span class="keyword">new</span> HashedMap();</div><div class="line">		map.put(<span class="string">"name"</span>, <span class="string">"陈加兵"</span>);</div><div class="line">		rabbitTemplate.convertAndSend(<span class="string">"topic_1"</span>, <span class="string">"message_1"</span>, map);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">//使用rabbitTemplate接收消息</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		Map&lt;String, Object&gt; map=(Map&lt;String, Object&gt;) rabbitTemplate.receiveAndConvert(<span class="string">"queue_1"</span>);</div><div class="line">		System.out.println(map);</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RabbitTemplate"><a href="#RabbitTemplate" class="headerlink" title="RabbitTemplate"></a>RabbitTemplate</h3><ul>
<li>springBoot自动注入，直接使用即可</li>
<li><strong>实体类发送消息之前一定需要序列化</strong></li>
<li><strong>用于发送和接收消息</strong></li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li><code>void convertAndSend(String exchange, String routingKey, final Object object)</code> ：发送消息<ul>
<li><code>exchange</code>：交换机</li>
<li><code>routingKey</code>：路由键</li>
<li><code>object</code> ：需要发送的对象</li>
</ul>
</li>
<li><code>Object receiveAndConvert(String queueName)</code>：接收指定队列的消息<ul>
<li><code>queueName</code>：消息队列的名字</li>
</ul>
</li>
</ul>
<h3 id="RabbitAdmin"><a href="#RabbitAdmin" class="headerlink" title="RabbitAdmin"></a>RabbitAdmin</h3><ul>
<li>springBoot已经为我们自动注入了AmqpAdmin，用于创建交换机、队列、绑定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@ConditionalOnSingleCandidate</span>(ConnectionFactory.class)</div><div class="line">	<span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.rabbitmq"</span>, name = <span class="string">"dynamic"</span>, matchIfMissing = <span class="keyword">true</span>)</div><div class="line">	<span class="meta">@ConditionalOnMissingBean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> AmqpAdmin <span class="title">amqpAdmin</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RabbitAdmin(connectionFactory);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span> <span class="comment">// springBoot测试类，可以自定义测试类，不过需要引用这两个注解</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> AmqpAdmin amqpAdmin;   <span class="comment">//自动注入即可</span></div><div class="line">    </div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</div><div class="line">		DirectExchange directExchange = <span class="keyword">new</span> DirectExchange(<span class="string">"test_direct"</span>);</div><div class="line">		Queue queue = <span class="keyword">new</span> Queue(<span class="string">"direct_1"</span>, <span class="keyword">true</span>);</div><div class="line">		<span class="comment">// 创建一个直连的交换机</span></div><div class="line">		amqpAdmin.declareExchange(directExchange);</div><div class="line">		<span class="comment">// 创建一个队列</span></div><div class="line">		amqpAdmin.declareQueue(queue);</div><div class="line">		</div><div class="line">		<span class="comment">//创建绑定关系</span></div><div class="line">		amqpAdmin.declareBinding(BindingBuilder.bind(queue)</div><div class="line">				.to(directExchange).with(<span class="string">"direct_message"</span>));</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="消息监听"><a href="#消息监听" class="headerlink" title="消息监听"></a>消息监听</h3><ul>
<li>消息监听使用的注解是<code>@RabbitListener</code>，可以监听指定的队列，一旦这个队列中有消息了，那么就会执行</li>
<li>在启动类上添加<code>@EnableRabbit</code>开启基于注解的rabbit的消息监听</li>
</ul>
<h4 id="RabbitListener"><a href="#RabbitListener" class="headerlink" title="@RabbitListener"></a>@RabbitListener</h4><ul>
<li>消息监听的注解，可以监听一个或者多个队列，一旦队列中有了信息，那么就会执行，一旦被执行就意味着这条消息被消费了（不一定，后面会讲到消息确认机制，这里是默认会被消费的）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * rabbitmq的消息处理类</div><div class="line"> * <span class="doctag">@author</span> 陈加兵</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>  <span class="comment">//注入</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 使用<span class="doctag">@RabbitListener</span>这个注解监听指定的队列，一旦这个队列有了消息，那么将会执行</div><div class="line">	 * <span class="doctag">@param</span> log 消息的内容，如果接收的消息内容是log对象，那么将会被反序列化，存入这个log中</div><div class="line">	 * 消息一旦被监听到了并且被执行了，那么这条队列的消息将会被删除了</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Log log)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"------接收到消息----"</span>);</div><div class="line">		System.out.println(<span class="string">"消息内容为："</span>+log);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 使用org.springframework.amqp.core.Message对象来接收消息，可以显示消息头一些信息</div><div class="line">	 * <span class="doctag">@param</span> message</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received1</span><span class="params">(Message message)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"------接收到消息1----"</span>);</div><div class="line">		<span class="keyword">byte</span>[] body=message.getBody();</div><div class="line">		System.out.println(message.getMessageProperties());  </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="RabbitHandler"><a href="#RabbitHandler" class="headerlink" title="@RabbitHandler"></a>@RabbitHandler</h4><ul>
<li><code>@RabbitListener</code> 可以标注在类上面，需配合 @RabbitHandler 注解一起使用</li>
<li><code>@RabbitListener</code>标注在类上面表示当有收到消息的时候，就交给 @RabbitHandler 的方法处理，具体使用哪个方法处理，根据 MessageConverter 转换后的参数类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理消息的类，使用<span class="doctag">@RabbitListener</span>监听队列，结合<span class="doctag">@RabbitHandler</span>处理不同内容类型的消息</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)   <span class="comment">//监听direct_1这个队列的消息</span></div><div class="line"><span class="meta">@Component</span>   <span class="comment">//注入</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMessage</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 定义处理的方法是接收内容的类型为Log类型</div><div class="line">	 * <span class="doctag">@param</span> log</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receivedLog</span><span class="params">(Log log)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"接收了log对象"</span>);</div><div class="line">		System.out.println(log);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 定义接收内容为User类型的消息</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receivedMap</span><span class="params">(User user)</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"接收了user对象"</span>);</div><div class="line">		System.out.println(user);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消息确认（SpringBoot整合）"><a href="#消息确认（SpringBoot整合）" class="headerlink" title="消息确认（SpringBoot整合）"></a>消息确认（SpringBoot整合）</h2><ul>
<li><p>消息确认可以分为<strong>事务模式</strong>（类似jdbc的操作），<strong>confirm</strong>模式（可以使用异步回调模式，更加高效）</p>
</li>
<li><p>rabbitmq默认是自动确认的，即是一条消息被发送了或者被消费了，无论你生产者或者消费者有没有发送或者消费成功，那么都是自动确认为已发送或者已接收了，但是在业务中接收了一条消息不一定就是成功消费了，如果这个业务没有正常完成，我们希望的是能够消息回滚，就像是mysql的事务机制，因此此时我们就需要手动确认这条消息被消费了，而不是自动确认</p>
</li>
<li>消息确认可以分为事务模式（类似jdbc的操作），confirm模式，具体的可以参考<a href="https://blog.csdn.net/u013256816/article/details/55515234" target="_blank" rel="external">https://blog.csdn.net/u013256816/article/details/55515234</a></li>
</ul>
<h3 id="confirm模式"><a href="#confirm模式" class="headerlink" title="confirm模式"></a>confirm模式</h3><ul>
<li><p>confirm不同于事务模式的地方是可以使用异步的确认模式</p>
</li>
<li><p>在配置文件中配置，如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 开启发送确认</div><div class="line">spring.rabbitmq.publisher-confirms=true</div><div class="line"># 开启发送失败退回</div><div class="line">spring.rabbitmq.publisher-returns=true</div><div class="line"># 开启ACK，开启之后只有手动提交才会消费消息</div><div class="line">spring.rabbitmq.listener.direct.acknowledge-mode=manual</div><div class="line">spring.rabbitmq.listener.simple.acknowledge-mode=manual</div></pre></td></tr></table></figure>
<h4 id="发送消息的确认"><a href="#发送消息的确认" class="headerlink" title="发送消息的确认"></a>发送消息的确认</h4><ul>
<li><code>ConfirmCallback</code> ： 这个是rabbitmq的确认的回调接口，当消息发送之后，会异步调用实现这个接口的方法</li>
<li><code>ReturnCallback</code> ：这个是rabbitmq的失败回调接口，当消息发送失败之后，会异步调用实现这个接口的方法</li>
<li>一个消息的发送的业务类如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 消息发送的业务层</div><div class="line"> * 		SendMessageService ： 发送消息的接口</div><div class="line"> * 		ConfirmCallback ： 消息发送成功的回调接口</div><div class="line"> * 		ReturnCallback ： 消息发送失败的回调接口（找不到对应的路由或者因为各种原因消息没有成功投递到rabbitmq中都会出发回调）</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月15日 下午4:45:37</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageServiceImpl</span> <span class="keyword">implements</span> <span class="title">SendMessageService</span>,<span class="title">ConfirmCallback</span>,<span class="title">ReturnCallback</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate;   <span class="comment">//注入rabbitMq的template，用于发送和消费消息</span></div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Logger logger=LoggerFactory.getLogger(SendMessageServiceImpl.class);   <span class="comment">//日志</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 消息发送失败的回调方法,实现ReturnCallback接口的方法</div><div class="line">	 * 	1、消息没有投递成功,包括没有找到对应的队列或者路由键</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode,</span></span></div><div class="line">			String replyText, String exchange, String routingKey) &#123;</div><div class="line">			logger.info(<span class="string">"返回的失败代码="</span>+replyCode+<span class="string">"  返回的失败信息="</span>+replyText);</div><div class="line">			logger.info(<span class="string">"交换机="</span>+exchange+<span class="string">"   绑定的路由键="</span>+routingKey);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 消息发送确认的回调方法</div><div class="line">	 * 如果消息没有到exchange,则confirm回调,ack=false</div><div class="line">	 * 如果消息到达exchange,则confirm回调,ack=true</div><div class="line">	 * 判断消息有没有成功发送，只需要判断ack的值，correlationData是发送消息的时候传递过来的值（String）</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack,</span></span></div><div class="line">			String cause) &#123;</div><div class="line">		<span class="comment">//如果ack==true，表示消息发送成功</span></div><div class="line">		<span class="keyword">if</span> (ack) &#123;</div><div class="line">			logger.info(<span class="string">"消息发送成功,下面开始处理业务。。。。。。。。。。。。。。。"</span>);</div><div class="line">			logger.info(<span class="string">"correlationData="</span>+correlationData);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			logger.info(<span class="string">"消息发送失败。。。。。。。。。。。。。。。。"</span>);</div><div class="line">			logger.info(<span class="string">"cause="</span>+cause);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 发送消息的方法</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Log log)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);   <span class="comment">//设置</span></div><div class="line">		rabbitTemplate.setReturnCallback(<span class="keyword">this</span>);</div><div class="line">		CorrelationData data=<span class="keyword">new</span> CorrelationData();   </div><div class="line">		data.setId(<span class="string">"success"</span>);   <span class="comment">//定义内容，在消息发送成功的回调方法中可以获取这个值</span></div><div class="line">		rabbitTemplate.convertAndSend(<span class="string">"amq.direct"</span>, <span class="string">"message"</span>, log,data);  <span class="comment">//发送消息</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="消费消息的确认"><a href="#消费消息的确认" class="headerlink" title="消费消息的确认"></a>消费消息的确认</h4><ul>
<li>开启ack之后，默认是不会自动消费的，只有手动ack才会被消费</li>
<li>手动ack和nack使用的类是<code>com.rabbitmq.client.Channel</code><ul>
<li><code>channel.basicAck()</code> ：手动ack<ul>
<li><code>deliveryTag</code>：该消息的index</li>
<li><code>multiple</code>：是否批量，如果为<code>true</code>将一次性ack所有小于deliveryTag的消息，如果为<code>false</code>，那么将ack当前的消息</li>
</ul>
</li>
<li><code>channel.basicNack(deliveryTag, multiple, requeue)</code><ul>
<li><code>deliveryTag</code>：该消息的index</li>
<li><code>multiple</code>：是否批量，如果为<code>true</code>将一次性ack所有小于deliveryTag的消息，如果为<code>false</code>，那么将ack当前的消息</li>
<li><code>requeue</code>：被丢弃消息是否重新进入队列，如果是true将会重新进入队列</li>
</ul>
</li>
</ul>
</li>
<li>实例如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</div><div class="line"><span class="keyword">import</span> com.techwells.demo.domain.Log;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 监听队列direct_1</div><div class="line"> * <span class="doctag">@author</span> 陈加兵 	</div><div class="line"> * <span class="doctag">@since</span> 2018年11月15日 下午6:55:56</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues=&#123;<span class="string">"direct_1"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivedMessageHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Logger logger=LoggerFactory.getLogger(ReceivedMessageHandler.class);</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 接收消息类型为Log的消息</div><div class="line">	 * 如果不手动提交的话，默认是不会被自动确认消费的，只有手动提交了，才会被真正的消费</div><div class="line">	 * <span class="doctag">@param</span> log   消息的实体类</div><div class="line">	 * <span class="doctag">@param</span> channel  </div><div class="line">	 * <span class="doctag">@param</span> message  rabbitmq的Message类</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span>  <span class="comment">//处理消息</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Log log,Channel channel,Message message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		logger.info(<span class="string">"成功接收到消息........"</span>+log);</div><div class="line">		channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);   <span class="comment">//手动提交ack，消费消息</span></div><div class="line"><span class="comment">//		channel.basicNack(message.getMessageProperties().getDeliveryTag(), true, true);</span></div><div class="line">		logger.info(<span class="string">"成功被消费。。。。。。。。。。"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 处理消息类型为String类型的消息</div><div class="line">	 * <span class="doctag">@param</span> str</div><div class="line">	 * <span class="doctag">@param</span> channel</div><div class="line">	 * <span class="doctag">@param</span> message</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="meta">@RabbitHandler</span>  <span class="comment">//处理消息</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStringMessage</span><span class="params">(String str,Channel channel,Message message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		logger.info(<span class="string">"成功接收到消息........"</span>+str);</div><div class="line">		channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">true</span>);   <span class="comment">//nack，不消费这条消息，一般是业务失败才会不消费</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://www.kancloud.cn/yunxifd/rabbitmq/96997" target="_blank" rel="external">https://www.kancloud.cn/yunxifd/rabbitmq/96997</a></p>
<p>2、<a href="http://rabbitmq.mr-ping.com/" target="_blank" rel="external">中文文档</a></p>
<p>3、<a href="https://www.cnblogs.com/ityouknow/p/6120544.html" target="_blank" rel="external">https://www.cnblogs.com/ityouknow/p/6120544.html</a></p>
<p>4、<a href="https://my.oschina.net/lzhaoqiang/blog/670749" target="_blank" rel="external">事务</a></p>
<p>5、<a href="https://www.xncoding.com/2017/08/06/spring/sb-rabbitmq.html" target="_blank" rel="external">ACK</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RabbitMQ【消息中间件】&quot;&gt;&lt;a href=&quot;#RabbitMQ【消息中间件】&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ【消息中间件】&quot;&gt;&lt;/a&gt;RabbitMQ【消息中间件】&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://chenjiabing666.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
