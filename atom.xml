<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-10-03T09:34:45.296Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springBoot整合dubbo</title>
    <link href="http://chenjiabing666.github.io/2018/10/03/springBoot%E6%95%B4%E5%90%88dubbo/"/>
    <id>http://chenjiabing666.github.io/2018/10/03/springBoot整合dubbo/</id>
    <published>2018-10-03T09:34:00.000Z</published>
    <updated>2018-10-03T09:34:45.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot整合dubbo"><a href="#SpringBoot整合dubbo" class="headerlink" title="SpringBoot整合dubbo"></a>SpringBoot整合dubbo</h1><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><ul>
<li>创建springBoot项目，导入dubbo依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加dubbo的启动器, 其中已经添加了zookepper的依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置dubbo的连接和zookeeper的连接，在application.properties中添加如下配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 启动的端口号</div><div class="line">server.port=8001</div><div class="line">server.servlet.context-path=/provider</div><div class="line"># 暴露的服务名称</div><div class="line">dubbo.application.name=user-service</div><div class="line"># zookeeper注册中心的地址</div><div class="line">dubbo.registry.address=zookeeper://39.105.123.197:2181</div></pre></td></tr></table></figure>
<ul>
<li>在主配置类上添加<code>@EnableDubbo</code>注解，开启dubbo</li>
</ul>
<h2 id="暴露服务"><a href="#暴露服务" class="headerlink" title="暴露服务"></a>暴露服务</h2><ul>
<li>在spring中使用的<code>&lt;dubbo:service&gt;</code>暴露服务，但是在springBoot中只需要使用dubbo的注解<code>@Service</code>（com.alibaba.dubbo.config.annotation.Service）即可自动暴露。如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</div><div class="line"><span class="keyword">import</span> cn.tedu.demo.beans.User;</div><div class="line"><span class="keyword">import</span> cn.tedu.demo.service.UserService;</div><div class="line"></div><div class="line"><span class="meta">@Service</span> <span class="comment">//暴露服务,只需要在对应的服务类上添加这个注解即可</span></div><div class="line"><span class="meta">@Component</span>   <span class="comment">//注入到IOC容器中</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer userId)</span> </span>&#123;</div><div class="line">		User user=<span class="keyword">new</span> User();</div><div class="line">		user.setAge(<span class="number">22</span>);</div><div class="line">		user.setUserId(userId);</div><div class="line">		user.setUserName(<span class="string">"陈加兵"</span>);</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="引用服务"><a href="#引用服务" class="headerlink" title="引用服务"></a>引用服务</h2><ul>
<li>在spring的配置文件中使用<code>&lt;dubbo:reference&gt;</code>引用服务，但是在springBoot中只需要使用dubbo的注解<code>@Reference</code>即可引用对应的服务</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">	<span class="meta">@Reference</span>  <span class="comment">//消费者引用提供者提供的服务，相当于&lt;dubbo:reference&gt;</span></div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	</div><div class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/user/get/&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer userId)</span>&#123;</div><div class="line">		<span class="keyword">return</span> userService.getUser(userId);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="maven聚合springBoot项目"><a href="#maven聚合springBoot项目" class="headerlink" title="maven聚合springBoot项目"></a>maven聚合springBoot项目</h2><ul>
<li><p><a href="http://ono60m7tl.bkt.clouddn.com/demo-parent.zip" target="_blank" rel="external">项目地址-点击下载</a></p>
</li>
<li><p>创建<code>demo-parent</code>父项目管理版本，但是在springBoot项目中也是使用父项目管理的，因此我们需要在父项目中使用springBoot的依赖管理的starter来替代之前的parent</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--之前的parent，在springBoot创建的时候将会添加，但是这里不需要</span></div><div class="line">&lt;parent&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">		&lt;version&gt;2.0.5.RELEASE&lt;/version&gt;</div><div class="line">		&lt;relativePath /&gt; </div><div class="line">&lt;/parent&gt;</div><div class="line">--&gt;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">springBoot-version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">springBoot-version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 直接使用这个依赖管理springBoot的版本即可 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springBoot-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>demo-parent</code>新建module</li>
<li>在新的module的pom.xml直接添加springBoot的启动器即可，不用指定版本</li>
</ul>
<h3 id="maven创建springBoot工程"><a href="#maven创建springBoot工程" class="headerlink" title="maven创建springBoot工程"></a>maven创建springBoot工程</h3><p>1、新建一个module，打包方式为jar</p>
<p>2、添加依赖，如下（直接添加依赖，因为父工程demo-parent已经管理了版本）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、在<code>src/main/resources</code>包的下新建springBoot的配置文件application.properties</p>
<p>4、新建一个启动类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">//标记为springBoot的启动类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="maven打包springBoot注意"><a href="#maven打包springBoot注意" class="headerlink" title="maven打包springBoot注意"></a>maven打包springBoot注意</h3><p>1、在pom文件中添加如下依赖（如果不添加如下依赖，可能打出的jar包运行将会报错找不到主程序清单）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- &lt;finalName&gt;batman-web&lt;/finalName&gt; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>           </div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>             </div><div class="line">				<span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot整合dubbo&quot;&gt;&lt;a href=&quot;#SpringBoot整合dubbo&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合dubbo&quot;&gt;&lt;/a&gt;SpringBoot整合dubbo&lt;/h1&gt;&lt;h2 id=&quot;搭建项目&quot;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>mysql索引优化详解</title>
    <link href="http://chenjiabing666.github.io/2018/09/07/mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
    <id>http://chenjiabing666.github.io/2018/09/07/mysql索引优化详解/</id>
    <published>2018-09-06T16:31:32.000Z</published>
    <updated>2018-09-06T16:32:13.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><ul>
<li>使用explain能够知道自己写的sql语句在mysql中到底是怎样运行的，到底扫描了多少行，是否使用了索引，返回的结果如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+<span class="comment">------+-------------+-----------+------+---------------+------+---------+------+------+-------+</span></div><div class="line">| id   | select_type | table     | type | possible_keys | key  | key_len | ref  | rows | Extra |</div><div class="line">+<span class="comment">------+-------------+-----------+------+---------------+------+---------+------+------+-------+</span></div><div class="line">|    1 | SIMPLE      | t_blogger | ALL  | NULL          | NULL | NULL    | NULL |    2 |       |</div><div class="line">+<span class="comment">------+-------------+-----------+------+---------------+------+---------+------+------+-------+</span></div></pre></td></tr></table></figure>
<ul>
<li>下面将会针对上面的值详细讲解</li>
</ul>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><ul>
<li>sql执行查询的序列号，决定了查询中select子句的查询顺序，分为三种情况，如下：</li>
</ul>
<h4 id="id相同"><a href="#id相同" class="headerlink" title="id相同"></a>id相同</h4><ul>
<li>查询的select子句从<strong>上到到下</strong>执行，如下：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">MariaDB [db_blog3]&gt; explain select * from t_blog ,t_blogger;</div><div class="line"></div><div class="line">+------+-------------+-----------+------+---------------+------+---------+------+------+------------------------------------+</div><div class="line">| id   | select_type | table     | type | possible_keys | key  | key_len | ref  | rows | Extra                              |</div><div class="line">+------+-------------+-----------+------+---------------+------+---------+------+------+------------------------------------+</div><div class="line">|    1 | SIMPLE      | t_blogger | ALL  | NULL          | NULL | NULL    | NULL |    2 |                                    |</div><div class="line">|    1 | SIMPLE      | t_blog    | ALL  | NULL          | NULL | NULL    | NULL |   16 | Using join buffer (flat, BNL join) |</div><div class="line">+------+-------------+-----------+------+---------------+------+---------+------+------+------------------------------------+</div></pre></td></tr></table></figure>
<ul>
<li>那么执行的孙顺序就是先查询<code>t_blogger</code>，之后查询<code>t_blog</code></li>
</ul>
<h4 id="id不同"><a href="#id不同" class="headerlink" title="id不同"></a>id不同</h4><ul>
<li>id的值越大优先级越高，就先执行，剩下相同的id的值，按照顺序从上到下执行</li>
</ul>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><ul>
<li>select语句执行查询的表，如果是使用联合查询的，那么会使用这个值可能是虚拟的表</li>
</ul>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h3><ul>
<li>全部使用了索引，并且如果是复合索引，一定要按照复合索引的顺序查询，这样才能达到最高效的查询，如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 为user表创建组合索引 index_nameAgePos</span></div><div class="line"></div><div class="line"><span class="comment">-- 全值匹配的实例 ,查询的条件的顺序必须和创建索引的顺序一致</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> age=<span class="number">22</span> <span class="keyword">and</span> pos=<span class="string">"1"</span></div></pre></td></tr></table></figure>
<h3 id="最佳左前缀法则"><a href="#最佳左前缀法则" class="headerlink" title="最佳左前缀法则"></a>最佳左前缀法则</h3><ul>
<li><strong>如果使用了组合索引（索引了多列） ，那么一定查询要从最左前列开始并且不能跳过索引中的列</strong></li>
<li>比如<code>index_nameAgePos</code>这个索引，实例如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 全值匹配，最为高效</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> age=<span class="number">22</span> <span class="keyword">and</span> pos=<span class="string">"1"</span>  </div><div class="line"></div><div class="line"><span class="comment">-- 去掉最后一个，使用前两个，那么前两个索引会有效，使用了部分索引</span></div><div class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> age=<span class="number">22</span></div><div class="line"></div><div class="line"><span class="comment">-- 去掉后面两个，只是用第一个，索引依然有效，使用了第一个索引的类，部分索引</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span></div><div class="line"></div><div class="line"><span class="comment">-- 去掉第一个，使用后面两个索引查询，没有使用做前缀，索引失效，</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">and</span> age=<span class="number">22</span> <span class="keyword">and</span> pos=<span class="string">"1"</span>  </div><div class="line"></div><div class="line"><span class="comment">-- 去掉中间的一个，只使用第一个和第三个,中间断了，不能查找到索引，索引失效，即使有了做前缀依然会失效</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"Tom"</span> <span class="keyword">and</span> pos=<span class="string">"1"</span></div></pre></td></tr></table></figure>
<ul>
<li>通过上面的例子得出：<strong>使用组合索引的时候，一定要带上左前缀，并且不能跳过中间的索引，否则将会索引失效</strong></li>
</ul>
<h3 id="不在索引上列上做任何操作"><a href="#不在索引上列上做任何操作" class="headerlink" title="不在索引上列上做任何操作"></a>不在索引上列上做任何操作</h3><ul>
<li>不要在索引列上做任何的操作，包括<strong>计算、函数、自动或者手动类型的转换</strong>，这样都会导致索引失效</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="number">2000</span>  <span class="comment">---- 我们知道name是一个varchar类型的，但是用name=2000虽然能够查到，但是在内部其实是将name转换成了数值类型，因此不能使用索引</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">left</span>(<span class="keyword">name</span>,<span class="number">4</span>)=<span class="string">"TOm"</span>    <span class="comment">-- 这里将对name使用了left这个函数，索引失效</span></div></pre></td></tr></table></figure>
<h3 id="不能使用索引中范围条件右边的列（范围之后的索引全失效）"><a href="#不能使用索引中范围条件右边的列（范围之后的索引全失效）" class="headerlink" title="不能使用索引中范围条件右边的列（范围之后的索引全失效）"></a>不能使用索引中范围条件右边的列（范围之后的索引全失效）</h3><ul>
<li>在使用组合索引的时候，一旦索引中有列使用了<strong>范围查询</strong>（&gt;=…in….like,between子句），那么在其右边的索引将会失效</li>
<li>假设创建了组合索引，顺序为<strong>name，age，address</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-- age使用了范围查询，那么在其右边的address将不会使用索引查询，但是name和age使用了索引</div><div class="line">explain select age from user where name=<span class="string">"JOhn"</span> and age&gt;<span class="number">22</span> and address=<span class="string">"江苏"</span>；</div></pre></td></tr></table></figure>
<h3 id="使用覆盖索引，少使用select"><a href="#使用覆盖索引，少使用select" class="headerlink" title="使用覆盖索引，少使用select*"></a>使用覆盖索引，少使用select*</h3><ul>
<li>需要用到什么数据就查询什么数据，这样可以减少网络的传输和mysql的全表扫描</li>
<li><strong>尽量使用覆盖索引，比如索引为<code>name，age，address</code>的组合索引，那么尽量覆盖这三个字段之中的值，mysql将会直接在索引上取值（using index）。并且返回值不包含不是索引的字段</strong></li>
</ul>
<h3 id="mysql在使用不等于-或者-lt-gt-的时候无法使用导致全表扫描"><a href="#mysql在使用不等于-或者-lt-gt-的时候无法使用导致全表扫描" class="headerlink" title="mysql在使用不等于(!=或者&lt;&gt;)的时候无法使用导致全表扫描"></a>mysql在使用不等于(!=或者&lt;&gt;)的时候无法使用导致全表扫描</h3><ul>
<li>在查询的时候，如果对索引使用不等于的操作将会导致索引失效，进行全表扫描</li>
</ul>
<h3 id="在使用or的时候，前后两个都是索引的时候才会生效"><a href="#在使用or的时候，前后两个都是索引的时候才会生效" class="headerlink" title="在使用or的时候，前后两个都是索引的时候才会生效"></a>在使用or的时候，前后两个都是索引的时候才会生效</h3><ul>
<li>比如我们创建组合索引<code>name，age，address</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"John"</span> <span class="keyword">or</span> age=<span class="number">22</span>;  <span class="comment">-- name和age都是索引，生效</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"John"</span> <span class="keyword">or</span> pos=<span class="number">22</span>;    <span class="comment">-- pos不是索引，因此导致全表扫描，索引失效</span></div></pre></td></tr></table></figure>
<h3 id="is-null和is-not-null-导致索引失效"><a href="#is-null和is-not-null-导致索引失效" class="headerlink" title="is null和is not null 导致索引失效"></a>is null和is not null 导致索引失效</h3><ul>
<li>索引条件一旦是is null或者is not null 将会导致索引失效</li>
</ul>
<h3 id="like使用-开头的将会导致索引失效"><a href="#like使用-开头的将会导致索引失效" class="headerlink" title="like使用%开头的将会导致索引失效"></a>like使用%开头的将会导致索引失效</h3><ul>
<li>如果使用模糊查找的时候，使用<code>%a%</code>的时候将会导致索引失效</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a%"</span>;   <span class="comment">--  索引失效</span></div><div class="line"></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"a%"</span>;  <span class="comment">-- 索引生效、</span></div><div class="line"></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a"</span>;  <span class="comment">--- 索引失效</span></div></pre></td></tr></table></figure>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>需求就需要使用<code>%$%</code>查询，那么我们如何解决索引失效？我们可以使用覆盖索引避免索引失效</li>
<li>假设我们的索引为<code>name，age</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%aa%"</span>;   <span class="comment">-- 索引失效，没有使用覆盖索引而是select*</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a%"</span> ;   <span class="comment">-- 索引生效，使用了覆盖索引，返回索引列name</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%aa%"</span>  <span class="comment">-- 索引生效，name和age都是索引</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> naem，pos <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%a"</span>  <span class="comment">-- 索引失效，pos不是索引</span></div></pre></td></tr></table></figure>
<h3 id="字符串不加单引号导致索引失效"><a href="#字符串不加单引号导致索引失效" class="headerlink" title="字符串不加单引号导致索引失效"></a>字符串不加单引号导致索引失效</h3><ul>
<li><code>select * from user where pos=2000</code>，将会导致name这个索引失效，因为mysql在底层会自动为name这个字段进行类型转换</li>
</ul>
<h3 id="单表查询优化"><a href="#单表查询优化" class="headerlink" title="单表查询优化"></a>单表查询优化</h3><ul>
<li>在经常查询或者排序的字段建立索引</li>
</ul>
<h3 id="两表查询优化"><a href="#两表查询优化" class="headerlink" title="两表查询优化"></a>两表查询优化</h3><ul>
<li>我们一般会使用联合查询，比如left Join，right Join</li>
<li>我们在不建立索引的情况下，如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 没有索引，全表扫描</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">left</span> <span class="keyword">join</span> image <span class="keyword">on</span> user.url=image.url</div></pre></td></tr></table></figure>
<ul>
<li>那么我们这个索引应该建在哪张表上呢？我们验证之后知道，应该在image表中对url建立索引</li>
<li><strong>总结：左连接在右边的表上加索引，右连接在左表添加索引</strong></li>
</ul>
<h3 id="三表查询优化"><a href="#三表查询优化" class="headerlink" title="三表查询优化"></a>三表查询优化</h3><ul>
<li>三表建立索引，依然按照左连接在右表上建立索引，右连接在左表上建立索引。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 没有建立索引，全表扫描</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">left</span> jon t2 t1.name=t2.name <span class="keyword">left</span> <span class="keyword">join</span> t3 t2.url=t3.url</div></pre></td></tr></table></figure>
<ul>
<li><strong>我们可以在<code>t2</code>的表上为<code>name</code>字段建立索引，在<code>t3</code>表上为<code>url</code>字段建立索引</strong>，那么将会使用索引查询</li>
</ul>
<h3 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a>小表驱动大表</h3><ul>
<li>在链接查询的时候，比如<code>left Join</code>，这种查询是左边的表驱动右边的表，那么我们应该小表驱动大表的策略，对于左连接的时候，左边的表应该是小表，右连接反之</li>
</ul>
<h3 id="order-by-排序的索引生效"><a href="#order-by-排序的索引生效" class="headerlink" title="order by 排序的索引生效"></a>order by 排序的索引生效</h3><ul>
<li><p>假设组合索引为<code>name，age，address</code></p>
</li>
<li><p>对于order by排序问题，只有满足以下两种情况才会使用索引排序（using index)</p>
<ul>
<li><strong>对于组合索引，order by 语句使用最左前缀查询</strong><ul>
<li><code>select * from user order by name</code>： 使用索引</li>
<li><code>select * from user order by age</code>： 不使用索引</li>
<li><code>select * from user order by name,age</code>： 使用索引，因为排序规则一样并且是左前缀查询</li>
<li><code>select * from user order by name asc,age desc</code>：不使用索引，因为排序规则不同，即使使用了最佳左前缀</li>
</ul>
</li>
<li>使用<code>where</code>子句与<code>order by</code>子句条件列组合满足索引最左前缀查询<ul>
<li><code>select * from user where name=&quot;John&quot; order by age</code> ： 使用索引，因为where中的name和order by中的age组合在一起符合最佳左前缀原则</li>
<li><code>select * from user where age=22 order by address</code>：不使用索引</li>
</ul>
</li>
</ul>
</li>
<li><strong>总结：order by排序应该遵循最佳左前缀查询，如果是使用多个索引字段进行排序，那么排序的规则必须相同（同是升序或者降序）</strong></li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>使用最佳左前缀</li>
<li>提高<code>sort_buffer_size</code>的值：不管是使用单路排序还是双路排序，提高这个参数都会提高查询效率</li>
<li>提高<code>max_length_for_sort_data</code>的值：提高这个参数的值，会增加使用单路排序算法的概率，但是如果设置的太高，数据总容量超出sort_buffer_size的概率增大，明显症状是磁盘I/O活动和低的处理器使用率</li>
</ul>
<p>### </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Explain&quot;&gt;&lt;a href=&quot;#Explain&quot; class=&quot;headerlink&quot; title=&quot;Explain&quot;&gt;&lt;/a&gt;Explain&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用explain能够知道自己写的sql语句在mysql中到底是怎样运行的，到底扫描了多
    
    </summary>
    
      <category term="数据库干货篇" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B2%E8%B4%A7%E7%AF%87/"/>
    
    
      <category term="SQL" scheme="http://chenjiabing666.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>spring的Bean加载过程</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/Bean%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/Bean加载过程/</id>
    <published>2018-09-02T11:45:16.000Z</published>
    <updated>2018-09-02T11:48:23.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-Bean加载过程"><a href="#spring-Bean加载过程" class="headerlink" title="spring Bean加载过程"></a>spring Bean加载过程</h1><p>1、<strong>找准入口  ,使用ClassPathXmlApplicationContext加载配置文件，用于加载classPath下的配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一行，执行完成之后就完成了spring配置文件的加载，刷新spring上下文</span></div><div class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"classpath:spring-mvc.xml"</span>);</div><div class="line"><span class="comment">//获取实例Bean</span></div><div class="line">Person person=context.getBean(<span class="string">"person"</span>,Person.class);</div></pre></td></tr></table></figure>
<p><strong>ClassPathXmlApplicationContext</strong>的继承关系如下：</p>
<p><img src="https://images2015.cnblogs.com/blog/801753/201702/801753-20170201125310058-568989522.png" alt="https://images2015.cnblogs.com/blog/801753/201702/801753-20170201125310058-568989522.png"></p>
<p>2、<strong>现在开始仔细分析第一句，可以看出第一句就已经完成了spring配置文件的加载</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"classpath:spring-mvc.xml"</span>);</div></pre></td></tr></table></figure>
<p>3、<strong>查看classPathXmlApplicationContext的源码，下面表格是对象</strong></p>
<table>
<thead>
<tr>
<th><strong>对象名</strong></th>
<th><strong>类  型</strong></th>
<th><strong>作  用</strong></th>
<th><strong>归属类</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>configResources</td>
<td>Resource[]</td>
<td>配置文件资源对象数组</td>
<td>ClassPathXmlApplicationContext</td>
</tr>
<tr>
<td>configLocations</td>
<td>String[]</td>
<td>配置文件字符串数组，存储配置文件路径</td>
<td>AbstractRefreshableConfigApplicationContext</td>
</tr>
<tr>
<td>beanFactory</td>
<td>DefaultListableBeanFactory</td>
<td>上下文使用的Bean工厂</td>
<td>AbstractRefreshableApplicationContext</td>
</tr>
<tr>
<td>beanFactoryMonitor</td>
<td>Object</td>
<td>Bean工厂使用的同步监视器</td>
<td>AbstractRefreshableApplicationContext</td>
</tr>
<tr>
<td>id</td>
<td>String</td>
<td>上下文使用的唯一Id，标识此ApplicationContext</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>parent</td>
<td>ApplicationContext</td>
<td>父级ApplicationContext</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>beanFactoryPostProcessors</td>
<td><code>List&lt;BeanFactoryPostProcessor&gt;</code></td>
<td>存储BeanFactoryPostProcessor接口，Spring提供的一个扩展点</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>startupShutdownMonitor</td>
<td>Object</td>
<td>refresh方法和destory方法公用的一个监视器，避免两个方法同时执行</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>shutdownHook</td>
<td>Thread</td>
<td>Spring提供的一个钩子，JVM停止执行时会运行Thread里面的方法</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>resourcePatternResolver</td>
<td>ResourcePatternResolver</td>
<td>上下文使用的资源格式解析器</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>lifecycleProcessor</td>
<td>LifecycleProcessor</td>
<td>用于管理Bean生命周期的生命周期处理器接口</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>messageSource</td>
<td>MessageSource</td>
<td>用于实现国际化的一个接口</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>applicationEventMulticaster</td>
<td>ApplicationEventMulticaster</td>
<td>Spring提供的事件管理机制中的事件多播器接口</td>
<td>AbstractApplicationContext</td>
</tr>
<tr>
<td>applicationListeners</td>
<td>Set<applicationlistener></applicationlistener></td>
<td>Spring提供的事件管理机制中的应用监听器</td>
<td>AbstractApplicationContext</td>
</tr>
</tbody>
</table>
<p>4、<strong>从构造方法可以看出，加载spring配置文件实际调用的是如下构造方法：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, ApplicationContext parent)</span></span></div><div class="line">			<span class="keyword">throws</span> BeansException &#123;</div><div class="line">		<span class="comment">//设置父级的ApplicationContext，null</span></div><div class="line">		<span class="keyword">super</span>(parent);</div><div class="line">    	<span class="comment">//1.设置配置文件的路径， 2. 将路径中的占位符$&#123;placeholder&#125;使用系统的变量替换</span></div><div class="line">		setConfigLocations(configLocations);</div><div class="line">		<span class="keyword">if</span> (refresh) &#123;</div><div class="line">			refresh();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>5、<strong>进入<code>setConfigLocations(configLocations);</code>的源码，这个方法是父类AbstractRefreshableConfigApplicationContext中的方法</strong></p>
<pre><code>1. 设置配置文件的路径
2. 替换路径中的占位符`${placeholder}`为系统变量中的值
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//locations : 配置文件路径-+</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(String[] locations)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//断言</span></div><div class="line">			Assert.noNullElements(locations, <span class="string">"Config locations must not be null"</span>);</div><div class="line">            <span class="comment">//存储配置文件路径的数组，存储去掉占位符后的文件路径数组</span></div><div class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</div><div class="line">            <span class="comment">//遍历locations，解析占位符</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</div><div class="line">                	<span class="comment">//调用resolvePath解析占位符</span></div><div class="line">				<span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>6、<strong>进入<code>resolvePath</code>的源码可以知道，实际上执行的是<code>AbstractPropertyResolver</code>的<code>doResolvePlaceholders</code>方法，如下</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* text : 需要解析的路径</div><div class="line">* PropertyPlaceholderHelper ： 这个是解析系统占位符的辅助类，主要用来将占位符替换成系统的环境变量</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doResolvePlaceholders</span><span class="params">(String text, PropertyPlaceholderHelper helper)</span> </span>&#123;</div><div class="line">    	<span class="comment">//调用PropertyPlaceholderHelper类中的replacePlaceholders方法</span></div><div class="line">		<span class="keyword">return</span> helper.replacePlaceholders(text, <span class="keyword">new</span> PropertyPlaceholderHelper.PlaceholderResolver() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholder</span><span class="params">(String placeholderName)</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> getPropertyAsRawString(placeholderName);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>7、<strong>进入<code>PropertyHelpe</code>r中的<code>replacePlaceholders</code>方法</strong>，实际上调用<code>org.springframework.util.PropertyPlaceholderHelper</code>这个类的<code>parseStringValue</code>解析占位符</p>
<ol>
<li>实际调用的是<strong>parseStringValue</strong>方法</li>
<li><strong>this.placeholderPrefix这个是占位符的前缀 ${,在创建PropertyHelper的时候就已经指定了占位符的placeholderPrefix=”${“ ,placeholderSuffix=”}”,valueSeparator=”:”</strong></li>
<li>使用parseStringValue方法递归解析占位符中的内容</li>
<li>在<code>parseStringValue</code>方法中使用两次递归<ol>
<li><code>placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</code>,这个是第一次，用来解析占位符中的placeholder是否还包含占位符，如果有占位符需要将其抽离出来，去掉<code>${}</code></li>
<li><code>propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</code> ，这个是第二次递归调用，用来解析<code>propVal</code>中的占位符</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replacePlaceholders</span><span class="params">(String value, PlaceholderResolver placeholderResolver)</span> </span>&#123;</div><div class="line">		Assert.notNull(value, <span class="string">"Argument 'value' must not be null."</span>);</div><div class="line">    	<span class="comment">//调用的是parseStringValue方法</span></div><div class="line">		<span class="keyword">return</span> parseStringValue(value, placeholderResolver, <span class="keyword">new</span> HashSet&lt;String&gt;());</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* strVal  ： 需要解析的字符串，就是配置文件的路径</div><div class="line">* placeholderResolver ： 策略接口，占位符解析器</div><div class="line">* visitedPlaceholders ： 存储已经访问过的占位符</div><div class="line">**/</div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">parseStringValue</span><span class="params">(</span></span></div><div class="line">			String strVal, PlaceholderResolver placeholderResolver, Set&lt;String&gt; visitedPlaceholders) &#123;</div><div class="line">		<span class="comment">//将strval转换成StringBuilder，便于后续到操作</span></div><div class="line">		StringBuilder buf = <span class="keyword">new</span> StringBuilder(strVal);</div><div class="line">	</div><div class="line">    <span class="comment">//this.placeholderPrefix这个是占位符的前缀 $&#123;,在创建PropertyHelper的时候就已经指定了占位符的placeholderPrefix="$&#123;" ,placeholderSuffix="&#125;",valueSeparator=":"</span></div><div class="line">	<span class="comment">//获取前缀在这个配置文件路径中的开始索引    </span></div><div class="line">		<span class="keyword">int</span> startIndex = strVal.indexOf(<span class="keyword">this</span>.placeholderPrefix);</div><div class="line">    </div><div class="line">		<span class="keyword">while</span> (startIndex != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//占位符前缀在路径中的结束索引</span></div><div class="line">			<span class="keyword">int</span> endIndex = findPlaceholderEndIndex(buf, startIndex);</div><div class="line">            </div><div class="line">            <span class="comment">//如果结束索引存在</span></div><div class="line">			<span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</div><div class="line">                </div><div class="line">                <span class="comment">//此时取出$&#123;plcaeholder&#125;中的占位符内容placeholder</span></div><div class="line">				String placeholder = buf.substring(startIndex + <span class="keyword">this</span>.placeholderPrefix.length(), endIndex);</div><div class="line">                </div><div class="line">                <span class="comment">//保存取出来的占位符内容placeholder</span></div><div class="line">				String originalPlaceholder = placeholder;</div><div class="line">                </div><div class="line">                <span class="comment">//如果占位符中的内容已经被访问过了，抛出出异常返回，递归结束的条件</span></div><div class="line">				<span class="keyword">if</span> (!visitedPlaceholders.add(originalPlaceholder)) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">							<span class="string">"Circular placeholder reference '"</span> + originalPlaceholder + <span class="string">"' in property definitions"</span>);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">                <span class="comment">//递归解析已经取出的占位符中的内容 palceholder</span></div><div class="line">				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</div><div class="line">                </div><div class="line">				</div><div class="line">                <span class="comment">//这个最重要的一步，将解析占位符内容placeholder的值，比如将java.version转换成1.8.0_60</span></div><div class="line">				String propVal = placeholderResolver.resolvePlaceholder(placeholder);</div><div class="line">                </div><div class="line">				<span class="keyword">if</span> (propVal == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.valueSeparator != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">int</span> separatorIndex = placeholder.indexOf(<span class="keyword">this</span>.valueSeparator);</div><div class="line">					<span class="keyword">if</span> (separatorIndex != -<span class="number">1</span>) &#123;</div><div class="line">						String actualPlaceholder = placeholder.substring(<span class="number">0</span>, separatorIndex);</div><div class="line">						String defaultValue = placeholder.substring(separatorIndex + <span class="keyword">this</span>.valueSeparator.length());</div><div class="line">						propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);</div><div class="line">						<span class="keyword">if</span> (propVal == <span class="keyword">null</span>) &#123;</div><div class="line">							propVal = defaultValue;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">                <span class="comment">//如果解析出来的占位符不为空，比如$&#123;java.version&#125;将被解析成 1.8.0_60</span></div><div class="line">				<span class="keyword">if</span> (propVal != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="comment">//此时继续递归解析出1.8.0_60中的占位符</span></div><div class="line">					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</div><div class="line">                    <span class="comment">//将路径中的占位符替换成系统变量的值，比如将$&#123;java.version&#125; 替换成 1.8.0_60</span></div><div class="line">					buf.replace(startIndex, endIndex + <span class="keyword">this</span>.placeholderSuffix.length(), propVal);</div><div class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">						logger.trace(<span class="string">"Resolved placeholder '"</span> + placeholder + <span class="string">"'"</span>);</div><div class="line">					&#125;</div><div class="line">                    <span class="comment">//继续在路径字符串中剩余的子串中查找占位符，如果有占位符，那么还会继续解析占位符</span></div><div class="line">					startIndex = buf.indexOf(<span class="keyword">this</span>.placeholderPrefix, startIndex + propVal.length());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.ignoreUnresolvablePlaceholders) &#123;</div><div class="line">					<span class="comment">// Proceed with unprocessed value.</span></div><div class="line">					startIndex = buf.indexOf(<span class="keyword">this</span>.placeholderPrefix, endIndex + <span class="keyword">this</span>.placeholderSuffix.length());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not resolve placeholder '"</span> +</div><div class="line">							placeholder + <span class="string">"'"</span> + <span class="string">" in string value \""</span> + strVal + <span class="string">"\""</span>);</div><div class="line">				&#125;</div><div class="line">                <span class="comment">//将已转换成功的占位符从以访问的集合中移除即可</span></div><div class="line">				visitedPlaceholders.remove(originalPlaceholder);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				startIndex = -<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> buf.toString();   <span class="comment">//将解析完成之后的配置文件返回</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>8、<strong>总之一句话 ： <code>setConfigLocations(configLocations);</code>的作用就是将客户端传入的配置文件路径，先解析占位符，之后将解析完成之后的配置文件路径存储起来</strong></p>
<p>9、<strong>现在进入ClassPathXmlApplicationContext中的<code>refresh</code>方法，实际上调用的是父类<code>org.springframework.context.support.AbstractApplicationContext</code>的方法，下面我们一个一个方法分析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//刷新spring上下文</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			<span class="comment">//在刷新之前设置一些参数，比如设置开始时间戳，上下文是否激活的标志，输出刷新上下文的信息，验证一些必要的属性</span></div><div class="line">			prepareRefresh();</div><div class="line"></div><div class="line">			<span class="comment">//需要创建beanFactory，如果已经存在beanFactory，那么关闭，详细其请看 10</span></div><div class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// 准备上下文工厂，详情见12</span></div><div class="line">			prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">//允许子类向后置处理器添加组件</span></div><div class="line">				postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 调用BeanFactoryPostProcessor和BeanDefintionRegistoryPostProcessor这两个后置处理器</span></div><div class="line">				invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 注册BeanPostProcessor,用来拦截bean的创建，详情见 14</span></div><div class="line">				registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">//初始化消息源</span></div><div class="line">				initMessageSource();</div><div class="line"></div><div class="line">				<span class="comment">// 初始化应用程序事件广播器，用户可以自定义一个事件广播器，如果用户没有定义，那么使用默认的事件广播器SimpleApplicationEventMulticaster</span></div><div class="line">				initApplicationEventMulticaster();</div><div class="line"></div><div class="line">				<span class="comment">// 在其他子类中初始化bean</span></div><div class="line">				onRefresh();</div><div class="line"></div><div class="line">				<span class="comment">// 检测事件监听器</span></div><div class="line">				registerListeners();</div><div class="line"></div><div class="line">				<span class="comment">//完成实例化剩余的单例(non-lazy-init)</span></div><div class="line">				finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// 完成刷新，初始化生命周期处理器......</span></div><div class="line">				finishRefresh();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">				destroyBeans();</div><div class="line"></div><div class="line">				<span class="comment">// Reset 'active' flag.</span></div><div class="line">				cancelRefresh(ex);</div><div class="line"></div><div class="line">				<span class="comment">// Propagate exception to caller.</span></div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>10、进入<code>obtainFreshBeanFactory</code> ，分析源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbastractApplicationContext的方法</span></div><div class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">//实际刷新上下文的方法，这个方法就是实际的刷新上下文方法，其中会调用loadBeanDefinitions(beanFactory);加载配置文件中的内容到BeanDefiniton中</span></div><div class="line">		refreshBeanFactory();</div><div class="line">		ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> beanFactory;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">//org.springframework.context.support.AbstractRefreshableApplicationContext中的方法</span></div><div class="line">	<span class="comment">//AbstractApplicationContext的子类中的方法</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="comment">//如果其中有beanfactory，那么销毁</span></div><div class="line">		<span class="keyword">if</span> (hasBeanFactory()) &#123;</div><div class="line">			destroyBeans();</div><div class="line">			closeBeanFactory();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//重新创建一个beanFactory</span></div><div class="line">			DefaultListableBeanFactory beanFactory = createBeanFactory();</div><div class="line">            <span class="comment">//设置序列化id</span></div><div class="line">			beanFactory.setSerializationId(getId());</div><div class="line">            </div><div class="line">            <span class="comment">//定制beanFactory，设置相关属性，包括是否允许覆盖名称的不同定义的对象及循环依赖以及</span></div><div class="line">			<span class="comment">//设置@Autowired和@Qualifier，注解解析器QualifierAnnotationAutowireCandidateResolver</span></div><div class="line">			customizeBeanFactory(beanFactory);</div><div class="line">            <span class="comment">//加载BeanDefine 详情见  11</span></div><div class="line">			loadBeanDefinitions(beanFactory);</div><div class="line">			<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</div><div class="line">				<span class="keyword">this</span>.beanFactory = beanFactory;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>11、 进入<code>loadBeanDefinitions(beanFactory);</code>方法</p>
<p>​    1、<strong>主要调用的是XmlBeanDefinitionReader其中的loadBeanDefinitions方法，详情请看我的spring之BeanDefinitonReader解析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个是org.springframework.context.support.AbstractXmlApplicationContext类中的方法</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</div><div class="line">       </div><div class="line">	<span class="comment">//创建要给beanDefinitionReader，用于读取BeanDefinition</span></div><div class="line">       <span class="comment">//详情见 BeanDefinitonReader的源码解析</span></div><div class="line">	XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</div><div class="line"></div><div class="line">	<span class="comment">//配置XmlBeanDefinitionReader</span></div><div class="line">	beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</div><div class="line">	beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);	</div><div class="line">	beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">	initBeanDefinitionReader(beanDefinitionReader);</div><div class="line">       <span class="comment">//加载BeanDefiniton，主要的功能从配置文件中读取BeanDefiniton注册到注册表中</span></div><div class="line">	loadBeanDefinitions(beanDefinitionReader);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>12、<strong>prepareBeanFactory ：准备BeanFactory，目前还不太明白，后续分析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//准备BeanFactory，设置一些参数，比如后置处理器，</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">//设置类加载器</span></div><div class="line">		beanFactory.setBeanClassLoader(getClassLoader());</div><div class="line">    	</div><div class="line">    <span class="comment">//设置表达式解析器，用来解析BeanDefiniton中的带有表达式的值</span></div><div class="line">		beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</div><div class="line">    	</div><div class="line">    </div><div class="line">		beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</div><div class="line"></div><div class="line">		<span class="comment">// 配置后置处理器，主要的作用就是在spring实例化bean的前后做一些操作</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div><div class="line">    	</div><div class="line">    	<span class="comment">//忽略自动装配的类，这些类都不能使用@Resource或者@Autowired自动装配获取对象</span></div><div class="line">		beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</div><div class="line"></div><div class="line">		<span class="comment">//注册可解析的自动装配类</span></div><div class="line">		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</div><div class="line">		beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">		<span class="comment">//在添加一个应用程序监听器</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">		<span class="comment">//检查这些类是否被</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line"></div><div class="line">			beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 将下面这些类注册到容器中，使用registerSingleton方法注册，我们可以直接从容器中获取这些类的对象使用</span></div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>13、调用BeanFactory的后置处理器，主要的功能就是调用注册在容器中的BeanFactoryPostProcessor和BeanDefinitionRegistoryPostProcessor</strong></p>
<p>​    1、<strong>BeanFactoryPostProcessor</strong>这个是后置处理器，实现这个类可以修改容器中bean的数据信息，可以在spring配置文件加载之后执行，在单例实例化之前调用，因此可以在其中修改和获取bean的实例化的信息，通过<strong>BeanDefintion</strong></p>
<p>​    2、先调用<strong>BeanDefinitionRegistryPostProcessor</strong>，按照优先级调用，比如分为实现PriorityOrdered这个接口和Orderd这个接口的，分开调用</p>
<p>​    3、再调用实现BeanFactoryPostProcessor这个接口的，也是按照优先级别调用，和上面的流程一样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化和调用BeanFactory后置处理器，必须在单例实例化之前调用</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">    	<span class="comment">//调用后置处理器注册委托类的方法调用，getBeanFactoryPostProcessors用于获取注册的全部的BeanFactoryPostProcessor</span></div><div class="line">		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">//实际的调用方法，PostProcessorRegistrationDelegate中的方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></div><div class="line">		Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">		</div><div class="line">    	<span class="comment">//如果beanFactory是BeanDefinitionRegistry的子类，BeanDefinitionRegistry使用来向注册表中注册Bean的元信息的(BeanDefintion)</span></div><div class="line">		<span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</div><div class="line">			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</div><div class="line">            </div><div class="line">            <span class="comment">//存放BeanFactoryPostProcessor</span></div><div class="line">			List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> LinkedList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">            </div><div class="line">            <span class="comment">//存放BeanDefinitionRegistryPostProcessor</span></div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; registryPostProcessors =</div><div class="line">					<span class="keyword">new</span> LinkedList&lt;BeanDefinitionRegistryPostProcessor&gt;();</div><div class="line">            </div><div class="line">			<span class="comment">//遍历。判断是否是BeanDefinitionRegistryPostProcessor实例</span></div><div class="line">			<span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</div><div class="line">				<span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</div><div class="line">					BeanDefinitionRegistryPostProcessor registryPostProcessor =</div><div class="line">							(BeanDefinitionRegistryPostProcessor) postProcessor;</div><div class="line">                    </div><div class="line">                    	<span class="comment">//调用BeanDefinitionRegistryPostProcessor</span></div><div class="line">					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);</div><div class="line">                    <span class="comment">//添加</span></div><div class="line">					registryPostProcessors.add(registryPostProcessor);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//表示这个是BeanFactoryPostProcessor实例，添加进集合</span></div><div class="line">					regularPostProcessors.add(postProcessor);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">//--- 根据类型类型获取beanFactory中注册的BeanDefinitionRegistryPostProcessor的bean的所有名称数组</span></div><div class="line">			String[] postProcessorNames =</div><div class="line">					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">			<span class="comment">// ---- 首先调用的是BeanDefinitionRegistryPostProcessor类型的后置处理器</span></div><div class="line">            </div><div class="line">            <span class="comment">//存放实现PriorityOrdered这个接口的BeanDefinitionRegistryPostProcessor</span></div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</div><div class="line">            </div><div class="line">            <span class="comment">//遍历，如果实现了PriorityOrdered这个接口就保存下来</span></div><div class="line">			<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">				<span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">					priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</div><div class="line">					processedBeans.add(ppName);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">            </div><div class="line">            <span class="comment">//按照优先级排序</span></div><div class="line">			OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">            <span class="comment">//添加进入集合</span></div><div class="line">			registryPostProcessors.addAll(priorityOrderedPostProcessors);</div><div class="line">            </div><div class="line">            <span class="comment">//首先调用实现PriorityOrdered这个接口的BeanDefinitionRegistryPostProcessor</span></div><div class="line">			invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);</div><div class="line"></div><div class="line">			<span class="comment">// ---- 下面是调用实现Orderd这个接口的BeanDefinitionRegistryPostProcessor</span></div><div class="line">			postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</div><div class="line">			<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">				<span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">					orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</div><div class="line">					processedBeans.add(ppName);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			OrderComparator.sort(orderedPostProcessors);</div><div class="line">			registryPostProcessors.addAll(orderedPostProcessors);</div><div class="line">			invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);</div><div class="line"></div><div class="line">            </div><div class="line">			<span class="comment">// ---- 最终调用剩余全部的BeanDefinitionRegistryPostProcessor</span></div><div class="line">            </div><div class="line">			<span class="keyword">boolean</span> reiterate = <span class="keyword">true</span>;</div><div class="line">			<span class="keyword">while</span> (reiterate) &#123;</div><div class="line">				reiterate = <span class="keyword">false</span>;</div><div class="line">				postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">				<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">					<span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</div><div class="line">						BeanDefinitionRegistryPostProcessor pp = beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class);</div><div class="line">						registryPostProcessors.add(pp);</div><div class="line">						processedBeans.add(ppName);</div><div class="line">						pp.postProcessBeanDefinitionRegistry(registry);</div><div class="line">						reiterate = <span class="keyword">true</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// 调用BeanFactoryPostProcessor接口中的方法，因为BeanDefitionRegistory继承了这个接口</span></div><div class="line">			invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);</div><div class="line">			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Invoke factory processors registered with the context instance.</span></div><div class="line">			invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//--- 下面是调用实现BeanFactoryPostProcessor接口的类，和上面的流程一样</span></div><div class="line">		String[] postProcessorNames =</div><div class="line">				beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">		List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</div><div class="line">				<span class="comment">// skip - already processed in first phase above</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></div><div class="line">		OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">		invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</div><div class="line"></div><div class="line">		<span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></div><div class="line">		List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</div><div class="line">			orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</div><div class="line">		&#125;</div><div class="line">		OrderComparator.sort(orderedPostProcessors);</div><div class="line">		invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></div><div class="line">		List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</div><div class="line">		&#125;</div><div class="line">		invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>14、注册BeanPostProcessor，用来拦截Bean的创建，这个接口可以实现在Bean初始化和初始化之后执行相关的操作，会有单独一篇解读</p>
<p>​    1、这个注册BeanPostProcessor思想和上面的调用BeanFactoryPostProcessor的思想一样，按照优先级注册，通过判断是否实现PriorityOrdered和orderd接口，按照优先级排序注册到BeanFactory中，其实注册的方法就是将这个后置处理器添加到beanFactory中的<code>List&lt;BeanPostProcessor&gt; beanPostProcessors = new ArrayList&lt;BeanPostProcessor&gt;()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//依然这里依然调用的PostProcessorRegistrationDelegate，其中包含了注册后置处理器和调用后置处理器的方法，相当于一个代理人</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">//PostProcessorRegistrationDelegate中的注册BeanPostProcessors的方法</span></div><div class="line"><span class="comment">//其中beanFactory这个新创建的beanFactory，其中的BeanPostProcessor都没有注册，applicationContext这个是之前创建的，其中的处理器已经注册过了</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</div><div class="line">		</div><div class="line">    	<span class="comment">//根据类型新加载全部的BeanFactoryProcessor的类，</span></div><div class="line">		String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">//创建BeanPostProcessor检测器</span></div><div class="line">		<span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">				priorityOrderedPostProcessors.add(pp);</div><div class="line">				<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">					internalPostProcessors.add(pp);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></div><div class="line">		OrderComparator.sort(priorityOrderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			orderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		OrderComparator.sort(orderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Now, register all regular BeanPostProcessors.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			nonOrderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></div><div class="line">		OrderComparator.sort(internalPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, internalPostProcessors);</div><div class="line"></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、入口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-test.xml"</span>);</div></pre></td></tr></table></figure>
<p>2、解析传入的路径中的占位符，集合<code>org.springframework.core.env.AbstractPropertyResolver</code>和<code>org.springframework.util.PropertyPlaceholderHelper</code></p>
<p>3、刷新上下文</p>
<p>​    1、<code>prepareRefresh()</code> : 准备刷新，设置一些活动标志，比如开始时间，当前的状态</p>
<p>​    2、<code>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()</code>：从spring的配置文件中加载bean，封装成BeanDefinition，注册到注册表中，创建beanFactory</p>
<p>​    3、<code>prepareBeanFactory(beanFactory);</code> ：准备BeanFactory，设置累加载器，添加后置处理器，SPL表达式解析器，向ioc容器中注入一些组件</p>
<p>​    4、<code>postProcessBeanFactory(beanFactory);</code> ： 允许子类做一些处理操作</p>
<p>​    5、<code>invokeBeanFactoryPostProcessors(beanFactory);</code>  ：调用BeanFactoryProcessor，先是调用BeanDefitionRegistoyPostProcessor,之后调用BeanFactoryProcessor</p>
<p>​    6、<code>registerBeanPostProcessors(beanFactory);</code> ： 将配置文件中读取的Bean的后置处理器注册到容器中</p>
<p>​    7、<code>initMessageSource();</code> ：初始化消息源，用于国际化</p>
<p>​    8、<code>initApplicationEventMulticaster()</code>  ： 初始化事件广播器，判断容器中是否已经注册了该组件，如果没有该组件，那么使用默认的</p>
<p>​    9、<code>onRefresh();</code> ：子类初始化一些特殊的bean</p>
<p>​    10、<code>registerListeners();</code> ：注册事件监听器</p>
<p>​    11、<code>finishBeanFactoryInitialization(beanFactory)</code> ：完成初始化，初始化非懒加载的bean</p>
<p>​    12、<code>finishRefresh();</code>  ：完成刷新，最后一步，初始化生命周期处理器，派发事件</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/turkeyzhou/article/category/365505/2" target="_blank" rel="external">https://blog.csdn.net/turkeyzhou/article/category/365505/2</a></li>
<li><a href="https://www.evget.com/article/2016/2/23/23576.html" target="_blank" rel="external">https://www.evget.com/article/2016/2/23/23576.html</a></li>
<li><a href="http://www.cnblogs.com/killbug/p/6087648.html" target="_blank" rel="external">http://www.cnblogs.com/killbug/p/6087648.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-Bean加载过程&quot;&gt;&lt;a href=&quot;#spring-Bean加载过程&quot; class=&quot;headerlink&quot; title=&quot;spring Bean加载过程&quot;&gt;&lt;/a&gt;spring Bean加载过程&lt;/h1&gt;&lt;p&gt;1、&lt;strong&gt;找准入口  ,使
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Data-Redis</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/Spring-Data-Redis/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/Spring-Data-Redis/</id>
    <published>2018-09-02T11:44:03.000Z</published>
    <updated>2018-09-02T11:44:34.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring-Data-Redis"></a>Spring-Data-Redis</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul>
<li>需要spring的版本为<code>4.xxx</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置RedisTemplate"><a href="#配置RedisTemplate" class="headerlink" title="配置RedisTemplate"></a>配置RedisTemplate</h2><ul>
<li>在<code>/src/main/resource</code>文件夹下新建一个<code>redis.properties</code>文件，其中设置redis的配置信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hostName=39.105.123.197  </div><div class="line">port=6379</div><div class="line">timeout=15000</div><div class="line">usePool=true</div><div class="line">maxIdle=80</div><div class="line">minIdle=80</div><div class="line">maxWaitMillis=500</div><div class="line">minEvictableIdleTimeMillis=300000</div><div class="line">numTestsPerEvictionRun=3</div><div class="line">timeBetweenEvictionRunsMillis=60000</div><div class="line">testOnBorrow=true</div><div class="line">testOnReturn=false</div><div class="line">testOnCreate=false</div></pre></td></tr></table></figure>
<ul>
<li>在<code>src/main/resource</code>文件夹下新建一个文件<code>spring-redis.xml</code><ul>
<li>创建连接池<code>JedisPoolConfig</code></li>
<li>创建连接工厂<code>JedisConnectionFactory</code></li>
<li>配置<code>RedisTemplate</code>，用于操作Redis数据库</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载redis.properties,其中定义了数据库的配置信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"redisConfig"</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置Redis的连接池 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置最大空闲连接数，当空闲连接超过该值时就挨个关闭多余的连接，但不能小于minldle --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置最小空闲连接数 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 验证连接是否有效 --&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置获取连接的时候测试连接是否可用，默认为false --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.testOnBorrow&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 新建连接的时候测试连接是否可用，默认为false --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnCreate"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.testOnCreate&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 将连接释放回连接池的时候测试连接 默认为false --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.testOnReturn&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 设置等待获取连接池连接的时间，一旦超过这个时间，抛出异常 单位毫秒 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.maxWaitMillis&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 连接空闲多久从池中去除，单位为毫秒 &lt;=0表示禁用 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.minEvictableIdleTimeMillis&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置每次测试多少空闲连接 &lt;=0表示禁用 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.numTestsPerEvictionRun&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置定时测试时间，单位毫秒 &lt;=0表示禁用 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.timeBetweenEvictionRunsMillis&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnFactory"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</div><div class="line">		<span class="comment">&lt;!-- 设置是否使用连接池，默认为true --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePool"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.usePool&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置连接池，使用上面配置好的连接池jedisPoolConfig --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置远程的IP地址 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.hostName&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置端口号，默认为6379 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 设置获取连接的超时时间 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"#&#123;redisConfig.timeout&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置 StringRedisSerializer序列化 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringRedisSerializer"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdkSerializationRedisSerializer"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span> /&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置RedisTemplate，其中封装了操作Redis的各种方法 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置Jedis的连接工厂，引用上面 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnFactory"</span> /&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 配置key的序列化 一般都会使用stringRedisSerializer，默认使用的是JdkSerializationRedisSerializer --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span> <span class="attr">ref</span>=<span class="string">"stringRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置JdkSerializationRedisSerializer序列化 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span> <span class="attr">ref</span>=<span class="string">"jdkSerializationRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置hashkey的序列化，就是field --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span> <span class="attr">ref</span>=<span class="string">"stringRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置hashvalue的值的序列化 --&gt;</span>		</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span> <span class="attr">ref</span>=<span class="string">"jdkSerializationRedisSerializer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 开始redis事务，使用mulit和exec即可实现事务的操作和回滚 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableTransactionSupport"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="序列化问题"><a href="#序列化问题" class="headerlink" title="序列化问题"></a>序列化问题</h2><ul>
<li>Spring Data Redis提供了对<code>Key-Value</code>的序列号，在使用<code>RedisTemplate</code>对象是默认使用<code>JdkSerializationRedisSerializer</code>实现。还提供了其它的序列化实现如：<code>Jackson2JsonRedisSerializer</code>，<code>JacksonJsonRedisSerializer</code>，<code>GenericToStringSerializer</code>，<code>StringRedisSerializer</code>，<code>OxmSerializer</code>。</li>
<li>各种序列化的方式有各种的优点，需要自己权衡使用</li>
<li>上面我们使用的是<code>JdkSerializationRedisSerializer</code>，但是我们的<code>key</code>使用的是<code>StringRedisSerializer</code></li>
<li><strong>实体类需要实现序列化接口</strong></li>
</ul>
<h2 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h2><ul>
<li>这个封装了redis中的所有命令，只需要我们调用即可</li>
<li><a href="https://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/RedisTemplate.html" target="_blank" rel="external">API文档</a></li>
</ul>
<h3 id="常用的类"><a href="#常用的类" class="headerlink" title="常用的类"></a>常用的类</h3><table>
<thead>
<tr>
<th>Key类型操作</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>ValueOperations</td>
<td>Redis String/Value 操作</td>
</tr>
<tr>
<td>ListOperations</td>
<td>Redis List 操作</td>
</tr>
<tr>
<td>SetOperations</td>
<td>Redis Set 操作</td>
</tr>
<tr>
<td>ZSetOperations</td>
<td>Redis Sort Set 操作</td>
</tr>
<tr>
<td>HashOperations</td>
<td>Redis Hash 操作</td>
</tr>
<tr>
<td>Value约束操作</td>
<td></td>
</tr>
<tr>
<td>BoundValueOperations</td>
<td>Redis String/Value key 约束</td>
</tr>
<tr>
<td>BoundListOperations</td>
<td>Redis List key 约束</td>
</tr>
<tr>
<td>BoundSetOperations</td>
<td>Redis Set key 约束</td>
</tr>
<tr>
<td>BoundZSetOperations</td>
<td>Redis Sort Set key 约束</td>
</tr>
<tr>
<td>BoundHashOperations</td>
<td>Redis Hash key 约束</td>
</tr>
</tbody>
</table>
<h2 id="spring中处理Redis的事务"><a href="#spring中处理Redis的事务" class="headerlink" title="spring中处理Redis的事务"></a>spring中处理Redis的事务</h2><p>1、spring的事务管理器一定要使用注解方式的，不能使用aop方式的</p>
<p>2、需要在spring-data-redis中开启redis事务，只需要添加如下一条语句即可</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 开始redis事务，使用mulit和exec即可实现事务的操作和回滚 --&gt;</div><div class="line">&lt;property name="enableTransactionSupport" value="true"&gt;&lt;/property&gt;</div></pre></td></tr></table></figure>
<p>3、在spring中使用<code>RedisTemplate.multi</code>和<code>exec</code>方法即可完成事务的控制</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">addUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		userMapper.insertSelective(user);</div><div class="line">		System.out.println(user.getId());</div><div class="line">		template.opsForValue().set(<span class="string">"user:"</span>+user.getId(), user);</div><div class="line">		System.out.println(<span class="number">10</span>/<span class="number">0</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>4、参考文章：<a href="https://blog.csdn.net/qq_34021712/article/details/75949756" target="_blank" rel="external">https://blog.csdn.net/qq_34021712/article/details/75949756</a></p>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul>
<li>通过项目中的使用，自己总结了redis的工具类，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.xmlbeans.impl.xb.xsdschema.Public;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations.TypedTuple;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sun.corba.se.impl.oa.poa.ActiveObjectMap.Key;</div><div class="line"><span class="keyword">import</span> com.techwells.teammission.domain.User;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * redis的工具类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span>  RedisTemplate&lt;String, Object&gt; template;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; <span class="title">getTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> template;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; template)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.template = template;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向redis中添加对象,string类型的对象</div><div class="line">	 * <span class="doctag">@param</span> object   需要存储的对象</div><div class="line">	 * <span class="doctag">@param</span> key  存储的键</div><div class="line">	 * <span class="doctag">@throws</span> Exception  出现异常信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">addStringObject</span><span class="params">(String key,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForValue().set(key,object);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加指定的key到Redis中</div><div class="line">	 * <span class="doctag">@param</span> key 指定的Ke</div><div class="line">	 * <span class="doctag">@param</span> object  数据</div><div class="line">	 * <span class="doctag">@param</span> timeout  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit    时间单位</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStringObject</span><span class="params">(String key,Object object,Long timeout,TimeUnit unit)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addStringObject(key, object);</div><div class="line">		template.expire(key, timeout, unit);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据键值从redis中获取对象 string类型的对象</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@return</span>   返回对象</div><div class="line">	 * <span class="doctag">@throws</span> Exception 抛出的异常</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span>  Object <span class="title">getStringObject</span><span class="params">(String key)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		Object object=template.opsForValue().get(key);</div><div class="line">		<span class="keyword">return</span> object;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key删除指定的值</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@throws</span> Exception 异常信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObject</span><span class="params">(String key)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.delete(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量删除对象</div><div class="line">	 * <span class="doctag">@param</span> keys key的集合</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObjectBatch</span><span class="params">(Collection&lt;String&gt; keys)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.delete(keys);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key更新值</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> object  value</div><div class="line">	 * <span class="doctag">@throws</span> Exception  异常信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyStringObject</span><span class="params">(String key,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addStringObject(key, object);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加数据在Hash中</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> field  指定的域</div><div class="line">	 * <span class="doctag">@param</span> object  数据</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHashObject</span><span class="params">(String key,String field,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().put(key, field, object);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向hash中添加数据，并且设置过期的时间</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> field  域</div><div class="line">	 * <span class="doctag">@param</span> object  数据</div><div class="line">	 * <span class="doctag">@param</span> timeout  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit    单位</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHashObject</span><span class="params">(String key,String field,Object object,Long timeout,TimeUnit unit)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addHashObject(key, field, object);</div><div class="line">		<span class="keyword">this</span>.setExpireTimeForKey(key, timeout, unit);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量添加数据到指定的hash中</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> map  需要添加的数据  Map&lt;field,value&gt;</div><div class="line">	 * <span class="doctag">@param</span> expireTime  过期时间，单位秒,如果为null，默认永远不过期</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHashObjectBatch</span><span class="params">(String key,Map&lt;Object, Object&gt; map,Long expireTime,TimeUnit unit)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().putAll(key,map);</div><div class="line">		<span class="keyword">if</span> (expireTime!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.setExpireTimeForKey(key, expireTime,unit);  <span class="comment">//设置过期时间</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 为指定的key设置过期时间</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> timeout  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit   指定时间的单位</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpireTimeForKey</span><span class="params">(String key,Long timeout,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.expire(key, timeout, unit);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除指定的key</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteKey</span><span class="params">(String key)</span></span>&#123;</div><div class="line">		template.delete(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key，field从hash中获取数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 * <span class="doctag">@return</span>  Object对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getHashObject</span><span class="params">(String key,String field)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForHash().get(key, field);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改指定key，field中的数据</div><div class="line">	 * <span class="doctag">@param</span> key  </div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 * <span class="doctag">@param</span> object</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyHashObject</span><span class="params">(String key,String field,Object object)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.addHashObject(key, field, object);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除指定的key和field中的数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> field</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHashObject</span><span class="params">(String key,String field)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">this</span>.deleteHashObjectBatch(key, <span class="keyword">new</span> Object[]&#123;field&#125;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key和fields批量获取其中的数据</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> fields  &#123;<span class="doctag">@link</span> Collection&lt;Object&gt; &#125;</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHashObjectBatch</span><span class="params">(String key,Collection&lt;Object&gt; fields)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().multiGet(key, fields);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量删除指定key和fields的数据</div><div class="line">	 * <span class="doctag">@param</span> key  key</div><div class="line">	 * <span class="doctag">@param</span> fields  需要删除的域</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHashObjectBatch</span><span class="params">(String key,Object[] fields)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForHash().delete(key,fields);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加数据到ZSet中</div><div class="line">	 * <span class="doctag">@param</span> key    指定的key</div><div class="line">	 * <span class="doctag">@param</span> value  指定的value</div><div class="line">	 * <span class="doctag">@param</span> score  指定的score</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addZSetObject</span><span class="params">(String key,String value,<span class="keyword">double</span> score)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		template.opsForZSet().add(key, value, score);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量添加数据到Zset中</div><div class="line">	 * <span class="doctag">@param</span> key  指定的key</div><div class="line">	 * <span class="doctag">@param</span> typedTuple  &#123;<span class="doctag">@link</span> TypedTuple&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addZSetObjectBatch</span><span class="params">(String key,Set&lt;TypedTuple&lt;Object&gt;&gt; typedTuple)</span></span>&#123;</div><div class="line">		template.opsForZSet().add(key, typedTuple);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key获取start--end之间的数据</div><div class="line">	 * <span class="doctag">@param</span> key  指定key</div><div class="line">	 * <span class="doctag">@param</span> start 开始索引，从0开始</div><div class="line">	 * <span class="doctag">@param</span> end  结束索引</div><div class="line">	 * <span class="doctag">@return</span>  &#123;<span class="doctag">@link</span> Set&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">getZSetObject</span><span class="params">(String key,Long start,Long end)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForZSet().range(key, start, end);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Score的范围获取数据</div><div class="line">	 * <span class="doctag">@param</span> key  指定的key值</div><div class="line">	 * <span class="doctag">@param</span> min  score的最小值</div><div class="line">	 * <span class="doctag">@param</span> max score的最大值</div><div class="line">	 * <span class="doctag">@return</span>  &#123;<span class="doctag">@link</span> Set&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">getZSetObjectRangeByScore</span><span class="params">(String key,Long min,Long max)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForZSet().rangeByScore(key, min, max);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据Score的范围获取数据,分页获取</div><div class="line">	 * <span class="doctag">@param</span> key  指定的key</div><div class="line">	 * <span class="doctag">@param</span> min  最小值</div><div class="line">	 * <span class="doctag">@param</span> max  最大值</div><div class="line">	 * <span class="doctag">@param</span> offset  偏移量</div><div class="line">	 * <span class="doctag">@param</span> count  数量</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">getZSetObjectRangeByScore</span><span class="params">(String key,Long min,Long max,Long offset,Long count)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForZSet().rangeByScore(key, min, max, offset, count);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向List中添加元素，从表头添加</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> value</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLeftListObject</span><span class="params">(String key,Object value)</span></span>&#123;</div><div class="line">		template.opsForList().leftPush(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向List中添加元素，从表尾添加</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> value</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRightListObject</span><span class="params">(String key,Object value)</span></span>&#123;</div><div class="line">		template.opsForList().rightPush(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 向List中添加元素，从表头添加</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> value</div><div class="line">	 * <span class="doctag">@param</span> timeOut  过期时间</div><div class="line">	 * <span class="doctag">@param</span> unit  单位</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLeftListObject</span><span class="params">(String key,Object value,Long timeOut,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.opsForList().leftPush(key, value);</div><div class="line">		<span class="keyword">this</span>.setExpireTimeForKey(key, timeOut, unit);   <span class="comment">//设置过期时间</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量从表头添加数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> timeout ： 过期时间  如果为null表示永久不过期</div><div class="line">	 * <span class="doctag">@param</span> timeUnit : 时间单位</div><div class="line">	 * <span class="doctag">@param</span> values  &#123;<span class="doctag">@link</span> Collection&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLeftListObjectBatch</span><span class="params">(String key,Collection&lt;Object&gt; values,Long timeout,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.opsForList().leftPushAll(key, values);</div><div class="line">		<span class="keyword">if</span> (timeout!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.setExpireTimeForKey(key, timeout, unit);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量从表尾添加数据</div><div class="line">	 * <span class="doctag">@param</span> key</div><div class="line">	 * <span class="doctag">@param</span> values &#123;<span class="doctag">@link</span> Collection&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRigthListObjectBatch</span><span class="params">(String key,Collection&lt;Object&gt; values,Long timeout,TimeUnit unit)</span></span>&#123;</div><div class="line">		template.opsForList().rightPushAll(key, values);</div><div class="line">		<span class="keyword">if</span> (timeout!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.setExpireTimeForKey(key, timeout, unit);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取指定范围内的数据</div><div class="line">	 * <span class="doctag">@param</span> key  </div><div class="line">	 * <span class="doctag">@param</span> i  开始的索引 从0开始</div><div class="line">	 * <span class="doctag">@param</span> j   结束的索引，-1 表示结尾</div><div class="line">	 * <span class="doctag">@return</span>   &#123;<span class="doctag">@link</span> List&lt;Object&gt;&#125;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getRangeListObject</span><span class="params">(String key,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> template.opsForList().range(key, i, j);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据实体类的key和指定的查询参数、方法名称获取指定的key</div><div class="line">	 * <span class="doctag">@param</span> domainKey  实体类指定的key</div><div class="line">	 * <span class="doctag">@param</span> params  参数 Map&lt;String,Object&gt;</div><div class="line">	 * <span class="doctag">@param</span> functionName : 方法的名称</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRedisKey</span><span class="params">(String domainKey,String functionName,PagingTool pagingTool)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		StringBuilder builder=<span class="keyword">new</span> StringBuilder();</div><div class="line">		Map&lt;String,Object&gt; params=pagingTool.getParams();</div><div class="line">		builder.append(domainKey+<span class="string">"_"</span>+functionName+<span class="string">"_"</span>+pagingTool.getStartNum()+<span class="string">"_"</span>+pagingTool.getPageSize()+<span class="string">"_"</span>);</div><div class="line">		<span class="keyword">for</span> (String key : params.keySet()) &#123;</div><div class="line">			builder.append(key+<span class="string">"="</span>+params.get(key)+<span class="string">"_"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> builder.toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将Collection&lt;?extend Object&gt;的集合转换成Collection&lt;Object&gt;</div><div class="line">	 * <span class="doctag">@param</span> list 需要转换的集合</div><div class="line">	 * <span class="doctag">@return</span>   Collection&lt;Object&gt;</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;Object&gt; <span class="title">convertToCollection</span><span class="params">(Collection&lt;? extends Object&gt; list)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		List&lt;Object&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;Object&gt;(list.size());</div><div class="line">		<span class="keyword">for</span> (Object object : list) &#123;</div><div class="line">			arrayList.add(object);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> arrayList;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 将指定的List集合中的元素逆向</div><div class="line">	 * <span class="doctag">@param</span> objects  List&lt;? extends Object&gt;</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List&lt;? extends Object&gt; objects)</span></span>&#123;</div><div class="line">		Collections.reverse(objects);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除所有的键值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delteAllKeys</span><span class="params">()</span></span>&#123;</div><div class="line">		Set&lt;String&gt; keys=template.keys(<span class="string">"*"</span>);  <span class="comment">//获取所有的key</span></div><div class="line">		template.delete(keys);   <span class="comment">//删除所有的键值</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li><a href="https://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/RedisTemplate.html" target="_blank" rel="external">RedisTemplate API</a></li>
<li><a href="https://www.cnblogs.com/EasonJim/p/7803067.html" target="_blank" rel="external">优质博文</a></li>
<li><a href="https://blog.csdn.net/u010690828/article/details/77141083" target="_blank" rel="external">https://blog.csdn.net/u010690828/article/details/77141083</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Data-Redis&quot;&gt;&lt;a href=&quot;#Spring-Data-Redis&quot; class=&quot;headerlink&quot; title=&quot;Spring-Data-Redis&quot;&gt;&lt;/a&gt;Spring-Data-Redis&lt;/h1&gt;&lt;h2 id=&quot;添加依赖&quot;
    
    </summary>
    
      <category term="Redis" scheme="http://chenjiabing666.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://chenjiabing666.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>spring-data-elasticsearch</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/spring-data-elasticsearch/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/spring-data-elasticsearch/</id>
    <published>2018-09-02T11:38:59.000Z</published>
    <updated>2018-09-02T11:39:23.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-data-elasticsearch"><a href="#spring-data-elasticsearch" class="headerlink" title="spring-data-elasticsearch"></a>spring-data-elasticsearch</h1><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-elasticsearch" target="_blank" rel="external">SpringBoot整合es文档</a></li>
</ul>
<h2 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h2><ul>
<li><code>@Document(indexName = &quot;es&quot;,type = &quot;user&quot;,shards = 5,replicas = 0)</code> ： 标注在实体类上，声明存储的索引和类型<ul>
<li><code>indexName</code>： 索引名称</li>
<li><code>type</code>：索引类型</li>
<li><code>shards</code>：分片的数量</li>
<li><code>replicas</code>：副本的数量</li>
<li><code>refreshInterval</code>： 刷新间隔</li>
<li><code>indexStoreType</code>：索引文件存储类型</li>
</ul>
</li>
</ul>
<h2 id="Field"><a href="#Field" class="headerlink" title="@Field"></a>@Field</h2><ul>
<li>标注在属性上，用来指定属性的类型。其中的属性如下：<ul>
<li><code>analyzer</code>：指定分词器，es中默认使用的标准分词器，比如我们需要指定中文IK分词器，可以指定值为<code>ik_max_word</code></li>
<li><code>type</code>： 指定该属性在es中的类型，其中的值是<code>FileType</code>类型的值，比如<code>FileType.Text</code>类型对应es中的text类型</li>
<li><code>index</code>：指定该词是否需要索引，默认为true</li>
<li><code>store</code>：指定该属性内容是否需要存储，默认为</li>
<li><code>fielddata</code> ：指定该属性能否进行排序，因为es中的text类型是不能进行排序（已经分词了）</li>
<li><code>searchAnalyzer</code> ： 指定搜索使用的分词器</li>
</ul>
</li>
<li><strong>在插入数据之前我们需要先运行程序添加<code>mapping</code>，对于没有指定<code>@Field</code>的属性此时是不会创建索引的，而是在插入数据的时候自动创建索引。但是对于@Field注解标注的属性如果没有先加载生成mapping，等到插入数据的时候是没有效果的</strong></li>
<li><strong>如果使用该注解，那么必须指定其中的<code>type</code>属性</strong></li>
</ul>
<h2 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h2><ul>
<li>主键注解，标识一个属性为主键</li>
</ul>
<h2 id="Date类型的存储"><a href="#Date类型的存储" class="headerlink" title="Date类型的存储"></a>Date类型的存储</h2><ul>
<li>es中默认存储Date类型的是一个时间戳，如果我们需要指定格式的存储，那么需要在<code>@Field</code>这个注解中指定日期的格式。如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Field</span>(type = FieldType.Date,format = DateFormat.custom, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line"><span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.STRING, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</div><div class="line"> <span class="keyword">private</span> Date birthday;</div></pre></td></tr></table></figure>
<h2 id="创建一个实体类"><a href="#创建一个实体类" class="headerlink" title="创建一个实体类"></a>创建一个实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Document</span> : 这个是ES的注解，在类使用，指定实体类的索引和类型。默认所有的属性都是索引的</div><div class="line"> *             1、indexName ：　指定索引</div><div class="line"> *             2、type：指定类型</div><div class="line"> *             3、shards：指定分片的数量</div><div class="line"> *             4、replicas：指定副本的数量</div><div class="line"> */</div><div class="line"><span class="meta">@Document</span>(indexName = <span class="string">"es"</span>,type = <span class="string">"user"</span>,shards = <span class="number">5</span>,replicas = <span class="number">0</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>   <span class="comment">//指定这个是主键</span></div><div class="line">    <span class="keyword">private</span> Integer userId;</div><div class="line"></div><div class="line">    <span class="meta">@Field</span>(type = FieldType.Text,analyzer = <span class="string">"ik_max_word"</span>,fielddata = <span class="keyword">true</span>,store = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@Field</span>(type = FieldType.Date, store = <span class="keyword">true</span>, format = DateFormat.custom, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line">    <span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.STRING, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</div><div class="line">    <span class="keyword">private</span> Date birthday;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Integer userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userId = userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthday;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birthday = birthday;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hobbies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hobbies = hobbies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</div><div class="line">                <span class="string">"userId="</span> + userId +</div><div class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", birthday="</span> + birthday +</div><div class="line">                <span class="string">", hobbies="</span> + hobbies +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定义查询接口"><a href="#定义查询接口" class="headerlink" title="定义查询接口"></a>定义查询接口</h2><ul>
<li>官网上提供了各种各样的方法，我们使用继承<code>ElasticsearchRepository</code>这个接口的方式拓展查询接口，基本的接口：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepo</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//不需要实现其中的方法，只需要继承即可，spring-data-es会为我们自动完成</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常用方法如下："><a href="#常用方法如下：" class="headerlink" title="常用方法如下："></a>常用方法如下：</h3><ol>
<li><code>index(T t)</code> ：添加数据</li>
<li><code>save(T t)</code>：添加数据</li>
<li><code>count()</code>： 获取数据总数</li>
<li><code>findAll()</code>：获取所有的数据，返回的是一个<code>java.lang.Iterable</code></li>
<li><code>Iterable&lt;T&gt; findAllById(Iterable&lt;ID&gt; ids)</code>：根据Id批量返回数据</li>
<li><code>saveAll(Iterable entity)</code> ：批量保存数据，可以传入List</li>
<li><code>delete(T t)</code> ： 删除指定的实体类，只需要指定实体类中的Id即可</li>
<li><code>deleteAll()</code>：删除所有的数据</li>
<li><code>deleteById(ID Id)</code>：根据Id删除数据</li>
<li><code>existsById(ID Id)</code>： 判断指定Id的数据是否存在</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//添加数据</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">        User user=<span class="keyword">new</span> User();</div><div class="line">        user.setUserId(<span class="number">1</span>);</div><div class="line">        user.setUserName(<span class="string">"郑元梅"</span>);</div><div class="line">        user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        user.setPassword(<span class="string">"12345678"</span>);</div><div class="line">        List&lt;String&gt; hobbies=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        hobbies.add(<span class="string">"篮球"</span>);</div><div class="line">        hobbies.add(<span class="string">"足球"</span>);</div><div class="line">        user.setHobbies(hobbies);</div><div class="line"><span class="comment">//        userRepo.save(user);   //调用其中的save方法保存信息</span></div><div class="line">        userRepo.index(user);  <span class="comment">//调用index方法添加数据</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//获取其中的所有数据</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</div><div class="line">        Iterable&lt;User&gt; iterable=userRepo.findAll();</div><div class="line">        Iterator&lt;User&gt; iterator=iterable.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</div><div class="line">            System.out.println(iterator.next());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;User&gt; users=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        User user=<span class="keyword">new</span> User();</div><div class="line">        user.setUserId(<span class="number">4</span>);</div><div class="line">        user.setUserName(<span class="string">"张三"</span>);</div><div class="line">        user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        user.setPassword(<span class="string">"12345678"</span>);</div><div class="line">        List&lt;String&gt; hobbies=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        hobbies.add(<span class="string">"台球"</span>);</div><div class="line">        hobbies.add(<span class="string">"足球"</span>);</div><div class="line">        user.setHobbies(hobbies);</div><div class="line"></div><div class="line">        User user1=<span class="keyword">new</span> User();</div><div class="line">        user1.setUserId(<span class="number">5</span>);</div><div class="line">        user1.setUserName(<span class="string">"郑元梅"</span>);</div><div class="line">        user1.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        user1.setPassword(<span class="string">"12345678"</span>);</div><div class="line">        user1.setHobbies(hobbies);</div><div class="line"></div><div class="line">        users.add(user);</div><div class="line">        users.add(user1);</div><div class="line">        userRepo.saveAll(users);  <span class="comment">//保存List中的所有数据</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除指定的数据</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</div><div class="line">        User user=<span class="keyword">new</span> User();</div><div class="line">        user.setUserId(<span class="number">5</span>);</div><div class="line">        userRepo.delete(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;User&gt; users=userRepo.selectAll();</div><div class="line">        <span class="keyword">for</span> (User user</div><div class="line">             :users</div><div class="line">             ) &#123;</div><div class="line">            System.out.println(user);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h3><ul>
<li>spring-data-elasticsearch为我们自动完成了许多的查询，我们只需要按照其中的规范使用即可。<ul>
<li>查询方法定义以<code>get</code>或者<code>find</code>开头即可</li>
</ul>
</li>
<li>关于es中各种查询，我们可以参照下表进行定义，<strong><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#elasticsearch.query-methods.criterions" target="_blank" rel="external">文档</a></strong></li>
</ul>
<table>
<thead>
<tr>
<th><code>And</code></th>
<th><code>findByNameAndPrice</code></th>
<th><code>{&quot;bool&quot; : {&quot;must&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Or</code></td>
<td><code>findByNameOrPrice</code></td>
<td><code>{&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td>
</tr>
<tr>
<td><code>Is</code></td>
<td><code>findByName</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td>
</tr>
<tr>
<td><code>Not</code></td>
<td><code>findByNameNot</code></td>
<td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td>
</tr>
<tr>
<td><code>Between</code></td>
<td><code>findByPriceBetween</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>LessThanEqual</code></td>
<td><code>findByPriceLessThan</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>GreaterThanEqual</code>（&gt;=）</td>
<td><code>findByPriceGreaterThan</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Before</code>（&lt;=）</td>
<td><code>findByPriceBefore</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>After</code></td>
<td><code>findByPriceAfter</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Like</code>（<code>?%</code>）（如果需要实现<code>%?%</code>可以使用fuzzy）</td>
<td><code>findByNameLike</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>StartingWith</code></td>
<td><code>findByNameStartingWith</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>EndingWith</code></td>
<td><code>findByNameEndingWith</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>Contains/Containing</code></td>
<td><code>findByNameContaining</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td>
</tr>
<tr>
<td><code>In</code></td>
<td><code>findByNameIn(Collection&lt;String&gt;names)</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}} ]}}}}</code></td>
</tr>
<tr>
<td><code>NotIn</code></td>
<td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td>
<td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;bool&quot; : {&quot;should&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}}}</code></td>
</tr>
<tr>
<td><code>Near</code></td>
<td><code>findByStoreNear</code></td>
<td><code>Not Supported Yet !</code></td>
</tr>
<tr>
<td><code>True</code></td>
<td><code>findByAvailableTrue</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td>
</tr>
<tr>
<td><code>False</code></td>
<td><code>findByAvailableFalse</code></td>
<td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : false}}}}</code></td>
</tr>
<tr>
<td><code>OrderBy</code></td>
<td><code>findByAvailableTrueOrderByNameDesc</code></td>
<td><code>{&quot;sort&quot; : [{ &quot;name&quot; : {&quot;order&quot; : &quot;desc&quot;} }],&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td>
</tr>
</tbody>
</table>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.techwells.es;</div><div class="line"><span class="keyword">import</span> com.techwells.beans.User;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</div><div class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</div><div class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</div><div class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Query;</div><div class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepo</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据userId获取用户信息</div><div class="line">     * <span class="doctag">@param</span> userId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">User <span class="title">findUserByUserId</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户查找用户信息</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名和密码查找用户信息，使用的是must查询</div><div class="line">     * 参数的顺序不能颠倒</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> password</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameAndPassword</span><span class="params">(String userName,String password)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名或者地址进行查询，满足其一即可，使用的是should</div><div class="line">     * 参数不能颠倒</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> address</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrAddress</span><span class="params">(String userName,String address)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用<span class="doctag">@Query</span>注解自定义查询语句，其中的?是占位符，0表示第一个参数</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must\": [\n"</span> +</div><div class="line">            <span class="string">"        &#123;\n"</span> +</div><div class="line">            <span class="string">"          \"match\": &#123;\n"</span> +</div><div class="line">            <span class="string">"            \"userName\": \"?0\"\n"</span> +</div><div class="line">            <span class="string">"          &#125;\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      ]\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">selectByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码不为null的用户信息</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must\":&#123;\n"</span> +</div><div class="line">            <span class="string">"        \"exists\":&#123;\n"</span> +</div><div class="line">            <span class="string">"          \"field\":\"password\"\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      &#125;\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordIsNotNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码为null的用户信息</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must_not\":&#123;\n"</span> +</div><div class="line">            <span class="string">"        \"exists\":&#123;\n"</span> +</div><div class="line">            <span class="string">"          \"field\":\"password\"\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      &#125;\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordIsNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码不是password的用户信息，使用的must_not</div><div class="line">     * <span class="doctag">@param</span> password</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordNot</span><span class="params">(String password)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询用户名是userName但是密码表示password的信息，必须同时满足</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> password</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameAndPasswordNot</span><span class="params">(String userName,String password)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询年龄在from-to之间的用户，包含form和to，使用的是range查询</div><div class="line">     * <span class="doctag">@param</span> from  起始</div><div class="line">     * <span class="doctag">@param</span> to    截止</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeBetween</span><span class="params">(Integer from,Integer to)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询年龄小于age的用户信息</div><div class="line">     * <span class="doctag">@param</span> age  年龄</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeLessThan</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄小于等于age的用户信息</div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeLessThanEqual</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄大于age的用户</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeGreaterThan</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄大于等于age的用户</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeGreaterThanEqual</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄小于等于age的用户信息</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeBefore</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 年龄大于等于age的用户</div><div class="line">     * <span class="doctag">@param</span> age</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeAfter</span><span class="params">(Integer age)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模糊查找，密码中以pwd开头用户信息，`content%`，</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordLike</span><span class="params">(String content)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码中包含content的用户信息  %content%</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordContaining</span><span class="params">(String content)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码以pwd开头的用户信息，和Like一样的效果</div><div class="line">     * <span class="doctag">@param</span> pwd</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordStartingWith</span><span class="params">(String pwd)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询密码以pwd结尾的用户信息</div><div class="line">     * <span class="doctag">@param</span> pwd</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByPasswordEndingWith</span><span class="params">(String pwd)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查找年龄在集合中的用户信息</div><div class="line">     * <span class="doctag">@param</span> ages</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeIn</span><span class="params">(List&lt;Integer&gt; ages)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查找年龄不在集合中的用户信息</div><div class="line">     * <span class="doctag">@param</span> ages</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeNotIn</span><span class="params">(List&lt;Integer&gt; ages)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名查询并且按照年龄降序排列</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrderByAgeDesc</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名查询并且按照年龄降序排列、用户名升序排列</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrderByAgeDescUserNameAsc</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据出生日期进行降序排列</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findByUserNameOrderByBirthdayDesc</span><span class="params">(String userName)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回前2条数据</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findTop2ByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据用户名分页查询</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@param</span> pageable</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Page&lt;User&gt; <span class="title">findByUserName</span><span class="params">(String userName, Pageable pageable)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-Query定义自己的es语句"><a href="#使用-Query定义自己的es语句" class="headerlink" title="使用@Query定义自己的es语句"></a>使用@Query定义自己的es语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 使用<span class="doctag">@Query</span>注解自定义查询语句，其中的?是占位符，0表示第一个参数</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"bool\": &#123;\n"</span> +</div><div class="line">            <span class="string">"      \"must\": [\n"</span> +</div><div class="line">            <span class="string">"        &#123;\n"</span> +</div><div class="line">            <span class="string">"          \"match\": &#123;\n"</span> +</div><div class="line">            <span class="string">"            \"userName\": \"?0\"\n"</span> +</div><div class="line">            <span class="string">"          &#125;\n"</span> +</div><div class="line">            <span class="string">"        &#125;\n"</span> +</div><div class="line">            <span class="string">"      ]\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"  &#125;"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">selectByUserName</span><span class="params">(String userName)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="控制结果集数量"><a href="#控制结果集数量" class="headerlink" title="控制结果集数量"></a>控制结果集数量</h2><ul>
<li><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#repositories.limit-query-result" target="_blank" rel="external">https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#repositories.limit-query-result</a></li>
<li>使用<code>Top</code>或者<code>First</code>控制返回的数量，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 返回前2条数据</div><div class="line">     * <span class="doctag">@param</span> userName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findTop2ByUserName</span><span class="params">(String userName)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ul>
<li><a href="https://www.tianmaying.com/tutorial/spring-jpa-page-sort" target="_blank" rel="external">https://www.tianmaying.com/tutorial/spring-jpa-page-sort</a></li>
<li>直接使用<code>org.springframework.data.domain.Pageable</code>进行分页排序即可<ul>
<li><code>page</code>：从０开始，第几页，默认为0</li>
<li><code>size</code>：每页显示的数量</li>
<li><code>sort</code>：排序的方向</li>
</ul>
</li>
<li>其中的方法如下：<ul>
<li><code>getTotalElements()</code>：返回数据的总数，不是分页的总数，而是根据条件查询到的全部的数据的总数</li>
<li><code>getContent()</code>：获取分页的数据集合<code>List&lt;T&gt;</code></li>
<li><code>getTotalPages()</code>：获取总共几页的数据</li>
<li><code>iterator()</code>：获取迭代器</li>
<li>剩余的方法如下：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Slice</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Streamable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前是第几页</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回每页显示的数量</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前页获取到的元素数量</span></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getNumberOfElements</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前页元素的集合</span></div><div class="line">	<span class="function">List&lt;T&gt; <span class="title">getContent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断当前页是否存在数据</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasContent</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//获取排序的Sort</span></div><div class="line">	<span class="function">Sort <span class="title">getSort</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断当前页是否是第一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断当前页是否是最后一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断是否还有下一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//判断是否有前一页</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回当前页的pageable</span></div><div class="line">	<span class="function"><span class="keyword">default</span> Pageable <span class="title">getPageable</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> PageRequest.of(getNumber(), getSize(), getSort());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//返回下一页的Pageable</span></div><div class="line">	<span class="function">Pageable <span class="title">nextPageable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">//返回前一页的pageable</span></div><div class="line">	<span class="function">Pageable <span class="title">previousPageable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    </div><div class="line">	&lt;U&gt; <span class="function">Slice&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; converter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单条件分页排序"><a href="#单条件分页排序" class="headerlink" title="单条件分页排序"></a>单条件分页排序</h3><ul>
<li>只使用了一个字段进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">       Sort sort=<span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">"age"</span>);</div><div class="line">       Pageable pageable=<span class="keyword">new</span> PageRequest(<span class="number">9</span>,<span class="number">1</span>,sort);</div><div class="line">       Page&lt;User&gt; users=userRepo.findByUserName(<span class="string">"李"</span>,pageable);</div><div class="line">       System.out.println(users.getTotalPages());</div><div class="line">       <span class="keyword">for</span> (User user:users.getContent()) &#123;</div><div class="line">           System.out.println(user);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="多条件分页排序"><a href="#多条件分页排序" class="headerlink" title="多条件分页排序"></a>多条件分页排序</h3><ul>
<li>使用<code>Order</code>进行排序条件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">      List&lt;Sort.Order&gt; orders=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      orders.add(<span class="keyword">new</span> Sort.Order(Sort.Direction.DESC,<span class="string">"age"</span>));<span class="comment">//按照年龄降序排列</span></div><div class="line">      orders.add(<span class="keyword">new</span> Sort.Order(Sort.Direction.ASC,<span class="string">"userId"</span>));  <span class="comment">//按照用户Id升序排列</span></div><div class="line">      Sort sort=<span class="keyword">new</span> Sort(orders);  <span class="comment">//使用orders</span></div><div class="line"></div><div class="line">      Pageable pageable=<span class="keyword">new</span> PageRequest(<span class="number">0</span>,<span class="number">10</span>,sort);</div><div class="line">      Page&lt;User&gt; users=userRepo.findByUserName(<span class="string">"李"</span>,pageable);</div><div class="line">      System.out.println(users.getTotalPages());</div><div class="line">      <span class="keyword">for</span> (User user:users.getContent()) &#123;</div><div class="line">          System.out.println(user);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="日期格式问题"><a href="#日期格式问题" class="headerlink" title="日期格式问题"></a>日期格式问题</h2><ul>
<li>未完</li>
</ul>
<h2 id="使用ElasticsearchTemplate"><a href="#使用ElasticsearchTemplate" class="headerlink" title="使用ElasticsearchTemplate"></a>使用ElasticsearchTemplate</h2><ul>
<li>未完 ………..待续…………………</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://blog.csdn.net/lijingyao8206/article/details/78614536" target="_blank" rel="external">https://blog.csdn.net/lijingyao8206/article/details/78614536</a></li>
<li><a href="https://www.jianshu.com/p/27e1d583aafb" target="_blank" rel="external">https://www.jianshu.com/p/27e1d583aafb</a></li>
<li><a href="https://blog.csdn.net/a772304419/article/details/79200141" target="_blank" rel="external">https://blog.csdn.net/a772304419/article/details/79200141</a></li>
<li><a href="https://www.cnblogs.com/liqipeng/p/7657854.html" target="_blank" rel="external">https://www.cnblogs.com/liqipeng/p/7657854.html</a></li>
<li><a href="https://my.oschina.net/kipeng/blog/1799827" target="_blank" rel="external">https://my.oschina.net/kipeng/blog/1799827</a></li>
<li><a href="https://blog.csdn.net/sofighter/article/details/77840094" target="_blank" rel="external">https://blog.csdn.net/sofighter/article/details/77840094</a></li>
<li><a href="https://es.yemengying.com/4/4.1.html" target="_blank" rel="external">https://es.yemengying.com/4/4.1.html</a></li>
<li><a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.0.9.RELEASE/api/" target="_blank" rel="external">sptring-data-es的API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-data-elasticsearch&quot;&gt;&lt;a href=&quot;#spring-data-elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;spring-data-elasticsearch&quot;&gt;&lt;/a&gt;spring-data
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es集群管理</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es集群管理/</id>
    <published>2018-09-02T11:38:16.000Z</published>
    <updated>2018-09-02T11:38:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h1><ul>
<li><a href="https://www.cnblogs.com/aubin/p/8012840.html" target="_blank" rel="external">https://www.cnblogs.com/aubin/p/8012840.html</a></li>
</ul>
<h3 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h3><blockquote>
<p>代表一个集群，集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看es集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。</p>
</blockquote>
<h3 id="shards"><a href="#shards" class="headerlink" title="shards"></a>shards</h3><blockquote>
<p>代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。</p>
</blockquote>
<h3 id="replicas"><a href="#replicas" class="headerlink" title="replicas"></a>replicas</h3><blockquote>
<p>代表索引副本，es可以设置多个索引的副本，副本的作用一是提高系统的容错性，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高es的查询效率，es会自动对搜索请求进行负载均衡。</p>
</blockquote>
<h3 id="recovery"><a href="#recovery" class="headerlink" title="recovery"></a>recovery</h3><blockquote>
<p>代表数据恢复或叫数据重新分布，es在有节点加入或退出时会根据机器的负载对索引分片进行重新分配，挂掉的节点重新启动时也会进行数据恢复。</p>
</blockquote>
<h3 id="river"><a href="#river" class="headerlink" title="river"></a>river</h3><blockquote>
<p>代表es的一个数据源，也是其它存储方式（如：数据库）同步数据到es的一个方法。它是以插件方式存在的一个es服务，通过读取river中的数据并把它索引到es中，官方的river有couchDB的，RabbitMQ的，Twitter的，Wikipedia的。</p>
</blockquote>
<h3 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h3><blockquote>
<p>代表es索引快照的存储方式，es默认是先把索引存放到内存中，当内存满了时再持久化到本地硬盘。gateway对索引快照进行存储，当这个es集群关闭再重新启动时就会从gateway中读取索引备份数据。es支持多种类型的gateway，有本地文件系统（默认），分布式文件系统，Hadoop的HDFS和amazon的s3云存储服务。</p>
</blockquote>
<h3 id="discovery-zen"><a href="#discovery-zen" class="headerlink" title="discovery.zen"></a>discovery.zen</h3><blockquote>
<p>代表es的自动发现节点机制，es是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点的交互。</p>
</blockquote>
<h3 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h3><blockquote>
<p>代表es内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、thrift、servlet、memcached、zeroMQ等的传输协议（通过插件方式集成）。</p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>同一个索引的分片和副本不能存在同一台机器上，因为在一台机器上没有意义，因此你如果使用的是单机版的话，不必指定副本的个数，即使指定了，那么es也不会将其存放在一台机器上的</li>
</ol>
<h2 id="监控集群健康状况"><a href="#监控集群健康状况" class="headerlink" title="监控集群健康状况"></a>监控集群健康状况</h2><ul>
<li><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cluster_health.html#_cluster_health" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cluster_health.html#_cluster_health</a></p>
</li>
<li><p><strong>API：<code>GET _cluster/health</code>。返回的结果如下：</strong></p>
<ul>
<li><code>number_of_nodes</code> 和 <code>number_of_data_nodes</code> 这个命名完全是自描述的。</li>
<li><code>active_primary_shards</code> 指出你集群中的主分片数量。这是涵盖了所有索引的汇总值。</li>
<li><code>active_shards</code> 是涵盖了所有索引的<em>所有</em>分片的汇总值，即包括副本分片。</li>
<li><code>relocating_shards</code> 显示当前正在从一个节点迁往其他节点的分片的数量。通常来说应该是 0，不过在 Elasticsearch 发现集群不太均衡时，该值会上涨。比如说：添加了一个新节点，或者下线了一个节点。</li>
<li><code>initializing_shards</code> 是刚刚创建的分片的个数。比如，当你刚创建第一个索引，分片都会短暂的处于 <code>initializing</code> 状态。这通常会是一个临时事件，分片不应该长期停留在 <code>initializing</code> 状态。你还可能在节点刚重启的时候看到 <code>initializing</code> 分片：当分片从磁盘上加载后，它们会从 <code>initializing</code> 状态开始。</li>
<li><code>unassigned_shards</code> 是已经在集群状态中存在的分片，但是实际在集群里又找不着。通常未分配分片的来源是未分配的副本。比如，一个有 5 分片和 1 副本的索引，在单节点集群上，就会有 5 个未分配副本分片。如果你的集群是 <code>red</code> 状态，也会长期保有未分配分片（因为缺少主分片）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="string">"cluster_name"</span>: <span class="string">"elasticsearch_zach"</span>,     <span class="comment">//集群名称</span></div><div class="line">   <span class="string">"status"</span>: <span class="string">"green"</span>,    <span class="comment">//集群的状态名称</span></div><div class="line">   <span class="string">"timed_out"</span>: <span class="keyword">false</span>,     </div><div class="line">   <span class="string">"number_of_nodes"</span>: <span class="number">1</span>,    <span class="comment">//节点的个数</span></div><div class="line">   <span class="string">"number_of_data_nodes"</span>: <span class="number">1</span>,    </div><div class="line">   <span class="string">"active_primary_shards"</span>: <span class="number">10</span>,    <span class="comment">//主分片的个数</span></div><div class="line">   <span class="string">"active_shards"</span>: <span class="number">10</span>,     <span class="comment">//涵盖了所有索引的_所有_分片的汇总值，即包括副本分片。</span></div><div class="line">   <span class="string">"relocating_shards"</span>: <span class="number">0</span>,    <span class="comment">//分片的个数</span></div><div class="line">   <span class="string">"initializing_shards"</span>: <span class="number">0</span>,   </div><div class="line">   <span class="string">"unassigned_shards"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其中的status状态如下：<ul>
<li><code>green</code>：所有的主分片和副本分片都已分配。你的集群是 100% 可用的。</li>
<li><code>yellow</code>：所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果 <em>更多的</em> 分片消失，你就会丢数据了。把 <code>yellow</code> 想象成一个需要及时调查的警告。</li>
<li><code>red</code>：至少一个主分片（以及它的全部副本）都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</li>
</ul>
</li>
<li><strong>使用<code>GET _cluster/health?level=indices</code>能够获取更加详细的信息</strong></li>
<li><strong><code>GET _cluster/health?level=shards</code>：</strong><ul>
<li><code>shards</code> 选项会提供一个详细得多的输出，列出每个索引里每个分片的状态和位置。这个输出有时候很有用，但是由于太过详细会比较难用。如果你知道哪个索引有问题了，本章讨论的其他 API 显得更加有用一点。</li>
</ul>
</li>
</ul>
<h2 id="监控单个节点"><a href="#监控单个节点" class="headerlink" title="监控单个节点"></a>监控单个节点</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_monitoring_individual_nodes.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_monitoring_individual_nodes.html</a></li>
</ul>
<h2 id="索引统计"><a href="#索引统计" class="headerlink" title="索引统计"></a>索引统计</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_index_stats.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_index_stats.html</a></li>
</ul>
<h2 id="cat-API"><a href="#cat-API" class="headerlink" title="cat API"></a>cat API</h2><ul>
<li>[<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cat_api.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cat_api.html</a>]</li>
</ul>
<h2 id="重要配置的修改"><a href="#重要配置的修改" class="headerlink" title="重要配置的修改"></a>重要配置的修改</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/important-configuration-changes.html</a></li>
<li><a href="http://www.cnblogs.com/ljhdo/p/4959412.html" target="_blank" rel="external">http://www.cnblogs.com/ljhdo/p/4959412.html</a></li>
<li><a href="http://lxw1234.com/archives/2015/12/582.htm" target="_blank" rel="external">http://lxw1234.com/archives/2015/12/582.htm</a></li>
<li><a href="https://blog.csdn.net/an74520/article/details/8219814" target="_blank" rel="external">https://blog.csdn.net/an74520/article/details/8219814</a></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.cnblogs.com/ljhdo/p/4959412.html" target="_blank" rel="external">http://www.cnblogs.com/ljhdo/p/4959412.html</a></li>
<li><a href="http://lxw1234.com/archives/2015/12/582.htm" target="_blank" rel="external">http://lxw1234.com/archives/2015/12/582.htm</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集群管理&quot;&gt;&lt;a href=&quot;#集群管理&quot; class=&quot;headerlink&quot; title=&quot;集群管理&quot;&gt;&lt;/a&gt;集群管理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/aubin/p/8012840.html&quot; t
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>中文分词器的使用</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/中文分词器的使用/</id>
    <published>2018-09-02T11:37:15.000Z</published>
    <updated>2018-09-02T11:37:40.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中文分词器的使用"><a href="#中文分词器的使用" class="headerlink" title="中文分词器的使用"></a>中文分词器的使用</h1><ul>
<li><code>ik_max_word</code>：会将文本做最细粒度的拆分</li>
<li><code>ik_smart</code>：做最粗粒度的拆分</li>
</ul>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul>
<li>自动映射默认使用的标准的分词器，如果想要使用IK中文分词器，那么需要手动创建映射，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">PUT /lib </div><div class="line">&#123;</div><div class="line">    <span class="string">"mappings"</span> : &#123;</div><div class="line">        <span class="string">"user"</span> : &#123;</div><div class="line">            <span class="string">"properties"</span> : &#123;</div><div class="line">                <span class="string">"userId"</span> : &#123;</div><div class="line">                    <span class="string">"type"</span> : <span class="string">"integer"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"date"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"date"</span>,</div><div class="line">                  <span class="string">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"age"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"integer"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"name"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"text"</span>, </div><div class="line">                   <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>   <span class="comment">//使用IK分词器</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"address"</span>:&#123;</div><div class="line">                  <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">                  <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>   <span class="comment">//使用IK分词器</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>添加数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">PUT /lib/user/<span class="number">1</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>:<span class="string">"陈加兵"</span>,</div><div class="line">  <span class="string">"age"</span>:<span class="number">22</span>,</div><div class="line">  <span class="string">"date"</span>:<span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">  <span class="string">"address"</span>:<span class="string">"上海市松江区"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">PUT /lib/user/<span class="number">2</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>:<span class="string">"郑元梅"</span>,</div><div class="line">  <span class="string">"age"</span>:<span class="number">22</span>,</div><div class="line">  <span class="string">"date"</span>:<span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">  <span class="string">"address"</span>:<span class="string">"湖北武汉"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">PUT /lib/user/<span class="number">3</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>:<span class="string">"张三"</span>,</div><div class="line">  <span class="string">"age"</span>:<span class="number">22</span>,</div><div class="line">  <span class="string">"date"</span>:<span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">  <span class="string">"address"</span>:<span class="string">"江苏省淮安市"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们可以查看address这个字段使用中文分词器的效果，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">GET lib/_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"field"</span>: <span class="string">"address"</span>,</div><div class="line">  <span class="string">"text"</span>: <span class="string">"江苏省淮安市"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//分词结果如下：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"tokens"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"江苏省"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"江苏"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">2</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"省"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">2</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"淮安市"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">6</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"淮安"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">3</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_WORD"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">4</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"市"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">6</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"CN_CHAR"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过上面的分词，我们可以进行查询了，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"江苏"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"淮安"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"淮安"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;中文分词器的使用&quot;&gt;&lt;a href=&quot;#中文分词器的使用&quot; class=&quot;headerlink&quot; title=&quot;中文分词器的使用&quot;&gt;&lt;/a&gt;中文分词器的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ik_max_word&lt;/code&gt;：会将文本做最细粒度的拆分&lt;/l
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es各种查询</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E5%90%84%E7%A7%8D%E6%9F%A5%E8%AF%A2/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es各种查询/</id>
    <published>2018-09-02T11:36:38.000Z</published>
    <updated>2018-09-02T11:36:55.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="请求体查询"><a href="#请求体查询" class="headerlink" title="请求体查询"></a>请求体查询</h1><h2 id="简单查询-【不推荐】"><a href="#简单查询-【不推荐】" class="headerlink" title="简单查询 【不推荐】"></a>简单查询 【不推荐】</h2><h2 id="空查询"><a href="#空查询" class="headerlink" title="空查询"></a>空查询</h2><p>1、<code>GET /lib/user/_search</code>  ： 查询lib索引下的user类型的全部数据</p>
<p>2、<code>GET /lib/_search</code> ：查询lib索引下的全部类型的数据</p>
<p>3、<code>GET /_search</code> ：查询全部索引下的数据</p>
<h2 id="精确值查找"><a href="#精确值查找" class="headerlink" title="精确值查找"></a>精确值查找</h2><ul>
<li>当进行精确值查找时， 我们会使用<strong>过滤器（filters）</strong>。过滤器很重要，因为它们<strong>执行速度非常快</strong>，不会计算相关度（直接跳过了整个评分阶段）而且很容易被缓存。我们会在本章后面的 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/filter-caching.html" target="_blank" rel="external">过滤器缓存</a> 中讨论过滤器的性能优势，不过现在只要记住：请尽可能多的使用过滤式查询。</li>
</ul>
<h3 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h3><ul>
<li>elasticsearch对这个搜索的词语不做分词，用于精确匹配，比如Id，数值类型的查询。</li>
<li>可以用它处理数字（numbers）、布尔值（Booleans）、日期（dates）以及文本（text）。</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li>批量插入数据<ul>
<li><strong>没有手动插入映射，因此<code>ＥｌａｓｔｉｃＳｅａｒｃｈ</code>会为我们自动创建映射，这就意味着只要是文本就会为我们使用分词器分词。</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">POST /my_store/products/_bulk</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">1</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">10</span>, <span class="string">"productID"</span> : <span class="string">"XHDK-A-1293-#fJ3"</span> &#125;</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">2</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">20</span>, <span class="string">"productID"</span> : <span class="string">"KDKE-B-9947-#kL5"</span> &#125;</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">3</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">30</span>, <span class="string">"productID"</span> : <span class="string">"JODL-X-1937-#pV7"</span> &#125;</div><div class="line">&#123; <span class="string">"index"</span>: &#123; <span class="string">"_id"</span>: <span class="number">4</span> &#125;&#125;</div><div class="line">&#123; <span class="string">"price"</span> : <span class="number">30</span>, <span class="string">"productID"</span> : <span class="string">"QQPX-R-3956-#aD8"</span> &#125;</div></pre></td></tr></table></figure>
<h5 id="查询数值"><a href="#查询数值" class="headerlink" title="查询数值"></a>查询数值</h5><ul>
<li>使用<code>constant_score</code>查询以非评分模式来执行 <code>term</code> 查询并以一作为统一评分，这样返回的结果的评分全部是1</li>
<li>使用<code>constant_score</code>将term转化为过滤器查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">        <span class="string">"constant_score"</span> : &#123; </div><div class="line">            <span class="string">"filter"</span> : &#123;</div><div class="line">                <span class="string">"term"</span> : &#123; </div><div class="line">                    <span class="string">"price"</span> : <span class="number">20</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//结果如下</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"took"</span>: <span class="number">1</span>,</div><div class="line">  <span class="string">"timed_out"</span>: <span class="keyword">false</span>,</div><div class="line">  <span class="string">"_shards"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"successful"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"skipped"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"failed"</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"hits"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"_index"</span>: <span class="string">"my_store"</span>,</div><div class="line">        <span class="string">"_type"</span>: <span class="string">"products"</span>,</div><div class="line">        <span class="string">"_id"</span>: <span class="string">"2"</span>,</div><div class="line">        <span class="string">"_score"</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">"_source"</span>: &#123;</div><div class="line">          <span class="string">"price"</span>: <span class="number">20</span>,</div><div class="line">          <span class="string">"productID"</span>: <span class="string">"KDKE-B-9947-#kL5"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="查询文本"><a href="#查询文本" class="headerlink" title="查询文本"></a>查询文本</h5><ul>
<li>文本怎样分词<ul>
<li>大写字母转换为小写字母</li>
<li>复数变成单数</li>
<li>去掉特殊字符</li>
</ul>
</li>
<li><strong>由于term是精确查询，但是在查询文本的时候，很有可能这个文本已经进行了分词，但是term查询的时候搜索的词不分词，因此可能两个文本明明是一样的，但是却匹配不上。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">        <span class="string">"constant_score"</span> : &#123;</div><div class="line">            <span class="string">"filter"</span> : &#123;</div><div class="line">                <span class="string">"term"</span> : &#123;</div><div class="line">                    <span class="string">"productID"</span> : <span class="string">"XHDK-A-1293-#fJ3"</span>   <span class="comment">//虽然和插入的数据一样，但是却查询不到</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的结果可以看到，由于term查询默认是不对搜索的词进行分词的，但是在查询的文本是分词的，因此这里肯定是查询不到的，我们可以使用分词分析器看看这个<code>productID</code>如何实现分词的，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">GET /my_store/_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"field"</span>: <span class="string">"productID"</span>,    <span class="comment">//指定分词的域</span></div><div class="line">  <span class="string">"text"</span>: <span class="string">"XHDK-A-1293-fJ3-the"</span>    <span class="comment">//文本内容</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//结果如下：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"tokens"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"xhdk"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">4</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"a"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">6</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"1293"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">7</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">11</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;NUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"fj3"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">12</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">15</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"the"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">16</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">19</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">4</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的结果可知:<ul>
<li>在分词的过程中自动去掉了特殊字符，比如<code>-</code>和<code>&amp;</code></li>
<li>大写字母全部转为小写</li>
</ul>
</li>
</ul>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><ul>
<li>如果需要使用term精确匹配查询文本，那么这个文本就不能使用分词器分词，因此需要手动创建索引的映射（mapping），如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">DELETE my_store   <span class="comment">//先删除索引</span></div><div class="line"></div><div class="line">PUT /my_store    <span class="comment">//手动指定映射</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"mappings"</span> : &#123;</div><div class="line">        <span class="string">"products"</span> : &#123;</div><div class="line">            <span class="string">"properties"</span> : &#123;</div><div class="line">                <span class="string">"productID"</span> : &#123;</div><div class="line">                    <span class="string">"type"</span> : <span class="string">"string"</span>,</div><div class="line">                    <span class="string">"index"</span> : <span class="string">"not_analyzed"</span>    <span class="comment">//不分词</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>此时如果再查询，那么就会精确匹配到这个信息了。</li>
</ul>
<h3 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h3><ul>
<li>对于多个关键字的查询，假设我们需要查询price在10,20,30中的其中一个即可，那么需要使用terms指定多组值</li>
<li>精确查询，不会使用分词器</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>:&#123;</div><div class="line">      <span class="string">"terms"</span>:&#123;</div><div class="line">        <span class="string">"price"</span>:[<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指定文档数量-from-size"><a href="#指定文档数量-from-size" class="headerlink" title="指定文档数量  (from ,size)"></a>指定文档数量  (from ,size)</h2><ul>
<li>假设我们需要对前两个文档进行查询，那么可以使用<code>from</code>和<code>size</code>指定文档的数量，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"from"</span>:<span class="number">0</span>,    <span class="comment">//从第一文档开始</span></div><div class="line">  <span class="string">"size"</span>:<span class="number">2</span>,     <span class="comment">//查询两个文档</span></div><div class="line">    <span class="string">"query"</span>:&#123;</div><div class="line">      <span class="string">"terms"</span>:&#123;</div><div class="line">        <span class="string">"price"</span>:[<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回指定的字段-source"><a href="#返回指定的字段-source" class="headerlink" title="返回指定的字段  _source"></a>返回指定的字段  _source</h2><ul>
<li>在使用查询的时候默认返回的是全部的字段，那么我们可以使用<code>_source</code>指定返回的字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"_source"</span>:[<span class="string">"address"</span>,<span class="string">"age"</span>], </div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>同时我们也可以排除不返回哪些字段，使用<code>exclude</code>即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"_source"</span>:&#123;</div><div class="line">    <span class="string">"exclude"</span>: [<span class="string">"address"</span>,<span class="string">"age"</span>],   <span class="comment">//排除字段</span></div><div class="line">    <span class="string">"include"</span>: [<span class="string">"name"</span>,<span class="string">"date"</span>]   <span class="comment">//包含的字段</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回版本号"><a href="#返回版本号" class="headerlink" title="返回版本号"></a>返回版本号</h2><ul>
<li>默认的查询返回版本号，我们可以在查询体中加上<code>version:true</code>即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"version"</span>:<span class="keyword">true</span>, </div><div class="line">  <span class="string">"from"</span>:<span class="number">0</span>,</div><div class="line">  <span class="string">"size"</span>:<span class="number">2</span>,</div><div class="line">    <span class="string">"query"</span>:&#123;</div><div class="line">      <span class="string">"terms"</span>:&#123;</div><div class="line">        <span class="string">"price"</span>:[<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h2><ul>
<li>match查询和term查询相反，知道分词器的存在，会对搜索的词语进行分词。</li>
<li>上面使用match查询<code>productId</code>的时候，因为terms不知道分词器的存在，因此查询不到，但是我们使用match查询可以匹配到，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">                <span class="string">"match"</span> : &#123;</div><div class="line">                    <span class="string">"productID"</span> : <span class="string">"XHDK-A-1293-#fJ3"</span></div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>比如说我们要查找姓名是<code>zhaoliu</code>或者<code>zhaoming</code>的，那么只需要使用match即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">                <span class="string">"match"</span> : &#123;</div><div class="line">                    <span class="string">"name"</span> : <span class="string">"zhaoliu zhaoming"</span>  <span class="comment">//会对这个短语进行分词，分出两个，之后去查询</span></div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="match-all"><a href="#match-all" class="headerlink" title="match_all"></a>match_all</h2><ul>
<li>查询所有</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GET /my_store/products/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_all"</span>: &#123;</div><div class="line">  </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h2><ul>
<li>短语匹配查询</li>
<li>类似 <code>match</code> 查询， <code>match_phrase</code> 查询首先将查询字符串解析成一个词项列表，然后对这些词项进行搜索，但只保留那些包含 <em>全部</em> 搜索词项，且 <em>位置</em> 与搜索词项相同的文档。 比如对于 <code>quick fox</code> 的短语搜索可能不会匹配到任何文档，因为没有文档包含的 <code>quick</code> 词之后紧跟着 <code>fox</code> 。</li>
<li>位置顺序必须一致</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取你会觉得短语匹配太严格了，那么可以使用slop这个关键字指定相隔的步长，<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/slop.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/slop.html</a></li>
</ul>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul>
<li>使用<code>sort</code>可以进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"_source"</span>:&#123;</div><div class="line">    <span class="string">"exclude"</span>: [<span class="string">"address"</span>,<span class="string">"name"</span>],</div><div class="line">    <span class="string">"include"</span>: [<span class="string">"age"</span>,<span class="string">"date"</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match_phrase"</span>: &#123;</div><div class="line">      <span class="string">"address"</span>: <span class="string">"huibei,wuhan"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"sort"</span>: [    <span class="comment">//指定排序</span></div><div class="line">    &#123;</div><div class="line">      <span class="string">"age"</span>: &#123;      <span class="comment">//对字段age进行排序</span></div><div class="line">        <span class="string">"order"</span>: <span class="string">"desc"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"address"</span>: &#123;     <span class="comment">//address排序</span></div><div class="line">        <span class="string">"order"</span>: <span class="string">"asc"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><ul>
<li><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_ranges.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_ranges.html</a></p>
</li>
<li><p><code>gt</code>: <code>&gt;</code> 大于（greater than）</p>
</li>
<li><code>lt</code>: <code>&lt;</code> 小于（less than）</li>
<li><code>gte</code>: <code>&gt;=</code> 大于或等于（greater than or equal to）</li>
<li><code>lte</code>: <code>&lt;=</code> 小于或等于（less than or equal to）</li>
</ul>
<h3 id="日期查询"><a href="#日期查询" class="headerlink" title="日期查询"></a>日期查询</h3><ul>
<li>可以查询日期的范围，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>: <span class="string">"2010-11-11"</span>,    <span class="comment">//大于</span></div><div class="line">      <span class="string">"lt"</span>: <span class="string">"2012-12-31"</span>    <span class="comment">//小于</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>:<span class="string">"now"</span>       <span class="comment">//查询大于现在时间的文档</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>:<span class="string">"now-1h"</span>    <span class="comment">//查询距离现在一小时之内的文档，直接使用now减去一小时即可</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"date"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>: <span class="string">"2010-11-11 00:00:00"</span>,    <span class="comment">//指定时分秒查询</span></div><div class="line">      <span class="string">"lt"</span>: <span class="string">"2012-12-31 00:00:00"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>时间格式参考如下：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/mapping-date-format.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/mapping-date-format.html</a></li>
</ul>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">  <span class="string">"range"</span>: &#123;</div><div class="line">    <span class="string">"price"</span>: &#123;</div><div class="line">      <span class="string">"gt"</span>: <span class="number">10</span>,    <span class="comment">//数值范围查找</span></div><div class="line">      <span class="string">"lt"</span>: <span class="number">20</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符串范围"><a href="#字符串范围" class="headerlink" title="字符串范围"></a>字符串范围</h3><ul>
<li><code>range</code> 查询同样可以处理字符串字段， 字符串范围可采用 <em>字典顺序（lexicographically）</em> 或字母顺序（alphabetically）。例如，下面这些字符串是采用字典序（lexicographically）排序的：<ul>
<li>5, 50, 6, B, C, a, ab, abb, abc, b</li>
<li>在倒排索引中的词项就是采取字典顺序（lexicographically）排列的，这也是字符串范围可以使用这个顺序来确定的原因。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"range"</span> : &#123;</div><div class="line">    <span class="string">"title"</span> : &#123;</div><div class="line">        <span class="string">"gte"</span> : <span class="string">"a"</span>,</div><div class="line">        <span class="string">"lt"</span> :  <span class="string">"b"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="wildcard查询"><a href="#wildcard查询" class="headerlink" title="wildcard查询"></a>wildcard查询</h2><ul>
<li>允许使用通配符*和？进行查询</li>
<li><code>*</code>: 代表一个或者多个字符</li>
<li><code>?</code>：代表任意一个字符</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"wildcard"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chen*"</span>   </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"wildcard"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chen?iabing"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模糊查询-fuzzy"><a href="#模糊查询-fuzzy" class="headerlink" title="模糊查询 fuzzy"></a>模糊查询 fuzzy</h2><ul>
<li>假设我们需要查询<code>chenjiabing</code>这个名字，那么使用模糊查询的话，如果其中有个字符写错了，也是能够查询到的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"fuzzy"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chejiabing"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">GET team/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"fuzzy"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>:<span class="string">"chejiabing"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"highlight"</span>: &#123;</div><div class="line">    <span class="string">"pre_tags"</span>: [<span class="string">"&lt;span style='color:red'&gt;"</span>],   <span class="comment">//指定包裹的标签前半部分，默认的是&lt;em&gt;</span></div><div class="line">    <span class="string">"post_tags"</span>: [<span class="string">"&lt;/span&gt;"</span>],                    <span class="comment">//指定后半部分</span></div><div class="line">    <span class="string">"fields"</span>: &#123;</div><div class="line">      <span class="string">"name"</span>: &#123;&#125;                               <span class="comment">//name字段高量</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="null值的查询"><a href="#null值的查询" class="headerlink" title="null值的查询"></a>null值的查询</h2><ul>
<li><code>exists</code>这个语句用来查询存在值的信息，如果和must结合表示查询不为null的数据，如果must_not集合表示查询为<code>null</code>的数据，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询password=null的数据</span></div><div class="line">GET ea/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must_not"</span>:&#123;</div><div class="line">        <span class="string">"exists"</span>:&#123;</div><div class="line">          <span class="string">"field"</span>:<span class="string">"password"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//查询password!=null的数据</span></div><div class="line">GET ea/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must"</span>:&#123;</div><div class="line">        <span class="string">"exists"</span>:&#123;</div><div class="line">          <span class="string">"field"</span>:<span class="string">"password"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="filter查询"><a href="#filter查询" class="headerlink" title="filter查询"></a>filter查询</h2><ul>
<li>缓存，不返回相关性，速度比query快</li>
</ul>
<h3 id="简单的过滤查询"><a href="#简单的过滤查询" class="headerlink" title="简单的过滤查询"></a>简单的过滤查询</h3><ul>
<li>使用<code>post_filter</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"post_filter"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="bool过滤查询"><a href="#bool过滤查询" class="headerlink" title="bool过滤查询"></a>bool过滤查询</h3><ul>
<li>语法如下：<ul>
<li><code>must</code> ：所有的语句都 <em>必须（must）</em> 匹配，与 <code>AND</code> 等价。</li>
<li><code>must_not</code> ：所有的语句都 <em>不能（must not）</em> 匹配，与 <code>NOT</code> 等价。</li>
<li><code>should</code>：至少有一个语句要匹配，与 <code>OR</code> 等价。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="string">"bool"</span> : &#123;</div><div class="line">      <span class="string">"must"</span> :     [],</div><div class="line">      <span class="string">"should"</span> :   [],</div><div class="line">      <span class="string">"must_not"</span> : [],</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其中的每一个部分都是可选的</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><ul>
<li>must中的内容查询是并列的，相当于sql中的and，所有的条件都满足才可以</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>: &#123;<span class="string">"age"</span>:<span class="number">22</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"match"</span>:&#123;<span class="string">"address"</span>: <span class="string">"湖北"</span>&#125;&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"post_filter"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">       <span class="string">"should"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"name"</span>:<span class="string">"郑元梅"</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">33</span>&#125;&#125;</div><div class="line">      ],</div><div class="line">      <span class="string">"must_not"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">22</span>&#125;&#125;</div><div class="line">      ]</div><div class="line">     </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="嵌套bool过滤查询"><a href="#嵌套bool过滤查询" class="headerlink" title="嵌套bool过滤查询"></a>嵌套bool过滤查询</h3><ul>
<li>我们需要执行sql语句如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"郑元梅"</span> <span class="keyword">or</span> age=<span class="number">33</span> <span class="keyword">or</span>(age=<span class="number">22</span> <span class="keyword">and</span> price=<span class="number">33</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">       <span class="string">"should"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"name"</span>:<span class="string">"郑元梅"</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">33</span>&#125;&#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">              &#123;<span class="string">"term"</span>:&#123;<span class="string">"age"</span>:<span class="number">22</span>&#125;,</div><div class="line">              	&#123;<span class="string">"term"</span>:&#123;<span class="string">"price"</span>:<span class="number">33</span>&#125;&#125;</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">     </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="范围过滤"><a href="#范围过滤" class="headerlink" title="范围过滤"></a>范围过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"post_filter"</span>: &#123;</div><div class="line">    <span class="string">"range"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: &#123;</div><div class="line">        <span class="string">"gte"</span>: <span class="number">20</span>,</div><div class="line">        <span class="string">"lte"</span>: <span class="number">21</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非空的过滤查询"><a href="#非空的过滤查询" class="headerlink" title="非空的过滤查询"></a>非空的过滤查询</h3><ul>
<li><code>select * from user where address is not null</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"filter"</span>: &#123;</div><div class="line">        <span class="string">"exists"</span>: &#123;</div><div class="line">          <span class="string">"field"</span>: <span class="string">"address"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><ul>
<li>在sql中有许多的聚合函数，那么在Elasticsearch中页存在这些聚合函数，比如sum，avg，count等等</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,     <span class="comment">//在使用聚合的时候，默认还会返回全部的文档结果，如果不需要，可以使用size限制</span></div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"sum_age"</span>: &#123;           <span class="comment">//sum_age  指定返回字段的名称</span></div><div class="line">      <span class="string">"sum"</span>: &#123;            <span class="comment">//sum是指定的聚合函数的名称</span></div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span>    <span class="comment">//这里指定聚合的字段</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"avg_age"</span>: &#123;</div><div class="line">      <span class="string">"avg"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"max_age"</span>: &#123;</div><div class="line">      <span class="string">"max"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"min_age"</span>: &#123;</div><div class="line">      <span class="string">"min"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"cardinality_age"</span>: &#123;       </div><div class="line">      <span class="string">"cardinality"</span>: &#123;        <span class="comment">//查询某个字段的基数，就是对应的字段有多少个不同的值</span></div><div class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>分组（group），使用的是<code>terms</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span>    <span class="comment">//按照日期进行分组</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//结果如下：</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"took"</span>: <span class="number">6</span>,</div><div class="line">  <span class="string">"timed_out"</span>: <span class="keyword">false</span>,</div><div class="line">  <span class="string">"_shards"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"successful"</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">"skipped"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"failed"</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"hits"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">6</span>,</div><div class="line">    <span class="string">"max_score"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"hits"</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"aggregations"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"sum_other_doc_count"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"buckets"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="string">"key"</span>: <span class="number">1352635200000</span>,</div><div class="line">          <span class="string">"key_as_string"</span>: <span class="string">"2012-11-11 12:00:00"</span>,</div><div class="line">          <span class="string">"doc_count"</span>: <span class="number">5</span>     <span class="comment">//分组的数量	</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="string">"key"</span>: <span class="number">1352592000000</span>,</div><div class="line">          <span class="string">"key_as_string"</span>: <span class="string">"2012-11-11 00:00:00"</span>,</div><div class="line">          <span class="string">"doc_count"</span>: <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对年龄是22岁的用户按照date进行分组，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: <span class="string">"22"</span></div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对年龄是22岁的用户按照date进行分组，并且计算每组的平均年龄</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *,<span class="keyword">avg</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="built_in">date</span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: <span class="string">"22"</span></div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"aggs"</span>: &#123;      <span class="comment">//直接在分组的聚合中，再次使用聚合求age的均值</span></div><div class="line">        <span class="string">"age_avg"</span>: &#123;</div><div class="line">          <span class="string">"avg"</span>: &#123;</div><div class="line">            <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对年龄是22岁的用户按照date进行分组，并且计算每组的平均年龄，最后按照平均年龄进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"term"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>: <span class="string">"22"</span></div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  <span class="string">"aggs"</span>: &#123;</div><div class="line">    <span class="string">"age_group"</span>: &#123;</div><div class="line">      <span class="string">"terms"</span>: &#123;</div><div class="line">        <span class="string">"field"</span>: <span class="string">"date"</span>,</div><div class="line">        <span class="string">"order"</span>: &#123;</div><div class="line">          <span class="string">"age_avg"</span>: <span class="string">"asc"</span>    <span class="comment">//按照聚合查询的平均年龄进行升序排序</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="string">"aggs"</span>: &#123;</div><div class="line">        <span class="string">"age_avg"</span>: &#123;</div><div class="line">          <span class="string">"avg"</span>: &#123;</div><div class="line">            <span class="string">"field"</span>: <span class="string">"age"</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;请求体查询&quot;&gt;&lt;a href=&quot;#请求体查询&quot; class=&quot;headerlink&quot; title=&quot;请求体查询&quot;&gt;&lt;/a&gt;请求体查询&lt;/h1&gt;&lt;h2 id=&quot;简单查询-【不推荐】&quot;&gt;&lt;a href=&quot;#简单查询-【不推荐】&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es中的mapping</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E4%B8%AD%E7%9A%84mapping/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es中的mapping/</id>
    <published>2018-09-02T11:35:47.000Z</published>
    <updated>2018-09-02T11:36:03.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h1><ul>
<li><code>GET /index/type/_mapping</code> </li>
<li>我们可以使用上面的语句检查自己创建的文档的映射，如果类型映射错误，那么将会造成意想不到的结果</li>
</ul>
<h2 id="核心数据类型"><a href="#核心数据类型" class="headerlink" title="核心数据类型"></a>核心数据类型</h2><ul>
<li>Elasticsearch 支持 如下简单域类型：<ul>
<li>字符串: <code>string</code><ul>
<li><code>text</code> ：支持分词</li>
<li><code>keyword</code> ：不分词</li>
</ul>
</li>
<li>整数 : <code>byte</code>, <code>short</code>, <code>integer</code>, <code>long</code></li>
<li>浮点数: <code>float</code>, <code>double</code></li>
<li>布尔型: <code>boolean</code></li>
<li>日期: <code>date</code></li>
</ul>
</li>
<li>日期和数值类型的数据不会进行分词，只有精确查询才能查询到。</li>
<li>text类型的数据会进行分词，我们只需要查询部分单词即可查询到结果</li>
</ul>
<h2 id="复杂核心类型"><a href="#复杂核心类型" class="headerlink" title="复杂核心类型"></a>复杂核心类型</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/complex-core-fields.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/complex-core-fields.html</a></li>
</ul>
<h2 id="手动指定Mapping"><a href="#手动指定Mapping" class="headerlink" title="手动指定Mapping"></a>手动指定Mapping</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">PUT /lib       <span class="comment">//指定索引为lib</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"mappings"</span>:&#123;</div><div class="line">    <span class="string">"user"</span>:&#123;          <span class="comment">//指定索引类型为user</span></div><div class="line">      <span class="string">"properties"</span>:&#123;</div><div class="line">        <span class="string">"name"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"text"</span>,           <span class="comment">//指定类型</span></div><div class="line">        <span class="string">"analyzer"</span>: <span class="string">"standard"</span>    <span class="comment">//指定分词器</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"age"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"integer"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"date"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"date"</span></div><div class="line">      &#125;,</div><div class="line">      </div><div class="line">      <span class="string">"address"</span>:&#123;</div><div class="line">        <span class="string">"type"</span>:<span class="string">"text"</span>,</div><div class="line">        <span class="string">"analyzer"</span>: <span class="string">"standard"</span></div><div class="line">      &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mapping&quot;&gt;&lt;a href=&quot;#Mapping&quot; class=&quot;headerlink&quot; title=&quot;Mapping&quot;&gt;&lt;/a&gt;Mapping&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /index/type/_mapping&lt;/code&gt; &lt;/li&gt;

    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es初探</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E5%88%9D%E6%8E%A2/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es初探/</id>
    <published>2018-09-02T11:35:01.000Z</published>
    <updated>2018-09-02T11:35:18.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES初探"><a href="#ES初探" class="headerlink" title="ES初探"></a>ES初探</h1><h2 id="文档元数据"><a href="#文档元数据" class="headerlink" title="文档元数据"></a>文档元数据</h2><p>1、<code>_index</code> ：文档在哪存放</p>
<p>2、<code>_type</code> ：文档表示的对象类别</p>
<p>3、<code>_id</code> ：文档唯一标识</p>
<h2 id="自动生成Id"><a href="#自动生成Id" class="headerlink" title="自动生成Id"></a>自动生成Id</h2><p>1、如果在Put数据的时候没有指定Id，那么会自动生成一个唯一的ID，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">POST /website/blog/</div><div class="line">&#123;</div><div class="line">  <span class="string">"title"</span>: <span class="string">"My second blog entry"</span>,</div><div class="line">  <span class="string">"text"</span>:  <span class="string">"Still trying this out..."</span>,</div><div class="line">  <span class="string">"date"</span>:  <span class="string">"2014/01/01"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//生成的数据如下：</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"_index"</span>: <span class="string">"website"</span>,</div><div class="line">  <span class="string">"_type"</span>: <span class="string">"blog"</span>,</div><div class="line">  <span class="string">"_id"</span>: <span class="string">"AWVlzX7Ur7Pz0UFcO81u"</span>,   <span class="comment">//自动生成的Id</span></div><div class="line">  <span class="string">"_version"</span>: <span class="number">1</span>,</div><div class="line">  <span class="string">"result"</span>: <span class="string">"created"</span>,</div><div class="line">  <span class="string">"_shards"</span>: &#123;</div><div class="line">    <span class="string">"total"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"successful"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"failed"</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"created"</span>: <span class="keyword">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="版本号-version"><a href="#版本号-version" class="headerlink" title="版本号 _version"></a>版本号 _version</h2><p>1、ElasticSearch为了实现并发访问，每次实行更新、删除、添加之后都会为版本号自增1。</p>
<p>2、在删除，更新的之前会保存这个版本号，更新删除操作执行完成之后会自动比较此时的version的值，如果不同，表示被别的进程改变了，一次保证并发的安全性</p>
<h2 id="检索文档的部分字段"><a href="#检索文档的部分字段" class="headerlink" title="检索文档的部分字段"></a>检索文档的部分字段</h2><p>1、当我们检索字段的时候，默认会为我们查询全部的文档字段，但是我们 可以使用<code>_source</code>指定返回的字段，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /website/blog/<span class="number">123</span>?_source=title,text</div></pre></td></tr></table></figure>
<h2 id="判断文档是否存在"><a href="#判断文档是否存在" class="headerlink" title="判断文档是否存在"></a>判断文档是否存在</h2><p>1、使用<code>HEAD</code>风格的请求方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HEAD /website/blog/<span class="number">123</span></div></pre></td></tr></table></figure>
<h2 id="创建新文档"><a href="#创建新文档" class="headerlink" title="创建新文档"></a>创建新文档</h2><p>1、文档的确定有三个元数据指定：index,type,id</p>
<p>2、创建文档的时候，如果想不覆盖原来的文档，那么需要检查文档是否存在，如果存在就不插入，有两种方式，如下：</p>
<p>​    1、使用<code>op_type=create</code>，如果文档已经存在了，那么返回409状态码。如果创建成功了，那么会返回<code>201 Created</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PUT /website/blog/<span class="number">123</span>?op_type=create</div><div class="line">&#123;</div><div class="line">  <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">  <span class="string">"text"</span>:  <span class="string">"Just trying this out..."</span>,</div><div class="line">  <span class="string">"date"</span>:  <span class="string">"2014/01/02"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    2、使用<code>_create</code>，如果失败返回409,如果创建成功了，那么会返回<code>201 Created</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PUT /website/blog/<span class="number">123</span>/_create</div><div class="line">&#123;</div><div class="line">  <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">  <span class="string">"text"</span>:  <span class="string">"Just trying this out..."</span>,</div><div class="line">  <span class="string">"date"</span>:  <span class="string">"2014/01/02"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="批量获取文档"><a href="#批量获取文档" class="headerlink" title="批量获取文档"></a>批量获取文档</h2><p>1、ElasticSearch可以批量获取多个文档中的数据，也可以批量获单个文档中的多条数据</p>
<h3 id="批量获取不同的文档"><a href="#批量获取不同的文档" class="headerlink" title="批量获取不同的文档"></a>批量获取不同的文档</h3><p>1、使用<code>mgetAPI</code>批量获取文档</p>
<p>​    1、<code>docs</code>：指定了要获取的文档</p>
<p>​    2、<code>_source</code>：指定需要返回的字段，不指定，默认返回全部的字段</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">GET /_mget</div><div class="line">&#123;</div><div class="line">   <span class="string">"docs"</span> : [</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> : <span class="string">"website"</span>,   <span class="comment">//文档的索引</span></div><div class="line">         <span class="string">"_type"</span> :  <span class="string">"blog"</span>,      <span class="comment">//文档类型</span></div><div class="line">         <span class="string">"_id"</span> :    <span class="number">2</span>             <span class="comment">// Id</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> : <span class="string">"website"</span>,</div><div class="line">         <span class="string">"_type"</span> :  <span class="string">"pageviews"</span>,</div><div class="line">         <span class="string">"_id"</span> :    <span class="number">1</span>,</div><div class="line">         <span class="string">"_source"</span>: <span class="string">"views"</span>        </div><div class="line">      &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、响应的内容也是和请求的顺序一致，如下：</p>
<p>​    1、查询到的数据存储在<code>docs</code>数组中，字段封装在<code>_source</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="string">"docs"</span> : [</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> :   <span class="string">"website"</span>,</div><div class="line">         <span class="string">"_id"</span> :      <span class="string">"2"</span>,</div><div class="line">         <span class="string">"_type"</span> :    <span class="string">"blog"</span>,</div><div class="line">         <span class="string">"found"</span> :    <span class="keyword">true</span>,</div><div class="line">         <span class="string">"_source"</span> : &#123;</div><div class="line">            <span class="string">"text"</span> :  <span class="string">"This is a piece of cake..."</span>,</div><div class="line">            <span class="string">"title"</span> : <span class="string">"My first external blog entry"</span></div><div class="line">         &#125;,</div><div class="line">         <span class="string">"_version"</span> : <span class="number">10</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">         <span class="string">"_index"</span> :   <span class="string">"website"</span>,</div><div class="line">         <span class="string">"_id"</span> :      <span class="string">"1"</span>,</div><div class="line">         <span class="string">"_type"</span> :    <span class="string">"pageviews"</span>,</div><div class="line">         <span class="string">"found"</span> :    <span class="keyword">true</span>,</div><div class="line">         <span class="string">"_version"</span> : <span class="number">2</span>,</div><div class="line">         <span class="string">"_source"</span> : &#123;</div><div class="line">            <span class="string">"views"</span> : <span class="number">2</span></div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="批量获取单个文档的值"><a href="#批量获取单个文档的值" class="headerlink" title="批量获取单个文档的值"></a>批量获取单个文档的值</h3><p>1、如果只是获取单个文档中的多条数据，那么只需要在GET请求中指定index和type即可，此时只需要传入不同数据的Id即可，如下：</p>
<p>​    1、其中<code>ids</code>是一个数组，用来封装数据的Id</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /website/blog/_mget</div><div class="line">&#123;</div><div class="line">   <span class="string">"ids"</span> : [ <span class="string">"2"</span>, <span class="string">"1"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    2、请求成功的顺序是按照ids数组中的Id返回的，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"docs"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"_index"</span>: <span class="string">"website"</span>,</div><div class="line">      <span class="string">"_type"</span>: <span class="string">"blog"</span>,</div><div class="line">      <span class="string">"_id"</span>: <span class="string">"123"</span>,</div><div class="line">      <span class="string">"_version"</span>: <span class="number">1</span>,</div><div class="line">      <span class="string">"found"</span>: <span class="keyword">true</span>,</div><div class="line">      <span class="string">"_source"</span>: &#123;</div><div class="line">        <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">        <span class="string">"text"</span>: <span class="string">"Just trying this out..."</span>,</div><div class="line">        <span class="string">"date"</span>: <span class="string">"2014/01/01"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"_index"</span>: <span class="string">"website"</span>,</div><div class="line">      <span class="string">"_type"</span>: <span class="string">"blog"</span>,</div><div class="line">      <span class="string">"_id"</span>: <span class="string">"1"</span>,</div><div class="line">      <span class="string">"_version"</span>: <span class="number">2</span>,</div><div class="line">      <span class="string">"found"</span>: <span class="keyword">true</span>,</div><div class="line">      <span class="string">"_source"</span>: &#123;</div><div class="line">        <span class="string">"title"</span>: <span class="string">"My first blog entry"</span>,</div><div class="line">        <span class="string">"text"</span>: <span class="string">"Starting to get the hang of this..."</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、<strong>即使在GET请求中指定了index和type的值，但是我们也可以在下面覆盖他们的值，这样就可以查询不同文档或者不同索引中的数据了，如下：</strong></p>
<p>​    1、不想覆盖的可以不用自定index和type的值，只需要指定的<code>id</code>的值即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /website/blog/_mget</div><div class="line">&#123;</div><div class="line">   <span class="string">"docs"</span> : [</div><div class="line">      &#123; <span class="string">"_id"</span> : <span class="number">2</span> &#125;,</div><div class="line">      &#123; <span class="string">"_type"</span> : <span class="string">"pageviews"</span>, <span class="string">"_id"</span> :   <span class="number">1</span> &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代价较小的批量操作"><a href="#代价较小的批量操作" class="headerlink" title="代价较小的批量操作"></a>代价较小的批量操作</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/bulk.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/bulk.html</a></p>
<h2 id="空搜索"><a href="#空搜索" class="headerlink" title="空搜索"></a>空搜索</h2><p>1、返回集群下的所有的索引和文档，不需要指定索引、文档、id。默认只是返回前10条</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /_search</div></pre></td></tr></table></figure>
<p>2、返回结果中的各个值的含义参见：<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/empty-search.html#_shards" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/empty-search.html#_shards</a></p>
<h2 id="多索引，多文档的搜索"><a href="#多索引，多文档的搜索" class="headerlink" title="多索引，多文档的搜索"></a>多索引，多文档的搜索</h2><p>1、<code>/_search</code> ：在所有的索引中搜索所有的类型</p>
<p>2、<code>/gb/_search</code> ：在 <code>gb</code> 索引中搜索所有的类型</p>
<p>3、<code>/gb,us/_search</code>：在 <code>gb</code> 和 <code>us</code> 索引中搜索所有的文档</p>
<p>4、<code>/g*,u*/_search</code>：在任何以 <code>g</code> 或者 <code>u</code> 开头的索引中搜索所有的类型</p>
<p>5、<code>/gb/user/_search</code>：在 <code>gb</code> 索引中搜索 <code>user</code> 类型</p>
<p>6、<code>/gb,us/user,tweet/_search</code>：在 <code>gb</code> 和 <code>us</code> 索引中搜索 <code>user</code> 和 <code>tweet</code> 类型</p>
<p>7、<code>/_all/user,tweet/_search</code>：在所有的索引中搜索 <code>user</code> 和 <code>tweet</code> 类型</p>
<h2 id="分页查询【超过1000条的分页数据不推荐】"><a href="#分页查询【超过1000条的分页数据不推荐】" class="headerlink" title="分页查询【超过1000条的分页数据不推荐】"></a>分页查询【超过1000条的分页数据不推荐】</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/pagination.html#pagination" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/pagination.html#pagination</a></p>
<p>2、<code>size</code> ：显示应该返回的结果数量，默认是 <code>10</code></p>
<p>3、<code>from</code> ：显示应该跳过的初始结果数量，默认是 <code>0</code></p>
<p>4、实例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /_search?size=<span class="number">5</span>     <span class="comment">//查询前5条的数据</span></div><div class="line">GET /_search?size=<span class="number">5</span>&amp;from=<span class="number">5</span>  <span class="comment">//查询第2页，每页显示5条数据</span></div><div class="line">GET /_search?size=<span class="number">5</span>&amp;from=<span class="number">10</span>  <span class="comment">//查询第3页的数据，每页显示5条数据</span></div></pre></td></tr></table></figure>
<p>5、分布式中的深度分页的问题，可以在文档中查看详细信息。总之分页请求的数据不要超过1000条</p>
<p>6、<strong>在 <a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/reindex.html" target="_blank" rel="external">重新索引你的数据</a> 中解释了如何 <em>能够</em> 有效获取大量的文档。</strong> </p>
<h2 id="轻量搜索【不推荐使用】"><a href="#轻量搜索【不推荐使用】" class="headerlink" title="轻量搜索【不推荐使用】"></a>轻量搜索【不推荐使用】</h2><p>0、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/search-lite.html#query-string-query" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/search-lite.html#query-string-query</a></p>
<p>1、返回group索引中文档类型为<code>employee</code>中的内容，筛选条件为：文档中的所有字段的值只要有等于<code>Smith</code>的都返回，如下：</p>
<p>​    1、<code>_all</code>：用于指定对文档中的所有字段进行筛选，只要有一个字段成立，那么这个文档就会被选中，但是返回的结果中有相关度的分析</p>
<p>​    2、如果不指定任何字段，那么默认就是使用<code>_all</code>进行筛选</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /group/employee/_search?q=Smith</div><div class="line"></div><div class="line"><span class="comment">//这条语句的效果和上面的语句一样</span></div><div class="line">GET /_all/employee/_search?q=_all:Smith</div></pre></td></tr></table></figure>
<p>2、查询一个文档中指定字段的值等于<code>Smith</code>，如下我们查询文档中的字段<code>last_name</code>这个值等于Smith的所有文档内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /group/employee/_search?q=last_name:Smith</div></pre></td></tr></table></figure>
<h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/inverted-index.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/inverted-index.html</a></p>
<p>2、创建规范：</p>
<p>​    1、单词不区分大小写</p>
<p>​    2、不区分单复数，将单数和复数的单词一律提取出来单数即可</p>
<p>​    3、意思相近的词只提取一个</p>
<p>​    </p>
<h2 id="分析与分析器"><a href="#分析与分析器" class="headerlink" title="分析与分析器"></a>分析与分析器</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/analysis-intro.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/analysis-intro.html</a></p>
<p>2、什么时候使用分词器？</p>
<p>​    1、查找全文域的时候使用，比如使用轻量搜索中的<code>_all</code></p>
<p>​    2、精确查找不使用分词器，比如Date类型的数据，默认将其看成单独的一个词条</p>
<p>3、测试分词器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /_analyze</div><div class="line">&#123;</div><div class="line">  <span class="string">"analyzer"</span>: <span class="string">"standard"</span>,   <span class="comment">//指定分词器</span></div><div class="line">  <span class="string">"text"</span>: <span class="string">"Text to analyze"</span>   <span class="comment">//指定需要分割的字符串</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回结果如下：</p>
<p>​    1、<code>token</code> 是实际存储到索引中的词条。 <code>position</code> 指明词条在原始文本中出现的位置。 <code>start_offset</code> 和 <code>end_offset</code> 指明字符在原始字符串中的位置。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"tokens"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">4</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"to"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">5</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">7</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"token"</span>: <span class="string">"analyze"</span>,</div><div class="line">      <span class="string">"start_offset"</span>: <span class="number">8</span>,</div><div class="line">      <span class="string">"end_offset"</span>: <span class="number">15</span>,</div><div class="line">      <span class="string">"type"</span>: <span class="string">"&lt;ALPHANUM&gt;"</span>,</div><div class="line">      <span class="string">"position"</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>1、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/mapping-intro.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/mapping-intro.html</a></p>
<p>2、Elasticsearch 支持 如下简单域类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">字符串: string</div><div class="line">整数 : <span class="keyword">byte</span>, <span class="keyword">short</span>, integer, <span class="keyword">long</span></div><div class="line">浮点数: <span class="keyword">float</span>, <span class="keyword">double</span></div><div class="line">布尔型: <span class="keyword">boolean</span></div><div class="line">日期: date</div></pre></td></tr></table></figure>
<p>3、如果我们在添加数据的时候使用双引号包裹起来的，那么会被动态映射为字符串类型。</p>
<h2 id="copy-to"><a href="#copy-to" class="headerlink" title="copy_to"></a>copy_to</h2><p>1、我们在查询文本的时候可能会同时会对多个文本中的内容进行查询匹配，那么就需要对多个字段进行筛选了，比如我们需要对name和address这两个字段同时进行匹配，那么效率肯定会比对一个字段进行筛选的低，因此可以使用copy_to字段将这两个字段中的内容存储在同一个字段中，那么就可以实现对一个字段的查询等同于对两个字段的查询，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">PUT lib/user/_mapping</div><div class="line">&#123;</div><div class="line">  <span class="string">"properties"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span>    <span class="comment">//将name这个字段的文本内容复制到name_address中</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"age"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"integer"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"address"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span>   <span class="comment">// //将address这个字段的文本内容复制到name_address中</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、此时就可以使用query查询了，如下：查询名字为Jack，address为jiangsusheng的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"name_address"</span>: <span class="string">"Jack,jiangsusheng"</span>   <span class="comment">//直接使用name_address即可</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//等同于</span></div><div class="line"></div><div class="line">GET /lib/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"bool"</span>: &#123;</div><div class="line">      <span class="string">"must"</span>: [</div><div class="line">        &#123;<span class="string">"term"</span>:&#123;<span class="string">"name"</span>:<span class="string">"Jack"</span>&#125;&#125;,</div><div class="line">        &#123;<span class="string">"match"</span>:&#123;<span class="string">"address"</span>:<span class="string">"jiangsusheng"</span>&#125;&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h2><ul>
<li>默认字符串是不能排序的，因为自动创建的映射将字符串映射为<code>text</code>类型，将会被分词，因此不能进行排序，但是我们知道字符串类型中有一个<code>keyword</code>类型不会被分词，因此我们可以再为需要排序的字符串字段指定一个<code>keyword</code>类型的字段用于排序，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">PUT /lib4</div><div class="line">&#123;</div><div class="line">  <span class="string">"settings"</span>:&#123;</div><div class="line">    <span class="string">"number_of_shards"</span>:<span class="number">5</span>,   <span class="comment">//主分片的数量</span></div><div class="line">    <span class="string">"number_of_replicas"</span>:<span class="number">0</span>   <span class="comment">//副本分片的数量</span></div><div class="line">  &#125;,</div><div class="line">    <span class="string">"mappings"</span>:&#123;</div><div class="line">      <span class="string">"user"</span>:&#123;</div><div class="line">        <span class="string">"properties"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span>,</div><div class="line">      <span class="string">"fields"</span>: &#123;    <span class="comment">//使用fields指定另外一个字段raw</span></div><div class="line">        <span class="string">"raw"</span>:&#123;    </div><div class="line">          <span class="string">"type"</span>: <span class="string">"keyword"</span>     <span class="comment">//类型为keyword</span></div><div class="line">        &#125;</div><div class="line">      &#125;，</div><div class="line">      <span class="string">"fielddata"</span>: <span class="keyword">true</span>   <span class="comment">//将fielddata指定为true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"age"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"integer"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"address"</span>:&#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text"</span>,</div><div class="line">      <span class="string">"copy_to"</span>: <span class="string">"name_address"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//排序如下：</span></div><div class="line"></div><div class="line">GET /lib4/user/_search</div><div class="line">&#123;</div><div class="line">  <span class="string">"query"</span>: &#123;</div><div class="line">    <span class="string">"match"</span>: &#123;</div><div class="line">      <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="string">"sort"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: &#123;    <span class="comment">//对字符串类型的name进行排序</span></div><div class="line">        <span class="string">"order"</span>: <span class="string">"desc"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES初探&quot;&gt;&lt;a href=&quot;#ES初探&quot; class=&quot;headerlink&quot; title=&quot;ES初探&quot;&gt;&lt;/a&gt;ES初探&lt;/h1&gt;&lt;h2 id=&quot;文档元数据&quot;&gt;&lt;a href=&quot;#文档元数据&quot; class=&quot;headerlink&quot; title=&quot;文档元数据&quot;&gt;
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es的crud</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E7%9A%84crud/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es的crud/</id>
    <published>2018-09-02T11:34:06.000Z</published>
    <updated>2018-09-02T11:34:24.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch的简单的CRUD"><a href="#ElasticSearch的简单的CRUD" class="headerlink" title="ElasticSearch的简单的CRUD"></a>ElasticSearch的简单的CRUD</h2><p>1、ElasticSearch使用的是RestFul风格的API</p>
<p>2、<code>http://39.105.123.197:5601/</code></p>
<h2 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h2><p>1、需要指定索引，文档的类型，文档的Id</p>
<p>2、使用<code>PUT</code>风格的提交方式，如下：</p>
<pre><code>1、`group`：索引名称

2、`employee`：文档的名字

3、`1`：对应的id
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">PUT /group/employee/<span class="number">1</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> : <span class="string">"John"</span>,</div><div class="line">    <span class="string">"last_name"</span> :  <span class="string">"Smith"</span>,</div><div class="line">    <span class="string">"age"</span> :        <span class="number">25</span>,</div><div class="line">    <span class="string">"about"</span> :      <span class="string">"I love to go rock climbing"</span>,</div><div class="line">    <span class="string">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">PUT /group/employee/<span class="number">2</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> :  <span class="string">"Jane"</span>,</div><div class="line">    <span class="string">"last_name"</span> :   <span class="string">"Smith"</span>,</div><div class="line">    <span class="string">"age"</span> :         <span class="number">32</span>,</div><div class="line">    <span class="string">"about"</span> :       <span class="string">"I like to collect rock albums"</span>,</div><div class="line">    <span class="string">"interests"</span>:  [ <span class="string">"music"</span> ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">PUT /group/employee/<span class="number">3</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> :  <span class="string">"Douglas"</span>,</div><div class="line">    <span class="string">"last_name"</span> :   <span class="string">"Fir"</span>,</div><div class="line">    <span class="string">"age"</span> :         <span class="number">35</span>,</div><div class="line">    <span class="string">"about"</span>:        <span class="string">"I like to build cabinets"</span>,</div><div class="line">    <span class="string">"interests"</span>:  [ <span class="string">"forestry"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h2><p>1、使用<code>GET</code>风格的方式检索,<code>GET/index/document/id</code>如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /group/employee/<span class="number">1</span></div><div class="line">GET /group/employee/<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>1、使用DELETE风格的方式删除，<code>DELETE /index/document/id</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE /megacorp/employee/<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><h3 id="直接覆盖全部"><a href="#直接覆盖全部" class="headerlink" title="直接覆盖全部"></a>直接覆盖全部</h3><p>1、使用PUT覆盖当前的文档,使用这种方式会更新整个文档。</p>
<p>2、这种方式和部分更新的最大区别就是增大了网络的开销</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PUT /group/employee/<span class="number">3</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"first_name"</span> :  <span class="string">"TOM"</span>,</div><div class="line">    <span class="string">"last_name"</span> :   <span class="string">"TOM"</span>,</div><div class="line">    <span class="string">"age"</span> :         <span class="number">60</span>,</div><div class="line">    <span class="string">"about"</span>:        <span class="string">"I like to build cabinets"</span>,</div><div class="line">    <span class="string">"interests"</span>:  [ <span class="string">"forestry"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="部分更新"><a href="#部分更新" class="headerlink" title="部分更新"></a>部分更新</h3><p>0、<a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/partial-updates.html" target="_blank" rel="external">https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/partial-updates.html</a></p>
<p>1、文档是不可变的，因此部分的更新也是在内部重复着<em>检索-修改-重建索引</em> 的处理过程 。但是我们对于直接覆盖的方式，可以减少网络传输的时间</p>
<p>2、对指定的文档增加字段，使用<code>doc</code>，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update</div><div class="line">&#123;</div><div class="line">   <span class="string">"doc"</span> : &#123;</div><div class="line">      <span class="string">"tags"</span> : [ <span class="string">"testing"</span> ],</div><div class="line">      <span class="string">"views"</span>: <span class="number">0</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、修改已存在的变量的值，使用<code>ctx._source</code>指定文档中的变量，这里的是将views加1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update</div><div class="line">&#123;</div><div class="line">   <span class="string">"script"</span> : <span class="string">"ctx._source.views+=1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、更新可能不存在的值，如果这个值不存在，那么就添加进去，这个很像MongoDB中的检索，使用<code>upsert</code>完成,如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update</div><div class="line">&#123;</div><div class="line">   <span class="string">"script"</span> : <span class="string">"ctx._source.views+=1"</span>,</div><div class="line">   <span class="string">"upsert"</span>: &#123;</div><div class="line">       <span class="string">"views"</span>: <span class="number">1</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、更新和冲突</p>
<p>1、ElasticSearch在文档更新的时候，每个进程会自动保存版本号<code>_version</code>的值，更改成功之后，如果版本号改变了，那么表示这个文档已经被人更新过了，此时就会更新请求失败。但是我们可以使用指定的参数指定在更新失败之前尝试的更新的次数,<code>retry_on_conflict</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /megacorp/employee/<span class="number">2</span>/_update?retry_on_conflict=<span class="number">5</span> </div><div class="line">&#123;</div><div class="line">   <span class="string">"script"</span> : <span class="string">"ctx._source.views+=1"</span>,</div><div class="line">   <span class="string">"upsert"</span>: &#123;</div><div class="line">       <span class="string">"views"</span>: <span class="number">0</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1、<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ElasticSearch的简单的CRUD&quot;&gt;&lt;a href=&quot;#ElasticSearch的简单的CRUD&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch的简单的CRUD&quot;&gt;&lt;/a&gt;ElasticSearch的简单的CRUD&lt;/
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>es的安装</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/es%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/es的安装/</id>
    <published>2018-09-02T11:33:04.000Z</published>
    <updated>2018-09-02T11:33:23.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h2><p>1、官网下载安装包</p>
<p>2、不能以root身份运行，因此需要新建一个用户专门运行elasticSearch</p>
<pre><code>1、`groupadd esgroup`

2、`useradd esuser -g esgroup -p esuser`

3、将elasticSearch文件夹下的运行身份添加到esuser中：`chown -R esgroup:esuser elasticSearch/ `

4、`su esuser `切换用户

5、进入bin文件夹中，使用`./elasticSearch`
</code></pre><p>3、需要在服务器上开启9200端口，使用<code>firewall-cmd --permanent --add-port=9200/tcp</code></p>
<p>4、如果提示没有开启防火墙，那么使用<code>service firewalld start</code></p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>1、<code>docker pull elasticsearch</code>  ： 直接下载最新版本的即可</p>
<p>2、挂在目录，挂载之前我们需要启动一个容器用于cp指定目录下的内容，否则将不能挂载成功</p>
<pre><code>1、`docker run -e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m&quot; --name myele -p 9200:9200 -d 73e6fdf8bd4f` ：先运行容器，不指定挂载的目录

2、cp容器中的配置到本地的服务器目录

    1、`docker cp myele:/usr/share/elasticsearch/lib   /elasticsearch/lib `： 复制lib目录下的所有文件到本地的/elasticsearch/lib目录

    2、`docker cp myele:/usr/share/elasticsearch/config   /elasticsearch/config` ： 复制config所有文件到本地

    3、`docker cp myele:/usr/share/elasticsearch/plugins   /elasticsearch/plugins`：复制plugins到本地

    4、`docker cp myele:/usr/share/elasticsearch/logs     /elasticsearch/logs` ：复制logs下的文件到本地        

    5、`docker cp myele:/usr/share/elasticsearch/data   /elasticsearch/data`：复制data目录下的文件到本地
</code></pre><p>3、开启9200和9300端口</p>
<p>4、修改：<code>sysctl -w vm.max_map_count=262144</code></p>
<p>5、启动容器并且挂载目录,如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run  -e ES_JAVA_OPTS="-Xmx256m -Xms256m" --name ele -v /elasticsearch/lib:/usr/share/elasticsearch/lib -v /elasticsearch/config:/usr/share/elasticsearch/config -v /elasticsearch/plugins:/usr/share/elasticsearch/plugins -v /elasticsearch/logs:/usr/share/elasticsearch/logs: -v /elasticsearch/data:/usr/share/elasticsearch/data -d -p 9200:9200 -p 9300:9300 73e6fdf8bd4f</div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>1、前台启动： <code>./bin/elasticSearch</code></p>
<p>2、后台启动：<code>./bin/elasticsearch -d</code></p>
<h2 id="指定内存空间"><a href="#指定内存空间" class="headerlink" title="指定内存空间"></a>指定内存空间</h2><h2 id="安装常见错误"><a href="#安装常见错误" class="headerlink" title="安装常见错误"></a>安装常见错误</h2><p>1、<a href="https://blog.csdn.net/qq_21387171/article/details/53577115" target="_blank" rel="external">https://blog.csdn.net/qq_21387171/article/details/53577115</a></p>
<h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><p>1、<code>docker pull kibana</code> ： 默认拉取最新版本的，这里的版本要和elasticsearch的版本一致</p>
<p>2、<code>firewall-cmd --permanent --add-port=5601/tcp</code>：开启服务器上的5601端口</p>
<p>3、<code>docker run --name mykibana -e ELASTICSEARCH_URL=http://some-elasticsearch:9200 -p 5601:5601 -d kibana</code> : 运行kibana，需要指定elasticsearch的地址</p>
<p>4、此时运行成功之后即可访问：<code>http://IP:5601</code></p>
<h2 id="配置中文分词器IK"><a href="#配置中文分词器IK" class="headerlink" title="配置中文分词器IK"></a>配置中文分词器IK</h2><p>1、从github中下载和ElasticSearch对应版本的IK分词器： <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="external">下载地址</a></p>
<p>2、使用maven编译 ： </p>
<pre><code>1、由于我安装docker最新版本的elasticsearch版本是5.6.10，但是下载对应的IK分词器编译出来的是5.6.9版本的，此时就不行，因此我们可以修改下载IK中的pom.xml的elasticsearch版本为5.6.10，如下：
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>5.6.10<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.assembly.descriptor</span>&gt;</span>$&#123;project.basedir&#125;/src/main/assemblies/plugin.xml<span class="tag">&lt;/<span class="name">elasticsearch.assembly.descriptor</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.name</span>&gt;</span>analysis-ik<span class="tag">&lt;/<span class="name">elasticsearch.plugin.name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.classname</span>&gt;</span>org.elasticsearch.plugin.analysis.ik.AnalysisIkPlugin<span class="tag">&lt;/<span class="name">elasticsearch.plugin.classname</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">elasticsearch.plugin.jvm</span>&gt;</span>true<span class="tag">&lt;/<span class="name">elasticsearch.plugin.jvm</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tests.rest.load_packaged</span>&gt;</span>false<span class="tag">&lt;/<span class="name">tests.rest.load_packaged</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">skip.unit.tests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip.unit.tests</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gpg.keyname</span>&gt;</span>4E899B30<span class="tag">&lt;/<span class="name">gpg.keyname</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gpg.useagent</span>&gt;</span>true<span class="tag">&lt;/<span class="name">gpg.useagent</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、修改完成之后使用<code>mvn package</code>命令打包即可</p>
<p>4、将target中的realease目录下的压缩包解压</p>
<p>5、将解压出来的<code>elasticsearch</code>下的所有文件全部拷贝到elasticsearch中的plugins下的<code>ik</code>文件夹中</p>
<p>6、重启即可</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/running-elasticsearch.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/running-elasticsearch.html</a></p>
<p>2、<a href="https://es.xiaoleilu.com/010_Intro/20_Document.html" target="_blank" rel="external">https://es.xiaoleilu.com/010_Intro/20_Document.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装包安装&quot;&gt;&lt;a href=&quot;#安装包安装&quot; class=&quot;headerlink&quot; title=&quot;安装包安装&quot;&gt;&lt;/a&gt;安装包安装&lt;/h2&gt;&lt;p&gt;1、官网下载安装包&lt;/p&gt;
&lt;p&gt;2、不能以root身份运行，因此需要新建一个用户专门运行elasticSearch
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://chenjiabing666.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Java后端学习之路</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/Java%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/Java后端学习之路/</id>
    <published>2018-09-02T11:30:54.000Z</published>
    <updated>2018-09-02T11:31:24.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java后端学习之路"><a href="#Java后端学习之路" class="headerlink" title="Java后端学习之路"></a>Java后端学习之路</h1><p><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="external">转载自https://github.com/xingshaocheng/architect-awesome</a></p>
<ul>
<li>数据结构<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%98%9F%E5%88%97" target="_blank" rel="external">队列</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%9B%86%E5%90%88" target="_blank" rel="external">集合</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%93%BE%E8%A1%A8%E6%95%B0%E7%BB%84" target="_blank" rel="external">链表、数组</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AD%97%E5%85%B8%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84" target="_blank" rel="external">字典、关联数组</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%A0%88" target="_blank" rel="external">栈</a></li>
<li>树<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="external">二叉树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="external">完全二叉树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="external">平衡二叉树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91bst" target="_blank" rel="external">二叉查找树（BST）</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="external">红黑树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#b-bb%E6%A0%91" target="_blank" rel="external">B-，B+，B*树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#lsm-%E6%A0%91" target="_blank" rel="external">LSM 树</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#bitset" target="_blank" rel="external">BitSet</a></li>
</ul>
</li>
<li>常用算法<ul>
<li>排序、查找算法<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" target="_blank" rel="external">选择排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" target="_blank" rel="external">冒泡排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" target="_blank" rel="external">插入排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" target="_blank" rel="external">快速排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="external">归并排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" target="_blank" rel="external">希尔排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A0%86%E6%8E%92%E5%BA%8F" target="_blank" rel="external">堆排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F" target="_blank" rel="external">计数排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%A1%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="external">桶排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F" target="_blank" rel="external">基数排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE" target="_blank" rel="external">二分查找</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F%E5%B7%A5%E5%85%B7" target="_blank" rel="external">Java 中的排序工具</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8" target="_blank" rel="external">布隆过滤器</a></li>
<li>字符串比较<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kmp-%E7%AE%97%E6%B3%95" target="_blank" rel="external">KMP 算法</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88" target="_blank" rel="external">深度优先、广度优先</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95" target="_blank" rel="external">贪心算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95" target="_blank" rel="external">回溯算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%89%AA%E6%9E%9D%E7%AE%97%E6%B3%95" target="_blank" rel="external">剪枝算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92" target="_blank" rel="external">动态规划</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF" target="_blank" rel="external">朴素贝叶斯</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95" target="_blank" rel="external">推荐算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95" target="_blank" rel="external">最小生成树算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95" target="_blank" rel="external">最短路径算法</a></li>
</ul>
</li>
<li>并发<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-%E5%B9%B6%E5%8F%91" target="_blank" rel="external">Java 并发</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%9A%E7%BA%BF%E7%A8%8B" target="_blank" rel="external">多线程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8" target="_blank" rel="external">线程安全</a></li>
<li>一致性、事务<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8B%E5%8A%A1-acid-%E7%89%B9%E6%80%A7" target="_blank" rel="external">事务 ACID 特性</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB" target="_blank" rel="external">事务的隔离级别</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mvcc" target="_blank" rel="external">MVCC</a></li>
</ul>
</li>
<li>锁<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java%E4%B8%AD%E7%9A%84%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E7%B1%BB" target="_blank" rel="external">Java中的锁和同步类</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%AC%E5%B9%B3%E9%94%81--%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81" target="_blank" rel="external">公平锁 &amp; 非公平锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%82%B2%E8%A7%82%E9%94%81" target="_blank" rel="external">悲观锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B9%90%E8%A7%82%E9%94%81--cas" target="_blank" rel="external">乐观锁 &amp; CAS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#aba-%E9%97%AE%E9%A2%98" target="_blank" rel="external">ABA 问题</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#copyonwrite%E5%AE%B9%E5%99%A8" target="_blank" rel="external">CopyOnWrite容器</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ringbuffer" target="_blank" rel="external">RingBuffer</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81--%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81" target="_blank" rel="external">可重入锁 &amp; 不可重入锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%92%E6%96%A5%E9%94%81--%E5%85%B1%E4%BA%AB%E9%94%81" target="_blank" rel="external">互斥锁 &amp; 共享锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%AD%BB%E9%94%81" target="_blank" rel="external">死锁</a></li>
</ul>
</li>
</ul>
</li>
<li>操作系统<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86" target="_blank" rel="external">计算机原理</a></li>
<li>CPU<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98" target="_blank" rel="external">多级缓存</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BF%9B%E7%A8%8B" target="_blank" rel="external">进程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BA%BF%E7%A8%8B" target="_blank" rel="external">线程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%8F%E7%A8%8B" target="_blank" rel="external">协程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#linux" target="_blank" rel="external">Linux</a></li>
</ul>
</li>
<li>设计模式<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99" target="_blank" rel="external">设计模式的六大原则</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#23%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">23种常见设计模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="external">应用场景</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">单例模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">责任链模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mvc" target="_blank" rel="external">MVC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ioc" target="_blank" rel="external">IOC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#aop" target="_blank" rel="external">AOP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#uml" target="_blank" rel="external">UML</a></li>
<li>微服务思想<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B" target="_blank" rel="external">康威定律</a></li>
</ul>
</li>
</ul>
</li>
<li>运维 &amp; 统计 &amp; 技术支持<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%B8%E8%A7%84%E7%9B%91%E6%8E%A7" target="_blank" rel="external">常规监控</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#apm" target="_blank" rel="external">APM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90" target="_blank" rel="external">统计分析</a></li>
<li>持续集成(CI/CD)<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#jenkins" target="_blank" rel="external">Jenkins</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%8E%AF%E5%A2%83%E5%88%86%E7%A6%BB" target="_blank" rel="external">环境分离</a></li>
</ul>
</li>
<li>自动化运维<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ansible" target="_blank" rel="external">Ansible</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#puppet" target="_blank" rel="external">puppet</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#chef" target="_blank" rel="external">chef</a></li>
</ul>
</li>
<li>测试<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tdd-%E7%90%86%E8%AE%BA" target="_blank" rel="external">TDD 理论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95" target="_blank" rel="external">单元测试</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95" target="_blank" rel="external">压力测试</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B" target="_blank" rel="external">全链路压测</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ab-%E7%81%B0%E5%BA%A6%E8%93%9D%E7%BB%BF%E6%B5%8B%E8%AF%95" target="_blank" rel="external">A/B 、灰度、蓝绿测试</a></li>
</ul>
</li>
<li>虚拟化<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kvm" target="_blank" rel="external">KVM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#xen" target="_blank" rel="external">Xen</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openvz" target="_blank" rel="external">OpenVZ</a></li>
</ul>
</li>
<li>容器技术<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#docker" target="_blank" rel="external">Docker</a></li>
</ul>
</li>
<li>云技术<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openstack" target="_blank" rel="external">OpenStack</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#devops" target="_blank" rel="external">DevOps</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86" target="_blank" rel="external">文档管理</a></li>
</ul>
</li>
<li>中间件<ul>
<li>Web Server<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#nginx" target="_blank" rel="external">Nginx</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openresty" target="_blank" rel="external">OpenResty</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#Tengine" target="_blank" rel="external">Tengine</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#apache-httpd" target="_blank" rel="external">Apache Httpd</a></li>
<li>Tomcat<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86" target="_blank" rel="external">架构原理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B0%83%E4%BC%98%E6%96%B9%E6%A1%88" target="_blank" rel="external">调优方案</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#jetty" target="_blank" rel="external">Jetty</a></li>
</ul>
</li>
<li>缓存<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98" target="_blank" rel="external">本地缓存</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98" target="_blank" rel="external">客户端缓存</a></li>
<li>服务端缓存<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web%E7%BC%93%E5%AD%98" target="_blank" rel="external">Web缓存</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#memcached" target="_blank" rel="external">Memcached</a></li>
<li>Redis<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84" target="_blank" rel="external">架构</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5" target="_blank" rel="external">回收策略</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tair" target="_blank" rel="external">Tair</a></li>
</ul>
</li>
<li>消息队列<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF" target="_blank" rel="external">消息总线</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B6%88%E6%81%AF%E7%9A%84%E9%A1%BA%E5%BA%8F" target="_blank" rel="external">消息的顺序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rabbitmq" target="_blank" rel="external">RabbitMQ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rocketmq" target="_blank" rel="external">RocketMQ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#activemq" target="_blank" rel="external">ActiveMQ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kafka" target="_blank" rel="external">Kafka</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#redis-%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81" target="_blank" rel="external">Redis 消息推送</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#zeromq" target="_blank" rel="external">ZeroMQ</a></li>
</ul>
</li>
<li>定时调度<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E6%9C%BA%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6" target="_blank" rel="external">单机定时调度</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6" target="_blank" rel="external">分布式定时调度</a></li>
</ul>
</li>
<li>RPC<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#dubbo" target="_blank" rel="external">Dubbo</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#thrift" target="_blank" rel="external">Thrift</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#grpc" target="_blank" rel="external">gRPC</a></li>
</ul>
</li>
<li>数据库中间件<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sharding-jdbc" target="_blank" rel="external">Sharding Jdbc</a></li>
</ul>
</li>
<li>日志系统<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86" target="_blank" rel="external">日志搜集</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83" target="_blank" rel="external">配置中心</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#api-%E7%BD%91%E5%85%B3" target="_blank" rel="external">API 网关</a></li>
</ul>
</li>
<li>网络<ul>
<li>协议<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#osi-%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">OSI 七层协议</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tcpip" target="_blank" rel="external">TCP/IP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#http" target="_blank" rel="external">HTTP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#http20" target="_blank" rel="external">HTTP2.0</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#https" target="_blank" rel="external">HTTPS</a></li>
</ul>
</li>
<li>网络模型<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#epoll" target="_blank" rel="external">Epoll</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-nio" target="_blank" rel="external">Java NIO</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kqueue" target="_blank" rel="external">kqueue</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5" target="_blank" rel="external">连接和短连接</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%A1%86%E6%9E%B6" target="_blank" rel="external">框架</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%9B%B6%E6%8B%B7%E8%B4%9Dzero-copy" target="_blank" rel="external">零拷贝（Zero-copy）</a></li>
<li>序列化(二进制协议)<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hessian" target="_blank" rel="external">Hessian</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#protobuf" target="_blank" rel="external">Protobuf</a></li>
</ul>
</li>
</ul>
</li>
<li>数据库<ul>
<li>基础理论<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F" target="_blank" rel="external">数据库设计的三大范式</a></li>
</ul>
</li>
<li>MySQL<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8E%9F%E7%90%86" target="_blank" rel="external">原理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#innodb" target="_blank" rel="external">InnoDB</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BC%98%E5%8C%96" target="_blank" rel="external">优化</a></li>
<li>索引<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95-%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95" target="_blank" rel="external">聚集索引, 非聚集索引</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%8D%E5%90%88%E7%B4%A2%E5%BC%95" target="_blank" rel="external">复合索引</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95ahi" target="_blank" rel="external">自适应哈希索引(AHI)</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#explain" target="_blank" rel="external">explain</a></li>
</ul>
</li>
<li>NoSQL<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mongodb" target="_blank" rel="external">MongoDB</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hbase" target="_blank" rel="external">Hbase</a></li>
</ul>
</li>
</ul>
</li>
<li>搜索引擎<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86" target="_blank" rel="external">搜索引擎原理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#lucene" target="_blank" rel="external">Lucene</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#elasticsearch" target="_blank" rel="external">Elasticsearch</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#solr" target="_blank" rel="external">Solr</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sphinx" target="_blank" rel="external">sphinx</a></li>
</ul>
</li>
<li>性能<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E8%AE%BA" target="_blank" rel="external">性能优化方法论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%B9%E9%87%8F%E8%AF%84%E4%BC%B0" target="_blank" rel="external">容量评估</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cdn-%E7%BD%91%E7%BB%9C" target="_blank" rel="external">CDN 网络</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BF%9E%E6%8E%A5%E6%B1%A0" target="_blank" rel="external">连接池</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98" target="_blank" rel="external">性能调优</a></li>
</ul>
</li>
<li>大数据<ul>
<li>流式计算<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#storm" target="_blank" rel="external">Storm</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#flink" target="_blank" rel="external">Flink</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kafka-stream" target="_blank" rel="external">Kafka Stream</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-1" target="_blank" rel="external">应用场景</a></li>
</ul>
</li>
<li>Hadoop<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hdfs" target="_blank" rel="external">HDFS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mapreduce" target="_blank" rel="external">MapReduce</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#yarn" target="_blank" rel="external">Yarn</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#spark" target="_blank" rel="external">Spark</a></li>
</ul>
</li>
<li>安全<ul>
<li>web 安全<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#xss" target="_blank" rel="external">XSS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#csrf" target="_blank" rel="external">CSRF</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sql-%E6%B3%A8%E5%85%A5" target="_blank" rel="external">SQL 注入</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hash-dos" target="_blank" rel="external">Hash Dos</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5" target="_blank" rel="external">脚本注入</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7" target="_blank" rel="external">漏洞扫描工具</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%AA%8C%E8%AF%81%E7%A0%81" target="_blank" rel="external">验证码</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ddos-%E9%98%B2%E8%8C%83" target="_blank" rel="external">DDoS 防范</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%94%A8%E6%88%B7%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF%E4%BF%9D%E6%8A%A4" target="_blank" rel="external">用户隐私信息保护</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E" target="_blank" rel="external">序列化漏洞</a></li>
<li>加密解密<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86" target="_blank" rel="external">对称加密</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95" target="_blank" rel="external">哈希算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86" target="_blank" rel="external">非对称加密</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8" target="_blank" rel="external">服务器安全</a></li>
<li>数据安全<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD" target="_blank" rel="external">数据备份</a></li>
</ul>
</li>
<li>网络隔离<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%86%85%E5%A4%96%E7%BD%91%E5%88%86%E7%A6%BB" target="_blank" rel="external">内外网分离</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%99%BB%E5%BD%95%E8%B7%B3%E6%9D%BF%E6%9C%BA" target="_blank" rel="external">登录跳板机</a></li>
</ul>
</li>
<li>授权、认证<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rbac" target="_blank" rel="external">RBAC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#oauth20" target="_blank" rel="external">OAuth2.0</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8F%8C%E5%9B%A0%E7%B4%A0%E8%AE%A4%E8%AF%812fa" target="_blank" rel="external">双因素认证（2FA）</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95sso" target="_blank" rel="external">单点登录(SSO)</a></li>
</ul>
</li>
</ul>
</li>
<li>常用开源框架<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">开源协议</a></li>
<li>日志框架<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#log4jlog4j2" target="_blank" rel="external">Log4j、Log4j2</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#logback" target="_blank" rel="external">Logback</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#orm" target="_blank" rel="external">ORM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6" target="_blank" rel="external">网络框架</a></li>
<li>Web 框架<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#spring-%E5%AE%B6%E6%97%8F" target="_blank" rel="external">Spring 家族</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B7%A5%E5%85%B7%E6%A1%86%E6%9E%B6" target="_blank" rel="external">工具框架</a></li>
</ul>
</li>
<li>分布式设计<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%89%A9%E5%B1%95%E6%80%A7%E8%AE%BE%E8%AE%A1" target="_blank" rel="external">扩展性设计</a></li>
<li>稳定性 &amp; 高可用<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%A1%AC%E4%BB%B6%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1" target="_blank" rel="external">硬件负载均衡</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BD%AF%E4%BB%B6%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1" target="_blank" rel="external">软件负载均衡</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%99%90%E6%B5%81" target="_blank" rel="external">限流</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%94%E7%94%A8%E5%B1%82%E5%AE%B9%E7%81%BE" target="_blank" rel="external">应用层容灾</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B7%A8%E6%9C%BA%E6%88%BF%E5%AE%B9%E7%81%BE" target="_blank" rel="external">跨机房容灾</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%B9%E7%81%BE%E6%BC%94%E7%BB%83%E6%B5%81%E7%A8%8B" target="_blank" rel="external">容灾演练流程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B9%B3%E6%BB%91%E5%90%AF%E5%8A%A8" target="_blank" rel="external">平滑启动</a></li>
</ul>
</li>
<li>数据库扩展<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">读写分离模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E7%89%87%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">分片模式</a></li>
</ul>
</li>
<li>服务治理<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0" target="_blank" rel="external">服务注册与发现</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6" target="_blank" rel="external">服务路由控制</a></li>
</ul>
</li>
<li>分布式一致<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cap-%E4%B8%8E-base-%E7%90%86%E8%AE%BA" target="_blank" rel="external">CAP 与 BASE 理论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81" target="_blank" rel="external">分布式锁</a></li>
<li>分布式一致性算法<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#paxos" target="_blank" rel="external">PAXOS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#zab" target="_blank" rel="external">Zab</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#raft" target="_blank" rel="external">Raft</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#gossip" target="_blank" rel="external">Gossip</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4" target="_blank" rel="external">两阶段提交、多阶段提交</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B9%82%E7%AD%89" target="_blank" rel="external">幂等</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%96%B9%E6%A1%88" target="_blank" rel="external">分布式一致方案</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F-leader-%E8%8A%82%E7%82%B9%E9%80%89%E4%B8%BE" target="_blank" rel="external">分布式 Leader 节点选举</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tcctryconfirmcancel-%E6%9F%94%E6%80%A7%E4%BA%8B%E5%8A%A1" target="_blank" rel="external">TCC(Try/Confirm/Cancel) 柔性事务</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">分布式文件系统</a></li>
<li>唯一ID 生成<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80id" target="_blank" rel="external">全局唯一ID</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95" target="_blank" rel="external">一致性Hash算法</a></li>
</ul>
</li>
<li>设计思想 &amp; 开发模式<ul>
<li>DDD(Domain-driven Design - 领域驱动设计)<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E8%81%8C%E8%B4%A3%E5%88%86%E7%A6%BBcqrs" target="_blank" rel="external">命令查询职责分离(CQRS)</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B4%AB%E8%A1%80%E5%85%85%E8%A1%80%E6%A8%A1%E5%9E%8B" target="_blank" rel="external">贫血，充血模型</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#actor-%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">Actor 模式</a></li>
<li>响应式编程<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#reactor" target="_blank" rel="external">Reactor</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rxjava" target="_blank" rel="external">RxJava</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#vertx" target="_blank" rel="external">Vert.x</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#dodaf20" target="_blank" rel="external">DODAF2.0</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#serverless" target="_blank" rel="external">Serverless</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#service-mesh" target="_blank" rel="external">Service Mesh</a></li>
</ul>
</li>
<li>项目管理<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E8%AF%84%E5%AE%A1" target="_blank" rel="external">架构评审</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%87%8D%E6%9E%84" target="_blank" rel="external">重构</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83" target="_blank" rel="external">代码规范</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BB%A3%E7%A0%81-review" target="_blank" rel="external">代码 Review</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rup" target="_blank" rel="external">RUP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%9C%8B%E6%9D%BF%E7%AE%A1%E7%90%86" target="_blank" rel="external">看板管理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#scrum" target="_blank" rel="external">SCRUM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91" target="_blank" rel="external">敏捷开发</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8Bxp" target="_blank" rel="external">极限编程（XP）</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B" target="_blank" rel="external">结对编程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#pdca-%E5%BE%AA%E7%8E%AF%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86" target="_blank" rel="external">PDCA 循环质量管理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#fmea%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">FMEA管理模式</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%80%9A%E7%94%A8%E4%B8%9A%E5%8A%A1%E6%9C%AF%E8%AF%AD" target="_blank" rel="external">通用业务术语</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF" target="_blank" rel="external">技术趋势</a></li>
<li>政策、法规<ul>
<li>法律<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%A5%E6%A0%BC%E9%81%B5%E5%AE%88%E5%88%91%E6%B3%95253%E6%B3%95%E6%9D%A1" target="_blank" rel="external">严格遵守刑法253法条</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E5%B8%88%E7%B4%A0%E8%B4%A8" target="_blank" rel="external">架构师素质</a></li>
<li>团队管理<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8B%9B%E8%81%98" target="_blank" rel="external">招聘</a></li>
</ul>
</li>
<li>资讯<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%A1%8C%E4%B8%9A%E8%B5%84%E8%AE%AF" target="_blank" rel="external">行业资讯</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%AC%E4%BC%97%E5%8F%B7%E5%88%97%E8%A1%A8" target="_blank" rel="external">公众号列表</a></li>
<li>博客<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9B%A2%E9%98%9F%E5%8D%9A%E5%AE%A2" target="_blank" rel="external">团队博客</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2" target="_blank" rel="external">个人博客</a></li>
</ul>
</li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BB%BC%E5%90%88%E9%97%A8%E6%88%B7%E7%A4%BE%E5%8C%BA" target="_blank" rel="external">综合门户、社区</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%97%AE%E7%AD%94%E8%AE%A8%E8%AE%BA%E7%B1%BB%E7%A4%BE%E5%8C%BA" target="_blank" rel="external">问答、讨论类社区</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90" target="_blank" rel="external">行业数据分析</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%93%E9%A1%B9%E7%BD%91%E7%AB%99" target="_blank" rel="external">专项网站</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%B6%E4%BB%96%E7%B1%BB" target="_blank" rel="external">其他类</a></li>
<li>推荐参考书<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9C%A8%E7%BA%BF%E7%94%B5%E5%AD%90%E4%B9%A6" target="_blank" rel="external">在线电子书</a></li>
<li>纸质书<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BC%80%E5%8F%91%E6%96%B9%E9%9D%A2" target="_blank" rel="external">开发方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E6%96%B9%E9%9D%A2" target="_blank" rel="external">架构方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86%E6%96%B9%E9%9D%A2" target="_blank" rel="external">技术管理方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-1" target="_blank" rel="external">基础理论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B7%A5%E5%85%B7%E6%96%B9%E9%9D%A2" target="_blank" rel="external">工具方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%96%B9%E9%9D%A2" target="_blank" rel="external">大数据方面</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>技术资源<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BC%80%E6%BA%90%E8%B5%84%E6%BA%90" target="_blank" rel="external">开源资源</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%89%8B%E5%86%8C%E6%96%87%E6%A1%A3%E6%95%99%E7%A8%8B" target="_blank" rel="external">手册、文档、教程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9C%A8%E7%BA%BF%E8%AF%BE%E5%A0%82" target="_blank" rel="external">在线课堂</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BC%9A%E8%AE%AE%E6%B4%BB%E5%8A%A8" target="_blank" rel="external">会议、活动</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%B8%E7%94%A8app" target="_blank" rel="external">常用APP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%89%BE%E5%B7%A5%E4%BD%9C" target="_blank" rel="external">找工作</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B7%A5%E5%85%B7" target="_blank" rel="external">工具</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1" target="_blank" rel="external">代码托管</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1" target="_blank" rel="external">文件服务</a></li>
<li>综合云服务商<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#vps" target="_blank" rel="external">VPS</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul>
<li><a href="https://www.cnblogs.com/lemon-flm/p/7877898.html" target="_blank" rel="external">《java队列——queue详细分析》</a><ul>
<li>非阻塞队列：ConcurrentLinkedQueue(无界线程安全)，采用CAS机制（compareAndSwapObject原子操作）。</li>
<li>阻塞队列：ArrayBlockingQueue(有界)、LinkedBlockingQueue（无界）、DelayQueue、PriorityBlockingQueue，采用锁机制；使用 ReentrantLock 锁。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/mantu/p/5802393.html" target="_blank" rel="external">《LinkedList、ConcurrentLinkedQueue、LinkedBlockingQueue对比分析》</a></li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul>
<li><a href="https://blog.csdn.net/qq_33642117/article/details/52040345" target="_blank" rel="external">《Java Set集合的详解》</a></li>
</ul>
<h2 id="链表、数组"><a href="#链表、数组" class="headerlink" title="链表、数组"></a>链表、数组</h2><ul>
<li><a href="https://blog.csdn.net/wz249863091/article/details/52853360" target="_blank" rel="external">《Java集合详解–什么是List》</a></li>
</ul>
<h2 id="字典、关联数组"><a href="#字典、关联数组" class="headerlink" title="字典、关联数组"></a>字典、关联数组</h2><ul>
<li><a href="https://baike.xsoftlab.net/view/250.html" target="_blank" rel="external">《Java map 详解 - 用法、遍历、排序、常用API等》</a></li>
</ul>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul>
<li><a href="https://blog.csdn.net/javazejian/article/details/53362993" target="_blank" rel="external">《java数据结构与算法之栈（Stack）设计与实现》</a></li>
<li><a href="http://www.runoob.com/java/java-stack-class.html" target="_blank" rel="external">《Java Stack 类》</a></li>
<li>《java stack的详细实现分析》<ul>
<li>Stack 是线程安全的。</li>
<li>内部使用数组保存数据，不够时翻倍。</li>
</ul>
</li>
</ul>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>每个节点最多有两个叶子节点。</p>
<ul>
<li><a href="https://blog.csdn.net/cai2016/article/details/52589952" target="_blank" rel="external">《二叉树》</a></li>
</ul>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><ul>
<li>《完全二叉树》<ul>
<li>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</li>
</ul>
</li>
</ul>
<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<ul>
<li><a href="http://www.cnblogs.com/polly333/p/4798944.html" target="_blank" rel="external">《浅谈数据结构-平衡二叉树》</a></li>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 八 平衡查找树之2-3树》</a></li>
</ul>
<h3 id="二叉查找树（BST）"><a href="#二叉查找树（BST）" class="headerlink" title="二叉查找树（BST）"></a>二叉查找树（BST）</h3><p>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree）。</p>
<ul>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 七 二叉查找树》</a></li>
</ul>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul>
<li>《最容易懂得红黑树》<ul>
<li>添加阶段后，左旋或者右旋从而再次达到平衡。</li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" target="_blank" rel="external">《浅谈算法和数据结构: 九 平衡查找树之红黑树》</a></li>
</ul>
<h3 id="B-，B-，B-树"><a href="#B-，B-，B-树" class="headerlink" title="B-，B+，B*树"></a>B-，B+，B*树</h3><p>MySQL是基于B+树聚集索引组织表</p>
<ul>
<li><a href="https://blog.csdn.net/aqzwss/article/details/53074186" target="_blank" rel="external">《B-树，B+树，B*树详解》</a></li>
<li>《B-树，B+树与B*树的优缺点比较》<ul>
<li>B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。</li>
</ul>
</li>
</ul>
<h3 id="LSM-树"><a href="#LSM-树" class="headerlink" title="LSM 树"></a>LSM 树</h3><p>LSM（Log-Structured Merge-Trees）和 B+ 树相比，是牺牲了部分读的性能来换取写的性能(通过批量写入)，实现读写之间的。 Hbase、LevelDB、Tair（Long DB）、nessDB 采用 LSM 树的结构。LSM可以快速建立索引。</p>
<ul>
<li><a href="https://blog.csdn.net/dbanote/article/details/8897599" target="_blank" rel="external">《LSM树 VS B+树》</a><ul>
<li>B+ 树读性能好，但由于需要有序结构，当key比较分散时，磁盘寻道频繁，造成写性能。</li>
<li>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/u014774781/article/details/52105708" target="_blank" rel="external">《LSM树（Log-Structured Merge Tree）存储引擎》</a><ul>
<li>极端的说，基于LSM树实现的HBase的写性能比MySQL高了一个数量级，读性能低了一个数量级。</li>
<li>优化方式：Bloom filter 替代二分查找；compact 小数位大树，提高查询性能。</li>
<li>Hbase 中，内存中达到一定阈值后，整体flush到磁盘上、形成一个文件（B+数），HDFS不支持update操作，所以Hbase做整体flush而不是merge update。flush到磁盘上的小树，定期会合并成一个大树。</li>
</ul>
</li>
</ul>
<h2 id="BitSet"><a href="#BitSet" class="headerlink" title="BitSet"></a>BitSet</h2><p>经常用于大规模数据的排重检查。</p>
<ul>
<li><a href="http://www.runoob.com/java/java-bitset-class.html" target="_blank" rel="external">《Java Bitset类》</a></li>
<li><a href="https://blog.csdn.net/caiandyong/article/details/51581160" target="_blank" rel="external">《Java BitSet（位集）》</a></li>
</ul>
<h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><ul>
<li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="external">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li>
</ul>
<h2 id="排序、查找算法"><a href="#排序、查找算法" class="headerlink" title="排序、查找算法"></a>排序、查找算法</h2><ul>
<li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="external">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li>
</ul>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul>
<li>《Java中的经典算法之选择排序（SelectionSort）》<ul>
<li>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。</li>
</ul>
</li>
</ul>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul>
<li>《冒泡排序的2种写法》<ul>
<li>相邻元素前后交换、把最大的排到最后。</li>
<li>时间复杂度 O(n²)</li>
</ul>
</li>
</ul>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul>
<li><a href="https://www.cnblogs.com/hapjin/p/5517667.html" target="_blank" rel="external">《排序算法总结之插入排序》</a></li>
</ul>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul>
<li>《坐在马桶上看算法：快速排序》<ul>
<li>一侧比另外一次都大或小。</li>
</ul>
</li>
</ul>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul>
<li>《图解排序算法(四)之归并排序》<ul>
<li>分而治之，分成小份排序，在合并(重建一个新空间进行复制)。</li>
</ul>
</li>
</ul>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>TODO</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul>
<li>《图解排序算法(三)之堆排序》<ul>
<li>排序过程就是构建最大堆的过程，最大堆：每个结点的值都大于或等于其左右孩子结点的值，堆顶元素是最大值。</li>
</ul>
</li>
</ul>
<h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><ul>
<li>《计数排序和桶排序》<ul>
<li>和桶排序过程比较像，差别在于桶的数量。</li>
</ul>
</li>
</ul>
<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><ul>
<li><a href="http://blog.51cto.com/ahalei/1362789" target="_blank" rel="external">《【啊哈！算法】最快最简单的排序——桶排序》</a></li>
<li>《排序算法（三）：计数排序与桶排序》<ul>
<li>桶排序将[0,1)区间划分为n个相同的大小的子区间，这些子区间被称为桶。</li>
<li>每个桶单独进行排序，然后再遍历每个桶。</li>
</ul>
</li>
</ul>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>按照个位、十位、百位、…依次来排。</p>
<ul>
<li><a href="https://blog.csdn.net/lemon_tree12138/article/details/51695211" target="_blank" rel="external">《排序算法系列：基数排序》</a></li>
<li><a href="https://www.cnblogs.com/skywang12345/p/3603669.html" target="_blank" rel="external">《基数排序》</a></li>
</ul>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><ul>
<li><a href="https://www.cnblogs.com/coderising/p/5708632.html" target="_blank" rel="external">《二分查找(java实现)》</a><ul>
<li>要求待查找的序列有序。</li>
<li>时间复杂度 O(logN)。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/maoyuanming0806/article/details/78176957" target="_blank" rel="external">《java实现二分查找-两种方式》</a><ul>
<li>while + 递归。</li>
</ul>
</li>
</ul>
<h3 id="Java-中的排序工具"><a href="#Java-中的排序工具" class="headerlink" title="Java 中的排序工具"></a>Java 中的排序工具</h3><ul>
<li>《Arrays.sort和Collections.sort实现原理解析》<ul>
<li>Collections.sort算法调用的是合并排序。</li>
<li>Arrays.sort() 采用了2种排序算法 – 基本类型数据使用快速排序法，对象数组使用归并排序。</li>
</ul>
</li>
</ul>
<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>常用于大数据的排重，比如email，url 等。 核心原理：将每条数据通过计算产生一个指纹（一个字节或多个字节，但一定比原始数据要少很多），其中每一位都是通过随机计算获得，在将指纹映射到一个大的按位存储的空间中。注意：会有一定的错误率。 优点：空间和时间效率都很高。 缺点：随着存入的元素数量增加，误算率随之增加。</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000002729689" target="_blank" rel="external">《布隆过滤器 – 空间效率很高的数据结构》</a></li>
<li><a href="https://blog.csdn.net/zdxiq000/article/details/57626464" target="_blank" rel="external">《大量数据去重：Bitmap和布隆过滤器(Bloom Filter)》</a></li>
<li>《基于Redis的布隆过滤器的实现》<ul>
<li>基于 Redis 的 Bitmap 数据结构。</li>
</ul>
</li>
<li>《网络爬虫：URL去重策略之布隆过滤器(BloomFilter)的使用》<ul>
<li>使用Java中的 BitSet 类 和 加权和hash算法。</li>
</ul>
</li>
</ul>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><p>KMP：Knuth-Morris-Pratt算法（简称KMP） 核心原理是利用一个“部分匹配表”，跳过已经匹配过的元素。</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="external">《字符串匹配的KMP算法》</a></li>
</ul>
<h2 id="深度优先、广度优先"><a href="#深度优先、广度优先" class="headerlink" title="深度优先、广度优先"></a>深度优先、广度优先</h2><ul>
<li><a href="https://www.cnblogs.com/0kk470/p/7555033.html" target="_blank" rel="external">《广度优先搜索BFS和深度优先搜索DFS》</a></li>
</ul>
<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><ul>
<li><a href="https://www.cnblogs.com/MrSaver/p/8641971.html" target="_blank" rel="external">《算法：贪婪算法基础》</a></li>
<li><a href="https://blog.csdn.net/a345017062/article/details/52443781" target="_blank" rel="external">《常见算法及问题场景——贪心算法》</a></li>
</ul>
<h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><ul>
<li><a href="https://blog.csdn.net/qfikh/article/details/51960331" target="_blank" rel="external">《 五大常用算法之四：回溯法》</a></li>
</ul>
<h2 id="剪枝算法"><a href="#剪枝算法" class="headerlink" title="剪枝算法"></a>剪枝算法</h2><ul>
<li><a href="https://blog.csdn.net/luningcsdn/article/details/50930276" target="_blank" rel="external">《α-β剪枝算法》</a></li>
</ul>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ul>
<li><a href="https://www.cnblogs.com/little-YTMM/p/5372680.html" target="_blank" rel="external">《详解动态规划——邹博讲动态规划》</a></li>
<li><a href="https://blog.csdn.net/yao_zi_jie/article/details/54580283" target="_blank" rel="external">《动态规划算法的个人理解》</a></li>
</ul>
<h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><ul>
<li><a href="https://blog.csdn.net/amds123/article/details/70173402" target="_blank" rel="external">《带你搞懂朴素贝叶斯分类算法》</a><ul>
<li>P(B|A)=P(A|B)P(B)/P(A)</li>
</ul>
</li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="external">《贝叶斯推断及其互联网应用1》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html" target="_blank" rel="external">《贝叶斯推断及其互联网应用2》</a></li>
</ul>
<h2 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h2><ul>
<li><a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01" target="_blank" rel="external">《推荐算法综述》</a></li>
<li><a href="https://www.oschina.net/news/51297/top-10-open-source-recommendation-systems" target="_blank" rel="external">《TOP 10 开源的推荐系统简介》</a></li>
</ul>
<h2 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h2><ul>
<li><a href="https://blog.csdn.net/luoshixian099/article/details/51908175" target="_blank" rel="external">《算法导论–最小生成树（Kruskal和Prim算法）》</a></li>
</ul>
<h2 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h2><ul>
<li><a href="https://blog.csdn.net/qq_35644234/article/details/60870719" target="_blank" rel="external">《Dijkstra算法详解》</a></li>
</ul>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="Java-并发"><a href="#Java-并发" class="headerlink" title="Java 并发"></a>Java 并发</h2><ul>
<li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="external">Java 并发知识合集</a></li>
<li><a href="https://github.com/CL0610/Java-concurrency/blob/master/Java%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.png" target="_blank" rel="external">JAVA并发知识图谱</a></li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul>
<li><a href="http://www.importnew.com/18459.html" target="_blank" rel="external">《40个Java多线程问题总结》</a></li>
</ul>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul>
<li><a href="https://www.cnblogs.com/zhanht/p/5450325.html" target="_blank" rel="external">《Java并发编程——线程安全及解决机制简介》</a></li>
</ul>
<h2 id="一致性、事务"><a href="#一致性、事务" class="headerlink" title="一致性、事务"></a>一致性、事务</h2><h3 id="事务-ACID-特性"><a href="#事务-ACID-特性" class="headerlink" title="事务 ACID 特性"></a>事务 ACID 特性</h3><ul>
<li><a href="https://blog.csdn.net/u012440687/article/details/52116108" target="_blank" rel="external">《数据库事务ACID特性》</a></li>
</ul>
<h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul>
<li>未提交读：一个事务可以读取另一个未提交的数据，容易出现脏读的情况。</li>
<li>读提交：一个事务等另外一个事务提交之后才可以读取数据，但会出现不可重复读的情况（多次读取的数据不一致），读取过程中出现UPDATE操作，会多。（大多数数据库默认级别是RC，比如SQL Server，Oracle），读取的时候不可以修改。</li>
<li>可重复读： 同一个事务里确保每次读取的时候，获得的是同样的数据，但不保障原始数据被其他事务更新（幻读），Mysql InnoDB 就是这个级别。</li>
<li>序列化：所有事物串行处理（牺牲了效率）</li>
<li><a href="https://blog.csdn.net/qq_33290787/article/details/51924963" target="_blank" rel="external">《理解事务的4种隔离级别》</a></li>
<li><a href="https://www.cnblogs.com/z-sm/p/7245981.html" target="_blank" rel="external">数据库事务的四大特性及事务隔离级别</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html" target="_blank" rel="external">《MySQL的InnoDB的幻读问题 》</a><ul>
<li>幻读的例子非常清楚。</li>
<li>通过 SELECT … FOR UPDATE 解决。</li>
</ul>
</li>
<li><a href="http://database.51cto.com/art/201804/570101.htm" target="_blank" rel="external">《一篇文章带你读懂MySQL和InnoDB》</a><ul>
<li>图解脏读、不可重复读、幻读问题。</li>
</ul>
</li>
</ul>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><ul>
<li><a href="https://www.cnblogs.com/chenpingzhao/p/5065316.html" target="_blank" rel="external">《【mysql】关于innodb中MVCC的一些理解》</a><ul>
<li>innodb 中 MVCC 用在 Repeatable-Read 隔离级别。</li>
<li>MVCC 会产生幻读问题（更新时异常。）</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/whoamiyang/article/details/51901888" target="_blank" rel="external">《轻松理解MYSQL MVCC 实现机制》</a><ul>
<li>通过隐藏版本列来实现 MVCC 控制，一列记录创建时间、一列记录删除时间，这里的时间</li>
<li>每次只操作比当前版本小（或等于）的 行。</li>
</ul>
</li>
</ul>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="Java中的锁和同步类"><a href="#Java中的锁和同步类" class="headerlink" title="Java中的锁和同步类"></a>Java中的锁和同步类</h3><ul>
<li><a href="https://www.cnblogs.com/qifengshi/p/6831055.html" target="_blank" rel="external">《Java中的锁分类》</a><ul>
<li>主要包括 synchronized、ReentrantLock、和 ReadWriteLock。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/waterystone/p/4920797.html" target="_blank" rel="external">《Java并发之AQS详解》</a></li>
<li><a href="http://cuisuqiang.iteye.com/blog/2020146" target="_blank" rel="external">《Java中信号量 Semaphore》</a><ul>
<li>有数量控制</li>
<li>申请用 acquire，申请不要则阻塞；释放用 release。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/davidwang456/p/6094947.html" target="_blank" rel="external">《java开发中的Mutex vs Semaphore》</a><ul>
<li>简单的说 就是Mutex是排它的，只有一个可以获取到资源， Semaphore也具有排它性，但可以定义多个可以获取的资源的对象。</li>
</ul>
</li>
</ul>
<h3 id="公平锁-amp-非公平锁"><a href="#公平锁-amp-非公平锁" class="headerlink" title="公平锁 &amp; 非公平锁"></a>公平锁 &amp; 非公平锁</h3><p>公平锁的作用就是严格按照线程启动的顺序来执行的，不允许其他线程插队执行的；而非公平锁是允许插队的。</p>
<ul>
<li>《公平锁与非公平锁》<ul>
<li>默认情况下 ReentrantLock 和 synchronized 都是非公平锁。ReentrantLock 可以设置成公平锁。</li>
</ul>
</li>
</ul>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁如果使用不当（锁的条数过多），会引起服务大面积等待。推荐优先使用乐观锁+重试。</p>
<ul>
<li><a href="https://www.cnblogs.com/zhiqian-ali/p/6200874.html" target="_blank" rel="external">《【MySQL】悲观锁&amp;乐观锁》</a><ul>
<li>乐观锁的方式：版本号+重试方式</li>
<li>悲观锁：通过 select … for update 进行行锁(不可读、不可写，share 锁可读不可写)。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/Lawson/p/5008741.html" target="_blank" rel="external">《Mysql查询语句使用select.. for update导致的数据库死锁分析》</a><ul>
<li>mysql的innodb存储引擎实务锁虽然是锁行，但它内部是锁索引的。</li>
<li>锁相同数据的不同索引条件可能会引起死锁。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/zejin2008/p/5262751.html" target="_blank" rel="external">《Mysql并发时经典常见的死锁原因及解决方法》</a></li>
</ul>
<h3 id="乐观锁-amp-CAS"><a href="#乐观锁-amp-CAS" class="headerlink" title="乐观锁 &amp; CAS"></a>乐观锁 &amp; CAS</h3><ul>
<li>《乐观锁的一种实现方式——CAS》<ul>
<li>和MySQL乐观锁方式相似，只不过是通过和原值进行比较。</li>
</ul>
</li>
</ul>
<h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><p>由于高并发，在CAS下，更新后可能此A非彼A。通过版本号可以解决，类似于上文Mysql 中提到的的乐观锁。</p>
<ul>
<li><a href="https://www.cnblogs.com/549294286/p/3766717.html" target="_blank" rel="external">《Java CAS 和ABA问题》</a></li>
<li>《Java 中 ABA问题及避免》<ul>
<li>AtomicStampedReference 和 AtomicStampedReference。</li>
</ul>
</li>
</ul>
<h3 id="CopyOnWrite容器"><a href="#CopyOnWrite容器" class="headerlink" title="CopyOnWrite容器"></a>CopyOnWrite容器</h3><p>可以对CopyOnWrite容器进行并发的读，而不需要加锁。CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，不适合需要数据强一致性的场景。</p>
<ul>
<li><a href="https://www.cnblogs.com/hapjin/p/4840107.html" target="_blank" rel="external">《JAVA中写时复制(Copy-On-Write)Map实现》</a><ul>
<li>实现读写分离，读取发生在原始数据上，写入发生在副本上。</li>
<li>不用加锁，通过最终一致实现一致性。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/a494303877/article/details/53404623" target="_blank" rel="external">《聊聊并发-Java中的Copy-On-Write容器》</a></li>
</ul>
<h3 id="RingBuffer"><a href="#RingBuffer" class="headerlink" title="RingBuffer"></a>RingBuffer</h3><ul>
<li><a href="http://www.cnblogs.com/l00l/p/4115001.html" target="_blank" rel="external">《线程安全的无锁RingBuffer的实现【一个读线程，一个写线程】》</a></li>
</ul>
<h3 id="可重入锁-amp-不可重入锁"><a href="#可重入锁-amp-不可重入锁" class="headerlink" title="可重入锁 &amp; 不可重入锁"></a>可重入锁 &amp; 不可重入锁</h3><ul>
<li><a href="https://www.cnblogs.com/dj3839/p/6580765.html" target="_blank" rel="external">《可重入锁和不可重入锁》</a><ul>
<li>通过简单代码举例说明可重入锁和不可重入锁。</li>
<li>可重入锁指同一个线程可以再次获得之前已经获得的锁。</li>
<li>可重入锁可以用户避免死锁。</li>
<li>Java中的可重入锁：synchronized 和 java.util.concurrent.locks.ReentrantLock</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/baizhanshi/p/7211802.html" target="_blank" rel="external">《ReenTrantLock可重入锁（和synchronized的区别）总结》</a><ul>
<li>synchronized 使用方便，编译器来加锁，是非公平锁。</li>
<li>ReenTrantLock 使用灵活，锁的公平性可以定制。</li>
<li>相同加锁场景下，推荐使用 synchronized。</li>
</ul>
</li>
</ul>
<h3 id="互斥锁-amp-共享锁"><a href="#互斥锁-amp-共享锁" class="headerlink" title="互斥锁 &amp; 共享锁"></a>互斥锁 &amp; 共享锁</h3><p>互斥锁：同时只能有一个线程获得锁。比如，ReentrantLock 是互斥锁，ReadWriteLock 中的写锁是互斥锁。 共享锁：可以有多个线程同时或的锁。比如，Semaphore、CountDownLatch 是共享锁，ReadWriteLock 中的读锁是共享锁。</p>
<ul>
<li><a href="https://www.cnblogs.com/liang1101/p/6475555.html" target="_blank" rel="external">《ReadWriteLock场景应用》</a></li>
</ul>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul>
<li><a href="https://blog.csdn.net/yunfenglw/article/details/45950305" target="_blank" rel="external">《“死锁”四个必要条件的合理解释》</a><ul>
<li>互斥、持有、不可剥夺、环形等待。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/u014039577/article/details/52351626" target="_blank" rel="external">Java如何查看死锁？</a><ul>
<li>JConsole 可以识别死锁。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/bohu83/article/details/51135061" target="_blank" rel="external">java多线程系列：死锁及检测</a><ul>
<li>jstack 可以显示死锁。</li>
</ul>
</li>
</ul>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h2><ul>
<li><a href="https://segmentfault.com/a/1190000003692840" target="_blank" rel="external">《操作系统基础知识——操作系统的原理，类型和结构》</a></li>
</ul>
<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><h3 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h3><p>典型的 CPU 有三级缓存，距离核心越近，速度越快，空间越小。L1 一般 32k，L2 一般 256k，L3 一般12M。内存速度需要200个 CPU 周期，CPU 缓存需要1个CPU周期。</p>
<ul>
<li><a href="https://blog.csdn.net/zero__007/article/details/54089730" target="_blank" rel="external">《从Java视角理解CPU缓存和伪共享》</a></li>
</ul>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>TODO</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul>
<li><a href="https://blog.csdn.net/asdf_1024/article/details/78978437" target="_blank" rel="external">《线程的生命周期及状态转换详解》</a></li>
</ul>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><ul>
<li>《终结python协程—-从yield到actor模型的实现》<ul>
<li>线程的调度是由操作系统负责，协程调度是程序自行负责</li>
<li>与线程相比，协程减少了无谓的操作系统切换.</li>
<li>实际上当遇到IO操作时做切换才更有意义，（因为IO操作不用占用CPU），如果没遇到IO操作，按照时间片切换.</li>
</ul>
</li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="external">《Linux 命令大全》</a></li>
</ul>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ul>
<li>《设计模式的六大原则》<ul>
<li>开闭原则：对扩展开放,对修改关闭，多使用抽象类和接口。</li>
<li>里氏替换原则：基类可以被子类替换，使用抽象类继承,不使用具体类继承。</li>
<li>依赖倒转原则：要依赖于抽象,不要依赖于具体，针对接口编程,不针对实现编程。</li>
<li>接口隔离原则：使用多个隔离的接口,比使用单个接口好，建立最小的接口。</li>
<li>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用，通过中间类建立联系。</li>
<li>合成复用原则：尽量使用合成/聚合,而不是使用继承。</li>
</ul>
</li>
</ul>
<h2 id="23种常见设计模式"><a href="#23种常见设计模式" class="headerlink" title="23种常见设计模式"></a>23种常见设计模式</h2><ul>
<li><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="external">《设计模式》</a></li>
<li><a href="https://www.cnblogs.com/susanws/p/5510229.html" target="_blank" rel="external">《23种设计模式全解析》</a></li>
<li><a href="https://github.com/ToryZhou/design-pattern" target="_blank" rel="external">《设计模式类图与示例》</a></li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><a href="http://blog.jobbole.com/62314/" target="_blank" rel="external">《细数JDK里的设计模式》</a><ul>
<li>结构型模式：<ul>
<li>适配器：用来把一个接口转化成另一个接口，如 java.util.Arrays#asList()。</li>
<li>桥接模式：这个模式将抽象和抽象操作的实现进行了解耦，这样使得抽象和实现可以独立地变化，如JDBC；</li>
<li>组合模式：使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数，如 Map.putAll，List.addAll、Set.addAll。</li>
<li>装饰者模式：动态的给一个对象附加额外的功能，这也是子类的一种替代方式，如 java.util.Collections#checkedList|Map|Set|SortedSet|SortedMap。</li>
<li>享元模式：使用缓存来加速大量小对象的访问时间，如 valueOf(int)。</li>
<li>代理模式：代理模式是用一个简单的对象来代替一个复杂的或者创建耗时的对象，如 java.lang.reflect.Proxy</li>
</ul>
</li>
<li>创建模式:<ul>
<li>抽象工厂模式：抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型，如 java.util.Calendar#getInstance()。</li>
<li>建造模式(Builder)：定义了一个新的类来构建另一个类的实例，以简化复杂对象的创建，如：java.lang.StringBuilder#append()。</li>
<li>工厂方法：就是 <strong>一个返*</strong> 回具体对象的方法，而不是多个，如 java.lang.Object#toString()、java.lang.Class#newInstance()。</li>
<li>原型模式：使得类的实例能够生成自身的拷贝、如：java.lang.Object#clone()。</li>
<li>单例模式：全局只有一个实例，如 java.lang.Runtime#getRuntime()。</li>
</ul>
</li>
<li>行为模式：<ul>
<li>责任链模式：通过把请求从一个对象传递到链条中下一个对象的方式，直到请求被处理完毕，以实现对象间的解耦。如 javax.servlet.Filter#doFilter()。</li>
<li>命令模式：将操作封装到对象内，以便存储，传递和返回，如：java.lang.Runnable。</li>
<li>解释器模式：定义了一个语言的语法，然后解析相应语法的语句，如，java.text.Format，java.text.Normalizer。</li>
<li>迭代器模式：提供一个一致的方法来顺序访问集合中的对象，如 java.util.Iterator。</li>
<li>中介者模式：通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖，java.lang.reflect.Method#invoke()。</li>
<li>空对象模式：如 java.util.Collections#emptyList()。</li>
<li>观察者模式：它使得一个对象可以灵活的将消息发送给感兴趣的对象，如 java.util.EventListener。</li>
<li>模板方法模式：让子类可以重写方法的一部分，而不是整个重写，如 java.util.Collections#sort()。</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/hwaggLee/p/4510687.html" target="_blank" rel="external">《Spring-涉及到的设计模式汇总》</a></li>
<li><a href="https://blog.csdn.net/u012387062/article/details/54719114" target="_blank" rel="external">《Mybatis使用的设计模式》</a></li>
</ul>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li><a href="https://blog.csdn.net/YECrazy/article/details/79481964" target="_blank" rel="external">《单例模式的三种实现 以及各自的优缺点》</a></li>
<li>《单例模式－－反射－－防止序列化破坏单例模式》<ul>
<li>使用枚举类型。</li>
</ul>
</li>
</ul>
<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>TODO</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul>
<li>《MVC 模式》<ul>
<li>模型(model)－视图(view)－控制器(controller)</li>
</ul>
</li>
</ul>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><ul>
<li><a href="https://www.zhihu.com/question/23277575" target="_blank" rel="external">《理解 IOC》</a></li>
<li>《IOC 的理解与解释》<ul>
<li>正向控制：传统通过new的方式。反向控制，通过容器注入对象。</li>
<li>作用：用于模块解耦。</li>
<li>DI：Dependency Injection，即依赖注入，只关心资源使用，不关心资源来源。</li>
</ul>
</li>
</ul>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ul>
<li><a href="https://blog.csdn.net/yanquan345/article/details/19760027" target="_blank" rel="external">《轻松理解AOP(面向切面编程)》</a></li>
<li><a href="https://www.cnblogs.com/hongwz/p/5764917.html" target="_blank" rel="external">《Spring AOP详解》</a></li>
<li>《Spring AOP的实现原理》<ul>
<li>Spring AOP使用的动态代理，主要有两种方式：JDK动态代理和CGLIB动态代理。</li>
</ul>
</li>
<li>《Spring AOP 实现原理与 CGLIB 应用》<ul>
<li>Spring AOP 框架对 AOP 代理类的处理原则是：如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP 代理类；如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类</li>
</ul>
</li>
</ul>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ul>
<li><a href="https://www.w3cschool.cn/uml_tutorial/" target="_blank" rel="external">《UML教程》</a></li>
</ul>
<h2 id="微服务思想"><a href="#微服务思想" class="headerlink" title="微服务思想"></a>微服务思想</h2><ul>
<li><a href="https://www.cnblogs.com/wintersun/p/6219259.html" target="_blank" rel="external">《微服务架构设计》</a></li>
<li><a href="http://www.infoq.com/cn/articles/micro-service-technology-stack" target="_blank" rel="external">《微服务架构技术栈选型手册》</a></li>
</ul>
<h3 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h3><ul>
<li><a href="https://yq.aliyun.com/articles/8611" target="_blank" rel="external">《微服务架构的理论基础 - 康威定律》</a><ul>
<li>定律一：组织沟通方式会通过系统设计表达出来，就是说架构的布局和组织结构会有相似。</li>
<li>定律二：时间再多一件事情也不可能做的完美，但总有时间做完一件事情。一口气吃不成胖子，先搞定能搞定的。</li>
<li>定律三：线型系统和线型组织架构间有潜在的异质同态特性。种瓜得瓜，做独立自治的子系统减少沟通成本。</li>
<li>定律四：大的系统组织总是比小系统更倾向于分解。合久必分，分而治之。</li>
</ul>
</li>
<li><a href="https://static.geekbang.org/PDF-%E4%BF%AE%E6%94%B9%E7%89%88-%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E5%9B%BE%E7%89%87-%E6%9D%A8%E6%B3%A2-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.pdf" target="_blank" rel="external">《微服务架构核⼼20讲》</a></li>
</ul>
<h1 id="运维-amp-统计-amp-技术支持"><a href="#运维-amp-统计-amp-技术支持" class="headerlink" title="运维 &amp; 统计 &amp; 技术支持"></a>运维 &amp; 统计 &amp; 技术支持</h1><h2 id="常规监控"><a href="#常规监控" class="headerlink" title="常规监控"></a>常规监控</h2><ul>
<li><a href="https://blog.csdn.net/enweitech/article/details/77849205" target="_blank" rel="external">《腾讯业务系统监控的修炼之路》</a><ul>
<li>监控的方式：主动、被动、旁路(比如舆情监控)</li>
<li>监控类型： 基础监控、服务端监控、客户端监控、 监控、用户端监控</li>
<li>监控的目标：全、块、准</li>
<li>核心指标：请求量、成功率、耗时</li>
</ul>
</li>
<li><a href="https://www.oschina.net/news/67525/monitoring-tools" target="_blank" rel="external">《开源还是商用？十大云运维监控工具横评》</a><ul>
<li>Zabbix、Nagios、Ganglia、Zenoss、Open-falcon、监控宝、 360网站服务监控、阿里云监控、百度云观测、小蜜蜂网站监测等。</li>
</ul>
</li>
<li><a href="http://developer.51cto.com/art/201612/525373.htm" target="_blank" rel="external">《监控报警系统搭建及二次开发经验》</a></li>
</ul>
<p><strong>命令行监控工具</strong></p>
<ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/44-an-quan-yu-yun-wei/445-fu-wu-qi-zhuang-tai-jian-ce/4451-ming-ling-xing-gong-ju.html" target="_blank" rel="external">《常用命令行监控工具》</a><ul>
<li>top、sar、tsar、nload</li>
</ul>
</li>
<li><a href="http://blog.jobbole.com/96846/" target="_blank" rel="external">《20个命令行工具监控 Linux 系统性能》</a></li>
<li><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="external">《JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解》</a></li>
</ul>
<h2 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h2><p>APM — Application Performance Management</p>
<ul>
<li><a href="http://bigbully.github.io/Dapper-translation/" target="_blank" rel="external">《Dapper，大规模分布式系统的跟踪系统》</a></li>
<li><a href="http://opentracing.io/" target="_blank" rel="external">CNCF OpenTracing</a>，<a href="https://github.com/opentracing-contrib/opentracing-specification-zh" target="_blank" rel="external">中文版</a></li>
<li>主要开源软件，按字母排序<ul>
<li><a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="external">Apache SkyWalking</a></li>
<li><a href="https://github.com/dianping/cat" target="_blank" rel="external">CAT</a></li>
<li><a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="external">CNCF jaeger</a></li>
<li><a href="https://github.com/naver/pinpoint" target="_blank" rel="external">Pinpoint</a></li>
<li><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="external">Zipkin</a></li>
</ul>
</li>
<li><a href="http://www.infoq.com/cn/articles/apm-Pinpoint-practice" target="_blank" rel="external">《开源APM技术选型与实战》</a><ul>
<li>主要基于 Google的Dapper（大规模分布式系统的跟踪系统） 思想。</li>
</ul>
</li>
</ul>
<h2 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/25195217" target="_blank" rel="external">《流量统计的基础：埋点》</a><ul>
<li>常用指标：访问与访客、停留时长、跳出率、退出率、转化率、参与度</li>
</ul>
</li>
<li><a href="http://www.25xt.com/company/17066.html" target="_blank" rel="external">《APP埋点常用的统计工具、埋点目标和埋点内容》</a><ul>
<li>第三方统计：友盟、百度移动、魔方、App Annie、talking data、神策数据等。</li>
</ul>
</li>
<li><a href="https://tech.meituan.com/mt-mobile-analytics-practice.html" target="_blank" rel="external">《美团点评前端无痕埋点实践》</a><ul>
<li>所谓无痕、即通过可视化工具配置采集节点，在前端自动解析配置并上报埋点数据，而非硬编码。</li>
</ul>
</li>
</ul>
<h2 id="持续集成-CI-CD"><a href="#持续集成-CI-CD" class="headerlink" title="持续集成(CI/CD)"></a>持续集成(CI/CD)</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="external">《持续集成是什么？》</a></li>
<li><a href="https://www.testwo.com/article/1170" target="_blank" rel="external">《8个流行的持续集成工具》</a></li>
</ul>
<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><ul>
<li><a href="https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000" target="_blank" rel="external">《使用Jenkins进行持续集成》</a></li>
</ul>
<h3 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h3><p>开发、测试、生成环境分离。</p>
<ul>
<li><a href="https://my.oschina.net/sancuo/blog/214904" target="_blank" rel="external">《开发环境、生产环境、测试环境的基本理解和区》</a></li>
</ul>
<h2 id="自动化运维"><a href="#自动化运维" class="headerlink" title="自动化运维"></a>自动化运维</h2><h3 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h3><ul>
<li><a href="http://www.ansible.com.cn/" target="_blank" rel="external">《Ansible中文权威指南》</a></li>
<li><a href="https://www.cnblogs.com/heiye123/articles/7855890.html" target="_blank" rel="external">《Ansible基础配置和企业级项目实用案例》</a></li>
</ul>
<h3 id="puppet"><a href="#puppet" class="headerlink" title="puppet"></a>puppet</h3><ul>
<li><a href="https://www.cnblogs.com/keerya/p/8040071.html" target="_blank" rel="external">《自动化运维工具——puppet详解》</a></li>
</ul>
<h3 id="chef"><a href="#chef" class="headerlink" title="chef"></a>chef</h3><ul>
<li><a href="https://www.ibm.com/developerworks/cn/cloud/library/1407_caomd_chef/" target="_blank" rel="external">《Chef 的安装与使用》</a></li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="TDD-理论"><a href="#TDD-理论" class="headerlink" title="TDD 理论"></a>TDD 理论</h3><ul>
<li>《深度解读 - TDD（测试驱动开发）》<ul>
<li>基于测试用例编码功能代码，XP（Extreme Programming）的核心实践.</li>
<li>好处：一次关注一个点，降低思维负担；迎接需求变化或改善代码的设计；提前澄清需求；快速反馈；</li>
</ul>
</li>
</ul>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul>
<li><a href="https://www.cnblogs.com/happyzm/p/6482886.html" target="_blank" rel="external">《Java单元测试之JUnit篇》</a></li>
<li>《JUnit 4 与 TestNG 对比》<ul>
<li>TestNG 覆盖 JUnit 功能，适用于更复杂的场景。</li>
</ul>
</li>
<li>《单元测试主要的测试功能点》<ul>
<li>模块接口测试、局部数据结构测试、路径测试 、错误处理测试、边界条件测试 。</li>
</ul>
</li>
</ul>
<h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><ul>
<li><a href="https://blog.csdn.net/blueheart20/article/details/52170790" target="_blank" rel="external">《Apache ab 测试使用指南》</a></li>
<li><a href="https://www.cnblogs.com/binyue/p/6141088.html" target="_blank" rel="external">《大型网站压力测试及优化方案》</a></li>
<li><a href="http://news.chinabyte.com/466/14126966.shtml" target="_blank" rel="external">《10大主流压力/负载/性能测试工具推荐》</a></li>
<li><a href="http://quentinxxz.iteye.com/blog/2249799" target="_blank" rel="external">《真实流量压测工具 tcpcopy应用浅析》</a></li>
<li><a href="https://www.cnblogs.com/jwentest/p/7136727.html" target="_blank" rel="external">《nGrinder 简易使用教程》</a></li>
</ul>
<h3 id="全链路压测"><a href="#全链路压测" class="headerlink" title="全链路压测"></a>全链路压测</h3><ul>
<li><a href="http://www.infoq.com/cn/articles/jd-618-upgrade-full-link-voltage-test-program-forcebot" target="_blank" rel="external">《京东618：升级全链路压测方案，打造军演机器人ForceBot》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30306892" target="_blank" rel="external">《饿了么全链路压测的探索与实践》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28355759" target="_blank" rel="external">《四大语言，八大框架｜滴滴全链路压测解决之道》</a></li>
<li><a href="https://www.jianshu.com/p/27060fd61f72" target="_blank" rel="external">《全链路压测经验》</a></li>
</ul>
<h3 id="A-B-、灰度、蓝绿测试"><a href="#A-B-、灰度、蓝绿测试" class="headerlink" title="A/B 、灰度、蓝绿测试"></a>A/B 、灰度、蓝绿测试</h3><ul>
<li><a href="https://testerhome.com/topics/11165" target="_blank" rel="external">《技术干货 | AB 测试和灰度发布探索及实践》</a></li>
<li><a href="http://blog.51cto.com/purplegrape/1403123" target="_blank" rel="external">《nginx 根据IP 进行灰度发布》</a></li>
<li><a href="https://www.v2ex.com/t/344341" target="_blank" rel="external">《蓝绿部署、A/B 测试以及灰度发布》</a></li>
</ul>
<h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><ul>
<li><a href="https://blog.csdn.net/enweitech/article/details/52910082" target="_blank" rel="external">《VPS的三种虚拟技术OpenVZ、Xen、KVM优缺点比较》</a></li>
</ul>
<h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><ul>
<li><a href="http://blog.chinaunix.net/uid-20201831-id-5775661.html" target="_blank" rel="external">《KVM详解，太详细太深入了，经典》</a></li>
<li><a href="https://www.coderxing.com/kvm-install.html" target="_blank" rel="external">《【图文】KVM 虚拟机安装详解》</a></li>
</ul>
<h3 id="Xen"><a href="#Xen" class="headerlink" title="Xen"></a>Xen</h3><ul>
<li><a href="https://www.cnblogs.com/sddai/p/5931201.html" target="_blank" rel="external">《Xen虚拟化基本原理详解》</a></li>
</ul>
<h3 id="OpenVZ"><a href="#OpenVZ" class="headerlink" title="OpenVZ"></a>OpenVZ</h3><ul>
<li><a href="https://blog.csdn.net/longerzone/article/details/44829255" target="_blank" rel="external">《开源Linux容器 OpenVZ 快速上手指南》</a></li>
</ul>
<h2 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul>
<li><a href="https://www.cnblogs.com/SzeCheng/p/6822905.html" target="_blank" rel="external">《几张图帮你理解 docker 基本原理及快速入门》</a></li>
<li><a href="https://draveness.me/docker" target="_blank" rel="external">《Docker 核心技术与实现原理》</a></li>
<li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="external">《Docker 教程》</a></li>
</ul>
<h2 id="云技术"><a href="#云技术" class="headerlink" title="云技术"></a>云技术</h2><h3 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h3><ul>
<li><a href="https://www.cnblogs.com/klb561/p/8660264.html" target="_blank" rel="external">《OpenStack构架知识梳理》</a></li>
</ul>
<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><ul>
<li><a href="https://www.cnblogs.com/jetzhang/p/6068773.html" target="_blank" rel="external">《一分钟告诉你究竟DevOps是什么鬼？》</a></li>
<li><a href="http://www.infoq.com/cn/articles/detail-analysis-of-devops" target="_blank" rel="external">《DevOps详解》</a></li>
</ul>
<h2 id="文档管理"><a href="#文档管理" class="headerlink" title="文档管理"></a>文档管理</h2><ul>
<li><a href="http://www.confluence.cn/" target="_blank" rel="external">Confluence-收费文档管理系统</a></li>
<li>GitLab?</li>
<li>Wiki</li>
</ul>
<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul>
<li><a href="https://blog.csdn.net/qq_25797077/article/details/52200722" target="_blank" rel="external">《Ngnix的基本学习-多进程和Apache的比较》</a><ul>
<li>Nginx 通过异步非阻塞的事件处理机制实现高并发。Apache 每个请求独占一个线程，非常消耗系统资源。</li>
<li>事件驱动适合于IO密集型服务(Nginx)，多进程或线程适合于CPU密集型服务(Apache)，所以Nginx适合做反向代理，而非web服务器使用。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/cunkouzh/p/5410154.html" target="_blank" rel="external">《nginx与Apache的对比以及优缺点》</a><ul>
<li>nginx只适合静态和反向代理，不适合处理动态请求。</li>
</ul>
</li>
</ul>
<h3 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h3><ul>
<li><a href="http://openresty.org/cn/" target="_blank" rel="external">官方网站</a></li>
<li>《浅谈 OpenResty》<ul>
<li>通过 Lua 模块可以在Nginx上进行开发。</li>
</ul>
</li>
<li><a href="https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html" target="_blank" rel="external">agentzh 的 Nginx 教程</a></li>
</ul>
<h3 id="Tengine"><a href="#Tengine" class="headerlink" title="Tengine"></a>Tengine</h3><ul>
<li><a href="http://tengine.taobao.org/" target="_blank" rel="external">官方网站</a></li>
</ul>
<h3 id="Apache-Httpd"><a href="#Apache-Httpd" class="headerlink" title="Apache Httpd"></a>Apache Httpd</h3><ul>
<li><a href="http://httpd.apache.org/" target="_blank" rel="external">官方网站</a></li>
</ul>
<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h4><ul>
<li><a href="https://www.cnblogs.com/hggen/p/6264475.html" target="_blank" rel="external">《TOMCAT原理详解及请求过程》</a></li>
<li><a href="https://www.cnblogs.com/crazylqy/p/4706223.html" target="_blank" rel="external">《Tomcat服务器原理详解》</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/" target="_blank" rel="external">《Tomcat 系统架构与设计模式,第 1 部分: 工作原理》</a></li>
<li><a href="https://blog.csdn.net/xlgen157387/article/details/79006434" target="_blank" rel="external">《四张图带你了解Tomcat系统架构》</a></li>
<li><a href="https://www.futurehosting.com/blog/jboss-vs-tomcat-choosing-a-java-application-server/" target="_blank" rel="external">《JBoss vs. Tomcat: Choosing A Java Application Server》</a><ul>
<li>Tomcat 是轻量级的 Serverlet 容器，没有实现全部 JEE 特性（比如持久化和事务处理），但可以通过其他组件代替，比如Spring。</li>
<li>Jboss 实现全部了JEE特性，软件开源免费、文档收费。</li>
</ul>
</li>
</ul>
<h4 id="调优方案"><a href="#调优方案" class="headerlink" title="调优方案"></a>调优方案</h4><ul>
<li><a href="https://www.cnblogs.com/sunfenqing/p/7339058.html" target="_blank" rel="external">《Tomcat 调优方案》</a><ul>
<li>启动NIO模式（或者APR）；调整线程池；禁用AJP连接器（Nginx+tomcat的架构，不需要AJP）；</li>
</ul>
</li>
<li><a href="http://blog.chinaunix.net/uid-20662363-id-3012760.html" target="_blank" rel="external">《tomcat http协议与ajp协议》</a></li>
<li><a href="http://dmouse.iteye.com/blog/1354527" target="_blank" rel="external">《AJP与HTTP比较和分析》</a><ul>
<li>AJP 协议（8009端口）用于降低和前端Server（如Apache，而且需要支持AJP协议）的连接数(前端)，通过长连接提高性能。</li>
<li>并发高时，AJP协议优于HTTP协议。</li>
</ul>
</li>
</ul>
<h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jetty/" target="_blank" rel="external">《Jetty 的工作原理以及与 Tomcat 的比较》</a></li>
<li>《jetty和tomcat优势比较》<ul>
<li>架构比较:Jetty的架构比Tomcat的更为简单。</li>
<li>性能比较：Jetty和Tomcat性能方面差异不大，Jetty默认采用NIO结束在处理I/O请求上更占优势，Tomcat默认采用BIO处理I/O请求，Tomcat适合处理少数非常繁忙的链接，处理静态资源时性能较差。</li>
<li>其他方面：Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好;Tomcat 对JEE和Servlet 支持更加全面。</li>
</ul>
</li>
</ul>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li><a href="https://blog.csdn.net/clementad/article/details/48229243" target="_blank" rel="external">《缓存失效策略（FIFO 、LRU、LFU三种算法的区别）》</a></li>
</ul>
<h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4211.html" target="_blank" rel="external">《HashMap本地缓存》</a></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4212-ehcache.html" target="_blank" rel="external">《EhCache本地缓存》</a><ul>
<li>堆内、堆外、磁盘三级缓存。</li>
<li>可按照缓存空间容量进行设置。</li>
<li>按照时间、次数等过期策略。</li>
</ul>
</li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4213-guava-cache.html" target="_blank" rel="external">《Guava Cache》</a><ul>
<li>简单轻量、无堆外、磁盘缓存。</li>
</ul>
</li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/nginx-ben-di-huan-cun.html" target="_blank" rel="external">《Nginx本地缓存》</a></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/4222-pagespeed.html" target="_blank" rel="external">《Pagespeed—懒人工具，服务器端加速》</a></li>
</ul>
<h2 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h2><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/423-ke-hu-duan-huan-cun.html" target="_blank" rel="external">《浏览器端缓存》</a><ul>
<li>主要是利用 Cache-Control 参数。</li>
</ul>
</li>
<li><a href="https://mp.weixin.qq.com/s/qHm_dJBhVbv0pJs8Crp77w" target="_blank" rel="external">《H5 和移动端 WebView 缓存机制解析与实战》</a></li>
</ul>
<h2 id="服务端缓存"><a href="#服务端缓存" class="headerlink" title="服务端缓存"></a>服务端缓存</h2><h3 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h3><ul>
<li><a href="https://github.com/jiangwenyuan/nuster" target="_blank" rel="external">nuster</a> - nuster cache</li>
<li><a href="https://github.com/varnishcache/varnish-cache" target="_blank" rel="external">varnish</a> - varnish cache</li>
<li><a href="https://github.com/squid-cache/squid" target="_blank" rel="external">squid</a> - squid cache</li>
</ul>
<h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><ul>
<li><a href="http://www.runoob.com/Memcached/Memcached-tutorial.html" target="_blank" rel="external">《Memcached 教程》</a></li>
<li><a href="https://blog.csdn.net/chenleixing/article/details/47035453" target="_blank" rel="external">《深入理解Memcached原理》</a><ul>
<li>采用多路复用技术提高并发性。</li>
<li>slab分配算法： memcached给Slab分配内存空间，默认是1MB。分配给Slab之后 把slab的切分成大小相同的chunk，Chunk是用于缓存记录的内存空间，Chunk 的大小默认按照1.25倍的速度递增。好处是不会频繁申请内存，提高IO效率，坏处是会有一定的内存浪费。</li>
</ul>
</li>
<li><a href="https://www.jianshu.com/p/36e5cd400580" target="_blank" rel="external">《Memcached软件工作原理》</a></li>
<li><a href="http://zhihuzeye.com/archives/2361" target="_blank" rel="external">《Memcache技术分享：介绍、使用、存储、算法、优化、命中率》</a></li>
<li><a href="https://blog.csdn.net/liu251890347/article/details/37690045" target="_blank" rel="external">《memcache 中 add 、 set 、replace 的区别》</a><ul>
<li>区别在于当key存在还是不存在时，返回值是true和false的。</li>
</ul>
</li>
<li><a href="https://pan.baidu.com/s/1qX00Lti?errno=0&amp;errmsg=Auth%20Login%20Sucess&amp;&amp;bduss=&amp;ssnerror=0&amp;traceid=" target="_blank" rel="external"><strong>《memcached全面剖析》</strong></a></li>
</ul>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul>
<li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">《Redis 教程》</a></li>
<li><a href="https://blog.csdn.net/wcf373722432/article/details/78678504" target="_blank" rel="external">《redis底层原理》</a><ul>
<li>使用 ziplist 存储链表，ziplist是一种压缩链表，它的好处是更能节省内存空间，因为它所存储的内容都是在连续的内存区域当中的。</li>
<li>使用 skiplist(跳跃表)来存储有序集合对象、查找上先从高Level查起、时间复杂度和红黑树相当，实现容易，无锁、并发性好。</li>
</ul>
</li>
<li><a href="http://doc.redisfans.com/topic/persistence.html" target="_blank" rel="external">《Redis持久化方式》</a><ul>
<li>RDB方式：定期备份快照，常用于灾难恢复。优点：通过fork出的进程进行备份，不影响主进程、RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。缺点：会丢数据。</li>
<li>AOF方式：保存操作日志方式。优点：恢复时数据丢失少，缺点：文件大，回复慢。</li>
<li>也可以两者结合使用。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/chunlongyu/article/details/53346436" target="_blank" rel="external">《分布式缓存–序列3–原子操作与CAS乐观锁》</a></li>
</ul>
<h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul>
<li><a href="https://blog.csdn.net/sunhuiliang85/article/details/73656830" target="_blank" rel="external">《Redis单线程架构》</a></li>
</ul>
<h4 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h4><ul>
<li><a href="https://blog.csdn.net/qq_29108585/article/details/63251491" target="_blank" rel="external">《redis的回收策略》</a></li>
</ul>
<h3 id="Tair"><a href="#Tair" class="headerlink" title="Tair"></a>Tair</h3><ul>
<li><a href="https://github.com/alibaba/tair" target="_blank" rel="external">官方网站</a></li>
<li><a href="http://blog.csdn.net/farphone/article/details/53522383" target="_blank" rel="external">《Tair和Redis的对比》</a></li>
<li>特点：可以配置备份节点数目，通过异步同步到备份节点</li>
<li>一致性Hash算法。</li>
<li>架构：和Hadoop 的设计思想类似，有Configserver，DataServer，Configserver 通过心跳来检测，Configserver也有主备关系。</li>
</ul>
<p>几种存储引擎:</p>
<ul>
<li>MDB，完全内存性，可以用来存储Session等数据。</li>
<li>Rdb（类似于Redis），轻量化，去除了aof之类的操作，支持Restfull操作</li>
<li>LDB（LevelDB存储引擎），持久化存储，LDB 作为rdb的持久化，google实现，比较高效，理论基础是LSM(Log-Structured-Merge Tree)算法，现在内存中修改数据，达到一定量时（和内存汇总的旧数据一同写入磁盘）再写入磁盘，存储更加高效，县比喻Hash算法。</li>
<li>Tair采用共享内存来存储数据，如果服务挂掉（非服务器），重启服务之后，数据亦然还在。</li>
</ul>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul>
<li><a href="https://www.cnblogs.com/charlesblc/p/6045238.html" target="_blank" rel="external">《消息队列-推/拉模式学习 &amp; ActiveMQ及JMS学习》</a><ul>
<li>RabbitMQ 消费者默认是推模式（也支持拉模式）。</li>
<li>Kafka 默认是拉模式。</li>
<li>Push方式：优点是可以尽可能快地将消息发送给消费者，缺点是如果消费者处理能力跟不上，消费者的缓冲区可能会溢出。</li>
<li>Pull方式：优点是消费端可以按处理能力进行拉去，缺点是会增加消息延迟。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/yunfeng482/article/details/72856762" target="_blank" rel="external">《Kafka、RabbitMQ、RocketMQ等消息中间件的对比 —— 消息发送性能和区别》</a></li>
</ul>
<h3 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h3><p>消息总线相当于在消息队列之上做了一层封装，统一入口，统一管控、简化接入成本。</p>
<ul>
<li><a href="https://blog.csdn.net/yanghua_kobe/article/details/43877281" target="_blank" rel="external">《消息总线VS消息队列》</a></li>
</ul>
<h3 id="消息的顺序"><a href="#消息的顺序" class="headerlink" title="消息的顺序"></a>消息的顺序</h3><ul>
<li><a href="https://www.cnblogs.com/cjsblog/p/8267892.html" target="_blank" rel="external">《如何保证消费者接收消息的顺序》</a></li>
</ul>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>支持事务，推拉模式都是支持、适合需要可靠性消息传输的场景。</p>
<ul>
<li><a href="https://blog.csdn.net/whoamiyang/article/details/54954780" target="_blank" rel="external">《RabbitMQ的应用场景以及基本原理介绍》</a></li>
<li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="external">《消息队列之 RabbitMQ》</a></li>
<li><a href="https://blog.csdn.net/u013256816/article/details/55515234" target="_blank" rel="external">《RabbitMQ之消息确认机制（事务+Confirm）》</a></li>
</ul>
<h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>Java实现，推拉模式都是支持，吞吐量逊于Kafka。可以保证消息顺序。</p>
<ul>
<li><a href="https://www.jianshu.com/p/824066d70da8" target="_blank" rel="external">《RocketMQ 实战之快速入门》</a></li>
<li><a href="http://www.iocoder.cn/categories/RocketMQ/?vip&amp;architect-awesome" target="_blank" rel="external">《RocketMQ 源码解析》</a></li>
</ul>
<h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>纯Java实现，兼容JMS，可以内嵌于Java应用中。</p>
<ul>
<li><a href="https://www.cnblogs.com/wintersun/p/3962302.html" target="_blank" rel="external">《ActiveMQ消息队列介绍》</a></li>
</ul>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>高吞吐量、采用拉模式。适合高IO场景，比如日志同步。</p>
<ul>
<li><a href="http://kafka.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://blog.csdn.net/allthesametome/article/details/47362451" target="_blank" rel="external">《各消息队列对比，Kafka深度解析，众人推荐，精彩好文！》</a></li>
<li><a href="http://lxw1234.com/archives/2015/10/538.htm" target="_blank" rel="external">《Kafka分区机制介绍与示例》</a></li>
</ul>
<h3 id="Redis-消息推送"><a href="#Redis-消息推送" class="headerlink" title="Redis 消息推送"></a>Redis 消息推送</h3><p>生产者、消费者模式完全是客户端行为，list 和 拉模式实现，阻塞等待采用 blpop 指令。</p>
<ul>
<li><a href="https://blog.csdn.net/qq_34212276/article/details/78455004" target="_blank" rel="external">《Redis学习笔记之十：Redis用作消息队列》</a></li>
</ul>
<h3 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h3><p>TODO</p>
<h2 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h2><h3 id="单机定时调度"><a href="#单机定时调度" class="headerlink" title="单机定时调度"></a>单机定时调度</h3><ul>
<li><a href="https://www.cnblogs.com/shuaiqing/p/7742382.html" target="_blank" rel="external">《linux定时任务cron配置》</a></li>
<li><a href="https://my.oschina.net/daquan/blog/483305" target="_blank" rel="external">《Linux cron运行原理》</a><ul>
<li>fork 进程 + sleep 轮询</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/drift-ice/p/3817269.html" target="_blank" rel="external">《Quartz使用总结》</a></li>
<li><a href="https://blog.csdn.net/wenniuwuren/article/details/42082981/" target="_blank" rel="external">《Quartz源码解析 —- 触发器按时启动原理》</a></li>
<li><a href="https://www.jianshu.com/p/bab8e4e32952" target="_blank" rel="external">《quartz原理揭秘和源码解读》</a><ul>
<li>定时调度在 QuartzSchedulerThread 代码中，while()无限循环，每次循环取出时间将到的trigger，触发对应的job，直到调度器线程被关闭。</li>
</ul>
</li>
</ul>
<h3 id="分布式定时调度"><a href="#分布式定时调度" class="headerlink" title="分布式定时调度"></a>分布式定时调度</h3><ul>
<li><a href="https://blog.csdn.net/qq_16216221/article/details/70314337" target="_blank" rel="external">《这些优秀的国产分布式任务调度系统，你用过几个？》</a><ul>
<li>opencron、LTS、XXL-JOB、Elastic-Job、Uncode-Schedule、Antares</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html" target="_blank" rel="external">《Quartz任务调度的基本实现原理》</a><ul>
<li>Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的</li>
</ul>
</li>
<li><a href="http://www.iocoder.cn/categories/Elastic-Job-Lite/?vip&amp;architect-awesome" target="_blank" rel="external">《Elastic-Job-Lite 源码解析》</a></li>
<li><a href="http://www.iocoder.cn/categories/Elastic-Job-Cloud/?vip&amp;architect-awesome" target="_blank" rel="external">《Elastic-Job-Cloud 源码解析》</a></li>
</ul>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><ul>
<li><a href="https://blog.csdn.net/top_code/article/details/54615853" target="_blank" rel="external">《从零开始实现RPC框架 - RPC原理及实现》</a><ul>
<li>核心角色：Server: 暴露服务的服务提供方、Client: 调用远程服务的服务消费方、Registry: 服务注册与发现的注册中心。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/testcs_dn/article/details/78050590" target="_blank" rel="external">《分布式RPC框架性能大比拼 dubbo、motan、rpcx、gRPC、thrift的性能比较》</a></li>
</ul>
<h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><ul>
<li><a href="http://dubbo.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://www.cnblogs.com/steven520213/p/7606598.html" target="_blank" rel="external">dubbo实现原理简单介绍</a></li>
</ul>
<p><strong> SPI </strong> TODO</p>
<h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h3><ul>
<li><a href="http://thrift.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li>《Thrift RPC详解》<ul>
<li>支持多语言，通过中间语言定义接口。</li>
</ul>
</li>
</ul>
<h3 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h3><p>服务端可以认证加密，在外网环境下，可以保证数据安全。</p>
<ul>
<li><a href="https://grpc.io/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://www.cnblogs.com/LBSer/p/4853234.html" target="_blank" rel="external">《你应该知道的RPC原理》</a></li>
</ul>
<h2 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h2><h3 id="Sharding-Jdbc"><a href="#Sharding-Jdbc" class="headerlink" title="Sharding Jdbc"></a>Sharding Jdbc</h3><ul>
<li><a href="http://shardingjdbc.io/" target="_blank" rel="external">官网</a></li>
</ul>
<h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="日志搜集"><a href="#日志搜集" class="headerlink" title="日志搜集"></a>日志搜集</h3><ul>
<li><a href="http://cjting.me/misc/build-log-system-with-elkb/" target="_blank" rel="external">《从零开始搭建一个ELKB日志收集系统》</a></li>
<li><a href="https://blog.csdn.net/lzw_2006/article/details/51280058" target="_blank" rel="external">《用ELK搭建简单的日志收集分析系统》</a></li>
<li><a href="https://www.cnblogs.com/beginmind/p/6058194.html" target="_blank" rel="external">《日志收集系统-探究》</a></li>
</ul>
<h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><ul>
<li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="external">Apollo - 携程开源的配置中心应用</a><ul>
<li>Spring Boot 和 Spring Cloud</li>
<li>支持推、拉模式更新配置</li>
<li>支持多种语言</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/u011320740/article/details/78742625" target="_blank" rel="external">《基于zookeeper实现统一配置管理》</a></li>
<li><a href="https://www.cnblogs.com/shamo89/p/8016908.html" target="_blank" rel="external">《 Spring Cloud Config 分布式配置中心使用教程》</a></li>
</ul>
<p>servlet 3.0 异步特性可用于配置中心的客户端</p>
<ul>
<li><a href="https://www.cnblogs.com/dogdogwang/p/7151866.html" target="_blank" rel="external">《servlet3.0 新特性——异步处理》</a></li>
</ul>
<h2 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h2><p>主要职责：请求转发、安全认证、协议转换、容灾。</p>
<ul>
<li><a href="http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/" target="_blank" rel="external">《API网关那些儿》</a></li>
<li><a href="http://www.infoq.com/cn/news/2016/07/API-background-architecture-floo" target="_blank" rel="external">《谈API网关的背景、架构以及落地方案》</a></li>
<li><a href="https://blog.csdn.net/zhanglh046/article/details/78651993" target="_blank" rel="external">《使用Zuul构建API Gateway》</a></li>
<li><a href="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/?vip&amp;architect-awesome" target="_blank" rel="external">《Spring Cloud Gateway 源码解析》</a></li>
<li><a href="https://mp.weixin.qq.com/s/LIq2CiXJQmmjBC0yvYLY5A" target="_blank" rel="external">《HTTP API网关选择之一Kong介绍》</a></li>
</ul>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="OSI-七层协议"><a href="#OSI-七层协议" class="headerlink" title="OSI 七层协议"></a>OSI 七层协议</h3><ul>
<li><a href="https://www.cnblogs.com/Robin-YB/p/6668762.html" target="_blank" rel="external">《OSI七层协议模型、TCP/IP四层模型学习笔记》</a></li>
</ul>
<h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul>
<li><a href="https://www.cnblogs.com/onepixel/p/7092302.html" target="_blank" rel="external">《深入浅出 TCP/IP 协议》</a></li>
<li><a href="https://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="external">《TCP协议中的三次握手和四次挥手》</a></li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul>
<li><a href="https://www.cnblogs.com/wangning528/p/6388464.html" target="_blank" rel="external">《http协议详解(超详细)》</a></li>
</ul>
<h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><ul>
<li><a href="https://blog.csdn.net/zhuyiquan/article/details/69257126" target="_blank" rel="external">《HTTP 2.0 原理详细分析》</a></li>
<li>《HTTP2.0的基本单位为二进制帧》<ul>
<li>利用二进制帧负责传输。</li>
<li>多路复用。</li>
</ul>
</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ul>
<li><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html" target="_blank" rel="external">《https原理通俗了解》</a><ul>
<li>使用非对称加密协商加密算法</li>
<li>使用对称加密方式传输数据</li>
<li>使用第三方机构签发的证书，来加密公钥，用于公钥的安全传输、防止被中间人串改。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/enweitech/article/details/53213862" target="_blank" rel="external">《八大免费SSL证书-给你的网站免费添加Https安全加密》</a></li>
</ul>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><ul>
<li><a href="http://blog.51cto.com/litaotao/1289790" target="_blank" rel="external">《web优化必须了解的原理之I/o的五种模型和web的三种工作模式》</a><ul>
<li>五种I/O模型：阻塞I/O，非阻塞I/O，I/O复用、事件(信号)驱动I/O、异步I/O，前四种I/O属于同步操作，I/O的第一阶段不同、第二阶段相同，最后的一种则属于异步操作。</li>
<li>三种 Web Server 工作方式：Prefork(多进程)、Worker方式(线程方式)、Event方式。</li>
</ul>
</li>
<li><a href="http://www.cnblogs.com/Anker/p/3265058.html" target="_blank" rel="external">《select、poll、epoll之间的区别总结》</a><ul>
<li>select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</li>
<li>select 有打开文件描述符数量限制，默认1024（2048 for x64），100万并发，就要用1000个进程、切换开销大；poll采用链表结构，没有数量限制。</li>
<li>select，poll “醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，通过回调机制节省大量CPU时间；select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，而epoll只要一次拷贝。</li>
<li>poll会随着并发增加，性能逐渐下降，epoll采用红黑树结构，性能稳定，不会随着连接数增加而降低。</li>
</ul>
</li>
<li><a href="http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/" target="_blank" rel="external">《select，poll，epoll比较 》</a><ul>
<li>在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="external">《深入理解Java NIO》</a><ul>
<li>NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/skiof007/article/details/52873421" target="_blank" rel="external">《BIO与NIO、AIO的区别》</a></li>
<li><a href="https://blog.csdn.net/u013074465/article/details/46276967" target="_blank" rel="external">《两种高效的服务器设计模型：Reactor和Proactor模型》</a></li>
</ul>
<h3 id="Epoll"><a href="#Epoll" class="headerlink" title="Epoll"></a>Epoll</h3><ul>
<li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5835573.html" target="_blank" rel="external">《epoll使用详解（精髓）》</a></li>
</ul>
<h3 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h3><ul>
<li><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="external">《深入理解Java NIO》</a></li>
<li><a href="https://blog.csdn.net/xidianliuy/article/details/51612676" target="_blank" rel="external">《Java NIO编写Socket服务器的一个例子》</a></li>
</ul>
<h3 id="kqueue"><a href="#kqueue" class="headerlink" title="kqueue"></a>kqueue</h3><ul>
<li><a href="http://www.cnblogs.com/luminocean/p/5631336.html" target="_blank" rel="external">《kqueue用法简介》</a></li>
</ul>
<h2 id="连接和短连接"><a href="#连接和短连接" class="headerlink" title="连接和短连接"></a>连接和短连接</h2><ul>
<li><a href="https://www.cnblogs.com/pangguoping/p/5571422.html" target="_blank" rel="external">《TCP/IP系列——长连接与短连接的区别》</a></li>
</ul>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul>
<li>《Netty原理剖析》<ul>
<li>Reactor 模式介绍。</li>
<li>Netty 是 Reactor 模式的一种实现。</li>
</ul>
</li>
</ul>
<h2 id="零拷贝（Zero-copy）"><a href="#零拷贝（Zero-copy）" class="headerlink" title="零拷贝（Zero-copy）"></a>零拷贝（Zero-copy）</h2><ul>
<li>《对于 Netty ByteBuf 的零拷贝(Zero Copy) 的理解》<ul>
<li>多个物理分离的buffer，通过逻辑上合并成为一个，从而避免了数据在内存之间的拷贝。</li>
</ul>
</li>
</ul>
<h2 id="序列化-二进制协议"><a href="#序列化-二进制协议" class="headerlink" title="序列化(二进制协议)"></a>序列化(二进制协议)</h2><h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><ul>
<li><a href="https://www.cnblogs.com/happyday56/p/4268249.html" target="_blank" rel="external">《Hessian原理分析》</a> Binary-RPC;不仅仅是序列化</li>
</ul>
<h3 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h3><ul>
<li><a href="https://blog.csdn.net/antgan/article/details/52103966" target="_blank" rel="external">《Protobuf协议的Java应用例子》</a> Goolge出品、占用空间和效率完胜其他序列化类库，如Hessian；需要编写 .proto 文件。</li>
<li><a href="https://worktile.com/tech/share/prototol-buffers" target="_blank" rel="external">《Protocol Buffers序列化协议及应用》</a><ul>
<li>关于协议的解释；缺点：可读性差;</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/eric520zenobia/article/details/53766571" target="_blank" rel="external">《简单的使用 protobuf 和 protostuff》</a><ul>
<li>protostuff 的好处是不用写 .proto 文件，Java 对象直接就可以序列化。</li>
</ul>
</li>
</ul>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h2><h3 id="数据库设计的三大范式"><a href="#数据库设计的三大范式" class="headerlink" title="数据库设计的三大范式"></a>数据库设计的三大范式</h3><ul>
<li>《数据库的三大范式以及五大约束》<ul>
<li>第一范式：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；</li>
<li>第二范式（2NF）：满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</li>
<li>第三范式：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</li>
</ul>
</li>
</ul>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li><a href="http://www.admin10000.com/document/5372.html" target="_blank" rel="external">《MySQL的InnoDB索引原理详解》</a></li>
<li><a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="external">《MySQL存储引擎－－MyISAM与InnoDB区别》</a><ul>
<li>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁</li>
</ul>
</li>
<li><a href="https://www.2cto.com/database/201211/172380.html" target="_blank" rel="external">《myisam和innodb索引实现的不同》</a></li>
</ul>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul>
<li><a href="https://my.oschina.net/kailuncen/blog/1504217" target="_blank" rel="external">《一篇文章带你读懂Mysql和InnoDB》</a></li>
</ul>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li><a href="http://vdisk.weibo.com/s/muWOT" target="_blank" rel="external">《MySQL36条军规》</a></li>
<li><a href="https://www.cnblogs.com/zhouyusheng/p/8038224.html" target="_blank" rel="external">《MYSQL性能优化的最佳20+条经验》</a></li>
<li><a href="https://blog.csdn.net/when_less_is_more/article/details/70187459" target="_blank" rel="external">《SQL优化之道》</a></li>
<li><a href="https://www.cnblogs.com/sivkun/p/7518540.html" target="_blank" rel="external">《mysql数据库死锁的产生原因及解决办法》</a></li>
<li><a href="https://blog.csdn.net/monkey_d_feilong/article/details/52291556" target="_blank" rel="external">《导致索引失效的可能情况》</a></li>
<li><a href="https://blog.csdn.net/zy_281870667/article/details/51604540" target="_blank" rel="external">《 MYSQL分页limit速度太慢优化方法》</a><ul>
<li>原则上就是缩小扫描范围。</li>
</ul>
</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="聚集索引-非聚集索引"><a href="#聚集索引-非聚集索引" class="headerlink" title="聚集索引, 非聚集索引"></a>聚集索引, 非聚集索引</h4><ul>
<li><a href="https://blog.csdn.net/no_endless/article/details/77073549" target="_blank" rel="external">《MySQL 聚集索引/非聚集索引简述》</a></li>
<li><a href="https://www.cnblogs.com/zlcxbb/p/5757245.html" target="_blank" rel="external">《MyISAM和InnoDB的索引实现》</a></li>
</ul>
<p>MyISAM 是非聚集，InnoDB 是聚集</p>
<h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><ul>
<li><a href="https://www.cnblogs.com/summer0space/p/7247778.html" target="_blank" rel="external">《复合索引的优点和注意事项》</a></li>
</ul>
<h4 id="自适应哈希索引-AHI"><a href="#自适应哈希索引-AHI" class="headerlink" title="自适应哈希索引(AHI)"></a>自适应哈希索引(AHI)</h4><ul>
<li><a href="https://blog.csdn.net/Linux_ever/article/details/62043708" target="_blank" rel="external">《InnoDB存储引擎——自适应哈希索引》</a></li>
</ul>
<h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><ul>
<li><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="external">《MySQL 性能优化神器 Explain 使用分析》</a></li>
</ul>
<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul>
<li><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">MongoDB 教程</a></li>
<li>《Mongodb相对于关系型数据库的优缺点》<ul>
<li>优点：弱一致性（最终一致），更能保证用户的访问速度；内置GridFS，支持大容量的存储；Schema-less 数据库，不用预先定义结构；内置Sharding；相比于其他NoSQL，第三方支持丰富；性能优越；</li>
<li>缺点：mongodb不支持事务操作；mongodb占用空间过大；MongoDB没有如MySQL那样成熟的维护工具，这对于开发和IT运营都是个值得注意的地方；</li>
</ul>
</li>
</ul>
<h3 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h3><ul>
<li><a href="http://www.thebigdata.cn/HBase/35831.html" target="_blank" rel="external">《简明 HBase 入门教程（开篇）》</a></li>
<li><a href="https://www.cnblogs.com/qiaoyihang/p/6246424.html" target="_blank" rel="external">《深入学习HBase架构原理》</a></li>
<li><a href="https://blog.csdn.net/youzhouliu/article/details/67632882" target="_blank" rel="external">《传统的行存储和（HBase）列存储的区别》</a></li>
<li><a href="https://blog.csdn.net/lifuxiangcaohui/article/details/39891099" target="_blank" rel="external">《Hbase与传统数据库的区别》</a><ul>
<li>空数据不存储，节省空间，且适用于并发。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/u014091123/article/details/73163088" target="_blank" rel="external">《HBase Rowkey设计》</a><ul>
<li>rowkey 按照字典顺序排列，便于批量扫描。</li>
<li>通过散列可以避免热点。</li>
</ul>
</li>
</ul>
<h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><h2 id="搜索引擎原理"><a href="#搜索引擎原理" class="headerlink" title="搜索引擎原理"></a>搜索引擎原理</h2><ul>
<li><a href="https://www.jianshu.com/p/0193dc44135b" target="_blank" rel="external">《倒排索引–搜索引擎入门》</a></li>
</ul>
<h2 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h2><ul>
<li><a href="https://www.cnblogs.com/rodge-run/p/6551152.html" target="_blank" rel="external">《Lucene入门简介》</a></li>
</ul>
<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul>
<li><a href="https://blog.csdn.net/laoyang360/article/details/52244917" target="_blank" rel="external">《Elasticsearch学习，请先看这一篇！》</a></li>
<li><a href="https://blog.csdn.net/cyony/article/details/65437708" target="_blank" rel="external">《Elasticsearch索引原理》</a></li>
</ul>
<h2 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h2><ul>
<li><a href="https://blog.csdn.net/u011936655/article/details/51960005" target="_blank" rel="external">《 Apache Solr入门教程》</a></li>
<li><a href="https://blog.csdn.net/convict_eva/article/details/53537837" target="_blank" rel="external">《elasticsearch与solr比较》</a></li>
</ul>
<h2 id="sphinx"><a href="#sphinx" class="headerlink" title="sphinx"></a>sphinx</h2><ul>
<li><a href="http://blog.jobbole.com/101672/" target="_blank" rel="external">《Sphinx 的介绍和原理探索》</a></li>
</ul>
<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><h2 id="性能优化方法论"><a href="#性能优化方法论" class="headerlink" title="性能优化方法论"></a>性能优化方法论</h2><ul>
<li><a href="https://blog.csdn.net/huangwenyi1010/article/details/72673447?ref=myread" target="_blank" rel="external">《15天的性能优化工作，5方面的调优经验》</a><ul>
<li>代码层面、业务层面、数据库层面、服务器层面、前端优化。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/tenglizhe/article/details/44563135" target="_blank" rel="external">《系统性能优化的几个方面》</a></li>
</ul>
<h2 id="容量评估"><a href="#容量评估" class="headerlink" title="容量评估"></a>容量评估</h2><ul>
<li><a href="https://blog.csdn.net/u012528360/article/details/70054156" target="_blank" rel="external">《联网性能与容量评估的方法论和典型案例》</a></li>
<li>《互联网架构，如何进行容量设计？》<ul>
<li>评估总访问量、评估平均访问量QPS、评估高峰QPS、评估系统、单机极限QPS</li>
</ul>
</li>
</ul>
<h2 id="CDN-网络"><a href="#CDN-网络" class="headerlink" title="CDN 网络"></a>CDN 网络</h2><ul>
<li><a href="https://www.cnblogs.com/wxiaona/p/5867685.html" target="_blank" rel="external">《CDN加速原理》</a></li>
<li><a href="https://www.zhihu.com/question/20536932" target="_blank" rel="external">《国内有哪些比较好的 CDN？》</a></li>
</ul>
<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><ul>
<li><a href="https://blog.csdn.net/fysuccess/article/details/66972554" target="_blank" rel="external">《主流Java数据库连接池比较与开发配置实战》</a></li>
</ul>
<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><ul>
<li><a href="https://blog.csdn.net/yethyeth/article/details/73266455" target="_blank" rel="external">《九大Java性能调试工具，必备至少一款》</a></li>
</ul>
<h1 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h1><h2 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h2><h3 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h3><ul>
<li><a href="http://storm.apache.org/" target="_blank" rel="external">官方网站</a></li>
<li><a href="https://blog.csdn.net/uisoul/article/details/77989927" target="_blank" rel="external">《最详细的Storm入门教程》</a></li>
</ul>
<h3 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h3><ul>
<li><a href="https://blog.csdn.net/lisi1129/article/details/54844919" target="_blank" rel="external">《Flink之一 Flink基本原理介绍》</a></li>
</ul>
<h3 id="Kafka-Stream"><a href="#Kafka-Stream" class="headerlink" title="Kafka Stream"></a>Kafka Stream</h3><ul>
<li><a href="https://yq.aliyun.com/articles/58382" target="_blank" rel="external">《Kafka Stream调研：一种轻量级流计算模式》</a></li>
</ul>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>例如：</p>
<ul>
<li>广告相关实时统计；</li>
<li>推荐系统用户画像标签实时更新；</li>
<li>线上服务健康状况实时监测；</li>
<li>实时榜单；</li>
<li>实时数据统计。</li>
</ul>
<h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><ul>
<li><a href="https://blog.csdn.net/houbin0912/article/details/72967178" target="_blank" rel="external">《用通俗易懂的话说下hadoop是什么,能做什么》</a></li>
<li><a href="http://gitbook.cn/books/5954c9600326c7705af8a92a/index.html" target="_blank" rel="external">《史上最详细的Hadoop环境搭建》</a></li>
</ul>
<h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><ul>
<li><a href="https://segmentfault.com/a/1190000011575458" target="_blank" rel="external">《【Hadoop学习】HDFS基本原理》</a></li>
</ul>
<h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><ul>
<li><a href="https://blog.csdn.net/oppo62258801/article/details/72884633" target="_blank" rel="external">《用通俗易懂的大白话讲解Map/Reduce原理》</a></li>
<li><a href="https://blog.csdn.net/foye12/article/details/78358292" target="_blank" rel="external">《 简单的map-reduce的java例子》</a></li>
</ul>
<h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><ul>
<li><a href="http://www.cnblogs.com/codeOfLife/p/5492740.html" target="_blank" rel="external">《初步掌握Yarn的架构及原理》</a></li>
</ul>
<h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><ul>
<li><a href="http://www.cnblogs.com/tgzhu/p/5818374.html" target="_blank" rel="external">《Spark(一): 基本架构及原理》</a></li>
</ul>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="web-安全"><a href="#web-安全" class="headerlink" title="web 安全"></a>web 安全</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul>
<li><a href="https://blog.csdn.net/qq_21956483/article/details/54377947" target="_blank" rel="external">《xss攻击原理与解决方法》</a></li>
</ul>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6412-csrf.html" target="_blank" rel="external">《CSRF原理及防范》</a></li>
</ul>
<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6413-sql-zhu-ru.html" target="_blank" rel="external">《SQL注入》</a></li>
</ul>
<h3 id="Hash-Dos"><a href="#Hash-Dos" class="headerlink" title="Hash Dos"></a>Hash Dos</h3><ul>
<li>《邪恶的JAVA HASH DOS攻击》<ul>
<li>利用JsonObject 上传大Json，JsonObject 底层使用HashMap；不同的数据产生相同的hash值，使得构建Hash速度变慢，耗尽CPU。</li>
</ul>
</li>
<li><a href="http://blog.it2048.cn/article_hash-collision.html" target="_blank" rel="external">《一种高级的DoS攻击-Hash碰撞攻击》</a></li>
<li><a href="http://www.iteye.com/news/23939/" target="_blank" rel="external">《关于Hash Collision DoS漏洞：解析与解决方案》</a></li>
</ul>
<h3 id="脚本注入"><a href="#脚本注入" class="headerlink" title="脚本注入"></a>脚本注入</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6414-shang-chuan-wen-jian-guo-lv.html" target="_blank" rel="external">《上传文件漏洞原理及防范》</a></li>
</ul>
<h3 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/6421-dvwa.html" target="_blank" rel="external">《DVWA》</a></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/w3af.html" target="_blank" rel="external">W3af</a></li>
<li><a href="https://blog.csdn.net/xygg0801/article/details/53610640" target="_blank" rel="external">OpenVAS详解</a></li>
</ul>
<h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><ul>
<li><a href="https://blog.csdn.net/niaonao/article/details/51112686" target="_blank" rel="external">《验证码原理分析及实现》</a></li>
<li><a href="https://my.oschina.net/jiangbianwanghai/blog/1031031" target="_blank" rel="external">《详解滑动验证码的实现原理》</a><ul>
<li>滑动验证码是根据人在滑动滑块的响应时间，拖拽速度，时间，位置，轨迹，重试次数等来评估风险。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/xcj26/p/5242758.html" target="_blank" rel="external">《淘宝滑动验证码研究》</a></li>
</ul>
<h2 id="DDoS-防范"><a href="#DDoS-防范" class="headerlink" title="DDoS 防范"></a>DDoS 防范</h2><ul>
<li><a href="http://netsecurity.51cto.com/art/201601/503799.htm" target="_blank" rel="external">《学习手册：DDoS的攻击方式及防御手段》</a></li>
<li><a href="http://netsecurity.51cto.com/art/201406/442756.htm" target="_blank" rel="external">《免费DDoS攻击测试工具大合集》</a></li>
</ul>
<h2 id="用户隐私信息保护"><a href="#用户隐私信息保护" class="headerlink" title="用户隐私信息保护"></a>用户隐私信息保护</h2><ol>
<li>用户密码非明文保存，加动态salt。</li>
<li>身份证号，手机号如果要显示，用 “*” 替代部分字符。</li>
<li>联系方式在的显示与否由用户自己控制。</li>
<li>TODO</li>
</ol>
<ul>
<li><a href="https://zhidao.baidu.com/question/1988017976673661587.html" target="_blank" rel="external">《个人隐私包括哪些》</a></li>
<li><a href="https://www.zhihu.com/question/20137108" target="_blank" rel="external">《在互联网上，隐私的范围包括哪些？》</a></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6425-jia-mi-chang-jing-ff1a-yong-hu-mi-ma-bao-cun.html" target="_blank" rel="external">《用户密码保存》</a></li>
</ul>
<h2 id="序列化漏洞"><a href="#序列化漏洞" class="headerlink" title="序列化漏洞"></a>序列化漏洞</h2><ul>
<li><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/" target="_blank" rel="external">《Lib之过？Java反序列化漏洞通用利用分析》</a></li>
</ul>
<h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><ul>
<li>《常见对称加密算法》<ul>
<li>DES、3DES、Blowfish、AES</li>
<li>DES 采用 56位秘钥，Blowfish 采用1到448位变长秘钥，AES 128，192和256位长度的秘钥。</li>
<li>DES 秘钥太短（只有56位）算法目前已经被 AES 取代，并且 AES 有硬件加速，性能很好。</li>
</ul>
</li>
</ul>
<h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6422-chang-jian-ha-xi-suan-fa-and-hmac.html" target="_blank" rel="external">《常用的哈希算法》</a><ul>
<li>MD5 和 SHA-1 已经不再安全，已被弃用。</li>
<li>目前 SHA-256 是比较安全的。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/zhangruhong168/article/details/78033202" target="_blank" rel="external">《基于Hash摘要签名的公网URL签名验证设计方案》</a></li>
</ul>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><ul>
<li><p>《常见非对称加密算法》</p>
<ul>
<li><p>RSA、DSA、ECDSA(螺旋曲线加密算法)</p>
</li>
<li><p>和 RSA 不同的是 DSA 仅能用于数字签名，不能进行数据加密解密，其安全性和RSA相当，但其性能要比RSA快。</p>
</li>
<li><p>256位的ECC秘钥的安全性等同于3072位的RSA秘钥。</p>
<p><a href="http://baijiahao.baidu.com/s?id=1578348858092033763&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">《区块链的加密技术》</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="服务器安全"><a href="#服务器安全" class="headerlink" title="服务器安全"></a>服务器安全</h2><ul>
<li><a href="http://www.freebuf.com/articles/system/121540.html" target="_blank" rel="external">《Linux强化论：15步打造一个安全的Linux服务器》</a></li>
</ul>
<h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>TODO</p>
<h2 id="网络隔离"><a href="#网络隔离" class="headerlink" title="网络隔离"></a>网络隔离</h2><h3 id="内外网分离"><a href="#内外网分离" class="headerlink" title="内外网分离"></a>内外网分离</h3><p>TODO</p>
<h3 id="登录跳板机"><a href="#登录跳板机" class="headerlink" title="登录跳板机"></a>登录跳板机</h3><p>在内外环境中通过跳板机登录到线上主机。</p>
<ul>
<li><a href="http://blog.51cto.com/zero01/2062618" target="_blank" rel="external">《搭建简易堡垒机》</a></li>
</ul>
<h2 id="授权、认证"><a href="#授权、认证" class="headerlink" title="授权、认证"></a>授权、认证</h2><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><ul>
<li><a href="https://www.cnblogs.com/zq8024/p/5003050.html" target="_blank" rel="external">《基于组织角色的权限设计》</a></li>
<li><a href="https://www.cnblogs.com/shijiaqi1066/p/3793894.html" target="_blank" rel="external">《权限系统与RBAC模型概述》</a></li>
<li><a href="https://blog.csdn.net/he90227/article/details/38663553" target="_blank" rel="external">《Spring整合Shiro做权限控制模块详细案例分析》</a></li>
</ul>
<h3 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">《理解OAuth 2.0》</a></li>
<li><a href="https://www.cnblogs.com/flashsun/p/7424071.html" target="_blank" rel="external">《一张图搞定OAuth2.0》</a></li>
</ul>
<h3 id="双因素认证（2FA）"><a href="#双因素认证（2FA）" class="headerlink" title="双因素认证（2FA）"></a>双因素认证（2FA）</h3><p>2FA - Two-factor authentication，用于加强登录验证</p>
<p>常用做法是 登录密码 + 手机验证码（或者令牌Key，类似于与网银的 USB key）</p>
<ul>
<li>【《双因素认证（2FA）教程》】(<a href="http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html</a>)</li>
</ul>
<h3 id="单点登录-SSO"><a href="#单点登录-SSO" class="headerlink" title="单点登录(SSO)"></a>单点登录(SSO)</h3><ul>
<li><a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="external">《单点登录原理与简单实现》</a></li>
<li><a href="https://github.com/apereo/cas" target="_blank" rel="external">CAS单点登录框架</a></li>
</ul>
<h1 id="常用开源框架"><a href="#常用开源框架" class="headerlink" title="常用开源框架"></a>常用开源框架</h1><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/chapter1/di-yi-zhang-ff1a-zhun-bei-qi-cheng/12-guan-yu-kai-yuan/123-kai-yuan-xie-yi-de-xuan-ze.html" target="_blank" rel="external">《开源协议的选择》</a></li>
<li><a href="http://choosealicense.online/" target="_blank" rel="external">如何选择一个开源软件协议</a></li>
</ul>
<h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><h3 id="Log4j、Log4j2"><a href="#Log4j、Log4j2" class="headerlink" title="Log4j、Log4j2"></a>Log4j、Log4j2</h3><ul>
<li><a href="https://blog.csdn.net/u012422446/article/details/51199724" target="_blank" rel="external">《log4j 详细讲解》</a></li>
<li><a href="https://blog.csdn.net/vbirdbest/article/details/71751835" target="_blank" rel="external">《log4j2 实际使用详解》</a></li>
<li>《Log4j1,Logback以及Log4j2性能测试对比》<ul>
<li>Log4J 异步日志性能优异。</li>
</ul>
</li>
</ul>
<h3 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h3><ul>
<li><a href="https://blog.csdn.net/rulon147/article/details/52620541" target="_blank" rel="external">《最全LogBack 详解、含java案例和配置说明》</a></li>
</ul>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><ul>
<li>《ORM框架使用优缺点》<ul>
<li>主要目的是为了提高开发效率。</li>
</ul>
</li>
</ul>
<p><strong>MyBatis：</strong></p>
<ul>
<li><a href="https://www.cnblogs.com/winclpt/articles/7511672.html" target="_blank" rel="external">《mybatis缓存机制详解》</a><ul>
<li>一级缓存是SqlSession级别的缓存，缓存的数据只在SqlSession内有效</li>
<li>二级缓存是mapper级别的缓存，同一个namespace公用这一个缓存，所以对SqlSession是共享的；使用 LRU 机制清理缓存，通过 cacheEnabled 参数开启。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/baidu_32877851/article/details/53959268" target="_blank" rel="external">《MyBatis学习之代码生成器Generator》</a></li>
</ul>
<h2 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h2><p>TODO</p>
<h2 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h2><h3 id="Spring-家族"><a href="#Spring-家族" class="headerlink" title="Spring 家族"></a>Spring 家族</h3><p><strong>Spring</strong></p>
<ul>
<li><a href="https://www.w3cschool.cn/wkspring/" target="_blank" rel="external">Spring 简明教程</a></li>
</ul>
<p><strong>Spring Boot</strong></p>
<ul>
<li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">官方网站</a></li>
<li><a href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external">《Spring Boot基础教程》</a></li>
</ul>
<p><strong>Spring Cloud</strong></p>
<ul>
<li><a href="http://springboot.fun/" target="_blank" rel="external">Spring Boot 中文索引站</a></li>
<li><a href="https://springcloud.cc/" target="_blank" rel="external">Spring Cloud 中文文档</a></li>
<li><a href="http://blog.didispace.com/Spring-Cloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external">《Spring Cloud基础教程》</a></li>
</ul>
<h2 id="工具框架"><a href="#工具框架" class="headerlink" title="工具框架"></a>工具框架</h2><ul>
<li><a href="https://www.cnblogs.com/crazylqy/p/4872236.html" target="_blank" rel="external">《Apache Commons 工具类介绍及简单使用》</a></li>
<li><a href="http://ifeve.com/google-guava/" target="_blank" rel="external">《Google guava 中文教程》</a></li>
</ul>
<h1 id="分布式设计"><a href="#分布式设计" class="headerlink" title="分布式设计"></a>分布式设计</h1><h2 id="扩展性设计"><a href="#扩展性设计" class="headerlink" title="扩展性设计"></a>扩展性设计</h2><ul>
<li><a href="https://blog.csdn.net/hemin1003/article/details/53633926" target="_blank" rel="external">《架构师不可不知的十大可扩展架构》</a><ul>
<li>总结下来，通用的套路就是分布、缓存及异步处理。</li>
</ul>
</li>
<li><a href="https://yq.aliyun.com/articles/38119" target="_blank" rel="external">《可扩展性设计之数据切分》</a><ul>
<li>水平切分+垂直切分</li>
<li>利用中间件进行分片如，MySQL Proxy。</li>
<li>利用分片策略进行切分，如按照ID取模。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/deniro_li/article/details/78458306" target="_blank" rel="external">《说说如何实现可扩展性的大型网站架构》</a><ul>
<li>分布式服务+消息队列。</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/chaofanwei/article/details/29191073" target="_blank" rel="external">《大型网站技术架构（七）–网站的可扩展性架构》</a></li>
</ul>
<h2 id="稳定性-amp-高可用"><a href="#稳定性-amp-高可用" class="headerlink" title="稳定性 &amp; 高可用"></a>稳定性 &amp; 高可用</h2><ul>
<li><a href="https://blog.csdn.net/hustspy1990/article/details/78008324" target="_blank" rel="external">《系统设计：关于高可用系统的一些技术方案》</a><ul>
<li>可扩展：水平扩展、垂直扩展。 通过冗余部署，避免单点故障。</li>
<li>隔离：避免单一业务占用全部资源。避免业务之间的相互影响 2. 机房隔离避免单点故障。</li>
<li>解耦：降低维护成本，降低耦合风险。减少依赖，减少相互间的影响。</li>
<li>限流：滑动窗口计数法、漏桶算法、令牌桶算法等算法。遇到突发流量时，保证系统稳定。</li>
<li>降级：紧急情况下释放非核心功能的资源。牺牲非核心业务，保证核心业务的高可用。</li>
<li>熔断：异常情况超出阈值进入熔断状态，快速失败。减少不稳定的外部依赖对核心服务的影响。</li>
<li>自动化测试：通过完善的测试，减少发布引起的故障。</li>
<li>灰度发布：灰度发布是速度与安全性作为妥协，能够有效减少发布故障。</li>
</ul>
</li>
<li><a href="https://coolshell.cn/articles/17459.html" target="_blank" rel="external">《关于高可用的系统》</a><ul>
<li>设计原则：数据不丢(持久化)；服务高可用(服务副本)；绝对的100%高可用很难，目标是做到尽可能多的9，如99.999%（全年累计只有5分钟）。</li>
</ul>
</li>
</ul>
<h3 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h3><ul>
<li><a href="https://www.cnblogs.com/wuyun-blog/p/6186198.html" target="_blank" rel="external">《转！！负载均衡器技术Nginx和F5的优缺点对比》</a><ul>
<li>主要是和F5对比。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/lcword/p/5773296.html" target="_blank" rel="external">《软/硬件负载均衡产品 你知多少？》</a></li>
</ul>
<h3 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h3><ul>
<li><a href="https://www.cnblogs.com/tianzhiliang/articles/2317808.html" target="_blank" rel="external">《几种负载均衡算法》</a> 轮寻、权重、负载、最少连接、QoS</li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/611-dns-fang-shi.html" target="_blank" rel="external">《DNS负载均衡》</a><ul>
<li>配置简单，更新速度慢。</li>
</ul>
</li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/613-nginx-fu-zai-jun-heng.html" target="_blank" rel="external">《Nginx负载均衡》</a><ul>
<li>简单轻量、学习成本低；主要适用于web应用。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/edisonchou/p/4281978.html" target="_blank" rel="external">《借助LVS+Keepalived实现负载均衡 》</a><ul>
<li>配置比较负载、只支持到4层，性能较高。</li>
</ul>
</li>
<li><a href="http://www.ttlsa.com/linux/haproxy-study-tutorial/" target="_blank" rel="external">《HAProxy用法详解 全网最详细中文文档》</a><ul>
<li>支持到七层（比如HTTP）、功能比较全面，性能也不错。</li>
</ul>
</li>
<li><a href="http://blog.itpub.net/25704976/viewspace-1319781/" target="_blank" rel="external">《Haproxy+Keepalived+MySQL实现读均衡负载》</a><ul>
<li>主要是用户读请求的负载均衡。</li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/lylife/p/5584019.html" target="_blank" rel="external">《rabbitmq+haproxy+keepalived实现高可用集群搭建》</a></li>
</ul>
<h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><ul>
<li>《谈谈高并发系统的限流》<ul>
<li>计数器：通过滑动窗口计数器，控制单位时间内的请求次数，简单粗暴。</li>
<li>漏桶算法：固定容量的漏桶，漏桶满了就丢弃请求，比较常用。</li>
<li>令牌桶算法：固定容量的令牌桶，按照一定速率添加令牌，处理请求前需要拿到令牌，拿不到令牌则丢弃请求，或进入丢队列，可以通过控制添加令牌的速率，来控制整体速度。Guava 中的 RateLimiter 是令牌桶的实现。</li>
<li>Nginx 限流：通过 <code>limit_req</code> 等模块限制并发连接数。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java后端学习之路&quot;&gt;&lt;a href=&quot;#Java后端学习之路&quot; class=&quot;headerlink&quot; title=&quot;Java后端学习之路&quot;&gt;&lt;/a&gt;Java后端学习之路&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xingshaoch
    
    </summary>
    
      <category term="学习资源" scheme="http://chenjiabing666.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="学习资源" scheme="http://chenjiabing666.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>GitHub上优秀的资源</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/GitHub%E4%B8%8A%E4%BC%98%E7%A7%80%E7%9A%84%E8%B5%84%E6%BA%90/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/GitHub上优秀的资源/</id>
    <published>2018-09-02T11:29:40.000Z</published>
    <updated>2018-09-02T11:30:16.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub上优秀的资源"><a href="#GitHub上优秀的资源" class="headerlink" title="GitHub上优秀的资源"></a>GitHub上优秀的资源</h1><p>语言无关类</p>
<p>操作系统</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//vbird.dic.ksu.edu.tw/" target="_blank" rel="external">鸟哥的Linux私房菜</a> (简体)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//sourceforge.net/apps/trac/elpi/wiki/ALP" target="_blank" rel="external">Linux 系统高级编程</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//billie66.github.io/TLCL/index.html" target="_blank" rel="external">The Linux Command Line</a> (中英文版)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//oss.org.cn/kernel-book/ldd3/index.html" target="_blank" rel="external">Linux 设备驱动</a> (第三版)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.kerneltravel.net/kernel-book/%25E6%25B7%25B1%25E5%2585%25A5%25E5%2588%2586%25E6%259E%2590Linux%25E5%2586%2585%25E6%25A0%25B8%25E6%25BA%2590%25E7%25A0%2581.html" target="_blank" rel="external">深入分析Linux内核源码</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external">UNIX TOOLBOX</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/widuu/chinese_docker" target="_blank" rel="external">Docker中文指南</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/yeasy/docker_practice" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//freeradius.akagi201.org/" target="_blank" rel="external">FreeRADIUS新手入门</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">Mac 开发配置手册</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//www.freebsd.org/doc/zh_CN/books/handbook/index.html" target="_blank" rel="external">FreeBSD 使用手册</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//billie66.github.io/TLCL/book/" target="_blank" rel="external">Linux 命令行(中文版)</a></li>
</ul>
<p>智能系统</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/gmszone/designiot" target="_blank" rel="external">一步步搭建物联网系统</a></li>
</ul>
<p>web服务器</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//tengine.taobao.org/book/index.html" target="_blank" rel="external">Nginx开发从入门到精通</a> (淘宝团队出品)</li>
</ul>
<p>版本控制</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a> （本文由 <a href="https://link.zhihu.com/?target=http%3A//weibo.com/liaoxuefeng" target="_blank" rel="external">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://link.zhihu.com/?target=https%3A//itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="external">iTunes</a> 购买）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git – 简易指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//gitref.justjavac.com/" target="_blank" rel="external">Git 参考手册</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//git-scm.com/book/zh" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www-cs-students.stanford.edu/%257Eblynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git Magic</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.worldhello.net/gotgithub/index.html" target="_blank" rel="external">GotGitHub</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//gitbook.liuhui998.com/index.html" target="_blank" rel="external">Git Community Book 中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//mercurial.selenic.com/wiki/ChineseTutorial" target="_blank" rel="external">Mercurial 使用教程</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//bucunzai.net/hginit/" target="_blank" rel="external">HgInit (中文版)</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//igit.linuxtoy.org/" target="_blank" rel="external">沉浸式学 Git</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html" target="_blank" rel="external">GitHub秘籍</a></li>
</ul>
<p>NoSQL</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.yankay.com/wp-content/NoSql_Database_Note.html" target="_blank" rel="external">NoSQL数据库笔谈</a> (<a href="https://link.zhihu.com/?target=http%3A//yankaycom-wordpress.stor.sinaapp.com/uploads/2012/12/NoSQL%25E6%2595%25B0%25E6%258D%25AE%25E5%25BA%2593%25E7%25AC%2594%25E8%25B0%2588v2.pdf" target="_blank" rel="external">PDF</a>)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.redisbook.com/en/latest/" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.redisdoc.com/en/latest/" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">带有详细注释的 Redis 3.0 代码</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/huangz1990/annotated_redis_source" target="_blank" rel="external">带有详细注释的 Redis 2.6 代码</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external">The Little MongoDB Book</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external">The Little Redis Book</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//docs.neo4j.org.cn/" target="_blank" rel="external">Neo4j 简体中文手册 v1.8</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//neo4j.tw/" target="_blank" rel="external">Neo4j .rb 中文資源</a></li>
</ul>
<p>MySQL</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/leoo2sk/archive/2011/07/10/mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></li>
</ul>
<p>项目相关</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//article.yeeyan.org/view/2251/94882" target="_blank" rel="external">持续集成（第二版）</a> (译言网)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external">让开发自动化系列专栏</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external">追求代码质量</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/fool2fish/selenium-doc" target="_blank" rel="external">selenium 中文文档</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//local.joelonsoftware.com/wiki/Chinese_%2528Simplified%2529" target="_blank" rel="external">Joel谈软件</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//local.joelonsoftware.com/wiki/%25E9%25A6%2596%25E9%25A0%2581" target="_blank" rel="external">約耳談軟體(Joel on Software)</a></li>
</ul>
<p>Web</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external">关于浏览器和网络的 20 项须知</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//knowledge.ecomfe.com/" target="_blank" rel="external">前端知识体系</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external">浏览器开发工具的秘密</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external">Chrome 开发者工具中文手册</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">Chrome扩展开发文档</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.gruntjs.org/" target="_blank" rel="external">Grunt中文文档</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/AlloyTeam/Mars" target="_blank" rel="external">移动Web前端知识库</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/hoosin/mobile-web-favorites" target="_blank" rel="external">移动前端开发收藏夹</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">JSON风格指南</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP 接口设计指北</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external">前端资源分享（一）</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external">前端资源分享（二）</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//coderlmn.github.io/code-standards/" target="_blank" rel="external">前端代码规范 及 最佳实践</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.flygon.net/archives/427" target="_blank" rel="external">w3school教程整理</a></li>
</ul>
<p>大数据</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>
</ul>
<p>编程艺术</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external">程序员编程艺术</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1%3Fprint" target="_blank" rel="external">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>
<li><a href="https://link.zhihu.com/?target=http%3A//read.douban.com/ebook/4972883/" target="_blank" rel="external">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>
</ul>
<p>其他</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//softwaredownload.gitbooks.io/openwrt-fanqiang/" target="_blank" rel="external">OpenWrt智能、自动、透明翻墙路由器教程</a></li>
</ul>
<p>语言相关类<br>AWK</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//awk.readthedocs.org/en/latest/" target="_blank" rel="external">awk程序设计语言</a></li>
</ul>
<p>C/C++</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/forhappy/A-Detailed-Cplusplus-Concurrency-Tutorial" target="_blank" rel="external">C++ 并发编程指南</a> (<a href="https://link.zhihu.com/?target=http%3A//weibo.com/1702076100" target="_blank" rel="external">@傅海平ICT</a>)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//akaedu.github.io/book/" target="_blank" rel="external">Linux C编程一站式学习</a> (宋劲杉, 北京亚嵌教育研究中心)</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external">CGDB中文手册</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external">100个gdb小技巧</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external">100个gcc小技巧</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/anjuke/zguide-cn" target="_blank" rel="external">ZMQ 指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ituring.com.cn/book/1203" target="_blank" rel="external">How to Think Like a Computer Scientist</a> (中英文版)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//scc.qibebt.cas.cn/docs/linux/base/%25B8%25FA%25CE%25D2%25D2%25BB%25C6%25F0%25D0%25B4Makefile-%25B3%25C2%25F0%25A9.pdf" target="_blank" rel="external">跟我一起写Makefile(PDF)</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.yayu.org/book/gnu_make/" target="_blank" rel="external">GNU make中文手册</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google C++ 风格指南</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/andycai/cprimer" target="_blank" rel="external">C/C++ Primer</a> (by @andycai)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external">简单易懂的C魔法</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//sewm.pku.edu.cn/src/paradise/reference/CMake%2520Practice.pdf" target="_blank" rel="external">Cmake 实践</a> (PDF版)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.sunistudio.com/cppfaq/" target="_blank" rel="external">C++ FAQ LITE(中文版)</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/Mooophy/Cpp-Primer" target="_blank" rel="external">C++ Primer 5th Answers</a></li>
</ul>
<p>CSS/HTML</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//zh.learnlayout.com/" target="_blank" rel="external">学习CSS布局</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external">通用 CSS 笔记、建议与指导</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//css.doyoe.com/" target="_blank" rel="external">CSS参考手册</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//yanxyz.github.io/emmet-docs/" target="_blank" rel="external">Emmet 文档</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//alloyteam.github.io/code-guide/" target="_blank" rel="external">前端代码规范</a> (腾讯alloyteam团队)</li>
</ul>
<p>Dart</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//dart.lidian.info/wiki/Language_Tour" target="_blank" rel="external">Dart 语言导览</a></li>
</ul>
<p>Fortran</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="external">Fortran77和90/95编程入门</a></li>
</ul>
<p>Java</p>
<ul>
<li><p><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/java/j-rtj/%3Fca%3Dj-h-p" target="_blank" rel="external">实时 Java 系列</a></p>
</li>
<li><p><a href="https://link.zhihu.com/?target=https%3A//github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external">Apache Shiro 用户指南</a></p>
</li>
<li><p>使用 Eclipse 和 Java SE 6 创建独立 Web Services 应用程序</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/webservices/ws-eclipse-javase1/index.html" target="_blank" rel="external">第 1 部分: Web Services 服务端应用程序</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/webservices/tutorials/ws-jse/index.html" target="_blank" rel="external">第 2 部分: Web 服务客户端应用程序</a></li>
</ul>
</li>
<li><p>JavaServer Faces 1.2 入门</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/java/j-jsf1/index.html" target="_blank" rel="external">第 1 部分: 构建基本应用程序</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/java/j-jsf2/index.html" target="_blank" rel="external">第 2 部分: JSF 生命周期、转换、检验和阶段监听器</a></li>
</ul>
</li>
<li><p>用 Eclipse Europa 进行 Web 开发</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-eclipse-europa1/index.html" target="_blank" rel="external">第 1 部分: Eclipse Java EE</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-eclipse-europa2/index.html" target="_blank" rel="external">第 2 部分: PHP 开发工具</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-eclipse-europa3/index.html" target="_blank" rel="external">第 3 部分: Ruby Development Toolkit 和 RadRails</a></li>
</ul>
</li>
<li><p>使用 JavaServer Faces 构建 Apache Geronimo 应用程序</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-jsf1/index.html" target="_blank" rel="external">第 1 部分: 使用 Eclipse 和 Apache MyFaces Core 构建基本的应用程序</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-jsf2/index.html" target="_blank" rel="external">第 2 部分: 在 JavaServer Faces 中使用 Tomahawk</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-jsf3/index.html" target="_blank" rel="external">第 3 部分: 使用 ajax4jsf 添加 Ajax 功能</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-jsf4/index.html" target="_blank" rel="external">第 4 部分: 使用 Apache Trinidad 组件扩展 JSF</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-jsf5/index.html" target="_blank" rel="external">第 5 部分: 将 JSF 应用程序与 Spring 集成</a></li>
</ul>
</li>
<li><p>Apache Geronimo 和 Spring 框架</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-springframe1/index.html" target="_blank" rel="external">第 1 部分: 开发方法学</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-springframe2/index.html" target="_blank" rel="external">第 2 部分: 构建第一个应用程序</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-springframe3/index.html" target="_blank" rel="external">第 3 部分: 集成 DAO 与 ORM</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-springframe4/index.html" target="_blank" rel="external">第 4 部分: 混合使用 Spring AOP 和 Spring Web Flow</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-springframe5/os-ag-springframe5.html" target="_blank" rel="external">第 5 部分: Spring MVC</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/opensource/os-ag-springframe6/index.html" target="_blank" rel="external">第 6 部分: Spring MVC：使用 Web 视图技术</a></li>
</ul>
</li>
<li><p>终极 mashup —— Web 服务和语义 Web</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/xml/x-ultimashup1/index.html" target="_blank" rel="external">第 1 部分: 使用与组合 Web 服务</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/xml/x-ultimashup2/index.html" target="_blank" rel="external">第 2 部分: 管理 Mashup 数据缓存</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/xml/x-ultimashup3/index.html" target="_blank" rel="external">第 3 部分: 理解 RDF 和 RDFs</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/xml/x-ultimashup4/index.html" target="_blank" rel="external">第 4 部分: 创建本体</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/education/xml/x-ultimashup5/index.html" target="_blank" rel="external">第 5 部分: 切换 Web 服务</a></li>
</ul>
</li>
<li><p><a href="https://link.zhihu.com/?target=https%3A//github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external">Jersey 2.x 用户指南</a></p>
</li>
<li><a href="https://link.zhihu.com/?target=http%3A//mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis中文文档</a></li>
</ul>
<p>JavaScript</p>
<ul>
<li><p><a href="https://link.zhihu.com/?target=http%3A//chajn.org/jsguide/javascriptguide.html" target="_blank" rel="external">Google JavaScript 代码风格指南</a></p>
</li>
<li><p><a href="https://link.zhihu.com/?target=https%3A//github.com/adamlu/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript 规范</a></p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a></p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//pij.robinqu.me/" target="_blank" rel="external">Javascript编程指南</a> (<a href="https://link.zhihu.com/?target=https%3A//github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external">源码</a>)</p>
</li>
<li><p><a href="https://link.zhihu.com/?target=https%3A//github.com/justjavac/12-javascript-quirks" target="_blank" rel="external">javascript 的 12 个怪癖</a></p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//icodeit.org/jsccp/" target="_blank" rel="external">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</p>
</li>
<li><p><a href="https://link.zhihu.com/?target=https%3A//github.com/cutsin/javascript-patterns" target="_blank" rel="external">《JavaScript 模式》</a>翻译，此书中文版有售，但是纸质书翻译的还没有这个版本翻译的好</p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external">命名函数表达式探秘</a> (注:原文由<a href="https://link.zhihu.com/?target=http%3A//www.cn-cuckoo.com/" target="_blank" rel="external">为之漫笔</a>翻译，原始地址无法打开，所以此处地址为我博客上的备份)</p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external">学用 JavaScript 设计模式</a> (开源中国)</p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a></p>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a> (作者：阮一峰)</p>
</li>
<li><p>jQuery</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.cn-cuckoo.com/deconstructed/jquery.html" target="_blank" rel="external">jQuery 解构</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external">简单易懂的JQuery魔法</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a></li>
</ul>
</li>
<li><p>Node.js</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external">Nodejs Wiki Book</a> (繁体中文)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//expressjs.jser.us/" target="_blank" rel="external">express.js 中文文档</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/turingou/koa-guide" target="_blank" rel="external">koa 中文文档</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/nswbmw/N-blog" target="_blank" rel="external">使用 Express + MongoDB 搭建多人博客</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external">Express框架</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//www.gitbook.io/book/0532/nodejs" target="_blank" rel="external">nodejs文档</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/alsotang/node-lessons" target="_blank" rel="external">Node.js 包教不包会</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//www.npmjs.org/package/learnyounode-zh-cn" target="_blank" rel="external">Learn You The Node.js For Much Win! (中文版)</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external">Node debug 三法三例</a></li>
</ul>
</li>
<li><p>underscore.js</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//learningcn.com/underscore/" target="_blank" rel="external">Underscore.js中文文档</a></li>
</ul>
</li>
<li><p>backbone.js</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external">backbone.js入门教程</a> (PDF)</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external">Backbone.js入门教程第二版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//feliving.github.io/developing-backbone-applications" target="_blank" rel="external">Developing Backbone.js Applications(中文版)</a></li>
</ul>
</li>
<li><p>AngularJS</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS最佳实践和风格指南</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/peiransun/angularjs-cn" target="_blank" rel="external">AngularJS中译本</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external">AngularJS入门教程</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">构建自己的AngularJS</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external">在Windows环境下用Yeoman构建AngularJS项目</a></li>
</ul>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//www.360weboy.com/handbook/zepto/index.html" target="_blank" rel="external">zepto 简明中文手册</a></p>
</li>
<li><p>Sea.js</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//island205.github.io/HelloSea.js/" target="_blank" rel="external">Hello Sea.js</a></li>
</ul>
</li>
<li><p>CoffeeScript</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//island205.github.io/coffeescript-cookbook.github.com/" target="_blank" rel="external">CoffeeScript Cookbook</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//island205.github.io/tlboc/" target="_blank" rel="external">The Little Book on CoffeeScript中文版</a></li>
</ul>
</li>
<li><p>ExtJS</p>
</li>
<li><ul>
<li><a href="https://link.zhihu.com/?target=http%3A//extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external">Ext4.1.0 中文文档</a></li>
</ul>
</li>
<li><p><a href="https://link.zhihu.com/?target=http%3A//www.ituring.com.cn/minibook/950" target="_blank" rel="external">Chrome扩展及应用开发</a></p>
</li>
<li><a href="https://link.zhihu.com/?target=http%3A//siberiawolf.com/free_programming/book/LearningJavaScript01.pdf" target="_blank" rel="external">JavaScript入门教程</a></li>
</ul>
<p>PHP</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.laruence.com/2010/06/21/1608.html" target="_blank" rel="external">PHP调试技术手册</a>(PDF)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.blogkun.com/project.html" target="_blank" rel="external">XDebug 2中文手册(译)</a> (CHM)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//wulijun.github.io/php-the-right-way/" target="_blank" rel="external">PHP之道</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/justjavac/PHP-Best-Practices-zh_CN" target="_blank" rel="external">PHP 最佳实践</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.blogkun.com/php/2013/12/21/php-security-best-practices/" target="_blank" rel="external">PHP安全最佳实践</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/reeze/tipi" target="_blank" rel="external">深入理解PHP内核</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.walu.cc/phpbook/" target="_blank" rel="external">PHP扩展开发及内核应用</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//codeigniter.org.cn/user_guide/index.html" target="_blank" rel="external">CodeIgniter 用户指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.golaravel.com/docs/" target="_blank" rel="external">Laravel4 中文文档</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/huanghua581/laravel-getting-started" target="_blank" rel="external">Laravel 入门</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//symfony-docs-chs.readthedocs.org/en/latest/" target="_blank" rel="external">Symfony2中文文档</a> (未译完)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//phalcon.5iunix.net/" target="_blank" rel="external">Phalcon中文文档</a>（翻译进行中）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//yiibook.com/" target="_blank" rel="external">YiiBook几本Yii框架的在线教程</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.nowamagic.net/librarys/books/contents/php" target="_blank" rel="external">简单易懂的PHP魔法</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/LinkedDestiny/swoole-doc" target="_blank" rel="external">swoole文档及入门教程</a></li>
</ul>
<p>iOS</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external">iOS开发60分钟入门</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external">iOS7人机界面指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iPhone 6 屏幕揭秘</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//nilsun.github.io/apple-watch/" target="_blank" rel="external">Apple Watch开发初探</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html" target="_blank" rel="external">马上着手开发 iOS 应用程序</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/jkyin/Subtitle" target="_blank" rel="external">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>
</ul>
<p>Android</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.apkbus.com/design/index.html" target="_blank" rel="external">Android Design(中文版)</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Google Android官方培训课程中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a></li>
</ul>
<p>Python</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">小白的Python教程</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="external">简明Python教程</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//looly.gitbooks.io/python-basic" target="_blank" rel="external">零基础学Python</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.pythondoc.com/pythontutorial27/index.html" target="_blank" rel="external">Python 2.7 官方教程中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="external">Python 3.3 官方教程中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//sebug.net/paper/books/dive-into-python3/" target="_blank" rel="external">深入 Python 3</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//code.google.com/p/zhong-wiki/wiki/PEP8" target="_blank" rel="external">PEP8 Python代码风格规范</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/" target="_blank" rel="external">Google Python 风格指南 中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//liam0205.me/2013/11/02/Python-tutorial-zh_cn/" target="_blank" rel="external">Python入门教程</a> (<a href="https://link.zhihu.com/?target=http%3A//liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf" target="_blank" rel="external">PDF</a>)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//article.yeeyan.org/view/311527/287706" target="_blank" rel="external">Python的神奇方法指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external">笨办法学 Python</a> （<a href="https://link.zhihu.com/?target=http%3A//liam0205.me/attachment/Python/PyHardWay/Learn_Python_The_Hard_Way_zh-cn.pdf" target="_blank" rel="external">PDF</a>版下载）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//django-chinese-docs.readthedocs.org/en/latest/" target="_blank" rel="external">Django 文档中文版</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/brantyoung/zh-django-best-practices" target="_blank" rel="external">Django 最佳实践</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//djangobook.py3k.cn/2.0/" target="_blank" rel="external">The Django Book 中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//webpy.org/tutorial3.zh-cn" target="_blank" rel="external">web.py 0.3 新手指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//webpy.org/cookbook/index.zh-cn" target="_blank" rel="external">Web.py Cookbook 简体中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//woodpecker.org.cn/diveintopython/" target="_blank" rel="external">Dive Into Python 中文版</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//associates.amazon.cn/gp/associates/network/main.html" target="_blank" rel="external">Bottle 文档中文版</a> (需翻墙)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//docs.jinkan.org/docs/flask/" target="_blank" rel="external">Flask 文档中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//docs.jinkan.org/docs/jinja2/" target="_blank" rel="external">Jinja2 文档中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//werkzeug-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="external">Werkzeug 文档中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//spacewander.github.io/explore-flask-zh" target="_blank" rel="external">Flask之旅</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//demo.pythoner.com/itt2zh/index.html" target="_blank" rel="external">Introduction to Tornado 中文翻译</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//pan.baidu.com/s/1qW4pvnY" target="_blank" rel="external">Python自然语言处理中文版</a> （感谢陈涛同学的翻译，也谢谢 <a href="https://link.zhihu.com/?target=https%3A//github.com/shwley" target="_blank" rel="external">@shwley</a> 联系了作者）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//liam0205.me/2014/09/11/matplotlib-tutorial-zh-cn/" target="_blank" rel="external">Python 绘图库 matplotlib 官方指南中文翻译</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//scrapy-chs.readthedocs.org/zh_CN/latest/" target="_blank" rel="external">Scrapy 0.25 文档</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/carfly/thinkpython-cn" target="_blank" rel="external">ThinkPython</a></li>
</ul>
<p>Ruby</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Ruby 风格指南</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Rails 风格指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//lrthw.github.io/" target="_blank" rel="external">笨方法學 Ruby</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//guides.ruby-china.org/" target="_blank" rel="external">Ruby on Rails 指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//ihower.tw/rails4/index.html" target="_blank" rel="external">Ruby on Rails 實戰聖經</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//railstutorial-china.org/" target="_blank" rel="external">Ruby on Rails Tutorial 原书第 2 版</a> (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//wusuopu.gitbooks.io/write-ruby-extension-with-c/content/" target="_blank" rel="external">编写Ruby的C拓展</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//ruby-china.org/topics/22386" target="_blank" rel="external">Ruby 源码解读</a></li>
</ul>
<p>Shell</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell脚本编程30分钟入门</a></li>
</ul>
<p>Go</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external">Go编程基础</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">Go入门指南</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//mikespook.com/learning-go/" target="_blank" rel="external">学习Go语言</a> (<a href="https://link.zhihu.com/?target=http%3A//xxiyy.qiniudn.com/%25E5%25AD%25A6%25E4%25B9%25A0%2520Go%2520%25E8%25AF%25AD%25E8%25A8%2580%2528Golang%2529.pdf%3Fdownload" target="_blank" rel="external">PDF</a>)</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external">Go Web 编程</a> (此书已经出版，希望开发者们去购买，支持作者的创作)</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/astaxie/Go-in-Action" target="_blank" rel="external">Go实战开发</a> (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者<a href="https://link.zhihu.com/?target=https%3A//me.alipay.com/astaxie" target="_blank" rel="external">捐赠</a>，以鼓励作者的继续创作)</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/astaxie/NPWG_zh" target="_blank" rel="external">Network programming with Go 中文翻译版本</a></li>
</ul>
<p>Groovy</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external">实战 Groovy 系列</a></li>
</ul>
<p>LaTeX</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="external">一份其实很短的 LaTeX 入门文档</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.mohu.org/info/lshort-cn.pdf" target="_blank" rel="external">一份不太简短的 LATEX 2ε 介绍</a> （PDF版）</li>
</ul>
<p>LISP</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//acl.readthedocs.org/en/latest/" target="_blank" rel="external">ANSI Common Lisp 中文翻譯版</a></li>
</ul>
<p>Lua</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/andycai/luaprimer" target="_blank" rel="external">Lua编程入门</a></li>
</ul>
<p>Haskell</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//rwh.readthedocs.org/en/latest/" target="_blank" rel="external">Real World Haskell 中文版</a></li>
</ul>
<p>R</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/yihui/r-ninja" target="_blank" rel="external">R语言忍者秘笈</a></li>
</ul>
<p>Scala</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external">Scala课堂</a> (Twitter的Scala中文教程)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">Effective Scala</a>(Twitter的Scala最佳实践的中文翻译)</li>
<li><a href="https://link.zhihu.com/?target=http%3A//zh.scala-tour.com/" target="_blank" rel="external">Scala指南</a></li>
</ul>
<p>Swift</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//numbbbbb.github.io/the-swift-programming-language-in-chinese/" target="_blank" rel="external">The Swift Programming Language 中文版</a></li>
</ul>
<p>Perl</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/horus/modern_perl_book" target="_blank" rel="external">Modern Perl 中文版</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//perl.linuxtoy.org/" target="_blank" rel="external">Perl 程序员应该知道的事</a></li>
</ul>
<p>Prolog</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//fengdidi.github.io/blog/2011/11/15/qian-yan/" target="_blank" rel="external">笨办法学Prolog</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/vimcn/vimcdoc" target="_blank" rel="external">Vim中文文档</a></li>
</ul>
<p>Vimscript</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="external">笨方法学Vimscript 中译本</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/vimcn/vimcdoc" target="_blank" rel="external">Vim中文文档</a></li>
</ul>
<p>读书笔记及其它<br>读书笔记</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/fool2fish/dragon-book-exercise-answers" target="_blank" rel="external">编译原理（紫龙书）中文第2版习题答案</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//hawstein.com/posts/make-thiner-programming-pearls.html" target="_blank" rel="external">把《编程珠玑》读薄</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/XiaolongJason/ReadingNote/blob/master/Effective%2520C%252B%252B/Effective%2520C%252B%252B.md" target="_blank" rel="external">Effective C++读书笔记</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/qyuhen/book" target="_blank" rel="external">Golang 学习笔记、Python 学习笔记、C 学习笔记</a> (PDF)</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/code4craft/jsoup-learning" target="_blank" rel="external">Jsoup 学习笔记</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/lzjun567/note" target="_blank" rel="external">学习笔记: Vim、Python、memcached</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.ituring.com.cn/activity/details/2004" target="_blank" rel="external">图灵开放书翻译计划–C++、Python、Java等</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//g.yeeyan.org/books/2095" target="_blank" rel="external">蒂姆·奥莱利随笔</a> （由译言网翻译，电子版免费）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//coer.zju.edu.cn/liu/octave-tutorial-cn.pdf" target="_blank" rel="external">Octave 入门</a> （PDF版）</li>
<li><a href="https://link.zhihu.com/?target=http%3A//sicp.readthedocs.org/en/latest/" target="_blank" rel="external">SICP 解题集</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/hacke2/hacke2.github.io/issues/2" target="_blank" rel="external">精彩博客集合</a></li>
<li><a href="https://link.zhihu.com/?target=http%3A//www.xiaoleilu.com/regex-guide/" target="_blank" rel="external">正则表达式简明参考</a></li>
</ul>
<p>测试相关</p>
<ul>
<li><a href="https://link.zhihu.com/?target=http%3A//appium.io/slate/cn/v1.2.0/" target="_blank" rel="external">移动APP自动化测试优秀框架Appium API Reference V1.2.0 CN</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GitHub上优秀的资源&quot;&gt;&lt;a href=&quot;#GitHub上优秀的资源&quot; class=&quot;headerlink&quot; title=&quot;GitHub上优秀的资源&quot;&gt;&lt;/a&gt;GitHub上优秀的资源&lt;/h1&gt;&lt;p&gt;语言无关类&lt;/p&gt;
&lt;p&gt;操作系统&lt;/p&gt;
&lt;ul&gt;
&lt;li
    
    </summary>
    
      <category term="学习资源" scheme="http://chenjiabing666.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="学习资源" scheme="http://chenjiabing666.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Nginx之location详解</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/Nginx%E4%B9%8Blocation%E8%AF%A6%E8%A7%A3/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/Nginx之location详解/</id>
    <published>2018-09-02T11:28:21.000Z</published>
    <updated>2018-09-02T11:29:14.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="location详解"><a href="#location详解" class="headerlink" title="location详解"></a>location详解</h2><p>1、root </p>
<pre><code>1 、location中root指定的只是相对路径，需要和路径结合起来映射地址，比如
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location ^~/static/ &#123;</div><div class="line">	## 这里的root需要和路径结合使用，即是映射的文件位置为 /usr/alyingboy/static</div><div class="line">    root /usr/alyingboy/; </div><div class="line">    index index.html</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>2、此时我们访问 IP/static/a.css  ，那么就会找到  `/usr/alyingboy/static/a.css`
</code></pre><p>2、 alias </p>
<pre><code>1、 alias指定的是绝对路径，不会和location中的路径结合使用，而是直接使用地址映射到文件，比如
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location ^~/static/ &#123;</div><div class="line">	## 不会路径结合映射地址，那么这里就会直接映射到/usr/alyingboy/文件夹下的文件</div><div class="line">    alias /usr/alyingboy/; </div><div class="line">    index index.html</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>2、如果定义的路径是文件夹，那么需要使用`/`结尾
</code></pre><p>3、<strong>一旦配置请求location映射到了指定的位置，那么下面全部的文件夹和文件都可以映射到，不需要在配置对其的映射，比如</strong>，但是如果使用其中的文件名重新映射了地址，那么这个路径将不能使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># /usr/alyingboy/文件夹下的全部文件包括子文件夹和文件都可以使用指定的地址访问到，比如访问地址为 ：</div><div class="line"># IP/static/a.txt  ,那么这个地址访问的是/usr/alyingboy/static/a.txt文件</div><div class="line">location / &#123;</div><div class="line">    root /usr/alyingboy/;</div><div class="line">    index index.html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h3><ul>
<li><strong>=</strong> 开头表示精确匹配。如 A 中只匹配根目录结尾的请求，后面不能带任何字符串；</li>
<li><strong>^~</strong> 开头表示uri以某个常规字符串开头，不是正则匹配；</li>
<li><strong>~</strong> 开头表示区分大小写的正则匹配；</li>
<li><strong>~*</strong> 开头表示不区分大小写的正则匹配；</li>
<li><strong>/</strong> 通用匹配, 如果没有其它匹配,任何请求都会匹配到。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">location  = / &#123;</div><div class="line">  # 精确匹配 / ，主机名后面不能带任何字符串</div><div class="line">  [ configuration A ]</div><div class="line">&#125;</div><div class="line">location  / &#123;</div><div class="line">  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</div><div class="line">  # 但是正则和最长字符串会优先匹配</div><div class="line">  [ configuration B ]</div><div class="line">&#125;</div><div class="line">location /documents/ &#123;</div><div class="line">  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</div><div class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</div><div class="line">  [ configuration C ]</div><div class="line">&#125;</div><div class="line">location ~ /documents/Abc &#123;</div><div class="line">  # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</div><div class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</div><div class="line">  [ configuration CC ]</div><div class="line">&#125;</div><div class="line">location ^~ /images/ &#123;</div><div class="line">  # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</div><div class="line">  [ configuration D ]</div><div class="line">&#125;</div><div class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</div><div class="line">  # 匹配所有以 gif,jpg或jpeg 结尾的请求</div><div class="line">  # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</div><div class="line">  [ configuration E ]</div><div class="line">&#125;</div><div class="line">location /images/ &#123;</div><div class="line">  # 字符匹配到 /images/，继续往下，会发现 ^~ 存在</div><div class="line">  [ configuration F ]</div><div class="line">&#125;</div><div class="line">location /images/abc &#123;</div><div class="line">  # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</div><div class="line">  # F与G的放置顺序是没有关系的</div><div class="line">  [ configuration G ]</div><div class="line">&#125;</div><div class="line">location ~ /images/abc/ &#123;</div><div class="line">  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</div><div class="line">  # 因为都是正则匹配，优先级一样，选择最上面的</div><div class="line">    [ configuration H ]</div><div class="line">&#125;</div><div class="line">location ~* /js/.*/\.js</div></pre></td></tr></table></figure>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul>
<li>( <strong>location =</strong> ) &gt; ( <strong>location 完整路径</strong> ) &gt; ( <strong>location ^~ 路径</strong> ) &gt; ( <strong>location ~,~* 正则顺序</strong> ) &gt; ( <strong>location 部分起始路径</strong> ) &gt; ( <strong>/</strong> )</li>
</ul>
<p>###　推荐使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</div><div class="line">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</div><div class="line"># 第一个必选规则</div><div class="line">location = / &#123;</div><div class="line">    proxy_pass http://tomcat:8080/index</div><div class="line">&#125;</div><div class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</div><div class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</div><div class="line">location ^~ /static/ &#123;</div><div class="line">    root /webroot/static/;</div><div class="line">&#125;</div><div class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</div><div class="line">    root /webroot/res/;</div><div class="line">&#125;</div><div class="line">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</div><div class="line">#非静态文件请求就默认是动态请求，自己根据实际把握</div><div class="line">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</div><div class="line">location / &#123;</div><div class="line">    proxy_pass http://tomcat:8080/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="http://www.nginx.cn/doc/" target="_blank" rel="external">官方中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;location详解&quot;&gt;&lt;a href=&quot;#location详解&quot; class=&quot;headerlink&quot; title=&quot;location详解&quot;&gt;&lt;/a&gt;location详解&lt;/h2&gt;&lt;p&gt;1、root &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 、location中roo
    
    </summary>
    
      <category term="Nginx" scheme="http://chenjiabing666.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://chenjiabing666.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>docker基本使用</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/docker基本使用/</id>
    <published>2018-09-02T11:27:01.000Z</published>
    <updated>2018-09-02T11:27:24.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker入门"><a href="#docker入门" class="headerlink" title="docker入门"></a>docker入门</h1><h2 id="配置阿里云的镜像加速器"><a href="#配置阿里云的镜像加速器" class="headerlink" title="配置阿里云的镜像加速器"></a>配置阿里云的镜像加速器</h2><p>1、登录阿里云控制台，找到自己的控制台，配置docker的镜像加速，在自己的centos7的机器上执行下述命令即可:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /etc/docker</div><div class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</div><div class="line">&#123;</div><div class="line">  "registry-mirrors": ["https://rxx4pnmv.mirror.aliyuncs.com"]</div><div class="line">&#125;</div><div class="line">EOF</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl restart docker</div></pre></td></tr></table></figure>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>1、搜索镜像：<code>docker search image</code></p>
<p>​    1、image是镜像的名字</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker search mysql ---- 搜索全部的mysql镜像</div></pre></td></tr></table></figure>
<p>2、拉取镜像：<code>docker pull　image：tag</code></p>
<p>​    1、image是镜像的名称</p>
<p>​    2、tag是镜像的版本，如果不指定tag，那么默认拉取最新的latest</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull mysql   --- 拉取最新版本的mysql</div><div class="line">docker pull mysql:5.5  -- 指定版本</div></pre></td></tr></table></figure>
<p>3、列出本地所有的镜像：<code>docker images [options]</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">docker images -a  -- 列出本地所有的镜像</div><div class="line"></div><div class="line">docker images -q  --显示镜像Ｉｄ</div><div class="line"></div><div class="line">docker　images -aq  -- 显示所有的镜像id</div><div class="line"></div><div class="line">docker images   -- 查看本地的镜像列表</div><div class="line"></div><div class="line">docker images  mysql  -- 列出本地仓库中镜像名称为mysql的镜像，会列出所有的版本</div><div class="line"></div><div class="line">docker images mysql:5.5   --- 列出指定版本的镜像</div><div class="line"></div><div class="line">docker image ls -f since=mysql:5.5  --- 列出所有在mysql:5.5之后拉取的镜像，之前的只需要将since改成before即可</div></pre></td></tr></table></figure>
<p>4、查看镜像，容器，数据卷所占用的空间 : <code>docker system df</code></p>
<p>5、显示本地仓库中虚悬镜像 <code>docker image ls -f dangling=true</code></p>
<p>6、删除虚悬镜像： <code>docker image prune</code></p>
<p>7、删除本地镜像：<code>docker rmi  [options],&lt;image&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1、先列出所有的镜像   docker images</div><div class="line"></div><div class="line">2、删除指定的本地镜像  docker rmi image_id   使用Id删除镜像</div><div class="line"></div><div class="line">3、强制删除镜像       docker rmi image_id  </div><div class="line"></div><div class="line">4、使用仓库名和标签删除指定镜像   docker rmi mysql:5.5   如果没有指定tag，那么默认是latest，这里的mysql是仓库的名字</div><div class="line"></div><div class="line">5、docker rmi mysql nginx  删除多个镜像，比如mysql，nginx</div><div class="line"></div><div class="line">6、删除全部镜像  docker rmi $(dokcer images -aq)</div></pre></td></tr></table></figure>
<p>8、运行容器：<code>docker run [options] image ...</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</div><div class="line"></div><div class="line">-d: 后台运行容器，并返回容器ID；</div><div class="line"></div><div class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；</div><div class="line"></div><div class="line">-p: 端口映射，格式为：主机(宿主)端口:容器端口</div><div class="line"></div><div class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</div><div class="line"></div><div class="line">--name="nginx-lb": 为容器指定一个名称；</div><div class="line"></div><div class="line">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</div><div class="line"></div><div class="line">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</div><div class="line"></div><div class="line">-h "mars": 指定容器的hostname；</div><div class="line"></div><div class="line">-e username="ritchie": 设置环境变量；</div><div class="line"></div><div class="line">--env-file=[]: 从指定文件读入环境变量；</div><div class="line"></div><div class="line">--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；</div><div class="line"></div><div class="line">-m :设置容器使用内存最大值；</div><div class="line"></div><div class="line">--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</div><div class="line"></div><div class="line">--link=[]: 添加链接到另一个容器；</div><div class="line"></div><div class="line">--expose=[]: 开放一个端口或一组端口；</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、docker pull centos  -- 拉取一个centos</div><div class="line"></div><div class="line">2、docker run -it  --name mycentos 5182e96772bf   --- 以交互形式运行该centos，就会在控制台上有一个输入终端</div><div class="line"></div><div class="line">3、docker run --name tomcat01 -d -p 8081:8080 tomcat   -- 运行tomcat，将docker的8081端口映射到tomcat的默认端口8080</div></pre></td></tr></table></figure>
<p>9、退出容器： <code>exit</code></p>
<p>10、列出当前所有的运行的容器  <code>docker ps</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-a :显示所有的容器，包括未运行的。</div><div class="line"></div><div class="line">-f :根据条件过滤显示的内容。</div><div class="line"></div><div class="line">--format :指定返回值的模板文件。</div><div class="line"></div><div class="line">-l :显示最近创建的容器。</div><div class="line"></div><div class="line">-n :列出最近创建的n个容器。</div><div class="line"></div><div class="line">--no-trunc :不截断输出。</div><div class="line"></div><div class="line">-q :静默模式，只显示容器编号。</div><div class="line"></div><div class="line">-s :显示总的文件大小。</div></pre></td></tr></table></figure>
<p>11、启动容器 ： <code>docker start container</code>，其中container可以是容器的名字，也可以是容器的Id</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start mycentos   ## 启动之前停止的容器</div></pre></td></tr></table></figure>
<p>12、重启容器 <code>docker restart container</code> </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker restart mycentos   -- 重启容器</div></pre></td></tr></table></figure>
<p>13、停止容器：<code>docker stop container</code>，平滑的停止</p>
<p>14、杀掉当前正在运行的容器：<code>docker kill container</code> </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker kill mycentos   </div><div class="line">docker kill -s mycentos</div></pre></td></tr></table></figure>
<p>15、删除容器：<code>docker rm container</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker rm containerId  -- 删除已经关闭的容器</div><div class="line"></div><div class="line">docker rm　-f containerId  -- 删除正在运行的容器，强制删除</div><div class="line"></div><div class="line">docker rm $(docker ps -aq)  -- 删除当前全部的容器</div></pre></td></tr></table></figure>
<h2 id="重要命令"><a href="#重要命令" class="headerlink" title="重要命令"></a>重要命令</h2><p>1、启动守护式的容器（后台运行） ： <code>docker　run --name mycentos -d centos</code></p>
<p>2、查看容器的日志信息：<code>docker logs [options] container</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-f : 跟踪日志输出</div><div class="line"></div><div class="line">--since :显示某个开始时间的所有日志</div><div class="line"></div><div class="line">-t : 显示时间戳</div><div class="line"></div><div class="line">--tail :仅列出最新N条容器日志</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker logs -f mycentos</div></pre></td></tr></table></figure>
<p>3、查看容器中运行的进程信息： <code>docker top container</code>，这个命令和Linux中的<code>ps</code>一样的效果</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker top mymysql  查看当前正在运行的mysql的进程信息，如下：</div><div class="line"></div><div class="line">UID    PID    PPID    C      STIME   TTY  TIME       CMD</div><div class="line">999    40347  40331   18     00:58   ?    00:00:02   mysqld</div></pre></td></tr></table></figure>
<p>4、查看容器内部的细节： <code>docker inspect container</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect mycentos</div></pre></td></tr></table></figure>
<p>5、进入正在运行的容器，并以命令行的形式进行交互：<code>docker attach container</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker attach myCentos  -- 进入正在运行的centos</div></pre></td></tr></table></figure>
<p>6、在运行的容器中执行命令 <code>docker exec</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it  mysql bash  -- 这个命令将会连接上mysql的终端，可以执行命令行</div></pre></td></tr></table></figure>
<h2 id="持久化数据-—-数据卷"><a href="#持久化数据-—-数据卷" class="headerlink" title="持久化数据  — 数据卷"></a>持久化数据  — 数据卷</h2><p>1、<code>docker run -it -v /宿主机绝对路径:/docker容器内的路径  镜像名</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 这个命令是在后台执行运行一个tomcat容器，使用-v可以在服务器的根目录下创建一个myDataVolum，在tomcat的根目录中创建一个dataVolumContainer文件夹</div><div class="line">1、docker run -d --name tomcat01 -v /myDataVolum:/dataVolumContainer tomcat</div><div class="line"></div><div class="line">## 进入tomcat 的根目录查看是否存在这个文件夹</div><div class="line">2、docker exec -it tomcat01 /bin/bash</div><div class="line"></div><div class="line">## 查看此时的tomcat的内部实现细节，可以看到有一段文字如下：</div><div class="line">3、 docker inspect tomcat01  </div><div class="line"></div><div class="line">"HostConfig": &#123;</div><div class="line">            "Binds": [</div><div class="line">                "/myData:/myDataContainer"</div><div class="line">          ],</div><div class="line"></div><div class="line"></div><div class="line">4、在服务器的根目录下查看是否存在这个文件</div></pre></td></tr></table></figure>
<p>2、此时的我们docker容器中的目录<code>dataVolumContainer</code>和服务器下的目录myDataVolum就可以实现数据共享了，即是实时的互相共享数据。</p>
<p>3、有了这个数据卷我们将一些容器的配置文件和服务器本地的配置文件绑定在一起，那么我们只需要修改服务器中的配置文件即可。</p>
<h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>1、在服务器新建文件夹，用来和容器中的mysql共享配置信息和日志（当然也可以不用创建，会自动创建）</p>
<p>​    1、在服务器的根目录下新建mysql的配置文件夹，用于和docker容器mysql的配置文件挂载 ：<code>/mysql/conf.d</code></p>
<p>​    2、新建一个日志文件夹，用于挂载日志信息：<code>/mysql/logs</code></p>
<p>​    3、新建一个文件夹，挂载data目录：<code>/mysql/data</code></p>
<p>2、拉取指定版本的镜像：<code>docker pull mysql:5.7</code></p>
<p>3、运行镜像，指定挂载目录</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name mysql -p 3306:3306 -v /mysql/data:/var/lib/mysql -v /mysql/conf.d:/etc/mysql/conf.d -v /mysql/logs:/logs -e MYSQL_ROOT_PASSWORD=12345 -d mysql:5.7</div></pre></td></tr></table></figure>
<p>4、移植配置文件到我们服务器的配置文件目录中：<code>/mysql/conf.d/</code>，新建一个配置文件mysql.cnf，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line">default-character-set=utf8</div><div class="line">[mysqld]</div><div class="line">character-set-server=utf8</div></pre></td></tr></table></figure>
<p>5、新建配置文件<code>mysqldump.cnf</code>,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysqldump]</div><div class="line">quick</div><div class="line">quote-names</div><div class="line">max_allowed_packet      = 16M</div></pre></td></tr></table></figure>
<p>6、连接数据库，在docker容器中连接：<code>docker exec -it mysql bash</code></p>
<p>7、远程登录服务器的mysql：<code>mysql -h 47.123.23.44 -u root -p</code></p>
<p>8、查看mysql的日志信息：<code>docker logs mysql</code></p>
<p>9、我们在使用docker run命令的时候传入一个或者多个参数指定mysql的环境变量，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MYSQL_ROOT_PASSWORD：必须。用于设置MySQLroot用户的密码</div><div class="line">MYSQL_DATABASE：可选。用于指定镜像启动容器时要创建的数据库。如果提供了用户/密码，则会将该用户做为此数据库的超级用户。</div><div class="line">MYSQL_USER，MYSQL_PASSWORD：可选。用于创建一个新用户并设置密码。</div><div class="line">MYSQL_ALLOW_EMPTY_PASSWORD：可选。设置为yes时，则可以使用空密码登录</div><div class="line">MYSQL_RANDOM_ROOT_PASSWORD：可选。设置为yes时会为root用户设置一个随机密码（使用pwgen），所生成的随机密码会被输出到stdout</div><div class="line">MYSQL_ONETIME_PASSWORD：可选。为root用户指定一个一次性密码，该密码会在用户首次登录时强制修改</div></pre></td></tr></table></figure>
<p>10、参考文章：<a href="https://itbilu.com/linux/docker/EyP7QP86M.html" target="_blank" rel="external">https://itbilu.com/linux/docker/EyP7QP86M.html</a></p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>0、<a href="https://lvtao.net/config/docker-nginx.html" target="_blank" rel="external">https://lvtao.net/config/docker-nginx.html</a></p>
<p>1、<a href="https://my.oschina.net/u/3375733/blog/1591091" target="_blank" rel="external">https://my.oschina.net/u/3375733/blog/1591091</a></p>
<p>1、在服务器上创建文件夹（可以不创建，会自动创建），用于和docker容器中的Nginx的共享数据，文件夹如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1、html目录将映射为nginx容器配置的虚拟目录</div><div class="line"></div><div class="line">2、logs目录将映射为nginx容器的日志目录</div><div class="line"></div><div class="line">3、conf目录里的配置文件将映射为nginx容器的配置文件</div></pre></td></tr></table></figure>
<p>2、拉取最新的Nginx，<code>docker pull nginx</code></p>
<p>3、运行容器，使用<code>-v</code>指定共享的容器卷，如下：</p>
<p>​    1、运行下面的指令会报错，因为<code>-v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf</code>这个nginx.conf根本不知道是文件夹还是文件，因此我们应该现在服务器上建立一个和nginx一样的配置文件，那么执行下面的语句将会正确执行</p>
<p>​        1、首先先运行一个nginx容器，名字为mynginx</p>
<p>​        2、执行<code>docker cp mynginx:/etc/nginx/nginx.conf /nginx/conf/</code>,将配置文件复制到<code>/nginx/conf/</code>下</p>
<p>​        3、执行下面的语句</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run  --name mynginx -p 80:80 -v /nginx/html:/usr/share/nginx/html -v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /nginx/logs:/var/log/nginx/ -v /nginx/www:/usr/share/nginx/www -d nginx</div></pre></td></tr></table></figure>
<p>​    </p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://yeasy.gitbooks.io/docker_practice/content/image/list.html" target="_blank" rel="external">https://yeasy.gitbooks.io/docker_practice/content/image/list.html</a></p>
<p>2、<a href="https://itbilu.com/linux/docker" target="_blank" rel="external">https://itbilu.com/linux/docker</a></p>
<p>3、<a href="http://docs.linux.xyz/docs/show/24" target="_blank" rel="external">http://docs.linux.xyz/docs/show/24</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker入门&quot;&gt;&lt;a href=&quot;#docker入门&quot; class=&quot;headerlink&quot; title=&quot;docker入门&quot;&gt;&lt;/a&gt;docker入门&lt;/h1&gt;&lt;h2 id=&quot;配置阿里云的镜像加速器&quot;&gt;&lt;a href=&quot;#配置阿里云的镜像加速器&quot; class
    
    </summary>
    
      <category term="docker" scheme="http://chenjiabing666.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://chenjiabing666.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>springBoot高级</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/springBoot%E9%AB%98%E7%BA%A7/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/springBoot高级/</id>
    <published>2018-09-02T11:25:24.000Z</published>
    <updated>2018-10-03T09:33:31.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springBoot高级"><a href="#springBoot高级" class="headerlink" title="springBoot高级"></a>springBoot高级</h1><h2 id="普通缓存"><a href="#普通缓存" class="headerlink" title="普通缓存"></a>普通缓存</h2><p>1、在springBoot中可以使用注解式开发缓存，默认没有开启缓存中间件，那么使用的就是存储在Map中的原理，但是我们还可以配置自己的缓存中间件，比如redis</p>
<p>2、引入依赖，启动器</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入缓存的启动器--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、开启缓存，在主配置类上添加<code>EnableCaching</code>这个注解即可，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//批量扫描com.tellwess.springbootserver.mappers这个包下面的所有mapper</span></div><div class="line"><span class="meta">@MapperScan</span>(value =<span class="string">"com.tellwess.springbootserver.mappers"</span>)</div><div class="line"><span class="meta">@EnableCaching</span>    <span class="comment">//开启缓存注解</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootServerApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>4、使用注解版本的mybatis和数据库进行交互，其中的UserMapper如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User对应的Mapper</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_user where user_id=#&#123;userId&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"userId"</span>)</div><div class="line">    <span class="meta">@Insert</span>(&#123;<span class="string">"insert into t_user(name,gender,age) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;age&#125;)"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from t_user where user_id=#&#123;userId&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_user where name=#&#123;name&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUserByName</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、在service层中使用缓存的各种注解实现缓存的操作，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@CacheConfig</span> ： 这个注解用于指定这个service类中的缓存操作的公共属性，比如缓存的名字可以使用cacheNames指定，那么在下面的每一个注解中都可以不指定，默认使用的就是这个指定的</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="comment">//@CacheConfig(cacheNames = "user",keyGenerator = "myGenerate")</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *<span class="doctag">@Cacheable</span> : 这个注解是在方法运行之前检查缓存中是否存在指定的key的数据，如果存在，那么直接返回</div><div class="line">     *              如果不存在，那么执行方法体，最后将方法体返回的结果添加到缓存中</div><div class="line">     *           1、 cacheNames/value : 指定cache的名字,指定将方法的返回值放在那个缓存中，是数组的方式</div><div class="line">     *           2、key : 指定缓存的key，如果不指定的，那么默认使用方法参数的值，当然也是可以使用一些表达式指定这个key的值</div><div class="line">     *              1、spEL表达式：</div><div class="line">     *                  1、当前被调用的方法名称 ---- #root.methodName  ---- #root.method.name</div><div class="line">     *                  2、当前目标对象  ---- #root.target</div><div class="line">     *                  3、当前目标对象的类  ----- #root.targetClass</div><div class="line">     *                  4、当前被调用对象的参数列表  ---- #root.args[index]</div><div class="line">     *                  5、方法参数的名字，直接使用`#名字`即可获取参数的值  ------ `#userId`</div><div class="line">     *                  6、方法的返回值    -----    #result</div><div class="line">     *           3、keyGenerator : key的生成器，这个和key只能同时指定一个，当然也是可以自定义这个生成器</div><div class="line">     *           4、condition :  指定缓存的条件，只有满足这个条件的时候才会使用缓存 --- condition = "#userId&gt;2"</div><div class="line">     *           5、unless :  当这个条件为true的时候就不缓存，这个和condition条件相反。</div><div class="line">     *                      1、这个可以使用返回的结果进行判断，比如当我们对返回结果为空的时候不使用缓存，那么可以写成unless = "#result==null"</div><div class="line">     *</div><div class="line">     *           6、cacheManager : 指定缓存管理器</div><div class="line">     *           7、sync ： 是否使用异步模式</div><div class="line">     *           8、注意：springBoot默认是将返回值为null的时候也会将其缓存起来，我们可以使用unless条件对结果进行判断是否缓存</div><div class="line">     *</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="meta">@Cacheable</span>(value = &#123;<span class="string">"user"</span>&#125;,key = <span class="string">"#userId"</span>,condition = <span class="string">"#userId&gt;2"</span>,unless = <span class="string">"#result==null"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer userId)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"查询数据库"</span>);</div><div class="line">        <span class="keyword">return</span> userMapper.selectUserById(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@CachePut</span> ： 这个注解的作用是，在方法体执行完成之后，将返回的结果添加到缓存中，可以用于添加和修改操作</div><div class="line">     *              其中可以设置的参数和<span class="doctag">@cacheable</span>差不多</div><div class="line">     * 注意：**只要是标注了这个注解之后，那么这个方法一定是要执行的，因为需要将方法执行的结果添加到缓存中**</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>,key = <span class="string">"#user.userId"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"添加用户"</span>);</div><div class="line">        userMapper.insertUser(user);</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@CacheEvict</span> : 这个注解的作用是清除缓存，默认是在执行方法体之后清除缓存，如果执行的代码出现了异常，那么这个清除缓存将不会执行</div><div class="line">     *      1、vaue ： 指定缓存的名字</div><div class="line">     *      2、key : 指定需要删除的key</div><div class="line">     *      3、allEntries ： 是否删除指定缓存中的全部缓存，默认为false，一旦指定为true，那么将会删除value指定的cache中的全部缓存</div><div class="line">     *      4、beforeInvocation : 是否在执行方法体的代码之前执行清除缓存，默认为false，如果指定了为true，那么就会在方法执行之前清除缓存，</div><div class="line">     *                            此时如果方法体运行出错，那么缓存中的数据将不能回滚</div><div class="line">     */</div><div class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>,key = <span class="string">"#userId"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"调用了删除的方法"</span>);</div><div class="line">        userMapper.deleteUser(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Caching</span> : 这个是一个组合注解，针对一个方法逻辑中多种的缓存操作</div><div class="line">     *             1、cacheable ： 一个数组，其中指定<span class="doctag">@Cacheable</span>这个注解，可以指定多个，用于在执行方法之前先查询缓存，如果没有才会执行方法体，并且将结果缓存起来</div><div class="line">     *             2、put： 一个数组，其中只能指定<span class="doctag">@CachePut</span>这个注解，可以指定多个，用于在执行方法之后将返回的结果添加到缓存中</div><div class="line">     *             3、evict　：　一个数组，其中只能指定＠CacheEvict这个注解，用于在方法执行完成之后清除缓存</div><div class="line">     */</div><div class="line">    <span class="meta">@Caching</span>(</div><div class="line">            cacheable = &#123;</div><div class="line">                    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>,key = <span class="string">"#name"</span>)   <span class="comment">//首先根据name从缓存中获取数据，如果没有将会把缓存的结果添加到缓存中</span></div><div class="line">            &#125;,</div><div class="line">            put = &#123;</div><div class="line">                    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>,key = <span class="string">"#result.age"</span>),</div><div class="line">                    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>,key = <span class="string">"#result.gender"</span>),</div><div class="line">            &#125;</div><div class="line">    )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"调用getUserByName方法"</span>);</div><div class="line">        <span class="keyword">return</span> userMapper.selectUserByName(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h2><p>1、添加场景启动器，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、在全局配置文件中配置redis的连接配置，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Redis数据库索引（默认为0）</div><div class="line">spring.redis.database=0</div><div class="line"># Redis服务器地址</div><div class="line">spring.redis.host=172.31.19.222	</div><div class="line"># Redis服务器连接端口</div><div class="line">spring.redis.port=6379</div><div class="line"># Redis服务器连接密码（默认为空）</div><div class="line">spring.redis.password=</div><div class="line"># 连接池最大连接数（使用负值表示没有限制）</div><div class="line">spring.redis.pool.max-active=8</div><div class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class="line">spring.redis.pool.max-wait=-1</div><div class="line"># 连接池中的最大空闲连接</div><div class="line">spring.redis.pool.max-idle=8</div><div class="line"># 连接池中的最小空闲连接</div><div class="line">spring.redis.pool.min-idle=0</div><div class="line"># 连接超时时间（毫秒）</div><div class="line">spring.redis.timeout=0</div></pre></td></tr></table></figure>
<p>3、一旦注入这个场景启动器，那么将会为我们自动配置，我们可以直接使用spring-data-redis操作redis，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootCacheApplicationTests</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;  <span class="comment">//存储key和value都是字符串的数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate; <span class="comment">//操作key和value都是Object的数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line">        stringRedisTemplate.opsForValue().append(<span class="string">"hello"</span>,<span class="string">"hello world"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、springBoot默认是使用的jdk的序列化方式将数据保存在Redis中，但是我们可以自定义自己的序列化规则，可以指定的json序列化器，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定一个redis的配置类</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//指定自己的RedisTemplate，并且指定默认的序列化器为json的，只需要设置默认的即可，因为value和key的序列化器和默认的是一样的，不需要重复指定</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, User&gt; <span class="title">redisTemplate</span><span class="params">(</span></span></div><div class="line">            RedisConnectionFactory redisConnectionFactory) <span class="keyword">throws</span> UnknownHostException &#123;</div><div class="line">        RedisTemplate&lt;Object, User&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line">        template.setConnectionFactory(redisConnectionFactory);</div><div class="line">        <span class="comment">//指定json的序列化器</span></div><div class="line">        Jackson2JsonRedisSerializer&lt;User&gt; serializer=<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;User&gt;(User.class);</div><div class="line">        template.setDefaultSerializer(serializer);  <span class="comment">//设置为默认的序列化器</span></div><div class="line">        <span class="keyword">return</span> template;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、只要引入redis的场景启动器，那么就会为我们配置一个RedisCache这个名字的缓存管理器，因此不需要重新配置了，那么我们可以直接使用缓存的注解了。此时使用缓存注解的时候就会将数据存储在redis中了。但是默认的保存的数据还是使用jdk序列化后的结果。</p>
<p>6、个人觉得使用缓存不需要使用注解，手写代码应该更加灵活一些。</p>
<h2 id="SpringBoot共用session"><a href="#SpringBoot共用session" class="headerlink" title="SpringBoot共用session"></a>SpringBoot共用session</h2><ul>
<li><a href="http://www.ityouknow.com/springboot/2016/03/06/spring-boot-redis.html" target="_blank" rel="external">http://www.ityouknow.com/springboot/2016/03/06/spring-boot-redis.html</a></li>
</ul>
<h1 id="springBoot高级-1"><a href="#springBoot高级-1" class="headerlink" title="springBoot高级"></a>springBoot高级</h1><h2 id="普通缓存-1"><a href="#普通缓存-1" class="headerlink" title="普通缓存"></a>普通缓存</h2><p>1、在springBoot中可以使用注解式开发缓存，默认没有开启缓存中间件，那么使用的就是存储在Map中的原理，但是我们还可以配置自己的缓存中间件，比如redis</p>
<p>2、引入依赖，启动器</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入缓存的启动器--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、开启缓存，在主配置类上添加<code>EnableCaching</code>这个注解即可，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//批量扫描com.tellwess.springbootserver.mappers这个包下面的所有mapper</span></div><div class="line"><span class="meta">@MapperScan</span>(value =<span class="string">"com.tellwess.springbootserver.mappers"</span>)</div><div class="line"><span class="meta">@EnableCaching</span>    <span class="comment">//开启缓存注解</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootServerApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>4、使用注解版本的mybatis和数据库进行交互，其中的UserMapper如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * User对应的Mapper</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_user where user_id=#&#123;userId&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUserById</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"userId"</span>)</div><div class="line">    <span class="meta">@Insert</span>(&#123;<span class="string">"insert into t_user(name,gender,age) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;age&#125;)"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from t_user where user_id=#&#123;userId&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_user where name=#&#123;name&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUserByName</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、在service层中使用缓存的各种注解实现缓存的操作，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@CacheConfig</span> ： 这个注解用于指定这个service类中的缓存操作的公共属性，比如缓存的名字可以使用cacheNames指定，那么在下面的每一个注解中都可以不指定，默认使用的就是这个指定的</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="comment">//@CacheConfig(cacheNames = "user",keyGenerator = "myGenerate")</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *<span class="doctag">@Cacheable</span> : 这个注解是在方法运行之前检查缓存中是否存在指定的key的数据，如果存在，那么直接返回</div><div class="line">     *              如果不存在，那么执行方法体，最后将方法体返回的结果添加到缓存中</div><div class="line">     *           1、 cacheNames/value : 指定cache的名字,指定将方法的返回值放在那个缓存中，是数组的方式</div><div class="line">     *           2、key : 指定缓存的key，如果不指定的，那么默认使用方法参数的值，当然也是可以使用一些表达式指定这个key的值</div><div class="line">     *              1、spEL表达式：</div><div class="line">     *                  1、当前被调用的方法名称 ---- #root.methodName  ---- #root.method.name</div><div class="line">     *                  2、当前目标对象  ---- #root.target</div><div class="line">     *                  3、当前目标对象的类  ----- #root.targetClass</div><div class="line">     *                  4、当前被调用对象的参数列表  ---- #root.args[index]</div><div class="line">     *                  5、方法参数的名字，直接使用`#名字`即可获取参数的值  ------ `#userId`</div><div class="line">     *                  6、方法的返回值    -----    #result</div><div class="line">     *           3、keyGenerator : key的生成器，这个和key只能同时指定一个，当然也是可以自定义这个生成器</div><div class="line">     *           4、condition :  指定缓存的条件，只有满足这个条件的时候才会使用缓存 --- condition = "#userId&gt;2"</div><div class="line">     *           5、unless :  当这个条件为true的时候就不缓存，这个和condition条件相反。</div><div class="line">     *                      1、这个可以使用返回的结果进行判断，比如当我们对返回结果为空的时候不使用缓存，那么可以写成unless = "#result==null"</div><div class="line">     *</div><div class="line">     *           6、cacheManager : 指定缓存管理器</div><div class="line">     *           7、sync ： 是否使用异步模式</div><div class="line">     *           8、注意：springBoot默认是将返回值为null的时候也会将其缓存起来，我们可以使用unless条件对结果进行判断是否缓存</div><div class="line">     *</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="meta">@Cacheable</span>(value = &#123;<span class="string">"user"</span>&#125;,key = <span class="string">"#userId"</span>,condition = <span class="string">"#userId&gt;2"</span>,unless = <span class="string">"#result==null"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer userId)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"查询数据库"</span>);</div><div class="line">        <span class="keyword">return</span> userMapper.selectUserById(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@CachePut</span> ： 这个注解的作用是，在方法体执行完成之后，将返回的结果添加到缓存中，可以用于添加和修改操作</div><div class="line">     *              其中可以设置的参数和<span class="doctag">@cacheable</span>差不多</div><div class="line">     * 注意：**只要是标注了这个注解之后，那么这个方法一定是要执行的，因为需要将方法执行的结果添加到缓存中**</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>,key = <span class="string">"#user.userId"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"添加用户"</span>);</div><div class="line">        userMapper.insertUser(user);</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@CacheEvict</span> : 这个注解的作用是清除缓存，默认是在执行方法体之后清除缓存，如果执行的代码出现了异常，那么这个清除缓存将不会执行</div><div class="line">     *      1、vaue ： 指定缓存的名字</div><div class="line">     *      2、key : 指定需要删除的key</div><div class="line">     *      3、allEntries ： 是否删除指定缓存中的全部缓存，默认为false，一旦指定为true，那么将会删除value指定的cache中的全部缓存</div><div class="line">     *      4、beforeInvocation : 是否在执行方法体的代码之前执行清除缓存，默认为false，如果指定了为true，那么就会在方法执行之前清除缓存，</div><div class="line">     *                            此时如果方法体运行出错，那么缓存中的数据将不能回滚</div><div class="line">     */</div><div class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>,key = <span class="string">"#userId"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"调用了删除的方法"</span>);</div><div class="line">        userMapper.deleteUser(userId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Caching</span> : 这个是一个组合注解，针对一个方法逻辑中多种的缓存操作</div><div class="line">     *             1、cacheable ： 一个数组，其中指定<span class="doctag">@Cacheable</span>这个注解，可以指定多个，用于在执行方法之前先查询缓存，如果没有才会执行方法体，并且将结果缓存起来</div><div class="line">     *             2、put： 一个数组，其中只能指定<span class="doctag">@CachePut</span>这个注解，可以指定多个，用于在执行方法之后将返回的结果添加到缓存中</div><div class="line">     *             3、evict　：　一个数组，其中只能指定＠CacheEvict这个注解，用于在方法执行完成之后清除缓存</div><div class="line">     */</div><div class="line">    <span class="meta">@Caching</span>(</div><div class="line">            cacheable = &#123;</div><div class="line">                    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>,key = <span class="string">"#name"</span>)   <span class="comment">//首先根据name从缓存中获取数据，如果没有将会把缓存的结果添加到缓存中</span></div><div class="line">            &#125;,</div><div class="line">            put = &#123;</div><div class="line">                    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>,key = <span class="string">"#result.age"</span>),</div><div class="line">                    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>,key = <span class="string">"#result.gender"</span>),</div><div class="line">            &#125;</div><div class="line">    )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"调用getUserByName方法"</span>);</div><div class="line">        <span class="keyword">return</span> userMapper.selectUserByName(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Redis缓存-1"><a href="#Redis缓存-1" class="headerlink" title="Redis缓存"></a>Redis缓存</h2><p>1、添加场景启动器，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、在全局配置文件中配置redis的连接配置，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Redis数据库索引（默认为0）</div><div class="line">spring.redis.database=0</div><div class="line"># Redis服务器地址</div><div class="line">spring.redis.host=172.31.19.222	</div><div class="line"># Redis服务器连接端口</div><div class="line">spring.redis.port=6379</div><div class="line"># Redis服务器连接密码（默认为空）</div><div class="line">spring.redis.password=</div><div class="line"># 连接池最大连接数（使用负值表示没有限制）</div><div class="line">spring.redis.pool.max-active=8</div><div class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class="line">spring.redis.pool.max-wait=-1</div><div class="line"># 连接池中的最大空闲连接</div><div class="line">spring.redis.pool.max-idle=8</div><div class="line"># 连接池中的最小空闲连接</div><div class="line">spring.redis.pool.min-idle=0</div><div class="line"># 连接超时时间（毫秒）</div><div class="line">spring.redis.timeout=0</div></pre></td></tr></table></figure>
<p>3、一旦注入这个场景启动器，那么将会为我们自动配置，我们可以直接使用spring-data-redis操作redis，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootCacheApplicationTests</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;  <span class="comment">//存储key和value都是字符串的数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate; <span class="comment">//操作key和value都是Object的数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line">        stringRedisTemplate.opsForValue().append(<span class="string">"hello"</span>,<span class="string">"hello world"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、springBoot默认是使用的jdk的序列化方式将数据保存在Redis中，但是我们可以自定义自己的序列化规则，可以指定的json序列化器，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定一个redis的配置类</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//指定自己的RedisTemplate，并且指定默认的序列化器为json的，只需要设置默认的即可，因为value和key的序列化器和默认的是一样的，不需要重复指定</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, User&gt; <span class="title">redisTemplate</span><span class="params">(</span></span></div><div class="line">            RedisConnectionFactory redisConnectionFactory) <span class="keyword">throws</span> UnknownHostException &#123;</div><div class="line">        RedisTemplate&lt;Object, User&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line">        template.setConnectionFactory(redisConnectionFactory);</div><div class="line">        <span class="comment">//指定json的序列化器</span></div><div class="line">        Jackson2JsonRedisSerializer&lt;User&gt; serializer=<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;User&gt;(User.class);</div><div class="line">        template.setDefaultSerializer(serializer);  <span class="comment">//设置为默认的序列化器</span></div><div class="line">        <span class="keyword">return</span> template;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、只要引入redis的场景启动器，那么就会为我们配置一个RedisCache这个名字的缓存管理器，因此不需要重新配置了，那么我们可以直接使用缓存的注解了。此时使用缓存注解的时候就会将数据存储在redis中了。但是默认的保存的数据还是使用jdk序列化后的结果。</p>
<p>6、个人觉得使用缓存不需要使用注解，手写代码应该更加灵活一些。</p>
<h2 id="SpringBoot共用session-1"><a href="#SpringBoot共用session-1" class="headerlink" title="SpringBoot共用session"></a>SpringBoot共用session</h2><ul>
<li><a href="http://www.ityouknow.com/springboot/2016/03/06/spring-boot-redis.html" target="_blank" rel="external">http://www.ityouknow.com/springboot/2016/03/06/spring-boot-redis.html</a></li>
</ul>
<h2 id="springBoot异步任务"><a href="#springBoot异步任务" class="headerlink" title="springBoot异步任务"></a>springBoot异步任务</h2><h2 id="springBoot定时任务"><a href="#springBoot定时任务" class="headerlink" title="springBoot定时任务"></a>springBoot定时任务</h2><ul>
<li>sprignBoot定时任务是与quartz整合，不需要添加任何的依赖</li>
<li>在springBoot的启动类上添加<code>@EnableScheduling</code>注解开启定时调度</li>
<li>在需要定时调度的方法上添加<code>@Scheduled</code>这个注解即可，其中可以指定<strong>cron表达式</strong> 和其他的定时方式，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scheduled</span>(fixedRate = <span class="number">6000</span>) ：上一次开始执行时间点之后<span class="number">6</span>秒再执行</div><div class="line"><span class="meta">@Scheduled</span>(fixedDelay = <span class="number">6000</span>) ：上一次执行完毕时间点之后<span class="number">6</span>秒再执行</div><div class="line"><span class="meta">@Scheduled</span>(initialDelay=<span class="number">1000</span>, fixedRate=<span class="number">6000</span>) ：第一次延迟<span class="number">1</span>秒后执行，之后按fixedRate的规则每<span class="number">6</span>秒执行一次</div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>   <span class="comment">//注入到容器中</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartService</span> </span>&#123;	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 开启定时调度任务，使用cron表达式指定时间</div><div class="line">	 */</div><div class="line">	<span class="meta">@Scheduled</span>(cron=<span class="string">"0/1 * * * * ? "</span>)   <span class="comment">//指定cron表达式每秒执行一次</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sysHello</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"say hello"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动类上添加注解开启定时任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableScheduling</span>  <span class="comment">//开启定时任务调度</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springBoot高级&quot;&gt;&lt;a href=&quot;#springBoot高级&quot; class=&quot;headerlink&quot; title=&quot;springBoot高级&quot;&gt;&lt;/a&gt;springBoot高级&lt;/h1&gt;&lt;h2 id=&quot;普通缓存&quot;&gt;&lt;a href=&quot;#普通缓存&quot; cla
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>springBoot基本使用</title>
    <link href="http://chenjiabing666.github.io/2018/09/02/springBoot%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/09/02/springBoot基本使用/</id>
    <published>2018-09-02T11:24:08.000Z</published>
    <updated>2018-09-02T11:24:36.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取配置文件中的值-ConfigurationProperties"><a href="#获取配置文件中的值-ConfigurationProperties" class="headerlink" title="获取配置文件中的值@ConfigurationProperties"></a>获取配置文件中的值@ConfigurationProperties</h2><p>1、这个注解默认只能从全局配置文件中获取信息，全局配置有两个，如下：</p>
<p>​    1、application.properties</p>
<p>​    2、application.yml</p>
<h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><p>1、key和value之间需要空格</p>
<p>2、缩进显示层次关系，缩进多少无所谓，只要左对齐那么就是一个层级关系的</p>
<p>3、<code>key: value</code> :： 表示一个键值对，注意一定要有空格</p>
<p>4、大小写敏感</p>
<p>5、属性的值如果是字符串可以直接写，不需要加上双引号或者单引号</p>
<p>​    1、双引号：加上双引号的值不会转义里面的特殊字符，比如字符串中包含一个换行符，那么就会在输出的时候换行</p>
<p>​    2、单引号：会转义特殊的字符，会直接输出换行符为<code>\n</code></p>
<p>6、List和Set的表示方法：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># key与value之间空格</span></div><div class="line"><span class="attr">pets:</span></div><div class="line">	<span class="bullet">-</span> <span class="string">dog</span></div><div class="line">	<span class="bullet">-</span> <span class="string">pig</span></div><div class="line">	<span class="bullet">-</span> <span class="string">cat</span></div><div class="line"></div><div class="line"><span class="comment">## 行内的写法：</span></div><div class="line"><span class="attr">pets:</span> <span class="string">[dog,pig,cat]</span></div></pre></td></tr></table></figure>
<p>7、Map<key,value>的写法</key,value></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">map:</span> <span class="string">&#123;name:</span> <span class="string">Jack,age:</span> <span class="number">22</span><span class="string">,gender:</span> <span class="string">女&#125;</span></div></pre></td></tr></table></figure>
<p>8、举例</p>
<p>1、JavaBean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ConfigurationProperties ： 这个注解表示这个实体类的值来自于配置文件中，当然包括properties和yaml文件</div><div class="line"> *                          prefix表示这个配置文件中的前缀</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>  <span class="comment">//注入到容器中</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</div><div class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line">    <span class="keyword">private</span> Date birthday;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">person:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">陈加兵</span></div><div class="line"><span class="attr">  age:</span> <span class="number">22</span></div><div class="line"><span class="attr">  list:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">zhangsan</span></div><div class="line"><span class="bullet">    -</span> <span class="string">lisi</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">郑元梅</span></div><div class="line"><span class="attr">    age:</span> <span class="number">22</span></div><div class="line"><span class="attr">  map:</span> <span class="string">&#123;name:</span> <span class="string">Jack,age:</span> <span class="number">22</span><span class="string">,gender:</span> <span class="string">女&#125;</span></div><div class="line"><span class="attr">  birthday:</span> <span class="number">2012</span><span class="string">/12/11</span></div></pre></td></tr></table></figure>
<p>3、添加一个依赖，将会在配置文件中自动提示</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入这个处理器，在配置文件中将会自动提示--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4、测试类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeammissionServerApplicationTests</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Person person;   <span class="comment">//自动注入</span></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(person);   <span class="comment">//输出配置信息</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>1、<strong>依然可以使用@ConfigurationProperties这个注解获取配置文件的值</strong>，不过和yml文件中的配置有很大的区别，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">person.age=22</div><div class="line">person.name=陈加兵</div><div class="line">person.birthday=2012/12/11</div><div class="line">person.list=a,b,c</div><div class="line">person.map.name=陈加兵</div><div class="line">person.map.age=22</div><div class="line">person.user.name=Jack</div><div class="line">person.user.age=33</div></pre></td></tr></table></figure>
<h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>1、这个注解是spring中的注解，用于获取配置文件的值</p>
<table>
<thead>
<tr>
<th>使用方式</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Value(“${}”)</td>
<td>获取配置文件中的值</td>
</tr>
<tr>
<td>@Value(“#{}”)</td>
<td>获取配置文件中的值，不过需要使用<util:>这个指定id</util:></td>
</tr>
<tr>
<td>@Value(“value”)</td>
<td>可以直接为变量赋值</td>
</tr>
</tbody>
</table>
<p>2、不支持JSR303校验</p>
<h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h2><p>1、我们在使用<strong>@configurationProperties</strong>获取文件中的信息的时候，默认只能从默认的配置文件中获取信息，如果我们需要自己单独定义一个配置文件，那么需要使用@PropertySource这个注解获取其中的信息</p>
<p>2、 我们在项目路径下新建一个person.properties文件，其中的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">person.age=22</div><div class="line">person.name=陈加兵</div><div class="line">person.birthday=2012/12/11</div><div class="line">person.list=a,b,c</div><div class="line">person.map.name=陈加兵</div><div class="line">person.map.age=22</div><div class="line">person.user.name=Jack</div><div class="line">person.user.age=33</div></pre></td></tr></table></figure>
<p>3、在Person这个实体类中添加如下的注解配置，使用@PropertySource这个注解加载这个配置文件，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ConfigurationProperties ： 这个注解表示这个实体类的值来自于配置文件中，当然包括properties和yaml文件</div><div class="line"> *                          prefix表示这个配置文件中的前缀</div><div class="line"> */</div><div class="line"><span class="meta">@PropertySource</span>(value =&#123;<span class="string">"classpath:person.properties"</span>&#125;)   <span class="comment">//从自定义的配置文件中获取信息</span></div><div class="line"><span class="meta">@Component</span>  <span class="comment">//注入到容器中</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)   <span class="comment">//获取前缀为person的信息</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</div><div class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line">    <span class="keyword">private</span> Date birthday;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、使用@PropertySource这个注解能够导入自定义的配置文件并且获取其中的值</p>
<p><strong>5、 使用这个注解只能加载properties文件，无法加载YAML文件</strong></p>
<h2 id="ImportSource"><a href="#ImportSource" class="headerlink" title="@ImportSource"></a>@ImportSource</h2><p>1、在springBoot中几乎没有配置文件，全部都是使用注解，那么我们如果需要使用配置文件，我们该如何让这个配置文件生效呢？</p>
<p>2、我们可以使用这个注解加载自己的配置文件xml，不过在springBoot中不赞成这样做，因为可以使用配置类来代替配置文件xml</p>
<p>3、我们在项目的resource文件下新建一个beans.xml，其中配置了如下的信息：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.telles.teammissionserver.bean.Person"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"陈加兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4、我们现在需要将其加入到IOC容器中，必须使用@ImportSource这个注解，我们需要在项目的主配置类上添加这个注解导入配置文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用这个注解可以导入自定义的配置文件xml,其中的value值是一个数组，可以填写多个值</span></div><div class="line"><span class="meta">@ImportResource</span>(value = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeammissionServerApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(TeammissionServerApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>1、我们在springBoot中已经完全舍弃了配置文件的形式来为容器注入组件，我们都是使用配置类的形式，每个项目在建立的时候都有一个主配置类，使用<code>SpringBootApplication</code>这个注解来标注的，我们也可以定义自己的配置类，只要使用<strong>@Configuration</strong>这个注解标注即表示当前类是一个配置类。</p>
<p>2、我们在新建一个包config专门存放配置类，在其中可以建立多个配置类，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这是一个配置类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Bean</span>: 这个注解将其注入到IOC容器中</div><div class="line">     * 其中的返回类型Person就相当于class，方法名就是返回的id，在IOC容器中我们可以使用这个id获取自动</div><div class="line">     * 配置的实例</div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">Person <span class="title">person</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person=<span class="keyword">new</span> Person();</div><div class="line">        person.setAge(<span class="number">22</span>);</div><div class="line">        person.setName(<span class="string">"chen"</span>);</div><div class="line">        <span class="keyword">return</span> person;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><p>1、可以使用随机数，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 使用随机的uuid为其复制</div><div class="line">person.name=$&#123;random.uuid&#125;</div><div class="line">## 配置一个随机的int</div><div class="line">person.age=$&#123;random.int&#125;</div></pre></td></tr></table></figure>
<p>2、<strong>可以使用占位符获取之前配置的值，如果没有可以使用<code>:</code>指定默认值</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## 配置一个随机的int</div><div class="line">person.age=$&#123;random.int&#125;</div><div class="line"># 使用占位符获取之前配置的值，如果这个值不存在，那么使用指定的默认值</div><div class="line">person.user.age=$&#123;person.age:33&#125;</div></pre></td></tr></table></figure>
<h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><p>1、我们在开发的时候可能会面对多环境，比如生产环境，测试环境，上线运行环境，针对这几种不同的环境，我们可能需要的配置也是不相同的，此时我们就需要在不同的环境之间切换不同的配置文件。</p>
<h3 id="properties-1"><a href="#properties-1" class="headerlink" title="properties"></a>properties</h3><p>1、我们可以在创建不同的properties文件，文件名如：<code>application-{profile}.properties</code>，比如，<code>application-dev.properties</code>和<code>application-prod.properties</code>这两个文件，此时我们可以springBoot的朱主配置文件中application.properties文件中添加如下的语句，用来激活某一种的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 激活dev配置文件，那么此时springBoot就会以application-dev.properties文件为配置文件</div><div class="line">spring.profiles.active=dev</div></pre></td></tr></table></figure>
<h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>1、在yaml中不需要建立多个文件，因为yaml可以使用<code>---</code>区分不同的文档，只要在一个主配置文件application.yml中添加不同区域的文档，即使表示不同的文件，如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 文档块1，此时激活dev</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8081</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">dev</span></div><div class="line"></div><div class="line"><span class="meta">---</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">## dev环境的配置</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8080</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></div><div class="line"></div><div class="line"><span class="meta">---</span></div><div class="line"></div><div class="line"><span class="comment">## prod环境的配置</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8088</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></div></pre></td></tr></table></figure>
<h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p>1、springBoot项目创建的时候在classpath路径下的有一个<code>application.properties</code>文件，这个就是springBoot默认的文件位置，但是我们还可以在其他的位置指定配置文件，依然会生效。</p>
<p>2、springBoot有以下的位置可以放置配置文件，按照优先级由高到低如下：</p>
<p>​    1、项目路径下的config文件夹中</p>
<p>​    2、直接放在项目路径下</p>
<p>​    3、classpath路径下的config文件夹中</p>
<p>​    4、直接放在classpath路径下【创建项目的时候默认位置】</p>
<p><strong>3、classpth即是resource文件夹下</strong></p>
<p><strong>4、注意：无论放在哪个位置，默认加载的文件名称必须是application.properties</strong></p>
<p><strong>5、如果高优先级和低优先级共有的配置，那么高优先级会覆盖低优先级的配置，但是高优先级配置文件中的没有的配置，如果在低优先级的配置文件中存在，那么依然会生效，这样就可以形成互补的形式</strong></p>
<p>6、可以在默认的配置文件application.properties文件中使用<code>spring.config.location</code>来指定外部的配置文件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.config.location=/usr/local/application.properties</div></pre></td></tr></table></figure>
<p><strong>7、在项目已经发布出去之后，我们也可以使用命令行的方式指定配置文件的位置，如：<code>java -jar springboot.jar --spring.config.location=/usr/local/application.properties</code></strong></p>
<h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p>1、spring默认的规定的日志框架是self4j和logback，这是目前的主流的日志框架，如果想要使用self4j和log4j，那么需要使用指定的适配类进行接口的转换。转换关系如下图：</p>
<p><img src="https://www.slf4j.org/images/concrete-bindings.png" alt=""></p>
<p>2、默认什么都不配置的情况下，日志是开启的，使用的是self4j+logback，日志的级别是info</p>
<p>3、我们可以在全局配置文件appliction.properties或者application.yml中修改默认的配置，比如修改默认的日志级别，控制台输出格式，输出的日志文件的位置</p>
<p>4、日志的输出级别由高到低的级别如下：<code>ERROR</code>, <code>WARN</code>, <code>INFO</code>, <code>DEBUG</code>, or <code>TRACE</code>.</p>
<p>5、在springBoot中支持自定义的日志配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># 指定com.telles包下的所有类下的日志输出级别为debug,可以指定某个类或者某个包下的类所使用的日志级别</div><div class="line">logging.level.com.telles=error</div><div class="line"></div><div class="line"></div><div class="line"># 如果指定的相对路径，那么就是在当前项目下，如果指定的了绝对路径，比如c:\\log\\spring.log，那么就是在指定的位置上生成log输出的文件</div><div class="line">logging.file=log/spring.log</div><div class="line"></div><div class="line"># 也是指定的日志的文件的位置，不过是在当前项目的所在根目录下指定的文件的位置，比如/log/spring.log，这个就是在该项目的根目录中的log文件夹下指定的日志文件是spring.log</div><div class="line">logging.path=/log/spring.log</div><div class="line"></div><div class="line"># 指定控制台输出的格式，但是也是有默认的格式，这个和log4j的配置是一样的</div><div class="line">logging.pattern.console=</div><div class="line"></div><div class="line"># 指定日志文件的输出格式</div><div class="line">logging.pattern.file=</div><div class="line"></div><div class="line"># 指定文件最大大小</div><div class="line">logging.file.max-size=</div><div class="line"></div><div class="line"># 指定日期的格式</div><div class="line">logging.pattern.dateformat=</div><div class="line"></div><div class="line">## 文件最大保存历史量</div><div class="line">logging.file.max-history=</div></pre></td></tr></table></figure>
<p><strong>6、当然也可以使用自定义的配置文件，但是命名有一定的规范，否则springBoot并不能自动识别，比如如果使用logback日志框架的话，那么自定义的配置文件的名称必须是<code>logback-xxx.xml</code>,放在resource文件夹下,否则将不能识别，基本的配置如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 一般存储在服务器的文件夹中--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/tmp/logs"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--格式化输出--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%p]-[%c] - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--日志文件输出的文件名,使用日期进行拼接--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/web.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制</span></div><div class="line">    &lt;logger name="org.hibernate.type.descriptor.sql.BasicBinder"  level="TRACE" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.type.descriptor.sql.BasicExtractor"  level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.SQL" level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.engine.QueryParameters" level="DEBUG" /&gt;</div><div class="line">    &lt;logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" /&gt;--&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--myibatis log configure--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--日志异步到数据库 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;appender name="DB" class="ch.qos.logback.classic.db.DBAppender"&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&amp;lt;!&amp;ndash;日志异步到数据库 &amp;ndash;&amp;gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource"&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&amp;lt;!&amp;ndash;连接池 &amp;ndash;&amp;gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;driverClass&gt;com.mysql.jdbc.Driver&lt;/driverClass&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;url&gt;jdbc:mysql://127.0.0.1:3306/databaseName&lt;/url&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;user&gt;root&lt;/user&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;password&gt;root&lt;/password&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;/dataSource&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;/connectionSource&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;/appender&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="自定义日志文件"><a href="#自定义日志文件" class="headerlink" title="自定义日志文件"></a>自定义日志文件</h3><p>1、springboot启动的时候会自动加载日志的配置文件，默认使用的是self4j+logback，虽然springBoot为我们自动配置了默认的配置，但是我们还是需要自己定义配置文件，我们可以创建一个配置文件放置在resuorce文件夹下面，但是命名规则确实有一些区别，如下：</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody>
<tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody>
</table>
<p>2、总结的说就是，如果使用logback的日志，那么可以指定一个<strong>logback.xml</strong>放置在resource文件夹下，那么springBoot将会默认加载这个配置，直接覆盖默认的配置。如果使用log4j这个日志框架，那么可以直接创建一个<strong>log4j.properties</strong>放置在resrouce文件夹下。如果使用log4j2这个日志，我们可以使用<strong>log4j2.xml</strong>这个日志文件放置在resoruce文件夹下。</p>
<h3 id="日志框架的切换"><a href="#日志框架的切换" class="headerlink" title="日志框架的切换"></a>日志框架的切换</h3><p>1、上面的日志文件都是一个配置文件针对多个环境，但是如果我们想要使用profile的功能，比如开发环境使用一个日志配置文件，运行环境使用另外一个配置文件，那么此时就需要使用日志框架的profile功能，此时的命名规则就必须是<code>logback-{profile}.xml</code>，比如使用logback框架的时候，那么我们可以配置<strong>logback-dev.xml</strong>作用与开发环境，使用<strong>logback-spring.xml</strong>用于运行环境。</p>
<p>2、虽然懂得了命名规则，那么需要在日志的配置文件中指定切换语句，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev | staging"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "dev" or "staging" profiles are active --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- configuration to be enabled when the "production" profile is not active --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="程序中使用日志"><a href="#程序中使用日志" class="headerlink" title="程序中使用日志"></a>程序中使用日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div></pre></td></tr></table></figure>
<h2 id="SpringMVC的开发"><a href="#SpringMVC的开发" class="headerlink" title="SpringMVC的开发"></a>SpringMVC的开发</h2><p>1、如果想要开发springmvc模块，只需要选中web模块即可，默认的springBoot会自动为我们创建一些自动配置，不用自己一步一步的搭建springMVC框架。但是如果我们需要自己全面接管或者在原有的基础上进行一些扩展的话，SpringBoot都提供了一些支持。</p>
<h3 id="创建一个web模块"><a href="#创建一个web模块" class="headerlink" title="创建一个web模块"></a>创建一个web模块</h3><p>1、创建项目，导入启动器，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">		<span class="comment">&lt;!--导入web模块--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--springBoot的测试模块--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--导入这个处理器，在配置文件中将会自动提示--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--热启动，保证每次修改，程序都会自动更新--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h3><p>####webjars的引入</p>
<p>1、springMVC引入自动配置资源都是在<strong>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</strong>这个类中进行配置，因此静态资源位置的映射也是在这个类中完成的，如下，即是配置静态资源映射的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</div><div class="line">			logger.debug(<span class="string">"Default resource handling disabled"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</div><div class="line">		CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache()</div><div class="line">				.getCachecontrol().toHttpCacheControl();</div><div class="line">           <span class="comment">//请求/webjars/**</span></div><div class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</div><div class="line">			customizeResourceHandlerRegistration(registry</div><div class="line">					.addResourceHandler(<span class="string">"/webjars/**"</span>)</div><div class="line">					.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</div><div class="line">					.setCachePeriod(getSeconds(cachePeriod))</div><div class="line">					.setCacheControl(cacheControl));</div><div class="line">		&#125;</div><div class="line">           <span class="comment">//添加 /**资源映射</span></div><div class="line">		String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</div><div class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</div><div class="line">			customizeResourceHandlerRegistration(</div><div class="line">					registry.addResourceHandler(staticPathPattern)</div><div class="line">							.addResourceLocations(getResourceLocations(</div><div class="line">									<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</div><div class="line">							.setCachePeriod(getSeconds(cachePeriod))</div><div class="line">							.setCacheControl(cacheControl));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>2、通过上面的代码可以知道任何<code>/webjars/**</code>这种请求的方式都会在<code>classpath:/META-INF/resources/webjars/</code>这个位置查找相关的静态资源</p>
<p>3、webjars：是一种以jar包的方式引入静态资源，比如引用jQuery、Bootstrap的文件，那么我们只需要引入对应的jar包即可访问这些静态资源，官方网址：<a href="https://www.webjars.org/" target="_blank" rel="external">https://www.webjars.org/</a></p>
<p>4、比如我们现在引入jquery的jar，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--引入jquery的jar--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>5、此时我们看到导入webjas的目录结构，如下，自动配置的资源映射就是对应webjars下的资源位置，</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/jqueryWebjars.png" alt=""></p>
<p>​    1)、此时如果想要获取jquery.js这个文件，那么可以通过<code>http://localhost:8080/webjars/jquery/3.3.1-1/jquery.js</code>这个url查询到指定的文件，这个就是相对于上面springBoot自动配置的webjars的映射位置</p>
<h4 id="其他静态资源的引入"><a href="#其他静态资源的引入" class="headerlink" title="其他静态资源的引入"></a>其他静态资源的引入</h4><p>1、除了映入webjars这个静态资源，我们还有自定义的css和js文件，那么我们也必须有一个位置放置这些资源，让springBoot能够访问到</p>
<p>2、<code>/**</code>是用来访问当前项目的任何资源，主要的就是静态文件夹，默认映射的位置如下：</p>
<p>​    1）、classpath ： 指定的是java和resources文件夹</p>
<p>​    2）、这写文件夹都是存放静态资源的，那么肯定会发生冲突，比如多个文件夹存放的静态资源名称是一样的，那么我们该如何查找呢？</p>
<p>​    3）、这些文件夹是否顺序访问的，即是按照如下的优先级进行访问的，如果上一级找到了，那么将会返回，下面的文件夹将不会查找</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;classpath:/META-INF/resources/&quot;, </div><div class="line">&quot;classpath:/resources/&quot;,</div><div class="line">&quot;classpath:/static/&quot;,</div><div class="line">&quot;classpath:/public/&quot;</div></pre></td></tr></table></figure>
<p>3、我们可以在classpath路径下创建上面的四个文件夹用来存放静态资源文件夹，这样我们就可以访问到这些资源了。如下：</p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/classpath.png" alt=""></p>
<p>4、此时我将<code>slider.css</code>这个静态资源文件放置到static中，那么我们可以通过请求<code>http://localhost:8080/slider.css</code>，将可以访问到这个资源，主要就是去上面的四个文件夹下查找文件，如果有这个文件，那么就返回即可。</p>
<h4 id="配置首页"><a href="#配置首页" class="headerlink" title="配置首页"></a>配置首页</h4><p>1、在springBoot中，首页也为我们自动配置了存放的位置</p>
<p>2、我们只需把首页<code>index.html</code>放置在静态资源文件夹下即可访问，比如我们放一个index.html在static文件夹下，直接访问<code>http://localhost:8080/</code>这个即可自动跳转首页</p>
<h4 id="配置小图标"><a href="#配置小图标" class="headerlink" title="配置小图标"></a>配置小图标</h4><p>１、我们可以放置一个<code>favicon.ico</code>图片在静态资源文件夹下，那么即可自动为我们的页面配置上小图标</p>
<h4 id="自定义静态资源存放位置"><a href="#自定义静态资源存放位置" class="headerlink" title="自定义静态资源存放位置"></a>自定义静态资源存放位置</h4><p>1、我们在全局配置文件中指定自己配置的资源存放位置，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.resources.static-locations=classpath:/myStatic</div></pre></td></tr></table></figure>
<p>2、一旦配置这个路径，那么上面springBoot自动配置的路径将会失效</p>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>1、sprintBoot不支持jsp，但是支持thymeleaf模板引擎，我们可以导入这个模板引擎</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--引入themleaf模板引擎--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、我们不需要指定版本号，在springBoot中已经为我们指定了默认的版本号，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">thymeleaf-extras-data-attribute.version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">thymeleaf-extras-data-attribute.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">thymeleaf-extras-java8time.version</span>&gt;</span>3.0.1.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf-extras-java8time.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">thymeleaf-extras-springsecurity4.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf-extras-springsecurity4.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="使用thymelefa"><a href="#使用thymelefa" class="headerlink" title="使用thymelefa"></a>使用thymelefa</h4><p>1、我们只需要将所有的html文件放在teamplate下，那么thymeleaf将会自动解析其中的文件</p>
<p>2、引入下面的约束将会自动提示语法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>1、<code>th</code>： 这个是使用th任意属性来替换原生属性，比如替换id使用<code>th:id</code>,class使用<code>th:class</code></p>
<p>2、<code>&lt;h1 th:text=&quot;${hello}&quot;&gt;成功访问&lt;/h1&gt;</code> ：替换标签体内的文本</p>
<p>3、表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Simple expressions:</div><div class="line">    Variable Expressions: $&#123;...&#125;</div><div class="line">    Selection Variable Expressions: *&#123;...&#125;</div><div class="line">    Message Expressions: #&#123;...&#125;</div><div class="line">    Link URL Expressions: @&#123;...&#125;</div><div class="line">    Fragment Expressions: ~&#123;...&#125;</div><div class="line">    Literals</div><div class="line">Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,...</div><div class="line">Number literals: 0 , 34 , 3.0 , 12.3 ,...</div><div class="line">Boolean literals: true , false</div><div class="line">Null literal: null</div><div class="line">Literal tokens: one , sometext , main ,...</div><div class="line">Text operations:</div><div class="line">String concatenation: +</div><div class="line">Literal substitutions: |The name is $&#123;name&#125;|</div><div class="line">Arithmetic operations:</div><div class="line">Binary operators: + , - , * , / , %</div><div class="line">Minus sign (unary operator): -</div><div class="line">Boolean operations:</div><div class="line">Binary operators: and , or</div><div class="line">Boolean negation (unary operator): ! , not</div><div class="line">Comparisons and equality:</div><div class="line">Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</div><div class="line">Equality operators: == , != ( eq , ne )</div><div class="line">Conditional operators:</div><div class="line">If-then: (if) ? (then)</div><div class="line">If-then-else: (if) ? (then) : (else)</div><div class="line">Default: (value) ?: (defaultvalue)</div><div class="line">Special tokens:</div><div class="line">Page 17 of 106No-Operation: _</div></pre></td></tr></table></figure>
<h3 id="springMVC的扩展"><a href="#springMVC的扩展" class="headerlink" title="springMVC的扩展"></a>springMVC的扩展</h3><p>1、在springBoot中依赖mvc的自动配置肯定是不够的，比如我们需要添加一个拦截器，那么肯定是需要自己配置的，此时我们就需要定义自己的配置类进行扩展功能。</p>
<p>2、扩展的意思是几保留了mvc的自动配置，也使用了一些自定义的功能。</p>
<p>3、自动扩展的实现：</p>
<p>​    1）、定义一个配置类，使用<code>@Configuration</code></p>
<p>​    2）、继承<code>WebMvcConfigurationSupport</code>，这个类是一个抽象类，其中有实现springmvc的不同组件，如果需要那个组件，只需要实现其中的方法即可</p>
<p>​    3）、在这个类中实现其中的方法即可。</p>
<p>4、比如我们需要实现一个拦截器，那么我们需要创建一个拦截器类，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"使用拦截器"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、我们需要在配置类中配置这个拦截器，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span>  <span class="comment">//springBoot的自动配置类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//添加一个映射视图的组件，每次请求helloWorld都会映射到index.html</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</div><div class="line">            registry.addViewController(<span class="string">"/helloWorld"</span>).setViewName(<span class="string">"index"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//添加一个拦截器</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">         registry.addInterceptor(<span class="keyword">new</span> 				MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/helloWorld"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h3><p>1、全面接管的意思就是不需要springBoot的自动配置，而是全部使用自定义的配置</p>
<p>2、要实现全面接管springMVC，那么只需要在上面的配置上添加一个<code>@EnableWebMvc</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span>  <span class="comment">//springBoot的自动配置类</span></div><div class="line"><span class="meta">@EnableWebMvc</span>   <span class="comment">//全面接管springMVC</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###指定日期格式</p>
<p>1、springBoot默认的可以转换的日期格式：<code>yyyy/MM/dd</code>，那么我们可以在配置文件中改变这种配置格式，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">## 指定日期格式</div><div class="line">spring.mvc.date-format=yyyy-MM-dd</div></pre></td></tr></table></figure>
<p>2、一旦转换了这种日期的格式，那么当用户输入的日期格式为上面的那种才会自动转换成Date类型的数据，否则将会转换失败，出现异常</p>
<h3 id="定制错误页面"><a href="#定制错误页面" class="headerlink" title="定制错误页面"></a>定制错误页面</h3><h3 id="修改Tomcat的默认配置"><a href="#修改Tomcat的默认配置" class="headerlink" title="修改Tomcat的默认配置"></a>修改Tomcat的默认配置</h3><p>1、在springBoot默认使用的是嵌入式的tomcat容器，我们可以在全局配置文件中修改默认的tomcat的配置。</p>
<p>2、如何修改tomcat 的默认配置？</p>
<p>​    1）、在全局的配置文件application.properties中修改配置即可，如下：</p>
<p>​        1）、这些配置全部都是对应着<code>org.springframework.boot.autoconfigure.web.ServerProperties</code>这个类，Tomcat的配置对应着<code>org.springframework.boot.autoconfigure.web.ServerProperties.Tomcat</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">## 指定编码格式</div><div class="line">## 如果需要修改tomcat的默认配置，我们需要修改server.tomcat.xxx</div><div class="line">server.tomcat.uri-encoding=utf-8</div><div class="line"></div><div class="line">## 指定端口号</div><div class="line">## 如果需要修改server的默配置，我们需要修改server.xxxx</div><div class="line">server.port=8080</div></pre></td></tr></table></figure>
<h3 id="注册Servlet、Filter、Listener"><a href="#注册Servlet、Filter、Listener" class="headerlink" title="注册Servlet、Filter、Listener"></a>注册Servlet、Filter、Listener</h3><p>1、在springBoot中如果需要用到Servlet、过滤器和监听器，那么就需要自己配置</p>
<p>2、配置三大组件对应的类为：<code>ServletRegistrationBean</code>、<code>FilterRegistrationBean</code>、<code>ServletListenerRegistrationBean</code>。我们只需要在自定义的配置类中将三个组件注册到容器中即可</p>
<p>3、完成注册三大组件</p>
<p>​    1）、创建自己的三大组件</p>
<p>​    2）、创建一个配置类，在其中创建注入三大组件即可，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span>   <span class="comment">//指定这是一个配置类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//注册自己的Servlet,在其中可以设置在配置文件中能够设置的值</span></div><div class="line">    <span class="meta">@Bean</span>   <span class="comment">//将这个组件添加到容器中</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">registrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//构造方法，第一个参数指定的是自己的Servlet，第二个参数指定的是映射的路径，是一个可变参数，可以指定多个参数</span></div><div class="line">        ServletRegistrationBean bean=<span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/hello"</span>,<span class="string">"/myFine"</span>);</div><div class="line">        bean.setLoadOnStartup(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//注册过滤器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        FilterRegistrationBean bean=<span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">        bean.setFilter(<span class="keyword">new</span> MyFilter());  <span class="comment">//设置自己的Filter</span></div><div class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/**"</span>));  <span class="comment">//设置拦截的路径</span></div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//注册监听器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        ServletListenerRegistrationBean servletListenerRegistrationBean=<span class="keyword">new</span> ServletListenerRegistrationBean&lt;MyListener&gt;(<span class="keyword">new</span> MyListener());</div><div class="line">        <span class="keyword">return</span> servletListenerRegistrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="整合数据源"><a href="#整合数据源" class="headerlink" title="整合数据源"></a>整合数据源</h3><p>1、需要导入mysql的驱动程序</p>
<p>2、导入的依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入原生的jdbc启动器--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--导入mysql的驱动--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、我们可以在springBoot的配置文件中设置默认的mysql参数，如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 配置Jdbc</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/jdbc</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line">    <span class="comment">## type用来指定使用什么数据连接池</span></div><div class="line">    <span class="comment">#type:</span></div></pre></td></tr></table></figure>
<p>4、springBoot中默认支持的连接池都在<code>org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration</code>中展示出来，如下：</p>
<p>​    1）、<code>org.apache.tomcat.jdbc.pool.DataSource</code></p>
<p>​    2）、<code>com.zaxxer.hikari.HikariDataSource</code></p>
<p>​    3）、<code>org.apache.commons.dbcp2.BasicDataSource</code></p>
<p><strong>5、当然我们也是可以自定义自己的数据源，我们只需要在配置文件中使用<code>spring-datasource.type</code>这个配置即可</strong></p>
<h4 id="整合Druid数据源"><a href="#整合Druid数据源" class="headerlink" title="整合Druid数据源"></a>整合Druid数据源</h4><p>0、<a href="https://www.cnblogs.com/niejunlei/p/5977895.html" target="_blank" rel="external">https://www.cnblogs.com/niejunlei/p/5977895.html</a></p>
<p>1、导入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加数据库连接池 druid --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、在全局配置文件中设置使用指定的数据源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 数据库访问配置</div><div class="line"># 主数据源，默认的</div><div class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/jdbc</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div></pre></td></tr></table></figure>
<p>3、配置数据源参数，下面只是设置了部分的参数，在全局配置文件中设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 下面为连接池的补充设置，应用到上面所有数据源中</div><div class="line"># 初始化大小，最小，最大</div><div class="line">spring.datasource.initialSize=5</div><div class="line">spring.datasource.minIdle=5</div><div class="line">spring.datasource.maxActive=20</div><div class="line"># 配置获取连接等待超时的时间</div><div class="line">spring.datasource.maxWait=60000</div><div class="line"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</div><div class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</div><div class="line"># 配置一个连接在池中最小生存的时间，单位是毫秒</div><div class="line">spring.datasource.minEvictableIdleTimeMillis=300000</div><div class="line">spring.datasource.validationQuery=SELECT 1 FROM DUAL</div><div class="line">spring.datasource.testWhileIdle=true</div><div class="line">spring.datasource.testOnBorrow=false</div><div class="line">spring.datasource.testOnReturn=false</div><div class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</div><div class="line">spring.datasource.poolPreparedStatements=true</div><div class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</div><div class="line"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</div><div class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</div></pre></td></tr></table></figure>
<p>4、自定义一个DruidConfig，主要用来配置Druid，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span>   <span class="comment">//指定Druid的数据源的配置类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//配置druid的参数，并且将其注入到容器中</span></div><div class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置监控</div><div class="line">     *  1、配置一个管理后台的Servlet</div><div class="line">     *  2、配置一个监控的filter</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</div><div class="line">        ServletRegistrationBean bean=<span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(),<span class="string">"/druid/*"</span>);</div><div class="line">        <span class="comment">//设置初始化参数</span></div><div class="line">        Map&lt;String,Object&gt; initParams=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);  <span class="comment">//设置登录的用户名</span></div><div class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"admin"</span>);  <span class="comment">//设置登录的密码</span></div><div class="line">        initParams.put(<span class="string">"resetEnable"</span>,<span class="string">"false"</span>);</div><div class="line"><span class="comment">//        initParams.put("allow","localhost");  //允许localhost访问，默认是所有都能访问</span></div><div class="line"><span class="comment">//        initParams.put("deny","IP地址");  //设置拒绝访问的ip</span></div><div class="line">        bean.setInitParameters(initParams);</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置监控的Filter</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        FilterRegistrationBean bean=<span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</div><div class="line">        Map&lt;String,Object&gt; initParams=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.css,*.js,/druid/*"</span>);   <span class="comment">//设置不拦截器的路径</span></div><div class="line">        bean.setInitParameters(initParams);</div><div class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/**"</span>));</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h3><p>1、添加mybatis的启动器，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入mybatis的依赖--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、只需要引入这个启动器，那么springBoot就会自动导入如下的mybatis</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h4><p>1、我们可以使用注解版本的mybatis，只需要创建一个Mapper即可。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span>   <span class="comment">//表明这个是mapper接口，会自动扫描</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from t_user where user_id=#&#123;userId&#125;"</span>)</div><div class="line">    <span class="function">User <span class="title">selectUser</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//插入，自增主键返回</span></div><div class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"userId"</span>)</div><div class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into t_user(name) values(#&#123;name&#125;)"</span>)</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、使用注解版，如果需要配置mybaits的一些参数，比如驼峰命名法等配置，那么我们可以自定义一个配置类，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.mybatis.spring.boot.autoconfigure.ConfigurationCustomizer;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Mybatis的配置类</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//自定义一个定制器，在其中可以针对mybatis配置不同的参数，就相当于一个mybatis的主配置文件</span></div><div class="line">    <span class="meta">@Bean</span>  <span class="comment">//注入到容器中</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</div><div class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);  <span class="comment">//开启驼峰命名法</span></div><div class="line">                <span class="comment">//在其中还可以配置myabtis的其他配置</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3、除了自己配置自定义的配置类来指定mybatis的参数配置，我们还可以在全局配置文件中使用<code>mybatis</code>.来进行相关的配置，比如开启驼峰命名，如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mybatis.configuration.map-underscore-to-camel-case=true</div></pre></td></tr></table></figure>
<p>4、我们可以使用注解批量扫描mapper，这样我们就不需要在每一个Mapper接口都添加<code>@Mapper</code>这个注解，我们只需要在主配置类中添加<code>@MapperScan</code>这个注解即可，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//批量扫描com.tellwess.springbootserver.mappers这个包下面的所有mapper</span></div><div class="line"><span class="meta">@MapperScan</span>(value =<span class="string">"com.tellwess.springbootserver.mappers"</span>)</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootServerApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>1、我们将所有的mapper对应的配置文件放在<code>classpath:mapper/*.xml</code>下面的，其中的UserMapper.xml配置文件如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.tellwess.springbootserver.mappers.UserMapper"</span> &gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"com.tellwess.springbootserver.entities.User"</span>&gt;</span></div><div class="line">      select * from t_user where user_id=#&#123;userId&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span>&gt;</span></div><div class="line">        insert  into t_user(name) values(#&#123;name&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、创建一个UserMapper.java，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">User <span class="title">selectUser</span><span class="params">(Integer userId)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、在主配置类下创建添加批量扫描注解，将接口注入到容器中，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//批量扫描com.tellwess.springbootserver.mappers这个包下面的所有mapper</span></div><div class="line"><span class="meta">@MapperScan</span>(value =<span class="string">"com.tellwess.springbootserver.mappers"</span>)</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootServerApplication</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>4、在全局配置文件中设置<code>*.xml</code>配置文件的位置，让springBoot能够扫描到，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">## 配置mybatis的全局配置文件</div><div class="line">mybatis.mapper-locations=classpath:mapper/*.xml</div><div class="line"># 开启驼峰命名</div><div class="line">mybatis.configuration.map-underscore-to-camel-case=true</div><div class="line"># 在其中还可以配置mybatis其他的配置</div></pre></td></tr></table></figure>
<h3 id="springBoot对事务的支持"><a href="#springBoot对事务的支持" class="headerlink" title="springBoot对事务的支持"></a>springBoot对事务的支持</h3><p>1、在spring中我们如果需要添加事务，可能需要配置切面或者声明式注解，但是在springBoot中我们只需要直接使用即可，一切都为我们自动配置了。</p>
<p>2、要想使用声明式事务注解，那么需要导入<code>spring.tx</code>这个jar，其实这个jar在我们导入<code>spring-boot-starter-jdbc</code>的时候就已经为我们导入了，但是如果我们要是使用mybatis的话，那么只需要导入mybatis的场景启动器即可，因为其中就已经包含了jdbc的场景启动器，因此我们只需要导入mybatis的场景启动器即可，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入mybatis的依赖--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、在需要添加事务的类上添加一个注解即可<code>@Transactional</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="自动热部署"><a href="#自动热部署" class="headerlink" title="自动热部署"></a>自动热部署</h2><ul>
<li>每次修改代码后都需要重新启动程序，但是我们可以使用热部署功能，只需要导入依赖即可。修改代码完成后按住<code>Ctrl+F9</code>即可自动热部署</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--热部署--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="SpringBoot对跨域的支持"><a href="#SpringBoot对跨域的支持" class="headerlink" title="SpringBoot对跨域的支持"></a>SpringBoot对跨域的支持</h2><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-cors" target="_blank" rel="external">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-cors</a></li>
<li>只需要在容器中注入<code>org.springframework.web.servlet.config.annotation.WebMvcConfigurer</code>这个实例即可，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加跨域的功能</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">                registry.addMapping(<span class="string">"/**"</span>)</div><div class="line"><span class="comment">//                        .allowedOrigins("http://192.168.1.97")</span></div><div class="line"><span class="comment">//                        .allowedMethods("GET", "POST")</span></div><div class="line"><span class="comment">//                        .allowCredentials(false).maxAge(3600);</span></div><div class="line">                ;   <span class="comment">//对所有的路径都支持跨域的访问</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>以上是针对全局配置的跨域，如果需要对某一个controller中的请求使用跨域，可以使用<code>@CrossOrigin(origins = &quot;http://192.168.1.97:8080&quot;, maxAge = 3600)</code>这个注解标注在controller的类上，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://192.168.1.97:8080"</span>, maxAge = <span class="number">3600</span>)</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="上传文件大小的配置"><a href="#上传文件大小的配置" class="headerlink" title="上传文件大小的配置"></a>上传文件大小的配置</h2><ul>
<li>配置文件的方式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#multipart upload 文件上传</div><div class="line">#限制一次上传的单个文件的大小</div><div class="line">spring.http.multipart.maxFileSize=10Mb</div><div class="line">#限制一次上传的所有文件的总大小</div><div class="line">spring.http.multipart.maxRequestSize=10Mb</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、整合mybaits和数据源配置的所有依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入mysql的驱动--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 添加数据库连接池 druid --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--导入mybatis的依赖--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="springBoot配置文件能够配置的全部配置"><a href="#springBoot配置文件能够配置的全部配置" class="headerlink" title="springBoot配置文件能够配置的全部配置"></a>springBoot配置文件能够配置的全部配置</h2><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#appendix" target="_blank" rel="external">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#appendix</a></li>
</ul>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>1、<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/" target="_blank" rel="external">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取配置文件中的值-ConfigurationProperties&quot;&gt;&lt;a href=&quot;#获取配置文件中的值-ConfigurationProperties&quot; class=&quot;headerlink&quot; title=&quot;获取配置文件中的值@ConfigurationPro
    
    </summary>
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://chenjiabing666.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>StringUtils的源码解析</title>
    <link href="http://chenjiabing666.github.io/2018/08/04/StringUtils%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://chenjiabing666.github.io/2018/08/04/StringUtils的源码解析/</id>
    <published>2018-08-04T15:47:46.000Z</published>
    <updated>2018-08-04T15:48:19.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h1><ul>
<li>spring封装的字符串工具类</li>
</ul>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><ol>
<li><code>isEmpty(Object str)</code>  ：判断当前字符串为空，如果为空返回true<ol>
<li>如果字符串为空或者是个空字符串，那么返回true</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Object str)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (str == <span class="keyword">null</span> || <span class="string">""</span>.equals(str));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>hasLength(CharSequence str)</code> ： 如果字符串的长度大于0，返回true</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasLength</span><span class="params">(CharSequence str)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>hasText(String str)</code> ： 判断字符串str是否存在文本内容(不包含空字符)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * StringUtils.hasText(null) = false</div><div class="line">	 * StringUtils.hasText("") = false</div><div class="line">	 * StringUtils.hasText(" ") = false</div><div class="line">	 * StringUtils.hasText("12345") = true</div><div class="line">	 * StringUtils.hasText(" 12345 ") = true</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasText</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    	<span class="comment">//不为空并且包含指定的str返回true</span></div><div class="line">		<span class="keyword">return</span> (hasLength(str) &amp;&amp; containsText(str));</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">//判断当前字符串str是否存在文本内容</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsText</span><span class="params">(CharSequence str)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> strLen = str.length();   <span class="comment">//长度</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strLen; i++) &#123;</div><div class="line">            <span class="comment">//如果不是空白字符，说明其中有文本内容，返回true即可</span></div><div class="line">			<span class="keyword">if</span> (!Character.isWhitespace(str.charAt(i))) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static boolean containsWhitespace(String str)</code> ： 判断当前字符串str是否包含空白字符</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsWhitespace</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    	<span class="comment">//如果长度为0直接返回false</span></div><div class="line">		<span class="keyword">if</span> (!hasLength(str)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> strLen = str.length();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strLen; i++) &#123;</div><div class="line">            <span class="comment">//遍历字符串，查看是否存在空白字符，存在即返回true</span></div><div class="line">			<span class="keyword">if</span> (Character.isWhitespace(str.charAt(i))) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String trimWhitespace(String str)</code> ： 去除字符串str中的空白字符</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimWhitespace</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(str)) &#123;</div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(str);</div><div class="line">    	<span class="comment">//去除字符串前面的空白字符</span></div><div class="line">		<span class="keyword">while</span> (sb.length() &gt; <span class="number">0</span> &amp;&amp; Character.isWhitespace(sb.charAt(<span class="number">0</span>))) &#123;</div><div class="line">			sb.deleteCharAt(<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//去除字符串末尾的空白字符</span></div><div class="line">		<span class="keyword">while</span> (sb.length() &gt; <span class="number">0</span> &amp;&amp; Character.isWhitespace(sb.charAt(sb.length() - <span class="number">1</span>))) &#123;</div><div class="line">			sb.deleteCharAt(sb.length() - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String trimAllWhitespace(String str)</code> ：去除字符串中所有的空白字符</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimAllWhitespace</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(str)) &#123;</div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> len = str.length();</div><div class="line">    	<span class="comment">//使用stringBuilder存储非空白字符</span></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(str.length());</div><div class="line">    	<span class="comment">//遍历字符串，如果不是空白字符，那么直接添加到sb中</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = str.charAt(i);</div><div class="line">			<span class="keyword">if</span> (!Character.isWhitespace(c)) &#123;</div><div class="line">				sb.append(c);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String trimLeadingWhitespace(String str)</code> ：去除字符串前面的空白字符</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimLeadingWhitespace</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(str)) &#123;</div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(str);</div><div class="line">    	<span class="comment">//只是去除前面的空白字符</span></div><div class="line">		<span class="keyword">while</span> (sb.length() &gt; <span class="number">0</span> &amp;&amp; Character.isWhitespace(sb.charAt(<span class="number">0</span>))) &#123;</div><div class="line">			sb.deleteCharAt(<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String trimTrailingWhitespace(String str)</code> ：去除末尾的空白字符</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimTrailingWhitespace</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(str)) &#123;</div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(str);</div><div class="line">    	<span class="comment">//去除末尾的</span></div><div class="line">		<span class="keyword">while</span> (sb.length() &gt; <span class="number">0</span> &amp;&amp; Character.isWhitespace(sb.charAt(sb.length() - <span class="number">1</span>))) &#123;</div><div class="line">			sb.deleteCharAt(sb.length() - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String trimLeadingCharacter(String str, char leadingCharacter)</code> ：去除字符串str前面的指定字符leadingCharacter</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimLeadingCharacter</span><span class="params">(String str, <span class="keyword">char</span> leadingCharacter)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(str)) &#123;</div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(str);</div><div class="line">		<span class="keyword">while</span> (sb.length() &gt; <span class="number">0</span> &amp;&amp; sb.charAt(<span class="number">0</span>) == leadingCharacter) &#123;</div><div class="line">			sb.deleteCharAt(<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String trimTrailingCharacter(String str, char trailingCharacter)</code> ：去除字符串尾部的指定字符 trailingCharacter</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimTrailingCharacter</span><span class="params">(String str, <span class="keyword">char</span> trailingCharacter)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(str)) &#123;</div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(str);</div><div class="line">		<span class="keyword">while</span> (sb.length() &gt; <span class="number">0</span> &amp;&amp; sb.charAt(sb.length() - <span class="number">1</span>) == trailingCharacter) &#123;</div><div class="line">			sb.deleteCharAt(sb.length() - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static boolean startsWithIgnoreCase(String str, String prefix)</code> ： 测试字符串str是否是以prefix开头的，忽略大小写</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startsWithIgnoreCase</span><span class="params">(String str, String prefix)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (str != <span class="keyword">null</span> &amp;&amp; prefix != <span class="keyword">null</span> &amp;&amp; str.length() &gt;= prefix.length() &amp;&amp;</div><div class="line">				str.regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, prefix, <span class="number">0</span>, prefix.length()));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static boolean endsWithIgnoreCase(String str, String suffix)</code>：测试字符串str是否是以suffix结尾的，忽略大小写</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">endsWithIgnoreCase</span><span class="params">(String str, String suffix)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (str != <span class="keyword">null</span> &amp;&amp; suffix != <span class="keyword">null</span> &amp;&amp; str.length() &gt;= suffix.length() &amp;&amp;</div><div class="line">			str.regionMatches(<span class="keyword">true</span>, str.length() - suffix.length(), suffix, <span class="number">0</span>, suffix.length()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static boolean substringMatch(CharSequence str, int index, CharSequence substring)</code> ： 判断字符串str从index开始到结尾，是否与给定的substring相同</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">substringMatch</span><span class="params">(CharSequence str, <span class="keyword">int</span> index, CharSequence substring)</span> </span>&#123;</div><div class="line">    	<span class="comment">//如果开始的索引加上匹配的子串大小大于原本的字符串的大小，表明不匹配，返回false</span></div><div class="line">		<span class="keyword">if</span> (index + substring.length() &gt; str.length()) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//逐个字符比较，一旦遇到不同的，直接返回false即可</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; substring.length(); i++) &#123;</div><div class="line">			<span class="keyword">if</span> (str.charAt(index + i) != substring.charAt(i)) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static int countOccurrencesOf(String str, String sub)</code> ： 返回子串sub在str中出现的次数</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countOccurrencesOf</span><span class="params">(String str, String sub)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(str) || !hasLength(sub)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">//数量</span></div><div class="line">  		<span class="keyword">int</span> pos = <span class="number">0</span>;   <span class="comment">//索引，从0开始统计</span></div><div class="line">		<span class="keyword">int</span> idx;</div><div class="line">   		<span class="comment">// str.indexOf(sub, pos) : 返回子串sub在str中从pos索引开始的下标</span></div><div class="line">		<span class="keyword">while</span> ((idx = str.indexOf(sub, pos)) != -<span class="number">1</span>) &#123;</div><div class="line">			++count;</div><div class="line">			pos = idx + sub.length();  </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(inString) || !hasLength(oldPattern) || newPattern == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> inString;</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//index</span></div><div class="line">		<span class="keyword">int</span> index = inString.indexOf(oldPattern);</div><div class="line">		<span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">			<span class="comment">// no occurrence -&gt; can return input as-is</span></div><div class="line">			<span class="keyword">return</span> inString;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> capacity = inString.length();</div><div class="line">		<span class="keyword">if</span> (newPattern.length() &gt; oldPattern.length()) &#123;</div><div class="line">			capacity += <span class="number">16</span>;</div><div class="line">		&#125;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(capacity);</div><div class="line"></div><div class="line">		<span class="keyword">int</span> pos = <span class="number">0</span>;  <span class="comment">// our position in the old string</span></div><div class="line">		<span class="keyword">int</span> patLen = oldPattern.length();</div><div class="line">		<span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">			sb.append(inString.substring(pos, index));</div><div class="line">			sb.append(newPattern);</div><div class="line">			pos = index + patLen;</div><div class="line">			index = inString.indexOf(oldPattern, pos);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// append any characters to the right of a match</span></div><div class="line">		sb.append(inString.substring(pos));</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>public static String replace(String inString, String oldPattern, String newPattern)</code> ：将字符串inString中的oldPattern全部替换成newPattern</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(inString) || !hasLength(oldPattern) || newPattern == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> inString;</div><div class="line">		&#125;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">int</span> pos = <span class="number">0</span>; <span class="comment">// our position in the old string</span></div><div class="line">		<span class="keyword">int</span> index = inString.indexOf(oldPattern);   <span class="comment">//获取oldpattern在instring中的开始索引</span></div><div class="line">		<span class="comment">// the index of an occurrence we've found, or -1</span></div><div class="line">		<span class="keyword">int</span> patLen = oldPattern.length(); </div><div class="line">    	<span class="comment">//遍历字符串，替换</span></div><div class="line">		<span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">			sb.append(inString.substring(pos, index));</div><div class="line">			sb.append(newPattern);</div><div class="line">			pos = index + patLen;</div><div class="line">			index = inString.indexOf(oldPattern, pos);</div><div class="line">		&#125;</div><div class="line">		sb.append(inString.substring(pos));</div><div class="line">		<span class="comment">// remember to append any characters to the right of a match</span></div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String delete(String inString, String pattern)</code> ： 删除字符串inString中指定的pattern内容</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">delete</span><span class="params">(String inString, String pattern)</span> </span>&#123;</div><div class="line">    	<span class="comment">//使用空字符替换删除的pattern</span></div><div class="line">		<span class="keyword">return</span> replace(inString, pattern, <span class="string">""</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String deleteAny(String inString, String charsToDelete)</code> ：删除字符串inString中指定的charsToDelete所有字符</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">deleteAny</span><span class="params">(String inString, String charsToDelete)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(inString) || !hasLength(charsToDelete)) &#123;</div><div class="line">			<span class="keyword">return</span> inString;</div><div class="line">		&#125;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    	<span class="comment">//遍历字符串</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inString.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = inString.charAt(i);   <span class="comment">//获取当前的字符</span></div><div class="line">            <span class="comment">//如果当前的字符不在需要删除的charsToDelete中，那么添加到sb中</span></div><div class="line">			<span class="keyword">if</span> (charsToDelete.indexOf(c) == -<span class="number">1</span>) &#123;</div><div class="line">				sb.append(c);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String quote(String str)</code> ：将字符串用单引号括起来</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">quote</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (str != <span class="keyword">null</span> ? <span class="string">"'"</span> + str + <span class="string">"'"</span> : <span class="keyword">null</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String uncapitalize(String str)</code> ：首字母小写</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uncapitalize</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> changeFirstCharacterCase(str, <span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">changeFirstCharacterCase</span><span class="params">(String str, <span class="keyword">boolean</span> capitalize)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> str;</div><div class="line">		&#125;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(str.length());</div><div class="line">		<span class="keyword">if</span> (capitalize) &#123;</div><div class="line">			sb.append(Character.toUpperCase(str.charAt(<span class="number">0</span>)));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			sb.append(Character.toLowerCase(str.charAt(<span class="number">0</span>)));</div><div class="line">		&#125;</div><div class="line">		sb.append(str.substring(<span class="number">1</span>));</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String capitalize(String str)</code> ： 首字母大写</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">capitalize</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> changeFirstCharacterCase(str, <span class="keyword">true</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String getFilename(String path)</code> ： 取出给定的路径path中的文件名，比如<code>/tmp/file.txt</code>，那么取出的文件名为file.txt</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFilename</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);</div><div class="line">		<span class="keyword">return</span> (separatorIndex != -<span class="number">1</span> ? path.substring(separatorIndex + <span class="number">1</span>) : path);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String getFilenameExtension(String path)</code> ：获取给定路径的文件扩展名，比如<code>/tmp/file.txt</code>，那么返回的扩展名为txt</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFilenameExtension</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> extIndex = path.lastIndexOf(EXTENSION_SEPARATOR);   <span class="comment">//获取最后一个.的索引</span></div><div class="line">		<span class="keyword">if</span> (extIndex == -<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);  <span class="comment">//获取最后一个/的索引</span></div><div class="line">		<span class="keyword">if</span> (folderIndex &gt; extIndex) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> path.substring(extIndex + <span class="number">1</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String stripFilenameExtension(String path)</code>：去掉给定路径的文件扩展名，比如：<code>&quot;mypath/myfile.txt&quot; -&gt; &quot;mypath/myfile&quot;.</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Strip the filename extension from the given path,</div><div class="line">	 * e.g. "mypath/myfile.txt" -&gt; "mypath/myfile".</div><div class="line">	 * <span class="doctag">@param</span> path the file path (may be &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@return</span> the path with stripped filename extension,</div><div class="line">	 * or &#123;<span class="doctag">@code</span> null&#125; if none</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stripFilenameExtension</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> extIndex = path.lastIndexOf(EXTENSION_SEPARATOR);</div><div class="line">		<span class="keyword">if</span> (extIndex == -<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> path;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);</div><div class="line">		<span class="keyword">if</span> (folderIndex &gt; extIndex) &#123;</div><div class="line">			<span class="keyword">return</span> path;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> path.substring(<span class="number">0</span>, extIndex);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String[] delimitedListToStringArray(String str, String delimiter)</code> ：已指定的分隔符将字符串str分割成一个字符串数组，比如<code>String[] strs=StringUtils.delimitedListToStringArray(&quot;chenjia,bing&quot;, &quot;,&quot;);</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] delimitedListToStringArray(String str, String delimiter) &#123;</div><div class="line">		<span class="keyword">return</span> delimitedListToStringArray(str, delimiter, <span class="keyword">null</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete)</code> ： 不但使用分割符将字符串分割成数组，并且还去掉了字符串中的指定的字符，比如：<code>String[] strs=StringUtils.delimitedListToStringArray(&quot;chenjia,bing&quot;, &quot;,&quot;,&quot;n&quot;);</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete) &#123;</div><div class="line">		<span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//没有分隔符直接返回原来字符串</span></div><div class="line">		<span class="keyword">if</span> (delimiter == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;str&#125;;</div><div class="line">		&#125;</div><div class="line">		List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    	<span class="comment">//如果分隔符为空，那么每一个字符都要分割</span></div><div class="line">		<span class="keyword">if</span> (<span class="string">""</span>.equals(delimiter)) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</div><div class="line">                <span class="comment">//删除指定的字符，并且添加到restult中</span></div><div class="line">				result.add(deleteAny(str.substring(i, i + <span class="number">1</span>), charsToDelete));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;  <span class="comment">//分割符不为空，并且不是空字符串</span></div><div class="line">			<span class="keyword">int</span> pos = <span class="number">0</span>;  </div><div class="line">			<span class="keyword">int</span> delPos;   <span class="comment">//定义需要进行删除的字符串的最后一个index</span></div><div class="line">            <span class="comment">//str.indexOf(delimiter, pos) : 从pos位置开始，获取分割符的索引，此时的 [pos,delpos]就是一个分割的字符串，那么我们需要对其删除指定的字符</span></div><div class="line">			<span class="keyword">while</span> ((delPos = str.indexOf(delimiter, pos)) != -<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">//删除一个子串中的指定字符，并且添加到result中</span></div><div class="line">				result.add(deleteAny(str.substring(pos, delPos), charsToDelete));</div><div class="line">				pos = delPos + delimiter.length();  <span class="comment">//pos后移，移到下一个需要分割的字符串，也就是剩下的字符串</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (str.length() &gt; <span class="number">0</span> &amp;&amp; pos &lt;= str.length()) &#123;</div><div class="line">				<span class="comment">// Add rest of String, but not in case of empty input.</span></div><div class="line">				result.add(deleteAny(str.substring(pos), charsToDelete));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> toStringArray(result);   <span class="comment">//将List转换成字符串数组</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String[] toStringArray(Collection&lt;String&gt; collection)</code> ： 将指定的String类型的集合转换成String[]</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] toStringArray(Collection&lt;String&gt; collection) &#123;</div><div class="line">		<span class="keyword">if</span> (collection == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//调用Collection中的toArray(T[] a)方法,需要指定数组的容量</span></div><div class="line">		<span class="keyword">return</span> collection.toArray(<span class="keyword">new</span> String[collection.size()]);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String[] sortStringArray(String[] array)</code> ：对String[] 数组进行排序</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] sortStringArray(String[] array) &#123;</div><div class="line">    	<span class="comment">//判断数组是否为空，这里的 org.springframework.util.ObjectUtils，也是一个工具类</span></div><div class="line">		<span class="keyword">if</span> (ObjectUtils.isEmpty(array)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">		Arrays.sort(array);   <span class="comment">//使用Arrays的排序，升序</span></div><div class="line">		<span class="keyword">return</span> array;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String[] trimArrayElements(String[] array)</code> ： 将给定的字符串数组中的每一个字符串都去掉前后空格</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] trimArrayElements(String[] array) &#123;</div><div class="line">		<span class="keyword">if</span> (ObjectUtils.isEmpty(array)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//创建一个新数组保存</span></div><div class="line">		String[] result = <span class="keyword">new</span> String[array.length];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">			String element = array[i];</div><div class="line">			result[i] = (element != <span class="keyword">null</span> ? element.trim() : <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String[] removeDuplicateStrings(String[] array)</code> ： 去掉字符串数组中重复的字符串</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] removeDuplicateStrings(String[] array) &#123;</div><div class="line">		<span class="keyword">if</span> (ObjectUtils.isEmpty(array)) &#123;</div><div class="line">			<span class="keyword">return</span> array;</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//使用集合set来去掉重复的元素</span></div><div class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (String element : array) &#123;</div><div class="line">			set.add(element);</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//将集合转换成String[]</span></div><div class="line">		<span class="keyword">return</span> toStringArray(set);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String[] split(String toSplit, String delimiter)</code>  ： 以分隔符分割字符串成两个数组，但是这个只是分割第一个分割符</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] split(String toSplit, String delimiter) &#123;</div><div class="line">		<span class="keyword">if</span> (!hasLength(toSplit) || !hasLength(delimiter)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> offset = toSplit.indexOf(delimiter);</div><div class="line">		<span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		String beforeDelimiter = toSplit.substring(<span class="number">0</span>, offset);</div><div class="line">		String afterDelimiter = toSplit.substring(offset + delimiter.length());</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;beforeDelimiter, afterDelimiter&#125;;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>public static String arrayToDelimitedString(Object[] arr, String delim)</code> ： 将数组中的每一元素以分割符组成对应的字符串</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToDelimitedString</span><span class="params">(Object[] arr, String delim)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ObjectUtils.isEmpty(arr)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> ObjectUtils.nullSafeToString(arr[<span class="number">0</span>]);</div><div class="line">		&#125;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">				sb.append(delim);</div><div class="line">			&#125;</div><div class="line">			sb.append(arr[i]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">cleanPath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//将path中的\\全部替换成/</span></div><div class="line">    <span class="comment">//如果这个路径是在windows下，如 c:\\image\\file.jpg,那么经过replace，将会变成 c://image//file.jpg</span></div><div class="line">		String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);</div><div class="line">    	<span class="comment">//获取pathToUse中:的索引</span></div><div class="line">		<span class="keyword">int</span> prefixIndex = pathToUse.indexOf(<span class="string">":"</span>);</div><div class="line">		String prefix = <span class="string">""</span>;   <span class="comment">//前缀，比如  c: 或者 /</span></div><div class="line">    <span class="comment">//如果这个路径是在windows下，如 c:\\image\\file.jpg,那么经过replace，将会变成 c://image//file.jpg</span></div><div class="line">		<span class="keyword">if</span> (prefixIndex != -<span class="number">1</span>) &#123;</div><div class="line">			prefix = pathToUse.substring(<span class="number">0</span>, prefixIndex + <span class="number">1</span>);  <span class="comment">//前缀变成 `c:`</span></div><div class="line">			pathToUse = pathToUse.substring(prefixIndex + <span class="number">1</span>);  <span class="comment">//去掉前面的前缀</span></div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//如果pathToUse是以/开头，表示是linux下的路径</span></div><div class="line">		<span class="keyword">if</span> (pathToUse.startsWith(FOLDER_SEPARATOR)) &#123;</div><div class="line">			prefix = prefix + FOLDER_SEPARATOR;   <span class="comment">//前缀就是  /</span></div><div class="line">			pathToUse = pathToUse.substring(<span class="number">1</span>);   <span class="comment">//pathToUse就变成了去掉/之后的字符串</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">//将pathToUse使用/分割成一个字符串数组，比如pathToUse=home/chenjiabinbg/file.txt，那么数组为 ["home","chenjiabing","file.txt"]</span></div><div class="line">		String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);</div><div class="line">    </div><div class="line">		List&lt;String&gt; pathElements = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">		<span class="keyword">int</span> tops = <span class="number">0</span>;</div><div class="line">		</div><div class="line">    	<span class="comment">//遍历数组</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = pathArray.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">			String element = pathArray[i];</div><div class="line">            <span class="comment">//如果这个元素是表示当前路径的   .表示当前路径，..表示上一级路径</span></div><div class="line">			<span class="keyword">if</span> (CURRENT_PATH.equals(element)) &#123;</div><div class="line">				<span class="comment">// Points to current directory - drop it.</span></div><div class="line">			&#125;</div><div class="line">            <span class="comment">//如果是上一级路径，tops+1</span></div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (TOP_PATH.equals(element)) &#123;</div><div class="line">				<span class="comment">// Registering top path found.</span></div><div class="line">				tops++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (tops &gt; <span class="number">0</span>) &#123;</div><div class="line">					<span class="comment">// Merging path element with element corresponding to top path.</span></div><div class="line">					tops--;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="comment">// Normal path element found.</span></div><div class="line">					pathElements.add(<span class="number">0</span>, element);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Remaining top paths need to be retained.</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tops; i++) &#123;</div><div class="line">			pathElements.add(<span class="number">0</span>, TOP_PATH);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;StringUtils&quot;&gt;&lt;a href=&quot;#StringUtils&quot; class=&quot;headerlink&quot; title=&quot;StringUtils&quot;&gt;&lt;/a&gt;StringUtils&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;spring封装的字符串工具类&lt;/li&gt;
&lt;/ul&gt;
&lt;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>spring整合Log4j</title>
    <link href="http://chenjiabing666.github.io/2018/08/04/spring%E6%95%B4%E5%90%88Log4j/"/>
    <id>http://chenjiabing666.github.io/2018/08/04/spring整合Log4j/</id>
    <published>2018-08-04T15:46:43.000Z</published>
    <updated>2018-08-04T15:47:02.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring使用Log4j"><a href="#spring使用Log4j" class="headerlink" title="spring使用Log4j"></a>spring使用Log4j</h1><h2 id="常用日志框架介绍"><a href="#常用日志框架介绍" class="headerlink" title="常用日志框架介绍"></a>常用日志框架介绍</h2><ul>
<li><p>转载自<a href="https://blog.csdn.net/liupeifeng3514/article/details/79624446" target="_blank" rel="external">https://blog.csdn.net/liupeifeng3514/article/details/79624446</a></p>
</li>
<li><p><strong>Log4j</strong> Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j是几种Java日志框架之一；</p>
</li>
<li><strong>Log4j 2</strong> Apache Log4j 2是apache开发的一款Log4j的升级产品；</li>
<li><strong>Commons Logging</strong> Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging；</li>
<li><strong>Slf4j</strong> 类似于Commons Logging，是一套简易Java日志门面，本身并无日志的实现。（Simple Logging Facade for Java，缩写Slf4j）；</li>
<li><strong>Logback</strong> 一套日志组件的实现（slf4j阵营）；</li>
<li><strong>Jul</strong> （Java Util Logging）,自Java1.4以来的官方日志实现。</li>
</ul>
<h2 id="日志切换"><a href="#日志切换" class="headerlink" title="日志切换"></a>日志切换</h2><ul>
<li>springBoot处切换</li>
</ul>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><h3 id="日志的输出级别的设置"><a href="#日志的输出级别的设置" class="headerlink" title="日志的输出级别的设置"></a>日志的输出级别的设置</h3><p>​    1、<strong>OFF</strong>  - <strong>FATAL</strong>  - <strong>WARN</strong>  - <strong>INFO</strong>  - <strong>DEBUG</strong>  - <strong>TRACE</strong>  - <strong>ALL</strong>  </p>
<p>​    2、Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。  比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。  程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。  如果设置级别为INFO，则优先级高于等于INFO级别（如：INFO、WARN、  ERROR）的日志信息将可以被输出,小于该级别的如DEBUG将不会被输出。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## level：设定日志记录的最低级别，可设的值有OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别，Log4j建议只使用中间四个级别。通过在这里设定级别，您可以控制应用程序中相应级别的日志信息的开关，比如在这里设定了INFO级别，则应用程序中所有DEBUG级别的日志信息将不会被打印出来。</div><div class="line"></div><div class="line">## appenderName：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。例如：log4j.rootLogger＝INFO,A1,B2,C3</div><div class="line">log4j.rootLogger=[level],appenderName1,appenderName2</div></pre></td></tr></table></figure>
<h3 id="配置日志的输出地"><a href="#配置日志的输出地" class="headerlink" title="配置日志的输出地"></a>配置日志的输出地</h3><p>​    1、<strong>appenderName</strong>：自定义appderName，在log4j.rootLogger设置中使用；</p>
<p>​    2、<strong>className</strong>：可设值如下： </p>
<p>​        (1) <strong>org.apache.log4j.ConsoleAppender</strong>（控制台）</p>
<p>​        (2) <strong>org.apache.log4j.FileAppender</strong>（文件）</p>
<p>​        (3) <strong>org.apache.log4j.DailyRollingFileAppender</strong>（每天产生一个日志文件）</p>
<p>​        (4) <strong>org.apache.log4j.RollingFileAppender</strong>（文件大小到达指定尺寸的时候产生一个新的文件）</p>
<p>​        (5) <strong>org.apache.log4j.WriterAppender</strong>（将日志信息以流格式发送到任意指定的地方）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log4j.appender.appenderName = className</div></pre></td></tr></table></figure>
<p>(1) ConsoleAppender选项：</p>
<ul>
<li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li>
<li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li>
<li>Target=System.err：默认值是System.out。</li>
</ul>
<p>(2 )FileAppender选项：</p>
<ul>
<li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li>
<li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li>
<li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li>
<li>File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</li>
</ul>
<p>(3) DailyRollingFileAppender选项：</p>
<ul>
<li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li>
<li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li>
<li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li>
<li>File=D:/logs/logging.log4j：指定当前消息输出到logging.log4j文件中。</li>
<li>DatePattern=’.’yyyy-MM：每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。<br>另外，也可以指定按周、天、时、分等来滚动日志文件，对应的格式如下： <ul>
<li>1)’.’yyyy-MM：每月</li>
<li>2)’.’yyyy-ww：每周</li>
<li>3)’.’yyyy-MM-dd：每天</li>
<li>4)’.’yyyy-MM-dd-a：每天两次</li>
<li>5)’.’yyyy-MM-dd-HH：每小时</li>
<li>6)’.’yyyy-MM-dd-HH-mm：每分钟</li>
</ul>
</li>
</ul>
<p>(4) RollingFileAppender选项：</p>
<ul>
<li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li>
<li>ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。</li>
<li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li>
<li>File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</li>
<li>MaxFileSize=100KB：后缀可以是KB, MB或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。</li>
<li>MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文件。</li>
</ul>
<h3 id="配置日志信息的输出格式（Layout）"><a href="#配置日志信息的输出格式（Layout）" class="headerlink" title="配置日志信息的输出格式（Layout）"></a>配置日志信息的输出格式（Layout）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log4j.appender.appenderName.layout=className</div></pre></td></tr></table></figure>
<p><strong>className</strong>：可设值如下：</p>
<ul>
<li>(1)org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li>
<li>(2)org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li>
<li>(3)org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li>
<li>(4)org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</li>
</ul>
<p><strong>(1) HTMLLayout选项：</strong></p>
<ul>
<li>LocationInfo=true：输出java文件名称和行号，默认值是false。</li>
<li>Title=My Logging： 默认值是Log4J Log Messages。</li>
</ul>
<p><strong>(2)PatternLayout选项：</strong></p>
<ul>
<li>ConversionPattern=%m%n：设定以怎样的格式显示消息。</li>
<li>格式说明如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</div><div class="line">%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d&#123;yyyy/MM/dd HH:mm:ss,SSS&#125;。</div><div class="line">%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</div><div class="line">%t：输出产生该日志事件的线程名。</div><div class="line">%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。</div><div class="line">%c：输出日志信息所属的类目，通常就是所在类的全名。</div><div class="line">%M：输出产生日志信息的方法名。</div><div class="line">%F：输出日志消息产生时所在的文件名称。</div><div class="line">%L：输出代码中的行号。</div><div class="line">%m：输出代码中指定的具体日志信息。</div><div class="line">%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"。</div><div class="line">%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。</div><div class="line">%%：输出一个"%"字符。</div><div class="line"></div><div class="line">另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</div><div class="line">1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。</div><div class="line">2) %-20c："-"号表示左对齐。</div><div class="line">3) %.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</div></pre></td></tr></table></figure>
<h3 id="Log4j比较全面的配置"><a href="#Log4j比较全面的配置" class="headerlink" title="Log4j比较全面的配置"></a>Log4j比较全面的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=DEBUG,console,dailyFile,im</div><div class="line">log4j.additivity.org.apache=true</div><div class="line"># 控制台(console)</div><div class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.Threshold=DEBUG</div><div class="line">log4j.appender.console.ImmediateFlush=true</div><div class="line">log4j.appender.console.Target=System.err</div><div class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div><div class="line"></div><div class="line"># 日志文件(logFile)</div><div class="line">log4j.appender.logFile=org.apache.log4j.FileAppender</div><div class="line">log4j.appender.logFile.Threshold=DEBUG</div><div class="line">log4j.appender.logFile.ImmediateFlush=true</div><div class="line">log4j.appender.logFile.Append=true</div><div class="line">log4j.appender.logFile.File=D:/logs/log.log4j</div><div class="line">log4j.appender.logFile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.logFile.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div><div class="line"># 回滚文件(rollingFile)</div><div class="line">log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender</div><div class="line">log4j.appender.rollingFile.Threshold=DEBUG</div><div class="line">log4j.appender.rollingFile.ImmediateFlush=true</div><div class="line">log4j.appender.rollingFile.Append=true</div><div class="line">log4j.appender.rollingFile.File=D:/logs/log.log4j</div><div class="line">log4j.appender.rollingFile.MaxFileSize=200KB</div><div class="line">log4j.appender.rollingFile.MaxBackupIndex=50</div><div class="line">log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.rollingFile.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div><div class="line"># 定期回滚日志文件(dailyFile)</div><div class="line">log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.dailyFile.Threshold=DEBUG</div><div class="line">log4j.appender.dailyFile.ImmediateFlush=true</div><div class="line">log4j.appender.dailyFile.Append=true</div><div class="line">log4j.appender.dailyFile.File=D:/logs/log.log4j</div><div class="line">log4j.appender.dailyFile.DatePattern=&apos;.&apos;yyyy-MM-dd</div><div class="line">log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.dailyFile.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div><div class="line"># 应用于socket</div><div class="line">log4j.appender.socket=org.apache.log4j.RollingFileAppender</div><div class="line">log4j.appender.socket.RemoteHost=localhost</div><div class="line">log4j.appender.socket.Port=5001</div><div class="line">log4j.appender.socket.LocationInfo=true</div><div class="line"># Set up for Log Factor 5</div><div class="line">log4j.appender.socket.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.socket.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div><div class="line"># Log Factor 5 Appender</div><div class="line">log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender</div><div class="line">log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000</div><div class="line"># 发送日志到指定邮件</div><div class="line">log4j.appender.mail=org.apache.log4j.net.SMTPAppender</div><div class="line">log4j.appender.mail.Threshold=FATAL</div><div class="line">log4j.appender.mail.BufferSize=10</div><div class="line">log4j.appender.mail.From = xxx@mail.com</div><div class="line">log4j.appender.mail.SMTPHost=mail.com</div><div class="line">log4j.appender.mail.Subject=Log4J Message</div><div class="line">log4j.appender.mail.To= xxx@mail.com</div><div class="line">log4j.appender.mail.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.mail.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div><div class="line"># 应用于数据库</div><div class="line">log4j.appender.database=org.apache.log4j.jdbc.JDBCAppender</div><div class="line">log4j.appender.database.URL=jdbc:mysql://localhost:3306/test</div><div class="line">log4j.appender.database.driver=com.mysql.jdbc.Driver</div><div class="line">log4j.appender.database.user=root</div><div class="line">log4j.appender.database.password=</div><div class="line">log4j.appender.database.sql=INSERT INTO LOG4J (Message) VALUES(&apos;=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n&apos;)</div><div class="line">log4j.appender.database.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.database.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div><div class="line"></div><div class="line"># 自定义Appender</div><div class="line">log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender</div><div class="line">log4j.appender.im.host = mail.cybercorlin.net</div><div class="line">log4j.appender.im.username = username</div><div class="line">log4j.appender.im.password = password</div><div class="line">log4j.appender.im.recipient = corlin@cybercorlin.net</div><div class="line">log4j.appender.im.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.im.layout.ConversionPattern=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</div></pre></td></tr></table></figure>
<h2 id="Spring使用Log4j日志框架"><a href="#Spring使用Log4j日志框架" class="headerlink" title="Spring使用Log4j日志框架"></a>Spring使用Log4j日志框架</h2><p>1、log4j框架指定日志输出文件只能使用绝对路径，但是我们的项目是跟着系统走的，因此我们需要将日志存放在项目的路径中，这样就需要获取到当前项目的路径，这里只需要在web.xml中添加一个Log4j的监听器即可实现，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置根目录,必须每个项目的值都不相同，否则将会发生冲突如果一个tomcat部署多个项目的话 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>webAppRootKey<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>lifecrystal.root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 指定log4j配置文件的位置，项目路径下 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 3000表示 开一条watchdog线程每60秒扫描一下配置文件的变化;这样便于日志存放位置的改变 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jRefreshInterval<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 1、log4j监听器，将webAppRootKey设置的值加载到系统参数中，这样就可以在配置文件中引用项目的路径</span></div><div class="line">		 2、项目运行期间，每次改变配置文件中的值都会被监听到</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、此时我们就可以在log4j.properties中使用<code>${lifecrystal.root}</code>获取到项目的路径，实际使用的就是<strong>System.getProperty()</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#LOG 输出级别和输出的地方，分别为Console和File，这里到值可以随意改变，但是在下文一定要和这里的一样</div><div class="line">log4j.rootLogger=DEBUG,Console,File</div><div class="line"></div><div class="line">#################################输出到控制台，级别为DEBUG#############################################</div><div class="line">#输出目的地方为控制台</div><div class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</div><div class="line">## 以system.out的格式输出，黑色的</div><div class="line">log4j.appender.Console.Target=System.out</div><div class="line">## 只有在DEBUG的模式下才会在控制台输出</div><div class="line">log4j.appender.console.Threshold=DEBUG</div><div class="line">#在控制台输出的格式  </div><div class="line">log4j.appender.Console.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.Console.layout.ConversionPattern=[%p]:[%c]:[%d&#123;yyyy/MM/dd HH:mm:ss&#125;] - %m%n</div><div class="line"></div><div class="line"></div><div class="line">#################################输出到文件中，级别为DEBUG#############################################</div><div class="line"></div><div class="line">#文件大小到一定尺寸产生一个新文件</div><div class="line">log4j.appender.File = org.apache.log4j.RollingFileAppender</div><div class="line">#指定输出目录</div><div class="line">log4j.appender.File.File = $&#123;lifecrystal.root&#125;/logs/debug/logs.log</div><div class="line">#定义文件最大大小</div><div class="line">log4j.appender.File.MaxFileSize = 1000MB</div><div class="line">#DEBUG 日志</div><div class="line">log4j.appender.File.Threshold = DEBUG</div><div class="line">log4j.appender.File.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.File.layout.ConversionPattern =[%p] [%d&#123;yyyy-MM-dd HH\:mm\:ss &#125;][%c]%m%n</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">##################################Mybatis的sql语句的输出，DEBUG级别#####################################################</div><div class="line">log4j.logger.com.ibatis=DEBUG log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG </div><div class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG</div><div class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG</div><div class="line">log4j.logger.java.sql.Connection=DEBUG log4j.logger.java.sql.Statement=DEBUG </div><div class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</div></pre></td></tr></table></figure>
<p>3、在方法中使用Log4j调试一些内容，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger logger=Logger.getLogger(TestController.class);   <span class="comment">//获取Logger对象</span></div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/test/test"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"这个是测试方法"</span>);</div><div class="line">		</div><div class="line">		logger.debug(<span class="string">"debug信息"</span>);</div><div class="line">		logger.info(<span class="string">"info信息"</span>);</div><div class="line">		</div><div class="line">		logger.error(<span class="string">"这个是error级别的信息"</span>);</div><div class="line">		System.out.println(<span class="number">10</span>/<span class="number">0</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://blog.csdn.net/liupeifeng3514" target="_blank" rel="external">https://blog.csdn.net/qq_35029429/article/details/78826936</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring使用Log4j&quot;&gt;&lt;a href=&quot;#spring使用Log4j&quot; class=&quot;headerlink&quot; title=&quot;spring使用Log4j&quot;&gt;&lt;/a&gt;spring使用Log4j&lt;/h1&gt;&lt;h2 id=&quot;常用日志框架介绍&quot;&gt;&lt;a href=&quot;#常
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
