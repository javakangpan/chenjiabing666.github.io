<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-06-14T04:39:28.641Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分查找</title>
    <link href="http://chenjiabing666.github.io/2018/06/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://chenjiabing666.github.io/2018/06/14/二分查找/</id>
    <published>2018-06-14T04:38:49.000Z</published>
    <updated>2018-06-14T04:39:28.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h1><ul>
<li>对一个有序数组的查找</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>使用冒泡排序算法对数组排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//冒泡排序   , 从小到大</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(Integer[] array)</span></span>&#123;</div><div class="line">	<span class="comment">//外层遍历n-1次</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=array.length-<span class="number">1</span>;j&gt;i;j--)&#123;</div><div class="line">			<span class="keyword">if</span> (array[j]&lt;array[j-<span class="number">1</span>]) &#123;</div><div class="line">				Integer t=array[j];</div><div class="line">				array[j]=array[j-<span class="number">1</span>];</div><div class="line">				array[j-<span class="number">1</span>]=t;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h2><ul>
<li>传入的数组是一个从小到大的数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 二分查找算法</div><div class="line">	 * <span class="doctag">@param</span> array  数组，必须是从小到大有序的</div><div class="line">	 * <span class="doctag">@param</span> key  查找的关键字</div><div class="line">	 * <span class="doctag">@return</span>  如果成功查找到，那么返回索引，否则返回-1</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">binarySearch</span><span class="params">(Integer[] array,Integer key)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> low=<span class="number">0</span>;  <span class="comment">//最前面的索引默认是0</span></div><div class="line">		<span class="keyword">int</span> high=array.length-<span class="number">1</span>;  <span class="comment">//最后面的索引默认为最后一个</span></div><div class="line">		</div><div class="line">		<span class="comment">//从小到大的数组，low&gt;high判断数组中是否有元素</span></div><div class="line">		<span class="keyword">if</span> (key&lt;array[low]||key&gt;array[high]||low&gt;high) &#123;</div><div class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(low&lt;=high)&#123;</div><div class="line">			<span class="keyword">int</span> middle=(low+high)/<span class="number">2</span>;   <span class="comment">//左右索引的中间值</span></div><div class="line">			<span class="comment">//如果要查找的数据大于中间值，表示</span></div><div class="line">			<span class="keyword">if</span> (key&gt;array[middle]) &#123;</div><div class="line">				low=middle+<span class="number">1</span>;   <span class="comment">//那么查找右半部分</span></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key&lt;array[middle]) &#123;   <span class="comment">//如果查找的数据小于中间值，那么查找左半部分</span></div><div class="line">				high=middle-<span class="number">1</span>;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果key==middle,那么直接返回middle即可</span></div><div class="line">				<span class="keyword">return</span> middle;   </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">//没有找到，返回-1</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 递归的二分查找</div><div class="line"> * <span class="doctag">@param</span> array  从小到大的有序数组</div><div class="line"> * <span class="doctag">@param</span> key  需要查找的数	据</div><div class="line"> * <span class="doctag">@param</span> low  左边的索引  初始值为0</div><div class="line"> * <span class="doctag">@param</span> high  右边的索引  初始值为array.length-1</div><div class="line"> * <span class="doctag">@return</span>  查找成功返回索引，否则返回-1</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">recursionBinarySearch</span><span class="params">(Integer[] array,Integer key,Integer low,Integer high)</span></span>&#123;</div><div class="line">	<span class="comment">//从小到大的数组，low&gt;high判断数组中是否有元素</span></div><div class="line">	<span class="keyword">if</span> (key&lt;array[low]||key&gt;array[high]||low&gt;high) &#123;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	Integer middle=(low+high)/<span class="number">2</span>;    <span class="comment">//中间索引</span></div><div class="line">	<span class="keyword">if</span> (key&gt;array[middle]) &#123;</div><div class="line">		<span class="keyword">return</span> recursionBinarySearch(array, key, middle+<span class="number">1</span>, high);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&lt;array[middle])&#123;</div><div class="line">		<span class="keyword">return</span> recursionBinarySearch(array, key, low, middle-<span class="number">1</span>);</div><div class="line">	&#125;<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> middle;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二分查找算法&quot;&gt;&lt;a href=&quot;#二分查找算法&quot; class=&quot;headerlink&quot; title=&quot;二分查找算法&quot;&gt;&lt;/a&gt;二分查找算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;对一个有序数组的查找&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; 
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis总结</title>
    <link href="http://chenjiabing666.github.io/2018/06/06/Redis%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiabing666.github.io/2018/06/06/Redis总结/</id>
    <published>2018-06-06T02:23:50.000Z</published>
    <updated>2018-06-06T02:24:18.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ul>
<li><a href="http://redisdoc.com/" target="_blank" rel="external">中文文档</a></li>
</ul>
<h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><ul>
<li>关系型数据库<ul>
<li>存储表</li>
<li>使用<code>SQL</code></li>
<li>也称为结构化数据库</li>
<li>常见产品<ul>
<li>MySQL</li>
<li>Oracle</li>
<li>SQL Server</li>
<li>DB2</li>
</ul>
</li>
</ul>
</li>
<li>非关系型数据库<ul>
<li>泛指不使用SQL操作的数据库</li>
<li>文档数据库<ul>
<li>存储文档</li>
<li><code>MogoDB</code>，用于存储<code>JSON文档</code></li>
</ul>
</li>
<li><code>Key_Value</code>数据库<ul>
<li>核心原理就是散列表(hash)</li>
<li>查询性能奇高，经常作为数据库的缓存使用</li>
<li>常见产品<ul>
<li><code>MemoryCache</code></li>
<li><code>Redis</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><ul>
<li>一种非关系型<code>Key_Value</code>数据库</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>是内存型数据库，同时提供了磁盘持久存储功能</li>
<li>Redis采用散列表技术，查询性能高，可以达到千万级并发，Mysql的并发是千级并发</li>
<li>Redis经常作为关系型数据库的缓存使用</li>
<li>Redis支持5种数据类型</li>
</ol>
<h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><h3 id="第一种-yum-安装"><a href="#第一种-yum-安装" class="headerlink" title="第一种  yum 安装"></a>第一种  yum 安装</h3><ul>
<li><code>yum -y install redis</code></li>
<li></li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><code>systemctl start  redis.service</code>  </li>
<li><code>ps -A | grep redis</code> ： 查看redis进程</li>
<li><code>systemctl restart  redis.service</code></li>
<li><code>systemctl stop  redis.service</code></li>
</ul>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><ul>
<li><a href="https://redis.io/download" target="_blank" rel="external">下载地址</a></li>
<li><a href="https://blog.csdn.net/lixianlin/article/details/7024893" target="_blank" rel="external">安装教程</a></li>
</ul>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ul>
<li><code>export PATH=/usr/local/redis/bin:$PATH</code></li>
<li><code>redis-server</code>   : 启动redis</li>
</ul>
<h2 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h2><ul>
<li><code>redis-cli</code>，默认端口为<code>6379</code></li>
</ul>
<h2 id="Redis-提供了5中数据类型"><a href="#Redis-提供了5中数据类型" class="headerlink" title="Redis 提供了5中数据类型"></a>Redis 提供了5中数据类型</h2><ul>
<li>Redis为每种数据类型提供的对应的一组操作命令<ul>
<li>String </li>
<li>Hash</li>
<li>List</li>
<li>Set</li>
<li>Sorted Set</li>
</ul>
</li>
<li>除了5中类型的命令，还提供了其他的命令</li>
<li>都是指存储到数据库中的<code>value</code>的类型，<code>key</code>的类型永远都是字符串</li>
</ul>
<h2 id="keys"><a href="#keys" class="headerlink" title="keys *"></a>keys *</h2><ul>
<li>获取所有的<code>key</code></li>
</ul>
<h2 id="String类型命令"><a href="#String类型命令" class="headerlink" title="String类型命令"></a>String类型命令</h2><ul>
<li>可以存储字符串，也可以存储数字(字符串形式)，并且其中对数字的处理也提供了一些命令，便于我们操作数字</li>
</ul>
<h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><ul>
<li><code>set key value</code>  : 设置key的值为value，如果已经有值了，那么就会覆盖旧值<ul>
<li><code>set message &quot;hello world&quot;</code></li>
</ul>
</li>
<li><code>set key value EX seconds</code>  设置key的值，并且过期时间为秒<ul>
<li><code>set message &quot;beijing&quot; EX 10</code> ： 10秒之后过期</li>
</ul>
</li>
</ul>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><ul>
<li><code>get key</code>  : 获取指定key的值<ul>
<li><code>get message</code> </li>
</ul>
</li>
</ul>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><ul>
<li><code>del key</code> : 删除指定的key</li>
</ul>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><ul>
<li><code>append key value</code> : 在指定的key后面追加值</li>
</ul>
<h3 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h3><ul>
<li><code>decr key</code>  : 如果key中存储的是一个数字，那么这个值将会减一，如果不是数字报错<ul>
<li><code>set a &quot;10&quot;</code>,<code>desr a</code>: 执行这两个命令之后，a的值就是<code>&quot;9&quot;</code>、</li>
</ul>
</li>
</ul>
<h3 id="decrby"><a href="#decrby" class="headerlink" title="decrby"></a>decrby</h3><ul>
<li><code>decrby key number</code> : 减少number<ul>
<li><code>decrby a 10</code></li>
</ul>
</li>
</ul>
<h3 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h3><ul>
<li><code>incr key</code> : 如果key中存储的是一个数据，那么值将会加一<ul>
<li><code>incr a</code>  </li>
</ul>
</li>
</ul>
<h3 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h3><ul>
<li><code>incrby key number</code> : 如果key中存储的数据是一个整型数据，那么增加<code>number</code><ul>
<li><code>incrby a 10</code> : a对应的整型数据+10</li>
</ul>
</li>
</ul>
<h3 id="incrbyfloat"><a href="#incrbyfloat" class="headerlink" title="incrbyfloat"></a>incrbyfloat</h3><ul>
<li><code>incrbyfloat key number</code> : 增加浮点数<ul>
<li><code>incrbyfloat a 10.4</code>  ：增加10.4</li>
<li><code>incrbyfloat a -10.5</code>   :  减少10.5</li>
</ul>
</li>
</ul>
<h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><ul>
<li><code>str key</code> : 获取指定key的长度</li>
</ul>
<h3 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h3><ul>
<li><code>mset a &quot;cen&quot; b &quot;ceg&quot;</code>：同时设置多个key-value</li>
</ul>
<h3 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h3><ul>
<li><code>megt key1 key2 ..........</code>  : 同时获取多个key的值</li>
</ul>
<h2 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h2><ul>
<li><code>key</code>是字符串的类型，其中的value是Hash类型，形式如下：</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/types.png" alt="Hash类型"></li>
</ul>
<ul>
<li>简单的理解就是每一个key中对应的值相当于Java中的对象，其中的<code>value</code>就是成员变量的字段和对应的值</li>
</ul>
<h3 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h3><ul>
<li><p><code>hset key  field value</code> : 为指定的key设置其中的域为field的值为value</p>
<ul>
<li><code>hset user name &quot;chenjiabing&quot;</code> : 设置key为<code>user</code>的<code>name</code>域的值为<code>chenjiabing</code></li>
<li><code>hset user age &quot;22&quot;</code></li>
<li><code>hset user password &quot;123456&quot;</code></li>
</ul>
</li>
<li>形象的输出就好像是javascript中的对象，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user=&#123;</div><div class="line">    <span class="string">"name"</span>:<span class="string">"chenjiabing"</span>,</div><div class="line">    <span class="string">"age"</span>:<span class="string">"22"</span>,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"123456"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h3><ul>
<li><code>hget key field</code> : 获取指定key中的域为<code>field</code>的值<ul>
<li><code>hget user name</code> : 获取name的值</li>
</ul>
</li>
</ul>
<h3 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h3><ul>
<li><code>hdel key field</code> : 删除指定的域<ul>
<li><code>hdel user name</code>  : 删除user中的name域</li>
</ul>
</li>
</ul>
<h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List 列表"></a>List 列表</h2><ul>
<li><strong>实际上是一个<code>双向队列</code>，可以在左侧插入，左侧取出，右侧插入，右侧取出</strong></li>
</ul>
<h3 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h3><ul>
<li><code>lpush key value .....</code> : 从左侧插入一个或者多个value<ul>
<li><code>lpush list 1 32 3 &quot;chenjiabing&quot;</code> ： 在左侧插入4个value</li>
</ul>
</li>
</ul>
<h3 id="LPOP"><a href="#LPOP" class="headerlink" title="LPOP"></a>LPOP</h3><ul>
<li><code>lpop key</code> ： 从左侧取出一个值，那么此时的list的长度就会减一<ul>
<li><code>lpop list</code>  : 取出一个值</li>
</ul>
</li>
</ul>
<h3 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h3><ul>
<li><code>rpush key value .....</code> : 从右侧插入一个或者多个值<ul>
<li><code>rpush list 1 3 4</code> </li>
</ul>
</li>
</ul>
<h3 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h3><ul>
<li><code>rpop key</code> : 从右侧取出一个值<ul>
<li><code>rpop list</code> ： 从右侧取出一个值，那么长度减一</li>
</ul>
</li>
</ul>
<h3 id="LLEN"><a href="#LLEN" class="headerlink" title="LLEN"></a>LLEN</h3><ul>
<li><code>LLEN key</code> ： 查看长度<ul>
<li><code>LLEN list</code></li>
</ul>
</li>
</ul>
<h3 id="BRPOP"><a href="#BRPOP" class="headerlink" title="BRPOP"></a>BRPOP</h3><ul>
<li><code>BRPOP key timeout</code> :阻塞从右侧取值， 从右侧取出数据，如果其中的数据为空，那么等待<code>timeout秒</code>，如果其中一旦插入数据就会立即返回<ul>
<li><code>BROP list 60</code>  : 从右侧取出list中的数据，如果list中没有数据那么等待<code>60s</code>，如果一旦其中插入了数据，会立即返回数据</li>
</ul>
</li>
</ul>
<h3 id="BLPOP"><a href="#BLPOP" class="headerlink" title="BLPOP"></a>BLPOP</h3><ul>
<li><code>BLPOP key timeout</code>  : 阻塞从左侧取值<ul>
<li><code>BLPOP list 60</code></li>
</ul>
</li>
</ul>
<h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><ul>
<li>不重复</li>
</ul>
<h2 id="SortedSet-有序集合"><a href="#SortedSet-有序集合" class="headerlink" title="SortedSet 有序集合"></a>SortedSet 有序集合</h2><h2 id="Java-操作-Redis"><a href="#Java-操作-Redis" class="headerlink" title="Java 操作 Redis"></a>Java 操作 Redis</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul>
<li>Jedis</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>开启<code>6379</code>端口<ul>
<li><code>firewall-cmd --zone=public --add-port=6379/tcp</code></li>
</ul>
</li>
<li>如果显示<code>firewall not running</code><ul>
<li><code>start firewalld.service</code></li>
</ul>
</li>
</ul>
<ul>
<li><p>测试如下</p>
<ul>
<li>Jedis中的方法名和Redis中的命令是一样的</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//操作String类型的数据</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span></span>&#123;</div><div class="line">	Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">"47.104.192.157"</span>);  <span class="comment">//创建jedis对象，其中的参数是IP地址，如果是本地写localhost</span></div><div class="line">	jedis.set(<span class="string">"name"</span>, <span class="string">"chenjiabing"</span>);   <span class="comment">//添加一个String 类型的数据  key为name</span></div><div class="line">	jedis.get(<span class="string">"name"</span>);  <span class="comment">//获取key为name的值</span></div><div class="line">	jedis.del(<span class="string">"name"</span>);  <span class="comment">//删除key为name的数据</span></div><div class="line">       jedis.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试Hash类型</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashSet</span><span class="params">()</span></span>&#123;</div><div class="line">	Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</div><div class="line">	jedis.hset(<span class="string">"user"</span>, <span class="string">"name"</span>,<span class="string">"陈加兵"</span>);   <span class="comment">//添加一个key为user的Hash类型的数据</span></div><div class="line">	jedis.hset(<span class="string">"user"</span>, <span class="string">"age"</span>, <span class="string">"22"</span>);   <span class="comment">//添加age</span></div><div class="line">	jedis.hincrBy(<span class="string">"user"</span>, <span class="string">"age"</span>, <span class="number">200</span>);   <span class="comment">//年龄增加200</span></div><div class="line">	String name=jedis.hget(<span class="string">"user"</span>, <span class="string">"name"</span>); <span class="comment">//获取name的值</span></div><div class="line">	Integer age=Integer.parseInt(jedis.hget(<span class="string">"user"</span>, <span class="string">"age"</span>));  <span class="comment">//获取age的值，转换为Integer类型</span></div><div class="line">	System.out.println(name);</div><div class="line">	System.out.println(age);</div><div class="line">       jedis.close();</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试List类型</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</div><div class="line">	Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</div><div class="line">	jedis.lpush(<span class="string">"list"</span>, <span class="string">"陈加兵"</span>);  <span class="comment">//从左侧添加一个值</span></div><div class="line">	System.out.println(jedis.llen(<span class="string">"list"</span>));  <span class="comment">//获取长度</span></div><div class="line">	jedis.lpush(<span class="string">"list"</span>, <span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"TOM"</span>);  <span class="comment">//左侧存放多个值</span></div><div class="line">	System.out.println(jedis.rpop(<span class="string">"list"</span>));  <span class="comment">//从右侧取出</span></div><div class="line">       jedis.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Redis解决Session共享"><a href="#Redis解决Session共享" class="headerlink" title="Redis解决Session共享"></a>Redis解决Session共享</h2><ul>
<li>当浏览器登录，Nginx会分发请求给应用服务器，此时的这个服务器中保存了该用户的<code>session</code>，但是可能再次请求的时候，Nginx会把请求分发给另外一个应用服务器，那么又需要重新登录一次。我们可以使用Nginx的<code>ip_hash</code>策略解决这个问题，但是我们也可以使用Redis解决</li>
<li>我们将<code>session id</code>存放在<code>Redis</code>中，每一个应用服务器都从Redis中获取<code>Session id</code></li>
<li><strong>需要一个远程数据库<code>Redis</code>，并且所有的应用服务器(Tomcat)共享这个远程数据库，那么Redis中的<code>sessionId</code>才能实现共享存取</strong></li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/session.png" alt=""></li>
</ul>
<h3 id="Session管理器"><a href="#Session管理器" class="headerlink" title="Session管理器"></a>Session管理器</h3><ul>
<li><code>Redis Session Manage for Apache Tomcat</code></li>
<li><a href="https://github.com/jcoleman/tomcat-redis-session-manager" target="_blank" rel="external">参考文章</a></li>
</ul>
<h3 id="下载jar包"><a href="#下载jar包" class="headerlink" title="下载jar包"></a>下载jar包</h3><ul>
<li><a href="https://search.maven.org/#search%7Cga%7C1%7Ctomcat-redis-session-manager" target="_blank" rel="external"><code>tomcat-redis-session-manager-VERSION.jar</code></a></li>
<li><a href="http://mvnrepository.com/artifact/redis.clients/jedis" target="_blank" rel="external"><code>jedis-2.5.2.jar</code></a></li>
<li><a href="http://mvnrepository.com/artifact/org.apache.commons/commons-pool2" target="_blank" rel="external"><code>commons-pool2-2.2.jar</code></a></li>
</ul>
<h3 id="将下载的jar包放在每个应用服务器的Tomcat中"><a href="#将下载的jar包放在每个应用服务器的Tomcat中" class="headerlink" title="将下载的jar包放在每个应用服务器的Tomcat中"></a>将下载的jar包放在每个应用服务器的Tomcat中</h3><ul>
<li><p><strong>不适用于<code>Tomcat8.*</code></strong></p>
</li>
<li><p><strong>这里是要修改每一台应用服务器上面的Tomcat内容，这样才能实现多台应用服务器中的<code>SessionId</code>共享</strong></p>
</li>
<li><p>将jar包放在<code>Tomcat</code>目录中的<code>lib</code>文件夹下</p>
</li>
<li>修改<code>Tomcat</code>目录下的<code>conf/context.xml</code>中添加如下内容</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Valve className="com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve" /&gt;</div><div class="line">&lt;Manager className="com.orangefunction.tomcat.redissessions.RedisSessionManager"</div><div class="line">         host="47.104.192.157" &lt;!-- 服务器的IP，这个是Redis数据库所在服务器的IP --&gt;</div><div class="line">         port="6379" &lt;!-- 端口 "6379" --&gt;</div><div class="line">         database="0" &lt;!-- optional: defaults to "0" --&gt;</div><div class="line">         maxInactiveInterval="60" /&gt; &lt;!-- 失效时间 "60" (in seconds) --&gt;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://redisdoc.com/" target="_blank" rel="external">http://redisdoc.com/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://redisdoc.com/&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="Redis" scheme="http://chenjiabing666.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://chenjiabing666.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Nginx总结</title>
    <link href="http://chenjiabing666.github.io/2018/06/06/Nginx%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiabing666.github.io/2018/06/06/Nginx总结/</id>
    <published>2018-06-06T02:23:10.000Z</published>
    <updated>2018-06-06T02:23:30.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2><ul>
<li>是俄罗斯程序员开发的一款高性能的web服务器</li>
<li>Nginx可以承受高并发，可以同时承受近百万请求</li>
<li>利用Nginx和Tomcat(应用服务器)组合搭建反向代理服务器集群，可以解决WEB的高并发问题</li>
</ul>
<h2 id="WEB-服务器"><a href="#WEB-服务器" class="headerlink" title="WEB 服务器"></a>WEB 服务器</h2><ul>
<li>凡是能够处理<code>Http</code>协议的服务器统称为web服务器</li>
<li>Nginx </li>
<li>Apache</li>
<li>Tomcat</li>
<li>JBOSS</li>
<li>Weblogic</li>
<li>WebSpare</li>
</ul>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h3><ul>
<li><p><code>yum -y install nginx</code></p>
</li>
<li><p><code>nginx</code> 启动</p>
</li>
<li><p><code>nginx -s stop</code> 关闭</p>
</li>
</ul>
<h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><ul>
<li><code>systemctl start nginx.service</code></li>
<li><code>systemctl stop nginx.service</code></li>
<li><code>systemctl restart nginx.service</code></li>
<li><code>systemctl enable nginx.service</code>  </li>
<li><code>systemctl disable nginx.service</code></li>
<li><code>ps -A | grep nginx</code>  : 检查</li>
<li>启动之后在浏览器直接输入<code>http://IP地址</code>即可访问到主页，这里的端口号默认是<code>80</code></li>
</ul>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li><code>/etc/nginx/nginx.conf</code></li>
</ul>
<h4 id="web目录"><a href="#web目录" class="headerlink" title="web目录"></a>web目录</h4><ul>
<li><code>/usr/share/nginx/html</code></li>
</ul>
<h3 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h3><ul>
<li><a href="http://nginx.org/download/nginx-1.14.0.tar.gz" target="_blank" rel="external">安装地址</a></li>
</ul>
<h2 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h2><ul>
<li>位置 ： <code>/etc/nginx/nginx.conf</code>  （yum安装的路径）</li>
<li>内容结构</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">worker_processes 1;   //worker进程，一般是电脑几核处理器就写几</div><div class="line"></div><div class="line">events&#123;</div><div class="line">	worker_connections 1024;   //一个worker进程能够承受多少线程</div><div class="line">&#125;</div><div class="line"></div><div class="line">http&#123;</div><div class="line">	http协议通用参数</div><div class="line"></div><div class="line">	server&#123;</div><div class="line">		虚拟主机参数</div><div class="line">	&#125;</div><div class="line">	server&#123;</div><div class="line">		虚拟主机参数</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>nginx -t -c /etc/nginx/nginx.conf</code>  修改完成之后执行该命令，测试配置文件，热加载(不停机)配置文件</li>
<li><code>nginx -s reload</code> : 重新启动<code>nginx</code></li>
</ul>
<h2 id="虚拟主机的三种方式"><a href="#虚拟主机的三种方式" class="headerlink" title="虚拟主机的三种方式"></a>虚拟主机的三种方式</h2><ol>
<li>基于端口的虚拟主机，80,8080，需要使用80以外的其他端口，客户端使用不方便</li>
<li>基于IP虚拟机，一个服务器可以绑定多个IP</li>
<li><strong>基于域名的虚拟主机，共享一个IP，共享一个80端口</strong></li>
</ol>
<h2 id="外网配置"><a href="#外网配置" class="headerlink" title="外网配置"></a>外网配置</h2><p>###　前提</p>
<ul>
<li><p>我们的服务器<code>Ｃｅｎｔｏｓ７</code> 使用<code>yum install nginx</code>安装了<code>Nginx</code>，那么这个Nginx的<code>web</code>目录就在<code>/usr/share/nginx/html</code></p>
</li>
<li><p>配置文件的路径为： <code>/etc/nginx/nginx.conf</code></p>
</li>
<li><p><strong>有自己的域名</strong></p>
</li>
</ul>
<h3 id="配置开始"><a href="#配置开始" class="headerlink" title="配置开始"></a>配置开始</h3><ol>
<li>申请自己的域名： 比如<code>chenjiabing.org</code>，并且将自己的<code>域名解析</code>绑定在服务器的<code>ip地址</code>上<ol>
<li><strong>比如将下面需要用到的<code>t1.chenjiabing.org</code>和<code>t2.chenjiabing.org</code>解析在上面，那么我们在访问<code>t1.chenjiabing.org</code>的时候才能找到<code>ip</code>，随之找到自己的服务器，之后再根据在Nginx中配置的虚拟主机访问到对应的页面</strong></li>
</ol>
</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/dns.png" alt="解析域名"></li>
<li><strong>在<code>/etc/nginx/nginx.conf</code>的配置文件中只需要配置虚拟主机即可，这里我们配置两个虚拟主机</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">   # 自己配置的虚拟主机</div><div class="line">   server&#123;</div><div class="line">        listen 80;    # nginx的端口</div><div class="line">        server_name t1.chenjiabing.org;     # 访问的地址</div><div class="line">        location / &#123;</div><div class="line">                root t1;     # 这个虚拟主机对应的web目录，这里设置的路径为/usr/share/t1</div><div class="line">                index index.html;   # 默认显示的首页</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 自己配置的虚拟主机</div><div class="line">   server&#123;</div><div class="line">        listen 80;  </div><div class="line">        server_name t2.chenjiabing.cn;    # 访问的地址</div><div class="line">        location / &#123;</div><div class="line">                # /usr/share/nginx/t2    </div><div class="line">                root t2;            # 这个虚拟主机的web目录</div><div class="line">                index index.html;  # 显示的首页</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># nginx默认的虚拟主机</div><div class="line">server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;    # 默认的web目录，其实这里可以写 html 是一样的</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置上面的两个虚拟主机之后，我们需要配置对应的<code>web</code>目录，我们只需要在<code>/usr/share/nginx/</code>这个目录中新建<code>t1</code>和<code>t2</code>两个文件夹作为两个虚拟主机的<code>web</code>目录，之后，在其中创建<code>index.html</code>作为显示的主页即可</li>
<li>测试启动<code>Nginx</code>: <code>nginx -t -c /etc/nginx/nginx.conf</code></li>
<li><p>重新启动<code>nginx</code> ： <code>nginx  -s reload</code></p>
</li>
<li><p>之后在浏览器中输入<code>t1.chenjiabing.org</code>,那么浏览器就会自动访问到<code>/usr/share/nginx/t1/index.html</code>显示首页内容，同样的输入<code>http://t2.chenjiabing.org</code></p>
</li>
</ul>
<h2 id="内网配置"><a href="#内网配置" class="headerlink" title="内网配置"></a>内网配置</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li><p><strong>没有自己的域名，但是我们想要使用域名访问服务器上的Nginx的内容，比如，我们输入<code>t1.tedu.cn</code>就想要访问到服务器地址为：<code>47.104.192.157</code>中Nginx配置的虚拟主机</strong></p>
</li>
<li><p>使用的是Linux，hosts文件所在目录为<code>/etc/hosts</code></p>
</li>
<li><p>使用的是windows，那么hosts文件所在的目录为<code>C:\Windows\System32\Drivers\etc\hosts</code></p>
</li>
</ul>
<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><ul>
<li>我们需要在<code>/etc/hosts</code>中添加对应需要的域名和服务器的<code>IP地址</code></li>
<li><code>sudo vi /etc/hosts</code> ,输入以下内容</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">47.104.192.157 t1.tedu.cn    ## 前面是服务器的IP地址，后面是需要访问的域名，这个是没有申请的域名，可以直接写</div><div class="line"></div><div class="line">47.104.192.157 t2.tedu.cn</div></pre></td></tr></table></figure>
<ul>
<li>配置完成之后，使用<code>ping t1.tedu.cn</code>查看是否能够找到对应的IP地址<code>47.104.192.157</code></li>
</ul>
<h3 id="服务器配置虚拟主机"><a href="#服务器配置虚拟主机" class="headerlink" title="服务器配置虚拟主机"></a>服务器配置虚拟主机</h3><ul>
<li>和上面的配置一样，不过是这次配置的域名是<code>t1.tedu.cn</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">   # 自己配置的虚拟主机</div><div class="line">   server&#123;</div><div class="line">        listen 80;    # nginx的端口</div><div class="line">        server_name t1.tedu.org;     # 访问的地址</div><div class="line">        location / &#123;</div><div class="line">                root t1;     # 这个虚拟主机对应的web目录，这里设置的路径为/usr/share/t1</div><div class="line">                index index.html;   # 默认显示的首页</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 自己配置的虚拟主机</div><div class="line">   server&#123;</div><div class="line">        listen 80;  </div><div class="line">        server_name t2.tedu.cn;    # 访问的地址</div><div class="line">        location / &#123;</div><div class="line">                # /usr/share/nginx/t2    </div><div class="line">                root t2;            # 这个虚拟主机的web目录</div><div class="line">                index index.html;  # 显示的首页</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># nginx默认的虚拟主机</div><div class="line">server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;    # 默认的web目录，其实这里可以写 html 是一样的</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>同样的创建<code>t1</code>和<code>t2</code>的web目录</li>
<li>测试加载，重启</li>
<li><strong>在本地机器的浏览器中输入<code>t1.tedu.cn</code>即可访问到，不过这次只能在配置<code>hosts</code>的本地机器使用，如果该机器没有配置这个<code>hosts</code>文件，那么是不能访问的</strong></li>
</ul>
<h3 id="搜索过程"><a href="#搜索过程" class="headerlink" title="搜索过程"></a>搜索过程</h3><ol>
<li>在本地配置过的<code>hosts</code>文件的机器的浏览器中输入<code>http://t1.tedu.cn</code>,那么浏览器会查找本地的<code>hosts</code>文件中是否存在对应的<code>IP地址</code></li>
<li>查找到对应的IP地址之后，会向服务器发出请求，此时服务器端就会根据浏览器发出的域名在Nginx的虚拟主机中查找匹配<code>server_name</code>,然后找到响应的页面</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/nginx.png" alt="Nginx"></li>
</ol>
<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><ol>
<li>判断域名能够解析成对应的IP</li>
<li>判断IP地址是否能够访问</li>
</ol>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><ul>
<li>基于<code>SSL</code>加密的<code>HTTP</code>通讯</li>
<li>底层是<code>SSL</code>加密的<code>TCP</code>协议</li>
<li>应用层还是传统的HTTP编程</li>
<li>默认的通讯端口是 <code>443</code></li>
<li>需要去<code>CA</code>申请证书，配置到服务器上</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/cs.png" alt="CA证书"></li>
</ul>
<h2 id="配置HTTPS证书"><a href="#配置HTTPS证书" class="headerlink" title="配置HTTPS证书"></a>配置HTTPS证书</h2><h3 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h3><ul>
<li>远程服务器上的Nginx使用<code>yum -y install nginx</code>安装的，那么这个路径就是确定了</li>
<li>并且下载了证书，总共两个文件</li>
</ul>
<h3 id="内网配置-1"><a href="#内网配置-1" class="headerlink" title="内网配置"></a>内网配置</h3><ul>
<li>我们在<code>aliyun.com</code>中使用<code>tom.canglaoshi.org</code>这个域名申请了HTTPS证书</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/ca.png" alt="申请证书"></li>
<li><p><img src="http://ono60m7tl.bkt.clouddn.com/download.png" alt="下载证书"></p>
</li>
<li><p>因为我们没有域名和自己的服务器IP地址绑定在一起，因此我们使用内网配置</p>
</li>
<li>在本地的机器的<code>/etc/hosts</code>文件中添加对应的<code>服务器的IP地址  tom.canglaoshi.org</code><ul>
<li>这里的服务器的IP地址是远程服务器的地址，等会我们需要在远程服务器中配置Nginx</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">47.104.192.157  tom.canglaoshi.org    # 服务器IP地址  域名</div></pre></td></tr></table></figure>
<ul>
<li><p>在远程服务器的Ngix配置文件中<code>/etc/nginx/ngxin.conf</code>添加一个虚拟主机<code>server</code>，</p>
<ul>
<li>我们可在其中添加一个<code>include tom.conf;</code>这句话，那么我们再在<code>/etc/nginx</code>创建一个<code>tom.conf</code>配置文件即可，这样看的更加清除，其实就是使用了引入文件</li>
<li><code>tom.conf</code>的内容如下，下面的路径都是使用的相对路径</li>
<li><strong>http协议默认访问的是<code>80端口</code>，因此假如我们在浏览器中输入<code>http://tom.canglaoshi.org</code>那么将不会显示安全证书，因为<code>https</code>协议使用的是<code>443</code>端口，但是我们可以添加一个监听80端口的虚拟主机，设置<code>server_name</code>为<code>tom.canglaoshi.org</code>，同时使用<code>301</code>重定向到<code>https://tom.canglaoshi.org</code>，那么当在浏览器中输入<code>http://tom.canglaoshi.org</code>的时候就会自动跳转到<code>https://tom.canglaoshi.org</code></strong></li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    liseten  80;   # 默认端口，使用的http协议</div><div class="line">    server_name tom.canglaoshi.org;</div><div class="line">    return 301 https://tom.canglaoshi.org;  # 这里定义的是重定向，如果使用http://tom.canglaoshi.org ，那么就会重定向到https://tom.canglaoshi.org</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 443;        # 端口号  必须开启,必须使用Https协议才能访问到</div><div class="line">    server_name tom.canglaoshi.org;   # 开启证书的域名，这个域名不能改变，因为我们就是使用这个域名开启证书的</div><div class="line">    ssl on;</div><div class="line">    ssl_certificate   cert/214462831460580.pem;     # 这个是开启证书的时候下载的文件，放在/etc/nginx/cert文件中</div><div class="line">    ssl_certificate_key  cert/214462831460580.key;  # 这个是开启证书的时候下载的文件，放在/etc/nginx/cert文件中</div><div class="line">    ssl_session_timeout 5m;</div><div class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    location / &#123;</div><div class="line">        root tom;      # 这个是访问域名的时候显示的web目录，这需要自己在/usr/share/nginx中创建</div><div class="line">        index index.html;  # 这个是显示的首页</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们将开启证书的时候下载的两个文件，分别为<code>214462831460580.key</code>和<code>214462831460580.pem</code>放到<code>/etc/nginx/cert</code>文件中，当然这个<code>cert</code>文件需要我们自己创建</li>
<li>至此就配置完成</li>
<li>测试Nginx : <code>nginx -t -c /etc/nginx/ngxin.conf</code></li>
<li>重启nginx ： <code>nginx -s reload</code></li>
<li>此时在本地配置的机器的浏览器中输入<code>https://tom.canglaoshi.org</code>访问即可，我们将会看见地址栏中将会出现<code>安全</code>两个字，那么证书就配置上了<ul>
<li>这里使用的<code>403</code>端口，必须使用<code>https</code>访问</li>
</ul>
</li>
</ul>
<h3 id="外网配置-1"><a href="#外网配置-1" class="headerlink" title="外网配置"></a>外网配置</h3><ul>
<li>我们有自己的域名<code>chenjiabibing.org</code>和自己的服务器IP绑定在一起，那么我们可以直接在远程服务器中配置</li>
<li>使用<code>tom.chengjiabing.org</code>这个子域名申请证书，下载两个文件</li>
<li>不需要在本地机器配置了，直接从上面的远程服务器的步骤开始配置</li>
</ul>
<h1 id="Nginx反向代理集群"><a href="#Nginx反向代理集群" class="headerlink" title="Nginx反向代理集群"></a>Nginx反向代理集群</h1><h2 id="what-1"><a href="#what-1" class="headerlink" title="what"></a>what</h2><ul>
<li>通过互联网访问远程的服务器，Nginx分发请求给各种web容器(Tomcat…..)处理就叫反向代理</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/proxy.png" alt="反向正向集群代理"></li>
</ul>
<h2 id="内网模拟"><a href="#内网模拟" class="headerlink" title="内网模拟"></a>内网模拟</h2><ul>
<li>我们需要5台电脑，一台是本地的，使用浏览器访问域名为<code>http://tts.tedu.cn</code>,一台远程服务器(IP地址:47.104.192.157)，这台远程服务器使用Nginx分发请求给另外的三台，另外的三台使用的是Tomcat处理Nginx分发的请求，IP地址为：<code>192.168.0.231</code>，<code>192.168.0.176，</code>，<code>192.168.0.174</code></li>
<li>必须确保三台的<code>Tomcat</code>容器都是开启的状态，我们可以在本地使用<code>http://192.168.0.231:8080/</code>访问看看是否能够访问到该机器的Tomcat</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/toms.png" alt="反向代理"></li>
<li>因为没有申请域名，这个<code>tts.tedu.cn</code>没有和远程服务器的IP绑定，因此需要在本地机器配置<code>/etc/hosts</code>文件中配置才可以用浏览器访问<ul>
<li>在<code>/etc/hosts</code>文件中添加<code>47.104.192.157 tts.tedu.cn</code>即可</li>
<li>使用<code>ping tts.tedu.cn</code>查看能够成功</li>
</ul>
</li>
<li>此时我们在远程服务器中配置另外三台的集群信息即可。<ul>
<li>在<code>/etc/nginx/nginx.conf</code>添加一句<code>include tts.conf</code></li>
<li>那么我们只需要将自己的集群配置信息文件<code>tts.conf</code>放在<code>/etc/nginx/</code>文件夹下即可</li>
</ul>
</li>
<li><code>tts.conf</code>配置文件如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">upstream toms &#123;</div><div class="line">    server 192.168.0.231:8080;    # 配置三台tomcat的处理器，端口是8080，因为tomcat的默认端口</div><div class="line">    server 192.168.0.176:8080;</div><div class="line">    server 192.168.0.174:8080;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80;     # 监听的是80端口，浏览器默认使用80，当在本地机器上输入`http://tts.tedu.cn`</div><div class="line">    server_name tts.tedu.cn;     ## 对应的域名</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://toms;   # 这里的toms就是上面定义的集群信息</div><div class="line"></div><div class="line">        proxy_redirect     off;</div><div class="line">        proxy_set_header   Host             $host;</div><div class="line">        proxy_set_header   X-Real-IP        $remote_addr;</div><div class="line">        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</div><div class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</div><div class="line">        proxy_max_temp_file_size 0;</div><div class="line">        proxy_connect_timeout      90;</div><div class="line">        proxy_send_timeout         90;</div><div class="line">        proxy_read_timeout         90;</div><div class="line">        proxy_buffer_size          4k;</div><div class="line">        proxy_buffers              4 32k;</div><div class="line">        proxy_busy_buffers_size    64k;</div><div class="line">        proxy_temp_file_write_size 64k;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>此时我们配置成功</li>
<li>测试配置</li>
<li>重启Nginx</li>
<li><strong>在配置<code>/etc/hosts</code>的本地机器上输入<code>http://tts.tedu.cn</code>即可访问，我们看到Nginx是将请求均匀分发到不同的集群机器上进行处理</strong></li>
</ul>
<h2 id="Nginx集群的负载均衡策略"><a href="#Nginx集群的负载均衡策略" class="headerlink" title="Nginx集群的负载均衡策略"></a>Nginx集群的负载均衡策略</h2><h3 id="轮训策略"><a href="#轮训策略" class="headerlink" title="轮训策略"></a>轮训策略</h3><ul>
<li><p>默认策略</p>
</li>
<li><p>可以增加权重 <code>weight</code></p>
<ul>
<li>对于一些应用服务器的性能可能不一样，我们需要给性能更好的应用服务器分配更多的请求处理，因此这里就涉及到权重问题</li>
<li>直接在后面添加权重即可，如下</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">upstream toms &#123;</div><div class="line">    server 192.168.0.231:8080 weigth 10 ;    # 配置三台tomcat的处理器，端口是8080，因为tomcat的默认端口</div><div class="line">    server 192.168.0.176:8080 weight 20;</div><div class="line">    server 192.168.0.174:8080 weight 30;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以配合<code>Redis</code>实现session共享问题</li>
</ul>
<h3 id="ip-hash-ip-散列"><a href="#ip-hash-ip-散列" class="headerlink" title="ip_hash  ip 散列"></a>ip_hash  ip 散列</h3><ul>
<li>根据用户的Ip地址映射到固定的服务器</li>
<li><strong>如果用户登录网站，那么在当前的服务器中已经保存了<code>session</code>的信息，此时就不需要重新登录了，但是可能当再次请求的时候，Nginx又将其分发到其他的应用服务器中了，但是这个应用服务器没有当前当前用户登录的<code>session</code>信息，此时就需要重新登录，这个就是问题所在</strong></li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/iphash.png" alt="IP_Has"></li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li>就是根据用户的<code>IP地址</code>通过<code>散列算法</code>每次请求都保证Nginx将对应的Ip分发到同一台应用服务器</li>
<li>ip散列可以和轮训策略结合使用</li>
<li>直接添加一个<code>ip_hash</code>即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">upstream toms &#123;</div><div class="line">	ip_hash;</div><div class="line">    server 192.168.0.231:8080 weigth 10 ;    # 配置三台tomcat的处理器，端口是8080，因为tomcat的默认端口</div><div class="line">    server 192.168.0.176:8080 weight 20;</div><div class="line">    server 192.168.0.174:8080 weight 30;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h3><ul>
<li>根据url映射到固定的服务器</li>
</ul>
<h3 id="服务器的临时下线"><a href="#服务器的临时下线" class="headerlink" title="服务器的临时下线"></a>服务器的临时下线</h3><ul>
<li>如果服务器需要更新升级，我们需要将应用服务器临时下线维护，我们可以将其删除，或者添加一个<code>down</code>即可，比如<code>server 192.168.0.174:8080 weight 30 down</code>就表示该服务器下线了</li>
</ul>
<h2 id="MySQL远程连接"><a href="#MySQL远程连接" class="headerlink" title="MySQL远程连接"></a>MySQL远程连接</h2><ul>
<li><p>前提是远程的服务器需要开启<code>3306端口</code>，这个在<code>阿里云</code>的服务器开启即可</p>
</li>
<li><p><code>grant all privileges on *.* to 用户名@&quot;IP地址&quot;  identified by &quot;密码&quot;</code></p>
<ul>
<li><code>grant all privileges on tedu_store.* to tedu@&quot;%&quot; identified by &quot;tedu&quot;;</code><ul>
<li>连接远程数据库<code>tedu_store</code>，用户名为<code>tedu</code>,用户密码为<code>tedu</code></li>
</ul>
</li>
</ul>
</li>
<li>在本地连接远程数据库<ul>
<li><code>mysql -h IP地址 -u 用户名 -p</code><ul>
<li><code>mysql -h 47.104.152.197 -u tedu -p</code>，之后直接输入密码即可，那么连接的就是远程数据库</li>
</ul>
</li>
</ul>
</li>
<li><strong>远程数据库开启之后，我们就可以在自己的项目中配置数据库的连接<code>url</code>为远程数据库了，那么就可实现多个应用服务器共享一个数据库，实现数据的共享了，不会导致数据错乱了</strong></li>
</ul>
<h2 id="项目集群部署"><a href="#项目集群部署" class="headerlink" title="项目集群部署"></a>项目集群部署</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul>
<li>一台Nginx服务器分发请求，部署反向集群</li>
<li>多台应用服务器处理请求(Tomcat)</li>
<li>一台<code>MySQL</code>数据库服务器，存储项目数据</li>
<li>一台<code>Redis</code>服务器，实现session共享，实现Redis缓存</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/session.png" alt="项目集群实例"></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Nginx只是起到分发请求的作用，具体的处理是在应用服务器中，比如<code>Tomcat</code>，Nginx根据不同的策略将请求分发给不同应用服务器处理</li>
<li>这些不同的应用服务器可以连接同一个远程数据库，那么就可以实现数据共享，不会导致数据错乱</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;h2 id=&quot;什么是Nginx&quot;&gt;&lt;a href=&quot;#什么是Nginx&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Nginx" scheme="http://chenjiabing666.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://chenjiabing666.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux使用总结</title>
    <link href="http://chenjiabing666.github.io/2018/05/27/Linux%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiabing666.github.io/2018/05/27/Linux使用总结/</id>
    <published>2018-05-27T02:19:42.000Z</published>
    <updated>2018-05-27T02:20:15.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Liunx使用"><a href="#Liunx使用" class="headerlink" title="Liunx使用"></a>Liunx使用</h1><h2 id="命令管道连接"><a href="#命令管道连接" class="headerlink" title="命令管道连接 |"></a>命令管道连接 |</h2><ul>
<li>命令管道符合为<code>|</code>,可以将两个命令进行连接，连接后第一个命令的输出结果作为第二个命令的输入信息</li>
<li>比如   <code>ls  /ect | more -10</code>  分屏显示<code>etc</code>文件夹下的<code>10</code>行数据</li>
</ul>
<h2 id="Linux文件系统结构"><a href="#Linux文件系统结构" class="headerlink" title="Linux文件系统结构"></a>Linux文件系统结构</h2><ul>
<li><code>/</code> : 根目录</li>
<li><code>/home</code>： 主文件夹，登录用户的主文件夹</li>
<li><code>/etc</code> ：操作系统配置文件的保存位置</li>
<li><code>/usr</code> : 用于添加的程序文件，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li>
<li><code>root</code> : 超级用户的目录</li>
</ul>
<h2 id="改变当前工作目录命令"><a href="#改变当前工作目录命令" class="headerlink" title="改变当前工作目录命令"></a>改变当前工作目录命令</h2><ul>
<li><code>cd  目标目录</code>   </li>
<li><code>cd</code>  没有参数的时候直接返回用户主目录</li>
<li><code>cd /etc</code> : 使用绝对路径切换当前的工作目录</li>
<li><code>cd  ..</code>  : 返回上一级</li>
<li><code>cd 目录</code> ：使用相对路径其切换，前提是当前的目录中有这个目录</li>
</ul>
<h2 id="显示当前的工作目录"><a href="#显示当前的工作目录" class="headerlink" title="显示当前的工作目录"></a>显示当前的工作目录</h2><ul>
<li><code>pwd</code></li>
</ul>
<h2 id="文件或文件夹的操作-mkdir-touch"><a href="#文件或文件夹的操作-mkdir-touch" class="headerlink" title="文件或文件夹的操作(mkdir/touch)"></a>文件或文件夹的操作(mkdir/touch)</h2><ul>
<li><code>mkdir 文件夹名称</code> 创建文件夹<ul>
<li><code>mkdir demo/file</code>  在demo文件夹下新建一个文件加file，如果这个<code>demo</code>文件夹不存在，那么将会报错</li>
</ul>
</li>
<li><p><code>mkdir -p 文件夹名称</code>  递归创建文件夹</p>
<ul>
<li><code>mkdir -p demo/file</code>  :如果demo文件夹不存在，那么会自动创建出来</li>
</ul>
</li>
<li><p><code>touch  新文件名</code>  : 创建文件  ，比如<code>touch file.txt</code></p>
</li>
<li><code>touch  已经存在的文件名或者文件夹名</code> ： 修改文件或者文件夹的创建时间，但是并不是重新创建一个，里面的内容的不会清空</li>
</ul>
<h3 id="改名或者移动-mv"><a href="#改名或者移动-mv" class="headerlink" title="改名或者移动(mv)"></a>改名或者移动(mv)</h3><ul>
<li><code>mv 参数1  参数2</code></li>
<li><code>mv  已存在的文件夹/文件    新文件夹/文件</code>  ：修改名称  比如 ：<code>mv file.txt a.txt</code></li>
<li><code>mv  已存在的文件夹/文件  目标文件夹</code>  ： 将文件或者文件夹移动到目标文件夹中<ul>
<li><code>mv file.txt /tmp/dmeo</code>  将当前文件夹的<code>file.txt</code>移动到<code>/tmp/demo</code>文件夹中</li>
<li><code>mv demo/file.txt .</code>  将 demo文件夹下的file.txt移动到当前文件夹</li>
<li><code>mv file.txt ../</code> 将当前文件file.txt 移动到上一级目录</li>
</ul>
</li>
</ul>
<h3 id="复制文件或者文件夹-cp"><a href="#复制文件或者文件夹-cp" class="headerlink" title="复制文件或者文件夹(cp)"></a>复制文件或者文件夹(cp)</h3><ul>
<li><p><code>cp 存在的文件/文件夹   新文件/新文件夹</code>  进行改名复制</p>
<ul>
<li><code>cp a.txt /tmp/file.txt</code>    将当前文件夹中的a.txt文件复制到<code>/tmp</code>文件夹中，改名为<code>file.txt</code></li>
</ul>
</li>
<li><p><code>cp 存在文件  已存在的文件夹</code> 将文件复制一份到已存在文件夹中，并且文件名和源文件的名一样</p>
<ul>
<li><code>cp a.txt /tmp</code> 将当前文件a.txt复制到<code>tmp</code>文件夹中，并且名称还是<code>a.txt</code></li>
</ul>
</li>
<li><code>cp -i ...</code>  提示是否覆盖的信息</li>
<li><code>cp -f</code> 强制覆盖，不给出提示</li>
<li><code>cp -r 存在的文件夹  目标文件夹 复制文件夹  比如：</code>cp -r file /tmp/demo<code>复制当前文件夹</code>file<code>和其中的所有内容到</code>/tmp/demo`文件夹下</li>
</ul>
<h3 id="删除文件或者文件夹-rm"><a href="#删除文件或者文件夹-rm" class="headerlink" title="删除文件或者文件夹(rm)"></a>删除文件或者文件夹(rm)</h3><ul>
<li><p><code>rm 文件名</code>    删除文件 </p>
<ul>
<li><code>rm a.txt</code>  删除当前文件夹中的<code>a.txt</code>文件</li>
<li><code>rm /tmp/demo/a.txt</code>  删除<code>/tmp/demo</code>文件夹下的<code>a.txt</code>文件</li>
</ul>
</li>
<li><p><code>rm -r  存在的文件夹</code> ： 删除文件夹及文件夹下的全部内容</p>
<ul>
<li><code>rm -r demo</code>  删除文件夹demo</li>
</ul>
</li>
<li><code>rm -f</code>  强制删除文件，不提示</li>
<li><code>rm -rf</code> :强制删除文件夹</li>
</ul>
<h2 id="远程登录服务器SSH"><a href="#远程登录服务器SSH" class="headerlink" title="远程登录服务器SSH"></a>远程登录服务器SSH</h2><ul>
<li>客户端输入：<code>ssh 用户名@服务器IP/域名</code><ul>
<li><code>ssh soft01@192.168.7.36</code></li>
</ul>
</li>
<li>第一输入需要确认证书： 选择<code>yes</code></li>
<li>输入<code>password</code> </li>
</ul>
<h2 id="SFTP传输文件"><a href="#SFTP传输文件" class="headerlink" title="SFTP传输文件"></a>SFTP传输文件</h2><ol>
<li><code>sftp 用户名@主机/IP</code></li>
<li>确认证书 ：<code>yes</code></li>
<li>输入密码 ： <code>盲敲</code></li>
<li>进入ftp，其中的提示符号变成<code>&gt;</code></li>
</ol>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><code>ls</code> 显示当前远程服务器的目录内容</li>
<li><code>lls</code>  : 显示本地目录内容</li>
<li><code>pwd</code> : 显示当前远程服务器目录的路径</li>
<li><code>lpwd</code> ：显示本地目录的路径</li>
<li><code>get 远程文件</code> :    获取远程文件,只能是压缩文件，比如<code>.tar.gz</code><ul>
<li><code>get demo.txt</code>  获取远程文件的<code>demo.txt</code></li>
</ul>
</li>
<li><code>put 本地文件</code> ：上传本地文件到远程服务器 ，只能是压缩文件，比如<code>.tar.gz</code><ul>
<li><code>push abc.txt</code> :   上传本地当前文件<code>abc.txt</code>到远程服务器</li>
</ul>
</li>
<li><code>exit</code>  :  退出</li>
</ul>
<h2 id="windows-操作Linux"><a href="#windows-操作Linux" class="headerlink" title="windows 操作Linux"></a>windows 操作Linux</h2><ul>
<li><code>pyttty</code>  开源软件</li>
</ul>
<h2 id="Linux打包命令"><a href="#Linux打包命令" class="headerlink" title="Linux打包命令"></a>Linux打包命令</h2><ul>
<li><code>tar -czvf 包文件.tar.gz  文件夹1  文件夹2 ....</code>    ：  <code>tar czvf demo.tar.gz  demo/</code>  打包当前的<code>demo</code>文件夹<ul>
<li><code>-c</code>  : <code>create</code>创建包 ，建议使用后缀 <code>.tar</code></li>
<li><code>-z</code> : 表示打包后录用<code>gzip</code>算法进行压缩,后缀需要写<code>.gz</code></li>
<li><code>-v</code> : 显示打包的过程，哪些文件被打包了</li>
<li><code>-f</code>  ： 指定打包以后包的文件名  ，放在最后，如：<code>czvf</code></li>
</ul>
</li>
</ul>
<h2 id="解压缩包的命令"><a href="#解压缩包的命令" class="headerlink" title="解压缩包的命令"></a>解压缩包的命令</h2><h3 id="后缀为-tar-gz"><a href="#后缀为-tar-gz" class="headerlink" title="后缀为 tar.gz"></a>后缀为 tar.gz</h3><ul>
<li><code>tar -xzvf 包名.tar.gz</code><ul>
<li><code>-x</code> : 释放，将包进行释放操作</li>
<li><code>-z</code> ： 先使用gzip解压缩，一般对应的后缀<code>.gz</code></li>
<li><code>-v</code> : 表示显示解包的过程</li>
<li><code>-f</code> ： 指定包的文件名</li>
</ul>
</li>
</ul>
<h3 id="后缀为-zip"><a href="#后缀为-zip" class="headerlink" title="后缀为 zip"></a>后缀为 zip</h3><ul>
<li><p>如果没有<code>unzip</code>命令，可以命令行安装即可 <code>yum -y install unzip</code></p>
</li>
<li><p><code>unzip 文件</code></p>
</li>
</ul>
<h2 id="下载命令wget"><a href="#下载命令wget" class="headerlink" title="下载命令wget"></a>下载命令wget</h2><ul>
<li>安装该命令：<code>yum -y install wget</code></li>
<li><code>wget 下载地址</code> ： 这个命令将会从互联网自动下载所需要的资源</li>
</ul>
<h2 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h2><ul>
<li>地域： 国内配置域名的时候必须备案，国外服务器无需备案</li>
<li>配置： x86服务器，1G内存  1CPU</li>
<li>镜像： 公共镜像，Centos 7.4</li>
<li>网络： 1M</li>
<li>安全组(防火墙)：开放端口 80,443,22<ul>
<li>注意： 没有开放8080，需要以后配置</li>
</ul>
</li>
<li>设置密码</li>
<li>设置服务器名</li>
</ul>
<h2 id="PATH变量的作用"><a href="#PATH变量的作用" class="headerlink" title="PATH变量的作用"></a>PATH变量的作用</h2><ul>
<li>操作系统可执行命令的搜索路径，操作系统在执行密令的时候，会在PATH变量一系列路径中逐一查找命令程序，如果找到就执行这个程序，否则将报出<code>命令没有找到</code>的错误</li>
<li><code>echo $PATH</code> : 回显<code>PATH</code>的值</li>
<li><code>export PATH=...</code>  : 在终端直接输入的PATH，只会在当前的终端不关闭的情况才会生效，如果这个终端窗口关闭了，那么就会失效<ul>
<li><code>export PATH=/usr/local/java/jdk1.8/bin:$PATH</code>,这个命令是将java的jdk的路径添加到当前PATH路径的前面，不过这个只是临时的，当终端退出，那么就会失效</li>
</ul>
</li>
<li>如果想要这个<code>PATH</code>永久起作用，那么需要在<code>/etc/profile</code>文件中添加，这个文件会在开机启动的时候就解析加载</li>
<li><strong>如果我们使用的安装包安装的话，那么默认的启动命令是只能在当前安装包的<code>bin</code>中才能执行启动命令，如果我们想要在任何位置打开终端都能启动这个软件，那么我们可以将其配置在PATH中，我们只需要在<code>/etc/profile</code>文件中添加：<code>export PATH=文件位置:$PATH</code></strong></li>
</ul>
<h2 id="使用-VIM-编辑文本文件"><a href="#使用-VIM-编辑文本文件" class="headerlink" title="使用 VIM 编辑文本文件"></a>使用 VIM 编辑文本文件</h2><ul>
<li>基于命令行的全屏幕可视化编辑器</li>
</ul>
<h3 id="安装-vim"><a href="#安装-vim" class="headerlink" title="安装 vim"></a>安装 vim</h3><ul>
<li><code>yum -y install vim</code> :安装<code>vim</code></li>
</ul>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>在命令状态下</p>
<ul>
<li><code>yy</code> ： 复制当前行到剪切板<ul>
<li><code>P</code>：复制剪切板的内容到当前行之前</li>
<li><code>p</code>： 复制剪切板的内容到当前行之后</li>
</ul>
</li>
<li><code>nyy</code> ： 复制当前行和后面的<code>n行</code>数据到剪切板<ul>
<li><code>5yy</code></li>
</ul>
</li>
<li><code>dd</code> ：删除当前行（其实是剪切），可以使用<code>P</code>或者<code>p</code>再次复制回去</li>
<li><code>ndd</code> ： 删除当前行的后面<code>n行</code>数据，实际上是剪切<ul>
<li><code>10dd</code></li>
</ul>
</li>
<li><code>?正则</code> ： 向前查找<ul>
<li><code>?System</code></li>
</ul>
</li>
<li><code>/正则</code> ：向后查找</li>
<li><p><code>n</code> 查找下一个</p>
<ul>
<li>先使用<code>?正则</code>或者<code>\正则</code>查找之后，然后按<code>n</code>将会查找下一个结果</li>
</ul>
</li>
<li><p><code>u</code> ：撤销，可撤销多次</p>
</li>
</ul>
</li>
</ul>
<h2 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h2><ul>
<li>下载jdk</li>
<li>解压缩在<code>/usr/local/java</code>中<ul>
<li><code>tar -xzvf ......</code></li>
</ul>
</li>
<li>配置环境变量<ul>
<li>先复制一个<code>/etc/profile</code> ,避免错改造成系统崩溃<ul>
<li><code>cp /etc/profile profile_1</code></li>
</ul>
</li>
<li><code>vi /etc/profile</code></li>
<li>在末尾输入</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_172       ## jdk的路径</div><div class="line">export JRE_HOME=$JAVA_HOME/jre</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</div><div class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<ul>
<li>执行<code>source /etc/profile</code></li>
<li>在终端输入<code>java -version</code>判断是否配置成功</li>
<li>重启机器</li>
</ul>
<h2 id="安装配置Tomcat"><a href="#安装配置Tomcat" class="headerlink" title="安装配置Tomcat"></a>安装配置Tomcat</h2><h3 id="第一种yum"><a href="#第一种yum" class="headerlink" title="第一种yum"></a>第一种yum</h3><ul>
<li><code>yum -y install tomcat</code></li>
<li>安装以后的安装位置在<code>/usr/share/tomcat/</code>,这个是默认安装位置</li>
</ul>
<h4 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h4><ul>
<li><code>systemctl start tomcat.service</code>  ： 启动</li>
<li><code>systemctl stop tomcat.service</code> : 关闭</li>
<li><code>systemctl restart tomcat.service</code> : 重启</li>
<li><code>systemctl enable tomcat.service</code> : 设置自动启动</li>
<li><code>systemctl disable tomcat.service</code> : 关闭自动启动</li>
</ul>
<h3 id="第二种使用原厂的包安装"><a href="#第二种使用原厂的包安装" class="headerlink" title="第二种使用原厂的包安装"></a>第二种使用原厂的包安装</h3><ul>
<li><p>下载<code>tomcat</code> ： <code>tomcat.apache.org</code></p>
</li>
<li><p>或者使用<code>wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.88/bin/apache-tomcat-7.0.88.zip</code></p>
<ul>
<li>如果没有<code>wget</code>，那么使用<code>yum -y install wget</code>即可</li>
</ul>
</li>
<li><p>解压：<code>unzip 文件名</code></p>
</li>
<li><p>将解压之后的文件夹移动到<code>/usr/local</code>下即可：<code>mv apache-tomcat-7.0.88 /usr/local/</code></p>
</li>
<li><p>设置启动脚本的执行权限：</p>
<ul>
<li><code>cd /usr/local/apache-tomcat-7.0.88/bin</code> ：进入到<code>bin</code>目录</li>
<li>添加执行权限： <code>chmod +x *.sh</code>   ：为<code>.sh</code>脚本添加执行权限</li>
</ul>
</li>
<li><p>启动和关闭<code>tomcat</code></p>
<ul>
<li>在<code>bin</code>文件夹下 输入： <code>./startup.sh</code>即可启动</li>
<li>输入<code>ps -A | grep java</code>  : 检查是否启动</li>
<li>开放防火墙 ： <code>firewall-cmd --permanent --add-port=8080/tcp</code></li>
<li>如果显示防火墙显示<code>not runing</code>，那么使用<code>service firewalld start</code>开启防火墙</li>
<li>在<code>bin</code>文件夹下输入 ：<code>./shutdown.sh</code> 即可关闭</li>
<li>最后在浏览器输入<code>http://ip:8080</code>即可访问</li>
</ul>
</li>
</ul>
<h3 id="云服务器需要开启8080端口"><a href="#云服务器需要开启8080端口" class="headerlink" title="云服务器需要开启8080端口"></a>云服务器需要开启8080端口</h3><ul>
<li>自己的服务器 —- &gt; 管理  —&gt;  本例安全组  —-&gt;  配置规则  —-  &gt;  添加安全组规则  —-&gt; 添加端口范围 <code>8080/8080</code></li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/aliyun.png" alt="设置"></li>
</ul>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ul>
<li><code>Mariadb</code>和<code>Mysql</code>是一样的，不过<code>mariadb</code>现在是开源免费的。mysql以后的版本都是收费的</li>
<li><code>yum -y install mariadb mariadb-server</code> ： 使用此命令安装即可<ul>
<li>安装了两个组件，客户端<code>mariadb</code></li>
</ul>
</li>
<li>启动： <code>systemctl start mariadb.service</code></li>
<li>关闭：<code>systemctl stop mariadb.service</code></li>
<li>重新启动： <code>systemctl restart mariadb.service</code></li>
<li>开机启动： <code>systemctl enable mariadb.service</code></li>
<li>取消开机启动：<code>systemctl disable mariadb.service</code></li>
</ul>
<h3 id="连接mariadb"><a href="#连接mariadb" class="headerlink" title="连接mariadb"></a>连接mariadb</h3><ul>
<li><code>mysql -u root</code>： 初始安装没有密码</li>
</ul>
<h3 id="设置mysql密码"><a href="#设置mysql密码" class="headerlink" title="设置mysql密码"></a>设置mysql密码</h3><ul>
<li>set password=password(“密码”);</li>
<li><code>flush privileges;</code></li>
<li>设置完成之后使用<code>mysql -u root -p</code>输入密码进入即可</li>
</ul>
<h3 id="mysql-解决中文乱码"><a href="#mysql-解决中文乱码" class="headerlink" title="mysql 解决中文乱码"></a>mysql 解决中文乱码</h3><ul>
<li><p><code>show variables like &#39;%char%&#39;;</code> 查看自己的编码是否是<code>utf8</code></p>
</li>
<li><p>在<code>/etc/my.cnf</code>添加如下代码即可</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">character-set-server=utf8 </div><div class="line">[client]</div><div class="line">default-character-set=utf8 </div><div class="line">[mysql]</div><div class="line">default-character-set=utf8</div></pre></td></tr></table></figure>
<h2 id="数据库迁移【Import】"><a href="#数据库迁移【Import】" class="headerlink" title="数据库迁移【Import】"></a>数据库迁移【Import】</h2><ul>
<li>意思就是将本地的数据库迁移到远程服务器中。不需要在远程服务器中重新创建和插入数据了</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><p><strong>导出(备份)数据库</strong></p>
<ul>
<li><code>mysqldump -u root -p密码  数据库名字 &gt; 文件名.sql</code></li>
<li>比如 :<code>mysqldump -u root -proot tedu_store&gt;tedu_store.sql;</code>，导出的<code>tedu_store.sql</code>就会在当前目录中，<strong>这个命令不需要<code>登录mysql</code>即可完成</strong></li>
</ul>
</li>
<li>将<code>tedu_store.sql</code>上传到远程服务器中<ul>
<li><code>sftp 用户名@IP</code>： 登录远程服务器的上传下载功能</li>
<li><code>put tedu_store.sql</code>:  上传</li>
</ul>
</li>
<li>在远程服务器中创建数据库<ul>
<li><code>create database tedu_store;</code></li>
</ul>
</li>
<li><strong>导入数据：</strong><ul>
<li><code>use tedu_store</code></li>
<li><code>source tedu_store.sql</code> 即可，这里需要指定路径</li>
</ul>
</li>
</ul>
<h2 id="部署项目在远程服务器上"><a href="#部署项目在远程服务器上" class="headerlink" title="部署项目在远程服务器上"></a>部署项目在远程服务器上</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><p>导出一个<code>war</code>包，比如<code>Tedu_store.war</code></p>
<ul>
<li><code>项目右击</code> — &gt; <code>Export</code>  —- &gt; <code>WAR File</code>  —-&gt;  <code>选择位置</code>   ——-&gt; <code>Finish</code></li>
<li></li>
</ul>
</li>
<li>导出的<code>Tedu_store.war</code>上传到远程服务器</li>
<li><p>放在<code>tomcat</code>中的<code>webapps</code>包下</p>
<ul>
<li>我们将<code>Tedu_store.war</code>放在webapps下，那么会自动生成一个<code>Tedu_store</code>，这个就是我们的项目</li>
</ul>
</li>
<li><p>修改数据库的连接参数</p>
<ul>
<li>第一种：在本地电脑打包的时候就修改成远程服务器的数据库的连接参数</li>
<li>第二种： 在远程服务器中修改<ul>
<li>进入到项目的<code>WEB-INF/classes</code>下，其中有一个<code>db.properties</code>文件，其中就是配置数据库的信息，我们可以使用<code>vi</code>编辑器修改</li>
</ul>
</li>
</ul>
</li>
<li>重启<code>tomcat</code>，我们使用<code>zip</code>安装方式安装的，因此需要在<code>Tomcat</code>的<code>bin</code>下执行：<ul>
<li><code>./shutdown.sh</code> 关闭</li>
<li><code>./start.sh</code>启动</li>
</ul>
</li>
<li>接下来就是访问即可<ul>
<li><code>http://ip:8080/Tedu_store/.....</code></li>
</ul>
</li>
</ul>
<h3 id="查看错误信息"><a href="#查看错误信息" class="headerlink" title="查看错误信息"></a>查看错误信息</h3><ul>
<li>进入到<code>Tomcat</code>的安装目录的<code>logs</code>目录，下面有一个<code>catalina.out</code>，这里面存储的就是项目的运行信息，我们可以在其中查找项目的错误信息</li>
</ul>
<h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><ul>
<li>将一个命令的输出目标从标准控制台(标出输出)重新定向到其他设备(一般是一个文件)</li>
<li><code>&gt;</code>: 生成一个新文件</li>
<li><code>&gt;&gt;</code>：不生成一个新文件，在文件后面追加</li>
<li>比如<code>cat file.txt&gt;demo.txt</code>, : 将显示的<code>file.txt</code>文件内容重定向到<code>deom.txt</code>文件中，如果`demo.txt不存在，那么会被新建，如果存在，那么将会覆盖其中的内容。</li>
<li><code>cat file.txt&gt;&gt;demo.txt</code> : 将显示的<code>file.txt</code>文件的内容在<code>demo.txt</code>后面追加，如果<code>demo.txt</code>不存在就新建，如果存在，那么在其内容的后面追加</li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>记录命令的执行日志<ul>
<li><code>tar -czvf  file.tar.gz  file&gt;file.log</code>  : 将这个执行语句的日志记录到<code>file.log</code>中</li>
</ul>
</li>
<li>快速生成文本文件<ul>
<li><code>echo &quot;hello World&quot; &gt;hello.txt</code></li>
</ul>
</li>
</ul>
<h2 id="文件权限-chmod"><a href="#文件权限-chmod" class="headerlink" title="文件权限  chmod"></a>文件权限  chmod</h2><ul>
<li><code>-rw-rw-r</code>   :  文件拥有者、群组、其他</li>
</ul>
<h3 id="为所有用户设置权限"><a href="#为所有用户设置权限" class="headerlink" title="为所有用户设置权限"></a>为所有用户设置权限</h3><ul>
<li><code>x</code> :执行权限，如果一个文件夹没有执行权限，那么我们使用<code>cd 文件夹名</code>是不允许进入查看内容的<ul>
<li><code>chmod +x file</code> : 为<code>file</code>文件夹添加执行权限</li>
<li><code>chmod -x file</code>: 为<code>file</code>文件夹删除执行权限</li>
</ul>
</li>
<li><code>r</code> ： 可读权限<ul>
<li><code>chmod -r file.txt</code>  : 删除<code>file.txt</code>文件的可读权限</li>
<li><code>chmod +r file.txt</code> : 添加可读权限</li>
</ul>
</li>
<li><code>w</code>: 可写权限<ul>
<li><code>chmod -w file.txt</code></li>
<li><code>chmod +w file.txt</code></li>
</ul>
</li>
</ul>
<h3 id="为不同的用户设置权限"><a href="#为不同的用户设置权限" class="headerlink" title="为不同的用户设置权限"></a>为不同的用户设置权限</h3><ul>
<li><code>chmod u+x,g-x,o-x file</code> : 表示文件拥有者添加执行权限，群组用户删除执行权限，其他用户删除执行权限</li>
<li><code>chmod g+x file</code> : 为群组添加执行权限</li>
</ul>
<h3 id="使用数字代表权限"><a href="#使用数字代表权限" class="headerlink" title="使用数字代表权限"></a>使用数字代表权限</h3><ul>
<li><code>r</code> : 4    </li>
<li><code>w</code>  : 2</li>
<li><code>x</code> : 1</li>
<li><code>rwx</code> : 4+2+1=7</li>
<li><code>rw-</code> : 4+2 =6</li>
<li><code>--x</code>  : 1</li>
<li><code>r-x</code>  : 4+1=5</li>
<li><code>chmod 664 file.txt</code> : 为文件拥有这设置<code>rw-</code>权限，为群组设置<code>rw-</code>权限，为其他用户设置<code>r--</code>权限</li>
</ul>
<h2 id="可以执行的文件"><a href="#可以执行的文件" class="headerlink" title="可以执行的文件"></a>可以执行的文件</h2><ol>
<li>文件是可执行的二进制程序或者文件是可执行的脚本程序</li>
<li>文件具有可以执行的权限</li>
</ol>
<h3 id="可执行的脚本"><a href="#可执行的脚本" class="headerlink" title="可执行的脚本"></a>可执行的脚本</h3><ul>
<li>可执行的脚本，也是称为shell脚本，是一个文本文件，文件的每一行都是可以执行的shell命令，如果有执行权限，这个文件就可以执行，执行时候批量执行文件中的每个命令，经常用于自动化运维</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Liunx使用&quot;&gt;&lt;a href=&quot;#Liunx使用&quot; class=&quot;headerlink&quot; title=&quot;Liunx使用&quot;&gt;&lt;/a&gt;Liunx使用&lt;/h1&gt;&lt;h2 id=&quot;命令管道连接&quot;&gt;&lt;a href=&quot;#命令管道连接&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://chenjiabing666.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>监听器获取spring配置文件创建的对象</title>
    <link href="http://chenjiabing666.github.io/2018/05/27/%E7%9B%91%E5%90%AC%E5%99%A8%E8%8E%B7%E5%8F%96spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>http://chenjiabing666.github.io/2018/05/27/监听器获取spring配置文件创建的对象/</id>
    <published>2018-05-27T02:18:11.000Z</published>
    <updated>2018-05-27T02:18:43.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监听器获取spring配置文件创建的对象"><a href="#监听器获取spring配置文件创建的对象" class="headerlink" title="监听器获取spring配置文件创建的对象"></a>监听器获取spring配置文件创建的对象</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>我们在使用监听器的时候，会用到spring配置文件创建的对象，那么我们不能像其他的类中直接使用<code>@Resource</code>或者<code>@AutoWired</code>自动注入对象，那么我们如何获取对象呢</li>
<li>比如我们在缓存数据的时候，就是在容器启动的时候读取数据库中的信息缓存在<code>ServletContext</code>中，那么我们肯定需要调用<code>Service</code>中的对象来获取数据库中的信息，此时我们就需要获取spring配置文件配置的<code>业务层</code>的对象</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>前提是你的spring的配置文件是使用的<code>spring</code>监听器<code>ContextLoaderListener</code>加载的，而不是一起在springMVC的前端控制器中加载，比如你在<code>web.xml</code>配置如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置spring配置问文件的路径--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    	<span class="comment">&lt;!--使用通配符指定多个配置文件，比如 spring-service.xml，spring-dao.xml--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--spring监听器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>我们先创建一个<code>ServletContext</code>上下文监听器，在其中使用<code>WebApplicationContextUtils</code>类获取<code>WebApplicationContext</code>对象，之后即可获取其中spring创建的<code>bean</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitCompontServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span>, <span class="title">ServletContextAttributeListener</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> BlogIndex blogIndex;    <span class="comment">//spring配置创建的对象</span></div><div class="line">	<span class="keyword">private</span> IBlogService blogService;   <span class="comment">//spring配置创建的对象</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">     * web容器初始化的时候就会调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent contextEvent)</span>  </span>&#123;</div><div class="line">    	ServletContext context=contextEvent.getServletContext();  <span class="comment">//获取上下文对象</span></div><div class="line">    	WebApplicationContext applicationContext=WebApplicationContextUtils.getRequiredWebApplicationContext(context);</div><div class="line">    	blogIndex=applicationContext.getBean(<span class="string">"blogIndex"</span>,BlogIndex.class);  <span class="comment">//加载BlogIndex对象</span></div><div class="line">    	blogService=applicationContext.getBean(<span class="string">"blogServiceImpl"</span>,IBlogService.class);  <span class="comment">//加载IBlogService对象</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.cnblogs.com/Joke-Jay/p/6507171.html" target="_blank" rel="external">http://www.cnblogs.com/Joke-Jay/p/6507171.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;监听器获取spring配置文件创建的对象&quot;&gt;&lt;a href=&quot;#监听器获取spring配置文件创建的对象&quot; class=&quot;headerlink&quot; title=&quot;监听器获取spring配置文件创建的对象&quot;&gt;&lt;/a&gt;监听器获取spring配置文件创建的对象&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合</title>
    <link href="http://chenjiabing666.github.io/2018/05/27/SSM%E6%95%B4%E5%90%88/"/>
    <id>http://chenjiabing666.github.io/2018/05/27/SSM整合/</id>
    <published>2018-05-27T02:16:20.000Z</published>
    <updated>2018-05-27T02:16:48.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-SpringMVC-Mybatis整合"><a href="#Spring-SpringMVC-Mybatis整合" class="headerlink" title="Spring + SpringMVC + Mybatis整合"></a>Spring + SpringMVC + Mybatis整合</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring 整合jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MySQL驱动jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP连接池 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jackson，自动转换为JSON数据 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jstl标签库 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 导入aspectj依赖 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 导入spring的aop --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加文件上传的依赖 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置数据库连接信息-—-db-properties文件"><a href="#配置数据库连接信息-—-db-properties文件" class="headerlink" title="配置数据库连接信息 — db.properties文件"></a>配置数据库连接信息 — db.properties文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/db_blog3?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=2</div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<h2 id="Mybatis和Spring整合-—-spring-dao-xml"><a href="#Mybatis和Spring整合-—-spring-dao-xml" class="headerlink" title="Mybatis和Spring整合 — spring-dao.xml"></a>Mybatis和Spring整合 — spring-dao.xml</h2><ul>
<li>读取<code>db.properties</code>文件配置<code>DBCP</code>连接池创建数据源</li>
<li>使用上面的数据源配置<code>SqlSessionFactoryBean</code></li>
<li>配置组件扫描Mybatis的接口<code>mapper</code>的包，用于创建mapper接口对象</li>
<li>配置批量扫描Mybatis的<code>XXMapper.xml</code>文件的<code>MapperScannerConfigurer</code></li>
<li>配置事务管理器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 组件扫描 用于自动创建mapper包下的所有接口的对象，否则将不能使用@Resource注解的方式注入接口对象 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.blog.mapper"</span> /&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置MapperScannerConfigurer --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 用于配置持久层接口在哪里，指定mapper的包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.tedu.blog.mapper"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 加载db.properties,其中定义了数据库的配置信息 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 用于配置数据库连接池 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 用于配置持久层映射文件在哪里,所有的xml文件，使用通配符 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mappers/*.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 注入数据源，这里使用的是上面配置好的DataSource --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 开启事务注解 ,transaction-manager指定的是上面配置的事务管理器的id--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Spring与SpringMVC不需要整合"><a href="#Spring与SpringMVC不需要整合" class="headerlink" title="Spring与SpringMVC不需要整合"></a>Spring与SpringMVC不需要整合</h2><ul>
<li>我们只需要创建一个<code>springMVC.xml</code>文件即可</li>
<li>扫描<code>controller</code>包下，组件扫描，自动创建对象</li>
<li>配置视图解析器</li>
<li>配置注解驱动</li>
<li>配置拦截器</li>
<li>配置上传文件的解析器</li>
<li>…………………</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 组件扫描 自动创建对象 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.blog.controller"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置ViewResolver视图解析器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置驱动，用于@ResponseBody的使用 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置拦截器的路径 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/blogger/*"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/blogType/*"</span> /&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置不拦截的路径 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/blogger/showLogin.do"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/blogger/login.do"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/blogger/showInfo.do"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.tedu.blog.interceptor.LoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 上传组件的解析器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">		<span class="comment">&lt;!-- 上传文件大小 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10000000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="业务层的配置文件-–-spring-service-xml"><a href="#业务层的配置文件-–-spring-service-xml" class="headerlink" title="业务层的配置文件 –  spring-service.xml"></a>业务层的配置文件 –  spring-service.xml</h2><ul>
<li>配置组件自动扫描业务层的类，自动创建对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.blog.service"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置-web-xml-文件"><a href="#配置-web-xml-文件" class="headerlink" title="配置 web.xml 文件"></a>配置 web.xml 文件</h2><ul>
<li>配置<code>POST</code>中文乱码过滤器</li>
<li>配置<code>Spring</code>的监听器<code>ContextLoaderListener</code>，用于在容器启动的时候就加载spring的配置文件</li>
<li>配置<code>SpringMVC</code>的前端控制器<code>DispatcherServlet</code>，其中指定的是springMVC的配置文件<code>springMVC.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 解决POST提交方式的中文乱码的过滤器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置SpringMVC的前端控制器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- springmvc的配置文件 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 使用ContextLoaderListener配置spring的监听器，主要是在启动的时候加载spring的配置文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 指定所有的spring配置文件，这里使用 * 通配符 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="包的结构"><a href="#包的结构" class="headerlink" title="包的结构"></a>包的结构</h2><p><img src="http://ono60m7tl.bkt.clouddn.com/SSM.png" alt="结构"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-SpringMVC-Mybatis整合&quot;&gt;&lt;a href=&quot;#Spring-SpringMVC-Mybatis整合&quot; class=&quot;headerlink&quot; title=&quot;Spring + SpringMVC + Mybatis整合&quot;&gt;&lt;/a&gt;Spri
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Lucene全文检索</title>
    <link href="http://chenjiabing666.github.io/2018/05/27/Lucene%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    <id>http://chenjiabing666.github.io/2018/05/27/Lucene全文检索/</id>
    <published>2018-05-27T02:13:57.000Z</published>
    <updated>2018-05-27T02:14:40.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lucene-全文检索"><a href="#Lucene-全文检索" class="headerlink" title="Lucene  全文检索"></a>Lucene  全文检索</h1><h2 id="Field域"><a href="#Field域" class="headerlink" title="Field域"></a>Field域</h2><ul>
<li>Field是文档中的域，包括Field名和Field值两部分，一个文档可以包括多个Field，Document只是Field的一个承载体，Field值即为要索引的内容，也是要搜索的内容。</li>
</ul>
<h3 id="是否分词"><a href="#是否分词" class="headerlink" title="是否分词"></a>是否分词</h3><ul>
<li>分词就是对文件的内容或者其他的属性进行分割形成一个一个的语汇单元，分词的过程就是将一些动词，定冠词，不定冠词等内容去掉，保留名词。比如文件的内容，商品的介绍，这些内容都是需要用户输入关键词来查询的，因此这个必须分词</li>
<li>但是对于商品的<code>id</code>，订单号，身份证号这些是不用分词的，这个是必须全局匹配才会找到相关的内容</li>
</ul>
<h3 id="是否索引"><a href="#是否索引" class="headerlink" title="是否索引"></a>是否索引</h3><ul>
<li><p>索引的目的就是为了将来作为查询条件来搜索，比如商品的名称，商品的介绍，文章的内容，这些内容需要输入关键词搜索的，我们必须进行索引，如果不索引将会不能爱按照这些内容搜索。</p>
</li>
<li><p>不索引： 商品的<code>id</code>，图片的路径等这个是不需要作为查询条件的，因此不需要索引</p>
</li>
</ul>
<h3 id="是否存储"><a href="#是否存储" class="headerlink" title="是否存储"></a>是否存储</h3><ul>
<li>将Field值存储在文档中，存储在文档中的Field才可以从<code>Document</code>中获取。 </li>
<li>比如：商品名称、订单号，凡是将来要从<code>Document</code>中获取的<code>Field</code>都要存储。</li>
<li>否：不存储Field值，不存储的Field无法通过<code>Document</code>获取 </li>
<li>比如：商品简介，内容较大不用存储。如果要向用户展示商品简介可以从系统的关系数据库中获取商品简介。</li>
<li>如果需要商品描述，则根据搜索出的商品ID去数据库中查询，然后显示出商品描述信息即可。</li>
</ul>
<p>​    </p>
<h2 id="Field的常用类型"><a href="#Field的常用类型" class="headerlink" title="Field的常用类型"></a>Field的常用类型</h2><ul>
<li><img src="http://ono60m7tl.bkt.clouddn.com/field.png" alt="类型"></li>
</ul>
<h2 id="Field改进"><a href="#Field改进" class="headerlink" title="Field改进"></a>Field改进</h2><ul>
<li>图书id<ul>
<li>是否分词：不用分词，因为不会根据商品id来搜索商品  </li>
<li>是否索引：不索引，因为不需要根据图书ID进行搜索 </li>
<li>是否存储：要存储，因为查询结果页面需要使用id这个值。</li>
</ul>
</li>
<li>图书名称：<ul>
<li>是否分词：要分词，因为要将图书的名称内容分词索引，根据关键搜索图书名称抽取的词。 </li>
<li>是否索引：要索引。 </li>
<li>是否存储：要存储。</li>
</ul>
</li>
<li>图书价格<ul>
<li>是否分词：要分词，lucene对数字型的值只要有搜索需求的都要分词和索 引，因为lucene对数字型的内容要特殊分词处理，本例子可能要根据价格范 围搜索，需要分词和索引。</li>
<li>是否索引：要索引 是否存储：要存储</li>
</ul>
</li>
<li>图书图片地址：<ul>
<li>是否分词：不分词 </li>
<li>是否索引：不索引</li>
<li>是否存储：要存储，因为只有根据图片地址才能找到对应的图片</li>
</ul>
</li>
<li>图书描述：<ul>
<li>是否分词：要分词</li>
<li>是否索引：要索引 </li>
<li>是否存储：因为图书描述内容量大，不在查询结果页面直接显示，不存储。 不存储是来不在lucene的索引文件中记录，节省lucene的索引文件空间， 如果要在详情页面显示描述，思路： 从lucene中取出图书的id，根据图书的id查询关系数据库中book表 得到描述信息。</li>
</ul>
</li>
</ul>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul>
<li>这里使用的<code>IKAnalyzer</code>这个中文分词器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加lucene支持 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-highlighter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- IK分词器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.janeluo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ikanalyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2012_u6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="添加IK中文分词器的扩展"><a href="#添加IK中文分词器的扩展" class="headerlink" title="添加IK中文分词器的扩展"></a>添加IK中文分词器的扩展</h2><ul>
<li>只需要将<a href="http://ono60m7tl.bkt.clouddn.com/Ikanalyzer.tar.gz" target="_blank" rel="external">这些文件下载</a>下载出来，然后添加到<code>src/main/resource</code>路径下即可</li>
</ul>
<h2 id="Lucene的工具类"><a href="#Lucene的工具类" class="headerlink" title="Lucene的工具类"></a>Lucene的工具类</h2><ul>
<li>其中自己封装了一些方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Lucene的工具类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneUtils</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取IndexWriter  用于创建索引库</div><div class="line">	 * <span class="doctag">@return</span> IndexWriter对象</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexWriter <span class="title">getIndexWriter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//创建索引库存放的位置</span></div><div class="line">    	Directory directory=FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"/home/chenjiabing/Documents/Lucene"</span>));</div><div class="line">    	<span class="comment">//使用IK中文分词器</span></div><div class="line">    	IKAnalyzer ikAnalyzer=<span class="keyword">new</span> IKAnalyzer(<span class="keyword">true</span>);</div><div class="line">    	</div><div class="line">    	<span class="comment">//创建IndexWriteConfig对象，其中传入的是分析器对象</span></div><div class="line">    	IndexWriterConfig indexWriterConfig=<span class="keyword">new</span> IndexWriterConfig(Version.LATEST, ikAnalyzer);</div><div class="line">    	</div><div class="line">    	<span class="comment">//创建索引，其中的变量是索引库的位置，索引配置对象</span></div><div class="line">    	IndexWriter indexWriter=<span class="keyword">new</span> IndexWriter(directory, indexWriterConfig);</div><div class="line">    	<span class="keyword">return</span> indexWriter;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取IndexSearcher，用于查询</div><div class="line">	 * <span class="doctag">@return</span> IndexSearcher对象</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IndexSearcher <span class="title">getIndexSearcher</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//创建Directory对象，指定索引库的位置</span></div><div class="line">    	Directory directory=FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"/home/chenjiabing/Documents/Lucene"</span>));</div><div class="line">    	<span class="comment">//创建IndexReader对象</span></div><div class="line">    	IndexReader indexReader=DirectoryReader.open(directory);</div><div class="line">    	<span class="comment">//创建IndexSearcher对象</span></div><div class="line">    	IndexSearcher indexSearcher=<span class="keyword">new</span> IndexSearcher(indexReader);</div><div class="line">    	<span class="keyword">return</span> indexSearcher;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据查询语句，打印结果</div><div class="line">	 * <span class="doctag">@param</span> indexSearcher  IndexSearch对象</div><div class="line">	 * <span class="doctag">@param</span> query  查询对象</div><div class="line">	 * <span class="doctag">@param</span> n  显示结果数量</div><div class="line">	 * <span class="doctag">@throws</span> IOException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSearch</span><span class="params">(IndexSearcher indexSearcher,Query query,Integer n)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		<span class="comment">//执行查询</span></div><div class="line">    	TopDocs topDocs=indexSearcher.search(query, n);</div><div class="line">    	</div><div class="line">    	<span class="comment">//返回查询结果</span></div><div class="line">    	ScoreDoc[] scoreDocs=topDocs.scoreDocs;</div><div class="line">    	</div><div class="line">    	<span class="comment">//遍历查询结果</span></div><div class="line">    	<span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</div><div class="line">			<span class="keyword">int</span> doc=scoreDoc.doc;  <span class="comment">//返回文档的编号</span></div><div class="line">			</div><div class="line">			<span class="comment">//根据编号查询文档</span></div><div class="line">			Document document=indexSearcher.doc(doc);</div><div class="line">			</div><div class="line">			<span class="comment">//输出文档中定义的域</span></div><div class="line">			System.out.println(document.get(<span class="string">"fileName"</span>));</div><div class="line">			<span class="comment">/*System.out.println(document.get("fileSize"));</span></div><div class="line">			System.out.println(document.get("fileContent"));</div><div class="line">			System.out.println(document.get("filePath"));*/</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建索引</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    	IndexWriter indexWriter=LuceneUtils.getIndexWriter();</div><div class="line">    	<span class="comment">//创建File对象,这里是需要索引的文件</span></div><div class="line">    	File file=<span class="keyword">new</span> File(<span class="string">"/home/chenjiabing/Documents/Blog"</span>);</div><div class="line">    	</div><div class="line">    	<span class="comment">//获取文件夹下的所有文件</span></div><div class="line">    	File[] files=file.listFiles();</div><div class="line">    	</div><div class="line">    	<span class="comment">//遍历所有的文件，取出相关 的内容</span></div><div class="line">    	<span class="keyword">for</span> (File f : files) &#123;</div><div class="line">    		Document document=<span class="keyword">new</span> Document();  <span class="comment">//创建文档对象</span></div><div class="line">    		</div><div class="line">    		<span class="comment">//获取文件名</span></div><div class="line">			String fileName=f.getName();</div><div class="line">			<span class="comment">//创建域  文件名  分词，索引 存储</span></div><div class="line">			Field fieldName=<span class="keyword">new</span>  TextField(<span class="string">"fileName"</span>, fileName, Store.YES);</div><div class="line">			</div><div class="line">			<span class="comment">//获取文件大小</span></div><div class="line">			Long fileSize=FileUtils.sizeOf(f);</div><div class="line">			<span class="comment">//创建文件大小的域，分词，索引，存储</span></div><div class="line">			Field fieldSize=<span class="keyword">new</span> LongField(<span class="string">"fileSize"</span>, fileSize, Store.YES);</div><div class="line">			</div><div class="line">			<span class="comment">//获取文件路径</span></div><div class="line">			String filePath=f.getPath();</div><div class="line">			<span class="comment">//创建文件路径的域 不分词，不索引 但是必须存储，用来找到指定的文件</span></div><div class="line">			Field fieldPath=<span class="keyword">new</span> StoredField(<span class="string">"filePath"</span>, filePath);</div><div class="line">			</div><div class="line">			<span class="comment">//获取文件内容</span></div><div class="line">			String fileContent=FileUtils.readFileToString(f);</div><div class="line">			</div><div class="line">			<span class="comment">//创建文件内容的域，分词，索引，存储</span></div><div class="line">			Field fieldContent=<span class="keyword">new</span> TextField(<span class="string">"fileContent"</span>, fileContent,Store.YES);</div><div class="line">			<span class="comment">//将分出的这些域添加到文档中</span></div><div class="line">			document.add(fieldContent);</div><div class="line">			document.add(fieldName);</div><div class="line">			document.add(fieldPath);</div><div class="line">			document.add(fieldSize);</div><div class="line">			</div><div class="line">			<span class="comment">//将文档写入索引库</span></div><div class="line">			indexWriter.addDocument(document);</div><div class="line">		&#125;</div><div class="line">    	<span class="comment">//关闭IndexWriter对象</span></div><div class="line">    	indexWriter.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="Query-搜索"><a href="#Query-搜索" class="headerlink" title="Query 搜索"></a>Query 搜索</h2><h3 id="TermQuery"><a href="#TermQuery" class="headerlink" title="TermQuery"></a>TermQuery</h3><ul>
<li>这个是精确搜索</li>
<li><code>TermQuery</code>项查询，TermQuery<code>不使用分析器</code>，搜索关键词作为整体来匹配Field域中的词进行查询，比如订单号、分类ID号等。<ul>
<li>这个查询的方式不会通过分词器进行分词查询，而是整个内容匹配。比如其中的查询条件为文件的名称：<code>springmvc拦截器</code>，那么只有当名称为<code>...springmvc拦截器.....</code>这样整个词语连接在一起的时候才会查询到</li>
</ul>
</li>
<li><code>`TermQuery(new Term(&quot;域名&quot;,&quot;搜索的词语&quot;))</code> : 这里的域名是创建Field的时候指定的：<code>new Field(&quot;域名&quot;,值)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTermQuerySearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">  	<span class="comment">//获取IndexSearcher</span></div><div class="line">  	IndexSearcher indexSearcher=LuceneUtils.getIndexSearcher();</div><div class="line">  	<span class="comment">//创建一个TermQuery对象，指定查询的域和需要查询的词</span></div><div class="line">  	TermQuery query=<span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"fileName"</span>,<span class="string">"springmvc拦截器"</span>));</div><div class="line">  	System.out.println(query);</div><div class="line">  	<span class="comment">//打印查询结果</span></div><div class="line">  	LuceneUtils.doSearch(indexSearcher, query, <span class="number">10</span>);</div><div class="line">  	<span class="comment">//关闭IndexReader</span></div><div class="line">  	indexSearcher.getIndexReader().close();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="NumericRangeQuery"><a href="#NumericRangeQuery" class="headerlink" title="NumericRangeQuery"></a>NumericRangeQuery</h3><ul>
<li>指定数字范围查询.<ul>
<li>适合查询价格等数字类型的</li>
</ul>
</li>
<li>其中有许多创建查询范围的静态方法，适合多种数据类型的查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNumericRangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"> 	IndexSearcher indexSearcher=LuceneUtils.getIndexSearcher();</div><div class="line"> 	<span class="comment">/**</span></div><div class="line"> 	 * 这里是查询文件大小的域：fileSize</div><div class="line"> 	 * 第一个参数： 域名</div><div class="line"> 	 * 第二个参数：最小值</div><div class="line"> 	 * 第三个参数： 最大值</div><div class="line"> 	 * 第四个参数： 是否包含最小值</div><div class="line"> 	 * 第五个参数： 是否包含最大值</div><div class="line"> 	 */</div><div class="line"> 	Query query=NumericRangeQuery.newLongRange(<span class="string">"fileSize"</span>, <span class="number">1000L</span>, <span class="number">2000L</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line"> 	<span class="comment">//输出查询条件：fileSize:[1000 TO 2000]</span></div><div class="line"> 	System.out.println(query);</div><div class="line"> 	LuceneUtils.doSearch(indexSearcher, query, <span class="number">10</span>);</div><div class="line"> 	<span class="comment">//关闭IndexReader</span></div><div class="line"> 	indexSearcher.getIndexReader().close();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="BooleanQuery"><a href="#BooleanQuery" class="headerlink" title="BooleanQuery"></a>BooleanQuery</h3><ul>
<li><p>BooleanQuery，布尔查询，实现组合条件查询。</p>
</li>
<li><p><code>Occur.MUST</code> : 当前的查询条件必须满足</p>
</li>
<li><code>Occur.SHOULD</code> ： 当前的查询条件可满足可不满足，相当于<code>or</code></li>
<li><code>MUST_NOT</code>：查询条件不能满足，相当于<code>NOT</code>非+</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBooleanQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">   	IndexSearcher indexSearcher=LuceneUtils.getIndexSearcher();</div><div class="line">   	</div><div class="line">   	<span class="comment">//第一个查询条件 根据fileName域查询</span></div><div class="line">   	Query query1=<span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"fileName"</span>, <span class="string">"springmvc"</span>));</div><div class="line">   	<span class="comment">//第二个查询条件，根据fileSize查询</span></div><div class="line">   	Query query2=NumericRangeQuery.newLongRange(<span class="string">"fileSize"</span>, <span class="number">1000L</span>, <span class="number">2000L</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">   	</div><div class="line">   	<span class="comment">//创建BooleanQuery</span></div><div class="line">   	BooleanQuery query=<span class="keyword">new</span> BooleanQuery();</div><div class="line">   	</div><div class="line">   	<span class="comment">//添加查询条件，这个条件是必须满足的 ：Occur.MUST</span></div><div class="line">   	query.add(query1,Occur.MUST);</div><div class="line">   	<span class="comment">//添加第二个查询条件，这个条件可满足可不满足，相当于or</span></div><div class="line">   	query.add(query2,Occur.SHOULD);</div><div class="line">   	System.out.println(query);</div><div class="line">   	<span class="comment">//执行查询</span></div><div class="line">   	LuceneUtils.doSearch(indexSearcher, query, <span class="number">10</span>);</div><div class="line">   	</div><div class="line">   	indexSearcher.getIndexReader().close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="MatchAllDocsQuery"><a href="#MatchAllDocsQuery" class="headerlink" title="MatchAllDocsQuery"></a>MatchAllDocsQuery</h3><ul>
<li>查询所有</li>
<li>返回的是索引库中所有的文件信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询所有</span></div><div class="line">   <span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMatchAllDoc</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">   	IndexSearcher indexSearcher=LuceneUtils.getIndexSearcher();</div><div class="line">   	Query query=<span class="keyword">new</span> MatchAllDocsQuery();</div><div class="line">   	System.out.println(query);</div><div class="line">   	LuceneUtils.doSearch(indexSearcher, query, <span class="number">10</span>);</div><div class="line">   	indexSearcher.getIndexReader().close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="QueryParser-常用"><a href="#QueryParser-常用" class="headerlink" title="QueryParser [常用]"></a>QueryParser [常用]</h3><ul>
<li>通过<code>QueryParser</code>也可以创建Query，QueryParser提供一个<code>Parse</code>方法，此方法可以直接根据查询语法来查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryParser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">   	IndexSearcher indexSearcher=LuceneUtils.getIndexSearcher();</div><div class="line">   	<span class="comment">/**</span></div><div class="line">   	 * 第一个参数：指定了默认的查询的域名</div><div class="line">   	 * 第二个参数： 指定了分词器</div><div class="line">   	 */</div><div class="line">   	QueryParser parser=<span class="keyword">new</span> QueryParser(<span class="string">"fileName"</span>,<span class="keyword">new</span> IKAnalyzer());</div><div class="line">   	<span class="comment">/**</span></div><div class="line">   	 * 其中的字符串的形式为： *:*</div><div class="line">   	 * 查询所有： *:*</div><div class="line">   	 * 根据默认域名查询直接写一个查询内容即可： "springmvc"</div><div class="line">   	 * 根据指定域名查询： "fileContent:springmvc"</div><div class="line">   	 */</div><div class="line">   	Query query=parser.parse(<span class="string">"fileContent:拦截器"</span>);</div><div class="line">   	System.out.println(query);</div><div class="line">   	LuceneUtils.doSearch(indexSearcher, query, <span class="number">50</span>);</div><div class="line">   	indexSearcher.getIndexReader().close();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="MultiFieldQueryParser"><a href="#MultiFieldQueryParser" class="headerlink" title="MultiFieldQueryParser"></a>MultiFieldQueryParser</h3><ul>
<li>通过MultiFieldQueryParser对多个域查询。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMulitFiledQueryParser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">  	IndexSearcher indexSearcher=LuceneUtils.getIndexSearcher();</div><div class="line">  	<span class="comment">//指定默认查询的域名</span></div><div class="line">  	String[] fields=&#123;<span class="string">"fileName"</span>,<span class="string">"fileContent"</span>&#125;;</div><div class="line">  	</div><div class="line">  	<span class="comment">/**</span></div><div class="line">  	 * 创建对象</div><div class="line">  	 * 第一个参数： 指定默认域名的数组</div><div class="line">  	 * 第二参数： 指定分词器，这里使用中文分词器</div><div class="line">  	 */</div><div class="line">  	MultiFieldQueryParser parser=<span class="keyword">new</span> MultiFieldQueryParser(fields, <span class="keyword">new</span> IKAnalyzer());</div><div class="line">  	<span class="comment">//这里没有指定域名，因此使用上面指定的两个默认的域名进行查询，这两个默认域名之间是or关系，只要满足就查询返回</span></div><div class="line">  	<span class="comment">//Query query=parser.parse("springmvc");</span></div><div class="line">  	</div><div class="line">  	<span class="comment">//指定filePath域名中搜索</span></div><div class="line">  	Query query=parser.parse(<span class="string">"filePath:/home/chenjiabing"</span>);</div><div class="line">  	System.out.println(query);</div><div class="line">  	LuceneUtils.doSearch(indexSearcher, query, <span class="number">50</span>);</div><div class="line">  	indexSearcher.getIndexReader().close();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h2><ul>
<li>每个document代表一个索引，维护索引其实就是对<code>document</code>的增删改查</li>
</ul>
<h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><ul>
<li>如果数据库系统做了变更，那么我们需要添加索引，那么此时就需要添加索引</li>
<li><code>indexWriter.addDocument（doc)</code></li>
<li>这个就像是创建索引库的时候，其实就是在添加索引</li>
</ul>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><h4 id="指定条件删除"><a href="#指定条件删除" class="headerlink" title="指定条件删除"></a>指定条件删除</h4><ul>
<li>根据<code>Term</code>项删除索引，满足条件的将全部删除。</li>
<li>Term是索引域中最小的单位。根据条件删除时，建议根据唯一键来进行删除。在solr中就是根据<code>ID</code>来进行删除和修改操作的。</li>
<li><code>writer.deleteDocuments(new Term(&quot;域名&quot;,&quot;值&quot;));</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 创建分词器，标准分词器</span></div><div class="line">    Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();</div><div class="line"></div><div class="line">    <span class="comment">// 创建IndexWriter</span></div><div class="line">    IndexWriterConfig cfg = <span class="keyword">new</span> IndexWriterConfig(Version.LUCENE_4_10_3,</div><div class="line">            analyzer);</div><div class="line">    Directory directory = FSDirectory</div><div class="line">            .open(<span class="keyword">new</span> File(<span class="string">"E:\\11-index\\hcx\\"</span>));</div><div class="line">    <span class="comment">// 创建IndexWriter</span></div><div class="line">    IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, cfg);</div><div class="line"></div><div class="line">    <span class="comment">// Terms</span></div><div class="line">    writer.deleteDocuments(<span class="keyword">new</span> Term(<span class="string">"id"</span>, <span class="string">"1"</span>));</div><div class="line"></div><div class="line">    writer.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="删除全部"><a href="#删除全部" class="headerlink" title="删除全部"></a>删除全部</h4><ul>
<li>将索引目录的索引信息全部删除，直接彻底删除，无法恢复。慎用！</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除索引</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 1、指定索引库目录</span></div><div class="line">    Directory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"E:\\11-index\\0720"</span>));</div><div class="line">    <span class="comment">// 2、创建IndexWriterConfig</span></div><div class="line">    IndexWriterConfig cfg = <span class="keyword">new</span> IndexWriterConfig(Version.LATEST,</div><div class="line">            <span class="keyword">new</span> StandardAnalyzer());</div><div class="line">    <span class="comment">// 3、 创建IndexWriter</span></div><div class="line">    IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, cfg);</div><div class="line">    <span class="comment">// 4、通过IndexWriter来删除索引</span></div><div class="line">    <span class="comment">// a)、删除全部索引</span></div><div class="line">    writer.deleteAll();</div><div class="line">    <span class="comment">// 5、关闭IndexWriter</span></div><div class="line">    writer.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><ul>
<li>更新索引是先删除再添加，建议对更新需求采用此方法并且要保证对已存在的索引执行更新，可以先查询出来，确定更新记录存在执行更新操作。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 创建分词器，标准分词器</span></div><div class="line">    Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line"></div><div class="line">    <span class="comment">// 创建IndexWriter</span></div><div class="line">    IndexWriterConfig cfg = <span class="keyword">new</span> IndexWriterConfig(Version.LUCENE_4_10_3,</div><div class="line">            analyzer);</div><div class="line"></div><div class="line">    Directory directory = FSDirectory</div><div class="line">            .open(<span class="keyword">new</span> File(<span class="string">"E:\\11-index\\hcx\\"</span>));</div><div class="line">    <span class="comment">// 创建IndexWriter</span></div><div class="line">    IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, cfg);</div><div class="line"></div><div class="line">    <span class="comment">// 第一个参数：指定查询条件</span></div><div class="line">    <span class="comment">// 第二个参数：修改之后的对象</span></div><div class="line">    <span class="comment">// 修改时如果根据查询条件，可以查询出结果，则将以前的删掉，然后覆盖新的Document对象，如果没有查询出结果，则新增一个Document</span></div><div class="line">    <span class="comment">// 修改流程即：先查询，再删除，在添加</span></div><div class="line">    Document doc = <span class="keyword">new</span> Document();</div><div class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"name"</span>, <span class="string">"lisi"</span>, Store.YES));</div><div class="line">    writer.updateDocument(<span class="keyword">new</span> Term(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>), doc);</div><div class="line"></div><div class="line">    writer.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lucene-全文检索&quot;&gt;&lt;a href=&quot;#Lucene-全文检索&quot; class=&quot;headerlink&quot; title=&quot;Lucene  全文检索&quot;&gt;&lt;/a&gt;Lucene  全文检索&lt;/h1&gt;&lt;h2 id=&quot;Field域&quot;&gt;&lt;a href=&quot;#Field域&quot; c
    
    </summary>
    
      <category term="Lucene" scheme="http://chenjiabing666.github.io/categories/Lucene/"/>
    
    
      <category term="Lucene" scheme="http://chenjiabing666.github.io/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>购物车模块</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/购物车模块/</id>
    <published>2018-05-21T10:27:35.000Z</published>
    <updated>2018-05-22T07:22:50.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><ul>
<li>创建购物车的表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_cart(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,　　//主键</div><div class="line">                   	goods_id <span class="built_in">varchar</span>(<span class="number">200</span>),　　　//商品的ｉｄ</div><div class="line">                    uid <span class="built_in">int</span>,　　				//用户的<span class="keyword">id</span></div><div class="line">                    <span class="keyword">num</span> <span class="built_in">int</span>, 				//商品的数量</div><div class="line">                    created_user <span class="built_in">varchar</span>(<span class="number">50</span>),  </div><div class="line">                    created_time datetime,</div><div class="line">                    modified_user <span class="built_in">varchar</span>(<span class="number">50</span>),</div><div class="line">                    modified_time datetime</div><div class="line">                   )<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</div></pre></td></tr></table></figure>
<h2 id="显示购物车"><a href="#显示购物车" class="headerlink" title="显示购物车"></a>显示购物车</h2><h3 id="定义值对象-XXXVo"><a href="#定义值对象-XXXVo" class="headerlink" title="定义值对象(XXXVo)"></a>定义值对象(XXXVo)</h3><ul>
<li>当我们需要查询多张表的数据的时候，我们此时仅仅使用一个实体类来接收肯定是不行的，我们需要定义一个值对象来接收查询的多张表数据</li>
<li>实现多表连接查询的结果接收</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 购物车的值对象</div><div class="line"> * 用于接收多表连接查询的结果</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8904622535687816912L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;    <span class="comment">//主键 购物车表中的主键</span></div><div class="line">	<span class="keyword">private</span> String goodsId;  <span class="comment">//商品的id</span></div><div class="line">	<span class="keyword">private</span> Integer uid;  <span class="comment">//用户id</span></div><div class="line">	<span class="keyword">private</span> String image;  <span class="comment">//图片地址</span></div><div class="line">	<span class="keyword">private</span> String title;  <span class="comment">//商品标题</span></div><div class="line">	<span class="keyword">private</span> Integer price; <span class="comment">//商品价格</span></div><div class="line">	<span class="keyword">private</span> Integer num;  <span class="comment">//数量</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGoodsId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsId</span><span class="params">(String goodsId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.goodsId = goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.uid = uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.title = title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CartVo [id="</span> + id + <span class="string">", goodsId="</span> + goodsId + <span class="string">", uid="</span> + uid</div><div class="line">				+ <span class="string">", image="</span> + image + <span class="string">", title="</span> + title + <span class="string">", price="</span> + price</div><div class="line">				+ <span class="string">", num="</span> + num + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><h4 id="CartMapper-java"><a href="#CartMapper-java" class="headerlink" title="CartMapper.java"></a><code>CartMapper.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据uid查询购物车中的所有商品</div><div class="line"> * <span class="doctag">@param</span> uid  用户id</div><div class="line"> * <span class="doctag">@return</span>   查询的结果</div><div class="line"> */</div><div class="line"><span class="function">List&lt;CartVo&gt; <span class="title">selectCartByUid</span><span class="params">(Integer uid)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="CartMapper-xml"><a href="#CartMapper-xml" class="headerlink" title="CartMapper.xml"></a><code>CartMapper.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">		List&lt;CartVo&gt; selectCartByUid(Integer uid);</div><div class="line">	 --&gt;</div><div class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCartByUid"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.CartVo"</span>&gt;</span></div><div class="line">	 		select </div><div class="line">	 		c.id as id,</div><div class="line">	 		c.uid as uid,</div><div class="line">	 		goods_id as goodsId,</div><div class="line">	 		image,</div><div class="line">	 		title,</div><div class="line">	 		c.num as num,</div><div class="line">	 		price</div><div class="line">	 		from t_cart c,t_goods g</div><div class="line">	 		where c.uid=#&#123;uid&#125; and c.goods_id=g.id</div><div class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="批量删除购物车中的商品"><a href="#批量删除购物车中的商品" class="headerlink" title="批量删除购物车中的商品"></a>批量删除购物车中的商品</h2><h3 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h3><ul>
<li>根据传入的id批量删除商品，用sql语句如下：<code>delete from t_cart where id in (1,2,3,4,4)</code>,因此参数应该是一个数组</li>
</ul>
<h3 id="接口中定义方法"><a href="#接口中定义方法" class="headerlink" title="接口中定义方法"></a>接口中定义方法</h3><ul>
<li>数组必须使用<code>@Param()</code>来指定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据id删除购物车中的商品</div><div class="line"> * <span class="doctag">@param</span> ids</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCartById</span><span class="params">(@Param(<span class="string">"ids"</span>)</span>Integer[] ids)</span>;</div></pre></td></tr></table></figure>
<h3 id="配置文件中配置"><a href="#配置文件中配置" class="headerlink" title="配置文件中配置"></a>配置文件中配置</h3><ul>
<li>使用<code>&lt;forEach&gt;</code>遍历数组中的元素</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"> 	void deleteCartById(@Param("ids")Integer[] ids);</div><div class="line"> 	批量删除</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCartById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">  		delete from t_cart </div><div class="line">  		where</div><div class="line">  		id in</div><div class="line">  		<span class="comment">&lt;!-- </span></div><div class="line">  			遍历数组ids</div><div class="line">  			collection:需要遍历的数组</div><div class="line">  			item: 数组中的每一个值</div><div class="line">  			open ： 开始的内容</div><div class="line">  			close: 结束的内容</div><div class="line">  			separator ：每个元素的分割符</div><div class="line">  			最后拼接的就是  (id,id,id,id,id)</div><div class="line">  		 --&gt;</div><div class="line">  		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">  			#&#123;id&#125;</div><div class="line">  		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="控制器层"><a href="#控制器层" class="headerlink" title="控制器层"></a>控制器层</h3><ul>
<li>使用一个数组接收传递过来的<code>id</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 批量删除商品</div><div class="line"> * <span class="doctag">@param</span> Itemids  数组，其中全是id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/moveCartBatch.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">moveCartBatch</span><span class="params">(Integer[] Itemids)</span></span>&#123;</div><div class="line">	System.out.println(Itemids);</div><div class="line">	cartService.moveCartById(Itemids);</div><div class="line">	<span class="keyword">return</span> <span class="string">"redirect:../cart/showCart.do"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MySQL存储过程"><a href="#MySQL存储过程" class="headerlink" title="MySQL存储过程"></a>MySQL存储过程</h2><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delimiter $$</div><div class="line">	<span class="keyword">create</span> <span class="keyword">procedure</span> deleteCart(pid <span class="built_in">int</span>)</div><div class="line">	<span class="keyword">begin</span></div><div class="line">		<span class="keyword">delete</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> <span class="keyword">id</span>=pid;</div><div class="line">	<span class="keyword">end</span> $$</div></pre></td></tr></table></figure>
<h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名称</div><div class="line">比如： <span class="keyword">drop</span> <span class="keyword">procedure</span> deleteCart;</div></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">call</span> deleteCart(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<h2 id="使用存储过程删除一行数据"><a href="#使用存储过程删除一行数据" class="headerlink" title="使用存储过程删除一行数据"></a>使用存储过程删除一行数据</h2><ul>
<li>在<code>CartMapper.java</code>中定义方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 调用存储过程 deleteCart(pid int)删除数据</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteCartByIdProcdure</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>CartMapper.xml</code>中定义节点</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	  	void deleteCartByIdProcdure(Integer id);</div><div class="line">	  	使用存储过程删除</div><div class="line">	   --&gt;</div><div class="line">	   </div><div class="line">	   	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCartByIdProcdure"</span>&gt;</span></div><div class="line">	   		&#123;call deleteCart(#&#123;id&#125;)&#125;</div><div class="line">	   	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<p>##　修改购物车的数量</p>
<h3 id="持久层-2"><a href="#持久层-2" class="headerlink" title="持久层"></a>持久层</h3><h4 id="创建存储过程-1"><a href="#创建存储过程-1" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delimiter $$</div><div class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> updateNum(pid <span class="built_in">int</span>,pnum <span class="built_in">int</span>)</div><div class="line"><span class="keyword">begin</span></div><div class="line">	<span class="keyword">update</span> t_cart <span class="keyword">set</span> <span class="keyword">num</span>=pnum <span class="keyword">where</span> <span class="keyword">id</span>=pid;</div><div class="line"><span class="keyword">end</span> $$</div></pre></td></tr></table></figure>
<h4 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h4><h4 id="写配置文件"><a href="#写配置文件" class="headerlink" title="写配置文件"></a>写配置文件</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;购物车模块&quot;&gt;&lt;a href=&quot;#购物车模块&quot; class=&quot;headerlink&quot; title=&quot;购物车模块&quot;&gt;&lt;/a&gt;购物车模块&lt;/h1&gt;&lt;h2 id=&quot;建表&quot;&gt;&lt;a href=&quot;#建表&quot; class=&quot;headerlink&quot; title=&quot;建表&quot;&gt;&lt;/a&gt;建
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>用户管理模块之个人信息修改</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E4%B9%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E4%BF%AE%E6%94%B9/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/用户管理模块之个人信息修改/</id>
    <published>2018-05-21T10:26:45.000Z</published>
    <updated>2018-05-21T10:27:05.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理模块之个人信息修改"><a href="#用户管理模块之个人信息修改" class="headerlink" title="用户管理模块之个人信息修改"></a>用户管理模块之个人信息修改</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol>
<li>修改用户名</li>
<li>修改性别</li>
<li>修改邮箱</li>
<li>修改密码</li>
<li>修改头像</li>
</ol>
<h2 id="在UserMapper中定义方法和UserMapper-xml中定义"><a href="#在UserMapper中定义方法和UserMapper-xml中定义" class="headerlink" title="在UserMapper中定义方法和UserMapper.xml中定义"></a>在<code>UserMapper</code>中定义方法和<code>UserMapper.xml</code>中定义</h2><h3 id="定义接口方法"><a href="#定义接口方法" class="headerlink" title="定义接口方法"></a>定义接口方法</h3><ul>
<li>定义接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新用户信息</div><div class="line"> * <span class="doctag">@param</span> user  User对象</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="定义update节点"><a href="#定义update节点" class="headerlink" title="定义update节点"></a>定义<code>update</code>节点</h3><ul>
<li>使用动态<code>sql</code>定义一个通用的修改方法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">  	void update(User user);</div><div class="line">  	修改用户信息</div><div class="line">   --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line">  	update t_user set</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">  		username=#&#123;username&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">  		password=#&#123;password&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  		</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></div><div class="line">  		email=#&#123;email&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone!=null"</span>&gt;</span></div><div class="line">  		phone=#&#123;phone&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"image!=null"</span>&gt;</span></div><div class="line">  		image=#&#123;image&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender!=null"</span>&gt;</span></div><div class="line">  		gender=#&#123;gender&#125;,</div><div class="line">  	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  	</div><div class="line">  	modified_user=#&#123;modifiedUser&#125;,</div><div class="line">  	modified_time=#&#123;modifiedTime&#125;</div><div class="line">where id=#&#123;id&#125;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testupdate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-dao.xml"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper = ac.getBean(<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line"></div><div class="line">	User user=<span class="keyword">new</span> User();</div><div class="line">	user.setId(<span class="number">5</span>);;</div><div class="line">	user.setUsername(<span class="string">"chenjiabing666"</span>);</div><div class="line">	user.setPassword(<span class="string">"chenjiabing"</span>);</div><div class="line">	user.setGender(<span class="number">0</span>);</div><div class="line">	user.setModifiedUser(<span class="string">"陈加兵"</span>);</div><div class="line">	user.setModifiedTime(<span class="keyword">new</span> Date());</div><div class="line">	userMapper.update(user);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在IUserService接口中定义方法，在UserServiceImpl中定义实现方法"><a href="#在IUserService接口中定义方法，在UserServiceImpl中定义实现方法" class="headerlink" title="在IUserService接口中定义方法，在UserServiceImpl中定义实现方法"></a>在<code>IUserService</code>接口中定义方法，在<code>UserServiceImpl</code>中定义实现方法</h2><h3 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h3><h4 id="修改用户名，邮箱，电话，性别"><a href="#修改用户名，邮箱，电话，性别" class="headerlink" title="修改用户名，邮箱，电话，性别"></a>修改用户名，邮箱，电话，性别</h4><ol>
<li>根据当前登录的用户<code>id</code>查询查询用户信息并且返回对象<code>u1</code>,判断此时的<code>u1</code>是否为<code>null</code>，如果<code>为null</code>表示当前正在登录的用户已经从数据库删除了，那么此次修改没有意义，抛出用户不存在的异常，如果<code>不为null</code>，表示此次的用户仍然存在，那么    这个<code>id</code>是可用的，设置在<code>user</code>对象中，便于后面执行<code>update(User user)</code>方法调用</li>
<li>如果<code>u1不为null</code>，根据用户输入的用户名查询用户信息，返回<code>u2</code>，如果这个<code>u2不为null</code>并且其中的用户名和当前正在登录的用户名不相同，那么说明这个用户名已经在数据库中存在了，抛出用户名已经存在的异常，反之说明这个修改过后的用户名是可用的，因此设置在<code>user</code>对象中，便于后面的修改调用</li>
<li>如果前面的内容都能正常进行，那么此时就可以更新了</li>
</ol>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ol>
<li>根据<code>id</code>查询用户信息，返回<code>user</code></li>
<li>如果<code>user=null</code>,抛出用户不存在的异常</li>
<li>如果<code>user！=null</code>，比较<code>user中的密码</code>和<code>用户输入的旧密码oldPassword</code>是否相同</li>
<li>如果<code>密码不相同</code>，抛出密码不匹配的异常</li>
<li>如果<code>密码相同</code>，表示用户输入的旧密码是正确的，那么更新密码即可 </li>
</ol>
<h3 id="定义接口方法-1"><a href="#定义接口方法-1" class="headerlink" title="定义接口方法"></a>定义接口方法</h3><ul>
<li>在<code>IUserService</code>中定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改用户信息，不包括修改密码</div><div class="line">	 * <span class="doctag">@param</span> id  当前正在登录的用户id</div><div class="line">	 * <span class="doctag">@param</span> username 用户修改的用户名</div><div class="line">	 * <span class="doctag">@param</span> gender  用户修改的性别</div><div class="line">	 * <span class="doctag">@param</span> email   用户修改的邮箱</div><div class="line">	 * <span class="doctag">@param</span> phone  用户修改的电话</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException   用户名不存在的异常</div><div class="line">	 * <span class="doctag">@throws</span> UserNameAlreadyExistException  用户名已经存在的异常</div><div class="line">	 */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Integer id,String username,Integer gender,String email,String phone)</span> <span class="keyword">throws</span> UserNotFoundException, UserNameAlreadyExistException</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改密码 </div><div class="line">	 * <span class="doctag">@param</span> id  正在登录的用户id</div><div class="line">	 * <span class="doctag">@param</span> oldPassword  旧密码</div><div class="line">	 * <span class="doctag">@param</span> newPassword  新密码</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException 当前登录的用户不存在</div><div class="line">	 * <span class="doctag">@throws</span> PassWordNotMatchException   //密码不匹配</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(Integer id,String oldPassword,String newPassword)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException</span>;</div></pre></td></tr></table></figure>
<h3 id="定义实现方法"><a href="#定义实现方法" class="headerlink" title="定义实现方法"></a>定义实现方法</h3><ul>
<li>在<code>UserServiceImpl</code>中定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 1. 根据id查询用户，返回user对象,确认当前登录的用户是否存在</div><div class="line"> * 2. 如果user=null,抛出用户不存在的异常</div><div class="line"> * 3. 如果user！=null,表示用户存在</div><div class="line"> * 4. 判断用户修改的用户名是否已经存在</div><div class="line"> * 5. 如果修改的用户名已经存在并且不是当前用户名的前提下，那么抛出用户名已经存在的异常，</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Integer id, String username, Integer gender,</span></span></div><div class="line">		String email, String phone) <span class="keyword">throws</span> UserNotFoundException, UserNameAlreadyExistException &#123;</div><div class="line">	User user=<span class="keyword">new</span> User();  <span class="comment">//封装修改的内容</span></div><div class="line">	</div><div class="line">	User u1=userMapper.seletUserById(id);  <span class="comment">//根据id查询用户信息，返回user对象</span></div><div class="line">	</div><div class="line">	<span class="comment">//如果此时登录的用户不存在，说明当前已经登录的用户被人删除了</span></div><div class="line">	<span class="keyword">if</span> (u1==<span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"你当前登录的用户名已经被删除"</span>);  <span class="comment">//抛出用户不存在的异常，已经从数据库中删除了</span></div><div class="line">	&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果当前登录的用户仍然存在数据库中</span></div><div class="line">		user.setId(id);  <span class="comment">//此时的用户id是可用的，因此存入user对象</span></div><div class="line">		User u2=userMapper.selectUserByUserName(username);  <span class="comment">//根据用户修改的用户名查询数据库返回user对象</span></div><div class="line">		<span class="comment">//如果此时的用户名已经在数据库中存在了，并且不是当前登录的用户名</span></div><div class="line">		<span class="keyword">if</span> (u2!=<span class="keyword">null</span>&amp;&amp;!u2.getUsername().equals(u1.getUsername())) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNameAlreadyExistException(<span class="string">"你输入的用户名已经存在"</span>);  <span class="comment">//抛出用户名已经存在的异常</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果修改过后的用户名在数据库中不存在</span></div><div class="line">			user.setUsername(username);  <span class="comment">//说明此时的用户名可用，因此存入user对象中，便于后面的更新</span></div><div class="line">			user.setEmail(email);   <span class="comment">//设置邮箱</span></div><div class="line">			user.setPhone(phone);   <span class="comment">//设置电话号码</span></div><div class="line">			user.setGender(gender);  <span class="comment">//设置性别</span></div><div class="line">			user.setModifiedUser(u1.getUsername());  <span class="comment">//设置修改人的姓名</span></div><div class="line">			user.setModifiedTime(<span class="keyword">new</span> Date());  <span class="comment">//设置修改的时间</span></div><div class="line">			userMapper.update(user);   <span class="comment">//此时用户信息</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 修改密码</div><div class="line"> * 1. 根据id查询用户信息，返回user</div><div class="line"> * 2. 如果user=null,抛出用户不存在的异常</div><div class="line"> * 3. 如果user！=null，比较user中的密码和用户输入的旧密码oldPassword是否相同</div><div class="line"> * 4. 如果密码不相同，抛出密码不匹配的异常</div><div class="line"> * 5. 如果密码相同，表示用户输入的旧密码是正确的，那么更新密码即可 </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">		String newPassword) <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException &#123;</div><div class="line">	User user=userMapper.seletUserById(id);  <span class="comment">//根据id查询，返回user对象</span></div><div class="line">	<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;  <span class="comment">//如果用户不存在</span></div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"当前登录的用户不存在"</span>);  <span class="comment">//抛出用户不存在的异常</span></div><div class="line">	&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果当前登录的用户存在</span></div><div class="line">		<span class="keyword">if</span> (!user.getPassword().equals(oldPassword)) &#123; <span class="comment">//如果返回的user对象中的密码和用户输入的旧密码不匹配</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"输入的旧密码不匹配"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果输出的旧密码正确</span></div><div class="line">			User u1=<span class="keyword">new</span> User();   <span class="comment">//创建User对象，封装修改所需的参数</span></div><div class="line">			u1.setPassword(newPassword);  <span class="comment">//封装新密码</span></div><div class="line">			u1.setId(id);  <span class="comment">//封装id</span></div><div class="line">			userMapper.update(u1);  <span class="comment">//调用修改的方法</span></div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUserService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件，测试的业务层，因此需要spring-dao.xml和spring-service.xml配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line">	</div><div class="line">	Integer id=<span class="number">5</span>;</div><div class="line">	String username=<span class="string">"zhengyuanmei"</span>;</div><div class="line">	Integer gender=<span class="number">0</span>;</div><div class="line">	String email=<span class="string">"chenjiabing@tedu.com"</span>;</div><div class="line">	String phone=<span class="string">"1381815155"</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//调用方法</span></div><div class="line">		userService.updateUser(id, username, gender, email, phone);</div><div class="line">		System.out.println(<span class="string">"更新成功"</span>);</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdatePasswordService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件，测试的业务层，因此需要spring-dao.xml和spring-service.xml配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line">	</div><div class="line">	Integer id=<span class="number">5</span>;</div><div class="line">	String oldPassword=<span class="string">"chenjiabing"</span>;</div><div class="line">	String newPassword=<span class="string">"5268266"</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		userService.updatePassword(id, oldPassword, newPassword);</div><div class="line">		System.out.println(<span class="string">"密码修改成功"</span>);</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="控制器出层UserController"><a href="#控制器出层UserController" class="headerlink" title="控制器出层UserController"></a>控制器出层<code>UserController</code></h2><h3 id="功能和分析"><a href="#功能和分析" class="headerlink" title="功能和分析"></a>功能和分析</h3><h4 id="修改个人信息-不包括修改密码和头像"><a href="#修改个人信息-不包括修改密码和头像" class="headerlink" title="修改个人信息(不包括修改密码和头像)"></a>修改个人信息(不包括修改密码和头像)</h4><ul>
<li>修改个人信息(不包括修改密码和头像)<ul>
<li><code>/user/updateUser.do</code></li>
<li>请求参数：<code>username</code>，<code>email</code>，<code>phone</code>，<code>gender</code>，<code>id</code></li>
<li>请求方式：<code>POST</code></li>
<li>响应方式：<code>@ResponseBody</code></li>
</ul>
</li>
<li>修改成功后，我们的<code>session</code>中仍然保存着未修改的<code>user</code>对象信息，因此我们在修改成功后需要重新设置<code>session</code>中的<code>user</code>对象。我们只需要在<code>ajax</code>异步请求处理的<code>controller</code>方法中重新设置即可</li>
</ul>
<h4 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h4><ul>
<li><p>修改密码</p>
<ul>
<li><code>/user/updatePassword.do</code></li>
<li>请求参数：<code>id</code>，<code>oldPassword</code>，<code>newPassword</code></li>
<li>请求方式： <code>POST</code></li>
<li>响应方式：<code>@ResponseBody</code></li>
<li>密码修改成功后，我们需要让用户重新登录，因此我们需要<code>清除session</code>，因为我们设置了<code>登录验证</code>的<code>拦截器</code>，只要访问有关<code>个人信息</code>的页面，我们都会先拦截验证是否登录</li>
</ul>
<p>​</p>
<p>​</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="在cn-tedu-store-controller中定义基类BaseController"><a href="#在cn-tedu-store-controller中定义基类BaseController" class="headerlink" title="在cn.tedu.store.controller中定义基类BaseController"></a>在<code>cn.tedu.store.controller</code>中定义基类<code>BaseController</code></h4><ul>
<li>我们的<code>id</code>是根据<code>session</code>中存储的<code>user</code>对象获取的，但是如果此时的登录超时，那么<code>session</code>会被自动清除，此时的<code>user</code>将获取不到，因此我们需要判断获取的<code>User</code>对象时候为空，我们可以设计一个<code>BaseController</code>的类，其中定义这个方法，这个方法获取在后续的其他控制器的处理都需要这个方法，因此我们可以在基类中定义这个通用的方法，如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 所有Controller类中父类，如果想用用到里面的方法，可以继承这个类即可</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取session中的user对象，返回其中的id值</div><div class="line">	 * <span class="doctag">@param</span> session  HttpSession对象</div><div class="line">	 * <span class="doctag">@return</span>  返回id</div><div class="line">	 * <span class="doctag">@throws</span> Exception  登录超时的异常，说明此时的session已经不存在了</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		User user=(User) session.getAttribute(<span class="string">"user"</span>);</div><div class="line">		<span class="keyword">if</span> (user!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> user.getId();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"登录超时间，请重新登录..."</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在UserController中定义方法"><a href="#在UserController中定义方法" class="headerlink" title="在UserController中定义方法"></a>在<code>UserController</code>中定义方法</h4><ul>
<li><code>UserController</code>，其中需要用到<code>BaseController</code>中的方法，因此需要继承这个类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 修改个人信息</div><div class="line">	 * <span class="doctag">@param</span> username  用户名</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱</div><div class="line">	 * <span class="doctag">@param</span> phone  电话号码</div><div class="line">	 * <span class="doctag">@param</span> gender  性别</div><div class="line">	 * <span class="doctag">@param</span> session HttpSession对象，用户获取存储在其中的user对象</div><div class="line">	 * <span class="doctag">@return</span>  返回结果集</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/updateUser.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">updateUser</span><span class="params">(String username,String email,String phone,Integer gender,HttpSession session)</span></span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result=<span class="keyword">new</span> ResponseResult&lt;Void&gt;();  <span class="comment">//创建结果集对象</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Integer id=<span class="keyword">this</span>.getId(session);  <span class="comment">//调用父类的方法获取id</span></div><div class="line">			userservice.updateUser(id, username, gender, email, phone);  <span class="comment">//调用业务层的方法</span></div><div class="line">			<span class="comment">//修改成功设置响应结果集</span></div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"修改成功"</span>);  <span class="comment">//设置响应内容</span></div><div class="line">            session.setAttribute(<span class="string">"user"</span>, userservice.getUserById(id));  <span class="comment">//修改成功之后，刷新session中的user对象</span></div><div class="line">		&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;   <span class="comment">//用户不存在的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(e.getMessage());  <span class="comment">//设置响应内容</span></div><div class="line">		&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;  <span class="comment">//用户名已经存在的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(e.getMessage());  <span class="comment">//设置响应内容</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;   <span class="comment">//登录超时的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(e.getMessage());  <span class="comment">//设置响应内容</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 修改密码的控制器方法</div><div class="line">	 * <span class="doctag">@param</span> session  HttpSession对象，用户获取对象id</div><div class="line">	 * <span class="doctag">@param</span> oldPassword   旧密码</div><div class="line">	 * <span class="doctag">@param</span> newPassword   新密码</div><div class="line">	 * <span class="doctag">@return</span>  返回结果集</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/updatePassword.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">updatePassword</span><span class="params">(HttpSession session,String oldPassword,String newPassword)</span></span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result=<span class="keyword">new</span> ResponseResult&lt;Void&gt;();  <span class="comment">//创建结果集对象</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Integer id=<span class="keyword">this</span>.getId(session);  <span class="comment">//获取id</span></div><div class="line">			userservice.updatePassword(id, oldPassword, newPassword);  <span class="comment">//调用修改方法</span></div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(<span class="string">"密码修改成功"</span>);</div><div class="line">			<span class="comment">//清除session，用户需要重新登录</span></div><div class="line">			session.invalidate();  </div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;   <span class="comment">//用户不存在异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;   <span class="comment">//密码不匹配异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;   <span class="comment">//  登录超时的异常</span></div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置状态码</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;  <span class="comment">//返回结果</span></div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><h4 id="修改个人信息的页面（不包括修改密码）"><a href="#修改个人信息的页面（不包括修改密码）" class="headerlink" title="修改个人信息的页面（不包括修改密码）"></a>修改个人信息的页面（不包括修改密码）</h4><ul>
<li>获取表单数据使用的<code>$(&quot;#personInfo-form&quot;).serialize()</code>方法<ul>
<li><code>personInfo-form</code>是<code>form</code>标签的<code>id</code></li>
<li><code>form</code>表单中的<code>name</code>要和<code>controller</code>方法中的参数字段一样，否则不能对应接收</li>
<li>这个方法是获取表单中的<code>input</code>节点，并且将表单参数封装成请求参数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异步请求</span></div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>:<span class="string">"&lt;%=request.getContextPath()%&gt;/user/updateUser.do"</span>,</div><div class="line">		<span class="attr">type</span>:<span class="string">"POST"</span>,</div><div class="line">		<span class="attr">dataType</span>:<span class="string">"json"</span>,</div><div class="line">		<span class="attr">data</span>:$(<span class="string">"#personInfo-form"</span>).serialize(),   <span class="comment">//封装请求参数</span></div><div class="line">		success:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">			alert(obj.message);</div><div class="line">			<span class="comment">//如果成功修改</span></div><div class="line">			<span class="keyword">if</span>(obj.state==<span class="number">1</span>)&#123;</div><div class="line">				<span class="comment">//重定向到个人信息页面，相当于刷新页面了，那么此时修改的信息会更新在页面中</span></div><div class="line">				<span class="built_in">window</span>.location.href=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/showPersonInfo.do"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div></pre></td></tr></table></figure>
<h4 id="安全验证的页面-修改密码"><a href="#安全验证的页面-修改密码" class="headerlink" title="安全验证的页面(修改密码)"></a>安全验证的页面(修改密码)</h4><ul>
<li>密码修改完成之后，使用<code>window.location</code>重定向到登录界面</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//验证密码长度在6-9位之间,参数为密码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPasswordLength</span>(<span class="params">pwd</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> pwd.length&gt;=<span class="number">6</span>&amp;&amp;pwd.length&lt;=<span class="number">9</span>;   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//验证新密码和确认新密码是否相同</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPasswordEquals</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> newPassword=$(<span class="string">"#newPassword"</span>).val(); <span class="comment">//新密码</span></div><div class="line">	<span class="keyword">var</span> confirmPassword=$(<span class="string">"#confirmPassword"</span>).val();  <span class="comment">//确认新密码</span></div><div class="line">	<span class="keyword">return</span> newPassword==confirmPassword;   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//旧密码失去焦点验证密码长度</span></div><div class="line">$(<span class="string">"#oldPassword"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(!checkPasswordLength($(<span class="keyword">this</span>).val()))&#123;</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).text(<span class="string">"密码长度在6-9位之间"</span>);</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>); </div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).text(<span class="string">"密码格式正确"</span>);</div><div class="line">		$(<span class="string">"#oldPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>); </div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//新密码失去焦点验证密码长度</span></div><div class="line">$(<span class="string">"#newPassword"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(!checkPasswordLength($(<span class="keyword">this</span>).val()))&#123;</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).text(<span class="string">"密码长度在6-9位之间"</span>);</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>); </div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).text(<span class="string">"密码格式正确"</span>);</div><div class="line">		$(<span class="string">"#newPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>); </div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//确认密码失去焦点验证与新密码是否一致</span></div><div class="line">$(<span class="string">"#confirmPassword"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//如果密码不一致</span></div><div class="line">	<span class="keyword">if</span>(!checkPasswordEquals())&#123;</div><div class="line">		$(<span class="string">"#confirmPasswordSpan"</span>).text(<span class="string">"密码与新密码不一致"</span>);</div><div class="line">		$(<span class="string">"#confirmPasswordSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$(<span class="string">"#confirmPasswordSpan"</span>).text(<span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//修改密码的方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updatePassword</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> newPassword=$(<span class="string">"#newPassword"</span>).val(); <span class="comment">// 新密码</span></div><div class="line">	<span class="keyword">var</span> oldPassword=$(<span class="string">"#oldPassword"</span>).val();   <span class="comment">// 旧密码</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">"newPassword"</span>:newPassword,<span class="string">"oldPassword"</span>:oldPassword &#125;;  <span class="comment">// 封装请求数据</span></div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/updatePassword.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	</div><div class="line">	<span class="comment">//如果验证的条件都完成了，那么可以发出请求</span></div><div class="line">	<span class="keyword">if</span>(checkPasswordLength(newPassword)&amp;&amp;checkPasswordLength(oldPassword)&amp;&amp;checkPasswordEquals())&#123;</div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="comment">//响应成功</span></div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="comment">//如果修改成功</span></div><div class="line">				<span class="keyword">if</span>(data.state==<span class="number">1</span>)&#123;</div><div class="line">					alert(data.message);   <span class="comment">//输出提示语句</span></div><div class="line">					<span class="comment">//重定向到登录界面</span></div><div class="line">					<span class="built_in">window</span>.location=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/showLogin.do"</span>;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;  <span class="comment">//如果修改失败</span></div><div class="line">					alert(data.message);  <span class="comment">//输出提示语句</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>对于<code>service</code>中的方法，如何设置其中的返回值<ol>
<li>如果这个返回值不好定义，比如更新用户信息，可能出现<code>用户名不存在</code>，<code>当前登录的用户已经被删除</code>等多种结果，那么这个返回值如何定义呢，只好定义为<code>void</code>，用抛出异常的方式来提醒<code>Controller</code>层处理</li>
<li>如果返回值要么是<code>true</code>，要么是<code>false</code>，那么就可以返回<code>boolean</code>，比如验证用户名，两种结果：用户名存在，用户名不存在，只需要返回布尔值即可</li>
</ol>
</li>
<li>我们可以在<code>cn.tedu.store.controller</code>中新建一个基类<code>BaseController</code>，这个类中定义的是<code>Controller</code>中比较<code>通用的方法</code>，那么如果一个控制器类想用使用其中的方法，只需要继承这个基类即可</li>
<li><strong>在修改用户信息之后，不要忘记更新存储在<code>session</code>中的<code>user</code>对象，使其是最新的用户信息</strong></li>
<li>修改密码完成之后，我们需要清空<code>session</code>，这样拦截器就会拦截器操作个人信息的页面并且让其重新登录</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户管理模块之个人信息修改&quot;&gt;&lt;a href=&quot;#用户管理模块之个人信息修改&quot; class=&quot;headerlink&quot; title=&quot;用户管理模块之个人信息修改&quot;&gt;&lt;/a&gt;用户管理模块之个人信息修改&lt;/h1&gt;&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; cla
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>地址管理之省市区三级联动菜单</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E5%9C%B0%E5%9D%80%E7%AE%A1%E7%90%86%E4%B9%8B%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E8%8F%9C%E5%8D%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/地址管理之省市区三级联动菜单/</id>
    <published>2018-05-21T10:26:00.000Z</published>
    <updated>2018-05-21T10:26:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="地址管理之省市区三级联动菜单"><a href="#地址管理之省市区三级联动菜单" class="headerlink" title="地址管理之省市区三级联动菜单"></a>地址管理之省市区三级联动菜单</h1><p><img src="http://ono60m7tl.bkt.clouddn.com/addresss1.png" alt="三级联动表单"></p>
<h2 id="导入省市区的数据"><a href="#导入省市区的数据" class="headerlink" title="导入省市区的数据"></a>导入省市区的数据</h2><ul>
<li>下载<a href="http://ono60m7tl.bkt.clouddn.com/%E7%9C%81%E5%B8%82%E5%8C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8sql%E4%BB%A3%E7%A0%81.zip" target="_blank" rel="external">sql语句的文件</a></li>
<li>在数据库中执行：<code>source 文件路径</code>即可导入</li>
<li>导入成功之后，在数据库中会出现三张表，分别代表省,市,区</li>
</ul>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><ul>
<li><code>get</code>，<code>set</code>方法</li>
<li><code>hashCode</code>和<code>equals</code>方法</li>
<li>实现序列化接口，生成安全码</li>
</ul>
<h3 id="Province"><a href="#Province" class="headerlink" title="Province"></a>Province</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省的实体类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4983640220555245518L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String provinceCode;  <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> String provinceName;  <span class="comment">//名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvinceCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceCode</span><span class="params">(String provinceCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.provinceCode = provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvinceName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> provinceName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceName</span><span class="params">(String provinceName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.provinceName = provinceName;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((provinceCode == <span class="keyword">null</span>) ? <span class="number">0</span> : provinceCode.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((provinceName == <span class="keyword">null</span>) ? <span class="number">0</span> : provinceName.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Province other = (Province) obj;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (provinceCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.provinceCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!provinceCode.equals(other.provinceCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (provinceName == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.provinceName != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!provinceName.equals(other.provinceName))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Province [id="</span> + id + <span class="string">", provinceCode="</span> + provinceCode</div><div class="line">				+ <span class="string">", provinceName="</span> + provinceName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="City"><a href="#City" class="headerlink" title="City"></a>City</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 城市的实体类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6530707564192968718L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String provinceCode;  <span class="comment">//省的编号</span></div><div class="line">	<span class="keyword">private</span> String cityCode;  <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> String CityName;  <span class="comment">//名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getProvinceCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvinceCode</span><span class="params">(String provinceCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.provinceCode = provinceCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCityCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityCode</span><span class="params">(String cityCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cityCode = cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCityName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> CityName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityName</span><span class="params">(String cityName)</span> </span>&#123;</div><div class="line">		CityName = cityName;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result</div><div class="line">				+ ((CityName == <span class="keyword">null</span>) ? <span class="number">0</span> : CityName.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((cityCode == <span class="keyword">null</span>) ? <span class="number">0</span> : cityCode.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((provinceCode == <span class="keyword">null</span>) ? <span class="number">0</span> : provinceCode.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		City other = (City) obj;</div><div class="line">		<span class="keyword">if</span> (CityName == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.CityName != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!CityName.equals(other.CityName))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (cityCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.cityCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cityCode.equals(other.cityCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (provinceCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.provinceCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!provinceCode.equals(other.provinceCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"City [id="</span> + id + <span class="string">", provinceCode="</span> + provinceCode</div><div class="line">				+ <span class="string">", cityCode="</span> + cityCode + <span class="string">", CityName="</span> + CityName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Area"><a href="#Area" class="headerlink" title="Area"></a>Area</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 区/县的实体类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Area</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7024097434624454416L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//主键</span></div><div class="line">	<span class="keyword">private</span> String areaCode; <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> String cityCode;  <span class="comment">//城市的编号</span></div><div class="line">	<span class="keyword">private</span> String areaName;  <span class="comment">//名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAreaCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> areaCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAreaCode</span><span class="params">(String areaCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.areaCode = areaCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCityCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityCode</span><span class="params">(String cityCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cityCode = cityCode;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAreaName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> areaName;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAreaName</span><span class="params">(String areaName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.areaName = areaName;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result</div><div class="line">				+ ((areaCode == <span class="keyword">null</span>) ? <span class="number">0</span> : areaCode.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((areaName == <span class="keyword">null</span>) ? <span class="number">0</span> : areaName.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((cityCode == <span class="keyword">null</span>) ? <span class="number">0</span> : cityCode.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Area other = (Area) obj;</div><div class="line">		<span class="keyword">if</span> (areaCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.areaCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!areaCode.equals(other.areaCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (areaName == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.areaName != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!areaName.equals(other.areaName))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (cityCode == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.cityCode != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cityCode.equals(other.cityCode))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Area [id="</span> + id + <span class="string">", areaCode="</span> + areaCode + <span class="string">", cityCode="</span></div><div class="line">				+ cityCode + <span class="string">", areaName="</span> + areaName + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>获取获取所有的省份信息</li>
<li>根据选择的省份传回的<code>省份编号</code>查询所有的城市信息</li>
<li>根据选择的城市传回的<code>城市编码</code>查询所有的县区的信息</li>
</ol>
<h3 id="新建DictMapper接口"><a href="#新建DictMapper接口" class="headerlink" title="新建DictMapper接口"></a>新建<code>DictMapper</code>接口</h3><ul>
<li>完成上面的三个功能，因此需要定义三个方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DictMapper</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查询所有的省份</div><div class="line">	 * <span class="doctag">@return</span>  省份集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Province&gt; <span class="title">selectProvince</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> provinceCode</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;City&gt; <span class="title">selectCityByProvinceCode</span><span class="params">(String provinceCode)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据城市的编码查询所有的县区</div><div class="line">	 * <span class="doctag">@param</span> cityCode</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Area&gt; <span class="title">selectAreaByCityCode</span><span class="params">(String cityCode)</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在src-resource-main的mappers文件夹创建DictMapper-xml文件"><a href="#在src-resource-main的mappers文件夹创建DictMapper-xml文件" class="headerlink" title="在src/resource/main的mappers文件夹创建DictMapper.xml文件"></a>在<code>src/resource/main</code>的<code>mappers</code>文件夹创建<code>DictMapper.xml</code>文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> <span class="comment">&lt;!-- namespace指定的DictMapper接口的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.DictMapper"</span>&gt;</span></div><div class="line"> 	<span class="comment">&lt;!-- </span></div><div class="line"> 		List&lt;Province&gt; selectProvince();</div><div class="line"> 		查询所有的省份</div><div class="line"> 	 --&gt;</div><div class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectProvince"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.Province"</span>&gt;</span></div><div class="line"> 		select id,</div><div class="line"> 		province_code as provinceCode,</div><div class="line"> 		province_name as provinceName </div><div class="line"> 		from t_dict_provinces</div><div class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"> 	</div><div class="line"> 	<span class="comment">&lt;!-- </span></div><div class="line"> 		List&lt;City&gt; selectCityByProvinceCode(String provinceCode);</div><div class="line"> 		根据省份的编码查询所有的城市信息</div><div class="line"> 	 --&gt;</div><div class="line"> 	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCityByProvinceCode"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.City"</span>&gt;</span></div><div class="line"> 	 	select id,</div><div class="line"> 	 	province_code as provinceCode,</div><div class="line"> 	 	city_code as cityCode,</div><div class="line"> 	 	city_name as cityName</div><div class="line"> 	 	from t_dict_cities where province_code=#&#123;province_code&#125;</div><div class="line"> 	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"> 	 </div><div class="line"> 	 </div><div class="line"> 	 <span class="comment">&lt;!-- </span></div><div class="line"> 	 	List&lt;Area&gt; selectAreaByCityCode(String cityCode);</div><div class="line"> 	 	根据城市的编码查询所有的县区</div><div class="line"> 	  --&gt;</div><div class="line"> 	  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAreaByCityCode"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.Area"</span>&gt;</span></div><div class="line"> 	  	select id,</div><div class="line"> 	  	area_code as areaCode,</div><div class="line"> 	  	area_name as areaName,</div><div class="line"> 	  	city_code as cityCode</div><div class="line"> 	  	from t_dict_areas where city_code=#&#123;cityCode&#125;</div><div class="line"> 	  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>获取获取所有的省份信息</li>
<li>根据选择的省份传回的<code>省份编号</code>获取所有的城市信息</li>
<li>根据选择的城市传回的<code>城市编码</code>获取所有的县区的信息</li>
</ol>
<h3 id="在cn-tedu-store-service中新建IDictService接口"><a href="#在cn-tedu-store-service中新建IDictService接口" class="headerlink" title="在cn.tedu.store.service中新建IDictService接口"></a>在<code>cn.tedu.store.service</code>中新建<code>IDictService</code>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的业务接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDictService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取所有的省份信息，返回对象集合</div><div class="line">	 * <span class="doctag">@return</span>  Province对象集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Province&gt; <span class="title">getProvinces</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 根据省份的编码获取所有的城市信息</div><div class="line">	 * <span class="doctag">@param</span> provinceCode   省份的编码</div><div class="line">	 * <span class="doctag">@return</span>   所有的城市的集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;City&gt; <span class="title">getCities</span><span class="params">(String provinceCode)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据城市的编码获取所有的县区的信息</div><div class="line">	 * <span class="doctag">@param</span> cityCode  城市的编码</div><div class="line">	 * <span class="doctag">@return</span>  所有县区的集合</div><div class="line">	 */</div><div class="line">	<span class="function">List&lt;Area&gt; <span class="title">getAreas</span><span class="params">(String cityCode)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在cn-tedu-store-service中新建DictServiceImpl实现类"><a href="#在cn-tedu-store-service中新建DictServiceImpl实现类" class="headerlink" title="在cn.tedu.store.service中新建DictServiceImpl实现类"></a>在<code>cn.tedu.store.service</code>中新建<code>DictServiceImpl</code>实现类</h3><ul>
<li>使用<code>@service</code>注解来控制反转，新建对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的业务实现类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span> <span class="comment">//控制反转，创建对象</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictServiceImpl</span> <span class="keyword">implements</span> <span class="title">IDictService</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span>   <span class="comment">//自动注入对象</span></div><div class="line">	<span class="keyword">private</span> DictMapper dictMapper;</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">getProvinces</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dictMapper.selectProvince();</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 获取所有的城市信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">getCities</span><span class="params">(String provinceCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dictMapper.selectCityByProvinceCode(provinceCode);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取所有的县区信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Area&gt; <span class="title">getAreas</span><span class="params">(String cityCode)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dictMapper.selectAreaByCityCode(cityCode);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>获取所有的省份信息(省份下拉选择文本改变发出异步请求)<ol>
<li><code>/dict/getProvince.do</code></li>
<li>请求方式：<code>GET</code></li>
<li>响应方式：<code>@ResponseBody</code></li>
</ol>
</li>
<li>获取对应的城市信息<ol>
<li><code>/dict/getCities.do</code></li>
<li>请求方式：<code>GET</code></li>
<li>请求参数：<code>ProvinceCode</code>：省份编码</li>
<li>响应方式：<code>@ResponseBody</code></li>
</ol>
</li>
<li>获取对应的县区信息<ol>
<li><code>/dict/getArea.do</code></li>
<li>请求方式：<code>GET</code></li>
<li>请求参数：<code>cityCode</code>：城市编码</li>
<li>响应方式：<code>@ResponseBody</code></li>
</ol>
</li>
</ol>
<h3 id="在cn-tedu-store-controller中新建一个DictController类"><a href="#在cn-tedu-store-controller中新建一个DictController类" class="headerlink" title="在cn.tedu.store.controller中新建一个DictController类"></a>在<code>cn.tedu.store.controller</code>中新建一个<code>DictController</code>类</h3><ul>
<li>使用<code>@Controller</code>注解</li>
<li>使用<code>@RequestMapping</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 省市区的controller层</div><div class="line"> * 继承父类BaseController</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/dict"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span>  </div><div class="line">	<span class="keyword">private</span> IDictService dictService;  <span class="comment">//自动创建service对象</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 异步获取所有的省份信息，返回给页面</div><div class="line">	 * <span class="doctag">@return</span> 结果集，省份信息</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getProvince.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> ResponseResult&lt;List&lt;Province&gt;&gt; getProvince()&#123;</div><div class="line">		<span class="comment">//创建结果集对象</span></div><div class="line">		ResponseResult&lt;List&lt;Province&gt;&gt; result=<span class="keyword">new</span> ResponseResult&lt;List&lt;Province&gt;&gt;();</div><div class="line">		List&lt;Province&gt; provinces=dictService.getProvinces();</div><div class="line">		result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">		result.setMessage(<span class="string">"响应成功"</span>);</div><div class="line">		result.setData(provinces);  <span class="comment">//添加返回的数据</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    	<span class="comment">/**</span></div><div class="line">	 * 获取城市信息</div><div class="line">	 * <span class="doctag">@param</span> provinceCode  省份的编码</div><div class="line">	 * <span class="doctag">@return</span>  返回结果集</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getCity.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> ResponseResult&lt;List&lt;City&gt;&gt; getCity(String provinceCode)&#123;</div><div class="line">		ResponseResult&lt;List&lt;City&gt;&gt; result=<span class="keyword">new</span> ResponseResult&lt;List&lt;City&gt;&gt;();  <span class="comment">//创建结果集对象</span></div><div class="line">		List&lt;City&gt; cities=dictService.getCities(provinceCode);   <span class="comment">//获取城市信息</span></div><div class="line">		result.setData(cities);   <span class="comment">//将城市信息封装到结果集中</span></div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 异步获取所有县区的信息</div><div class="line">	 * <span class="doctag">@param</span> cityCode  城市编码</div><div class="line">	 * <span class="doctag">@return</span>  结果集，其中封装了县区的信息</div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/getArea.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> ResponseResult&lt;List&lt;Area&gt;&gt; getAreas(String cityCode)&#123;</div><div class="line">		ResponseResult&lt;List&lt;Area&gt;&gt; result=<span class="keyword">new</span> ResponseResult&lt;List&lt;Area&gt;&gt;();</div><div class="line">		List&lt;Area&gt; areas=dictService.getAreas(cityCode);</div><div class="line">		result.setData(areas);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h2><h3 id="功能分析-3"><a href="#功能分析-3" class="headerlink" title="功能分析"></a>功能分析</h3><ol>
<li>当页面加载的时候调用<code>getProvinces()</code>方法，发送异步请求，这样所有的省份信息都加载出来了</li>
<li>当<code>省份信息的下拉列表select</code>选择改变了,那么调用<code>getCities()</code>方法，这样对应省份的市就加载出来了<ol>
<li><code>onchange=getCities()</code></li>
</ol>
</li>
<li>当<code>市的下拉列表select</code>选择改变了，那么调用<code>getAreas()</code>方法，这样对应的县区就加载出来了<ol>
<li><code>onchange=getAreas()</code></li>
</ol>
</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    getProvinces();  <span class="comment">//页面加载完成之后就调用该方法获取所有的省份信息</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">	<span class="comment">//获取所有的省份信息</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getProvinces</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/dict/getProvince.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">		<span class="comment">//发出异步请求</span></div><div class="line">		$.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.data.length;i++)&#123;</div><div class="line">					<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span>+data.data[i].provinceCode+<span class="string">"&gt;"</span>+data.data[i].provinceName+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					$(<span class="string">"#receiverState"</span>).append(option);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//获取所有的城市信息</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getCities</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> provinceCode=$(<span class="string">"#receiverState"</span>).val();  <span class="comment">//请求的数据</span></div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/dict/getCity.do?provinceCode="</span>+provinceCode;  <span class="comment">//异步请求的url</span></div><div class="line">		</div><div class="line">		$(<span class="string">"#receiverCity"</span>).html(<span class="string">"&lt;option value='-1'&gt;-------请选择城市---------&lt;/option&gt;"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//如果其中的provinceCode==-1，表示选择了请选择省份的那个选项，此时就不许需要发出异步请求了</span></div><div class="line">		<span class="keyword">if</span>(provinceCode==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//发送异步请求</span></div><div class="line">		$.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.data.length;i++)&#123;</div><div class="line">					<span class="comment">//新建option节点，第一个是文本的值，第二个是value属性的值</span></div><div class="line">					<span class="keyword">var</span> option=<span class="keyword">new</span> Option(data.data[i].cityName,data.data[i].cityCode);</div><div class="line">					$(<span class="string">"#receiverCity"</span>).append(option);  </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//获取所有县区的异步请求</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getAreas</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> cityCode=$(<span class="string">"#receiverCity"</span>).val();  <span class="comment">//请求的数据</span></div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/dict/getArea.do?cityCode="</span>+cityCode;  <span class="comment">// 异步请求的url</span></div><div class="line">		</div><div class="line">		$(<span class="string">"#receiverDistrict"</span>).html(<span class="string">"&lt;option value='-1'&gt;-------请选择县区---------&lt;/option&gt;"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//如果其中的cityCode==-1，表示选择了请选择省份的那个选项，此时就不许需要发出异步请求了</span></div><div class="line">		<span class="keyword">if</span>(cityCode==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//发送异步请求</span></div><div class="line">		$.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.data.length;i++)&#123;</div><div class="line">					<span class="comment">//新建option节点，第一个是文本的值，第二个是value属性的值</span></div><div class="line">					<span class="keyword">var</span> option=<span class="keyword">new</span> Option(data.data[i].areaName,data.data[i].areaCode);</div><div class="line">					$(<span class="string">"#receiverDistrict"</span>).append(option);  </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;地址管理之省市区三级联动菜单&quot;&gt;&lt;a href=&quot;#地址管理之省市区三级联动菜单&quot; class=&quot;headerlink&quot; title=&quot;地址管理之省市区三级联动菜单&quot;&gt;&lt;/a&gt;地址管理之省市区三级联动菜单&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://ono60
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>用户管理模块之用户登录</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E4%B9%8B%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/用户管理模块之用户登录/</id>
    <published>2018-05-21T10:24:56.000Z</published>
    <updated>2018-05-21T10:25:33.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理模块之用户登录"><a href="#用户管理模块之用户登录" class="headerlink" title="用户管理模块之用户登录"></a>用户管理模块之用户登录</h1><h2 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h2><ol>
<li>持久层</li>
<li>业务层</li>
<li>控制层</li>
<li>页面</li>
</ol>
<h2 id="在cn-tedu-store-mapper中新建UserMapper-java接口"><a href="#在cn-tedu-store-mapper中新建UserMapper-java接口" class="headerlink" title="在cn.tedu.store.mapper中新建UserMapper.java接口"></a>在<code>cn.tedu.store.mapper</code>中新建<code>UserMapper.java</code>接口</h2><ul>
<li><strong>由于在用户管理模块之用户注册已经创建了，所以不用新建了</strong></li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><p>验证用户名是否存在，其中返回的是用户对象，这个在前面的注册已经定义过了，是<code>User selectUserByUserName(String userName)</code></p>
<p>​</p>
</li>
</ol>
<h2 id="在cn-tedu-store-service创建IUserService接口和实现类UserServiceImpl"><a href="#在cn-tedu-store-service创建IUserService接口和实现类UserServiceImpl" class="headerlink" title="在cn.tedu.store.service创建IUserService接口和实现类UserServiceImpl"></a>在<code>cn.tedu.store.service</code>创建<code>IUserService</code>接口和实现类<code>UserServiceImpl</code></h2><ul>
<li><strong>由于在用户管理模块之用户注册已经创建了，所以不用新建了</strong></li>
</ul>
<h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ol>
<li>实现用户登录的业务，传入的参数是<code>用户名</code>和<code>密码</code></li>
</ol>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol>
<li>用户登录输入的是<code>用户名</code>和<code>密码</code>，登录不成功无非是是两种可能<ol>
<li>用户名不存在，抛出异常提示</li>
<li>密码不匹配，抛出异常提示</li>
</ol>
</li>
<li>用户登录<code>User login(String userName,String passWord</code>)`<ol>
<li>通过<code>selectUserByUserName</code>返回user对象</li>
<li>判断<code>user</code>是否为<code>null</code></li>
<li>如果<code>user=null</code>，抛出<code>UserNotFoundException</code>异常</li>
<li>如果<code>user！=null</code>，那么验证其中的密码是否正确</li>
<li>如果密码不匹配，抛出<code>PassWordNotMatchException</code>异常</li>
<li>如果密码匹配，那么返回<code>user</code>对象</li>
</ol>
</li>
<li>抛出异常，当然需要有自己的异常类，在<code>cn.tedu.store.service.ex</code>中新建两个异常类<ol>
<li>用户名不存在的异常<code>UserNotFoundException</code>，继承<code>Exception</code>，重写父类的<code>构造方法</code></li>
<li>密码不匹配的异常<code>PasswordNotMatchException</code>,继承<code>Exception</code>，重写父类的<code>构造方法</code></li>
</ol>
</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><code>IUserService</code>接口中定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 实现登录的业务</div><div class="line"> * <span class="doctag">@param</span> userName  用户名</div><div class="line"> * <span class="doctag">@param</span> passWord  密码</div><div class="line"> * <span class="doctag">@return</span>  User对象</div><div class="line"> * <span class="doctag">@throws</span> UserNotFoundException  用户不存在的异常</div><div class="line"> * <span class="doctag">@throws</span> PassWordNotMatchException  密码不匹配的异常</div><div class="line"> */</div><div class="line"><span class="function">User <span class="title">login</span><span class="params">(String userName,String passWord)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException</span>;</div></pre></td></tr></table></figure>
<ul>
<li><code>UserServiceImpl</code>实现类实现方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 登录方法</div><div class="line">	 * 1. 通过selectUserByUserName返回user对象</div><div class="line">	 * 2.判断user是否为null</div><div class="line">	 * 3.如果user=null，抛出UserNotFoundException异常</div><div class="line">	 * 4.如果user！=null，那么验证其中的密码是否正确</div><div class="line">	 * 5.如果密码不匹配，抛出PassWordNotMatchException异常</div><div class="line">	 * 6. 如果密码匹配，那么返回user对象</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException </div><div class="line">	 * <span class="doctag">@throws</span> PassWordNotMatchException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userName, String passWord)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException </span>&#123;</div><div class="line">		</div><div class="line">		User user=userMapper.selectUserByUserName(userName);  <span class="comment">//根据用户名查询，返回user对象</span></div><div class="line">		<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//user为null，表示用户名不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"用户名不存在"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果用户名存在，验证密码</span></div><div class="line">			<span class="keyword">if</span> (passWord.equals(user.getPassword())) &#123;  <span class="comment">//如果密码匹配</span></div><div class="line">				<span class="keyword">return</span> user;   <span class="comment">//返回user对象即可</span></div><div class="line">			&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果密码不相同，那么直接抛出密码不匹配的异常即可</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"密码不匹配"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>TestUser</code>中测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件，测试的业务层，因此需要spring-dao.xml和spring-service.xml配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	String username=<span class="string">"陈加兵"</span>;</div><div class="line">	String password=<span class="string">"123456"</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		User user=userService.login(username, password);</div><div class="line">		System.out.println(<span class="string">"用户登录成功"</span>);</div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在cn-tedu-store-controller中新建UserController"><a href="#在cn-tedu-store-controller中新建UserController" class="headerlink" title="在cn.tedu.store.controller中新建UserController"></a>在<code>cn.tedu.store.controller</code>中新建<code>UserController</code></h2><ul>
<li><strong>由于之前新建过了，不需要在新建了</strong></li>
</ul>
<h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><ol>
<li>显示登录页面<ol>
<li><code>/user/showLogin.do</code></li>
</ol>
</li>
<li>处理登录的请求<ol>
<li><code>/user/login.do</code></li>
<li>请求参数：<code>userName</code>和<code>password</code></li>
<li>请求方式<code>POST</code></li>
<li>响应方式：<code>ResposneBody</code></li>
</ol>
</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li>显示用户登录页面</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 显示登录视图 login.jsp</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/showLogin.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"login"</span>; <span class="comment">// 直接返回一个视图名称即可</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>处理异步请求登录的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 点击登录按钮处理异步请求的方法</div><div class="line"> * <span class="doctag">@param</span> username  用户名</div><div class="line"> * <span class="doctag">@param</span> password  密码</div><div class="line"> * <span class="doctag">@param</span> session  session域</div><div class="line"> * <span class="doctag">@return</span>  返回处理结果</div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">login</span><span class="params">(String username,String password,HttpSession session)</span></span>&#123;</div><div class="line">	ResponseResult&lt;Void&gt; result=<span class="keyword">new</span> ResponseResult&lt;Void&gt;();  <span class="comment">//新建返回结果对象</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		User user=userservice.login(username, password);  <span class="comment">//调用service的login方法登录</span></div><div class="line">		result.setState(<span class="number">1</span>);   <span class="comment">//设置响应状态码</span></div><div class="line">		result.setMessage(<span class="string">"登录成功"</span>);  <span class="comment">//设置提示信息</span></div><div class="line">		session.setAttribute(<span class="string">"user"</span>,user);  <span class="comment">//将user对象存放在session中</span></div><div class="line">	&#125; <span class="keyword">catch</span> (UserNotFoundException e) &#123; <span class="comment">//用户名不存在的异常</span></div><div class="line">		result.setState(<span class="number">0</span>);   <span class="comment">//设置响应状态码</span></div><div class="line">		result.setMessage(e.getMessage());  <span class="comment">//设置提示信息</span></div><div class="line">	&#125; <span class="keyword">catch</span> (PassWordNotMatchException e) &#123;   <span class="comment">//密码不匹配的异常</span></div><div class="line">		result.setState(<span class="number">0</span>);   <span class="comment">//设置响应状态码</span></div><div class="line">		result.setMessage(e.getMessage());  <span class="comment">//设置提示信息</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;   <span class="comment">//返回结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在login-jsp页面中添加异步请求"><a href="#在login-jsp页面中添加异步请求" class="headerlink" title="在login.jsp页面中添加异步请求"></a>在<code>login.jsp</code>页面中添加异步请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击登录按钮的方法</span></div><div class="line">    $(<span class="string">'#bt-login'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> username=$(<span class="string">"#username"</span>).val();  <span class="comment">//用户名</span></div><div class="line">        <span class="keyword">var</span> password=$(<span class="string">"#password"</span>).val();  <span class="comment">//密码</span></div><div class="line">        <span class="keyword">var</span> d=&#123;<span class="string">"username"</span>:username,<span class="string">"password"</span>:password&#125;;  <span class="comment">//封装请求数据</span></div><div class="line">        <span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/login.do"</span>;  <span class="comment">//请求地址</span></div><div class="line">        <span class="comment">//异步提交请求，进行验证</span></div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="comment">//如果响应成功</span></div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				$(<span class="string">"#showResult"</span>).text(data.message);  <span class="comment">//显示提示信息</span></div><div class="line">				<span class="comment">//如果登录成功</span></div><div class="line">				<span class="keyword">if</span>(data.state==<span class="number">1</span>)&#123;</div><div class="line">					Save();  <span class="comment">//调用save方法保存用户名和密码，保证后面自动登录</span></div><div class="line">				   <span class="comment">//跳转到首页index.jsp</span></div><div class="line">                    <span class="built_in">window</span>.location.href=<span class="string">"&lt;%=request.getContextPath()%&gt;/main/showIndex.do"</span>;</div><div class="line">					</div><div class="line">				&#125;<span class="keyword">else</span>&#123;  <span class="comment">//登录没有成功</span></div><div class="line">					$(<span class="string">"#showResult"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);  <span class="comment">//设置提示信息的文本颜色为红色</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);        </div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"> $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ($.cookie(<span class="string">"rmbUser"</span>) == <span class="string">"true"</span>) &#123;</div><div class="line">            $(<span class="string">"#ck_rmbUser"</span>).attr(<span class="string">"checked"</span>, <span class="literal">true</span>);</div><div class="line">            $(<span class="string">"#username"</span>).val($.cookie(<span class="string">"username"</span>));</div><div class="line">            $(<span class="string">"#password"</span>).val($.cookie(<span class="string">"password"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//记住用户名密码,保存在cookie中</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Save</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ($(<span class="string">"#ck_rmbUser"</span>).prop(<span class="string">"checked"</span>)) &#123;</div><div class="line">            <span class="keyword">var</span> str_username = $(<span class="string">"#username"</span>).val();</div><div class="line">            <span class="keyword">var</span> str_password = $(<span class="string">"#password"</span>).val();</div><div class="line">            $.cookie(<span class="string">"rmbUser"</span>, <span class="string">"true"</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;); <span class="comment">//存储一个带7天期限的cookie</span></div><div class="line">            $.cookie(<span class="string">"username"</span>, str_username, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</div><div class="line">            $.cookie(<span class="string">"password"</span>, str_password, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            $.cookie(<span class="string">"rmbUser"</span>, <span class="string">"false"</span>, &#123; <span class="attr">expire</span>: <span class="number">-1</span> &#125;);</div><div class="line">            $.cookie(<span class="string">"username"</span>, <span class="string">""</span>, &#123; <span class="attr">expires</span>: <span class="number">-1</span> &#125;);</div><div class="line">            $.cookie(<span class="string">"password"</span>, <span class="string">""</span>, &#123; <span class="attr">expires</span>: <span class="number">-1</span> &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>实现登录的时候，不可以使用<code>用户名</code>和<code>密码</code>直接查询人数，因为<code>sql</code>是不区分大小写的，但是我们的密码是区分大小写的，比如<code>select * from t_user where username=? and password=?</code>,这个是不可以直接使用的，应该是使用用户名查询返回<code>User</code>对象，然后在比较用户输入的密码和对象中的密码是否相同：<code>password.equals(user.getPassWord())</code></li>
<li>在需要修改前端页面的时候，不要大幅度的修改其中的<code>css</code>文件，可以使用<code>内嵌式</code>的样式修改即可</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户管理模块之用户登录&quot;&gt;&lt;a href=&quot;#用户管理模块之用户登录&quot; class=&quot;headerlink&quot; title=&quot;用户管理模块之用户登录&quot;&gt;&lt;/a&gt;用户管理模块之用户登录&lt;/h1&gt;&lt;h2 id=&quot;开发顺序&quot;&gt;&lt;a href=&quot;#开发顺序&quot; class=&quot;
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Spring之AOP之底层实现</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Spring%E4%B9%8BAOP%E4%B9%8B%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Spring之AOP之底层实现/</id>
    <published>2018-05-21T10:22:48.000Z</published>
    <updated>2018-06-08T09:06:10.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring之AOP之底层实现"><a href="#Spring之AOP之底层实现" class="headerlink" title="Spring之AOP之底层实现"></a>Spring之AOP之底层实现</h1><h2 id="静态代理实现"><a href="#静态代理实现" class="headerlink" title="静态代理实现"></a>静态代理实现</h2><ul>
<li>定义<code>IStudnetService</code>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * IStudentService的接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义<code>StudentServiceImpl</code>实现方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">IStudentService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentService的add方法"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义<code>StudentAop</code>切面类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 切面类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentAOP</span> </span>&#123;</div><div class="line">	<span class="comment">//之前执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.before...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//之后执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.after"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//在之后执行，只在没有出现异常的时候执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.afterReturning"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//之后执行，但是只在出现异常的时候执行</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.throwing"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//环绕方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arounding</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"StudentAOP.arounding"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义<code>StudentProxy</code>代理类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态代理类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentProxy</span> <span class="keyword">implements</span> <span class="title">IStudentService</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> StudentAOP studentAOP;   <span class="comment">//依赖注入切面对象</span></div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> IStudentService studentService;  <span class="comment">//目标对象</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			studentAOP.arounding();  <span class="comment">//执行环绕方法</span></div><div class="line">			studentAOP.before();  <span class="comment">//执行切面类的方法</span></div><div class="line">			studentService.add();  <span class="comment">//执行目标对象的方法</span></div><div class="line">			studentAOP.after();  <span class="comment">//执行切面的after方法</span></div><div class="line">			studentAOP.afterReturning();  <span class="comment">//执行切面类afterReturning的方法</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			studentAOP.afterThrowing();  <span class="comment">//执行切面类的方法，在出现异常之后执行</span></div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			studentAOP.arounding();  <span class="comment">//执行环绕方法</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>,<span class="string">"spring-aop.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//创建Service，其中使用的是动态代理类</span></div><div class="line">	IStudentService studentService=ac.getBean(<span class="string">"studentProxy"</span>,IStudentService.class);</div><div class="line">	studentService.add();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h2><ul>
<li>代理类实现<code>java.lang.reflect.InvocationHandler</code>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 动态代理的类</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span>   <span class="comment">// 创建对象</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Object object; <span class="comment">// 目标对象</span></div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> StudentAOP studentAOP; <span class="comment">// 注入切面类</span></div><div class="line"></div><div class="line">	<span class="comment">// 获取动态代理类的对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object object)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.object=object;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 第一个参数：目标类的类加载器</div><div class="line">		 * 第二个参数：目标类的接口</div><div class="line">		 * 第三个参数：动态代理的实例</div><div class="line">		 */</div><div class="line">		<span class="keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> proxy ：被代理的对象</div><div class="line">	 * <span class="doctag">@param</span> method : 要调用的方法</div><div class="line">	 * <span class="doctag">@param</span> args : 方法调用的时候所需要的参数</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">			<span class="keyword">throws</span> Throwable &#123;</div><div class="line">		</div><div class="line">		studentAOP.before();  <span class="comment">//调用切面的before方法</span></div><div class="line">		</div><div class="line">		<span class="comment">//通过反射调用目标类的方法</span></div><div class="line">		Object result=method.invoke(object, args);  <span class="comment">//调用目标类的方法</span></div><div class="line">		studentAOP.after();  <span class="comment">//调用切面的after方法</span></div><div class="line">		</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>,<span class="string">"spring-aop.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取动态代理类的对象</span></div><div class="line">	ProxyHandler proxyHandler=ac.getBean(<span class="string">"proxyHandler"</span>,ProxyHandler.class);</div><div class="line">	</div><div class="line">	<span class="comment">//获取代理类的对象</span></div><div class="line">	IStudentService studentService=(IStudentService) proxyHandler.getObject(<span class="keyword">new</span> StudentServiceImpl());</div><div class="line">	studentService.add();</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://www.cnblogs.com/CarpenterLee/p/8241042.html" target="_blank" rel="external">JDK代理和Cglib代理的实现</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring之AOP之底层实现&quot;&gt;&lt;a href=&quot;#Spring之AOP之底层实现&quot; class=&quot;headerlink&quot; title=&quot;Spring之AOP之底层实现&quot;&gt;&lt;/a&gt;Spring之AOP之底层实现&lt;/h1&gt;&lt;h2 id=&quot;静态代理实现&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之AOP</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Spring%E4%B9%8BAOP/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Spring之AOP/</id>
    <published>2018-05-21T10:22:06.000Z</published>
    <updated>2018-06-07T09:56:05.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring之AOP"><a href="#Spring之AOP" class="headerlink" title="Spring之AOP"></a>Spring之AOP</h1><h2 id="Spring框架两大核心内容"><a href="#Spring框架两大核心内容" class="headerlink" title="Spring框架两大核心内容"></a>Spring框架两大核心内容</h2><h3 id="IOC-（DI）"><a href="#IOC-（DI）" class="headerlink" title="IOC （ＤＩ）"></a>IOC （ＤＩ）</h3><ul>
<li><p><code>ＩＯＣ</code>：控制反转</p>
<ul>
<li>将创建和管理对象全部交给框架完成</li>
</ul>
</li>
<li><p><code>DI</code> : 依赖注入</p>
<ul>
<li>为成员变量赋值</li>
<li>其中有不同的方法赋值，但是我们推荐使用<code>set</code>方法注入或者注解方式</li>
</ul>
</li>
</ul>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul>
<li>面向切面编程，是面向对象编程的重要组成部分，在不改变业务逻辑功能的基础上，对<strong>横切逻辑</strong>进行扩展</li>
<li><code>aspectj</code>框架是<code>aop</code>编程思想的体现，<code>spring-aop</code>对<code>aspectj</code>又进一步的封装</li>
<li>Aop的实现原理是<code>jdk的动态代理</code>和<code>Cglib代理</code></li>
<li>如果<code>IOC容器组件</code>实现接口使用<code>JDK动态代理</code>，如果没有实现接口使用<code>Cglib代理</code></li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="依赖jar包"><a href="#依赖jar包" class="headerlink" title="依赖jar包"></a>依赖jar包</h3><ul>
<li><code>aspectjweaver</code></li>
<li><code>aspectjrt</code></li>
<li><code>spring-aop</code><ul>
<li>这个是spring对<code>aspectj</code>的封装，因此我们使用起来更加简单</li>
</ul>
</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><ul>
<li>在<code>pom.xml</code>中添加如下依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 导入aspectj依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 导入spring的aop --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建一个aop的实现类"><a href="#创建一个aop的实现类" class="headerlink" title="创建一个aop的实现类"></a>创建一个aop的实现类</h3><ul>
<li>创建类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>  <span class="comment">//spring自动创建对象</span></div><div class="line"><span class="meta">@Aspect</span>     <span class="comment">//表示当前类是一个切面类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAop</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Before</span>("bean(bean的名称)")  表示该方法在这个bean中的所有方法执行之前执行</div><div class="line">	 * 	其中可以使用通配符，比如bean("*ServiceImpl")  表示全部的service类，比如userServiceImpl</div><div class="line">	 */</div><div class="line">	<span class="meta">@Before</span>(<span class="string">"bean(userServiceImpl)"</span>)<span class="comment">//方法执行之前</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"方法执行之前..............."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在方法之后执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@After</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"在方法执行之后执行"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在业务方法没有异常的时候才会执行，并且实在<span class="doctag">@After</span>之后执行</div><div class="line">	 * 如果业务方法有异常，那么不会执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@AfterReturning</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"方法在after之后执行，并且这个业务方法没有出现异常"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在业务方法发生异常才会执行，并且在<span class="doctag">@After</span>之后执行</div><div class="line">	 * 如果没有发生异常，不会执行</div><div class="line">	 */</div><div class="line">	<span class="meta">@AfterThrowing</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"方法发生异常执行...."</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 环绕通知</div><div class="line">	 * <span class="doctag">@param</span> jp</div><div class="line">	 * <span class="doctag">@throws</span> Throwable </div><div class="line">	 */</div><div class="line">	<span class="meta">@Around</span>(<span class="string">"bean(*ServiceImpl)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">		System.out.println(<span class="string">"环绕通知 .....之前"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//调用业务层的方法,其中的Object是接收业务层方法的返回值</span></div><div class="line">		Object object =jp.proceed();  </div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"环绕通知..........之后"</span>);</div><div class="line">		<span class="keyword">return</span> object;   <span class="comment">//这里的返回值必须返回，否则在业务层将不会获取到</span></div><div class="line">	&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义配置文件"><a href="#定义配置文件" class="headerlink" title="定义配置文件"></a>定义配置文件</h3><ul>
<li>配置注解扫描(<code>spring-aop.xm</code>l)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义spring组件扫描componet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.aop"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 解析切面注解 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="通知-5种"><a href="#通知-5种" class="headerlink" title="通知(5种)"></a>通知(5种)</h2><ul>
<li><code>@Before</code>（前置通知）：在业务方法执行之前调用</li>
<li><code>@After</code>（后置通知）：在方法之后执行</li>
<li><code>@AfterReturning</code>(正常返回通知)：在方法之后执行，只有在业务方法没有出现异常的时候才会执行</li>
<li><code>@AfterThrowing</code>(异常通知) ： 在方法之后执行，只有在业务方法出现异常的时候才会执行</li>
<li><code>@Around</code> （环绕通知）：在业务方法执行之前和之后执行，即是在<code>@Before</code>之前执行，在<code>@After之后</code>执行，必须又返回值，这里的返回值就是业务层方法的返回值，如果不返回，那么业务层方法就获取不到返回值</li>
</ul>
<h2 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h2><ul>
<li>业务层的所有方法，叫做连接点</li>
<li>业务类中可以被增强的方法都叫做连接点</li>
</ul>
<h2 id="切点"><a href="#切点" class="headerlink" title="切点"></a>切点</h2><ul>
<li>能切入切面逻辑的方法，叫做切点</li>
<li><strong>实际被增强的方法叫做切入点</strong> ，其他的那些没有被增强的方法(连接点)不是切点</li>
</ul>
<h2 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h2><ul>
<li>定义了增强方法的类就叫做切面</li>
</ul>
<h2 id="定义切点"><a href="#定义切点" class="headerlink" title="定义切点"></a>定义切点</h2><h3 id="第一种方式-基于spring创建的bean"><a href="#第一种方式-基于spring创建的bean" class="headerlink" title="第一种方式(基于spring创建的bean)"></a>第一种方式(基于spring创建的bean)</h3><ul>
<li><code>bena</code>的切点定义 ： <code>(bean(&quot;userServiceImpl&quot;))</code>,这个是作用到该业务类中的所有方法上，并不能定义到某一个方法上</li>
<li><code>bean(&quot;*ServiceImpl&quot;)</code>：作用到多个业务层，比如：<code>userServiceImpl</code>,<code>addressServiceImpl</code></li>
<li><code>bean(&quot;userServiceImpl&quot;)||bean(&quot;addressServiceImpl&quot;)</code>： 只作用到当前的两个业务层</li>
</ul>
<h3 id="第二种方式-基于类的"><a href="#第二种方式-基于类的" class="headerlink" title="第二种方式(基于类的)"></a>第二种方式(基于类的)</h3><ul>
<li><code>(within(&quot;全类名&quot;))</code>： 其中写的是全类名</li>
</ul>
<ul>
<li><code>(within(&quot;cn.tedu.store.service.UserServiceImpl&quot;))</code>：作用于<code>UserServiceImpl</code>这个业务层中的所有方法</li>
<li><code>(within(&quot;cn.tedu.store.service.*ServiceImpl&quot;))</code>: 使用<code>*</code>通配符，作用到全部的业务层</li>
</ul>
<h3 id="第三种方式-基于方法的"><a href="#第三种方式-基于方法的" class="headerlink" title="第三种方式(基于方法的)"></a>第三种方式(基于方法的)</h3><ul>
<li><code>(&quot;execution(* cn.tedu.store.service.UserServiceImpl.login(..))&quot;)</code> ：第一个<code>*</code>表示方法的返回类型，一般使用<code>*</code>表示，其中的形式是<code>全类名.方法名(..)</code></li>
<li><code>(&quot;execution(* cn.tedu.store.service.UserServiceImpl.get*(..))&quot;)</code>:这个将作用于<code>UserServiceImpl</code>这个业务类中的所有以<code>get</code>开头的方法</li>
<li><code>(&quot;execution(* cn.tedu.store.service.*ServiceImpl.login(..))&quot;)</code>: 这个将作用于所有的业务类中的所有以<code>get</code>开头的方法</li>
<li><code>(&quot;execution(* cn.tedu.store..get*(..))&quot;)</code> :这个将作用于<code>cn.tedu.store</code>这个包和其子包下的所有类中的所有以<code>get</code>开头的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAop</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    	在调用UserServiceImpl中的login()方法之前执行这个方法</div><div class="line">    */</div><div class="line">	<span class="meta">@Before</span>(<span class="string">"execution(* cn.tedu.store.service.UserServiceImpl.login(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"TestAop.text"</span>);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 测试登录的业务方法的性能</div><div class="line">	 */</div><div class="line">	<span class="meta">@Around</span>(<span class="string">"execution(* cn.tedu.store.service.UserServiceImpl.login(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">test1</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">		Long before=System.currentTimeMillis();  <span class="comment">//获取执行之前的系统时间</span></div><div class="line">		Object object=jp.proceed();  <span class="comment">//调用业务层的方法</span></div><div class="line">		Long after=System.currentTimeMillis();  <span class="comment">//获取执行之后的系统时间</span></div><div class="line">		System.out.println(after-before);</div><div class="line">		<span class="keyword">return</span> object;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>测试系统性能</li>
<li>打印日志</li>
<li>事务处理</li>
<li>……………………………………</li>
</ol>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li>基于动态代理完成</li>
<li>Aop的实现原理是<code>jdk的动态代理</code>和<code>Cglib代理</code></li>
<li><code>cglib代理</code>使用的是<code>继承</code>，<code>动态代理</code>使用的是<code>接口</code>，如果需要添加横切逻辑的类没有接口，那么使用的是cglib代理，如果有接口，使用的是jdk的动态代理</li>
<li><code>JDK的动态代理</code>的原理是代理类实现目标类的接口，但是<code>Cglib代理</code>原理是继承，因此如果目标有接口那么使用的是动态代理。</li>
<li><code>spring-aop</code>是对<code>aspectj</code>的进一步封装</li>
<li><img src="http://ono60m7tl.bkt.clouddn.com/aop%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png" alt="aop原理图"></li>
</ul>
<h2 id="Spring-aop-处理事务"><a href="#Spring-aop-处理事务" class="headerlink" title="Spring-aop 处理事务"></a>Spring-aop 处理事务</h2><h3 id="处理的前提"><a href="#处理的前提" class="headerlink" title="处理的前提"></a>处理的前提</h3><ul>
<li><strong>默认发生<code>RuntimeException</code>或者其子类类型异常时，<code>spring-aop</code>会捕获异常，并且处理事务</strong></li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ol>
<li>创建事务管理器对象</li>
<li>开启基于注解的事务管理</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 注入数据源，这里使用的是上面配置好的DataSource --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 开启事务注解 ,transaction-manager指定的是上面配置的事务管理器的id--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注解配置事务-Transactional"><a href="#注解配置事务-Transactional" class="headerlink" title="注解配置事务@Transactional"></a>注解配置事务<code>@Transactional</code></h3><ul>
<li>可以在service的实现类上添加，那么所有的实现方法都会被事务管理器管理</li>
<li>可以在某一个方法上添加，那么只有配置了注解的方法才会被事务管理器管理</li>
<li>可以在<code>Service</code>的接口上添加注解，那么所有的接口方法都会被事务管理器管理</li>
<li><strong>我们推荐在<code>Service</code>的接口类上添加注解,并且在只涉及到<code>查询</code>语句的方法中设置传播行为为只读<code>@Transactional(readOnly=true)</code></strong><ul>
<li><img src="http://ono60m7tl.bkt.clouddn.com/2018-06-04%2019-20-31%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="注解中的配置属性"></li>
</ul>
</li>
</ul>
<h3 id="Spring事务的传播属性"><a href="#Spring事务的传播属性" class="headerlink" title="Spring事务的传播属性"></a>Spring事务的传播属性</h3><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PROPAGATION_REQUIRED</strong></td>
<td style="text-align:center">0</td>
<td>支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是<strong>Spring默认的事务的传播。</strong></td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td style="text-align:center">1</td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td style="text-align:center">2</td>
<td>支持当前事务，如果当前没有事务，就抛出异常。</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td style="text-align:center">3</td>
<td>新建事务，如果当前存在事务，把当前事务挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td style="text-align:center">4</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td style="text-align:center">5</td>
<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td style="text-align:center">6</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</td>
</tr>
</tbody>
</table>
<h3 id="Spring事务的隔离级别"><a href="#Spring事务的隔离级别" class="headerlink" title="Spring事务的隔离级别"></a>Spring事务的隔离级别</h3><table>
<thead>
<tr>
<th>名称</th>
<th>值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ISOLATION_DEFAULT</td>
<td>-1</td>
<td>这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应</td>
</tr>
<tr>
<td>ISOLATION_READ_UNCOMMITTED</td>
<td>1</td>
<td>这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻读。</td>
</tr>
<tr>
<td>ISOLATION_READ_COMMITTED</td>
<td>2</td>
<td>保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。</td>
</tr>
<tr>
<td>ISOLATION_REPEATABLE_READ</td>
<td>4</td>
<td>这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻读。</td>
</tr>
<tr>
<td>ISOLATION_SERIALIZABLE</td>
<td>8</td>
<td>这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻读。</td>
</tr>
</tbody>
</table>
<h3 id="配置须知"><a href="#配置须知" class="headerlink" title="配置须知"></a>配置须知</h3><ul>
<li>我们知道其实只有在涉及到数据库的修改才应该被事务管理，查询不需要被事务管理，但是一旦我们在一个<code>Service</code>接口上添加了<code>@Transactional</code>这个注解，那么默认这个接口中所有的方法都会被事务管理，因为这些方法都使用了默认的传播属性<code>PROPAGATION_REQUIRED</code>，我们可以在只涉及到<code>查询</code>语句的方法上添加<code>@Transactional(readyOnly=true)</code>，这样可以优化事务管理</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>接口上一旦添加了事务的注解，那么所有的方法都会被管理，但是我们可以设置只涉及到查询语句的方法传播属性为只读</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 博客的业务层接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="meta">@Transactional</span>  <span class="comment">//在接口中添加事务管理，那么其中的所有方法都被事务管理了</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBlogService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取当前用户的所有博客分类</div><div class="line">	 * <span class="doctag">@param</span> bloggerId  博主id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)  <span class="comment">//设置传播属性为只读，因为其中只涉及了查询语句</span></div><div class="line">	<span class="function">List&lt;BlogType&gt; <span class="title">getBlogTypeList</span><span class="params">(Integer bloggerId)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加博客</div><div class="line">	 * <span class="doctag">@param</span> blog  Blog对象，其中封装了需要添加的内容</div><div class="line">	 */</div><div class="line"><span class="comment">//	@Transactional(propagation=Propagation.REQUIRED)  //这个是默认的，可以不用定义，因为在接口上已经定义了</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 分页获取博客总数</div><div class="line">	 * <span class="doctag">@param</span> bloggerId</div><div class="line">	 * <span class="doctag">@param</span> offest</div><div class="line">	 * <span class="doctag">@param</span> count</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog&gt; <span class="title">getBlogList</span><span class="params">(Integer bloggerId,Integer offest,Integer count)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取博客总数</div><div class="line">	 * <span class="doctag">@param</span> bloggerId</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">Integer <span class="title">getBlogCount</span><span class="params">(Integer bloggerId,String title,Integer typeId)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 批量删除博客</div><div class="line">	 * <span class="doctag">@param</span> ids</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">moveBlogByIdsBatch</span><span class="params">(Integer[] ids)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据id查询博客信息</div><div class="line">	 * <span class="doctag">@param</span> id  主键id</div><div class="line">	 * <span class="doctag">@return</span>  返回Blog对象，其中封装了需要的信息</div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">Blog <span class="title">getBlogById</span><span class="params">(Integer id)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据日期分类</div><div class="line">	 * <span class="doctag">@param</span> bloggerId</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog_Count_ReleaseDateStr_Vo&gt; <span class="title">getBlogGroupByReleaseDateStr</span><span class="params">(Integer bloggerId)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 按照博客分类来获取博客信息</div><div class="line">	 * <span class="doctag">@param</span> typeId  分类id</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog&gt; <span class="title">getBlogByTypeId</span><span class="params">(Integer typeId,Integer offest,Integer count)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 按照日期分类获取博客信息</div><div class="line">	 * <span class="doctag">@param</span> bloggerId  博主id</div><div class="line">	 * <span class="doctag">@param</span> releaseDateStr  日期</div><div class="line">	 * <span class="doctag">@param</span> offest  偏移量</div><div class="line">	 * <span class="doctag">@param</span> count  数量</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">List&lt;Blog&gt; <span class="title">getBlogByreleaseDateStr</span><span class="params">(@Param(<span class="string">"bloggerId"</span>)</span>Integer bloggerId,@<span class="title">Param</span><span class="params">(<span class="string">"releaseDateStr"</span>)</span>String releaseDateStr,@<span class="title">Param</span><span class="params">(<span class="string">"offest"</span>)</span>Integer offest,@<span class="title">Param</span><span class="params">(<span class="string">"count"</span>)</span>Integer count)</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 按照日期查询博客数量</div><div class="line">	 * <span class="doctag">@param</span> bloggerId  博主id</div><div class="line">	 * <span class="doctag">@param</span> releaseDateStr  日期</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>)</div><div class="line">	<span class="function">Integer <span class="title">getBlogCount</span><span class="params">(Integer bloggerId,String releaseDateStr)</span></span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 修改博客的点击次数</div><div class="line">	 * <span class="doctag">@param</span> id</div><div class="line">	 * <span class="doctag">@param</span> clickHit</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modifyclickHit</span><span class="params">(Integer id,Integer clickHit)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring之AOP&quot;&gt;&lt;a href=&quot;#Spring之AOP&quot; class=&quot;headerlink&quot; title=&quot;Spring之AOP&quot;&gt;&lt;/a&gt;Spring之AOP&lt;/h1&gt;&lt;h2 id=&quot;Spring框架两大核心内容&quot;&gt;&lt;a href=&quot;#Spring框
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之使用总结</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Mybatis%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Mybatis之使用总结/</id>
    <published>2018-05-21T10:20:56.000Z</published>
    <updated>2018-05-21T10:21:36.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis之使用总结"><a href="#Mybatis之使用总结" class="headerlink" title="Mybatis之使用总结"></a>Mybatis之使用总结</h1><h2 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h2><ul>
<li>如果需要使用多表连接查询，使用<code>resultMap</code>对应表与实体类的对应关系太麻烦，我们可以定义一个<code>值对象</code>，其中封装了多表连接查询返回的字段，我们直接使用值对象接收返回的结果即可</li>
<li>比如我们在商城网站上的<code>显示购物车的模块</code>，使用的<code>CartVo</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 购物车的值对象</div><div class="line"> * 用于接收多表连接查询的结果</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8904622535687816912L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;    <span class="comment">//主键 购物车表中的主键</span></div><div class="line">	<span class="keyword">private</span> String goodsId;  <span class="comment">//商品的id</span></div><div class="line">	<span class="keyword">private</span> Integer uid;  <span class="comment">//用户id</span></div><div class="line">	<span class="keyword">private</span> String image;  <span class="comment">//图片地址</span></div><div class="line">	<span class="keyword">private</span> String title;  <span class="comment">//商品标题</span></div><div class="line">	<span class="keyword">private</span> Integer price; <span class="comment">//商品价格</span></div><div class="line">	<span class="keyword">private</span> Integer num;  <span class="comment">//加入购物车的商品数量</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGoodsId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsId</span><span class="params">(String goodsId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.goodsId = goodsId;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.uid = uid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.title = title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CartVo [id="</span> + id + <span class="string">", goodsId="</span> + goodsId + <span class="string">", uid="</span> + uid</div><div class="line">				+ <span class="string">", image="</span> + image + <span class="string">", title="</span> + title + <span class="string">", price="</span> + price</div><div class="line">				+ <span class="string">", num="</span> + num + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="表与实体类中的字段不对应"><a href="#表与实体类中的字段不对应" class="headerlink" title="表与实体类中的字段不对应"></a>表与实体类中的字段不对应</h2><ul>
<li>一般在数据库中定义字段的格式是使用下划线<code>_</code>连接的，但是在java中定义是使用<code>驼峰式</code>的命名风格，因此难免会出现字段不一样的情况，我们一般可以使用<code>resultMap</code>实现其的对应关系，或者在查询的时候，使用别名即可</li>
</ul>
<h2 id="Mapper方法中参数问题"><a href="#Mapper方法中参数问题" class="headerlink" title="Mapper方法中参数问题"></a>Mapper方法中参数问题</h2><ul>
<li>默认的mapper接口中的方法只能有一个参数，但是我们可以使用<code>@Param(&quot;&quot;)</code>这个注解来新增加参数</li>
</ul>
<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul>
<li>批量删除mapper接口中方法传入的是数组，必须使用<code>@Param()</code>标记，否则将不能识别</li>
<li>使用的sql语句： <code>delete from 表名 where id  in (.....)</code></li>
<li>我们可以在<code>&lt;delete&gt;</code>节点中使用<code>&lt;forEach&gt;</code>标签来遍历传入的数组</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"> 	void deleteCartById(Integer[] ids);</div><div class="line"> 	批量删除</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCartById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">  		delete from t_cart </div><div class="line">  		where</div><div class="line">  		id in</div><div class="line">  		<span class="comment">&lt;!-- </span></div><div class="line">  			遍历数组ids</div><div class="line">  			collection:需要遍历的数组</div><div class="line">  			item: 数组中的每一个值</div><div class="line">  			open ： 开始的内容</div><div class="line">  			close: 结束的内容</div><div class="line">  			separator ：每个元素的分割符</div><div class="line">  			最后拼接的就是  (id,id,id,id,id)</div><div class="line">  		 --&gt;</div><div class="line">  		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">  			#&#123;id&#125;</div><div class="line">  		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis之使用总结&quot;&gt;&lt;a href=&quot;#Mybatis之使用总结&quot; class=&quot;headerlink&quot; title=&quot;Mybatis之使用总结&quot;&gt;&lt;/a&gt;Mybatis之使用总结&lt;/h1&gt;&lt;h2 id=&quot;多表连接查询&quot;&gt;&lt;a href=&quot;#多表连接查询&quot;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc之文件上传和下载</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Springmvc之文件上传和下载/</id>
    <published>2018-05-21T10:20:12.000Z</published>
    <updated>2018-05-22T11:38:25.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc之文件上传和下载"><a href="#Springmvc之文件上传和下载" class="headerlink" title="Springmvc之文件上传和下载"></a>Springmvc之文件上传和下载</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li><strong>在上传和下载之前需要在对应的根目录下创建对应的文件夹，比如我们在<code>webApp</code>下创建<code>upload</code>文件夹下</strong></li>
</ul>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul>
<li><code>commons-io</code></li>
<li><code>commons-fileupload</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加文件上传的依赖 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在配置文件中配置-spring-mvc-xml"><a href="#在配置文件中配置-spring-mvc-xml" class="headerlink" title="在配置文件中配置(spring-mvc.xml)"></a>在配置文件中配置(spring-mvc.xml)</h2><ul>
<li><strong><code>id</code>的名称一定是<code>multipartResolver</code>，不能任意指定</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 上传组件的解析器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> </span></div><div class="line"><span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">	<span class="comment">&lt;!-- 上传文件大小 单位是字节--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10000000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="制作上传表单"><a href="#制作上传表单" class="headerlink" title="制作上传表单"></a>制作上传表单</h2><ul>
<li>表单的提交方式一定为<code>POST</code></li>
<li>必须追加<code>enctype=&quot;multipart/form-data&quot;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/upload/upload.do"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">	file: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="完成controller"><a href="#完成controller" class="headerlink" title="完成controller"></a>完成controller</h2><ul>
<li>上传的参数一定为<code>MultipartFile file</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uplaod</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IllegalStateException, IOException</span>&#123;</div><div class="line">		String fileName=file.getOriginalFilename();  <span class="comment">//获取文件名</span></div><div class="line">		Long fileSize=file.getSize();   <span class="comment">//获取文件大小</span></div><div class="line">		<span class="comment">//上传  参数是文件上传后储存的路径，最终的文件上传后的文件路径为/home/chenjiabing/Documents/Blog/fileName</span></div><div class="line">		file.transferTo(<span class="keyword">new</span> File(<span class="string">"/home/chenjiabing/Documents/Blog"</span>,fileName));</div><div class="line">		<span class="comment">//重定向到首页</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"redirect:../main/showIndex.do"</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="异步上传文件"><a href="#异步上传文件" class="headerlink" title="异步上传文件"></a>异步上传文件</h2><h3 id="定义表单"><a href="#定义表单" class="headerlink" title="定义表单"></a>定义表单</h3><ul>
<li>设置<code>onchange</code>事件，只要input的改变了，那么就上传文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"iconPic"</span> <span class="attr">onchange</span>=<span class="string">"getImageFun()"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="定义Controller"><a href="#定义Controller" class="headerlink" title="定义Controller"></a>定义Controller</h3><ul>
<li>其中的参数最好定义映射关系<code>@RequestParam(&quot;file&quot;)</code>，否则有时候会出现不对应的情况</li>
<li><strong>数据库中保存的文件的路径不需要保存项目路径，只需要保存项目的文件路径即可，比如<code>/upload/文件名</code>，那么我们使用<code>http://localhost:8080/TeduStore/upload/文件名</code>就能访问到</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getImage.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">getImage</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile file,HttpSession session) <span class="keyword">throws</span> IllegalStateException, IOException</span>&#123;</div><div class="line">	ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;();</div><div class="line">	</div><div class="line">	<span class="comment">// 如果文件不为空</span></div><div class="line">	<span class="keyword">if</span> (!file.isEmpty()) &#123;</div><div class="line">		String originalFilename = file.getOriginalFilename(); <span class="comment">// 获取初始的文件名称</span></div><div class="line">		UUID uuid = UUID.randomUUID();</div><div class="line">		<span class="comment">// 使用随机算法生成文件名称，保证文件名称不冲突</span></div><div class="line">		String fileName = uuid.toString()</div><div class="line">				+ originalFilename.substring(originalFilename</div><div class="line">						.lastIndexOf(<span class="string">"."</span>));</div><div class="line"></div><div class="line">		<span class="comment">// 获取文件在项目中的上传路径</span></div><div class="line">		String filePath = session.getServletContext().getRealPath(</div><div class="line">				<span class="string">"/upload/"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 创建文件的存储路径</span></div><div class="line">		File f1 = <span class="keyword">new</span> File(filePath, fileName);</div><div class="line"></div><div class="line">		<span class="comment">// 判断项目中这个upload文件夹是否存在</span></div><div class="line">		<span class="keyword">if</span> (!f1.getParentFile().exists()) &#123;</div><div class="line">			f1.getParentFile().mkdirs(); <span class="comment">// 创建</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 保存文件</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			file.transferTo(f1);</div><div class="line">			<span class="comment">// 存储到数据库中的路径</span></div><div class="line">			String fileToDatabase = <span class="string">"/upload/"</span> + fileName;</div><div class="line">			Integer id=<span class="keyword">this</span>.getId(session);</div><div class="line">			bloggerService.modifyImage(id, fileToDatabase);</div><div class="line">			result.setState(<span class="number">1</span>);</div><div class="line">			result.setMessage(<span class="string">"头像上传成功"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"头像上传失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AJAx异步提交"><a href="#AJAx异步提交" class="headerlink" title="AJAx异步提交"></a>AJAx异步提交</h3><ul>
<li>必须设置<code>contentType:false</code>,<code>processData:false</code></li>
<li>使用<code>FormData</code>对象保存数据，当然处理文件类型(File类型)的，我们也可以存储键值对，比如<code>formdata.append(&quot;username&quot;,&quot;jack&quot;)</code>,最后一起提交即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//上传文件的方法</span></div><div class="line"><span class="function">function <span class="title">getImageFun</span><span class="params">()</span></span>&#123;</div><div class="line">	var file=document.getElementById(<span class="string">"iconPic"</span>).files[<span class="number">0</span>];  <span class="comment">//获取当前的file</span></div><div class="line">	<span class="comment">// 创建FormData对象</span></div><div class="line">	var formData=<span class="keyword">new</span> FormData();</div><div class="line">	formData.append(<span class="string">"file"</span>,file);  <span class="comment">//将文件放入formData中</span></div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="string">"url"</span>:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/getImage.do"</span>,</div><div class="line">		<span class="string">"data"</span>:formData,</div><div class="line">		<span class="string">"type"</span>:<span class="string">"post"</span>,</div><div class="line">		<span class="string">"dataType"</span>:<span class="string">"json"</span>,   <span class="comment">//返回数据类型</span></div><div class="line">		<span class="string">"contentType"</span>:<span class="keyword">false</span>,  <span class="comment">//不设置上传文件类型  ，因为上传的文件有多种类型的</span></div><div class="line">		<span class="string">"processData"</span>:<span class="keyword">false</span>,    <span class="comment">//不处理数据</span></div><div class="line">		<span class="string">"success"</span>:function(obj)&#123;</div><div class="line">			alert(obj.message);</div><div class="line">			var url=window.URL.createObjectURL(file);  <span class="comment">//获取上传的的本地路径</span></div><div class="line">			$(<span class="string">"#icon"</span>).attr(<span class="string">"src"</span>,url);  <span class="comment">//将上面的头像显示为当前选择的图片</span></div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>###　第一种方式</p>
<ul>
<li>直接在输入地址即可，比如：<code>http://localhost:8080/TeduStore/upload.do/download.do?fileName=1.jpg</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 文件下载</div><div class="line"> * <span class="doctag">@param</span> fileName  文件名</div><div class="line"> * <span class="doctag">@param</span> request  </div><div class="line"> * <span class="doctag">@throws</span> IOException</div><div class="line"> */	</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/download.do"</span>)</div><div class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download(<span class="meta">@RequestParam</span>(<span class="string">"fileName"</span>)String fileName,HttpServletRequest request) <span class="keyword">throws</span> IOException&#123;</div><div class="line">	<span class="comment">//获取下载文件的路径，在文件中的真实路径</span></div><div class="line">	String path=request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</div><div class="line">	<span class="comment">//下载文件的全路径</span></div><div class="line">	File file=<span class="keyword">new</span> File(path+File.separator+fileName);</div><div class="line">	HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();  </div><div class="line">       <span class="comment">//下载显示的文件名，解决中文名称乱码问题  </span></div><div class="line">       String downloadFielName = <span class="keyword">new</span> String(fileName.getBytes(<span class="string">"UTF-8"</span>),<span class="string">"iso-8859-1"</span>);</div><div class="line">       <span class="comment">//通知浏览器以attachment（下载方式）打开图片</span></div><div class="line">       headers.setContentDispositionFormData(<span class="string">"attachment"</span>, downloadFielName); </div><div class="line">       <span class="comment">//application/octet-stream ： 二进制流数据（最常见的文件下载）。</span></div><div class="line">       headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</div><div class="line">        </div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(FileUtils.readFileToByteArray(file),    </div><div class="line">               headers, HttpStatus.CREATED); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><ul>
<li><code>controller</code>方法返回<code>byte[]</code></li>
<li>使用<code>@ResponseBody</code>注解</li>
<li>设置请求头的<code>ContentType</code>类型为下载文件的类型</li>
<li>设置请求头的<code>ContentDisposition</code></li>
</ul>
<h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><ul>
<li>只需要在浏览器中输入 ：<code>http://localhost:8080/Project/download/download.do?filename=1.png</code>.就会下载<code>项目路径</code>下的文件夹<code>upload</code>中文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/download.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span>[] download(HttpServletResponse response,HttpServletRequest request,String filename)</div><div class="line">			<span class="keyword">throws</span> IOException &#123;</div><div class="line">		<span class="comment">// 转换编码格式为iso-8859-1</span></div><div class="line">		filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</div><div class="line">		<span class="comment">// 设置响应头 contentType,这里是下载图片 因此写的是 image/png</span></div><div class="line">		response.setContentType(<span class="string">"image/png"</span>);</div><div class="line">		<span class="comment">// 设置响应头Content-Disposition,使用转义双引号</span></div><div class="line">		response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=\""</span></div><div class="line">				+ filename + <span class="string">"\""</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> getImage(filename, request);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 返回需要下载图片的byte数组</div><div class="line">	 * <span class="doctag">@param</span> filename 图片的名称</div><div class="line">	 * <span class="doctag">@param</span> request  HttpServletRequest对象，需要获取下载图片的项目路径</div><div class="line">	 * <span class="doctag">@return</span>  byte数组</div><div class="line">	 * <span class="doctag">@throws</span> IOException</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span>[] getImage(String filename,HttpServletRequest request) <span class="keyword">throws</span> IOException&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//获取图片文件存放的位置，在项目的upload文件夹下</span></div><div class="line">		String projectPath=request.getServletContext().getRealPath(<span class="string">"/upload/"</span>);</div><div class="line">		<span class="comment">//获取需要下载的图片的路径</span></div><div class="line">		File file=<span class="keyword">new</span> File(projectPath+File.separator+filename);</div><div class="line">		</div><div class="line">		<span class="comment">//创建输入流，读取图片</span></div><div class="line">		InputStream inputStream=<span class="keyword">new</span> FileInputStream(file);</div><div class="line">		<span class="comment">//创建内存操作流</span></div><div class="line">		ByteArrayOutputStream out=<span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		</div><div class="line">		<span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];  <span class="comment">//创建一个缓冲数组</span></div><div class="line">		<span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">		<span class="comment">//读取字节流，读入到byte数组中</span></div><div class="line">		<span class="keyword">while</span>((len=inputStream.read(b))!=-<span class="number">1</span>)&#123;</div><div class="line">			out.write(b,<span class="number">0</span>,len);  <span class="comment">//写入byte数组输入流</span></div><div class="line">		&#125;</div><div class="line">		inputStream.close();</div><div class="line">		out.close();</div><div class="line">		<span class="keyword">return</span> out.toByteArray(); </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="导出Excel文件"><a href="#导出Excel文件" class="headerlink" title="导出Excel文件"></a>导出<code>Excel</code>文件</h4><ul>
<li><strong>改变请求头中的<code>contentTyp</code>e类型为<code>excel</code>类型的即可</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/export.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span>[] export(HttpServletResponse response) <span class="keyword">throws</span> IOException &#123;</div><div class="line">		String filename=<span class="string">"excel表格.xlsx"</span>;</div><div class="line">		<span class="comment">// 转换编码格式为iso-8859-1</span></div><div class="line">		filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</div><div class="line">		<span class="comment">// 设置响应头 contentType,这里是下载excel</span></div><div class="line">		response.setContentType(<span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>);</div><div class="line">		<span class="comment">// 设置响应头Content-Disposition</span></div><div class="line">		response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=\""</span></div><div class="line">				+ filename + <span class="string">"\""</span>);</div><div class="line">		<span class="keyword">return</span> createExcel();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//创建excel表格，变成byte数组</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] createExcel() <span class="keyword">throws</span> IOException&#123;</div><div class="line">		<span class="comment">//使用POI生成Excel</span></div><div class="line">		XSSFWorkbook workbook=<span class="keyword">new</span> XSSFWorkbook(); <span class="comment">//生成工作簿</span></div><div class="line">		</div><div class="line">		XSSFSheet sheet = workbook.createSheet(<span class="string">"第一张表"</span>);  <span class="comment">//在工作簿中创建一个工作表</span></div><div class="line">		</div><div class="line">		XSSFRow row = sheet.createRow(<span class="number">0</span>);  <span class="comment">//创建行 行号从0开始</span></div><div class="line">		</div><div class="line">		XSSFCell cell = row.createCell(<span class="number">0</span>);  <span class="comment">//在行中创建单元格，从0开始，一行中包括多个单元格</span></div><div class="line">		</div><div class="line">		cell.setCellValue(<span class="string">"第一行第一个单元格"</span>);  <span class="comment">//在单元格中添加数据 </span></div><div class="line"></div><div class="line">		ByteArrayOutputStream outputStream=<span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		</div><div class="line">		workbook.write(outputStream);   <span class="comment">//写入ByteOutputStream流中</span></div><div class="line">		</div><div class="line">		workbook.close();</div><div class="line">		</div><div class="line">		outputStream.close();</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> outputStream.toByteArray();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="导出数据库中的信息"><a href="#导出数据库中的信息" class="headerlink" title="导出数据库中的信息"></a>导出数据库中的信息</h4><ul>
<li>我们可以使用上面的方式，将数据库中的信息写入到excel文件中，然后用户点击链接直接下载即可</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc之文件上传和下载&quot;&gt;&lt;a href=&quot;#Springmvc之文件上传和下载&quot; class=&quot;headerlink&quot; title=&quot;Springmvc之文件上传和下载&quot;&gt;&lt;/a&gt;Springmvc之文件上传和下载&lt;/h1&gt;&lt;h2 id=&quot;前提&quot;&gt;&lt;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring之密码加密</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/Spring%E4%B9%8B%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/Spring之密码加密/</id>
    <published>2018-05-21T10:19:21.000Z</published>
    <updated>2018-05-21T10:19:54.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h1><h2 id="消息摘要-数据的指纹"><a href="#消息摘要-数据的指纹" class="headerlink" title="消息摘要(数据的指纹)"></a>消息摘要(数据的指纹)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>对不固定的消息（字符串，一段文本，一个文件），通过一种特定的算法，得到一个固定长度的文本，固定长度的文本叫做消息摘要</li>
<li>比如<code>我是程序员</code>经过特定的算法之后，得到了消息摘要为：<code>adaf02515dfds7885csdfcdsc</code></li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>数据完整性的检验技术，我们将文本转换为消息摘要，然后比较消息摘要的值是否相等，如果相等那么表示两种文本相同</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>不可逆的，不能从消息摘要再得到原来的文本</li>
</ul>
<h3 id="特定的算法"><a href="#特定的算法" class="headerlink" title="特定的算法"></a>特定的算法</h3><ol>
<li>MD5</li>
<li>SHA</li>
</ol>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="添加依赖jar包"><a href="#添加依赖jar包" class="headerlink" title="添加依赖jar包"></a>添加依赖jar包</h4><ul>
<li><code>commons-codec</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试MD5Hex"><a href="#测试MD5Hex" class="headerlink" title="测试MD5Hex"></a>测试MD5Hex</h3><ul>
<li>得到的是32位的16进制的字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">		String str1=<span class="string">"你们好，未来的程序员!"</span>;</div><div class="line">		String strMessageString=DigestUtils.md5Hex(str1);</div><div class="line">		System.out.println(strMessageString);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">//读取文件</span></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		InputStream inputStream=<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/home/chenjiabing/Documents/Blog/AOP.md"</span>));</div><div class="line">		String message=DigestUtils.md5Hex(inputStream);</div><div class="line">		System.out.println(message);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="密码加密-1"><a href="#密码加密-1" class="headerlink" title="密码加密"></a>密码加密</h2><ul>
<li>避免在数据库中明文保存密码，通过消息摘要技术对密码进行加密</li>
</ul>
<h3 id="明文"><a href="#明文" class="headerlink" title="明文"></a>明文</h3><ul>
<li>没有加密的文字(字符串)，能看懂的文字</li>
</ul>
<h3 id="密文"><a href="#密文" class="headerlink" title="密文"></a>密文</h3><ul>
<li>经过加密后的文字(字符串)，看不出来明文的意思</li>
</ul>
<p>###　加盐处理　salt</p>
<ul>
<li>为了提高密码的安全性</li>
<li>就是在用户的密码之后随便添加一个字符串，然后连接在一起生成摘要，那么即使获取摘要，也不会被破解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</div><div class="line">	String str1=<span class="string">"123456"</span>;</div><div class="line">	String salt=<span class="string">"这个是加盐处理"</span>;  <span class="comment">//需要加盐，随便定义一个字符串</span></div><div class="line">	String message=DigestUtils.md5Hex(str1+salt);  <span class="comment">//获取加盐之后的消息摘要</span></div><div class="line">	System.out.println(message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="密码的安全性处理"><a href="#密码的安全性处理" class="headerlink" title="密码的安全性处理"></a>密码的安全性处理</h3><ul>
<li>涉及到密码： 登录，注册，修改密码</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>创建一个<code>MD5Password工具</code>类，用于加密密码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 密码加密的类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Password</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SALT=<span class="string">"加油,骚年!"</span>;  <span class="comment">//加盐处理</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取加密之后的密码</div><div class="line">	 * <span class="doctag">@param</span> password 用户输入的密码</div><div class="line">	 * <span class="doctag">@return</span>  加密之后的密码</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title">getMd5Password</span><span class="params">(String password)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> DigestUtils.md5Hex(password+SALT);  <span class="comment">//使用了加盐处理</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在注册的时候对输入的密码进行加密存储到数据库中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * 1. 调用selectUserByUserName(User user)方法判断用户名是否存在，返回对象u</div><div class="line">	 * 2. 判断u是否为null，</div><div class="line">	 * 3. 如果为null，调用insertUser(user)方法添加</div><div class="line">	 * 4. 如果不为null，抛出异常提示controller用户名存在(UserNameAlreadyExistException)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException </span>&#123;</div><div class="line">		User u=userMapper.selectUserByUserName(user.getUsername());  <span class="comment">//调用usermapper中的方法</span></div><div class="line">		<span class="keyword">if</span> (u!=<span class="keyword">null</span>) &#123;  <span class="comment">//如果u不为null，表示用户名已经存在与数据库中，不可以再次注册了，因此抛出异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNameAlreadyExistException(<span class="string">"用户名已经存在，请重新输入!!!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果u==null，表示用户名不存在，可以添加</span></div><div class="line">			<span class="comment">//获取加密之后的密码</span></div><div class="line">			String md5Password=MD5Password.getMd5Password(user.getPassword());</div><div class="line">			<span class="comment">//将加密之后的密码设置到user中，保存到数据库中</span></div><div class="line">			user.setPassword(md5Password); </div><div class="line">			userMapper.insertUser(user);  <span class="comment">//直接调用持久层方法插入数据即可</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在登录的时候，将用户输入的密码进行加密获取到加密之后的密码，然后和数据库中的密码比较</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 登录方法</div><div class="line">	 * 1. 通过selectUserByUserName返回user对象</div><div class="line">	 * 2.判断user是否为null</div><div class="line">	 * 3.如果user=null，抛出UserNotFoundException异常</div><div class="line">	 * 4.如果user！=null，那么验证其中的密码是否正确</div><div class="line">	 * 5.如果密码不匹配，抛出PassWordNotMatchException异常</div><div class="line">	 * 6. 如果密码匹配，那么返回user对象</div><div class="line">	 * <span class="doctag">@throws</span> UserNotFoundException </div><div class="line">	 * <span class="doctag">@throws</span> PassWordNotMatchException </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userName, String passWord)</span> <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException </span>&#123;</div><div class="line">		</div><div class="line">		User user=userMapper.selectUserByUserName(userName);  <span class="comment">//根据用户名查询，返回user对象</span></div><div class="line">		<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//user为null，表示用户名不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"用户名不存在"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果用户名存在，验证密码</span></div><div class="line">			</div><div class="line">			<span class="comment">//获取加密之后的密码，实际是一个消息摘要</span></div><div class="line">			String md5Password=MD5Password.getMd5Password(passWord);</div><div class="line">			</div><div class="line">			<span class="comment">//使用加密之后获取的消息摘要和数据库中对应的密码比较</span></div><div class="line">			<span class="keyword">if</span> (md5Password.equals(user.getPassword())) &#123;  <span class="comment">//如果密码匹配</span></div><div class="line">				<span class="keyword">return</span> user;   <span class="comment">//返回user对象即可</span></div><div class="line">			&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果密码不相同，那么直接抛出密码不匹配的异常即可</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"密码不匹配"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在修改中，将旧密码加密后和数据库中的密码比较，并且将新密码加密更新到数据库中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 修改密码</div><div class="line">	 * 1. 根据id查询用户信息，返回user</div><div class="line">	 * 2. 如果user=null,抛出用户不存在的异常</div><div class="line">	 * 3. 如果user！=null，比较user中的密码和用户输入的旧密码oldPassword是否相同</div><div class="line">	 * 4. 如果密码不相同，抛出密码不匹配的异常</div><div class="line">	 * 5. 如果密码相同，表示用户输入的旧密码是正确的，那么更新密码即可 </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">			String newPassword) <span class="keyword">throws</span> UserNotFoundException, PassWordNotMatchException &#123;</div><div class="line">		User user=userMapper.seletUserById(id);  <span class="comment">//根据id查询，返回user对象</span></div><div class="line">		<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;  <span class="comment">//如果用户不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"当前登录的用户不存在"</span>);  <span class="comment">//抛出用户不存在的异常</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果当前登录的用户存在</span></div><div class="line">			<span class="comment">//获取旧密码的加密之后的密码</span></div><div class="line">			String oldMd5Password=MD5Password.getMd5Password(oldPassword);</div><div class="line">			</div><div class="line">			<span class="comment">//使用加密之后的密码和数据库中的密码比较</span></div><div class="line">			<span class="keyword">if</span> (!user.getPassword().equals(oldMd5Password)) &#123; <span class="comment">//如果返回的user对象中的密码和用户输入的旧密码不匹配</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PassWordNotMatchException(<span class="string">"输入的旧密码不匹配"</span>);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;  <span class="comment">//如果输出的旧密码正确</span></div><div class="line">				User u1=<span class="keyword">new</span> User();   <span class="comment">//创建User对象，封装修改所需的参数</span></div><div class="line">				<span class="comment">//获取加密之后的新密码</span></div><div class="line">				String newMd5Password=MD5Password.getMd5Password(newPassword);</div><div class="line">				</div><div class="line">				u1.setPassword(newMd5Password);  <span class="comment">//封装新密码，其中是加密之后的密码</span></div><div class="line">				u1.setId(id);  <span class="comment">//封装id</span></div><div class="line">				userMapper.update(u1);  <span class="comment">//调用修改的方法</span></div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码加密&quot;&gt;&lt;a href=&quot;#密码加密&quot; class=&quot;headerlink&quot; title=&quot;密码加密&quot;&gt;&lt;/a&gt;密码加密&lt;/h1&gt;&lt;h2 id=&quot;消息摘要-数据的指纹&quot;&gt;&lt;a href=&quot;#消息摘要-数据的指纹&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc拦截器拦截Ajax请求</title>
    <link href="http://chenjiabing666.github.io/2018/05/21/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AAAjax%E8%AF%B7%E6%B1%82/"/>
    <id>http://chenjiabing666.github.io/2018/05/21/拦截器拦截Ajax请求/</id>
    <published>2018-05-21T10:16:29.000Z</published>
    <updated>2018-05-21T10:18:42.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拦截器拦截Ajax请求"><a href="#拦截器拦截Ajax请求" class="headerlink" title="拦截器拦截Ajax请求"></a>拦截器拦截Ajax请求</h1><p>##　问题</p>
<ul>
<li>如果我们在拦截器中定义了拦截器的路径为<code>/user/*</code>这个地址,并且拦截器拦截器之后，如果没有登录，那么<code>重定向</code>到<code>登录界面</code>。但是我们在<code>未登录</code>的前提下使用<code>Ajax</code>异步请求了<code>/user/addUser.do</code>这个地址，出现了拦截器是拦截了，但是并没有重定向到登录界面。</li>
</ul>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul>
<li>可以参照这篇文章 ：<a href="http://www.cnblogs.com/dudu/p/ajax_302_found.html" target="_blank" rel="external">http://www.cnblogs.com/dudu/p/ajax_302_found.html</a></li>
</ul>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ul>
<li>我们可以使用<code>$.ajax</code>中的<code>error</code>中的方法内直接重定向</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    		<span class="attr">url</span>:url,</div><div class="line">    		<span class="attr">type</span>:<span class="string">"GET"</span>,</div><div class="line">    		<span class="attr">data</span>:d,</div><div class="line">    		<span class="attr">dataType</span>:<span class="string">"json"</span>,</div><div class="line">    		<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    			alert(data.message);</div><div class="line">    		&#125;,</div><div class="line">    		<span class="comment">//一旦拦截器拦截url的请求，那么会执行error中的回调方法</span></div><div class="line">    		<span class="comment">//这个是失败的执行的回调方法，我们可以在其中重定向到登录界面</span></div><div class="line">    		error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    			<span class="built_in">window</span>.location=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/showLogin.do"</span>;</div><div class="line">    		&#125;</div><div class="line">    	&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;拦截器拦截Ajax请求&quot;&gt;&lt;a href=&quot;#拦截器拦截Ajax请求&quot; class=&quot;headerlink&quot; title=&quot;拦截器拦截Ajax请求&quot;&gt;&lt;/a&gt;拦截器拦截Ajax请求&lt;/h1&gt;&lt;p&gt;##　问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们在拦截器中定义了拦截器
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>用户管理模块之用户注册</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E4%B9%8B%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/用户管理模块之用户注册/</id>
    <published>2018-05-09T00:47:43.000Z</published>
    <updated>2018-05-09T07:04:05.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理模块之用户注册"><a href="#用户管理模块之用户注册" class="headerlink" title="用户管理模块之用户注册"></a>用户管理模块之用户注册</h1><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul>
<li>注册<ul>
<li>验证用户名是否已经存在</li>
<li>验证邮箱</li>
<li>验证电话号码</li>
</ul>
</li>
<li>登录</li>
<li>个人信息修改</li>
</ul>
<h2 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h2><ul>
<li>创建数据库和表<ul>
<li>需要注意的是：一些字段不能为空，但是我们在设计表的时候不需要设计，只需要在前端设计表单的时候检查字段是否为空即可。</li>
<li>字段<code>修改的人</code>，<code>修改的时间</code>，<code>创建的人</code>，<code>创建的时间</code>这四个字段建议创建，便于后面管理</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> tedu_store;</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</div><div class="line">                    username <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">unique</span>,</div><div class="line">                   	<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>),email <span class="built_in">varchar</span>(<span class="number">50</span>),</div><div class="line">                   	phone <span class="built_in">varchar</span>(<span class="number">32</span>),</div><div class="line">                   	image <span class="built_in">varchar</span>(<span class="number">100</span>),        </div><div class="line">                    gender <span class="built_in">int</span>(<span class="number">1</span>),             //<span class="number">0</span>表示男，<span class="number">1</span>表示女</div><div class="line">                    created_user <span class="built_in">varchar</span>(<span class="number">50</span>),  //创建表的人</div><div class="line">                    created_time <span class="built_in">date</span>,         //创建的时间</div><div class="line">                    modified_user <span class="built_in">varchar</span>(<span class="number">50</span>),   //修改的人</div><div class="line">                    modified_time <span class="built_in">date</span>           //修改的时间</div><div class="line">                   )<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</div></pre></td></tr></table></figure>
<p><img src="http://ono60m7tl.bkt.clouddn.com/storeUser.png" alt="User表"></p>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><ul>
<li>变量类型应该是使用<code>包装类型</code>，比如<code>Integer</code></li>
<li>变量应该是<code>驼峰式</code>的，即不应该使用<code>下划线</code></li>
<li><code>无参</code>，<code>全参</code>构造方法</li>
<li><code>set</code>,<code>get</code>方法</li>
<li><code>hashCode</code> ,<code>equals</code>方法重写</li>
<li>实现序列化接口,生成安全码</li>
<li>重写<code>toString</code>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户的实体类</div><div class="line"> * 无参，全参构造方法</div><div class="line"> * set,get方法</div><div class="line"> * hashCode equals方法重写</div><div class="line"> * 实现序列化接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5260484517511749238L</span>;  <span class="comment">//安全码</span></div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//id主键</span></div><div class="line">	<span class="keyword">private</span> String username;  <span class="comment">//用户名</span></div><div class="line">	<span class="keyword">private</span> String password;  <span class="comment">//密码</span></div><div class="line">	<span class="keyword">private</span> String email;   <span class="comment">//邮箱</span></div><div class="line">	<span class="keyword">private</span> String phone;   <span class="comment">//电话号码</span></div><div class="line">	<span class="keyword">private</span> String image;   <span class="comment">//图片的地址</span></div><div class="line">	<span class="keyword">private</span> Integer  gender;  <span class="comment">//性别</span></div><div class="line">	<span class="keyword">private</span> String createdUser;  <span class="comment">//创建表的人</span></div><div class="line">	<span class="keyword">private</span> Date createdTime;   <span class="comment">//创建表的时间</span></div><div class="line">	<span class="keyword">private</span> String modifiedUser;   <span class="comment">//修改表的人</span></div><div class="line">	<span class="keyword">private</span> Date modifiedTime;   <span class="comment">//修改表的时间</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.email = email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.phone = phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCreatedUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> createdUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedUser</span><span class="params">(String createdUser)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.createdUser = createdUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> createdTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedTime</span><span class="params">(Date createdTime)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.createdTime = createdTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getModifiedUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> modifiedUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifiedUser</span><span class="params">(String modifiedUser)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.modifiedUser = modifiedUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getModifiedTime</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> modifiedTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifiedTime</span><span class="params">(Date modifiedTime)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.modifiedTime = modifiedTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result</div><div class="line">				+ ((createdTime == <span class="keyword">null</span>) ? <span class="number">0</span> : createdTime.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((createdUser == <span class="keyword">null</span>) ? <span class="number">0</span> : createdUser.hashCode());</div><div class="line">		result = prime * result + ((email == <span class="keyword">null</span>) ? <span class="number">0</span> : email.hashCode());</div><div class="line">		result = prime * result + ((gender == <span class="keyword">null</span>) ? <span class="number">0</span> : gender.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((image == <span class="keyword">null</span>) ? <span class="number">0</span> : image.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((modifiedTime == <span class="keyword">null</span>) ? <span class="number">0</span> : modifiedTime.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((modifiedUser == <span class="keyword">null</span>) ? <span class="number">0</span> : modifiedUser.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((password == <span class="keyword">null</span>) ? <span class="number">0</span> : password.hashCode());</div><div class="line">		result = prime * result + ((phone == <span class="keyword">null</span>) ? <span class="number">0</span> : phone.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((username == <span class="keyword">null</span>) ? <span class="number">0</span> : username.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		User other = (User) obj;</div><div class="line">		<span class="keyword">if</span> (createdTime == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.createdTime != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!createdTime.equals(other.createdTime))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (createdUser == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.createdUser != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!createdUser.equals(other.createdUser))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (email == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.email != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!email.equals(other.email))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (gender == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.gender != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!gender.equals(other.gender))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.image != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!image.equals(other.image))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (modifiedTime == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.modifiedTime != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!modifiedTime.equals(other.modifiedTime))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (modifiedUser == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.modifiedUser != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!modifiedUser.equals(other.modifiedUser))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.password != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(other.password))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (phone == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.phone != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!phone.equals(other.phone))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.username != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!username.equals(other.username))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span></div><div class="line">				+ password + <span class="string">", email="</span> + email + <span class="string">", phone="</span> + phone</div><div class="line">				+ <span class="string">", image="</span> + image + <span class="string">", gender="</span> + gender + <span class="string">", createdUser="</span></div><div class="line">				+ createdUser + <span class="string">", createdTime="</span> + createdTime</div><div class="line">				+ <span class="string">", modifiedUser="</span> + modifiedUser + <span class="string">", modifiedTime="</span></div><div class="line">				+ modifiedTime + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h3><ul>
<li>提交的<code>username</code>，<code>password</code>，<code>email</code>，<code>phone</code>，其中<code>username</code>不能重复，因此需要判断用户名是否存在</li>
<li>上面的四个字段都不能为<code>空</code>，虽然在表中没有设计，但是在<code>JSP</code>页面使用了<code>js</code>控制了</li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><p>验证用户名是否存在(异步Ajax)</p>
<ol>
<li>持久层需要定义一个方法：根据用户名查找用户信息，如果返回的值不为<code>null</code>表示用户名已经存在，如果不存在表示可以注册</li>
<li><code>service层</code>需要验证查询的结果是否为<code>null</code>，如果为空，返回<code>true</code>，表示用户名不存在，那么可以使用这个用户名注册，如果不为<code>null</code>，返回<code>false</code>，那么不可以使用这个用户名注册</li>
</ol>
</li>
<li><p>验证邮箱是否存在(异步Ajax)</p>
<ol>
<li>持久层需要定义一个方法：根据邮箱查询人数，那么如果<code>人数 &gt;=1</code>表示已经存在该邮箱，否则不存在，可以注册</li>
<li><code>service层</code>需要验证返回的<code>人数是否等于0</code>,如果不是，返回<code>false</code>表示邮箱已经存在，不能使用，如果返回<code>true</code>表示邮箱不存在，可以使用该邮箱注册</li>
</ol>
</li>
<li><p>验证电话号码是否存在(异步Ajax)</p>
<ol>
<li>持久层定义一个方法： 根据电话号码查询人数，那么如果<code>人数 &gt;=1</code>表示已经存在该号码，否则不存在，可以注册</li>
<li><code>service</code>层需要验证返回的<code>人数是否等于0</code>，如果不是，返回<code>false</code>表示电话号码已经存在，不能使用这个号码注册，如果返回<code>true</code>表示号码不存在，可以使用这个号码注册</li>
</ol>
<p>​</p>
</li>
</ol>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ul>
<li><code>regist.jsp</code>表单提交  ———&gt; <code>Controller</code>中对应的处理请求的方法 ———–&gt; <code>service</code>层中业务逻辑   ——–&gt; <code>持久</code>层，操作数据库，返回数据给<code>service</code> </li>
</ul>
<h3 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h3><ul>
<li>我们开发的顺序应该是和执行顺序相反，这样便于编写代码</li>
<li>即是： <code>持久层mapper</code>操作数据库 ———&gt; <code>Service层</code>业务逻辑层 —————-&gt; <code>Controller层</code> ———————&gt; <code>JSP</code></li>
</ul>
<h3 id="持久层-mapper或者dao"><a href="#持久层-mapper或者dao" class="headerlink" title="持久层(mapper或者dao)"></a>持久层(mapper或者dao)</h3><h4 id="在cn-tedu-store-mapper包下创建UsreMapper接口"><a href="#在cn-tedu-store-mapper包下创建UsreMapper接口" class="headerlink" title="在cn.tedu.store.mapper包下创建UsreMapper接口"></a>在<code>cn.tedu.store.mapper</code>包下创建UsreMapper接口</h4><ul>
<li>其中实现<code>插入用户</code>的功能</li>
<li>其中需要保证<code>用户名</code>唯一，因此需要验证用户名是否存在，那么需要一个方法根据用户名查找用户</li>
<li><strong>注意：如果表中的字段和实体类中的字段不一致，那么在查询返回字段的时候一定要起一个别名，这个别名要和实体类中的字段相同，否则不能成功调用<code>set</code>方法为指定字段赋值</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**	</span></div><div class="line"> * 用户类的mapper层</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加用户信息</div><div class="line">	 * <span class="doctag">@param</span> user User对象 其中封装的是用户的信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 根据用户名查找对象</div><div class="line">	 * <span class="doctag">@param</span> username  用户名</div><div class="line">	 * <span class="doctag">@return</span>  如果存在返回User对象，否则返回null</div><div class="line">	 */</div><div class="line">	<span class="function">User <span class="title">selectUserByUserName</span><span class="params">(String username)</span></span>;</div><div class="line">	</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 通过邮箱查询</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span> 如果返回的数&gt;=1表示已经存在，返回0表示没有</div><div class="line">	 */</div><div class="line">	<span class="function">Integer <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 通过电话号码查询</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span>  如果返回的数&gt;=1表示已经存在这个电话号码，如果返回0表示不存在这个电话号码可以注册</div><div class="line">	 * 	 */</div><div class="line">	<span class="function">Integer <span class="title">selectByPhone</span><span class="params">(String phone)</span></span>;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在src-main-resource-mapper文件夹新建UserMapper-xml"><a href="#在src-main-resource-mapper文件夹新建UserMapper-xml" class="headerlink" title="在src/main/resource/mapper文件夹新建UserMapper.xml"></a>在<code>src/main/resource/mapper</code>文件夹新建<code>UserMapper.xml</code></h4><ul>
<li><code>&lt;mapper namespace=&quot;&quot;&gt;</code>写的是<code>UserMapper</code>的全类名</li>
</ul>
<ul>
<li>在其中添加一个<code>insert</code>节点，用于执行插入语句</li>
<li>添加一个<code>select</code>用于根据用户名查询用户信息，<strong>其中返回的结果字段如果和实体类属性不一致，那么需要起别名和实体类属性对应</strong></li>
<li>添加一个<code>select</code>语句根据邮箱<code>email</code>查询，返回的是<code>人数</code>，用于验证邮箱</li>
<li>添加一个<code>select</code>语句根据电话号码<code>phone</code>查询，返回的是人数，用于验证电话号码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- namespace指定的UserMapper接口的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.UserMapper"</span>&gt;</span></div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- </span></div><div class="line"> 		对应的方法： void insertUser(User user);</div><div class="line"> 		功能 ： 添加用户信息</div><div class="line"> 		返回值： 默认返回的是受影响的行数，不需要写返回类型，除非是select语句一定要写返回类型resultType或者resultMap</div><div class="line"> 		id ： 是UserMapper.java接口中的方法名称</div><div class="line"> 		parameterType ： 参数类型，写的是全类名。这里如果是基本类型，比如String,Integer可以不用写，如果是实体类对象最好是写上</div><div class="line">  --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line"> 	insert into 			t_user(username,password,email,phone,image,gender,created_user,created_time,modified_user,modified_time)</div><div class="line"> 	values(#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;phone&#125;,#&#123;image&#125;,#&#123;gender&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;)</div><div class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"> </div><div class="line"> </div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"> 	User selectUserByUserName(String username);</div><div class="line"> 	根据用户名查询用户信息，如果存在返回对象，否则返回null</div><div class="line"> 	resultType：返回值类型</div><div class="line"> 	如果表中的字段和实体类中的字段不相同，那么需要指定别名，否则不能成功赋值</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByUserName"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line">  	select id,username,password,email,gender,image,</div><div class="line">  	phone,created_user as createdUser,</div><div class="line">  	created_time as createdTime,</div><div class="line">  	modified_user as modifiedUser,</div><div class="line">  	modified_time as modifiedTime</div><div class="line">  	from t_user where username=#&#123;username&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line">     </div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line">  	Integer selectByEmail(String email);</div><div class="line">  	功能： 通过邮箱查找</div><div class="line">  	resultType : 返回的是Integer类型的，需要写全类名，在select语句中必须定义返回值类型</div><div class="line">   --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByEmail"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">  	select count(*) from t_user where email=#&#123;email&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line">   </div><div class="line">   <span class="comment">&lt;!-- </span></div><div class="line">  	Integer selectByPhone(String phone);</div><div class="line">  	功能： 通过电话号码查询，返回的是人数</div><div class="line">   --&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPhone"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">   		select count(*) from t_user where phone=#&#123;phone&#125;</div><div class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		</div><div class="line">		User user =<span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"郑元梅"</span>);</div><div class="line">		user.setPassword(<span class="string">"123456"</span>);</div><div class="line">		user.setEmail(<span class="string">"1836581289@163.com"</span>);</div><div class="line">		user.setPhone(<span class="string">"1836581289"</span>);		</div><div class="line">		ac.close();</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserByUserName</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">				AbstractApplicationContext ac</div><div class="line">					= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">						<span class="string">"spring-mvc.xml"</span>,</div><div class="line">						<span class="string">"spring-dao.xml"</span>);</div><div class="line">				</div><div class="line">				<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">				UserMapper userMapper</div><div class="line">					= ac.getBean(</div><div class="line">						<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">			</div><div class="line">				User user=userMapper.selectUserByUserName(<span class="string">"陈加兵"</span>);</div><div class="line">				System.out.println(user);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByEmail</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">				AbstractApplicationContext ac</div><div class="line">					= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">						<span class="string">"spring-mvc.xml"</span>,</div><div class="line">						<span class="string">"spring-dao.xml"</span>);</div><div class="line">				</div><div class="line">				<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">				UserMapper userMapper</div><div class="line">					= ac.getBean(</div><div class="line">						<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">			</div><div class="line">				Integer count=userMapper.selectByEmail(<span class="string">"1836581289@163.com"</span>);</div><div class="line">				System.out.println(count);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>, <span class="string">"spring-dao.xml"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper = ac.getBean(<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line"></div><div class="line">		Integer count = userMapper.selectByPhone(<span class="string">"1836581289"</span>);</div><div class="line">		System.out.println(count);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="业务层-service"><a href="#业务层-service" class="headerlink" title="业务层(service)"></a>业务层(service)</h3><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><ul>
<li>在业务层中调用持久层的方法，如果此时的<code>username</code>已经存在了，那么抛出<code>异常</code>，如果不存在就添加即可。</li>
<li>具体的逻辑：<ol>
<li>调用<code>selectUserByUserName(User user)</code>方法判断用户名是否存在，返回对象<code>u</code></li>
<li>判断u是否为<code>null</code></li>
<li>如果为<code>null</code>，调用<code>insertUser(user)</code>方法添加</li>
<li>如果不为null，抛出异常提示<code>controller</code>用户名存在(<code>UserNameAlreadyExistException</code>)</li>
</ol>
</li>
</ul>
<ul>
<li><p>业务层通过<code>抛出异常的信息</code>提示<code>Controller</code>应该处理怎样的结果</p>
<p>​</p>
<p>​</p>
</li>
</ul>
<h4 id="在cn-tedu-store-service-ex包中新建异常类UserNameAlreadyExistException"><a href="#在cn-tedu-store-service-ex包中新建异常类UserNameAlreadyExistException" class="headerlink" title="在cn.tedu.store.service.ex包中新建异常类UserNameAlreadyExistException"></a>在<code>cn.tedu.store.service.ex</code>包中新建异常类<code>UserNameAlreadyExistException</code></h4><ul>
<li>用户名存在的异常</li>
</ul>
<ul>
<li><strong>继承<code>Exception</code>，重写其中的构造方法，那么会在调用的时候会要求捕捉或者抛出，会提示开发者处理。如果继承了<code>RuntimeException</code>,这个是运行时异常，那么在调用的时候是不会提醒开发者捕捉或者抛出异常，因此我们这里要继承<code>Exception</code>这个父类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户名存在抛出的异常</div><div class="line"> * 继承Exception，实现其中的构造方法</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNameAlreadyExistException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message, Throwable cause,</span></span></div><div class="line">			<span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace) &#123;</div><div class="line">		<span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message, cause);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(cause);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-service中新建接口IUserService"><a href="#在cn-tedu-store-service中新建接口IUserService" class="headerlink" title="在cn.tedu.store.service中新建接口IUserService"></a>在<code>cn.tedu.store.service</code>中新建接口<code>IUserService</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理用户业务逻辑的接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * <span class="doctag">@param</span> user User对象</div><div class="line">	 * <span class="doctag">@throws</span> UserNameAlreadyExistException   用户名已经存在抛出的异常</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证邮箱是否存在</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span> 如果=0返回true，邮箱可以使用。如果 &gt;=1返回false，邮箱不可以使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkEmail</span><span class="params">(String email)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证电话号码是否存在</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span> 如果返回true表示电话号码可以使用，如果返回false表示电话号码不可以使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkPhone</span><span class="params">(String phone)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证用户名是否存在</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@return</span>  返回true表示用户名不存在，可以注册，返回false表示用户名已经存在，不可使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-service中新建IUserService接口的实现类UserServiceImpl"><a href="#在cn-tedu-store-service中新建IUserService接口的实现类UserServiceImpl" class="headerlink" title="在cn.tedu.store.service中新建IUserService接口的实现类UserServiceImpl"></a>在<code>cn.tedu.store.service</code>中新建<code>IUserService</code>接口的实现类<code>UserServiceImpl</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * IUserService接口的实现类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */ </div><div class="line"><span class="meta">@Service</span>   <span class="comment">//注解标记，用于spring自动创建对象，类名首字母小写</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</div><div class="line">	<span class="meta">@Resource</span>  <span class="comment">//自动注入对象，自动创建UserMapper对象</span></div><div class="line">	<span class="keyword">private</span> UserMapper userMapper;  <span class="comment">//UseMapper的对象，用于调用操作数据库的方法</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * 1. 调用selectUserByUserName(User user)方法判断用户名是否存在，返回对象u</div><div class="line">	 * 2. 判断u是否为null，</div><div class="line">	 * 3. 如果为null，调用insertUser(user)方法添加</div><div class="line">	 * 4. 如果不为null，抛出异常提示controller用户名存在(UserNameAlreadyExistException)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException </span>&#123;</div><div class="line">		User u=userMapper.selectUserByUserName(user.getUsername());  <span class="comment">//调用usermapper中的方法</span></div><div class="line">		<span class="keyword">if</span> (u!=<span class="keyword">null</span>) &#123;  <span class="comment">//如果u不为null，表示用户名已经存在与数据库中，不可以再次注册了，因此抛出异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNameAlreadyExistException(<span class="string">"用户名已经存在，请重新输入!!!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果u==null，表示用户名不存在，可以添加</span></div><div class="line">			userMapper.insertUser(user);  <span class="comment">//直接调用持久层方法插入数据即可</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//验证邮箱是否存在，返回true表示邮箱可以使用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userMapper.selectByEmail(email)==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//验证电话号码是否可用，如果返回true表示可用，false表示不可用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userMapper.selectByPhone(phone)==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//验证用户名是否存在，返回true表示不存在，可用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">		User user=userMapper.selectUserByUserName(userName);</div><div class="line">		<span class="keyword">return</span> user==<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试service"><a href="#测试service" class="headerlink" title="测试service"></a>测试service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRegistService</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="comment">//加载Spring的配置文件</span></div><div class="line">			AbstractApplicationContext ac</div><div class="line">				= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">					<span class="string">"spring-dao.xml"</span>,</div><div class="line">					<span class="string">"spring-service.xml"</span>);</div><div class="line">			</div><div class="line">			IUserService userService=ac.getBean(<span class="string">"userServiceImpl"</span>,IUserService.class);</div><div class="line">			</div><div class="line">			User user=<span class="keyword">new</span> User();</div><div class="line">			user.setUsername(<span class="string">"郑元梅"</span>);</div><div class="line">			user.setPassword(<span class="string">"12345678"</span>);</div><div class="line">			user.setEmail(<span class="string">"1879626@163.com"</span>);</div><div class="line">			user.setPhone(<span class="string">"138525855"</span>);</div><div class="line">			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				userService.register(user);  <span class="comment">//调用service中的注册方法</span></div><div class="line">			&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">				System.out.println(e.getMessage());  <span class="comment">//输出错误提示信息</span></div><div class="line">			&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckEmailService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkEmail(<span class="string">"187962@163.com"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"邮箱不存在，可以注册"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"邮箱存在，不可以注册"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckPhoneService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkPhone(<span class="string">"1836581289"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"电话号码不存在，可以注册"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"电话号码存在，不可以注册"</span>);</div><div class="line">	&#125;</div><div class="line">       </div><div class="line">   <span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckUserNameService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkUserName(<span class="string">"Jack"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"用户名不存在，，可以使用"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"用户名已经已经存在，不可用"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="控制层-controller"><a href="#控制层-controller" class="headerlink" title="控制层(controller)"></a>控制层(controller)</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ol>
<li>异步验证用户名(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkUserName.do</code></li>
</ol>
</li>
<li>异步验证电话号码(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkPhone.do</code></li>
</ol>
</li>
<li>异步验证邮箱(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkEmail.do</code></li>
</ol>
</li>
<li>显示注册页面 <ol>
<li><code>/user/showRegister.do</code></li>
</ol>
</li>
<li>点击注册按钮，实现注册(异步提交)<ol>
<li><code>/user/register.do</code></li>
<li>在其中还是要检测用户名是否存在，因为当你在前面输入的时候可能检测到的用户名不存在，但是如果另外一个人也用的和你一样的用户名，并且他先提交了，那么此时如果不检查，就会发生冲突了</li>
</ol>
</li>
</ol>
<h4 id="在cn-tedu-store-bean包中新建ResponseResult"><a href="#在cn-tedu-store-bean包中新建ResponseResult" class="headerlink" title="在cn.tedu.store.bean包中新建ResponseResult"></a>在<code>cn.tedu.store.bean</code>包中新建ResponseResult</h4><ul>
<li>封装异步请求结果</li>
<li>其中的<code>T</code>是用来指定<code>泛型</code>的，如果使用<code>ResponseResult&lt;List&lt;User&gt;&gt; responseResult=new ResponseResult&lt;List&lt;User&gt;&gt;();</code>创建对象，那么这个<code>T</code>的泛型就是<code>List&lt;User&gt;</code></li>
<li>如果不需要指定泛型，那么可以使用<code>Void</code>指定即可，那么就不能为<code>data</code>赋值了，因为你的泛型指定了<code>Void</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 封装异步请求的返回的结果类型</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;  泛型，</div><div class="line"> 				用于封装返回数据，如果创建对象为这样ResponseResult&lt;List&lt;User&gt;&gt; 								responseResult=new ResponseResult&lt;List&lt;User&gt;&gt;();</div><div class="line"> * 				那么此时的data类型是List&lt;User&gt;类型的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer state;  <span class="comment">//响应状态码</span></div><div class="line">	<span class="keyword">private</span> String message;   <span class="comment">//响应信息</span></div><div class="line">	<span class="keyword">private</span> T data;  <span class="comment">//响应的数据</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> state;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(Integer state)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.state = state;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.message = message;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> data;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.data = data;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((data == <span class="keyword">null</span>) ? <span class="number">0</span> : data.hashCode());</div><div class="line">		result = prime * result + ((message == <span class="keyword">null</span>) ? <span class="number">0</span> : message.hashCode());</div><div class="line">		result = prime * result + ((state == <span class="keyword">null</span>) ? <span class="number">0</span> : state.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		ResponseResult other = (ResponseResult) obj;</div><div class="line">		<span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.data != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!data.equals(other.data))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.message != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!message.equals(other.message))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.state != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!state.equals(other.state))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"ResponseResult [state="</span> + state + <span class="string">", message="</span> + message</div><div class="line">				+ <span class="string">", data="</span> + data + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-controller中创建UserController类"><a href="#在cn-tedu-store-controller中创建UserController类" class="headerlink" title="在cn.tedu.store.controller中创建UserController类"></a>在<code>cn.tedu.store.controller</code>中创建<code>UserController</code>类</h4><ul>
<li>添加<code>@Controller</code>注解</li>
<li>使用<code>@RequestMapping(&quot;/user&quot;)</code>添加一个二级路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="comment">// 创建Service对象，自动注入</span></div><div class="line">	<span class="keyword">private</span> IUserService userservice;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 显示注册视图 register.jsp</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/showRegister.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">showRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 直接返回一个视图名称即可</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证用用户名，异步请求, 用户名失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkUserName.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkUserName</span><span class="params">(</span></span></div><div class="line">			@RequestParam(<span class="string">"username"</span>) String userName) &#123;</div><div class="line">		System.out.println(userName);</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkUserName(userName); <span class="comment">// 调用service验证方法</span></div><div class="line">		<span class="comment">// 如果falg==true,表示用户名可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);   <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"用户名可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"用户名不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证电话号码，文本框失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkPhone.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkPhone(phone);</div><div class="line">		<span class="comment">// 如果falg==true,表示电话号码可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"电话号码可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"电话号码不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证邮箱地址，文本框失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkEmail.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkEmail(email);</div><div class="line">		<span class="comment">// 如果falg==true,表示邮箱可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"邮箱地址可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"邮箱地址不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 点击提交按异步请求注册</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@param</span> password  密码</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@param</span> phone  电话号码</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/register.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">register</span><span class="params">(@RequestParam(<span class="string">"uname"</span>)</span>String userName,@<span class="title">RequestParam</span><span class="params">(<span class="string">"upwd"</span>)</span>String password,String email,String phone)</span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		</div><div class="line">		User user=<span class="keyword">new</span> User();   <span class="comment">//创建User对象</span></div><div class="line">		user.setUsername(userName);</div><div class="line">		user.setPassword(password);</div><div class="line">		user.setEmail(email);</div><div class="line">		user.setPhone(phone);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			userservice.register(user);  <span class="comment">//调用业务层的注册方法</span></div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置注册成功的状态吗</span></div><div class="line">			result.setMessage(<span class="string">"注册成功"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置注册失败的状态吗</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Regist-jsp页面设计"><a href="#Regist-jsp页面设计" class="headerlink" title="Regist.jsp页面设计"></a>Regist.jsp页面设计</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><ul>
<li>文本框失去焦点发出异步请求验证用户名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器用户名是否已经存在**/</span></div><div class="line">  		 $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkUserName.do?username="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#unamespan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求验证邮箱</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器邮箱是否已经存在**/</span></div><div class="line">      $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkEmail.do?email="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#emailspan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#emailspan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#emailspan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求验证电话号码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器电话号码是否已经存在**/</span></div><div class="line">      $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkPhone.do?phone="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#phonespan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#phonespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#phonespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求实现注册</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发出异步请求</span></div><div class="line">  	 $.ajax(&#123;</div><div class="line">  		 <span class="attr">url</span>:<span class="string">"&lt;%=request.getContextPath()%&gt;/user/register.do"</span>,</div><div class="line">  		 <span class="attr">type</span>:<span class="string">"POST"</span>,</div><div class="line">  		 <span class="attr">data</span>: $(<span class="string">"#form-register"</span>).serialize(),   <span class="comment">//提交表单中的所有数据</span></div><div class="line">  		 dataType:<span class="string">"json"</span>,</div><div class="line">  		 <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  			 <span class="comment">//判断状态码，如果用户已经存在</span></div><div class="line">  			<span class="keyword">if</span>(obj.state==<span class="number">0</span>)&#123;	</div><div class="line">  			<span class="comment">//设置提示语句	</span></div><div class="line">  			$(<span class="string">"#unamespan"</span>).text(obj.message);</div><div class="line">  			$(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">  			&#125;<span class="keyword">else</span>&#123;</div><div class="line">  			 	<span class="comment">//注册成功跳转到登录界面</span></div><div class="line">  			 	<span class="comment">// showLogin.do</span></div><div class="line">  			&#125;</div><div class="line">  		 &#125;</div><div class="line">  	 &#125;);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>新建的异常类最好继承<code>Exception</code>，那么在调用带有抛出异常的信息的service方法会在编辑提示捕捉或者抛出，便于提示开发者完成相应的逻辑</li>
<li><strong>数据库表中的字段是以<code>下划线</code>形式定义的，比如<code>created_user</code>,但是java中的实体类定义的字段的形式是<code>驼峰式</code>的，比如<code>createdUser</code>，那么这样的话，表中的字段和实体类类的属性就不是一一对应了，因此在查询数据的时候，需要对返回结果起和实体类字段一样的别名，否则将不能成功赋值</strong></li>
<li>在写<code>XXMapper.xml</code>文件的时候,<code>select</code>节点是一定要有返回值类型的<code>resultType</code>或者<code>resultMap</code>的，即使是基本类型</li>
<li>在<code>service</code>中，如果逻辑比较简单，比如验证邮箱，验证号码等，那么不需要抛出异常，只需要定义返回值提示<code>Controller层</code>即可</li>
</ol>
<ul>
<li>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=35idjy1iqdk4g" target="_blank" rel="external">https://cloud.tencent.com/developer/support-plan?invite_code=35idjy1iqdk4g</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户管理模块之用户注册&quot;&gt;&lt;a href=&quot;#用户管理模块之用户注册&quot; class=&quot;headerlink&quot; title=&quot;用户管理模块之用户注册&quot;&gt;&lt;/a&gt;用户管理模块之用户注册&lt;/h1&gt;&lt;h2 id=&quot;实现的功能&quot;&gt;&lt;a href=&quot;#实现的功能&quot; class
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>搭建工程</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E6%90%AD%E5%BB%BA%E5%B7%A5%E7%A8%8B/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/搭建工程/</id>
    <published>2018-05-09T00:46:52.000Z</published>
    <updated>2018-05-09T00:47:16.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul>
<li><code>Spring + SpringMVC + Mybatis</code>  ———–  <code>SSM</code></li>
</ul>
<h2 id="创建工程步骤"><a href="#创建工程步骤" class="headerlink" title="创建工程步骤"></a>创建工程步骤</h2><ul>
<li>创建<code>Maven</code>工程</li>
<li>添加<code>web.xml</code>和<code>tomcat</code>运行环境</li>
<li>创建包的结构<ul>
<li>实体类的包：<code>cn.tedu.store.bean</code></li>
<li>控制器层：<code>cn.tedu.store.controller</code></li>
<li>业务层 : <code>cn.tedu.store.service</code></li>
<li>持久层 ：<code>cn.tedu.store.mapper</code></li>
</ul>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/storepackage.png" alt="包的结构"></p>
<ul>
<li>添加依赖<code>pom.xml</code><ul>
<li><code>spring-webmvc</code></li>
<li><code>spring-jdbc</code></li>
<li><code>mybatis</code></li>
<li><code>mybatis-spring</code></li>
<li><code>commons-dbcp</code></li>
<li><code>jackson</code></li>
<li><code>junit</code></li>
<li><code>jstl</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring 整合jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MySQL驱动jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP连接池--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jackson，自动转换为JSON数据 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jstl标签库 用于jsp页面标签 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>添加配置文件(<code>src/main/resource</code>文件下)</p>
<ul>
<li>创建一个新的文件夹 <code>mappers</code>，存放<code>mybaits</code>的映射文件： <code>XXXMapper.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- namespace指定的UserMapper的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.UserMapper"</span>&gt;</span></div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
<ul>
<li>创建一个<code>db.properties</code>文件，其中存放的是<code>dbcp</code>连接池的配置属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/tedu_store?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=2</div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<p>​</p>
<ul>
<li>创建一个<code>spring-mvc.xml</code>配置文件，用于配置<code>springmvc</code>的配置信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.controller"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置ViewResolver视图解析器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/web/"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置驱动，用于@ResponseBody的使用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 其中还需要定义拦截器和其他的配置 --&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
<ul>
<li>创建一个<code>spring-dao.xml</code>配置文件，用于配置数据库的链接信息</li>
</ul>
<p>​</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.mapper"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 加载db.properties,其中定义了数据库的配置信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置MapperScannerConfigurer --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 用于配置持久层接口在哪里，指定mapper的包，spring会自动为我们创建这个XXXMapper接口的对象，名称为类名首字母小写</span></div><div class="line">		--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.tedu.store.mapper"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line"></div><div class="line"> 	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line"></div><div class="line"> 		<span class="comment">&lt;!-- 用于配置数据库连接池 --&gt;</span></div><div class="line"></div><div class="line"> 		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line"></div><div class="line"> 		<span class="comment">&lt;!-- 用于配置持久层映射文件在哪里,所有的xml文件，使用通配符 --&gt;</span></div><div class="line"></div><div class="line"> 		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mappers/*.xml"</span> /&gt;</span></div><div class="line"></div><div class="line"> 	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>创建一个<code>spring-service.xml</code>配置文件，用于配置业务逻辑信息</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.service"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div></pre></td></tr></table></figure>
<p>  ​</p>
<ul>
<li>修改<code>web.xml</code>文件，添加前端控制器<code>DispatcherServlet</code>和解决中文乱码的过滤器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置中文乱码过滤器 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 针对所有的路径都需要过滤 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置前端控制器DispathcerServlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="文件约束"><a href="#文件约束" class="headerlink" title="文件约束"></a>文件约束</h2><ul>
<li><code>spring</code>和<code>springmvc</code>配置文件的约束</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>XXXMapper.xml</code>的约束</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建工程&quot;&gt;&lt;a href=&quot;#搭建工程&quot; class=&quot;headerlink&quot; title=&quot;搭建工程&quot;&gt;&lt;/a&gt;搭建工程&lt;/h1&gt;&lt;h2 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>商城网站之模块设计</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99%E4%B9%8B%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/商城网站之模块设计/</id>
    <published>2018-05-09T00:46:07.000Z</published>
    <updated>2018-05-09T00:46:35.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM-商城"><a href="#SSM-商城" class="headerlink" title="SSM - 商城"></a>SSM - 商城</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul>
<li>注册</li>
<li>登录</li>
<li>个人信息修改</li>
</ul>
<h3 id="地址管理"><a href="#地址管理" class="headerlink" title="地址管理"></a>地址管理</h3><ul>
<li>添加收货地址</li>
<li>查询所有的收货地址</li>
<li>修改</li>
<li>删除</li>
</ul>
<h3 id="商品"><a href="#商品" class="headerlink" title="商品"></a>商品</h3><ul>
<li>商品分类</li>
<li>商品展示</li>
<li>商品详情</li>
</ul>
<h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><ul>
<li>将商品添加到购物车</li>
<li>购物车管理</li>
</ul>
<h2 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h2><ul>
<li>显示订单</li>
<li>付款</li>
</ul>
<h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><ol>
<li>需求分析</li>
<li>概要设计</li>
<li>详细设计</li>
<li>编码</li>
<li>测试</li>
<li>交付</li>
<li>维护</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSM-商城&quot;&gt;&lt;a href=&quot;#SSM-商城&quot; class=&quot;headerlink&quot; title=&quot;SSM - 商城&quot;&gt;&lt;/a&gt;SSM - 商城&lt;/h1&gt;&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
</feed>
