<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-05-09T07:04:05.984Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户管理模块之用户注册</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E4%B9%8B%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/用户管理模块之用户注册/</id>
    <published>2018-05-09T00:47:43.000Z</published>
    <updated>2018-05-09T07:04:05.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理模块之用户注册"><a href="#用户管理模块之用户注册" class="headerlink" title="用户管理模块之用户注册"></a>用户管理模块之用户注册</h1><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul>
<li>注册<ul>
<li>验证用户名是否已经存在</li>
<li>验证邮箱</li>
<li>验证电话号码</li>
</ul>
</li>
<li>登录</li>
<li>个人信息修改</li>
</ul>
<h2 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h2><ul>
<li>创建数据库和表<ul>
<li>需要注意的是：一些字段不能为空，但是我们在设计表的时候不需要设计，只需要在前端设计表单的时候检查字段是否为空即可。</li>
<li>字段<code>修改的人</code>，<code>修改的时间</code>，<code>创建的人</code>，<code>创建的时间</code>这四个字段建议创建，便于后面管理</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> tedu_store;</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</div><div class="line">                    username <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">unique</span>,</div><div class="line">                   	<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>),email <span class="built_in">varchar</span>(<span class="number">50</span>),</div><div class="line">                   	phone <span class="built_in">varchar</span>(<span class="number">32</span>),</div><div class="line">                   	image <span class="built_in">varchar</span>(<span class="number">100</span>),        </div><div class="line">                    gender <span class="built_in">int</span>(<span class="number">1</span>),             //<span class="number">0</span>表示男，<span class="number">1</span>表示女</div><div class="line">                    created_user <span class="built_in">varchar</span>(<span class="number">50</span>),  //创建表的人</div><div class="line">                    created_time <span class="built_in">date</span>,         //创建的时间</div><div class="line">                    modified_user <span class="built_in">varchar</span>(<span class="number">50</span>),   //修改的人</div><div class="line">                    modified_time <span class="built_in">date</span>           //修改的时间</div><div class="line">                   )<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</div></pre></td></tr></table></figure>
<p><img src="http://ono60m7tl.bkt.clouddn.com/storeUser.png" alt="User表"></p>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><ul>
<li>变量类型应该是使用<code>包装类型</code>，比如<code>Integer</code></li>
<li>变量应该是<code>驼峰式</code>的，即不应该使用<code>下划线</code></li>
<li><code>无参</code>，<code>全参</code>构造方法</li>
<li><code>set</code>,<code>get</code>方法</li>
<li><code>hashCode</code> ,<code>equals</code>方法重写</li>
<li>实现序列化接口,生成安全码</li>
<li>重写<code>toString</code>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户的实体类</div><div class="line"> * 无参，全参构造方法</div><div class="line"> * set,get方法</div><div class="line"> * hashCode equals方法重写</div><div class="line"> * 实现序列化接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5260484517511749238L</span>;  <span class="comment">//安全码</span></div><div class="line">	<span class="keyword">private</span> Integer id;  <span class="comment">//id主键</span></div><div class="line">	<span class="keyword">private</span> String username;  <span class="comment">//用户名</span></div><div class="line">	<span class="keyword">private</span> String password;  <span class="comment">//密码</span></div><div class="line">	<span class="keyword">private</span> String email;   <span class="comment">//邮箱</span></div><div class="line">	<span class="keyword">private</span> String phone;   <span class="comment">//电话号码</span></div><div class="line">	<span class="keyword">private</span> String image;   <span class="comment">//图片的地址</span></div><div class="line">	<span class="keyword">private</span> Integer  gender;  <span class="comment">//性别</span></div><div class="line">	<span class="keyword">private</span> String createdUser;  <span class="comment">//创建表的人</span></div><div class="line">	<span class="keyword">private</span> Date createdTime;   <span class="comment">//创建表的时间</span></div><div class="line">	<span class="keyword">private</span> String modifiedUser;   <span class="comment">//修改表的人</span></div><div class="line">	<span class="keyword">private</span> Date modifiedTime;   <span class="comment">//修改表的时间</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.email = email;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.phone = phone;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> image;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.image = image;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.gender = gender;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCreatedUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> createdUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedUser</span><span class="params">(String createdUser)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.createdUser = createdUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> createdTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedTime</span><span class="params">(Date createdTime)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.createdTime = createdTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getModifiedUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> modifiedUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifiedUser</span><span class="params">(String modifiedUser)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.modifiedUser = modifiedUser;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getModifiedTime</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> modifiedTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifiedTime</span><span class="params">(Date modifiedTime)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.modifiedTime = modifiedTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result</div><div class="line">				+ ((createdTime == <span class="keyword">null</span>) ? <span class="number">0</span> : createdTime.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((createdUser == <span class="keyword">null</span>) ? <span class="number">0</span> : createdUser.hashCode());</div><div class="line">		result = prime * result + ((email == <span class="keyword">null</span>) ? <span class="number">0</span> : email.hashCode());</div><div class="line">		result = prime * result + ((gender == <span class="keyword">null</span>) ? <span class="number">0</span> : gender.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((image == <span class="keyword">null</span>) ? <span class="number">0</span> : image.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((modifiedTime == <span class="keyword">null</span>) ? <span class="number">0</span> : modifiedTime.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((modifiedUser == <span class="keyword">null</span>) ? <span class="number">0</span> : modifiedUser.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((password == <span class="keyword">null</span>) ? <span class="number">0</span> : password.hashCode());</div><div class="line">		result = prime * result + ((phone == <span class="keyword">null</span>) ? <span class="number">0</span> : phone.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((username == <span class="keyword">null</span>) ? <span class="number">0</span> : username.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		User other = (User) obj;</div><div class="line">		<span class="keyword">if</span> (createdTime == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.createdTime != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!createdTime.equals(other.createdTime))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (createdUser == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.createdUser != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!createdUser.equals(other.createdUser))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (email == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.email != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!email.equals(other.email))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (gender == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.gender != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!gender.equals(other.gender))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.image != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!image.equals(other.image))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (modifiedTime == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.modifiedTime != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!modifiedTime.equals(other.modifiedTime))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (modifiedUser == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.modifiedUser != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!modifiedUser.equals(other.modifiedUser))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.password != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(other.password))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (phone == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.phone != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!phone.equals(other.phone))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.username != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!username.equals(other.username))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span></div><div class="line">				+ password + <span class="string">", email="</span> + email + <span class="string">", phone="</span> + phone</div><div class="line">				+ <span class="string">", image="</span> + image + <span class="string">", gender="</span> + gender + <span class="string">", createdUser="</span></div><div class="line">				+ createdUser + <span class="string">", createdTime="</span> + createdTime</div><div class="line">				+ <span class="string">", modifiedUser="</span> + modifiedUser + <span class="string">", modifiedTime="</span></div><div class="line">				+ modifiedTime + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h3><ul>
<li>提交的<code>username</code>，<code>password</code>，<code>email</code>，<code>phone</code>，其中<code>username</code>不能重复，因此需要判断用户名是否存在</li>
<li>上面的四个字段都不能为<code>空</code>，虽然在表中没有设计，但是在<code>JSP</code>页面使用了<code>js</code>控制了</li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li><p>验证用户名是否存在(异步Ajax)</p>
<ol>
<li>持久层需要定义一个方法：根据用户名查找用户信息，如果返回的值不为<code>null</code>表示用户名已经存在，如果不存在表示可以注册</li>
<li><code>service层</code>需要验证查询的结果是否为<code>null</code>，如果为空，返回<code>true</code>，表示用户名不存在，那么可以使用这个用户名注册，如果不为<code>null</code>，返回<code>false</code>，那么不可以使用这个用户名注册</li>
</ol>
</li>
<li><p>验证邮箱是否存在(异步Ajax)</p>
<ol>
<li>持久层需要定义一个方法：根据邮箱查询人数，那么如果<code>人数 &gt;=1</code>表示已经存在该邮箱，否则不存在，可以注册</li>
<li><code>service层</code>需要验证返回的<code>人数是否等于0</code>,如果不是，返回<code>false</code>表示邮箱已经存在，不能使用，如果返回<code>true</code>表示邮箱不存在，可以使用该邮箱注册</li>
</ol>
</li>
<li><p>验证电话号码是否存在(异步Ajax)</p>
<ol>
<li>持久层定义一个方法： 根据电话号码查询人数，那么如果<code>人数 &gt;=1</code>表示已经存在该号码，否则不存在，可以注册</li>
<li><code>service</code>层需要验证返回的<code>人数是否等于0</code>，如果不是，返回<code>false</code>表示电话号码已经存在，不能使用这个号码注册，如果返回<code>true</code>表示号码不存在，可以使用这个号码注册</li>
</ol>
<p>​</p>
</li>
</ol>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ul>
<li><code>regist.jsp</code>表单提交  ———&gt; <code>Controller</code>中对应的处理请求的方法 ———–&gt; <code>service</code>层中业务逻辑   ——–&gt; <code>持久</code>层，操作数据库，返回数据给<code>service</code> </li>
</ul>
<h3 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h3><ul>
<li>我们开发的顺序应该是和执行顺序相反，这样便于编写代码</li>
<li>即是： <code>持久层mapper</code>操作数据库 ———&gt; <code>Service层</code>业务逻辑层 —————-&gt; <code>Controller层</code> ———————&gt; <code>JSP</code></li>
</ul>
<h3 id="持久层-mapper或者dao"><a href="#持久层-mapper或者dao" class="headerlink" title="持久层(mapper或者dao)"></a>持久层(mapper或者dao)</h3><h4 id="在cn-tedu-store-mapper包下创建UsreMapper接口"><a href="#在cn-tedu-store-mapper包下创建UsreMapper接口" class="headerlink" title="在cn.tedu.store.mapper包下创建UsreMapper接口"></a>在<code>cn.tedu.store.mapper</code>包下创建UsreMapper接口</h4><ul>
<li>其中实现<code>插入用户</code>的功能</li>
<li>其中需要保证<code>用户名</code>唯一，因此需要验证用户名是否存在，那么需要一个方法根据用户名查找用户</li>
<li><strong>注意：如果表中的字段和实体类中的字段不一致，那么在查询返回字段的时候一定要起一个别名，这个别名要和实体类中的字段相同，否则不能成功调用<code>set</code>方法为指定字段赋值</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**	</span></div><div class="line"> * 用户类的mapper层</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加用户信息</div><div class="line">	 * <span class="doctag">@param</span> user User对象 其中封装的是用户的信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 根据用户名查找对象</div><div class="line">	 * <span class="doctag">@param</span> username  用户名</div><div class="line">	 * <span class="doctag">@return</span>  如果存在返回User对象，否则返回null</div><div class="line">	 */</div><div class="line">	<span class="function">User <span class="title">selectUserByUserName</span><span class="params">(String username)</span></span>;</div><div class="line">	</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 通过邮箱查询</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span> 如果返回的数&gt;=1表示已经存在，返回0表示没有</div><div class="line">	 */</div><div class="line">	<span class="function">Integer <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 通过电话号码查询</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span>  如果返回的数&gt;=1表示已经存在这个电话号码，如果返回0表示不存在这个电话号码可以注册</div><div class="line">	 * 	 */</div><div class="line">	<span class="function">Integer <span class="title">selectByPhone</span><span class="params">(String phone)</span></span>;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在src-main-resource-mapper文件夹新建UserMapper-xml"><a href="#在src-main-resource-mapper文件夹新建UserMapper-xml" class="headerlink" title="在src/main/resource/mapper文件夹新建UserMapper.xml"></a>在<code>src/main/resource/mapper</code>文件夹新建<code>UserMapper.xml</code></h4><ul>
<li><code>&lt;mapper namespace=&quot;&quot;&gt;</code>写的是<code>UserMapper</code>的全类名</li>
</ul>
<ul>
<li>在其中添加一个<code>insert</code>节点，用于执行插入语句</li>
<li>添加一个<code>select</code>用于根据用户名查询用户信息，<strong>其中返回的结果字段如果和实体类属性不一致，那么需要起别名和实体类属性对应</strong></li>
<li>添加一个<code>select</code>语句根据邮箱<code>email</code>查询，返回的是<code>人数</code>，用于验证邮箱</li>
<li>添加一个<code>select</code>语句根据电话号码<code>phone</code>查询，返回的是人数，用于验证电话号码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- namespace指定的UserMapper接口的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.UserMapper"</span>&gt;</span></div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- </span></div><div class="line"> 		对应的方法： void insertUser(User user);</div><div class="line"> 		功能 ： 添加用户信息</div><div class="line"> 		返回值： 默认返回的是受影响的行数，不需要写返回类型，除非是select语句一定要写返回类型resultType或者resultMap</div><div class="line"> 		id ： 是UserMapper.java接口中的方法名称</div><div class="line"> 		parameterType ： 参数类型，写的是全类名。这里如果是基本类型，比如String,Integer可以不用写，如果是实体类对象最好是写上</div><div class="line">  --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line"> 	insert into 			t_user(username,password,email,phone,image,gender,created_user,created_time,modified_user,modified_time)</div><div class="line"> 	values(#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;phone&#125;,#&#123;image&#125;,#&#123;gender&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;)</div><div class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"> </div><div class="line"> </div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"> 	User selectUserByUserName(String username);</div><div class="line"> 	根据用户名查询用户信息，如果存在返回对象，否则返回null</div><div class="line"> 	resultType：返回值类型</div><div class="line"> 	如果表中的字段和实体类中的字段不相同，那么需要指定别名，否则不能成功赋值</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByUserName"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.store.bean.User"</span>&gt;</span></div><div class="line">  	select id,username,password,email,gender,image,</div><div class="line">  	phone,created_user as createdUser,</div><div class="line">  	created_time as createdTime,</div><div class="line">  	modified_user as modifiedUser,</div><div class="line">  	modified_time as modifiedTime</div><div class="line">  	from t_user where username=#&#123;username&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line">     </div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line">  	Integer selectByEmail(String email);</div><div class="line">  	功能： 通过邮箱查找</div><div class="line">  	resultType : 返回的是Integer类型的，需要写全类名，在select语句中必须定义返回值类型</div><div class="line">   --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByEmail"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">  	select count(*) from t_user where email=#&#123;email&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line">   </div><div class="line">   <span class="comment">&lt;!-- </span></div><div class="line">  	Integer selectByPhone(String phone);</div><div class="line">  	功能： 通过电话号码查询，返回的是人数</div><div class="line">   --&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPhone"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">   		select count(*) from t_user where phone=#&#123;phone&#125;</div><div class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">     </div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		</div><div class="line">		User user =<span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"郑元梅"</span>);</div><div class="line">		user.setPassword(<span class="string">"123456"</span>);</div><div class="line">		user.setEmail(<span class="string">"1836581289@163.com"</span>);</div><div class="line">		user.setPhone(<span class="string">"1836581289"</span>);		</div><div class="line">		ac.close();</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserByUserName</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">				AbstractApplicationContext ac</div><div class="line">					= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">						<span class="string">"spring-mvc.xml"</span>,</div><div class="line">						<span class="string">"spring-dao.xml"</span>);</div><div class="line">				</div><div class="line">				<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">				UserMapper userMapper</div><div class="line">					= ac.getBean(</div><div class="line">						<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">			</div><div class="line">				User user=userMapper.selectUserByUserName(<span class="string">"陈加兵"</span>);</div><div class="line">				System.out.println(user);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByEmail</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">				AbstractApplicationContext ac</div><div class="line">					= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">						<span class="string">"spring-mvc.xml"</span>,</div><div class="line">						<span class="string">"spring-dao.xml"</span>);</div><div class="line">				</div><div class="line">				<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">				UserMapper userMapper</div><div class="line">					= ac.getBean(</div><div class="line">						<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">			</div><div class="line">				Integer count=userMapper.selectByEmail(<span class="string">"1836581289@163.com"</span>);</div><div class="line">				System.out.println(count);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>, <span class="string">"spring-dao.xml"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper = ac.getBean(<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line"></div><div class="line">		Integer count = userMapper.selectByPhone(<span class="string">"1836581289"</span>);</div><div class="line">		System.out.println(count);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="业务层-service"><a href="#业务层-service" class="headerlink" title="业务层(service)"></a>业务层(service)</h3><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><ul>
<li>在业务层中调用持久层的方法，如果此时的<code>username</code>已经存在了，那么抛出<code>异常</code>，如果不存在就添加即可。</li>
<li>具体的逻辑：<ol>
<li>调用<code>selectUserByUserName(User user)</code>方法判断用户名是否存在，返回对象<code>u</code></li>
<li>判断u是否为<code>null</code></li>
<li>如果为<code>null</code>，调用<code>insertUser(user)</code>方法添加</li>
<li>如果不为null，抛出异常提示<code>controller</code>用户名存在(<code>UserNameAlreadyExistException</code>)</li>
</ol>
</li>
</ul>
<ul>
<li><p>业务层通过<code>抛出异常的信息</code>提示<code>Controller</code>应该处理怎样的结果</p>
<p>​</p>
<p>​</p>
</li>
</ul>
<h4 id="在cn-tedu-store-service-ex包中新建异常类UserNameAlreadyExistException"><a href="#在cn-tedu-store-service-ex包中新建异常类UserNameAlreadyExistException" class="headerlink" title="在cn.tedu.store.service.ex包中新建异常类UserNameAlreadyExistException"></a>在<code>cn.tedu.store.service.ex</code>包中新建异常类<code>UserNameAlreadyExistException</code></h4><ul>
<li>用户名存在的异常</li>
</ul>
<ul>
<li><strong>继承<code>Exception</code>，重写其中的构造方法，那么会在调用的时候会要求捕捉或者抛出，会提示开发者处理。如果继承了<code>RuntimeException</code>,这个是运行时异常，那么在调用的时候是不会提醒开发者捕捉或者抛出异常，因此我们这里要继承<code>Exception</code>这个父类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户名存在抛出的异常</div><div class="line"> * 继承Exception，实现其中的构造方法</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNameAlreadyExistException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message, Throwable cause,</span></span></div><div class="line">			<span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace) &#123;</div><div class="line">		<span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message, cause);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserNameAlreadyExistException</span><span class="params">(Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(cause);</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-service中新建接口IUserService"><a href="#在cn-tedu-store-service中新建接口IUserService" class="headerlink" title="在cn.tedu.store.service中新建接口IUserService"></a>在<code>cn.tedu.store.service</code>中新建接口<code>IUserService</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理用户业务逻辑的接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * <span class="doctag">@param</span> user User对象</div><div class="line">	 * <span class="doctag">@throws</span> UserNameAlreadyExistException   用户名已经存在抛出的异常</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证邮箱是否存在</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span> 如果=0返回true，邮箱可以使用。如果 &gt;=1返回false，邮箱不可以使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkEmail</span><span class="params">(String email)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证电话号码是否存在</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span> 如果返回true表示电话号码可以使用，如果返回false表示电话号码不可以使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkPhone</span><span class="params">(String phone)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 验证用户名是否存在</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@return</span>  返回true表示用户名不存在，可以注册，返回false表示用户名已经存在，不可使用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">checkUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-service中新建IUserService接口的实现类UserServiceImpl"><a href="#在cn-tedu-store-service中新建IUserService接口的实现类UserServiceImpl" class="headerlink" title="在cn.tedu.store.service中新建IUserService接口的实现类UserServiceImpl"></a>在<code>cn.tedu.store.service</code>中新建<code>IUserService</code>接口的实现类<code>UserServiceImpl</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * IUserService接口的实现类</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */ </div><div class="line"><span class="meta">@Service</span>   <span class="comment">//注解标记，用于spring自动创建对象，类名首字母小写</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</div><div class="line">	<span class="meta">@Resource</span>  <span class="comment">//自动注入对象，自动创建UserMapper对象</span></div><div class="line">	<span class="keyword">private</span> UserMapper userMapper;  <span class="comment">//UseMapper的对象，用于调用操作数据库的方法</span></div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 注册</div><div class="line">	 * 1. 调用selectUserByUserName(User user)方法判断用户名是否存在，返回对象u</div><div class="line">	 * 2. 判断u是否为null，</div><div class="line">	 * 3. 如果为null，调用insertUser(user)方法添加</div><div class="line">	 * 4. 如果不为null，抛出异常提示controller用户名存在(UserNameAlreadyExistException)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UserNameAlreadyExistException </span>&#123;</div><div class="line">		User u=userMapper.selectUserByUserName(user.getUsername());  <span class="comment">//调用usermapper中的方法</span></div><div class="line">		<span class="keyword">if</span> (u!=<span class="keyword">null</span>) &#123;  <span class="comment">//如果u不为null，表示用户名已经存在与数据库中，不可以再次注册了，因此抛出异常</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNameAlreadyExistException(<span class="string">"用户名已经存在，请重新输入!!!"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//如果u==null，表示用户名不存在，可以添加</span></div><div class="line">			userMapper.insertUser(user);  <span class="comment">//直接调用持久层方法插入数据即可</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//验证邮箱是否存在，返回true表示邮箱可以使用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userMapper.selectByEmail(email)==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//验证电话号码是否可用，如果返回true表示可用，false表示不可用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> userMapper.selectByPhone(phone)==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">//验证用户名是否存在，返回true表示不存在，可用</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">		User user=userMapper.selectUserByUserName(userName);</div><div class="line">		<span class="keyword">return</span> user==<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试service"><a href="#测试service" class="headerlink" title="测试service"></a>测试service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRegistService</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="comment">//加载Spring的配置文件</span></div><div class="line">			AbstractApplicationContext ac</div><div class="line">				= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">					<span class="string">"spring-dao.xml"</span>,</div><div class="line">					<span class="string">"spring-service.xml"</span>);</div><div class="line">			</div><div class="line">			IUserService userService=ac.getBean(<span class="string">"userServiceImpl"</span>,IUserService.class);</div><div class="line">			</div><div class="line">			User user=<span class="keyword">new</span> User();</div><div class="line">			user.setUsername(<span class="string">"郑元梅"</span>);</div><div class="line">			user.setPassword(<span class="string">"12345678"</span>);</div><div class="line">			user.setEmail(<span class="string">"1879626@163.com"</span>);</div><div class="line">			user.setPhone(<span class="string">"138525855"</span>);</div><div class="line">			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				userService.register(user);  <span class="comment">//调用service中的注册方法</span></div><div class="line">			&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">				System.out.println(e.getMessage());  <span class="comment">//输出错误提示信息</span></div><div class="line">			&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckEmailService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkEmail(<span class="string">"187962@163.com"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"邮箱不存在，可以注册"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"邮箱存在，不可以注册"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckPhoneService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkPhone(<span class="string">"1836581289"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"电话号码不存在，可以注册"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"电话号码存在，不可以注册"</span>);</div><div class="line">	&#125;</div><div class="line">       </div><div class="line">   <span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckUserNameService</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-dao.xml"</span>, <span class="string">"spring-service.xml"</span>);</div><div class="line"></div><div class="line">	IUserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>,</div><div class="line">			IUserService.class);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userService.checkUserName(<span class="string">"Jack"</span>)) &#123;</div><div class="line">		System.out.println(<span class="string">"用户名不存在，，可以使用"</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		System.out.println(<span class="string">"用户名已经已经存在，不可用"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="控制层-controller"><a href="#控制层-controller" class="headerlink" title="控制层(controller)"></a>控制层(controller)</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ol>
<li>异步验证用户名(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkUserName.do</code></li>
</ol>
</li>
<li>异步验证电话号码(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkPhone.do</code></li>
</ol>
</li>
<li>异步验证邮箱(文本框失去焦点发出异步请求)<ol>
<li><code>/user/checkEmail.do</code></li>
</ol>
</li>
<li>显示注册页面 <ol>
<li><code>/user/showRegister.do</code></li>
</ol>
</li>
<li>点击注册按钮，实现注册(异步提交)<ol>
<li><code>/user/register.do</code></li>
<li>在其中还是要检测用户名是否存在，因为当你在前面输入的时候可能检测到的用户名不存在，但是如果另外一个人也用的和你一样的用户名，并且他先提交了，那么此时如果不检查，就会发生冲突了</li>
</ol>
</li>
</ol>
<h4 id="在cn-tedu-store-bean包中新建ResponseResult"><a href="#在cn-tedu-store-bean包中新建ResponseResult" class="headerlink" title="在cn.tedu.store.bean包中新建ResponseResult"></a>在<code>cn.tedu.store.bean</code>包中新建ResponseResult</h4><ul>
<li>封装异步请求结果</li>
<li>其中的<code>T</code>是用来指定<code>泛型</code>的，如果使用<code>ResponseResult&lt;List&lt;User&gt;&gt; responseResult=new ResponseResult&lt;List&lt;User&gt;&gt;();</code>创建对象，那么这个<code>T</code>的泛型就是<code>List&lt;User&gt;</code></li>
<li>如果不需要指定泛型，那么可以使用<code>Void</code>指定即可，那么就不能为<code>data</code>赋值了，因为你的泛型指定了<code>Void</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 封装异步请求的返回的结果类型</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;  泛型，</div><div class="line"> 				用于封装返回数据，如果创建对象为这样ResponseResult&lt;List&lt;User&gt;&gt; 								responseResult=new ResponseResult&lt;List&lt;User&gt;&gt;();</div><div class="line"> * 				那么此时的data类型是List&lt;User&gt;类型的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer state;  <span class="comment">//响应状态码</span></div><div class="line">	<span class="keyword">private</span> String message;   <span class="comment">//响应信息</span></div><div class="line">	<span class="keyword">private</span> T data;  <span class="comment">//响应的数据</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> state;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(Integer state)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.state = state;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> message;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.message = message;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> data;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.data = data;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((data == <span class="keyword">null</span>) ? <span class="number">0</span> : data.hashCode());</div><div class="line">		result = prime * result + ((message == <span class="keyword">null</span>) ? <span class="number">0</span> : message.hashCode());</div><div class="line">		result = prime * result + ((state == <span class="keyword">null</span>) ? <span class="number">0</span> : state.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		ResponseResult other = (ResponseResult) obj;</div><div class="line">		<span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.data != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!data.equals(other.data))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.message != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!message.equals(other.message))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.state != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!state.equals(other.state))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"ResponseResult [state="</span> + state + <span class="string">", message="</span> + message</div><div class="line">				+ <span class="string">", data="</span> + data + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在cn-tedu-store-controller中创建UserController类"><a href="#在cn-tedu-store-controller中创建UserController类" class="headerlink" title="在cn.tedu.store.controller中创建UserController类"></a>在<code>cn.tedu.store.controller</code>中创建<code>UserController</code>类</h4><ul>
<li>添加<code>@Controller</code>注解</li>
<li>使用<code>@RequestMapping(&quot;/user&quot;)</code>添加一个二级路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="comment">// 创建Service对象，自动注入</span></div><div class="line">	<span class="keyword">private</span> IUserService userservice;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 显示注册视图 register.jsp</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/showRegister.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">showRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"register"</span>; <span class="comment">// 直接返回一个视图名称即可</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证用用户名，异步请求, 用户名失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkUserName.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkUserName</span><span class="params">(</span></span></div><div class="line">			@RequestParam(<span class="string">"username"</span>) String userName) &#123;</div><div class="line">		System.out.println(userName);</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkUserName(userName); <span class="comment">// 调用service验证方法</span></div><div class="line">		<span class="comment">// 如果falg==true,表示用户名可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);   <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"用户名可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"用户名不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证电话号码，文本框失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> phone 电话号码</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkPhone.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkPhone(phone);</div><div class="line">		<span class="comment">// 如果falg==true,表示电话号码可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"电话号码可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"电话号码不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 验证邮箱地址，文本框失去焦点发出异步请求</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/checkEmail.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">checkEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		<span class="keyword">boolean</span> flag = userservice.checkEmail(email);</div><div class="line">		<span class="comment">// 如果falg==true,表示邮箱可用</span></div><div class="line">		<span class="keyword">if</span> (flag) &#123;</div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置响应码</span></div><div class="line">			result.setMessage(<span class="string">"邮箱地址可以使用"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			result.setState(<span class="number">0</span>);</div><div class="line">			result.setMessage(<span class="string">"邮箱地址不可以使用"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 点击提交按异步请求注册</div><div class="line">	 * <span class="doctag">@param</span> userName  用户名</div><div class="line">	 * <span class="doctag">@param</span> password  密码</div><div class="line">	 * <span class="doctag">@param</span> email  邮箱地址</div><div class="line">	 * <span class="doctag">@param</span> phone  电话号码</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/register.do"</span>)</div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ResponseResult&lt;Void&gt; <span class="title">register</span><span class="params">(@RequestParam(<span class="string">"uname"</span>)</span>String userName,@<span class="title">RequestParam</span><span class="params">(<span class="string">"upwd"</span>)</span>String password,String email,String phone)</span>&#123;</div><div class="line">		ResponseResult&lt;Void&gt; result = <span class="keyword">new</span> ResponseResult&lt;Void&gt;(); <span class="comment">// 创建结果集对象</span></div><div class="line">		</div><div class="line">		User user=<span class="keyword">new</span> User();   <span class="comment">//创建User对象</span></div><div class="line">		user.setUsername(userName);</div><div class="line">		user.setPassword(password);</div><div class="line">		user.setEmail(email);</div><div class="line">		user.setPhone(phone);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			userservice.register(user);  <span class="comment">//调用业务层的注册方法</span></div><div class="line">			result.setState(<span class="number">1</span>);  <span class="comment">//设置注册成功的状态吗</span></div><div class="line">			result.setMessage(<span class="string">"注册成功"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (UserNameAlreadyExistException e) &#123;</div><div class="line">			result.setState(<span class="number">0</span>);  <span class="comment">//设置注册失败的状态吗</span></div><div class="line">			result.setMessage(e.getMessage());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Regist-jsp页面设计"><a href="#Regist-jsp页面设计" class="headerlink" title="Regist.jsp页面设计"></a>Regist.jsp页面设计</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><ul>
<li>文本框失去焦点发出异步请求验证用户名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器用户名是否已经存在**/</span></div><div class="line">  		 $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkUserName.do?username="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#unamespan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求验证邮箱</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器邮箱是否已经存在**/</span></div><div class="line">      $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkEmail.do?email="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#emailspan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#emailspan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#emailspan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求验证电话号码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**发起异步GET请求，询问服务器电话号码是否已经存在**/</span></div><div class="line">      $.get(<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkPhone.do?phone="</span>+data,<span class="function"><span class="keyword">function</span>(<span class="params">d,status,xhr</span>)</span>&#123;</div><div class="line">    	  <span class="comment">//如果响应成功</span></div><div class="line">    	  <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">    		  $(<span class="string">"#phonespan"</span>).text(d.message);  <span class="comment">//设置提示内容</span></div><div class="line">    		  <span class="comment">//根据返回的不同的状态码设置不同的颜色进行提示，红色和绿色</span></div><div class="line">    		  <span class="keyword">if</span>(d.state==<span class="number">0</span>)&#123;</div><div class="line">    			  $(<span class="string">"#phonespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">    		  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    			  $(<span class="string">"#phonespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-success"</span>);</div><div class="line">    		  &#125;</div><div class="line">    	  &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>发出异步请求实现注册</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发出异步请求</span></div><div class="line">  	 $.ajax(&#123;</div><div class="line">  		 <span class="attr">url</span>:<span class="string">"&lt;%=request.getContextPath()%&gt;/user/register.do"</span>,</div><div class="line">  		 <span class="attr">type</span>:<span class="string">"POST"</span>,</div><div class="line">  		 <span class="attr">data</span>: $(<span class="string">"#form-register"</span>).serialize(),   <span class="comment">//提交表单中的所有数据</span></div><div class="line">  		 dataType:<span class="string">"json"</span>,</div><div class="line">  		 <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  			 <span class="comment">//判断状态码，如果用户已经存在</span></div><div class="line">  			<span class="keyword">if</span>(obj.state==<span class="number">0</span>)&#123;	</div><div class="line">  			<span class="comment">//设置提示语句	</span></div><div class="line">  			$(<span class="string">"#unamespan"</span>).text(obj.message);</div><div class="line">  			$(<span class="string">"#unamespan"</span>).attr(<span class="string">"class"</span>,<span class="string">"msg-error"</span>);</div><div class="line">  			&#125;<span class="keyword">else</span>&#123;</div><div class="line">  			 	<span class="comment">//注册成功跳转到登录界面</span></div><div class="line">  			 	<span class="comment">// showLogin.do</span></div><div class="line">  			&#125;</div><div class="line">  		 &#125;</div><div class="line">  	 &#125;);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>新建的异常类最好继承<code>Exception</code>，那么在调用带有抛出异常的信息的service方法会在编辑提示捕捉或者抛出，便于提示开发者完成相应的逻辑</li>
<li><strong>数据库表中的字段是以<code>下划线</code>形式定义的，比如<code>created_user</code>,但是java中的实体类定义的字段的形式是<code>驼峰式</code>的，比如<code>createdUser</code>，那么这样的话，表中的字段和实体类类的属性就不是一一对应了，因此在查询数据的时候，需要对返回结果起和实体类字段一样的别名，否则将不能成功赋值</strong></li>
<li>在写<code>XXMapper.xml</code>文件的时候,<code>select</code>节点是一定要有返回值类型的<code>resultType</code>或者<code>resultMap</code>的，即使是基本类型</li>
<li>在<code>service</code>中，如果逻辑比较简单，比如验证邮箱，验证号码等，那么不需要抛出异常，只需要定义返回值提示<code>Controller层</code>即可</li>
</ol>
<ul>
<li>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=35idjy1iqdk4g" target="_blank" rel="external">https://cloud.tencent.com/developer/support-plan?invite_code=35idjy1iqdk4g</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户管理模块之用户注册&quot;&gt;&lt;a href=&quot;#用户管理模块之用户注册&quot; class=&quot;headerlink&quot; title=&quot;用户管理模块之用户注册&quot;&gt;&lt;/a&gt;用户管理模块之用户注册&lt;/h1&gt;&lt;h2 id=&quot;实现的功能&quot;&gt;&lt;a href=&quot;#实现的功能&quot; class
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>搭建工程</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E6%90%AD%E5%BB%BA%E5%B7%A5%E7%A8%8B/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/搭建工程/</id>
    <published>2018-05-09T00:46:52.000Z</published>
    <updated>2018-05-09T00:47:16.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul>
<li><code>Spring + SpringMVC + Mybatis</code>  ———–  <code>SSM</code></li>
</ul>
<h2 id="创建工程步骤"><a href="#创建工程步骤" class="headerlink" title="创建工程步骤"></a>创建工程步骤</h2><ul>
<li>创建<code>Maven</code>工程</li>
<li>添加<code>web.xml</code>和<code>tomcat</code>运行环境</li>
<li>创建包的结构<ul>
<li>实体类的包：<code>cn.tedu.store.bean</code></li>
<li>控制器层：<code>cn.tedu.store.controller</code></li>
<li>业务层 : <code>cn.tedu.store.service</code></li>
<li>持久层 ：<code>cn.tedu.store.mapper</code></li>
</ul>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/storepackage.png" alt="包的结构"></p>
<ul>
<li>添加依赖<code>pom.xml</code><ul>
<li><code>spring-webmvc</code></li>
<li><code>spring-jdbc</code></li>
<li><code>mybatis</code></li>
<li><code>mybatis-spring</code></li>
<li><code>commons-dbcp</code></li>
<li><code>jackson</code></li>
<li><code>junit</code></li>
<li><code>jstl</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring 整合jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MySQL驱动jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP连接池--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jackson，自动转换为JSON数据 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 添加jstl标签库 用于jsp页面标签 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>添加配置文件(<code>src/main/resource</code>文件下)</p>
<ul>
<li>创建一个新的文件夹 <code>mappers</code>，存放<code>mybaits</code>的映射文件： <code>XXXMapper.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- namespace指定的UserMapper的全类名 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.store.mapper.UserMapper"</span>&gt;</span></div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
<ul>
<li>创建一个<code>db.properties</code>文件，其中存放的是<code>dbcp</code>连接池的配置属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/tedu_store?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=2</div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<p>​</p>
<ul>
<li>创建一个<code>spring-mvc.xml</code>配置文件，用于配置<code>springmvc</code>的配置信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.controller"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置ViewResolver视图解析器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/web/"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置驱动，用于@ResponseBody的使用 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 其中还需要定义拦截器和其他的配置 --&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
<ul>
<li>创建一个<code>spring-dao.xml</code>配置文件，用于配置数据库的链接信息</li>
</ul>
<p>​</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.mapper"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 加载db.properties,其中定义了数据库的配置信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置MapperScannerConfigurer --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 用于配置持久层接口在哪里，指定mapper的包，spring会自动为我们创建这个XXXMapper接口的对象，名称为类名首字母小写</span></div><div class="line">		--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.tedu.store.mapper"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line"></div><div class="line"> 	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line"></div><div class="line"> 		<span class="comment">&lt;!-- 用于配置数据库连接池 --&gt;</span></div><div class="line"></div><div class="line"> 		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line"></div><div class="line"> 		<span class="comment">&lt;!-- 用于配置持久层映射文件在哪里,所有的xml文件，使用通配符 --&gt;</span></div><div class="line"></div><div class="line"> 		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mappers/*.xml"</span> /&gt;</span></div><div class="line"></div><div class="line"> 	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>创建一个<code>spring-service.xml</code>配置文件，用于配置业务逻辑信息</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.store.service"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div></pre></td></tr></table></figure>
<p>  ​</p>
<ul>
<li>修改<code>web.xml</code>文件，添加前端控制器<code>DispatcherServlet</code>和解决中文乱码的过滤器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置中文乱码过滤器 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 针对所有的路径都需要过滤 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置前端控制器DispathcerServlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="文件约束"><a href="#文件约束" class="headerlink" title="文件约束"></a>文件约束</h2><ul>
<li><code>spring</code>和<code>springmvc</code>配置文件的约束</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>XXXMapper.xml</code>的约束</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建工程&quot;&gt;&lt;a href=&quot;#搭建工程&quot; class=&quot;headerlink&quot; title=&quot;搭建工程&quot;&gt;&lt;/a&gt;搭建工程&lt;/h1&gt;&lt;h2 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>商城网站之模块设计</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99%E4%B9%8B%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/商城网站之模块设计/</id>
    <published>2018-05-09T00:46:07.000Z</published>
    <updated>2018-05-09T00:46:35.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM-商城"><a href="#SSM-商城" class="headerlink" title="SSM - 商城"></a>SSM - 商城</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul>
<li>注册</li>
<li>登录</li>
<li>个人信息修改</li>
</ul>
<h3 id="地址管理"><a href="#地址管理" class="headerlink" title="地址管理"></a>地址管理</h3><ul>
<li>添加收货地址</li>
<li>查询所有的收货地址</li>
<li>修改</li>
<li>删除</li>
</ul>
<h3 id="商品"><a href="#商品" class="headerlink" title="商品"></a>商品</h3><ul>
<li>商品分类</li>
<li>商品展示</li>
<li>商品详情</li>
</ul>
<h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><ul>
<li>将商品添加到购物车</li>
<li>购物车管理</li>
</ul>
<h2 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h2><ul>
<li>显示订单</li>
<li>付款</li>
</ul>
<h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><ol>
<li>需求分析</li>
<li>概要设计</li>
<li>详细设计</li>
<li>编码</li>
<li>测试</li>
<li>交付</li>
<li>维护</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSM-商城&quot;&gt;&lt;a href=&quot;#SSM-商城&quot; class=&quot;headerlink&quot; title=&quot;SSM - 商城&quot;&gt;&lt;/a&gt;SSM - 商城&lt;/h1&gt;&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模
    
    </summary>
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/categories/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="商城网站" scheme="http://chenjiabing666.github.io/tags/%E5%95%86%E5%9F%8E%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/选择排序/</id>
    <published>2018-05-09T00:44:07.000Z</published>
    <updated>2018-05-09T00:45:04.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="思想-从小到大"><a href="#思想-从小到大" class="headerlink" title="思想(从小到大)"></a>思想(从小到大)</h2><ul>
<li>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>假设数组中有个<code>n</code>元素</li>
<li><code>第一趟</code>：在整个数组中选择出最小的元素，和数组中的第一个元素交换位置，那么此时的第一个元素就是最小的</li>
<li><code>第二趟</code>： 从第二个元素开始再次查找剩余数组中最小的元素，和数组中的第二个元素交换位置，那么此时的第一个和第二个元素就是最小的</li>
<li><code>第三趟</code>： 从第三个元素开始再次查找剩余数组中最小的元素，和数组中的第三个元素交换位置，那么此时的前三个就是从小到大的排序</li>
<li><code>第四趟</code>………………………….<code>第n-1趟</code></li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h1&gt;&lt;h2 id=&quot;思想-从小到大&quot;&gt;&lt;a href=&quot;#思想-从小到大&quot; class=&quot;headerlink&quot; title=&quot;思想(
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>插入排序算法</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/插入排序算法/</id>
    <published>2018-05-09T00:43:57.000Z</published>
    <updated>2018-05-09T00:44:35.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序算法"><a href="#插入排序算法" class="headerlink" title="插入排序算法"></a>插入排序算法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><ul>
<li>我们以<code>从小到大</code>的排序进行讲解</li>
</ul>
<ul>
<li>插入排序就是将一个元素插入到一个已经是有序的序列中， 通过遍历比较这个<code>待插入元素</code>和有序的序列元素之间的大小，来比较需要插入的位置，使其仍然是一个有序的数组。</li>
<li><strong>数组插入的算法：向后移动元素给待插入的数据位置</strong></li>
</ul>
<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><ul>
<li><code>第一趟</code>：假设我们需要排序的数组大小为<code>n</code>，一般的思想是先假设<code>第一个元素</code>是有序的，即是已经排序好的，那么第二个元素此时就是<code>待插入的元素</code>，我们拿这个待插入的元素和第一个元素比较大小，如果小的话，那么就将其插入到第一个元素的前面，此时待插入元素就变成了第一个，如果大于的话，就不需要改变位置。那么此时这个数组的前两个元素就是有序的</li>
<li><code>第二趟</code>： 经过第一趟的，前面两个元素已经是有序的，那么此时的第三个元素就是<code>待插入元素</code>，这个待插入元素先和第二个元素进行比较，如果大于的话，那么就不需要再和第一个元素比较了，当前位置不用改变就可以维持前面三个元素是有序的。如果是小于的话，此时的第二个元素就需要向后移动位置，因为这里可以肯定的是这个待插入元素一定是在其前面插入的，具体的位置没有确定而已。第二个元素向后移动之后，那么此时就需要和第一个元素比较，如果大于的话，那么就插在第一个和第二个元素之间成为当前数组的第二个元素即可，如果小于的话，那么就插入到第一个元素之前，同样的是第一个元素要向后移动为其腾出位置。</li>
<li><code>第三趟</code>…………………………………<code>第n-1</code>趟</li>
</ul>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><ul>
<li>平均时间复杂度：<code>O(n2)</code></li>
<li>空间复杂度：<code>O(1)</code>  (用于记录需要插入的数据)</li>
<li>稳定性：稳定</li>
</ul>
<h2 id="算法实现-—-java"><a href="#算法实现-—-java" class="headerlink" title="算法实现 — java"></a>算法实现 — java</h2><ul>
<li>需要注意的是判断条件一定是<code>j&gt;=0&amp;&amp;insertNode&lt;array[j]</code>，因为如果调换顺序的话，那么会造成数组<code>下标越界</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 这个是从小到大的插入排序</div><div class="line">* @Param array  待排序的数组</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</div><div class="line">	<span class="comment">//我们假设第一个元素已经是有序的，因此从第二个开始遍历，总共需要遍历n-1次</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> insertNode=array[i];  <span class="comment">//这个就是待插入的数，需要和在之前的元素比较</span></div><div class="line">		</div><div class="line">		<span class="keyword">int</span> j=i-<span class="number">1</span>;   <span class="comment">//这个的初始值是待插入数字的前一个数字</span></div><div class="line">		</div><div class="line">		<span class="comment">//如果待插入的数字比前面的元素小并且此时的j没有到达第一个元素(j&gt;=0)</span></div><div class="line">		<span class="comment">//循环结束的条件是insertNode&gt;=array[j],那么此时的insertNode需要插入的位置就是array[j+1]这个位置了</span></div><div class="line">		<span class="comment">//需要注意的是&amp;&amp;是短路与的判断，因此需要将j&gt;=0放在前面，否则如果是insertNode&lt;array[j]&amp;&amp;j&gt;=0的形式，那么当j=-1的时候就会造成下标数组越界</span></div><div class="line">		<span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;insertNode&lt;array[j])&#123;</div><div class="line">			array[j+<span class="number">1</span>]=array[j];  <span class="comment">//元素后移，以便插入   </span></div><div class="line">			j--;   <span class="comment">//比较的元素的下标此时需要前移，和待插入的数据进行比较</span></div><div class="line">		&#125;</div><div class="line">		array[j+<span class="number">1</span>]=insertNode;  <span class="comment">//这个位置就是待插入元素需要插入的位置</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插入排序算法&quot;&gt;&lt;a href=&quot;#插入排序算法&quot; class=&quot;headerlink&quot; title=&quot;插入排序算法&quot;&gt;&lt;/a&gt;插入排序算法&lt;/h1&gt;&lt;h2 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JQuery实现AJAX异步提交</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/JQuery%E5%AE%9E%E7%8E%B0AJAX%E5%BC%82%E6%AD%A5%E6%8F%90%E4%BA%A4/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/JQuery实现AJAX异步提交/</id>
    <published>2018-05-09T00:42:04.000Z</published>
    <updated>2018-05-09T00:42:24.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery实现AJAX异步提交"><a href="#JQuery实现AJAX异步提交" class="headerlink" title="JQuery实现AJAX异步提交"></a>JQuery实现AJAX异步提交</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><a href="http://ono60m7tl.bkt.clouddn.com/jquery-3.2.1.min.js" target="_blank" rel="external">点击下载JQurery的文件</a></li>
</ul>
<ul>
<li>添加<code>JQuery</code>的文件： <code>&lt;script type=&quot;text/javascript&quot; src=&quot;文件路径&quot;&gt;&lt;/script&gt;</code></li>
</ul>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax({})"></a>$.ajax({})</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul>
<li>其中的<code>url</code>，<code>type</code>等    前面的<code>key</code>可以不用加<code>双引号</code>，也可以加上</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">				<span class="attr">url</span>: <span class="string">'/path/to/file'</span>,    <span class="comment">//请求的路径</span></div><div class="line">				type: <span class="string">'default GET (Other values: POST)'</span>,  <span class="comment">//请求方式，默认为get</span></div><div class="line">				dataType: <span class="string">'default: Intelligent Guess (Other values: xml, json, script, or html)'</span>,  <span class="comment">//响应的回来的数据类型，如果指定了json，那么就不需要将返回转换为JSON数据了</span></div><div class="line">				data: &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;,   <span class="comment">//请求数据，无论是get还是post都是这种形式的</span></div><div class="line">    			success: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;&#125;    <span class="comment">//响应成功调用的方法，obj是返回的数据</span></div><div class="line">			&#125;)</div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>在前面博文中的<a href="https://chenjiabing666.github.io/2018/05/04/Springmvc%E5%93%8D%E5%BA%94Ajax%E8%AF%B7%E6%B1%82-ResponseBody/">Springmvc响应Ajax请求(@ResponseBody)</a>，我们使用<code>$.ajax({})</code>来发出请求获取<code>City集合</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据选择的省份获取市</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCity</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> province=$(<span class="string">"#province"</span>).val();  <span class="comment">//获取下拉菜单的值，这里返回的是省份的编号</span></div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/menu/getCity.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">"province"</span>:province&#125;;   <span class="comment">//将省份的编号传入</span></div><div class="line">	</div><div class="line">	<span class="comment">//每次都要清空之前的城市</span></div><div class="line">	$(<span class="string">"#city"</span>).html(<span class="string">"&lt;option value='-1'&gt;请选择市&lt;/option&gt;"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//如果用户点击了请选择省，那么返回的值就是-1，此时不需要发出异步请求</span></div><div class="line">	<span class="keyword">if</span>(province==<span class="number">-1</span>)&#123;</div><div class="line">		<span class="keyword">return</span>;  </div><div class="line">	&#125;</div><div class="line">       </div><div class="line">	<span class="comment">//使用Post请求发出AJAX请求，返回的是一个集合，因此转换为JSON数据的obj是一个数组</span></div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: url,    <span class="comment">//请求的路径</span></div><div class="line">		type:<span class="string">"POST"</span>,  <span class="comment">// 请求方式，默认为get</span></div><div class="line">		dataType: <span class="string">"json"</span>,  <span class="comment">//响应的回来的数据类型，如果指定了json，那么就不需要将返回转换为JSON数据了</span></div><div class="line">		data:d,   <span class="comment">//请求数据</span></div><div class="line">		success: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123; <span class="comment">//响应成功调用的方法，obj是返回的数据</span></div><div class="line">			</div><div class="line">			<span class="comment">//如果返回的是一个空的，直接返回即可，不需要后续的操作</span></div><div class="line">			<span class="keyword">if</span>(obj.lengt==<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//循环遍历返回的JSON数组</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;obj.length;i++)&#123;</div><div class="line">				<span class="comment">//创建option，用于插入节点</span></div><div class="line">				<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span> + obj[i].code + <span class="string">"&gt;"</span>+obj[i].name+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">				<span class="comment">//将option插入到下拉列表中</span></div><div class="line">				$(<span class="string">"#city"</span>).append(option);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;   </div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h2><ul>
<li>只适用于<code>GET</code>的异步请求</li>
</ul>
<h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	url :请求路径，其中参数必须封装在其中，比如 : http://lcoalhost:8080/web1/regist?name=chenjiabing&amp;age=1</div><div class="line">	function（data,status,xhr）：这个是回调函数</div><div class="line">								data：请求返回的数据</div><div class="line">								status : 请求的状态，其中的有success,error</div><div class="line">								xhr: 这个是XMLHttpRequest对象</div><div class="line">*/</div><div class="line">$.get(<span class="string">'url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> url=<span class="string">"http://localhost:8080/web1/user/regist.do?username=chenjiabing&amp;password=12345"</span> ;  <span class="comment">//请求的url</span></div><div class="line">        $.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</div><div class="line">            <span class="comment">//如果响应成功，输出返回的数据</span></div><div class="line">            <span class="keyword">if</span>(status==<span class="string">"success"</span>) &#123;</div><div class="line">                alert(data);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                alert(<span class="string">"响应失败"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="post"><a href="#post" class="headerlink" title="$.post"></a>$.post</h2><ul>
<li>只适用于<code>POST</code>请求</li>
</ul>
<h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	url ： 异步请求的路径，其中不用封装数据</div><div class="line">	function（data,status,xhr） :回调函数</div><div class="line">							  data： 请求返回的数据</div><div class="line">							  status：请求的状态，其中的值有success，error</div><div class="line">							  xhr: XMLHttpRequest对象</div><div class="line">*/</div><div class="line">$.post(<span class="string">'url'</span>, &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>) </span>&#123;</div><div class="line">				<span class="comment">/*optional stuff to do after success */</span></div><div class="line">			&#125;);</div></pre></td></tr></table></figure>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">    $("#btn") .click(function()&#123;</div><div class="line">       var url="http://localhost:8080/web1/user/regist.do;   //请求路径</div><div class="line">       var d=&#123;"username":"陈加兵","password":"123456"&#125;;   //发送的请求参数</div><div class="line">        $.post(url,d,function(data,status,xhr)&#123;</div><div class="line">            if(status=="success")&#123;</div><div class="line">                alert(data);</div><div class="line">            &#125;else</div><div class="line">            &#123;</div><div class="line">                alert("响应失败");</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JQuery实现AJAX异步提交&quot;&gt;&lt;a href=&quot;#JQuery实现AJAX异步提交&quot; class=&quot;headerlink&quot; title=&quot;JQuery实现AJAX异步提交&quot;&gt;&lt;/a&gt;JQuery实现AJAX异步提交&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc中的转发重定向和拦截器</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/Springmvc%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%8F%91%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/Springmvc中的转发重定向和拦截器/</id>
    <published>2018-05-09T00:40:51.000Z</published>
    <updated>2018-05-09T00:41:15.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc中的转发重定向和拦截器"><a href="#Springmvc中的转发重定向和拦截器" class="headerlink" title="Springmvc中的转发重定向和拦截器"></a>Springmvc中的转发重定向和拦截器</h1><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><blockquote>
<p>可变参数在设计方法时，使用<code>数据类型...</code>来声明参数类型，例如：<code>public static void function(int... numbers)</code><br>在实现方法体时，可变参数是作为数组来处理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(Test.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</div><div class="line">		System.out.println(Test.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... numbers)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</div><div class="line">			sum+=numbers[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sum;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 每个方法中，最多只允许存在1个可变参数，并且，如果存在<strong>可变参数</strong>,那么必须是最后一个参数</p>
</blockquote>
<h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><ul>
<li>在控制器内部处理请求的方法中，默认返回字符串时的处理方式是<code>转发</code>，转发的值是<code>view</code>组件的名称，比如<code>return &quot;login&quot;</code>，实质上会根据视图解析器(<code>ViewResolver</code>)得到最终负责显示的页面，而通过<code>return redirect:路径</code>这样的语法表示重定向，在<code>redirect:</code>右侧的内容是路径，这个路径通常使用相对的路径，是以当前客户端的地址栏中的路径为标准进行参考，例如当前的地址为：<code>http://localhost:8080/Project/user/reg.do</code>，然后<code>return &quot;redirect:login.do&quot;</code>,则会重定向到<code>http://localhost:8080/Project/user/login.do</code>,如果<code>return &quot;redirect:/main/index.do&quot;</code>或者<code>return &quot;redirect:../main/index.do&quot;</code>，则会重定向到<code>http://localhost:8080/Project/main/index.do</code></li>
</ul>
<h3 id="forward"><a href="#forward" class="headerlink" title="forward:"></a><code>forward:</code></h3><ul>
<li>默认的方式，但是也是可以使用<code>return &quot;forward:login&quot;</code></li>
<li>返回的一定是一个<code>view</code>,经过视图解析器之后会转发到指定的视图</li>
</ul>
<h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect:"></a><code>redirect:</code></h3><ul>
<li>重定向 ： <code>return &quot;redirect:login.do&quot;</code></li>
<li>返回的是一个Controller方法的路径，而不是一个view，这个不会经过视图解析器，而是直接跳转</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/handle_reg.do"</span>, method=RequestMethod.POST)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">handleReg</span><span class="params">(User user,ModelMap map)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			userService.reg(user);</div><div class="line">			System.out.println(<span class="string">"注册成功！"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="string">"redirect:login.do"</span>;  <span class="comment">//重定向到login.do这个控制方法，login.do对应的就是转发到login.jsp</span></div><div class="line">		&#125; <span class="keyword">catch</span> (UsernameConflictException e) &#123;</div><div class="line">			System.out.println(e.getMessage());</div><div class="line">			map.put(<span class="string">"errorMessage"</span>, e.getMessage());</div><div class="line">			<span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"login.do"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">handleLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol>
<li>拦截器(<code>interceptor</code>)是springmvc中的一个<code>组件</code>，是运行在<code>DispatcherServlet</code>之后，运行在<code>Controller</code>之前的</li>
<li>拦截器可以决定对某些符合条件的进行<code>拦截</code>或者<code>放行</code>，所以，通常用于对一些具有相同运行条件的功能进行约束</li>
</ol>
<h2 id="使用拦截器"><a href="#使用拦截器" class="headerlink" title="使用拦截器"></a>使用拦截器</h2><h3 id="自定义拦截器类"><a href="#自定义拦截器类" class="headerlink" title="自定义拦截器类"></a>自定义拦截器类</h3><ol>
<li>创建一个拦截类(<code>DemoInterceptor</code>)，实现<code>HandlerInterceptor</code>接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 处理器执行之前调用</div><div class="line">	 * <span class="doctag">@param</span> request  HttpServletRequest对象，可以获取请求参数等等</div><div class="line">	 * <span class="doctag">@param</span> response HttpServletResponse对象</div><div class="line">	 * <span class="doctag">@param</span> Handler  拦截器的Controller对象</div><div class="line">	 * <span class="doctag">@return</span> 如果返回false，就会中断处理流程，不会处理后续的拦截器和Controller。如果返回true，则会执行后续的拦截器和处理器</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"DemoInterceptor的PreHandler执行"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 处理器执行之后调用,跳转到指定视图之前调用</div><div class="line">	 * <span class="doctag">@param</span> request  HttpServletRequest对象</div><div class="line">	 * <span class="doctag">@param</span> response HttpServletResponse对象</div><div class="line">	 * <span class="doctag">@param</span> Handler  拦截器的Controller对象</div><div class="line">	 * <span class="doctag">@param</span> modelAndView  ModelAndView对象，其中存放的是处理结果和视图的信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler,</div><div class="line">			ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 1. 可以自己设计逻辑，例如某些情况下返回false，返回true</div><div class="line">		 * 2. 返回true表示执行后续的处理器和拦截器，返回false会中断处理流程</div><div class="line">		 */</div><div class="line">		System.out.println(<span class="string">"handler:"</span>+handler);</div><div class="line">		System.out.println(<span class="string">"DemoInterceptor的PostHandler执行"</span>);</div><div class="line">		<span class="comment">//设置视图的名称，那么执行完成之后就会条跳转到index.jsp页面</span></div><div class="line">		<span class="comment">//modelAndView.setViewName("index");  </span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 请求处理完成之后调用</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler, Exception ex)</div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"DemoInterceptor的afterCompletion执行"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在springmvc的配置文件中配置"><a href="#在springmvc的配置文件中配置" class="headerlink" title="在springmvc的配置文件中配置"></a>在springmvc的配置文件中配置</h3><ol>
<li>配置拦截的路径：<code>&lt;mvc:mapping path=&quot;&quot;/&gt;</code> 可以使用通配符<code>*</code> 比如：<code>/**</code>匹配所有的路径，<code>/user/*</code>只能匹配<code>/user</code>的子路径</li>
<li>配置不拦截的路径 ： <code>&lt;mvc:exclude-mapping path=&quot;&quot;/&gt;</code>  可以配置<code>多个</code></li>
<li>配置拦截器类(<code>bean</code>) : <code>&lt;bean class=&quot;&quot;&gt;</code>  </li>
</ol>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>必须按照上面的顺序配置，否则将会报错</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 配置拦截器,其中可以配置多个拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">       </div><div class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">	</div><div class="line">		<span class="comment">&lt;!-- 配置拦截器的拦截路径，拦截/user下的全部处理器方法映射</span></div><div class="line">			比如：http://localhost:8080/Springmvc/user/login.do这个请求就会被拦截</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置不被该拦截器拦截器的controller方法,这个是可选配置</span></div><div class="line">			比如：http://localhost:8080/Springmvc/user/index.do将不会被拦截器</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/index.do"</span>/&gt;</span> </div><div class="line">           <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login.do"</span>/&gt;</span>  </div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置拦截器的bean，指定的是全类名 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.interceptor.DemoInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">       </div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="其中实现的方法"><a href="#其中实现的方法" class="headerlink" title="其中实现的方法"></a>其中实现的方法</h2><ol>
<li><code>public boolean preHandle(HttpServletRequest request,HttpServletResponse response, Object handler)</code><ul>
<li>该方法在<code>controller</code>处理请求之前执行</li>
<li>如果返回的<code>false</code>，则会中断处理流程，不会执行后续的拦截器和处理器，返回<code>true</code>会执行后续的拦截器和处理器</li>
<li>可以自行设计逻辑返回<code>false</code>或者<code>true</code></li>
</ul>
</li>
<li><code>public void postHandle(HttpServletRequest request,HttpServletResponse response, Object handler,ModelAndView modelAndView)</code><ul>
<li>处理器执行之后，视图处理之前调用，此时可以通过对<code>ModelAndView</code>对数据和视图进行处理</li>
<li>当然需要<code>prehandler</code>方法返回<code>true</code>才会执行</li>
</ul>
</li>
<li><code>public void afterCompletion(HttpServletRequest request,HttpServletResponse response, Object handler, Exception ex)</code><ul>
<li>所有的请求处理完毕之后调用，比如性能监控中，我们可以在此记录结束时间和消耗时间，还可以进行一些资源处理</li>
<li>当然需要<code>prehandler</code>方法返回<code>true</code>才会执行</li>
</ul>
</li>
</ol>
<h3 id="演示登录检查"><a href="#演示登录检查" class="headerlink" title="演示登录检查"></a>演示登录检查</h3><ol>
<li>登录检查： 当涉及到用户信息的修改，查看什么的，必须要验证是否登录，因此需要设计拦截器验证登录</li>
<li>先设定登录数据，即： 在<code>login.jsp</code>中添加登录按钮，登录完成之后，需要自己定义一个标记存储在<code>session</code>中，比如<code>用户的id</code>或者<code>用户的对象</code></li>
<li>我们使用用户的<code>id</code>作为标记验证是否已经的登录，如果用户登录成功，会在<code>session</code>中添加一个<code>uid</code>的属性</li>
<li>用户退出登录使用<code>session.invalidate();</code>清除<code>session</code>，并且重定向到<code>登录界面</code></li>
</ol>
<h4 id="自定义拦截器-LoginInterceptor"><a href="#自定义拦截器-LoginInterceptor" class="headerlink" title="自定义拦截器(LoginInterceptor)"></a>自定义拦截器(LoginInterceptor)</h4><ul>
<li>具体流程在<code>prehandler</code>方法中写的很清楚</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 在处理器执行之前调用(non-Javadoc)</div><div class="line">	 * 1. 获取session</div><div class="line">	 * 2. 读取session中的uid的值</div><div class="line">	 * 		如果为null，表示没有登录，那么直接重定向到登录界面，同时返回false，不需要执行后面的流程了</div><div class="line">	 * 		如果不为null，表示已经登录了，那么直接返回true，继续执行后面的拦截器或者处理器</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		HttpSession session=request.getSession();   <span class="comment">//获取session</span></div><div class="line">		Object uid=session.getAttribute(<span class="string">"uid"</span>);  <span class="comment">//读取session中的对象</span></div><div class="line">		<span class="comment">//如果uid存在，那么即可登录完成</span></div><div class="line">		<span class="keyword">if</span> (uid!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;   <span class="comment">//返回true，登录成功就需要执行后续的流程</span></div><div class="line">		&#125;</div><div class="line">		response.sendRedirect(request.getContextPath()+<span class="string">"/user/login.do"</span>);  <span class="comment">//重定向到登录界面</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;   <span class="comment">//返回false，后面的流程也不用执行了，直接中断</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler,</div><div class="line">			ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, Object handler, Exception ex)</div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="springmvc中配置拦截器"><a href="#springmvc中配置拦截器" class="headerlink" title="springmvc中配置拦截器"></a>springmvc中配置拦截器</h4><ul>
<li>由于这里只是跳转到用户中心需要验证登录，那么只是匹配了<code>user_center.do</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置拦截器,其中可以配置多个拦截器 --&gt;</span>    </div><div class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/user_center.do"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.tedu.spring.interceptor.LoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h2><ul>
<li>根据在<code>springmvc</code>配置文件中配置的顺序执行，即是在<code>&lt;mvc:interceptors&gt;</code>下配置的拦截器的顺序，如果对同一个路径进行了拦截器，那么先配置的先拦截</li>
</ul>
<h2 id="拦截器和过滤器的区别-主要的区别"><a href="#拦截器和过滤器的区别-主要的区别" class="headerlink" title="拦截器和过滤器的区别(主要的区别)"></a>拦截器和过滤器的区别(主要的区别)</h2><ol>
<li>拦截器是springmvc中，仅仅当使用<code>springmvc</code>才可以使用拦截器，过滤器是<code>Java EE</code>体系中的，无论使用哪种框架都可以使用过滤器</li>
<li>拦截器在<code>DispatcherServlet</code>之后，在处理器之前执行，过滤器在<code>DispatcherServlet</code>之前执行</li>
<li>过滤器会在所有的<code>servlet</code>之前执行(所有的请求都会执行)，而拦截器会在springmvc中<code>DispatcherServlet</code>之后执行，所以过滤器在项目中可以过滤任何请求（只要是配置了对应的路径），而拦截器只会在<code>DispatcherServlet</code>处理的请求的基础之上进行拦截</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>当多种请求都需要做相同或者极为相似的任务时，可以使用拦截器</li>
<li>开发好拦截器，那么需要在<code>springmvc</code>的配置文件中配置</li>
<li>在<code>&lt;mvc:interceptors&gt;</code>可以有如果若干个<code>&lt;mvc:interceptor&gt;</code>,即是配置若干个拦截器，配置的多个拦截器将会形成<strong>拦截器链</strong>，如果配置多个拦截器对同一个路径都会拦截，那么会按照配置的节点顺序执行。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc中的转发重定向和拦截器&quot;&gt;&lt;a href=&quot;#Springmvc中的转发重定向和拦截器&quot; class=&quot;headerlink&quot; title=&quot;Springmvc中的转发重定向和拦截器&quot;&gt;&lt;/a&gt;Springmvc中的转发重定向和拦截器&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc解决中文乱码问题</title>
    <link href="http://chenjiabing666.github.io/2018/05/09/Springmvc%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://chenjiabing666.github.io/2018/05/09/Springmvc解决中文乱码问题/</id>
    <published>2018-05-09T00:39:48.000Z</published>
    <updated>2018-05-09T00:40:35.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc解决中文乱码问题"><a href="#Springmvc解决中文乱码问题" class="headerlink" title="Springmvc解决中文乱码问题"></a>Springmvc解决中文乱码问题</h1><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><ul>
<li>在表单提交的时候，如果遇到中文乱码的情况，springmvc提供了一个<code>CharacterEncodingFilter</code>过滤器，我们只需要在<code>web.xml</code>文件中配置即可</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>表单的提交方式必须是<code>post</code></li>
<li>在<code>web.xml</code>中配置<code>CharacterEncodingFilter</code>编码格式要和<code>JSP</code>页面的编码格式一致</li>
<li>解决中文乱码必须使用过滤器(在DispatcherServlet之前执行)，而不能使用springmvc的拦截器，因为过滤器在<code>DispatcherServlet</code>之前，所以设置好编码后，<code>DispatcherServlet</code>和<code>Controller</code>都可以获取到正确的数据，而拦截器运行在<code>DispatcherServlet</code>之后，也即是意味着<code>DispatcherServlet</code>获取的数据已经是乱码，那么在拦截器中调整乱码是没有意义的</li>
</ol>
<h3 id="在web-xml配置"><a href="#在web-xml配置" class="headerlink" title="在web.xml配置"></a>在<code>web.xml</code>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 配置 CharacterEncodingFilter解决中文乱码问题--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置编码格式为UTF-8 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><ul>
<li>即使配置了中文乱码过滤器<code>CharacterEncodingFilter</code>，但是这个只会针对<code>POST</code>请求才会起作用，如果我们在使用<code>GET</code>请求的时候携带的参数有中文的话，那么服务器接收的时候就会产生中文乱码。</li>
<li>我们在eclipse中修改<code>Tomcat</code>的<code>server.xml</code>文件中的内容参数即可，如下：</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/s1.png" alt="server.xml"></p>
<ul>
<li>我们只需要在<code>&lt;connector connectionTimeout=&quot;20000&quot;......&gt;</code>在这个最后加上<code>URIEncoding=&quot;UTF-8&quot;</code>即可</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>那么以后创建项目时候的完整的web.xml如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></div><div class="line">	<span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Springmvc<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置前端控制器DispatcherServlet --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置springMVC配置文件的路径，这里如果想要使用默认的可以不用配置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- classpath表示根路径，这里找的项目根路径下的applicationContext.xml --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 当tomcat启动的时候就加载，设置启动的优先级 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置分发规则，这个是用来控制所有的请求,只要是请求后缀为.do的都会拦截分发 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置 CharacterEncodingFilter解决中文乱码问题--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 配置编码格式为UTF-8 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc解决中文乱码问题&quot;&gt;&lt;a href=&quot;#Springmvc解决中文乱码问题&quot; class=&quot;headerlink&quot; title=&quot;Springmvc解决中文乱码问题&quot;&gt;&lt;/a&gt;Springmvc解决中文乱码问题&lt;/h1&gt;&lt;h2 id=&quot;POST&quot;
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之增删改查</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis之增删改查/</id>
    <published>2018-05-04T10:04:29.000Z</published>
    <updated>2018-05-04T10:10:36.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis的增删改查"><a href="#Mybatis的增删改查" class="headerlink" title="Mybatis的增删改查"></a>Mybatis的增删改查</h1><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><ul>
<li>在增加数据的时候，mybatis默认返回的是受影响的行数，因此不需要指定<code>ResultType</code>指定返回类型</li>
<li>在<code>UserMapper.java</code>接口中添加方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	<span class="doctag">@param</span> user User对象</div><div class="line">*/</div><div class="line"><span class="function">Integer <span class="title">reg</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>UserMapper.xml</code>文件中添加<code>&lt;insert&gt;</code>节点</p>
<ul>
<li><code>#{}</code>中填写的是<code>User</code>对象的属性名称</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- parameterType属性的值是参数类型 </span></div><div class="line">	--&gt;</div><div class="line">	<span class="comment">&lt;!-- 节点中间编写SQL语句 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">		<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</div><div class="line">		INSERT INTO user (</div><div class="line">			username, password</div><div class="line">		) VALUES (</div><div class="line">			#&#123;username&#125;, #&#123;password&#125;</div><div class="line">		)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		</div><div class="line">		<span class="comment">//新建User对象</span></div><div class="line">		User user = <span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">		user.setPassword(<span class="string">"123456"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//调用reg(user)，进行添加，返回的是受影响的行数</span></div><div class="line">		Integer affectedRows</div><div class="line">			= userMapper.reg(user);</div><div class="line">		</div><div class="line">		System.out.println(</div><div class="line">			<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">		ac.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="在Mybatis中增加数据时获取自增主键的id"><a href="#在Mybatis中增加数据时获取自增主键的id" class="headerlink" title="在Mybatis中增加数据时获取自增主键的id"></a>在Mybatis中增加数据时获取自增主键的id</h2><ul>
<li>首先<code>mybatis</code>在处理增加数据的功能时，只是返回<code>受影响的行数</code>，所以在持久层中并不会返回新增加的</li>
<li>如果需要获取自增主键<code>Id</code>，首先，在<code>XML</code>映射的<code>&lt;insert&gt;</code>节点中需要添加<code>2</code>个属性<ul>
<li><code>useGeneratedKeys</code> ：设置是否返回自增主键，如果为<code>true</code>则返回，默认为<code>false</code></li>
<li><code>keyProperty</code> ： 配置自增主键在表中对应的字段 ，因为有时候在表中的自增主键的字段可能不是<code>id</code>，因此需要指定</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- parameterType属性的值是参数类型 </span></div><div class="line">	useGeneratedKeys: 指定是否返回自增主键，默认为false</div><div class="line">	keyProperty:配置自增主键在表中对应的字段 </div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">	<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</div><div class="line">	INSERT INTO user (</div><div class="line">		username, password</div><div class="line">	) VALUES (</div><div class="line">		#&#123;username&#125;, #&#123;password&#125;</div><div class="line">	)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>此时的<code>mybatis</code>执行<code>insert</code>方法之后，即是调用<code>reg(user)</code>，返回的还是<code>受影响的行数</code>，并不是此时的自增主键<code>id</code>的值。而是在调用这个方法的时候将<code>id</code>封装到指定的<code>方法参数</code>中，即是封装到<code>user</code>中了，因此只有调用者才可以获取<code>id</code>，而持久层无法获取</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	</div><div class="line">	<span class="comment">//新建User对象，此时并没有设置id的值</span></div><div class="line">	User user = <span class="keyword">new</span> User();</div><div class="line">	user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">	user.setPassword(<span class="string">"123456"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//调用reg(user)，进行添加，返回的是受影响的行数，但是此时已经将id封装到参数User对象中了</span></div><div class="line">	Integer affectedRows</div><div class="line">		= userMapper.reg(user);</div><div class="line">	</div><div class="line">	System.out.println(</div><div class="line">		<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">	<span class="comment">//直接获取Uesr对象中的id值，这个是自增主键返回的值</span></div><div class="line">	System.out.println(<span class="string">"id = "</span>+user.getId());</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul>
<li><strong>在删除数据的时候，自动会返回受影响的行数，不需要在<code>delete</code>节点中定义返回类型，只有在查询数据的时候才会定义返回类型</strong></li>
</ul>
<ul>
<li>在<code>UserMapper.java</code>中添加一个接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据id删除数据，返回受影响的行数，返回1，如果删除失败返回0</span></div><div class="line"><span class="function">Integer <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;delete&gt;</code>节点</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 删除用户数据根据id</span></div><div class="line">	Integer deleteUserById(int id)</div><div class="line">	parameterType: 指定参数类型，这里也可以不需要指定</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">	delete from user where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>删除数据是不可逆的，通常不会真正的删除数据，我们会使用备份，日志等手段来保存数据，在许多软件上看到的删除也许都是<code>修改</code>操作，通常在表中有一个字段<code>is_deleted</code>标记是否删除，如果执行删除，那么就会设置其值为<code>true</code>表示已经删除了，那么此时将不会显示在客户端，让客户以为已经被删除了</strong></li>
</ul>
<h2 id="Mybaits参数规则"><a href="#Mybaits参数规则" class="headerlink" title="Mybaits参数规则"></a>Mybaits参数规则</h2><ul>
<li><strong><code>mybatis</code>默认支持一个参数，即是定义的接口方法中只能有一个参数</strong></li>
<li>如果需要支持多个参数，那么需要使用<code>@Param()</code>注解</li>
<li>如果接口方法中的参数类型是基本类型的可以不用<code>parameterType</code>指定类型，如果不是基本类型的，规范要求需要使用<code>parameterType</code>指定类型，但是可以不写</li>
</ul>
<h2 id="Param"><a href="#Param" class="headerlink" title="@Param()"></a>@Param()</h2><ul>
<li><strong>mybatis默认支持一个参数，即是定义的接口方法中只能有一个参数</strong></li>
<li>在设计java接口方法时，如果需要指定多个参数，那么必须使用<code>@Param()</code></li>
<li>如果想要支持多个参数，需要使用<code>@Param()</code>来指定参数，比如<code>Integer ChangePassword(@Param(&quot;id&quot;)Integer id,@Param(&quot;newPassword&quot;)String newPassword);</code><ul>
<li>其中<code>@Param(&quot;key&quot;)</code>中的<code>value</code>在配置增删改查的时候是使用<code>#{key}</code>表达式取出的</li>
</ul>
</li>
<li><code>mybaits</code>在处理过程中，本质上是使用了<code>Map</code>对参数进行了封装的。即是<code>@Param(&quot;&quot;)</code>注解中给出的参数值是<code>Map</code>中的<code>key</code>，调用方法时给出的参数值是Map中的<code>value</code>值，而最终在<code>XML</code>文件中使用<code>#{}</code>获取值，其实是使用Map中的<code>get(key)</code>方法获取的</li>
</ul>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ul>
<li><p><strong>在修改数据的时候，mybatis自动返回受影响的行数，因此我们不需要定义返回类型，默认的返回数据就是受影响的行数</strong></p>
</li>
<li><p>在<code>UserMapper.java</code>接口中定义根据<code>id</code>修改数据的方法</p>
<ul>
<li>使用<code>@Param()</code>注解来标记多个参数</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 修改密码</div><div class="line"> * <span class="doctag">@param</span> id  id</div><div class="line"> * <span class="doctag">@param</span> newPassword  新密码</div><div class="line"> * <span class="doctag">@return</span>  受影响的行数</div><div class="line"> */</div><div class="line"><span class="function">Integer <span class="title">ChangePassword</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"newPassword"</span>)</span>String newPassword)</span>;</div></pre></td></tr></table></figure>
<ul>
<li><p>在<code>UserMapper.xml</code>中添加<code>&lt;update&gt;</code>节点</p>
<ul>
<li><strong>其中<code>#{}</code>表达式中的字段为<code>@Param(&quot;value&quot;)</code>中的<code>value</code></strong></li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 修改密码</span></div><div class="line">	Integer ChangePassword(@Param("id")Integer id,@Param("newPassword")String newPassword);</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"ChangePassword"</span>&gt;</span></div><div class="line">	update user set password=#&#123;newPassword&#125; where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testChangePassword</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//调用删除的方法</span></div><div class="line">	<span class="keyword">int</span> affectRow=userMapper.ChangePassword(<span class="number">3</span>, <span class="string">"12345895"</span>);</div><div class="line">	System.out.println(affectRow);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="案例：修改用户密码"><a href="#案例：修改用户密码" class="headerlink" title="案例：修改用户密码"></a>案例：修改用户密码</h3><h4 id="用户提供数据"><a href="#用户提供数据" class="headerlink" title="用户提供数据"></a>用户提供数据</h4><ul>
<li>旧密码：<code>oldPassword</code></li>
<li>新密码：<code>newPassword</code></li>
</ul>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>通过<code>id</code>查找用户信息<ol>
<li>不可以使用<code>select * from user where id=? and password=?</code>,因为这个是<strong>不区分大小写</strong>的,我们应该先根据<code>id</code>获取用户信息，再比较<code>password</code></li>
<li>在<code>UserserviceImpl</code>中完成验证逻辑，如果用户不存在，那么抛出用户不存在的异常，如果存在就验证原密码和是否匹配</li>
</ol>
</li>
<li>用户信息存在，那么就要验证用户输入的<code>oldPassword</code>和用户信息中的<code>原密码</code>是否相同了，如果不相同，抛出<code>密码不匹配的异常</code>，如果相同，那么就可以修改密码</li>
<li>修改密码</li>
</ol>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>我们编写了一个<code>UserService</code>中编写逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangePasssword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">		String newPassword) <span class="keyword">throws</span> UserNotFoundException, PasswordNotMatchException&#123;</div><div class="line">	User user=<span class="keyword">this</span>.findUserById(id);  <span class="comment">//获取用户信息</span></div><div class="line">	<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//如果用户信息不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"操作失败，用户信息不存在"</span>);</div><div class="line">	&#125;<span class="keyword">else</span> &#123; <span class="comment">//用户存在，则判断原密码</span></div><div class="line">		<span class="keyword">if</span> (user.getPassword().equals(oldPassword)) &#123;<span class="comment">//如果密码匹配</span></div><div class="line">			</div><div class="line">			userMapper.ChangePassword(id, newPassword);  <span class="comment">//修改密码</span></div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//原密码不匹配</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PasswordNotMatchException(<span class="string">"操作失败，原密码不正确"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>那么在<code>Controller</code>中如果要调用这个<code>ChangePasssword</code>将会通过处理异常来判断哪里是出错了，并给出友好的提示</li>
</ul>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="单条数据的查询"><a href="#单条数据的查询" class="headerlink" title="单条数据的查询"></a>单条数据的查询</h3><ul>
<li>根据<code>id</code>的查询返回的查询结果就是单条数据，比如：<code>select * from user where id=1</code></li>
<li><strong>单条记录的查询在编写<code>接口方法</code>的时候，只需要返回一个<code>实体类对象</code>即可</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据id查询用户信息</div><div class="line"> * <span class="doctag">@param</span> id  用户id</div><div class="line"> * <span class="doctag">@return</span> 返回User对象</div><div class="line"> */</div><div class="line"><span class="function">User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;select&gt;</code>节点<ul>
<li>需要使用<code>resultType</code>指定返回的类型，因为参数是基本类型，因此不需要使用<code>parameterType</code>指定参数类型</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	select * from user where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="多条记录的查找"><a href="#多条记录的查找" class="headerlink" title="多条记录的查找"></a>多条记录的查找</h3><ul>
<li>有些查找语句返回的是多条记录，那么我们可以使用<code>List&lt;&gt;</code>集合来接收返回的结果，不能直接使用<code>实体类对象</code>来接收</li>
<li>在<code>UserMapper.java</code>中定义接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据密码查找用户</div><div class="line"> * <span class="doctag">@param</span> password 用户密码</div><div class="line"> * <span class="doctag">@return</span> 返回的是一个用户的集合</div><div class="line"> */</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByPassword</span><span class="params">(String password)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中添加<code>&lt;select&gt;</code>节点<ul>
<li>这里的<code>resultType</code>虽然返回的是<code>User集合</code>，但是这里的类型还是需要写User类型</li>
<li>由于参数是基本类型，因此不需要使用<code>parameterType</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	List&lt;User&gt; findUserByPassword(String password);</div><div class="line">	resultType: 虽然返回的是User集合，但是这里的类型还是需要写User类型</div><div class="line"> --&gt;</div><div class="line"> </div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByPassword"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line"> 	select * from user where password=#&#123;password&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//获取User集合</span></div><div class="line">	List&lt;User&gt; users=userMapper.findUserByPassword(<span class="string">"12345895"</span>);</div><div class="line">	System.out.println(users);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>xxMapper.xml</code>中配置的节点的<code>id</code>要和<code>xxMapper.java</code>中的<code>方法名</code>相同</li>
<li>mybatis默认支持一个参数，但是我们可以使用<code>@Param(&quot;&quot;)</code>指定多个参数，不过在使用<code>#{}</code>取值的时候要和<code>@Param(&quot;&quot;)</code>中的参数一致</li>
<li>获取自增主键并不是作为方法的返回值，而是在调用方法的时候将自增主键的值设置在方法参数的对象中，那么此时的调用者就可以获取到<code>自增主键</code>的值</li>
<li>增加，修改，删除，方法返回的永远是受影响的行数</li>
<li><strong>在定义实体类属性的时候，尽量使用<code>包装类</code>，比如<code>Integer age</code></strong></li>
<li><strong>只要是<code>&lt;select&gt;</code>节点，那么必须写返回类型<code>resultType</code>，无论是基本型还是其他类型</strong></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis的增删改查&quot;&gt;&lt;a href=&quot;#Mybatis的增删改查&quot; class=&quot;headerlink&quot; title=&quot;Mybatis的增删改查&quot;&gt;&lt;/a&gt;Mybatis的增删改查&lt;/h1&gt;&lt;h2 id=&quot;增加数据&quot;&gt;&lt;a href=&quot;#增加数据&quot; cla
    
    </summary>
    
      <category term="Mybatis" scheme="http://chenjiabing666.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://chenjiabing666.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>快速排序算法</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/快速排序算法/</id>
    <published>2018-05-04T09:55:26.000Z</published>
    <updated>2018-05-04T10:07:37.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h1><h2 id="思想-从小到大排序"><a href="#思想-从小到大排序" class="headerlink" title="思想(从小到大排序)"></a>思想(从小到大排序)</h2><ul>
<li>快速排序是使用<code>分治法</code>来完成的</li>
<li>基本思想就是先从其中选取一个<code>基准值</code>，然后从数组的两端开始移动查找，在<code>右边</code>移动查找到比<code>基准值</code>小的数据停止移动，此时在<code>左边</code>查找到比<code>基准值</code>大的数据也停止查找，<code>交换</code>这两个查找到的数据，交换完成之后两端继续移动查找，如果左边找到比基准值大的，右边找到比基准值小的数据，再次交换。直到查找到同一个数据上(相遇)或者”擦肩而过”。那么将<code>基准值</code>与<code>相遇的那个值</code>交换，此时就能够保证在基准值左边的都是比基准值小的，在其右边的都是比其大的数，此时一轮查找结束。接下来这个基准值将一个数组分成了<code>两半</code>，左边的是小的，右边是大的，那么我们再分别对左边和右边的数据进行相同的操作，直至不可拆分成新的子序列为止。</li>
<li>快速排序的最坏运行时间是<code>O(n2)</code>，但期望的运行时间是<code>O(nlgn)</code>。</li>
</ul>
<h2 id="选取数组的第一个数为基准值"><a href="#选取数组的第一个数为基准值" class="headerlink" title="选取数组的第一个数为基准值"></a>选取数组的第一个数为基准值</h2><ul>
<li>我们选取数组的<code>第一个元素</code>作为基准值</li>
<li>此时先从数组的最右边开始查找，如果找到比基准值小的停止查找，再从最左边开始查找，直至找到比基准值大的，那么两边就交换，交换完成之后，最右边再次开始查找，找到就等待左边找到数交换，直至双方相遇。那么把相遇的那个点的数据和基准值交换即可，那么现在在基准值左边的都是小的，在右边的都是大的，此时的基准值将数组分成了两个子序列，再对子序列进行重复的操作，直到不可拆分成子序列。</li>
</ul>
<ul>
<li>实现的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">	        </div><div class="line">	        <span class="comment">//递归结束的条件，如果此时的子序列只有一个元素就是low=high，就不用排序了</span></div><div class="line">	        <span class="keyword">if</span>(low&gt;=high)&#123;</div><div class="line">	            <span class="keyword">return</span>;</div><div class="line">	        &#125;</div><div class="line">	        </div><div class="line">	        <span class="keyword">int</span> i=low;   <span class="comment">//i从最左边开始查找</span></div><div class="line">	        <span class="keyword">int</span> j=high;   <span class="comment">//i从最右边开始查找</span></div><div class="line">	        <span class="keyword">int</span> temp = arr[low]; <span class="comment">//设置基准值为第一个元素，temp</span></div><div class="line">	        </div><div class="line">	        <span class="comment">//如果此时的i和j没有相遇，一直进行下去</span></div><div class="line">	        <span class="keyword">while</span> (i&lt;j) &#123;</div><div class="line">	        	<span class="comment">//先从右边开始查找，如果没有找到比基准值小的并且没有相遇，那么继续向右查找</span></div><div class="line">	            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</div><div class="line">	                j--;   <span class="comment">//向左移动</span></div><div class="line">	            &#125;</div><div class="line">	            </div><div class="line">	            <span class="comment">//再从左边开始查找，如果没有找到比基准值大的并且没有相遇，那么继续向左查找</span></div><div class="line">	            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</div><div class="line">	                i++;   <span class="comment">// 向右移动</span></div><div class="line">	            &#125;</div><div class="line">	           </div><div class="line">	           <span class="comment">//代码能够运行到这里，那么表示已经找到了右面小于基准值的，左面大于基准值的，那么就可以交换数据了</span></div><div class="line">	           <span class="comment">//这里的i&lt;j用于控制在最后相遇的时候还要交换数据，不必交换了，可以省去一次的交换</span></div><div class="line">	          <span class="keyword">if</span> (i&lt;j) &#123;</div><div class="line">	        	  	<span class="comment">//交换数据</span></div><div class="line">	        	   	<span class="keyword">int</span> t = arr[j];</div><div class="line">	                arr[j] = arr[i];</div><div class="line">	                arr[i] = t;</div><div class="line">	          &#125;</div><div class="line">	             </div><div class="line"></div><div class="line">	        &#125;</div><div class="line">	        </div><div class="line">	        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></div><div class="line">	         arr[low] = arr[i];  <span class="comment">//第一个元素设置为i和j相遇的那个值</span></div><div class="line">	         arr[i] = temp;   <span class="comment">//相遇的那个地方设置为基准值</span></div><div class="line">	         </div><div class="line">	        <span class="comment">//递归调用左半数组，以基准值为中心切割</span></div><div class="line">	        quickSort(arr, low, j-<span class="number">1</span>);</div><div class="line">	        <span class="comment">//递归调用右半数组</span></div><div class="line">	        quickSort(arr, j+<span class="number">1</span>, high);</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] array=&#123; <span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">24</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">45</span>,<span class="number">88</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">25</span>&#125;;</div><div class="line">quickSort(array, <span class="number">0</span>, array.length-<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">	System.out.print(array[i]+<span class="string">"\t"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="另外一种方式"><a href="#另外一种方式" class="headerlink" title="另外一种方式"></a>另外一种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">		  <span class="keyword">int</span> i=low;</div><div class="line">		  <span class="keyword">int</span> j=high;</div><div class="line">		  <span class="keyword">int</span> temp=array[low];  <span class="comment">//选取第一个为基准数</span></div><div class="line">		  <span class="comment">//如果此时的还没有相遇，表示没有结束</span></div><div class="line">		  <span class="keyword">while</span>(i&lt;j)&#123;</div><div class="line">			  <span class="comment">//因为基准数是最左面的，因此从最右面开始查找</span></div><div class="line">			  <span class="comment">//当当前的值比基准值大，并且i和j不相等，即是没有相遇</span></div><div class="line">			  <span class="keyword">while</span>(temp&lt;array[j]&amp;&amp;i&lt;j)&#123;</div><div class="line">				  j--;   <span class="comment">//向左移动，继续查找</span></div><div class="line">			  &#125;</div><div class="line">			  </div><div class="line">			  <span class="comment">//从左面开始查找，如果查找到的数据array[i]小于基准值并且i和j没有相遇，那么继续向右移动查找</span></div><div class="line">			  <span class="keyword">while</span>(array[i]&lt;temp&amp;&amp;i&lt;j)&#123;</div><div class="line">				  i++;  <span class="comment">//继续向右移动查找</span></div><div class="line">			  &#125;</div><div class="line">			  </div><div class="line">			<span class="comment">//代码能够运行到这里，那么表示已经找到了右面小于基准值的，左面大于基准值的，那么就可以交换数据了</span></div><div class="line">	          <span class="keyword">if</span> (i&lt;j) &#123;</div><div class="line">	        	   	<span class="keyword">int</span> t = array[j];</div><div class="line">	                array[j] = array[i];</div><div class="line">	                array[i] = t;</div><div class="line">	          &#125;</div><div class="line">		  &#125;</div><div class="line">		  </div><div class="line">		  low=i;</div><div class="line">		  high=j;</div><div class="line">		  </div><div class="line">		  <span class="keyword">return</span> j ;   <span class="comment">//返回当前的基准值在数组中的索引，用于分割子序列</span></div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 </div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort1</span><span class="params">(<span class="keyword">int</span>[] arrary,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">		 <span class="comment">//停止条件，如果low&gt;high表示相遇，那么停止递归</span></div><div class="line">		 <span class="keyword">if</span>(low&gt;high)&#123;</div><div class="line">			 <span class="keyword">return</span>;</div><div class="line">		 &#125;</div><div class="line">		 <span class="keyword">int</span> index=partition(arrary, low, high);  <span class="comment">//获取基准值的位置</span></div><div class="line">		 quickSort1(arrary, low, index-<span class="number">1</span>);   <span class="comment">//左边的</span></div><div class="line">		 quickSort1(arrary,index+<span class="number">1</span>,high);  <span class="comment">//右边的</span></div><div class="line">		 </div><div class="line">	 &#125;</div></pre></td></tr></table></figure>
<h3 id="为什么从最右边开始查找"><a href="#为什么从最右边开始查找" class="headerlink" title="为什么从最右边开始查找"></a>为什么从最右边开始查找</h3><ul>
<li>如果从<code>最左边</code>开始查找，那么有可能某一次查找到了比基准值大的数，停止查找，等待最右边查找到比基准值小的数，但是此时最右边一直在查找，直到和其相遇都没有查找到比基准值小的数据，那么此时的的基准值就需要和这个比它还大的值交换，那么出现的结果就是此时的数组的第一个数是比基准值大的，违背了左边都是比基准值小的，右边都是比基准值大的。</li>
<li>如果从最右边开始查找，即使当某一个时刻查找到了比基准值小的数据，停止查找，等待左边查找到比基准值大的数据。但是左边没有找到，直至相遇，那么此时相遇的这个数任然是比基准值小的，因此和基准值交换是没有问题的</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/as02446418/article/details/47395867" target="_blank" rel="external">https://blog.csdn.net/as02446418/article/details/47395867</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速排序算法&quot;&gt;&lt;a href=&quot;#快速排序算法&quot; class=&quot;headerlink&quot; title=&quot;快速排序算法&quot;&gt;&lt;/a&gt;快速排序算法&lt;/h1&gt;&lt;h2 id=&quot;思想-从小到大排序&quot;&gt;&lt;a href=&quot;#思想-从小到大排序&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序算法</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/冒泡排序算法/</id>
    <published>2018-05-04T09:54:34.000Z</published>
    <updated>2018-05-04T09:55:04.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>比较相邻的两个数，将值较大的元素放在最前面，由于较小的数字像泡泡一样浮上来，因此取名为冒泡</li>
</ul>
<h2 id="从后向前比较-小的数上浮"><a href="#从后向前比较-小的数上浮" class="headerlink" title="从后向前比较(小的数上浮)"></a>从后向前比较(小的数上浮)</h2><ul>
<li><code>第一趟</code>：从数组的最后一个元素和倒数第二个元素比较，小的上浮(交换)，之后倒数第二个和倒数第三个数字比较，小的上浮(交换)，直至第二个数字和第一个数字比较，小的上浮,那么经过一趟排序之后，此时的第一个元素就是<strong>最小的</strong></li>
<li><code>第二趟</code>： 经过第一趟之后，第一个就是最小的数字，因此第二趟就不比较第一个和第二个数字了。从最后一个元素和倒数第二个元素比较，小的上浮，直至第三个元素和第二个元素比较，小的上浮，那么此时的第二个就是仅次于第一个的小的元素</li>
<li><code>第三趟</code>：和前面一样的比较，不过就是不用比较第二个和第三个元素了，因为经过第一趟和第二趟之后，数组中的第一个和第二个元素已经是最小的两个了。经过第三趟比较，第三个元素是仅次于第一个和第二个元素小的元素</li>
<li><code>第四趟</code>，<code>第五趟</code>………………………………</li>
</ul>
<ul>
<li><strong>从上面我们可以得出，假设数组中有<code>n</code>个元素，那么需要经过<code>n-1</code>趟排序才可以完成全部的比较，最后一趟可以比较出倒数第一个和倒数第二个元素的大小</strong></li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒泡排序算法之从后向前比较排序</div><div class="line"> * <span class="doctag">@param</span> a  需要排序的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">	<span class="comment">// 外层循环控制排序的趟数，总共需要n-1趟排序</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="comment">//内层循环控制的是每一趟排序需要比较的次数，j=a.length-1 表示从最后一个元素开始比较，j&gt;i是用于控制每趟之后比较的次数</span></div><div class="line">		<span class="comment">//比如，经过第一趟之后，那么第一个元素肯定是最小的，因此就不需要将第二个元素和其比较了，第二趟之后第二个元素第一个和第二个元素就是最小的，都需要比较了</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=a.length-<span class="number">1</span>;j&gt;i;j--)&#123;</div><div class="line">			<span class="comment">//比较大小，较小的就上浮</span></div><div class="line">			<span class="keyword">if</span>(a[j]&lt;a[j-<span class="number">1</span>])&#123;</div><div class="line">				<span class="comment">//交换位置</span></div><div class="line">				<span class="keyword">int</span> temp=a[j];</div><div class="line">				a[j]=a[j-<span class="number">1</span>];</div><div class="line">				a[j-<span class="number">1</span>]=temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="从前向后比较-大的数字下沉"><a href="#从前向后比较-大的数字下沉" class="headerlink" title="从前向后比较(大的数字下沉)"></a>从前向后比较(大的数字下沉)</h2><ul>
<li><code>第一趟</code>：从第一个元素和第二个元素进行比较，较大的下沉(交换)，然后第二个元素和第三个元素比较，较大的下沉，直至倒数第二个和最后一个比较，大的下沉，那么此时的<strong>最后一个数就是最大的</strong></li>
<li><code>第二趟</code>： 从第一个元素和第二个元素进行比较，较大的下沉，然后第二个和第三个比较，直至倒数第三个和倒数第二个比较，大的下沉，那么此时的倒数第二个数是仅次于最后一个数小的元素。因为经过<code>第一趟</code>之后，最后一个元素已经是最大的，因此不需要比较了</li>
<li><code>第三趟</code>： 经过第二趟之后，倒数第二个仅次于最后一个元素小的元素了，因此在第三趟中只需要比较到倒数第四个和倒数第三个元素的大小即可，大的下沉，那么此时的倒数第三个元素又是前面所有元素中最大的，因此在第四趟排序就不需要和其比较了。</li>
<li><code>第四趟</code>……………………………………………………</li>
</ul>
<ul>
<li>从上面我们可以得出结论： 假设有<code>n</code>个元素，那么总共需要进行<code>n-1</code>趟排序</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * 冒泡排序算法之从前向后比较排序</div><div class="line">	 * <span class="doctag">@param</span> a  需要排序的数组</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">		<span class="comment">// 外层循环控制排序的趟数，总共需要n-1趟排序</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</div><div class="line">			<span class="comment">//内层循环控制每趟循环比较的次数，j=0表示从第一个元素开始进行比较，j&lt;a.length-1-i用来控制每趟循环之后不用再比较的元素索引</span></div><div class="line">			<span class="comment">//比如第一趟循环之后，最后一个元素就是最大的，那么在第二趟循环就不需要和其比较了</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++) &#123;</div><div class="line">				<span class="comment">//相邻的元素进行比较，如果前面的大于后面的就交换位置</span></div><div class="line">				<span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</div><div class="line">					<span class="keyword">int</span> temp = a[j];</div><div class="line">					a[j] = a[j + <span class="number">1</span>];</div><div class="line">					a[j + <span class="number">1</span>] = temp;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;冒泡排序算法&quot;&gt;&lt;a href=&quot;#冒泡排序算法&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序算法&quot;&gt;&lt;/a&gt;冒泡排序算法&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://chenjiabing666.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/JSON/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/JSON/</id>
    <published>2018-05-04T09:53:41.000Z</published>
    <updated>2018-05-04T09:54:05.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>数据组织的一种方式</li>
</ul>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ul>
<li><code>key-value</code>形式的组织</li>
</ul>
<h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><ul>
<li>对象保存在<code>{}</code>中，并且以<code>key-value</code>的形式存储</li>
<li><strong>其中的<code>key</code>必须是加上<code>双引号</code>，不能是<code>单引号</code></strong></li>
</ul>
<ul>
<li><code>{&quot;key1&quot;,value1,&quot;key2&quot;,value2,..........}</code><ul>
<li>其中的<code>value</code>可以是任意类型的，比如<code>整数</code>，<code>字符串</code>等</li>
</ul>
</li>
<li><code>{&quot;name&quot;:&quot;Jack&quot;,&quot;age&quot;:22}</code>，这个是简单的对象</li>
<li>对象之中还可以<strong>嵌套（对象之中嵌套对象）</strong></li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"Jack"</span>,</div><div class="line">    <span class="attr">"age"</span>:<span class="number">22</span></div><div class="line">    <span class="string">"data"</span>:&#123;</div><div class="line">    		<span class="attr">"name"</span>:<span class="string">"admin"</span>,</div><div class="line">    		<span class="attr">"age"</span>:<span class="number">33</span>,</div><div class="line">    		<span class="attr">"telephone"</span>:<span class="string">"1235488"</span>,</div><div class="line">    		<span class="attr">"password"</span>:<span class="string">"12345686"</span></div><div class="line">			&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JSON数组"><a href="#JSON数组" class="headerlink" title="JSON数组"></a>JSON数组</h3><ul>
<li>使用<code>[]</code>保存数组</li>
<li>独立的数组：<code>[&quot;admin&quot;,&quot;Tom&quot;,&quot;JACk&quot;]</code></li>
<li>数组中包含对象</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"Jack"</span>,<span class="attr">"age"</span>:<span class="number">22</span>&#125;,</div><div class="line">    &#123;<span class="attr">"name"</span>:<span class="string">"Tom"</span>,<span class="attr">"age"</span>:<span class="number">33</span>&#125;,</div><div class="line">    <span class="string">"date"</span>:<span class="string">"2012-12-12"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>在对象中也是可以包含<code>JSON数组</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"employees"</span>: [</div><div class="line">                    &#123; <span class="attr">"firstName"</span>:<span class="string">"John"</span> , <span class="attr">"lastName"</span>:<span class="string">"Doe"</span> &#125;,</div><div class="line">                    &#123; <span class="attr">"firstName"</span>:<span class="string">"Anna"</span> , <span class="attr">"lastName"</span>:<span class="string">"Smith"</span> &#125;,</div><div class="line">                    &#123; <span class="attr">"firstName"</span>:<span class="string">"Peter"</span> , <span class="attr">"lastName"</span>:<span class="string">"Jones"</span> &#125;</div><div class="line">				],</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"JACK"</span>,</div><div class="line">    <span class="attr">"age"</span>:<span class="number">22</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="访问JSON对象"><a href="#访问JSON对象" class="headerlink" title="访问JSON对象"></a>访问JSON对象</h2><ul>
<li>定义一个JSON对象并且获取</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="string">"name"</span>:<span class="string">"Jack"</span>,</div><div class="line">    <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">    <span class="string">"data"</span>:&#123;</div><div class="line">    		<span class="string">"name"</span>:<span class="string">"admin"</span>,</div><div class="line">    		<span class="string">"age"</span>:<span class="number">33</span>,</div><div class="line">    		<span class="string">"telephone"</span>:<span class="string">"1235488"</span>,</div><div class="line">    		<span class="string">"password"</span>:<span class="string">"12345686"</span></div><div class="line">			&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> name=obj.name;</div><div class="line"><span class="keyword">var</span> age=obj.age;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dataName=obj.data.name;</div><div class="line"><span class="keyword">var</span> dataAge=obj.data.age;</div></pre></td></tr></table></figure>
<h2 id="访问JSON数组"><a href="#访问JSON数组" class="headerlink" title="访问JSON数组"></a>访问JSON数组</h2><ul>
<li>定义并且访问<ul>
<li>我们定义一个对象，其中包含一个JSON数组<code>employees</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testJSON</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//定义一个对象，其中包含JSON数组employees</span></div><div class="line">	<span class="keyword">var</span> obj = &#123;</div><div class="line">		    <span class="string">"employees"</span>: [</div><div class="line">		                    &#123; <span class="string">"firstName"</span>:<span class="string">"John"</span> , <span class="string">"lastName"</span>:<span class="string">"Doe"</span> &#125;,</div><div class="line">		                    &#123; <span class="string">"firstName"</span>:<span class="string">"Anna"</span> , <span class="string">"lastName"</span>:<span class="string">"Smith"</span> &#125;,</div><div class="line">		                    &#123; <span class="string">"firstName"</span>:<span class="string">"Peter"</span> , <span class="string">"lastName"</span>:<span class="string">"Jones"</span> &#125;</div><div class="line">						],</div><div class="line">		    <span class="string">"name"</span>:<span class="string">"JACK"</span>,</div><div class="line">		    <span class="string">"age"</span>:<span class="number">22</span></div><div class="line">		&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//遍历其中的JSON数组employees</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;obj.employees.length;i++)&#123;</div><div class="line">		<span class="built_in">console</span>.log(obj.employees[i].firstName+<span class="string">"-----"</span>+obj.employees[i].lastName);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSON-parse-str"><a href="#JSON-parse-str" class="headerlink" title="JSON.parse(str)"></a>JSON.parse(str)</h2><ul>
<li>将字符串形式的<code>JSON对象</code>转换成为<code>JSON对象</code>，即是去掉<code>引号</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p=<span class="string">'&#123;"name":"陈加兵","age":22&#125;'</span>;   <span class="comment">//这个是json字符串</span></div><div class="line"></div><div class="line"><span class="comment">//这样取值肯定不行，因为此时的p并不是JSON对象，而是一个字符串形式的JSON对象</span></div><div class="line"></div><div class="line">alert(p.name+<span class="string">"---&gt;"</span>+p.age);  </div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(p);     <span class="comment">//将字符串形式的json对象转换成真正的JSON对象</span></div><div class="line">alert(obj.name + <span class="string">"---&gt;"</span> + obj.age);  <span class="comment">//此时就可以取出其中的值了</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h
    
    </summary>
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>javascript实现Ajax</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/javascript%E5%AE%9E%E7%8E%B0Ajax/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/javascript实现Ajax/</id>
    <published>2018-05-04T09:52:53.000Z</published>
    <updated>2018-05-04T09:53:23.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript实现Ajax"><a href="#javascript实现Ajax" class="headerlink" title="javascript实现Ajax"></a>javascript实现Ajax</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>异步的<code>javascript</code>和<code>XML</code>，实现异步提交功能的技术(XMLHttpRequest)</li>
<li>不响应页面的前提下，服务器可以响应其中的一小部分数据到页面上</li>
</ul>
<h2 id="实现的步骤"><a href="#实现的步骤" class="headerlink" title="实现的步骤"></a>实现的步骤</h2><h3 id="创建XMLHttpRequest"><a href="#创建XMLHttpRequest" class="headerlink" title="创建XMLHttpRequest"></a>创建XMLHttpRequest</h3><ul>
<li>解决浏览器兼容问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> xmlhttp;</div><div class="line">	<span class="comment">//判断当前浏览器是否识别XMLHttpRequest</span></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line"> 			&#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line"> 				xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line"> 			&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line"> 			&#123;<span class="comment">// code for IE6, IE5</span></div><div class="line"> 				xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line"> 			&#125;</div><div class="line"> 		<span class="keyword">return</span> xmlhttp;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数：请求的方式</span></div><div class="line"><span class="comment">//第二： 请求的url</span></div><div class="line"><span class="comment">//第三个：是否为异步，true表示异步，false表示同步</span></div><div class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"Url"</span>,<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<h3 id="接收服务器响应数据"><a href="#接收服务器响应数据" class="headerlink" title="接收服务器响应数据"></a>接收服务器响应数据</h3><ul>
<li><code>xhr.onreadystatechange</code> : 表示从发送请求到响应请求的状态变化，根据状态的变化，处理数据5种状态</li>
<li><code>xhr.readyState</code> ： 获取状态值<ul>
<li><code>0</code> : 表示<code>xhr</code>对象创建，但是还未初始化</li>
<li><code>1</code> ：初始化完成，发送请求</li>
<li><code>2</code> ： 接收服务器的响应</li>
<li><code>3</code>：解析服务器断响应的数据</li>
<li><code>4</code>： 响应数据</li>
</ul>
</li>
<li><code>xhr.status</code> : 获取响应状态码 <ul>
<li><code>200</code> ：表示<code>ok</code></li>
<li><code>if(xhr.status==200)</code></li>
</ul>
</li>
<li><code>xhr.responseText</code> : 获取文本数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用于监听</span></div><div class="line">		xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">//如果数据响应成功，并且状态码为200</span></div><div class="line">			<span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>) &#123;</div><div class="line">				<span class="comment">//处理数据</span></div><div class="line">				<span class="keyword">var</span> text=xhr.responseText;   <span class="comment">//获取文本数据</span></div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>请求本地的<code>file.text</code>文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadText</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> xhr;</div><div class="line">	<span class="comment">//判断当前浏览器是否识别XMLHttpRequest</span></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line"> 			&#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line"> 				xhr=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line"> 			&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line"> 			&#123;<span class="comment">// code for IE6, IE5</span></div><div class="line"> 				xhr=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line"> 			&#125;</div><div class="line"> 		</div><div class="line"> 		<span class="comment">//用于监听</span></div><div class="line"> 		xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 			<span class="comment">//如果数据响应成功，并且状态码为200</span></div><div class="line"> 			<span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>) &#123;</div><div class="line"> 				<span class="comment">//处理数据</span></div><div class="line"> 				<span class="keyword">var</span> text=xhr.responseText;   <span class="comment">//获取文本数据</span></div><div class="line"> 				alert(text);</div><div class="line"> 			&#125;</div><div class="line"> 		&#125;</div><div class="line">	</div><div class="line">             <span class="comment">//异步请求</span></div><div class="line"> 		xhr.open(<span class="string">"GET"</span>,<span class="string">"file.text"</span>,<span class="literal">true</span>);  </div><div class="line"> 		xhr.send();  <span class="comment">//发送请求</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;javascript实现Ajax&quot;&gt;&lt;a href=&quot;#javascript实现Ajax&quot; class=&quot;headerlink&quot; title=&quot;javascript实现Ajax&quot;&gt;&lt;/a&gt;javascript实现Ajax&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://chenjiabing666.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis配置事务管理器</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis配置事务管理器/</id>
    <published>2018-05-04T09:52:03.000Z</published>
    <updated>2018-05-04T10:00:08.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis配置事务管理器"><a href="#Mybatis配置事务管理器" class="headerlink" title="Mybatis配置事务管理器"></a>Mybatis配置事务管理器</h1><ul>
<li>数据库中的事务可以保证在连续执行的<strong>多条写操作(增删改)</strong>时，这多条操作要么成功，要么全部失败，以保证数据和逻辑的完整及严谨</li>
<li>在使用<code>mybatis</code>时，无需考虑事务如何创建，如何提交等，只需要配置好事务管理器</li>
</ul>
<h2 id="配置事务管理器-DataSourceTransactionManager"><a href="#配置事务管理器-DataSourceTransactionManager" class="headerlink" title="配置事务管理器(DataSourceTransactionManager)"></a>配置事务管理器(DataSourceTransactionManager)</h2><ul>
<li>在spring的配置文件中配置即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置MapperScannerConfigurer,自动扫描整个包，并且spring会自动创建UserMapper接口对象--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">			<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!-- 配置XML文件的位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"classpath:mappers/UserMapper.xml"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="comment">&lt;!--配置事务管理器，需要用到前面配置的数据源datasource--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="开启事务注解"><a href="#开启事务注解" class="headerlink" title="开启事务注解"></a>开启事务注解</h2><ul>
<li>直接在<code>spring</code>配置文件中配置即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启事务注解 ,transaction-manager指定的是上面配置的事务管理器的id--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在需要使用事务的方法上添加-Transactional注解-或者是Service类上"><a href="#在需要使用事务的方法上添加-Transactional注解-或者是Service类上" class="headerlink" title="在需要使用事务的方法上添加@Transactional注解(或者是Service类上)"></a>在需要使用事务的方法上添加<code>@Transactional</code>注解(或者是Service类上)</h2><ul>
<li>如果添加在类上，那么类中的全部方法都会被事务管理器管理</li>
<li>如果添加在方法上，那么只有这个方法会被管理</li>
<li>事务只发生在<code>service</code>的</li>
</ul>
<ul>
<li>在方法上添加注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangePasssword</span><span class="params">(Integer id, String oldPassword,</span></span></div><div class="line">		String newPassword) <span class="keyword">throws</span> UserNotFoundException, PasswordNotMatchException&#123;</div><div class="line">	User user=<span class="keyword">this</span>.findUserById(id);  <span class="comment">//获取用户信息</span></div><div class="line">	<span class="keyword">if</span> (user==<span class="keyword">null</span>) &#123;   <span class="comment">//如果用户信息不存在</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UserNotFoundException(<span class="string">"操作失败，用户信息不存在"</span>);</div><div class="line">	&#125;<span class="keyword">else</span> &#123; <span class="comment">//用户存在，则判断原密码</span></div><div class="line">		<span class="keyword">if</span> (user.getPassword().equals(oldPassword)) &#123;<span class="comment">//如果密码匹配</span></div><div class="line">			User user1=<span class="keyword">new</span> User();</div><div class="line">			user1.setPassword(newPassword);</div><div class="line">			userMapper.update(user1);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;   <span class="comment">//原密码不匹配</span></div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> PasswordNotMatchException(<span class="string">"操作失败，原密码不正确"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>service</code>类上添加<code>@Transactional</code>注解，那么类中的整个方法都会被管理</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>  </div><div class="line"><span class="meta">@Transactional</span>   <span class="comment">//配置事务管理</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Resource</span></div><div class="line">	<span class="keyword">private</span> UserMapper userMapper;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h2><ul>
<li>在<code>spring-service.xml</code>中开启组件扫描<code>service</code>即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.spring.service"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事务如何处理"><a href="#事务如何处理" class="headerlink" title="事务如何处理"></a>事务如何处理</h2><ul>
<li><strong>在spring处理事务时，如果遇到<code>RuntimeException</code>就会自动回滚</strong></li>
</ul>
<h2 id="完整的spring配置文件"><a href="#完整的spring配置文件" class="headerlink" title="完整的spring配置文件"></a>完整的spring配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置MapperScannerConfigurer,自动扫描整个包，并且spring会自动创建UserMapper接口对象--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">			<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!-- 配置XML文件的位置,其中的值是一个数组 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/UserMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/DormitoryMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 开启事务注解 ,transaction-manager指定的是上面配置的事务管理器的id--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis配置事务管理器&quot;&gt;&lt;a href=&quot;#Mybatis配置事务管理器&quot; class=&quot;headerlink&quot; title=&quot;Mybatis配置事务管理器&quot;&gt;&lt;/a&gt;Mybatis配置事务管理器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数据库中的事务可以保证在连续执行
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之多表查询</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E4%B9%8B%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis之多表查询/</id>
    <published>2018-05-04T09:51:10.000Z</published>
    <updated>2018-05-04T09:51:35.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis之多表查询"><a href="#Mybatis之多表查询" class="headerlink" title="Mybatis之多表查询"></a>Mybatis之多表查询</h1><h2 id="一对一的查询-lt-assocation-gt"><a href="#一对一的查询-lt-assocation-gt" class="headerlink" title="一对一的查询(&lt;assocation&gt;)"></a><code>一对一</code>的查询(<code>&lt;assocation&gt;</code>)</h2><h3 id="创建Java类"><a href="#创建Java类" class="headerlink" title="创建Java类"></a>创建Java类</h3><ul>
<li>创建<code>User</code>类(用户类)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6716332190979093860L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="keyword">private</span> Department department;   <span class="comment">//Department对象</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">(Department department)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.department = department;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((age == <span class="keyword">null</span>) ? <span class="number">0</span> : age.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((department == <span class="keyword">null</span>) ? <span class="number">0</span> : department.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((password == <span class="keyword">null</span>) ? <span class="number">0</span> : password.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((username == <span class="keyword">null</span>) ? <span class="number">0</span> : username.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		User other = (User) obj;</div><div class="line">		<span class="keyword">if</span> (age == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.age != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!age.equals(other.age))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (department == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.department != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!department.equals(other.department))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.password != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(other.password))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.username != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!username.equals(other.username))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span></div><div class="line">				+ password + <span class="string">", age="</span> + age + <span class="string">", department="</span> + department</div><div class="line">				+ <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建<code>Department</code>类(部门类)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Department other = (Department) obj;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Department [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li>我们知道<code>一个用户只能属于一个部门</code>，因此这里在<code>User</code>类中只是使用了<code>Department</code>对象，而不是个<code>集合</code></li>
<li>那么我们想要查询所有的用户信息和其所在的部门信息，此时的<code>sql</code>语句为:<code>select * from user u left join department d on u.department_id=d.id;</code>。但是我们在mybaits中如果使用这条语句查询，那么返回的结果类型是什么呢？如果是<code>User</code>类型的，那么查询结果返回的还有<code>Department</code>类型的数据，那么肯定会对应不上的。</li>
<li>我们可以使用<code>resultMap</code>解决对应问题</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>使用<code>resultMap</code>解决查询结果的对应问题<ul>
<li>这里一定要在<code>resultMap</code>将每一个字段和查询结果返回的字段对应上，否则此时的结果就为<code>null</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义resultMap --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">id</span>=<span class="string">"UserDepartment"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置id的对应 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置其他字段的对应关系</span></div><div class="line">		column: 查询结果中的列名字，如果没有起别名，那么就是表中的字段名</div><div class="line">		property: java类中的属性名称</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置对1的数据类型，即User类中的Department对象是单一的具体类型</span></div><div class="line">		property: 这个是在User类中的字段名称</div><div class="line">		javaType: 这个是java类的全名，是Department类的全名</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> <span class="attr">javaType</span>=<span class="string">"cn.tedu.spring.entity.Department"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	User findUserAndDepartment();</div><div class="line">	resultMap: 指定上面resultMap的id的值</div><div class="line"> --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndDepartment"</span> <span class="attr">resultMap</span>=<span class="string">"UserDepartment"</span>&gt;</span></div><div class="line"> 	select *  from user u left join department d on u.department_id=d.id</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndDepartment</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		List&lt;User&gt; users=userMapper.findUserAndDepartment();</div><div class="line">		<span class="keyword">for</span> (User user : users) &#123;</div><div class="line">			System.out.println(user);</div><div class="line">		&#125;</div><div class="line">		ac.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="一对多的查询-lt-collection-gt"><a href="#一对多的查询-lt-collection-gt" class="headerlink" title="一对多的查询(&lt;collection&gt;)"></a><code>一对多</code>的查询(<code>&lt;collection&gt;</code>)</h2><ul>
<li>一个宿舍可以住多个学生，那么我们通过宿舍查询学生，那么就是<code>一对多</code>查询</li>
</ul>
<h3 id="创建Java"><a href="#创建Java" class="headerlink" title="创建Java"></a>创建Java</h3><ul>
<li>创建<code>Student</code>类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8673238196042278929L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((age == <span class="keyword">null</span>) ? <span class="number">0</span> : age.hashCode());</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Student other = (Student) obj;</div><div class="line">		<span class="keyword">if</span> (age == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.age != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!age.equals(other.age))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建<code>Dormitory</code>类<ul>
<li>其中有一个<code>Set&lt;Student&gt;</code>集合用来存储学生对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dormitory</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1359749532219773083L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String number;  <span class="comment">//编号</span></div><div class="line">	<span class="keyword">private</span> Set&lt;Student&gt; students;  <span class="comment">//学生集合，一个宿舍可以住多个学生</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> number;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String number)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.number = number;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> students;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.students = students;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + ((id == <span class="keyword">null</span>) ? <span class="number">0</span> : id.hashCode());</div><div class="line">		result = prime * result + ((number == <span class="keyword">null</span>) ? <span class="number">0</span> : number.hashCode());</div><div class="line">		result = prime * result</div><div class="line">				+ ((students == <span class="keyword">null</span>) ? <span class="number">0</span> : students.hashCode());</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Dormitory other = (Dormitory) obj;</div><div class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.id != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!id.equals(other.id))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (number == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.number != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!number.equals(other.number))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (students == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (other.students != <span class="keyword">null</span>)</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!students.equals(other.students))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Dormitory [id="</span> + id + <span class="string">", number="</span> + number + <span class="string">", students="</span></div><div class="line">				+ students + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><ul>
<li>student</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,age <span class="built_in">int</span>,dormitory_id <span class="built_in">int</span>);</div></pre></td></tr></table></figure>
<ul>
<li>dormitory</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> dormitory(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="built_in">number</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>);</div></pre></td></tr></table></figure>
<h3 id="创建DormitoryMapper-java-接口"><a href="#创建DormitoryMapper-java-接口" class="headerlink" title="创建DormitoryMapper.java(接口)"></a>创建DormitoryMapper.java(接口)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DormitoryMapper</span> </span>&#123;</div><div class="line">	<span class="comment">//查询所有的宿舍信息</span></div><div class="line">	<span class="function">List&lt;Dormitory&gt; <span class="title">findDormitories</span><span class="params">()</span></span>;</div><div class="line">	<span class="comment">//根据id查询宿舍信息</span></div><div class="line">	<span class="function">Dormitory <span class="title">findDormitory</span><span class="params">(Integer id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建DormitoryMapper-xml"><a href="#创建DormitoryMapper-xml" class="headerlink" title="创建DormitoryMapper.xml"></a>创建DormitoryMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;  </div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      </span></div><div class="line"> "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- MyBatis的接口映射文件，根节点是mapper --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 接口映射文件是与Java接口文件(interface)相对应的 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 根节点的namespace属性用于指定Java接口文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.tedu.spring.mapper.DormitoryMapper"</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 定义resultMap</span></div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.tedu.spring.entity.Dormitory"</span> <span class="attr">id</span>=<span class="string">"DormitoryStudentRs"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 因为Dormitoy中的Student使用set集合存储的，因此这里使用collection标签</span></div><div class="line">			property ： Java类中的集合对象</div><div class="line">			ofType： 集合对象的泛型类型</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"cn.tedu.spring.entity.Student"</span>&gt;</span></div><div class="line">			</div><div class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 	List&lt;Dormitory&gt; findDormitories();</span></div><div class="line">			查询所有的宿舍信息</div><div class="line">			resultMap： 指定前面定义的resultMap</div><div class="line">	 --&gt;</div><div class="line">	 </div><div class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findDormitories"</span> <span class="attr">resultMap</span>=<span class="string">"DormitoryStudentRs"</span>&gt;</span></div><div class="line">	 	select * from student s left join dormitory d on s.dormitory_id=d.id</div><div class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	 </div><div class="line">	 <span class="comment">&lt;!-- </span></div><div class="line">	 	Dormitory findDormitory(Integer id);</div><div class="line">	  --&gt;</div><div class="line">	  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findDormitory"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.Dormitory"</span>&gt;</span></div><div class="line">	  	select * from dormitory where id=#&#123;id&#125;</div><div class="line">	  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="在spring配置文件中添加DormitoryMapper-xml文件"><a href="#在spring配置文件中添加DormitoryMapper-xml文件" class="headerlink" title="在spring配置文件中添加DormitoryMapper.xml文件"></a>在<code>spring</code>配置文件中添加<code>DormitoryMapper.xml</code>文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!-- 配置XML文件的位置,其中的值是一个数组 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">array</span>&gt;</span>	</div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/UserMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:mappers/DormitoryMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindDormitory</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	<span class="comment">//获取DormitoryMapper对象</span></div><div class="line">	DormitoryMapper dormitoryMapper=ac.getBean(<span class="string">"dormitoryMapper"</span>,DormitoryMapper.class);</div><div class="line">	</div><div class="line">       <span class="comment">//执行查询方法</span></div><div class="line">	List&lt;Dormitory&gt; dormitories=dormitoryMapper.findDormitories();</div><div class="line">	<span class="keyword">for</span> (Dormitory dormitory : dormitories) &#123;</div><div class="line">		System.out.println(dormitory);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis之多表查询&quot;&gt;&lt;a href=&quot;#Mybatis之多表查询&quot; class=&quot;headerlink&quot; title=&quot;Mybatis之多表查询&quot;&gt;&lt;/a&gt;Mybatis之多表查询&lt;/h1&gt;&lt;h2 id=&quot;一对一的查询-lt-assocation-gt&quot;&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis之ResultMap</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Mybatis%E4%B9%8BResultMap/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Mybatis之ResultMap/</id>
    <published>2018-05-04T09:49:51.000Z</published>
    <updated>2018-05-04T09:50:47.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis之ResultMap"><a href="#Mybatis之ResultMap" class="headerlink" title="Mybatis之ResultMap"></a>Mybatis之ResultMap</h1><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><ul>
<li>通常实体类中的属性要和数据库表中的字段一致，包括类型，字段名称</li>
<li>因此我们在单表查询的时候不需要使用&lt;<code>resultMap&gt;</code>指定实体类和表中的字段对应关系，但是如果我们在查询的时候使用了别名，或者属性字段和表的字段不一致，那么我们就需要用<code>&lt;resultMap&gt;</code>指定对应关系了</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>创建一个User类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6716332190979093860L</span>;</div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="keyword">private</span> String password;</div><div class="line">	<span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span></div><div class="line">				+ password + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建user表<ul>
<li>表中的字段和<code>User</code>实体类一致</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,username <span class="built_in">varchar</span>(<span class="number">20</span>),age <span class="built_in">int</span> ,<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">20</span>));</div></pre></td></tr></table></figure>
<h2 id="根据id查询用户信息-使用resultType指定结果类型"><a href="#根据id查询用户信息-使用resultType指定结果类型" class="headerlink" title="根据id查询用户信息(使用resultType指定结果类型)"></a>根据id查询用户信息(使用<code>resultType</code>指定结果类型)</h2><ul>
<li>直接在<code>UserMapper.xml</code>中配置<code>&lt;select&gt;即可</code><ul>
<li>使用<code>resultType</code>指定返回的结果类型</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	User findUserById(Integer id);</div><div class="line">	resultType: 指定返回的结果类型</div><div class="line"> --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line"> 	select username,password,age,id from user where id=#&#123;id&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>上面的查询返回的结果字段和<code>User</code>实体类中的属性字段一致，因此只需要指定<code>resultType</code>即可对应。但是如果我们查询的语句如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">	User findUserById(Integer id);</div><div class="line">	resultType: 指定返回的结果类型</div><div class="line"> --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line"> 	select username name,password pw,age,id from user where id=#&#123;id&#125;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>那么此时返回的结果中，<code>User</code>类中的<code>username</code>，<code>password</code>值为<code>null</code>，因为没有对应上，这里使用了<code>别名</code></li>
</ul>
<h2 id="使用resultMap解决别名或者字段不对应的问题"><a href="#使用resultMap解决别名或者字段不对应的问题" class="headerlink" title="使用resultMap解决别名或者字段不对应的问题"></a>使用<code>resultMap</code>解决别名或者字段不对应的问题</h2><ul>
<li>如果实体类中的字段和表中的字段一致，但是查询结果中使用了别名，那么需要使用<code>&lt;resultMap&gt;</code>来设置对应关系</li>
<li>如果实体类中的字段和表中的字段不一致，那么返回的查询结果即使不使用别名也会不对应，因此此时还是需要使用<code>&lt;resultMap&gt;</code>来设置对应关系</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 指定resultMap</span></div><div class="line"> 	type: 指定java类的全名</div><div class="line"> 	id： 唯一标识</div><div class="line">  --&gt;</div><div class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">id</span>=<span class="string">"UserMap"</span>&gt;</span></div><div class="line"> 	<span class="comment">&lt;!-- id指定主键的对应关系，这里主键没有使用别名，因此不需要指定对应关系，可以自动对应上</span></div><div class="line"> 	&lt;id column="id" property="id"/&gt; --&gt;</div><div class="line"> 	</div><div class="line"> 	<span class="comment">&lt;!-- result ： 指定主键之外的属性</span></div><div class="line"> 		column: 查询结果中的字段</div><div class="line"> 		property：java类中的对应属性</div><div class="line"> 	 --&gt;</div><div class="line"> 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pw"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- </span></div><div class="line"> 	User findUserById(Integer id);</div><div class="line"> 	resultMap: 指定返回的结果类型为前面定义的resultMap</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></div><div class="line">  	select username name,password pw,age,id from user where id=#&#123;id&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFinduserById</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	</div><div class="line">	User user=userMapper.findUserById(<span class="number">3</span>);</div><div class="line">	System.out.println(user);</div><div class="line">	</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-lt-resultMap-gt-来解决多表之间的查询"><a href="#使用-lt-resultMap-gt-来解决多表之间的查询" class="headerlink" title="使用&lt;resultMap&gt;来解决多表之间的查询"></a>使用<code>&lt;resultMap&gt;</code>来解决多表之间的查询</h2><ul>
<li>后面的多表关联查询会讲到</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>实体类中的属性是和表中的属性一致的，普通的java类或许不相同</li>
<li>如果查询返回的结果字段和java类中的属性字段一致，那么就不需要使用<code>resultMap</code>,而是能够自动的对应上</li>
<li>如果返回查询结果字段和java类中的属性字段不一致，那么就需要使用<code>resultMap</code>来设置对应关系了</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis之ResultMap&quot;&gt;&lt;a href=&quot;#Mybatis之ResultMap&quot; class=&quot;headerlink&quot; title=&quot;Mybatis之ResultMap&quot;&gt;&lt;/a&gt;Mybatis之ResultMap&lt;/h1&gt;&lt;h2 id=&quot;实体类&quot;&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis之动态sql</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/%E5%8A%A8%E6%80%81sql/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/动态sql/</id>
    <published>2018-05-04T09:48:53.000Z</published>
    <updated>2018-05-04T09:49:30.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><h2 id="if子句"><a href="#if子句" class="headerlink" title="if子句"></a>if子句</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul>
<li><code>&lt;if test=&quot;&quot;&gt;</code><ul>
<li><code>test</code>中填写的是判断条件</li>
</ul>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="更新密码或者年龄"><a href="#更新密码或者年龄" class="headerlink" title="更新密码或者年龄"></a>更新密码或者年龄</h4><ul>
<li>首先在<code>UserMapper.java</code>中添加抽象方法<ul>
<li>因为要一个方法兼具更新密码或者更新年龄的功能，那么我们直接使用一个<code>实体类对象</code>作为方法参数即可</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新数据，比如密码或者年龄</div><div class="line"> * <span class="doctag">@param</span> user  User对象，其中封装了用户密码或者用户的年龄</div><div class="line"> * <span class="doctag">@return</span> 受影响的行数，成功返回1，否则返回0</div><div class="line"> */</div><div class="line"><span class="function">Integer <span class="title">update</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置<code>&lt;update&gt;</code>节点<ul>
<li>只能修改密码或者年龄，不能同时修改，因为如果同时修改拼接而成的<code>sql</code>语句将会少了一个逗号<code>,</code></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	update user </div><div class="line">	set</div><div class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">		password=#&#123;password&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></div><div class="line">		age=#&#123;age&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试<ul>
<li>修改年龄<code>age</code>，因此只需要在新建的<code>User</code>对象中添加<code>age</code>的值即可，那么此时<code>password</code>的值不能设置</li>
<li>同时要设置<code>id</code>的值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//加载Spring的配置文件</span></div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	<span class="comment">//新建一个User对象</span></div><div class="line">	User user=<span class="keyword">new</span> User();</div><div class="line">	user.setId(<span class="number">3</span>);  <span class="comment">//设置id</span></div><div class="line">	user.setAge(<span class="number">33</span>);  <span class="comment">//设置年龄</span></div><div class="line">	<span class="keyword">int</span> affectRows=userMapper.update(user);</div><div class="line">	System.out.println(affectRows);</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="根据用户名或者用户id查询信息"><a href="#根据用户名或者用户id查询信息" class="headerlink" title="根据用户名或者用户id查询信息"></a>根据用户名或者用户id查询信息</h4><ul>
<li>在<code>UserMpper.java</code>中添加接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 查找用户信息，根据用户名或者用户id查询</div><div class="line"> * <span class="doctag">@param</span> user  User对象，其中封装了用户名或者用户id</div><div class="line"> * <span class="doctag">@return</span> 用户对象</div><div class="line"> */</div><div class="line"><span class="function">User <span class="title">findUser</span><span class="params">(User user)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UserMapper.xml</code>中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">		User findUser(User user); </div><div class="line">		不能同时查询，缺少连接符号 and or</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">		select * from user </div><div class="line">		where </div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></div><div class="line">			id=#&#123;id&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">			username=#&#123;username&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//加载Spring的配置文件</span></div><div class="line">		AbstractApplicationContext ac</div><div class="line">			= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">				<span class="string">"spring-mvc.xml"</span>,</div><div class="line">				<span class="string">"spring-dao.xml"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//获取UserMapper的bean，这个是spring通过扫描mapper.xml文件自动为mybatis自动创建的，首字母小写</span></div><div class="line">		UserMapper userMapper</div><div class="line">			= ac.getBean(</div><div class="line">				<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">		<span class="comment">//新建一个User对象</span></div><div class="line">		User user=<span class="keyword">new</span> User();</div><div class="line">		user.setId(<span class="number">3</span>);  <span class="comment">//设置id</span></div><div class="line">		<span class="comment">//根据id查找</span></div><div class="line">		System.out.println(userMapper.findUser(user));</div><div class="line">		ac.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="choose【了解】"><a href="#choose【了解】" class="headerlink" title="choose【了解】"></a>choose【了解】</h2><ul>
<li>相当于java中的<code>switch</code>，通常与<code>when</code>搭配使用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">	select * from user where</div><div class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">        	password=#&#123;password&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></div><div class="line">        	id=#&#123;id&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="where元素"><a href="#where元素" class="headerlink" title="where元素"></a>where元素</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>我们使用动态sql语句构建的语句如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> &gt;</span></div><div class="line">	select * from user </div><div class="line">    where </div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">    	password=#&#123;password&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">    	and username=#&#123;username&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果传入的参数<code>User</code>对象中只是设置了<code>username</code>的值，那么此时的sql语句将会变成<code>select * from user where and username=#{username}</code>,很明显多了一个<code>and</code></li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li><code>&lt;where&gt;</code>标签主要是用于简化<code>where</code>子句的编写，<code>&lt;where&gt;</code>可以替代sql语句中的<code>where</code>，而且还可以将后面多余的<code>and</code>或者<code>or</code>去掉</li>
</ul>
<h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select 字段 from 表名</div><div class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">		.....</div><div class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul>
<li>我们使用<code>&lt;where&gt;</code>标签解决上面的问题</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.tedu.spring.entity.User"</span> &gt;</span></div><div class="line">	select * from user </div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">           and password=#&#123;password&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">            and username=#&#123;username&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果此时在<code>User</code>对象中只是设置了一个<code>username</code>的值，那么会去掉前面的<code>and</code>关键字，并且此时的sql语句会变成：<code>select * from user where username=#{username}</code></li>
</ul>
<h2 id="set元素"><a href="#set元素" class="headerlink" title="set元素"></a>set元素</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul>
<li>我们使用动态sql构建一个更新语句，如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	 	update user </div><div class="line">	 	set</div><div class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">	 		password=#&#123;password&#125;,</div><div class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	</div><div class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></div><div class="line">	 		age=#&#123;age&#125;,</div><div class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	</div><div class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">	 		username=#&#123;username&#125;</div><div class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	</div><div class="line">	 	where id=#&#123;id&#125;</div><div class="line">	 <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>从上面的<code>&lt;update&gt;</code>中可以看出，如果我们在<code>User</code>对象中没有设置<code>password,age,username</code>的值，那么构建出来的sql语句变成了<code>update user set where id=#{id}</code>，很明显是一个错误的语句。</li>
<li>如果在<code>User</code>对象中值设置了<code>password</code>的值，那么这里的sql语句变成了<code>update user set password=#{password}, where id=#{id}</code>,很明显，这个sql多了一个逗号</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>我们可以使用<code>&lt;set&gt;</code>,可以在<code>&lt;set&gt;</code>元素所在位置输出一个<code>set</code>关键字，而且可以去除内容结尾中无关的<code>逗号</code>，有了<code>&lt;set&gt;</code>元素，那么我们可以动态的修改字段</li>
</ul>
<h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">update table_name </div><div class="line">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">		......</div><div class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li>解决上面的问题</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</span></div><div class="line">	 	update user </div><div class="line">	 	<span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password!=null"</span>&gt;</span></div><div class="line">                password=#&#123;password&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></div><div class="line">                age=#&#123;age&#125;,</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></div><div class="line">                username=#&#123;username&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	 	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">	 	where id=#&#123;id&#125;</div><div class="line">	 <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="where-元素"><a href="#where-元素" class="headerlink" title="where 元素"></a>where 元素</h2><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><ul>
<li>使用动态sql可以解决SQL语句中代码复用问题，即2处或者多处高度相似的代码，在使用动态SQL之后，1个方法和1个映射就可以解决</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>虽然在动态sql中，有很多标签可以实现对<code>SQL</code>语句的编程，但是，使用动态SQL的原则应该是希望代码复用，而不是编程，更不要用动态sql解决业务方法的问题</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态sql&quot;&gt;&lt;a href=&quot;#动态sql&quot; class=&quot;headerlink&quot; title=&quot;动态sql&quot;&gt;&lt;/a&gt;动态sql&lt;/h1&gt;&lt;h2 id=&quot;if子句&quot;&gt;&lt;a href=&quot;#if子句&quot; class=&quot;headerlink&quot; title=&quot;if子句&quot;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis入门程序</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/MyBatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/MyBatis入门程序/</id>
    <published>2018-05-04T09:47:40.000Z</published>
    <updated>2018-05-04T09:48:00.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis入门程序"><a href="#MyBatis入门程序" class="headerlink" title="MyBatis入门程序"></a>MyBatis入门程序</h2><h3 id="设计案例"><a href="#设计案例" class="headerlink" title="设计案例"></a>设计案例</h3><p>实现向<code>tedu_ums</code>数据库的<code>t_users</code>数据表中插入数据。</p>
<h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p>1 创建项目<code>DAY07-MyBatis-Sample</code>，生成<code>web.xml</code>，在<code>web.xml</code>中配置（2项），添加<code>spring-webmvc</code>依赖，复制Spring配置文件，添加Tomcat运行环境；</p>
<p>2 添加新的依赖：<code>mybatis</code>、<code>mybatis-spring</code>、<code>spring-jdbc</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring-JDBC --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>以上依赖中，<code>spring-jdbc</code>的版本需与<code>spring-webmvc</code>保持一致！（同一个项目中，以<code>spring-</code>作为前缀的依赖都应该使用相同版本）</strong></p>
<p>3 创建实现类<code>cn.tedu.spring.entity.User</code>，在该类中声明<code>Integer id</code>、<code>String username</code>、<code>String password</code>属性，及相关方法；</p>
<p>4 设计持久层接口：创建<code>cn.tedu.spring.mapper.UserMapper</code>接口，并在接口中添加抽象方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer reg(User user);</div></pre></td></tr></table></figure>
<p>注意：增删改操作固定返回受影响的行数，在设计方法时，可以将返回值声明为Integer类型，或使用void表示无返回值也可以。</p>
<p>5 从FTP下载<code>mybatis.zip</code>文件，将解压得到的<code>EmpMapper.xml</code>重命名为<code>UserMapper.xml</code>（推荐这样命名），然后在项目的<code>src\main\resource</code>新建文件夹<code>mappers</code>，将<code>UserMapper.xml</code>复制到<code>mappers</code>文件夹中；</p>
<p>6  编辑<code>UserMapper.xml</code>文件：</p>
<p>​    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- MyBatis的接口映射文件，根节点是mapper --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 接口映射文件是与Java接口文件(interface)相对应的 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 根节点的namespace属性用于指定Java接口文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> </span></div><div class="line">	<span class="attr">namespace</span>=<span class="string">"cn.tedu.spring.mapper.UserMapper"</span>&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 节点名称取决于需要执行的操作 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 例如增加操作应该使用insert节点 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- id属性(*)的值是Java接口中的方法名称 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- parameterType属性的值是参数类型 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 节点中间编写SQL语句 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"reg"</span></span></div><div class="line">		<span class="attr">parameterType</span>=<span class="string">"cn.tedu.spring.entity.User"</span>&gt;</div><div class="line">		INSERT INTO t_users (</div><div class="line">			username, password</div><div class="line">		) VALUES (</div><div class="line">			#&#123;username&#125;, #&#123;password&#125;</div><div class="line">		)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>7 添加依赖：<code>mysql-connector-xxxx</code>、<code>dbcp</code>、<code>junit</code>；</p>
<p>8 在<code>src\main\resources</code>下配置<code>db.properties</code>；</p>
<p>9 从此前的项目中复制<code>spring-dao.xml</code>，在该配置文件中，至少配置了：加载<code>db.properties</code>、<code>BasicDataSource</code></p>
<p>10 在<code>spring-dao.xml</code>中，配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置MapperScannerConfigurer ，扫描mapper的配置在哪里--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">		<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!-- 配置XML文件的位置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></div><div class="line">		<span class="attr">value</span>=<span class="string">"classpath:mappers/UserMapper.xml"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>11 编写测试类，添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReg</span><span class="params">()</span> </span>&#123;</div><div class="line">	AbstractApplicationContext ac</div><div class="line">		= <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">			<span class="string">"spring-mvc.xml"</span>,</div><div class="line">			<span class="string">"spring-dao.xml"</span>);</div><div class="line">	</div><div class="line">	UserMapper userMapper</div><div class="line">		= ac.getBean(</div><div class="line">			<span class="string">"userMapper"</span>, UserMapper.class);</div><div class="line">	</div><div class="line">	User user = <span class="keyword">new</span> User();</div><div class="line">	user.setUsername(<span class="string">"Tom1"</span>);</div><div class="line">	user.setPassword(<span class="string">"123456"</span>);</div><div class="line">	Integer affectedRows</div><div class="line">		= userMapper.reg(user);</div><div class="line">	System.out.println(</div><div class="line">		<span class="string">"affectedRows="</span> + affectedRows);</div><div class="line">	</div><div class="line">	ac.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>在spring中配置mybatis的步骤：<ul>
<li>配置扫描<code>xxmapper.xml</code>的<code>MapperScannerConfigurer</code></li>
<li>配置<code>SqlSessionFactoryBean</code>，需要用到数据库连接池的<code>数据源datasource</code></li>
</ul>
</li>
</ul>
<ul>
<li>完整的依赖文件<code>pom.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- MySQL --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>完整的<code>db.properties</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=5</div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<ul>
<li>完整的<code>spring-dao.xml</code>文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </div><div class="line">	<span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span>  </div><div class="line">	<span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span> </div><div class="line">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"&gt;</div><div class="line">		</div><div class="line">	<span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 配置MapperScannerConfigurer,自动扫描整个包，并且spring会自动创建UserMapper接口对象--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置接口文件所在的包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"cn.tedu.spring.mapper"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据源：如何连接数据库等 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span></span></div><div class="line">			<span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</div><div class="line">		<span class="comment">&lt;!-- 配置XML文件的位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></div><div class="line">			<span class="attr">value</span>=<span class="string">"classpath:mappers/UserMapper.xml"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MyBatis入门程序&quot;&gt;&lt;a href=&quot;#MyBatis入门程序&quot; class=&quot;headerlink&quot; title=&quot;MyBatis入门程序&quot;&gt;&lt;/a&gt;MyBatis入门程序&lt;/h2&gt;&lt;h3 id=&quot;设计案例&quot;&gt;&lt;a href=&quot;#设计案例&quot; class=&quot;
    
    </summary>
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://chenjiabing666.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc响应Ajax请求(@ResponseBody)</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Springmvc%E5%93%8D%E5%BA%94Ajax%E8%AF%B7%E6%B1%82-ResponseBody/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Springmvc响应Ajax请求-ResponseBody/</id>
    <published>2018-05-04T09:46:35.000Z</published>
    <updated>2018-05-04T09:47:15.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc响应Ajax请求-ResponseBody"><a href="#Springmvc响应Ajax请求-ResponseBody" class="headerlink" title="Springmvc响应Ajax请求(@ResponseBody)"></a>Springmvc响应Ajax请求(@ResponseBody)</h1><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><ul>
<li>创建<code>maven project</code></li>
<li>选择<code>war</code>包</li>
<li>自动生成<code>web.xml</code>   </li>
<li><code>Target Runtime</code> 选择 <code>Tomcat</code></li>
<li>添加依赖<code>pom.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- SpringMVC --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- Spring-JDBC,要和spring-webmvc的版本一致 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- MyBatis-Spring 整合jar包 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- MySQL --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- DBCP --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- Junit --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置前端控制器和解决中乱码的过滤器(<code>web.xml</code>)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置中文乱码的过滤器--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--加载spring配置文件--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>配置<code>spring-mvc.xml</code><ul>
<li><strong>要想使用<code>@ResponseBody</code>这个注解来接收<code>Ajax</code>发送过来的请求，必须加上注解驱动<code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code></strong></li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> </span></div><div class="line">	<span class="attr">base-package</span>=<span class="string">"cn.tedu.spring.controller"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置ViewResolver --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/web/"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置注解扫描，用于ajax的注解扫描 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编写前端表单"><a href="#编写前端表单" class="headerlink" title="编写前端表单"></a>编写前端表单</h2><ul>
<li>其实并不是使用表单提交的，可以不使用表单</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">	姓名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">onblur</span>=<span class="string">"checkName()"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"nameSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="效果和实现-RequestBody"><a href="#效果和实现-RequestBody" class="headerlink" title="效果和实现(@RequestBody)"></a>效果和实现(<code>@RequestBody</code>)</h2><h3 id="用户名文本框失去焦点，异步检测用户"><a href="#用户名文本框失去焦点，异步检测用户" class="headerlink" title="用户名文本框失去焦点，异步检测用户"></a>用户名文本框失去焦点，异步检测用户</h3><ul>
<li>用户名文本框失去焦点发生请求处理方法，<code>检测用户名</code><ul>
<li>请求方式<code>POST</code></li>
<li>返回的值不再是<code>视图的名称</code>，而是处理请求的结果，即使返回给<code>Ajax</code>请求的数据</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/checkName.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span>   <span class="comment">//使用@ResponseBody，表示这个是处理ajax的请求</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">checkName</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"0"</span>;  <span class="comment">//表示admin这个用户名不能使用，已经存在</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="string">"1"</span>;  <span class="comment">//表示此时的用户名不存在，可以使用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>前端编写<code>Ajax</code>请求（<code>JQUERY</code>）</strong><ul>
<li>使用<code>JQuery</code>中的<code>Ajax</code>请求</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加jquery文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=request.getContextPath() %&gt;/web/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> name=$(<span class="string">"#name"</span>).val(); <span class="comment">//获取用户名</span></div><div class="line">        <span class="keyword">if</span>(name==<span class="string">""</span>)&#123;</div><div class="line">            alert(<span class="string">"用户名不能为空"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkName.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">        $.post(url,&#123;<span class="string">'name'</span>:name&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">            <span class="comment">//如果状态码正确</span></div><div class="line">            <span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(responseData==<span class="string">"0"</span>)&#123;</div><div class="line">                    <span class="comment">//为节点添加提示内容</span></div><div class="line">                    $(<span class="string">"#nameSpan"</span>).text(<span class="string">"用户名已经存在，请重新输入"</span>);</div><div class="line">                    $(<span class="string">"#nameSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);  <span class="comment">//设置颜色为红色</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    $(<span class="string">"#nameSpan"</span>).text(<span class="string">"用户名不存在，可以使用"</span>);</div><div class="line">                    $(<span class="string">"#nameSpan"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;<span class="string">`</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>使用<code>javascript</code>发出<code>Ajax</code>请求<ul>
<li><code>GET</code>请求 ：<code>xhr.open(&quot;GET&quot;,&quot;&lt;%=request.getContextPath()%&gt;/user/checkName.do?name=&quot;+name,true);</code></li>
<li><code>POST</code>请求需要将数据封装到<code>xhr.send(data)</code>中</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用POST请求</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNameFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> xhr=getXHR();  <span class="comment">//获取XHR</span></div><div class="line">	<span class="comment">//监听状态改变</span></div><div class="line">	xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>)&#123;</div><div class="line">			<span class="keyword">var</span> text=xhr.responseText;  <span class="comment">//获取返回的数据</span></div><div class="line">			<span class="keyword">if</span>(Text==<span class="string">"0"</span>)&#123;</div><div class="line">				alert(<span class="string">"用户名已经存在，请重新输入"</span>);</div><div class="line">				</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				alert(<span class="string">"用户名不存在，可以使用"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> name=$(<span class="string">"#name"</span>).val();  <span class="comment">//获取name文本框中的值</span></div><div class="line">	<span class="keyword">if</span>(name==<span class="string">""</span>)&#123;</div><div class="line">		alert(<span class="string">"用户名不能为空"</span>);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//编写请求</span></div><div class="line">	xhr.open(<span class="string">"POST"</span>,<span class="string">"&lt;%=request.getContextPath()%&gt;/user/checkName.do"</span>,<span class="literal">true</span>);</div><div class="line">	<span class="comment">//在open之后，send之前添加请求头信息</span></div><div class="line">	xhr.setRequestHeader(<span class="string">"content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    <span class="comment">//在send之中添加请求信息</span></div><div class="line">	xhr.send(<span class="string">"name="</span>+name);  <span class="comment">//发送请求</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><ul>
<li><p><strong>配置注解驱动支持该注解的使用，直接在<code>spring-mvc.xml</code>中配置即可<code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code></strong></p>
</li>
<li><p><strong>添加<code>jackson</code>的依赖，处理<code>json</code>数据</strong></p>
<ul>
<li>我们需要<code>三个jar包</code>，我们只需要添加<code>jackson-databind</code>即可，就会自动的导入其他的两个</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/jackson.png" alt="jackson的jar包"></p>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加jackson --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>用于响应<code>Ajax</code>请求</li>
<li>使用<code>@ResponseBody</code>标记的<code>Controller</code>方法的返回值，不再是返回的<code>视图名称</code>,而是返回的给<code>Ajax</code>的请求结果，可以是<code>String</code>，<code>List</code>,<code>Map</code>,<code>单个对象</code>等</li>
</ul>
<h3 id="返回单个值"><a href="#返回单个值" class="headerlink" title="返回单个值"></a>返回单个值</h3><ul>
<li>返回的单个值，比如<code>String</code>，<code>int</code>，<code>boolean</code></li>
<li>直接使用上面的例子即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/checkName.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span>   <span class="comment">//使用@ResponseBody，表示这个是处理ajax的请求</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">checkName</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="string">"admin"</span>.equals(name)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"0"</span>;  <span class="comment">//表示admin这个用户名不能使用，已经存在</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="string">"1"</span>;  <span class="comment">//表示此时的用户名不存在，可以使用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回Map"><a href="#返回Map" class="headerlink" title="返回Map"></a>返回Map</h3><ul>
<li>这里我们返回的是一个<code>Map&lt;String,Object&gt;</code></li>
<li><strong>使用了<code>JackSon</code>，spring会将<code>Map</code>自动转换成<code>JSON对象</code>，那么我们在<code>JSP</code>中就可以用JSON来获取数据即可</strong></li>
<li>编写<code>Controller</code>方法，使用<code>@ResponseBody</code>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testMap.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span>   <span class="comment">//使用注解</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">testMap</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name,@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span>Integer age)</span>&#123;</div><div class="line">	System.out.println(name+<span class="string">"---"</span>+age); <span class="comment">//接收请求参数</span></div><div class="line">	Map&lt;String, Object&gt; map=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();  <span class="comment">//新建一个Map</span></div><div class="line">	<span class="comment">//新建User对象</span></div><div class="line">	User user1=<span class="keyword">new</span> User();</div><div class="line">	user1.setName(<span class="string">"JACK"</span>);</div><div class="line">	user1.setAge(<span class="number">22</span>);</div><div class="line">	</div><div class="line">	User user2=<span class="keyword">new</span> User();</div><div class="line">	user2.setAge(<span class="number">33</span>);</div><div class="line">	user2.setName(<span class="string">"Tom"</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//将上面的User对象添加到map中</span></div><div class="line">	map.put(<span class="string">"u1"</span>,user1);</div><div class="line">	map.put(<span class="string">"u2"</span>,user2);</div><div class="line">	<span class="keyword">return</span> map;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>jsp</code>页面中添加一个方法，用于发出<code>Ajax</code>请求<ul>
<li>使用返回的数据(<code>JSON对象</code>)，直接使用<code>data.key</code>的形式即可取出<code>Map</code>中的值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ajax请求testMap.do</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMap</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/testMap.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">'name'</span>:<span class="string">'陈加兵'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;;   <span class="comment">//需要发出请求的参数</span></div><div class="line">	$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">		<span class="comment">//如果状态码正确</span></div><div class="line">		<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">			<span class="keyword">var</span> user1=responseData.u1;   <span class="comment">//取出key为u1的值，是一个user对象</span></div><div class="line">			<span class="keyword">var</span> user2=responseData.u2;   <span class="comment">//取出key为u2的值，是一个user对象</span></div><div class="line">			alert(<span class="string">"u1 = "</span>+user1.name+<span class="string">"---"</span>+user1.age);  <span class="comment">//打印出u1中的name，age的值</span></div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回List"><a href="#返回List" class="headerlink" title="返回List"></a>返回List</h3><ul>
<li>这里的返回值是<code>List&lt;Object&gt;</code></li>
<li><code>JackSon</code>会自动将<code>List</code>转换成<code>JSON数组</code>，在<code>JSP</code>页面就可以使用<code>JSON</code>的方式来获取数据</li>
</ul>
<ul>
<li>比如：<code>[{&quot;name&quot;:&quot;JACK&quot;,&quot;age&quot;:22},{&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:33},10]</code>，这个是一个<code>JSON数组</code>的形式，因此我们在<code>js</code>中需要遍历这个数组</li>
<li><code>Controller</code>中方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testList.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">testList</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></div><div class="line">		@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) &#123;</div><div class="line">	System.out.println(name + <span class="string">"---"</span> + age); <span class="comment">// 接收请求参数</span></div><div class="line">	List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</div><div class="line">	<span class="comment">// 新建User对象</span></div><div class="line">	User user1 = <span class="keyword">new</span> User();</div><div class="line">	user1.setName(<span class="string">"JACK"</span>);</div><div class="line">	user1.setAge(<span class="number">22</span>);</div><div class="line"></div><div class="line">	User user2 = <span class="keyword">new</span> User();</div><div class="line">	user2.setAge(<span class="number">33</span>);</div><div class="line">	user2.setName(<span class="string">"Tom"</span>);</div><div class="line">	<span class="comment">//将数据添加到其中</span></div><div class="line">	list.add(user1);</div><div class="line">	list.add(user2);</div><div class="line">	<span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>jsp</code>中使用发出<code>Ajax</code>请求<ul>
<li>此时返回的是数组，因此需要循环遍历</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ajax请求testList.do</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/testList.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">'name'</span>:<span class="string">'陈加兵'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;;   <span class="comment">//需要发出请求的参数</span></div><div class="line">	$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">		<span class="comment">//如果状态码正确</span></div><div class="line">		<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">			<span class="comment">//此时返回的是一个数组，因此我们需要循环遍历这个数组，但是其中的元素是一个User对象，因此可以使用key-value的形式取出其中的值</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;responseData.length;i++)&#123;</div><div class="line">				<span class="comment">//将数据输出到控制台</span></div><div class="line">				<span class="built_in">console</span>.log(responseData[i].name+<span class="string">"-----&gt;"</span> + responseData[i].age);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回单个对象"><a href="#返回单个对象" class="headerlink" title="返回单个对象"></a>返回单个对象</h3><ul>
<li>返回的是一个对象，比如一个<code>User</code>对象，<code>JackSon</code>会将其转换成为<code>JSON对象</code>返回给浏览器</li>
<li>返回的是对象，那么我们在<code>js</code>中可以直接使用<code>key-value</code>的形式取出其中的值</li>
<li><code>Controller</code>中的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testObject.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testObject</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></div><div class="line">		@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) &#123;</div><div class="line">	System.out.println(name + <span class="string">"---"</span> + age); <span class="comment">// 接收请求参数</span></div><div class="line">	User user=<span class="keyword">new</span> User();</div><div class="line">	user.setName(<span class="string">"JACK"</span>);</div><div class="line">	user.setAge(<span class="number">22</span>);</div><div class="line">	<span class="keyword">return</span> user;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>发出<code>Ajax</code>请求，并且接收数据<ul>
<li>直接使用取值即可</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Ajax请求testObject.do</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/user/testObject.do"</span>;  <span class="comment">// 请求的url</span></div><div class="line">	<span class="keyword">var</span> d=&#123;<span class="string">'name'</span>:<span class="string">'陈加兵'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;;   <span class="comment">//需要发出请求的参数</span></div><div class="line">	$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">responseData,status,xhr</span>)</span>&#123;</div><div class="line">		<span class="comment">//如果状态码正确</span></div><div class="line">		<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">			<span class="built_in">console</span>.log(responseData.name+<span class="string">"----"</span>+responseData.age);</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="省市二级菜单联动"><a href="#省市二级菜单联动" class="headerlink" title="省市二级菜单联动"></a>省市二级菜单联动</h3><ul>
<li>前端使用下拉菜单<code>&lt;select&gt;</code>实现<ol>
<li>加载页面完成之后，发送一个异步请求，请求所有的<code>省份</code>,在省的下拉菜单中显示出来</li>
<li>当用户选择了某个省之后，那么发送一个异步请求，获取当前省的所有<code>市</code>的信息，并且显示在市的下拉菜单中</li>
<li>在<code>省</code>的下拉菜单中需要使用<code>onchange</code>监听选项的改变，只要选项改变了就要发出异步请求，返回对应城市的信息</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">省：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">id</span>=<span class="string">"province"</span> <span class="attr">onchange</span>=<span class="string">"getCity()"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span>请选择省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">市：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span>请选择市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--加载jquery--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=request.getContextPath() %&gt;/web/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">//只要页面加载完成之后就会执行其中的逻辑</span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		getProvince();   <span class="comment">//页面加载完成就调用这个方法发出异步请求</span></div><div class="line">		</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">//获取省份的方法</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getProvince</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/menu/getProvince.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">		<span class="keyword">var</span> d=&#123;&#125;;   <span class="comment">//没有数据提交</span></div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="comment">//循环遍历返回的JSON数组</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</div><div class="line">					<span class="comment">//创建option，用于插入节点</span></div><div class="line">					<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span> + data[i].code + <span class="string">"&gt;"</span>+data[i].name+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					<span class="comment">//将option插入到下拉列表中</span></div><div class="line">					$(<span class="string">"#province"</span>).append(option);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//根据选择的省份获取市</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getCity</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> province=$(<span class="string">"#province"</span>).val();  <span class="comment">//获取下拉菜单的值，这里返回的是省份的编号</span></div><div class="line">		<span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/menu/getCity.do"</span>;  <span class="comment">//异步请求的url</span></div><div class="line">		<span class="keyword">var</span> d=&#123;<span class="string">"province"</span>:province&#125;;   <span class="comment">//将省份的编号传入</span></div><div class="line">		</div><div class="line">		<span class="comment">//每次都要清空之前的城市</span></div><div class="line">		$(<span class="string">"#city"</span>).html(<span class="string">"&lt;option value='-1'&gt;请选择市&lt;/option&gt;"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//如果用户点击了请选择省，那么返回的值就是-1，此时不需要发出异步请求</span></div><div class="line">		<span class="keyword">if</span>(province==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">return</span>;  </div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//发出异步请求</span></div><div class="line">		$.post(url,d,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(status==<span class="string">"success"</span>)&#123;</div><div class="line">				<span class="comment">//如果返回的是一个空的，直接返回即可，不需要后续的操作</span></div><div class="line">				<span class="keyword">if</span>(data.lengt==<span class="number">0</span>)&#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//循环遍历返回的JSON数组</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</div><div class="line">					<span class="comment">//创建option，用于插入节点</span></div><div class="line">					<span class="keyword">var</span> option=<span class="string">"&lt;option value="</span> + data[i].code + <span class="string">"&gt;"</span>+data[i].name+<span class="string">"&lt;/option&gt;"</span>;</div><div class="line">					<span class="comment">//将option插入到下拉列表中</span></div><div class="line">					$(<span class="string">"#city"</span>).append(option);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;);	</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>Controller</code>编写方法<ol>
<li>展示页面的方法(<code>showMenu.do</code>)</li>
<li>返回<code>省份信息</code>的方法</li>
<li>返回<code>城市信息</code>方法</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示页面</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/showMenu.do"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showMenu</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"menu"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//异步请求返回省份的信息</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getProvince.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">getProvince</span><span class="params">()</span></span>&#123;</div><div class="line">	Province p1=<span class="keyword">new</span> Province();</div><div class="line">	p1.setName(<span class="string">"江苏"</span>);</div><div class="line">	p1.setCode(<span class="number">1001</span>);</div><div class="line">	</div><div class="line">	Province p2=<span class="keyword">new</span> Province();</div><div class="line">	p2.setName(<span class="string">"山东"</span>);</div><div class="line">	p2.setCode(<span class="number">1002</span>);</div><div class="line">	</div><div class="line">	List&lt;Province&gt; provinces=<span class="keyword">new</span> ArrayList&lt;Province&gt;();</div><div class="line">	provinces.add(p1);</div><div class="line">	provinces.add(p2);</div><div class="line">	<span class="keyword">return</span> provinces;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//异步获取城市信息的方法，这里没有操作数据库，仅仅是模拟，因此只要返回数据即可</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getCity.do"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">getCity</span><span class="params">(@RequestParam(<span class="string">"province"</span>)</span> Integer code)</span>&#123;</div><div class="line">	System.out.println(code);</div><div class="line">	List&lt;City&gt; cities=<span class="keyword">new</span> ArrayList&lt;City&gt;();</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 如果这里涉及到数据库操作</div><div class="line">	 * 		1. 调用service的方法查询，service调用dao的方法查询</div><div class="line">	 * 		2. dao中的查询： 根据code查询出对应的城市即可，当然是联表查询</div><div class="line">	 * 		3. select c.name,c.code from city c join province p on c.provice_id=p.id;</div><div class="line">	 * 		4. mybatis调用第三步的查询语句，直接返回的就是List&lt;City&gt;集合</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="comment">//这里省略if的判断，主要是看效果</span></div><div class="line">	City c1=<span class="keyword">new</span> City();</div><div class="line">	c1.setName(<span class="string">"南京"</span>);</div><div class="line">	c1.setCode(<span class="number">123</span>);</div><div class="line">	</div><div class="line">	City c2=<span class="keyword">new</span> City();</div><div class="line">	c2.setName(<span class="string">"淮安"</span>);</div><div class="line">	c2.setCode(<span class="number">1223</span>);</div><div class="line">	cities.add(c1);</div><div class="line">	cities.add(c2);</div><div class="line">	 </div><div class="line">	<span class="keyword">return</span> cities;   <span class="comment">//返回集合</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><strong><code>springmvc</code>会通过<code>jackson</code>将返回给<code>ajax</code>请求的对象自动封装成<code>JSON对象</code>，那么在<code>JSP</code>页面我们就可以使用<code>JSON</code>的读取方式获取返回的数据即可</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springmvc响应Ajax请求-ResponseBody&quot;&gt;&lt;a href=&quot;#Springmvc响应Ajax请求-ResponseBody&quot; class=&quot;headerlink&quot; title=&quot;Springmvc响应Ajax请求(@ResponseBody)
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring配置DBCP连接池</title>
    <link href="http://chenjiabing666.github.io/2018/05/04/Spring%E9%85%8D%E7%BD%AEDBCP%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://chenjiabing666.github.io/2018/05/04/Spring配置DBCP连接池/</id>
    <published>2018-05-04T09:45:53.000Z</published>
    <updated>2018-05-04T09:46:12.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring配置DBCP连接池"><a href="#Spring配置DBCP连接池" class="headerlink" title="Spring配置DBCP连接池"></a>Spring配置DBCP连接池</h1><h2 id="建立数据库配置文件jdbc-properties"><a href="#建立数据库配置文件jdbc-properties" class="headerlink" title="建立数据库配置文件jdbc.properties"></a>建立数据库配置文件jdbc.properties</h2><ul>
<li><p>在<code>resource</code>文件下新建一个<code>jdbc.properties</code>文件，内容如下</p>
<ul>
<li>在每一个键值对的后面不可以有空格，将光标移动到后面，如果紧贴着即可</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">url=jdbc:mysql://localhost:3306/tedu_ums?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">driver=com.mysql.jdbc.Driver</div><div class="line">user=root</div><div class="line">password=root</div><div class="line">initSize=5    </div><div class="line">maxSize=10</div></pre></td></tr></table></figure>
<ul>
<li><p>在spring配置文件中配置<code>DBCP</code>数据源</p>
<ul>
<li>直接使用spring的表达式获取文件中的值即可</li>
</ul>
<p>​</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 加载db.properties --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span></span></div><div class="line">		<span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 数据源 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.url&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.driver&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.user&#125;"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.password&#125;"</span> /&gt;</div><div class="line">        <span class="comment">&lt;!--初始化链接数量--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.initSize&#125;"</span> /&gt;</div><div class="line">        <span class="comment">&lt;!--最大链接数量--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> </span></div><div class="line">			<span class="attr">value</span>=<span class="string">"#&#123;dbConfig.maxSize&#125;"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring配置DBCP连接池&quot;&gt;&lt;a href=&quot;#Spring配置DBCP连接池&quot; class=&quot;headerlink&quot; title=&quot;Spring配置DBCP连接池&quot;&gt;&lt;/a&gt;Spring配置DBCP连接池&lt;/h1&gt;&lt;h2 id=&quot;建立数据库配置文件jdbc
    
    </summary>
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://chenjiabing666.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
