<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱撒谎的男孩</title>
  <subtitle>一只程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenjiabing666.github.io/"/>
  <updated>2018-04-18T00:03:35.435Z</updated>
  <id>http://chenjiabing666.github.io/</id>
  
  <author>
    <name>Chenjiabing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之适配器模式/</id>
    <published>2018-04-16T05:56:28.000Z</published>
    <updated>2018-04-18T00:03:35.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式之适配器模式"><a href="#结构型模式之适配器模式" class="headerlink" title="结构型模式之适配器模式"></a>结构型模式之适配器模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>适配器模式用于将一个接口转化成客户想要的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/adapeter1.png" alt="适配器模式"></p>
<ul>
<li>Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li>
<li>Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</li>
<li><p>Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</p>
</li>
<li><p>根据对象适配器模式结构图，在对象适配器中，客户端需要调用request()方法，而适配者类Adaptee没有该方法，但是它所提供的specificRequest()方法却是客户端所需要的。为了使客户端能够使用适配者类，需要提供一个包装类Adapter，即适配器类。这个包装类包装了一个适配者的实例，从而将客户端与适配者衔接起来，在适配器的request()方法中调用适配者的specificRequest()方法。因为适配器类与适配者类是关联关系（也可称之为委派关系），所以这种适配器模式称为对象适配器模式</p>
</li>
</ul>
<h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><ul>
<li><p>类适配器是继承适配者类实现的，其中对象适配器是使用组合的方式实现的，就是适配者类作为适配器类的成员变量而实现的</p>
</li>
<li><p>一般目标抽象类是一个接口，适配者类一般是一个具体的实现类，有时候甚至不知道其中的源代码，因此需要适配器类将适配者类转换成适合用户的目标类</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>我们知道笔记本充电的电压是5v，但是我们的高压电是220v，那么我们此时就需要一个适配器将这个220v电压转换成为5v的电压给笔记本充电<ul>
<li>这里的220v电压就是适配者类，即是需要转换的类</li>
<li>5v电压是目标抽象类，由适配器将220v转换而来</li>
<li>这里的适配器类的主要功能就是将220v电压转换成5v电压</li>
</ul>
</li>
</ul>
<ul>
<li>目标接口(5v电压)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 接口为5v电压的接口  ，  这个目标抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Power5</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>220v电压的类（这里是一个具体的类，适配者类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Power220</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower220</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"正在输出220v电压....."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>适配器类（将220v电压转换成5v）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 适配器类，主要的目的就是将220v电压转换为5v的电压供笔记本充电</div><div class="line"> * 其中Power5是目标抽象接口，是最终需要的接口，Power220是一个适配者类，是已经存在的，只需要适配器转换即可</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPower5</span> <span class="keyword">extends</span> <span class="title">Power220</span> <span class="keyword">implements</span> <span class="title">Power5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 重载Power5中的方法，获取需要的5v电压</div><div class="line">	 * 过程： 先获取220v电压，然后进行转换即可</div><div class="line">	 * 	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.getPower220();   <span class="comment">//首先获取220v电压</span></div><div class="line">		<span class="keyword">this</span>.transform();   <span class="comment">//将220v电压转换成5v的电压</span></div><div class="line">		System.out.println(<span class="string">"获取5v电压......."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 将220v电压转换成5v电压的方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"现在将220v电压转换成5v电压......."</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>笔记本充电的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 笔记本类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteBook</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 笔记本充电的方法</div><div class="line">	 * <span class="doctag">@param</span> power5   电压为5v的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PowerOn</span><span class="params">(Power5 power5)</span></span>&#123;</div><div class="line">		power5.getPower5();   <span class="comment">//获取5v电压</span></div><div class="line">		System.out.println(<span class="string">"笔记本获取了5v的电压，正在开始充电......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		NoteBook noteBook=<span class="keyword">new</span> NoteBook();   <span class="comment">//创建笔记本的类</span></div><div class="line">		noteBook.PowerOn(<span class="keyword">new</span> AdapterPower5());   <span class="comment">//调用笔记本充电的类</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><ul>
<li>对象适配器是将适配者类作为适配器类的成员变量并不是继承，这个是一种组合方式</li>
<li>这种方式使用的更加普遍</li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>这里的实例还是前面的例子</p>
</li>
<li><p>这里唯一不同的就是适配器类，不是继承适配者类，而是使用组合的方式</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 适配器类，这个是对象适配器，适配者类是作为成员变量存在，是组合关系</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Power5</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Power220 power;   <span class="comment">//220v电压类的对象，作为成员变量</span></div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 构造方法，主要是为类初始化Power220v的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Power220 power)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.power=power;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPower5</span><span class="params">()</span> </span>&#123;</div><div class="line">		power.getPower220();   <span class="comment">//获取220v电压</span></div><div class="line">		transform();   <span class="comment">//转换电压</span></div><div class="line">		System.out.println(<span class="string">"正在输出5v电压......."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"将220v电压转换成5v的电压......"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>类适配器是使用类继承的方式，适配器类继承适配者类(不提倡使用)</p>
</li>
<li><p>对象适配器使用的是一种组合的方式，将适配者类作为其中的成员变量，那么也是可以实现（提倡使用）</p>
</li>
</ul>
<h2 id="麻烦支持下博主的广告事业，点击下即可"><a href="#麻烦支持下博主的广告事业，点击下即可" class="headerlink" title="麻烦支持下博主的广告事业，点击下即可"></a>麻烦支持下博主的广告事业，点击下即可</h2><p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02303&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmall/20171225/640x240.jpg" width="450" height="240" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02303&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02302&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171219/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02302&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
<p><a href="http://click.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0&u_id=chenjiabing" target="_blank"><img src="http://banner.linktech.cn/MC/huaweivmallwap/20171206/450x220.jpg" width="450" height="220" border="0"></a><img src="http://track.linktech.cn/?m=huaweivmall&a=A100234624&l=02300&l_cd1=0&l_cd2=0" width="1" height="1" border="0" style="display:none"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构型模式之适配器模式&quot;&gt;&lt;a href=&quot;#结构型模式之适配器模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式之适配器模式&quot;&gt;&lt;/a&gt;结构型模式之适配器模式&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;head
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥接模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之桥接模式/</id>
    <published>2018-04-16T05:55:29.000Z</published>
    <updated>2018-04-16T05:57:07.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式之桥接模式"><a href="#结构型模式之桥接模式" class="headerlink" title="结构型模式之桥接模式"></a>结构型模式之桥接模式</h1><ul>
<li><p>桥接模式是一种很实用的结构型设计模式，如果软件系统中某个类存在两个独立变化的维度，通过该模式可以将这两个维度分离出来，使两者可以独立扩展，让系统更加符合“单一职责原则”。与多层继承方案不同，它将两个独立变化的维度设计为两个独立的继承等级结构，并且在抽象层建立一个抽象关联，该关联关系类似一条连接两个独立继承结构的桥，故名桥接模式。</p>
</li>
<li><p>桥接模式用一种巧妙的方式处理多层继承存在的问题，用抽象关联取代了传统的多层继承，将类之间的静态继承关系转换为动态的对象组合关系，使得系统更加灵活，并易于扩展，同时有效控制了系统中类的个数。桥接定义如下：</p>
</li>
<li><p>桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/bridge1.png" alt="桥接模式"></p>
<ul>
<li><p>在桥接模式结构图中包含如下几个角色：</p>
<ul>
<li>Abstraction（抽象类）：用于定义抽象类的接口，它一般是抽象类而不是接口，其中定义了一个Implementor（实现类接口）类型的对象并可以维护该对象，它与Implementor之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。</li>
<li>RefinedAbstraction（扩充抽象类）：扩充由Abstraction定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法。</li>
<li>Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同，一般而言，Implementor接口仅提供基本操作，而Abstraction定义的接口可能会做更多更复杂的操作。Implementor接口对这些基本操作进行了声明，而具体实现交给其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调用到Implementor中定义的方法，使用关联关系来替代继承关系。</li>
<li>ConcreteImplementor（具体实现类）：具体实现Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplementor对象将替换其父类对象，提供给抽象类具体的业务操作方法。</li>
</ul>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="http://ono60m7tl.bkt.clouddn.com/bridge2.png" alt="实例"></p>
<ul>
<li><p>从上面的这个实例我们可以看出，如果使用多层继承的话，那么我们可以定义是三个抽象类（台式机，笔记本，平板电脑），在这个三个抽象类的下面每个都有三个不同品牌的具体实现类，那么总共要有3x3=9个具体的实现类。不仅仅是类的数量多，在扩展性能上也是成倍的增加，如果想要添加一个品牌，那么需要添加三个类，这个是极其浪费的。</p>
</li>
<li><p>针对上面的缺点，我们可以使用桥接模式，将电脑分类，品牌分类分成两个维度，如下图：<br><img src="http://ono60m7tl.bkt.clouddn.com/bridge3.png" alt=""></p>
</li>
<li><p>其中Computer是一个抽象类，不是接口，其中Brand（品牌）是其中的成员变量，我们就完成了一个电脑具有不同品牌，那么如果我们想添加一个品牌，就只是添加一个具体的实现类即可，就不需要添加三个了。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构型模式之桥接模式&quot;&gt;&lt;a href=&quot;#结构型模式之桥接模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式之桥接模式&quot;&gt;&lt;/a&gt;结构型模式之桥接模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;桥接模式是一种很实用的结构型设计模式，如果软件系统中某个类
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之原型模式/</id>
    <published>2018-04-16T05:53:04.000Z</published>
    <updated>2018-04-16T05:54:03.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之原型模式"><a href="#创建型模式之原型模式" class="headerlink" title="创建型模式之原型模式"></a>创建型模式之原型模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
</li>
<li><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要    在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
</li>
<li><p>原型模式可以分为浅克隆和深度克隆</p>
</li>
</ul>
<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p><img src="http://ono60m7tl.bkt.clouddn.com/property1.png" alt="角色"></p>
<h2 id="java语言中实现克隆的两种方式"><a href="#java语言中实现克隆的两种方式" class="headerlink" title="java语言中实现克隆的两种方式"></a>java语言中实现克隆的两种方式</h2><ol>
<li><p>直接创建一个对象，然后设置成员变量的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Obj obj=<span class="keyword">new</span> Obj(); <span class="comment">//创建一个新的对象</span></div><div class="line">obj.setName(<span class="keyword">this</span>.name);   <span class="comment">//设置其中变量的值</span></div><div class="line">obj.setAge(<span class="keyword">this</span>.age);</div></pre></td></tr></table></figure>
</li>
<li><p>实现cloneable接口</p>
</li>
</ol>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property2.png" alt=""></p>
<h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><ul>
<li><p>如果克隆的对象的成员变量是值类型的，比如int，double那么使用浅克隆就可以实现克隆完整的原型对象，但是如果其中的成员变量有引用类型的，那么这个引用类型的克隆过去的其实是地址，克隆对象的这个引用类型变量改变了，那么原来变量的值也是会改变的。</p>
</li>
<li><p>简单的说，浅克隆只能复制值类型的，对于引用类型的数据只能复制地址</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property3.png" alt="浅克隆"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>一个公司出版周报，那么这个周报的格式一般是相同的，只是将其中的内容稍作修改即可。但是一开始没有这个原型，员工每周都需要重新手写这个周报，现在有了这个周报的原型，只需要在这个clone这个原型，然后在其基础上修改即可。</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property4.png" alt="周报"></p>
<ul>
<li>其中的Cloneable就是抽象原型类</li>
</ul>
<ul>
<li>附件类（这个是一个引用类型的对象，验证浅克隆只是复制其中的地址，如果两个对象中的任何一个改变了这个变量的值，那么另外一个也会随之改变）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 附件类，这个是周报的附件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 名称</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Attachment</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>周报的类（其中实现了Cloneable接口）<ul>
<li>其中的clone()方法返回的就是一个克隆的对象，因此我们调用这个方法克隆一个新的对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这个是周报类，这个类是实现接口Prototype这个接口的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeeklyLog</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 姓名</span></div><div class="line">	<span class="keyword">private</span> String date; <span class="comment">// 日期</span></div><div class="line">	<span class="keyword">private</span> String content; <span class="comment">// 内容</span></div><div class="line">	<span class="keyword">private</span> Attachment attachment;  <span class="comment">//附件，是一个引用对象，这个只能实现浅克隆</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">(String name, String date, String content)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.date = date;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 提供一个clone方法，返回的是一个clone对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> WeeklyLog <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">		Object object = <span class="keyword">null</span>; <span class="comment">// 创建一个Object对象</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			object = <span class="keyword">super</span>.clone(); <span class="comment">// 直接调用clone方法，复制对象</span></div><div class="line">			<span class="keyword">return</span> (WeeklyLog) object; <span class="comment">// 返回即可</span></div><div class="line">		&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">			System.out.println(<span class="string">"这个对象不能复制....."</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类<ul>
<li>测试浅克隆的值类型是是否完成复制了</li>
<li>测试引用类型的值能否完成克隆，还是只是复制了一个引用地址</li>
<li>从结果来看，对象是完成复制了，因为判断两个对象的地址是不一样的，但是其中的引用类型的成员变量没有完成复制，只是复制了一个地址</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line"></div><div class="line">		WeeklyLog p1 = <span class="keyword">new</span> WeeklyLog(<span class="string">"陈加兵"</span>, <span class="string">"第一周"</span>, <span class="string">"获得劳动模范的称号..."</span>); <span class="comment">// 创建一个对象</span></div><div class="line">		Attachment attachment = <span class="keyword">new</span> Attachment(<span class="string">"消息"</span>);</div><div class="line">		p1.setAttachment(attachment); <span class="comment">// 添加附件</span></div><div class="line">		WeeklyLog p2 = p1.clone();</div><div class="line">		System.out.println(p1 == p2); <span class="comment">// 判断是否正确</span></div><div class="line">		p2.setName(<span class="string">"Jack"</span>); <span class="comment">// 修改P2对象的内容</span></div><div class="line">		p2.setDate(<span class="string">"第二周"</span>);</div><div class="line">		p2.setContent(<span class="string">"工作认真....."</span>);</div><div class="line">		System.out.println(p2.getName());</div><div class="line">		<span class="comment">// 返回true，可以知道这两个附件的地址是一样的</span></div><div class="line">		System.out.println(p1.getAttachment() == p2.getAttachment());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>浅克隆对于值类型的数据可以复制成功，但是对于引用卡类型的数据只能复制一个地址，如果一个对象中的引用类型的变量的值改变了，那么另外一个也会随之改变</li>
</ul>
<h2 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h2><ul>
<li>浅克隆只能完成复制值类型，深度克隆可以完成复制引用类型和值类型</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/property5.png" alt="深度克隆"></p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol>
<li>引用类型的变量类实现序列化(实现Serializabl接口）</li>
<li>需要克隆的类实现序列化(实现Serializable接口)</li>
</ol>
<h3 id="为什么实现序列化"><a href="#为什么实现序列化" class="headerlink" title="为什么实现序列化"></a>为什么实现序列化</h3><ul>
<li>因为深度克隆的实现的原理是使用输入和输出流，如果想要将一个对象使用输入和输出流克隆，必须序列化。</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>附件类(引用类型的成员变量，实现序列化)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 附件类，这个是周报的附件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">799959163401886355L</span>;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 名称</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Attachment</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>周报类（需要克隆的类，因为其中有引用类型的成员变量，因此需要实现序列化)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这个是周报类，这个类是实现接口Prototype这个接口的</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeeklyLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8782492113927035907L</span>;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 姓名</span></div><div class="line">	<span class="keyword">private</span> String date; <span class="comment">// 日期</span></div><div class="line">	<span class="keyword">private</span> String content; <span class="comment">// 内容</span></div><div class="line">	<span class="keyword">private</span> Attachment attachment; <span class="comment">// 附件，是一个引用对象，这个只能实现浅克隆</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeeklyLog</span><span class="params">(String name, String date, String content)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.date = date;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 提供一个clone方法，返回的是一个clone对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> WeeklyLog <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 将对象写入到对象流中</span></div><div class="line">		ByteArrayOutputStream arrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(</div><div class="line">					arrayOutputStream); <span class="comment">// 创建对象输出流</span></div><div class="line">			objectOutputStream.writeObject(<span class="keyword">this</span>); <span class="comment">// 将这个类的对象写入到输出流中</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 将对象从流中读出</span></div><div class="line">		ByteArrayInputStream arrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(</div><div class="line">				arrayOutputStream.toByteArray());</div><div class="line">		WeeklyLog weeklyLog;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(</div><div class="line">					arrayInputStream);<span class="comment">// 新建对象输入流</span></div><div class="line">			weeklyLog = (WeeklyLog) objectInputStream.readObject(); <span class="comment">// 读取对象从流中</span></div><div class="line">			<span class="keyword">return</span> weeklyLog;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<ul>
<li>从中可以看出其中的附件地址是不同的，如果一个对象的附件变量改变了，那么另外一个将保持不变，因此实现了深度克隆，是两个完全不同的对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line"></div><div class="line">		WeeklyLog p1 = <span class="keyword">new</span> WeeklyLog(<span class="string">"陈加兵"</span>, <span class="string">"第一周"</span>, <span class="string">"获得劳动模范的称号..."</span>); <span class="comment">// 创建一个对象</span></div><div class="line">		Attachment attachment = <span class="keyword">new</span> Attachment(<span class="string">"消息"</span>);</div><div class="line">		p1.setAttachment(attachment); <span class="comment">// 添加附件</span></div><div class="line">		WeeklyLog p2 = p1.clone();</div><div class="line">		System.out.println(p1 == p2); <span class="comment">// 判断是否正确</span></div><div class="line">		p2.setName(<span class="string">"Jack"</span>); <span class="comment">// 修改P2对象的内容</span></div><div class="line">		p2.setDate(<span class="string">"第二周"</span>);</div><div class="line">		p2.setContent(<span class="string">"工作认真....."</span>);</div><div class="line">		System.out.println(p2.getName());</div><div class="line">		<span class="comment">//返回false，可以看出这个是不同的地址，因此完成了深克隆</span></div><div class="line">		System.out.println(p1.getAttachment() == p2.getAttachment());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>因为深度克隆使用的是将对象写入输入和输出流中的，因此需要实现序列化，否则将不能完成</li>
</ul>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>浅克隆只能克隆对象中的值类型，不能克隆有引用类型成员变量的对象</p>
</li>
<li><p>使用深度克隆：</p>
<ul>
<li>引用类型的成员变量的类必须实现序列化</li>
<li>需要克隆的类必须实现序列化</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之原型模式&quot;&gt;&lt;a href=&quot;#创建型模式之原型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之原型模式&quot;&gt;&lt;/a&gt;创建型模式之原型模式&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerli
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之建造模式/</id>
    <published>2018-04-16T05:52:36.000Z</published>
    <updated>2018-04-16T05:55:12.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之建造者模式"><a href="#创建型模式之建造者模式" class="headerlink" title="创建型模式之建造者模式"></a>创建型模式之建造者模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li><p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</p>
</li>
<li><p>简单说，建造者的功能就是先构造复杂对象的每一个部件，指挥者的功能就是将这些部件以一定的步骤组装起来，形成一个具有一定功能的产品或者对象。当然这个步骤是透明的对于客户端。</p>
</li>
<li><p>建造者模式一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式结构如图8-2所示：</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/BuilderPattern.png" alt="建造者模式"></p>
<p><img src="http://ono60m7tl.bkt.clouddn.com/builder2.png" alt=""></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li><p>下面是一个组装汽车的例子，其中汽车由发动机和轮胎组成，那么我们只需要组装轮胎，发动机即可组装完成一个汽车。</p>
</li>
<li><p>汽车包括轮胎，引擎，我们通常在组装汽车的时候一般都是一步一步的组装，比如先装引擎，后装轮胎。使用建造者模式就是将建造汽车的这个过程抽离成几个不同的过程，比如建造引擎和建造轮胎就是两个过程。</p>
</li>
<li><p>轮胎的JavaBean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 轮胎</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Tyre</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>引擎的JavaBean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 引擎</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>汽车的JavaBean(汽车包含轮胎和引擎，因此使用聚合的关系)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 汽车的类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Tyre tyre; <span class="comment">// 轮胎</span></div><div class="line">	<span class="keyword">private</span> Engine engine;  <span class="comment">// 引擎</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Tyre <span class="title">getTyre</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> tyre;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTyre</span><span class="params">(Tyre tyre)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.tyre = tyre;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> engine;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.engine = engine;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>抽象建造者(实际上是一个接口，其中定义了建造轮胎和引擎的方法)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造引擎的方法</div><div class="line">	 */</div><div class="line">	<span class="function">Engine <span class="title">buliderEngine</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造轮胎的方法</div><div class="line">	 */</div><div class="line">	<span class="function">Tyre <span class="title">builderTyre</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>具体的建造者(实现了抽象建造者，实现建造轮胎和引擎的详细过程)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 具体的建造者，主要是构造汽车的部件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderCar</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">buliderEngine</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"构造汽车发动机"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"傻逼牌发动机"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Tyre <span class="title">builderTyre</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"构造汽车轮胎"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Tyre(<span class="string">"傻逼牌轮胎"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>抽象指挥者(定义了一个构造汽车的方法)，指挥者的作用就是按照一定步骤将构造者建造的部件组装起来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 	指挥者的接口，用来按照顺序组装汽车</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Director</span> </span>&#123;</div><div class="line">	<span class="function">Car <span class="title">CreateCar</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>具体的指挥者(实现了指挥者接口)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 指挥者的实现类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectorCar</span> <span class="keyword">implements</span> <span class="title">Director</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Builder builder; <span class="comment">// 建造者的对象</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造方法，主要用来初始化建造者对象</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">@param</span> builder  Builder的对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DirectorCar</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.builder = builder;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Car <span class="title">CreateCar</span><span class="params">()</span> </span>&#123;</div><div class="line">		Car car = <span class="keyword">new</span> Car(); <span class="comment">// 创建汽车对象</span></div><div class="line">		Engine engine = builder.buliderEngine(); <span class="comment">// 构建发动机</span></div><div class="line">		Tyre tyre = builder.builderTyre(); <span class="comment">// 构造轮胎</span></div><div class="line">		car.setEngine(engine); <span class="comment">// 设置属性</span></div><div class="line">		car.setTyre(tyre); <span class="comment">// 设置属性</span></div><div class="line">		<span class="keyword">return</span> car; <span class="comment">// 返回构造好的汽车</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Director director = <span class="keyword">new</span> DirectorCar(<span class="keyword">new</span> BuilderCar()); <span class="comment">// 创建指挥者的对象</span></div><div class="line">		Car car = director.CreateCar(); <span class="comment">// 获取组装完成的</span></div><div class="line">		System.out.println(car.getEngine().getName()); <span class="comment">// 输出引擎的名字</span></div><div class="line">		System.out.println(car.getTyre().getName()); <span class="comment">// 输出轮胎的名字</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul>
<li><p>基本部件不变，但是其中的组合经常变化的情况</p>
<ul>
<li>比如你去肯德基点餐，汉堡，可乐，鸡翅这些食物是不变的，但是套餐的组合是经常变化的，建造者模式的指挥者就是将这些部件按照一定步骤将其组合起来的。</li>
<li>java中StringBuilder</li>
</ul>
</li>
<li><p>需要生成的对象具有复杂的内部结构</p>
<ul>
<li>复杂的内部结构，我们可以使用建造者模式将其分离，先将其中的各个小的部件组装成功，然后由指挥者按照一定的步骤将其组装成一个复杂的对象</li>
</ul>
</li>
<li>需要生成的对象内部属性本身相互依赖。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之建造者模式&quot;&gt;&lt;a href=&quot;#创建型模式之建造者模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之建造者模式&quot;&gt;&lt;/a&gt;创建型模式之建造者模式&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;head
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/16/设计模式之代理模式/</id>
    <published>2018-04-16T05:52:12.000Z</published>
    <updated>2018-04-16T05:54:41.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式之代理模式-静态代理"><a href="#结构型模式之代理模式-静态代理" class="headerlink" title="结构型模式之代理模式(静态代理)"></a>结构型模式之代理模式(静态代理)</h1><ul>
<li><p>由于某些原因，客户端不想或不能直接访问一个对象，此时可以通过一个称之为“代理”的第三者来实现间接访问，该方案对应的设计模式被称为代理模式。</p>
</li>
<li><p>代理其实是实现简介访问的媒介，当然在代理类中还可以在执行代理操作之前，之后，之中，环绕等执行相关动作。<strong>Spring 中面向切面编程</strong>就是这个原理</p>
</li>
<li><p>代理模式是一种应用很广泛的结构型设计模式，而且变化形式非常多，常见的代理形式包括远程代理、保护代理、虚拟代理、缓冲代理、智能引用代理等，后面将学习这些不同的代理形式</p>
</li>
<li><p>当使用代理类的时候， 真实类中的信息对用户来说是透明的(不可见的)</p>
</li>
<li><p><strong>主要就是用于对象的间接访问提供了一个方案，可以对对象的访问进行控制</strong></p>
</li>
</ul>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="http://ono60m7tl.bkt.clouddn.com/proxypattern1.png" alt="代理模式"></p>
<ol>
<li>Subject（抽象主题角色）：它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。</li>
<li>Proxy（代理主题角色）：它包含了对真实主题的引用，从而可以在任何时候操作真实主题对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束。通常，在代理主题角色中，客户端在调用所引用的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操作。</li>
<li>RealSubject（真实主题角色）：它定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作。</li>
</ol>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><ul>
<li>需求： 我们知道mac笔记本是在美国生产的，那么如果中国供销商想要卖mac笔记本，那么必须从美国供销商那里先进货，然后中国的顾客才可以在中国供销商买mac。这里的中国供销商就相当于代理，美国供销商就相当于真实主题角色</li>
</ul>
<ul>
<li>Mac笔记本抽象接口(相当于其中的抽象主题)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 苹果笔记本的接口，其中有一个方法实现了买笔记本的动作</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;   <span class="comment">//购买笔记本的行为</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>美国供销商(相当于这里RealSubject)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 美国的笔记本，实现了MacBook接口，表示在美国买笔记本</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USAMac</span> <span class="keyword">implements</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"在美国买笔记本"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>中国供销商(相当于这里的代理角色)</p>
<ul>
<li>我们可以看到我们在使用代理模式的时候可以在之前和之后进行操作<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 中国的笔记本，实现了MacBook  表示在中国买笔记本</div><div class="line"> * 但是中国想要买到苹果笔记本，那么还是需要先从美国进货，因此中国只是一个中间的代理作用而已</div><div class="line"> * 当然代理的最大作用就是在代理之前、之后、之中执行相关的操作，这就是面向切面编程的原理</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaMac</span> <span class="keyword">implements</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> MacBook mcBook=<span class="keyword">new</span> USAMac();   <span class="comment">//创建USAMac的对象</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在购买之前执行的操作</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preBuy</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"购买之前执行的操作"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 在购买之后执行的操作</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterBuy</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"购买之后执行的操作"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.preBuy();   <span class="comment">//之前执行的操作</span></div><div class="line">		mcBook.buy();  <span class="comment">//在美国买笔记本</span></div><div class="line">		System.out.println(<span class="string">"在中国买笔记本"</span>);</div><div class="line">		<span class="keyword">this</span>.afterBuy();   <span class="comment">//之后执行的操作</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试类</p>
<ul>
<li>我们在使用的时候直接使用代理类即可，我们根本不知道在真实类的使用，完全是代理类为我们提供了</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MacBook macBook=<span class="keyword">new</span> ChinaMac();   <span class="comment">//创建ChinaMac对象，在中国买笔记本</span></div><div class="line">		macBook.buy();    <span class="comment">//直接在中国买笔记本</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h3><ul>
<li><p>我们登录一个网站的服务器端的验证步骤：</p>
<ul>
<li>读取用户名和密码</li>
<li>验证用户名和密码</li>
<li>记录到日志中</li>
</ul>
</li>
<li><p>这里的验证密码和记录到日志中可以在代理类中实现，在用户执行操作之前需要读取用户名和密码，并且验证，在操作之后需要将用户的一些操作记录到日志中。其实这里的真实用户需要做的只是执行自己的操作，而验证和记录都是交给代理类实现的。</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>用户接口(User)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 用户的抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoAction</span><span class="params">()</span></span>;   <span class="comment">//执行动作</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>真实的用户类（实现了用户接口）<ul>
<li>主要的做的就是执行自己的操作</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealUser</span> <span class="keyword">implements</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> String name;</div><div class="line">	<span class="keyword">public</span> String password;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RealUser</span><span class="params">(String name, String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RealUser</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 执行一些操作</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoAction</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"开始执行操作......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>代理类(实现了User接口)<ul>
<li>在执行操作之前验证密码和用户名是否正确</li>
<li>在执行操作之后记录到日志中</li>
<li>实际上这里就是面向切面编程</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxUser</span> <span class="keyword">implements</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> RealUser user; <span class="comment">// 真实用户的对象</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建对象</div><div class="line">	 * <span class="doctag">@param</span> name  姓名</div><div class="line">	 * <span class="doctag">@param</span> password   密码</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxUser</span><span class="params">(String name, String password)</span> </span>&#123;</div><div class="line">		user = <span class="keyword">new</span> RealUser(name, password);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoAction</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//验证用户名和密码</span></div><div class="line">		<span class="keyword">if</span> (Validate()) &#123;</div><div class="line">			user.DoAction();   <span class="comment">//调用真实用户的DoAction方法执行相关操作</span></div><div class="line">			logger();   <span class="comment">//调用日志记录信息</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"请重新登录......."</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 验证用户的用户名和密码</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">Validate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="string">"陈加兵"</span>.equals(user.name) &amp;&amp; <span class="string">"123456"</span>.equals(user.password)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加日志记录信息</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logger</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(user.name + <span class="string">"登录成功......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类<ul>
<li>实际上执行了验证用户名和密码，记录日志的操作，但是对于客户端来说只能看到自己执行的操作</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ProxUser proxUser=<span class="keyword">new</span> ProxUser(<span class="string">"陈加兵"</span>, <span class="string">"123456"</span>);   <span class="comment">//创建代理对象</span></div><div class="line">		proxUser.DoAction();   <span class="comment">//执行操作，实际执行了验证信息，doaction(),日志记录这个三个动作</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>如果增加一个接口就需要增加一个代理类，如果是要增加很多，那么就要增加很多代理类，代码将会重复</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>下面我们将会讲解到动态代理，仅仅需要一个代理类即可</li>
</ul>
<h1 id="结构型模式之动态代理模式"><a href="#结构型模式之动态代理模式" class="headerlink" title="结构型模式之动态代理模式"></a>结构型模式之动态代理模式</h1><ul>
<li><p>前面我们说的代理模式其实是属于静态代理模式，就是说在程序执行之前已经写好了代理类，但是缺点也是说过，必须为每个接口都实现一个代理类，如果有多个接口需要代理，那么代码肯定是要重复的，因此就需要动态代理了。</p>
</li>
<li><p>动态代理可以实现多个接口共用一个代理类，只需要改变初始化的参数即可，可以省去很多的重复的代码。</p>
</li>
<li><p>JDK的动态代理需要一个类一个接口，分别为Proxy和InvocationHandler</p>
</li>
<li><p>主要原理就是利用了反射的原理</p>
</li>
</ul>
<h2 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h2><ul>
<li>这个是代理类必须实现的接口，其中有一个方法<code>public Object invoke(Object proxy,Method method,Object[] args)</code><ul>
<li><code>Object proxy</code>：指被代理的对象。 </li>
<li><code>Method method</code>：要调用的方法 </li>
<li><code>Object[] args</code>：方法调用时所需要的参数 </li>
</ul>
</li>
</ul>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul>
<li>Proxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，此类提供了如下的操作方法：<br><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code><ul>
<li><code>ClassLoader loader</code>：类加载器 </li>
<li><code>Class&lt;?&gt;[] interfaces</code>：得到全部的接口 </li>
<li><code>InvocationHandler h</code>：得到InvocationHandler接口的子类实例 </li>
</ul>
</li>
</ul>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><ul>
<li>肯德基的接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 肯德基的接口，其中一个eat方法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IKFC</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>肯德基的实现类(RealSubject)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * IKFC的实现类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KFC</span> <span class="keyword">implements</span> <span class="title">IKFC</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我在肯德基吃了饭......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>苹果笔记本的接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 苹果笔记本的接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>美国供销商的类(RealSubject)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 美国笔记本的类，实现了MacBook接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USAMacBook</span> <span class="keyword">implements</span> <span class="title">MacBook</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"在美国买了一个苹果电脑......"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>动态代理的类（实现了InvocationHandler接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个是代理类，实现了InvocationHandler接口</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object Realobject;   <span class="comment">//被代理的对象</span></div><div class="line"></div><div class="line">	<span class="comment">//构造方法，用来初始化被代理的对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.Realobject=obj;   <span class="comment">//初始化真实类的对象</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> proxy  表示被代理的对象的，就是真实类的对象</div><div class="line">	 * <span class="doctag">@param</span> method 表示要调用真实类的方法</div><div class="line">	 * <span class="doctag">@param</span> args  表示方法调用的时候所需要的参数</div><div class="line">	 * <span class="doctag">@return</span>   方法调用之后的返回值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">			<span class="keyword">throws</span> Throwable &#123;</div><div class="line">		prefunction();   <span class="comment">//执行之前调用的方法</span></div><div class="line">		Object res=method.invoke(Realobject, args);    <span class="comment">//Method类中的执行方法的函数，在反射中常用</span></div><div class="line">		afterFunction();   <span class="comment">//执行之后调用的方法</span></div><div class="line">		<span class="keyword">return</span> res;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 执行方法之前调用的方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefunction</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"执行方法之前......"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 执行方法之后调用的方法</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterFunction</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"执行方法之后......"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</div><div class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.Class2HTML;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Class[] cls1=&#123;IKFC.class&#125;;   <span class="comment">//第一个代理的所有接口数组，直接用接口的反射即可</span></div><div class="line"></div><div class="line">		Class[] cls2=USAMacBook.class.getInterfaces(); <span class="comment">//直接具体的实现类的反射调用getInterfaces即可返回所有的接口数组</span></div><div class="line"></div><div class="line">		<span class="comment">// 返回KFC的代理对象</span></div><div class="line">		IKFC kfc = (IKFC) Proxy.newProxyInstance(Client.class.getClassLoader(),</div><div class="line">				cls1, <span class="keyword">new</span> ProxyHandler(<span class="keyword">new</span> KFC()));</div><div class="line">		kfc.eat();   <span class="comment">//执行方法</span></div><div class="line"></div><div class="line">		MacBook macBook = (MacBook) Proxy.newProxyInstance(Client.class.getClassLoader(),</div><div class="line">				cls2, <span class="keyword">new</span> ProxyHandler(</div><div class="line">						<span class="keyword">new</span> USAMacBook()));</div><div class="line"></div><div class="line">		macBook.buy();   <span class="comment">//执行方法</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>动态代理的好处<ul>
<li>即使有多个接口，也仅仅只有一个动态代理类</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构型模式之代理模式-静态代理&quot;&gt;&lt;a href=&quot;#结构型模式之代理模式-静态代理&quot; class=&quot;headerlink&quot; title=&quot;结构型模式之代理模式(静态代理)&quot;&gt;&lt;/a&gt;结构型模式之代理模式(静态代理)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由于某些原因，
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/设计模式之工厂模式/</id>
    <published>2018-04-12T03:28:21.000Z</published>
    <updated>2018-04-12T03:30:12.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之工厂模式"><a href="#创建型模式之工厂模式" class="headerlink" title="创建型模式之工厂模式"></a>创建型模式之工厂模式</h1><h2 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h2><ul>
<li>工厂模式是java中最常见的创建型模式，客户端在不知道创建逻辑的情况下，只需要在工厂中直接创建即可</li>
</ul>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul>
<li>简单工厂在创建对象的时候不需要知道具体的创建逻辑，客户端只需要知道该产品的一个标志即可，比如产品的名字</li>
<li>必备的两个元素：<ul>
<li>产品的抽象类</li>
<li>生产产品的工厂类</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>假设现在我们需要根据客户端的要求创建不同的图形，比如矩形，圆形…..，此时我们可以将图形抽象成接口，具体的产品只需要实现这个图形接口即可</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/simpleFactoryPattern.png" alt="简单工厂模式"></p>
<ul>
<li><p>shape接口（图形的接口，其中提供了一个创建图形的方法）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这个是抽象的产品类，后续的所有的产品都必须实现这个抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;   <span class="comment">//提供一个实现方法，作为画画的动作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>矩形产品类（实现shape接口）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 矩形的产品类，其中实现了Shape这个类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 实现了Shape中的方法</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我们画了一个矩形"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>圆形产品类（实现Shape接口）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 圆形的产品类，实现了Shape这个类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"我们画了一个圆"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>工厂方法（创建产品的类）</p>
<ul>
<li>根据传入的标志创建对应的产品<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 简单工厂的实例</div><div class="line"> * 其中提供一个getShape(String name) 可以根据提供的名字来返回一个对象，其实工厂生产的产品</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (name) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">"矩形"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Rectangle(); <span class="comment">// 返回矩形的对象</span></div><div class="line">		<span class="keyword">case</span> <span class="string">"圆形"</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Circle(); <span class="comment">// 返回圆形对象</span></div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			System.out.println(<span class="string">"我们不能创建一个额外的对象"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 没有指定对象就返回null</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String name = <span class="string">"圆形"</span>; <span class="comment">// 填入名字</span></div><div class="line">		SimpleFactoryDemo simpleFactoryDemo = <span class="keyword">new</span> SimpleFactoryDemo(); <span class="comment">// 创建简单工厂实例</span></div><div class="line">		Shape shape = simpleFactoryDemo.getShape(name); <span class="comment">// 根据名字获取对象</span></div><div class="line">		shape.draw(); <span class="comment">// 调用方法</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>优点：<ul>
<li>每次增加一个产品类只需要增加一个实现类即可（实现产品接口）</li>
</ul>
</li>
<li>缺点：<ul>
<li>如果添加一个产品类，那么我们就需要在工厂类中添加对应的代码（违反开闭原则）</li>
<li>开闭原则：<ul>
<li>简单的说就是在对功能进行扩展的时候对原先的代码不做任何修改</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li><p>简单工厂模式是一个抽象产品类派生出多个具体的产品类，但是一个工厂就生产了全部的产品</p>
</li>
<li><p>工厂方法模式是有一个抽象工厂派生出多个具体的工厂，每个工厂生产一件具体的产品</p>
</li>
</ul>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol>
<li>抽象产品类</li>
<li>抽象工厂类</li>
<li>每个具体的产品类都有一个具体的工厂类生产</li>
</ol>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>我们对上面的实例进行改写，只需要定义一个抽象工厂类即可，其中派生出两个具体的工厂类用来生产圆形和矩形</p>
</li>
<li><p>这里的抽象产品接口和具体的产品类和上面相同，不需要写了</p>
</li>
<li><p>抽象工厂（使用的接口，其中有一个生产方法）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 抽象的工厂类</div><div class="line"> * 其中定义一个方法 getShape() 返回的是Shape类型的产品类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryInterface</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>生产圆形的工厂类（实现抽象工厂）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 生产圆形的产品类  其中实现了抽象的工厂类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryCircle</span> <span class="keyword">implements</span> <span class="title">FactoryInterface</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Circle();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>生产矩形的工厂类（实现抽象工厂接口）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 生产矩形的工厂类，其中实现了抽象工厂类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryRectangle</span> <span class="keyword">implements</span> <span class="title">FactoryInterface</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//使用多态创建工厂类</span></div><div class="line">		FactoryInterface factoryInterface=<span class="keyword">new</span> FactoryCircle();  <span class="comment">//创建圆形的工厂类</span></div><div class="line">		factoryInterface.getShape().draw();  <span class="comment">//生成Circle对象并且调用方法</span></div><div class="line"></div><div class="line">		FactoryInterface factoryInterface2=<span class="keyword">new</span> FactoryRectangle();  <span class="comment">//创建矩形的工厂类</span></div><div class="line">		factoryInterface2.getShape().draw();   <span class="comment">//生成Rectangle的对象并且调用方法</span></div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点：</p>
<ul>
<li><p>易于扩展，如果需要添加一个产品类，只需要添加一个具体的产品类和对应的工厂类即可，不需要对原工厂的方法进行任何的修改</p>
</li>
<li><p>在工厂方法模式中，用户只需要知道所需要产品的具体工厂类即可，不需要知道具体的创建过程，甚至不需要知道具体产品类的类名。</p>
</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>每次新增一个产品时，都需要增加一个具体的产品类和具体的工厂类，明显的成倍增加代码。</li>
</ul>
</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ol>
<li><p>多个抽象产品类，派生出多个具体产品类；一个抽象工厂类，派生出多个具体工厂类；每个具体工厂类可创建读个具体产品类实例。</p>
</li>
<li><p>即是提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们的具体的类。“一对多的关系”</p>
</li>
<li><p>这里的抽象产品类就像是一类产品的族，其中具体实现类就是不同的表现形式而已。</p>
</li>
<li><p>这里的每一个具体的工厂类可以生产不同种类的产品，并不是一个具体的工厂类只能生产一个具体的产品罢了</p>
</li>
<li><p>下面我们举一个麦当劳和肯德基的例子，他们两家中都买薯条和鸡翅，那么薯条和鸡翅就是两类产品，麦当劳和肯德基就是具体的工厂类用来生产薯条和鸡翅，那么我们需要一个抽象的工厂类来生产这两类产品，肯德基和麦当劳只需要实现即可。</p>
</li>
</ol>
<h3 id="总结定义"><a href="#总结定义" class="headerlink" title="总结定义"></a>总结定义</h3><ul>
<li>简单的说：<ul>
<li>抽象工厂模式一个一个工厂生产一个产品类族</li>
<li>其中的工厂并不是生产一种产品，而是生产多种产品（一类的产品）</li>
</ul>
</li>
</ul>
<h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><ul>
<li><p>多个抽象产品类派生出多个具体的产品类，比如鸡翅(麦当劳，肯德基)，薯片（麦当劳，肯德基）</p>
</li>
<li><p>一个抽象工厂，派生出多个具体的工厂类，比如肯德基和麦当劳就相当于两个工厂，这两个工厂都生产各自品牌的鸡翅，薯片，汉堡等</p>
</li>
</ul>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>抽象产品类</p>
<ul>
<li><p>这里我们有两种产品，一个是鸡翅，一个薯片，因此需要创建两个抽象产品接口</p>
</li>
<li><p>鸡翅的抽象接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 鸡翅的接口，这是一类产品的接口，在其中可以实现具体的产品类，比如麦当劳的麦乐鸡，肯德基的奥尔良烤翅</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IChicken</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>薯片的抽象接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 薯条的接口，这也是一个抽象的产品类，其中可以有多个具体的产品类，比如麦当劳的薯条，肯德基的薯条</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IChips</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>抽象工厂类</p>
<ul>
<li><p>抽象工厂类只有一个，但是具体的工厂类一个是麦当劳，一个肯德基，工厂中生产各自品牌的产品</p>
</li>
<li><p>抽象工厂</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 抽象工厂类，用来生产鸡翅和薯条的工厂类，下面可以衍生出多个具体的工厂类来生产指定商家的鸡翅和薯条</div><div class="line">	*/</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStore</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> IChicken <span class="title">createChicken</span><span class="params">()</span></span>; <span class="comment">// 生产鸡翅</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> IChips <span class="title">createChips</span><span class="params">()</span></span>; <span class="comment">// 生产薯条</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>具体的产品类</p>
<ul>
<li><p>肯德基的薯条</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 肯德基的薯条，是IChips具体实现类，也是一个具体的产品类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KfcChips</span> <span class="keyword">implements</span> <span class="title">IChips</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"你吃了肯德基的薯条......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>肯德基的鸡翅</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 肯德基的奥尔良烤翅类，是IChicken的具体实现类，是一个具体的产品</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KfcChicken</span> <span class="keyword">implements</span> <span class="title">IChicken</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"你吃了肯德基的奥尔良烤翅......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>麦当劳的薯条</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	* 麦当劳的薯条，是IChips具体实现类，也是一个具体的产品类</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McChips</span> <span class="keyword">implements</span> <span class="title">IChips</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"你吃了麦当劳的薯条......"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>麦当劳的鸡翅</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 麦当劳的鸡翅，这是IChicken的具体的实现产品类</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McChicken</span> <span class="keyword">implements</span> <span class="title">IChicken</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"你吃了的麦当劳的鸡翅......"</span>);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>具体的工厂类</p>
<ul>
<li><p>麦当劳的工厂类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 麦当劳的工厂，实现了抽象工厂，这个工厂可以生产麦当劳的鸡翅和薯条</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McFactory</span> <span class="keyword">implements</span> <span class="title">IStore</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChicken <span class="title">createChicken</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> McChicken(); <span class="comment">// 生产麦当劳的鸡翅</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChips <span class="title">createChips</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> McChips(); <span class="comment">// 生产麦当劳的薯条</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>肯德基的工厂类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	* 肯德基的工厂，实现了抽象工厂，这个工厂可以生产肯德基的鸡翅和薯条</div><div class="line">	*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KFCFactory</span> <span class="keyword">implements</span> <span class="title">IStore</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChicken <span class="title">createChicken</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> KfcChicken(); <span class="comment">// 生产肯德基的鸡翅</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IChips <span class="title">createChips</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> KfcChips(); <span class="comment">// 生产肯德基的薯条</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		IStore iStore1=<span class="keyword">new</span> KFCFactory();   <span class="comment">//创建肯德基的具体工厂类</span></div><div class="line">		iStore1.createChicken().eat();    <span class="comment">//吃了肯德基的鸡翅</span></div><div class="line">		iStore1.createChips().eat();    <span class="comment">//吃了肯德基的薯条</span></div><div class="line"></div><div class="line">		IStore iStore2=<span class="keyword">new</span> McFactory();   <span class="comment">//创建麦当劳的具体工厂类</span></div><div class="line">		iStore2.createChicken().eat();    <span class="comment">//吃了麦当劳的鸡翅</span></div><div class="line">		iStore2.createChips().eat();   <span class="comment">//吃了麦当劳的薯条</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li><p>优点</p>
<ul>
<li>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>产品族比较难扩展，比如你要添加一个鞋子这个产品族，那么需要自己定义一个鞋子的抽象产品类，还要添加这个不同品牌的具体的产品实现类，另外还需要在抽象工厂里添加一个生产鞋子的方法</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之工厂模式&quot;&gt;&lt;a href=&quot;#创建型模式之工厂模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之工厂模式&quot;&gt;&lt;/a&gt;创建型模式之工厂模式&lt;/h1&gt;&lt;h2 id=&quot;什么是工厂模式&quot;&gt;&lt;a href=&quot;#什么是工厂模式&quot; class
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/设计模式之单例模式/</id>
    <published>2018-04-12T03:28:05.000Z</published>
    <updated>2018-04-12T03:29:40.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式之单例模式-Singleton"><a href="#创建型模式之单例模式-Singleton" class="headerlink" title="创建型模式之单例模式(Singleton)"></a>创建型模式之单例模式(Singleton)</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><ul>
<li>该类只有一个实例</li>
<li>构造方法是私有的</li>
<li>有一个获取该类对象的静态方法getInstance()</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>一个国家只有一个主席</li>
<li>如果此时的限定必须是抽象出来的类只能是一个对象，这个时候就需要使用单例模式</li>
</ul>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><h3 id="什么是懒汉式"><a href="#什么是懒汉式" class="headerlink" title="什么是懒汉式"></a>什么是懒汉式</h3><ul>
<li>懒汉式是当用到这个对象的时候才会创建，即是在getInstance()方法创建这个单例对象</li>
</ul>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>只有用到的时候才会创建这个对象，因此节省资源</li>
<li>线程不安全<ul>
<li>我们知道一旦我们使用了懒汉式就是在getInstance()方法中创建这个单例对象，那么不可避免的就是线程安全问题</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 懒汉式的单例模式： 不是线程安全的</div><div class="line"> * 优点： 在使用的时候才会初始化，可以节省资源</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalLazy</span> </span>&#123;</div><div class="line">	<span class="comment">// 将默认的构造器设置为private类型的</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalLazy</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 静态的单例对象</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SignalLazy instance;</div><div class="line"></div><div class="line">	<span class="comment">//静态的获取单例的对象，其中有一个判断，如果没有初始化，那么就创建</span></div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> SignalLazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 如果instance没有被初始化，那么就创建即可，这个是保证了单例，但是并不是线程安全的</span></div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"this is SignalLazy"</span>);</div><div class="line">			instance = <span class="keyword">new</span> SignalLazy(); <span class="comment">// 创建一 个对象</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance; <span class="comment">// 返回这个对象</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>从上面的代码中我们可以知道一旦使用多线程创建对象，那么就会出现线程不安全，最后创建出来的就不是单例了</p>
</li>
<li><p>测试代码如下</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		 <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">//创建实例，并且输出其中的地址，如果地址相同， 那么就是同一个实例</span></div><div class="line">				System.out.println(<span class="string">"this is"</span>+ SignalLazy.getInstance());</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">		 <span class="comment">//主线程也是创建输出其中的地址，运行可以看出这两个地址是不一样的</span></div><div class="line">		 System.out.println(<span class="string">"this is"</span>+SignalLazy.getInstance());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解决线程不安全"><a href="#解决线程不安全" class="headerlink" title="解决线程不安全"></a>解决线程不安全</h3><ul>
<li>线程同步锁(synchronized)<ul>
<li>我们知道每一个类都有一个把锁，我们可以使用线程同步锁来实现线程同步方法</li>
<li>但是使用线程同步锁浪费资源，因为每次创建实例都需要请求同步锁，浪费资源</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SignalLazy <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 如果instance没有被初始化，那么就创建即可，这个是保证了单例，但是并不是线程安全的</span></div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">			System.out.println(<span class="string">"this is SignalLazy"</span>);</div><div class="line">			instance = <span class="keyword">new</span> SignalLazy(); <span class="comment">// 创建一个对象</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance; <span class="comment">// 返回这个对象</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>双重校验<ul>
<li>双重校验： 两次判断单例对象是否为 null，这样的话，当当线程经过这个判断的时候就会先判断，而不是等待，一旦判断不成立，那么就会继续执行，不需要等待</li>
<li>相对于前面的同步方法更加节省资源</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalTonDoubleCheck</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SignalTonDoubleCheck instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalTonDoubleCheck</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;; <span class="comment">// 将默认的构造方法设置私有</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignalTonDoubleCheck <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span> (SignalTonDoubleCheck.class) &#123;</div><div class="line">				<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// 这个new 并不是原子操作，因此当多线程进行到这里需要及时刷新这个值，因此要设置为voliate</span></div><div class="line">					instance = <span class="keyword">new</span> SignalTonDoubleCheck();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>匿名内部类 （推荐使用）<ul>
<li>我们知道静态变量、静态代码块、静态方法都是在类加载的时候只加载一次</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalTonInnerHolder</span> </span>&#123;</div><div class="line">	<span class="comment">//私有构造函数</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalTonInnerHolder</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 匿名内部类，其中利用了静态成员变量在类加载的时候初始化，并且只加载一次，因此保证了单例</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerHolder</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> SignalTonInnerHolder instance = <span class="keyword">new</span> SignalTonInnerHolder();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignalTonInnerHolder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> InnerHolder.instance;  <span class="comment">//加载类</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>一旦加载SignalTonInnerHolder类的时候就会加载其中的静态类，随之加载的就是其中的创建对象语句，因此在类加载的时候就完成了创建，这个和我们后面说的饿汉式有点相同</li>
</ul>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><h3 id="什么是饿汉式"><a href="#什么是饿汉式" class="headerlink" title="什么是饿汉式"></a>什么是饿汉式</h3><ul>
<li>在类加载的时候就创建单例对象，而不是在getInstance()方法创建</li>
<li>所谓的饿汉式就是利用静态成员变量或者静态语句块在类加载的时候初始化，并且只初始化一次，因此这个是线程安全的，但是在没有用到的时候就初始化，那么是浪费资源</li>
</ul>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>还没用到就创建，浪费资源</li>
<li>类加载的时候就创建，线程安全</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 饿汉式：线程安全</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignalHungry</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SignalHungry</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 静态变量只有在类加载的时候初始化一次，因此这个是线程安全的</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SignalHungry instance = <span class="keyword">new</span> SignalHungry();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignalHungry <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		 <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">//创建实例，并且输出其中的地址，如果地址相同， 那么就是同一个实例</span></div><div class="line">				System.out.println(<span class="string">"this is"</span>+ SignalHungry.getInstance());</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line"></div><div class="line">		 <span class="comment">//主线程也是创建输出其中的地址，运行可以看出这两个地址是不一样的</span></div><div class="line">		 System.out.println(<span class="string">"this is"</span>+SignalHungry.getInstance());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>饿汉式在类加载的时候就会创建单例对象，因此浪费资源</li>
<li>懒汉式在用到的时候才创建，节省资源，但是线程不安全，但是我们可以使用匿名内部类的方式使其线程安全</li>
<li>一般在使用的时候会使用懒汉式的匿名内部类的实现和饿汉式的创建方式</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建型模式之单例模式-Singleton&quot;&gt;&lt;a href=&quot;#创建型模式之单例模式-Singleton&quot; class=&quot;headerlink&quot; title=&quot;创建型模式之单例模式(Singleton)&quot;&gt;&lt;/a&gt;创建型模式之单例模式(Singleton)&lt;/h1
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之常见关系</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%85%B3%E7%B3%BB/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/设计模式之常见关系/</id>
    <published>2018-04-12T03:27:45.000Z</published>
    <updated>2018-04-12T03:29:07.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承和泛化"><a href="#继承和泛化" class="headerlink" title="继承和泛化"></a>继承和泛化</h1><ul>
<li>泛华关系是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。</li>
<li>使用三角箭头的实线表示继承，其中箭头指向的是父类<br><img src="http://ono60m7tl.bkt.clouddn.com/jicheng.png" alt="继承图形"></li>
</ul>
<h1 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h1><ul>
<li>在java中一个类只能继承一个父类，但是可以实现多个接口</li>
<li>使用的是带三角的虚线表示，其中箭头指向的是接口</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/real.png" alt="实现接口"></p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li>是一种使用关系，即一个类的实现需要另外一个类的协助，所以尽量不使用双向的依赖关系。</li>
<li>最典型的就是import</li>
<li>比如：一个类要定义String类型的变量，那么这个类就是依赖String这个类</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/dependency.png" alt="依赖"></p>
<h1 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h1><ul>
<li>是一种拥有的关系，它使一个类知道另外一个类的属性和方法，比如数据库中的关系，通过学生可以查找到自己课程的成绩，只需要在学生中定义一个课程的对象即可。</li>
<li>代码体现： 成员变量</li>
<li>带普通箭头的实心线，指向被拥有者</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/association.png" alt="关联"></p>
<h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><ul>
<li><p>是整体和部分的关系，且部分可以离开整体而单独的存在。车和轮胎是整体和部分的关系，但是轮胎离开车还是可以单独存在的</p>
</li>
<li><p>代码体现： 成员变量</p>
</li>
<li><p>带空心菱形的实心线，菱形指向整体</p>
</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/aggregation.png" alt="聚合"></p>
<h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><ul>
<li>是整体和部分的关系，但是部分不能离开整体而单独存在</li>
<li>代码体现：成员变量</li>
<li>带实心菱形的实线，菱形指向整体</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/composition.png" alt="组合"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;继承和泛化&quot;&gt;&lt;a href=&quot;#继承和泛化&quot; class=&quot;headerlink&quot; title=&quot;继承和泛化&quot;&gt;&lt;/a&gt;继承和泛化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;泛华关系是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://chenjiabing666.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Struts2之类型转换器</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/Struts2%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/Struts2之类型转换器/</id>
    <published>2018-04-11T16:41:07.000Z</published>
    <updated>2018-04-11T16:41:37.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Struts2之类型转换器"><a href="#Struts2之类型转换器" class="headerlink" title="Struts2之类型转换器"></a>Struts2之类型转换器</h1><ul>
<li>在我们接收表单的请求参数的时候其实默认的都是String类型，但是有时候我们需要其他的数据类型，比如int,double,float,Date。</li>
<li>其实前面表单的传值都是字符串形式的，但是为什么我们在JavaBean中定义了不同的类型的数据，Struts还是会正确接收表单传递过来的值呢，因为使用了Struts中的内建的类型转换器</li>
</ul>
<h2 id="传统的类型转换器"><a href="#传统的类型转换器" class="headerlink" title="传统的类型转换器"></a>传统的类型转换器</h2><ul>
<li>在Servlet中我们可以自己获取请求参数自己转换类型，通常使用request.getParamerter(String name) 获取请求的参数 如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String username= requst.getParameter(<span class="string">"username"</span>);</div><div class="line"><span class="comment">//获取年龄然后转换成了整数</span></div><div class="line"><span class="keyword">int</span> age=Integer.parseInt(requst.getParameter(<span class="string">"age"</span>));</div></pre></td></tr></table></figure>
<h2 id="内建的类型转换器"><a href="#内建的类型转换器" class="headerlink" title="内建的类型转换器"></a>内建的类型转换器</h2><ul>
<li>其实内建的类型转换器已经可以完成大部分的功能了，比如表单传值，其实传递的是字符串，但是我们在JavaBean中定义的却是不同类型的数据，内部原理就是用了内置的类型转换器</li>
<li>内建类型转换器可以完成基本类型之前的转换</li>
</ul>
<h2 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2><ul>
<li><p>前面说的内建的类型转换器只是在普通的类型之间的转换，都是一些基本的类型可以实现自动转换，并不用自己定义类型转换器。但是我们现在需要将输出的字符串转换为复合对象，比如一个User（username，password）类，那么现在就不能使用内建的类型转换器自动转换了，现在需要自己定义类型转换器了。</p>
</li>
<li><p>实现类型转换器也是基于OGNL实现的，在OGNL中有一个<code>TypeConverter</code>接口，但是这个接口太复杂了，因此OGNL还提供了一个类<code>DefaultTypeConverter</code>，通过继承这个类就可以实现类型转换器了。</p>
</li>
<li><p>假设我们在登录界面需要在一个text中输入用户名和密码用逗号隔开，现在我们可以使用自定义的转换器。现在登录的JSP如下:</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action="http://localhost:8080/web3/login" method="post"&gt;</div><div class="line">	&lt;label&gt;请输入用户名和密码(逗号隔开)：&lt;/label&gt;</div><div class="line">	&lt;input type="text" name="user"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">	&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li>定义的User类如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String username;  <span class="comment">//用户名</span></div><div class="line">	<span class="keyword">private</span> String password;  <span class="comment">//密码</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Action类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.Action;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user; <span class="comment">// User对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>UserConverter（转换器类）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">import</span> ognl.DefaultTypeConverter;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConverter</span> <span class="keyword">extends</span> <span class="title">DefaultTypeConverter</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * context：类型转换的上下文环境</div><div class="line">	 * value: value是需要转换的参数，随着转换的方向不同，value的参数值也是不一样的，因此需要强制转化</div><div class="line">	 * toType： 表示转换后的目标类型</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">convertValue</span><span class="params">(Map context, Object value, Class toType)</span> </span>&#123;</div><div class="line">		System.err.println(<span class="string">"调用了"</span>);</div><div class="line">		<span class="comment">// 有字符串转http://download.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#sum换为User类</span></div><div class="line">		<span class="comment">// toType表示转向的类型</span></div><div class="line">		<span class="keyword">if</span> (toType == User.class) &#123;</div><div class="line"></div><div class="line">			String[] params = (String[]) value; <span class="comment">// 将字符串转换为数组</span></div><div class="line">			User user = <span class="keyword">new</span> User(); <span class="comment">// 创建User对象</span></div><div class="line">			<span class="comment">// 利用逗号将数组中的第一个字符串分割为两个字符串，设置成username，password</span></div><div class="line">			user.setUsername(params[<span class="number">0</span>].split(<span class="string">","</span>)[<span class="number">0</span>]);</div><div class="line">			user.setPassword(params[<span class="number">0</span>].split(<span class="string">","</span>)[<span class="number">1</span>]);</div><div class="line">			<span class="keyword">return</span> user; <span class="comment">// 最后一定要返回User对象</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 如果是从复合类转换为字符串</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (toType == String.class) &#123;</div><div class="line">			User user = (User) value; <span class="comment">// 将value转换为User对象</span></div><div class="line">			<span class="comment">// 最后返回一个字符串表现的形式</span></div><div class="line">			<span class="keyword">return</span> user.getUsername() + <span class="string">","</span> + user.getPassword();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 没有相互转换的条件返回null</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>从上面的代码可以看出有两类的转换:一是从字符串转换为User类，二是从User类转换为字符串，这个都是使用toType来控制的。</li>
</ul>
<h3 id="ConverterValue方法参数和返回值的含义"><a href="#ConverterValue方法参数和返回值的含义" class="headerlink" title="ConverterValue方法参数和返回值的含义"></a>ConverterValue方法参数和返回值的含义</h3><ul>
<li><p>context： 是类型转换环境的上下文</p>
</li>
<li><p>value ：是需要转换的类型参数。随着转换方向的不同，value参数的值也是不一样的，当把字符串类型转换为User类型时，value就是原始字符串。当需要把User类型向字符串类型转换时，value是User的实例。当然无论向哪一个方向转换，value都是需要强制转换的。</p>
</li>
<li><p>toType: 是转换后的目标类型。</p>
</li>
<li><p>为什么自己当向User类转换的时候，value要转换为一个字符数组呢？</p>
<ul>
<li>因为这里对应的是一个文本，如果我们对应的是一个多选框，那么此时就是一个数组了，因此这里强制转换为数组是一个通用的写法</li>
</ul>
</li>
</ul>
<h3 id="局部转换器"><a href="#局部转换器" class="headerlink" title="局部转换器"></a>局部转换器</h3><ul>
<li><p>转换器分为局部转换器和全局转换器，局部转换器是针对指定的Action类，但是全局转换器是针对的是该项目中所有需要转换的Action类。</p>
</li>
<li><p>前面已经实现了Action类，现在我们只需要定义一个ActionName-conversion.properties文件和Action放在一个目录下即可，其中的ActionName是Action的类名，比如上面的Action类是LoginAction，那么这里的文件就是LoginAction-conversion,.properties。其中的内容如下：</p>
<ul>
<li>user是Action中定义User对象，com.converter.UserConverter是对应的转换的类，一定要定义到包名。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user=com.converter.UserConverter</div></pre></td></tr></table></figure>
<h3 id="全局转换器"><a href="#全局转换器" class="headerlink" title="全局转换器"></a>全局转换器</h3><ul>
<li>全局转换器是作用于全部需要转换的Action的，只需要定义一个xwork-conversion. Properties。这个的名字就不需要改变了，放在src目录下即可，这样才可以作用到全局中。内容如下:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.user.User=com.converter.UserConverter</div><div class="line">com.date.Date=com.converter.Date</div></pre></td></tr></table></figure>
<ul>
<li><p>其中的内容是一键值对存在的，com.user.User对应的是定义的JavaBean类，这里不再是action类中的定义的User对象了，是需要转换对象的类，com.converter.UserConverter这个是定义转换器的类。</p>
</li>
<li><p>从上面我们可以看出来定义两个转换器，最后一个是将字符串转换为日期类型的转换器。其实其中可以定多个类型转换器，并且只要是一键值对的形式写出即可。</p>
</li>
</ul>
<h2 id="基于Struts2的类型转换器"><a href="#基于Struts2的类型转换器" class="headerlink" title="基于Struts2的类型转换器"></a>基于Struts2的类型转换器</h2><ul>
<li><p>上面的类型转换器都是基于OGNL的DefaultTypeConverter类实现的，基于该类实现转换时都要实现ConverterValue()方法，无论是从字符串转换为复合类型还是从复合类型转换为字符串都是在这个方法中实现。</p>
</li>
<li><p>为了简化类型转换器的实现，Struts2提供了一个StrutsTypeConverter抽象类，这个抽象类是DefaultTypeConverter的子类。其中重要的方法如下:</p>
<ul>
<li>public Object convertFromString(Map context, String[] values, Class toClass)将字符串转换为复合类型个方法。</li>
<li>context是上下文环境，value是字符串数组，toClass是要转换的类型</li>
<li>public String convertToString(Map context, Object values) 将复合类型转换为字符串</li>
<li>values是复合类对象，context是上下文环境</li>
<li>public Object convertValue(Map context, Object values, Class toClass)<br>实现DefaultTypeConverter方法，其中的变量还是上面的意思</li>
</ul>
</li>
<li><p>下面实现上面的登录转换，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.apache.struts2.util.StrutsTypeConverter;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConverterStruts</span> <span class="keyword">extends</span> <span class="title">StrutsTypeConverter</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">performFallbackConversion</span><span class="params">(Map context, Object o,</span></span></div><div class="line">			Class toClass) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.performFallbackConversion(context, o, toClass);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 将字符串转换为复合类型的方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">convertFromString</span><span class="params">(Map context, String[] values, Class toClass)</span> </span>&#123;</div><div class="line">		User user = <span class="keyword">new</span> User();   <span class="comment">//创建User对象</span></div><div class="line">		String[] userValues = values[<span class="number">0</span>].split(<span class="string">","</span>); <span class="comment">// 将字符串数组中的第一个字符串分隔开</span></div><div class="line">		user.setUsername(userValues[<span class="number">0</span>]);</div><div class="line">		user.setPassword(userValues[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 将复合类型转换为字符串</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">convertToString</span><span class="params">(Map context, Object values)</span> </span>&#123;</div><div class="line">		User user = (User) values;   <span class="comment">//强制转换成User类型的</span></div><div class="line">		String username = user.getUsername(); <span class="comment">//获取username和password</span></div><div class="line">		String password = user.getPassword();</div><div class="line">		<span class="keyword">return</span> <span class="string">"&lt;"</span> + username + <span class="string">","</span> + password + <span class="string">"&gt;"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>有了上面的转换器，那么局部转换器和全局转换器的配置还是和上面的一样，这里就不在赘述了。</p>
</li>
</ul>
<h2 id="数组属性的类型转换器"><a href="#数组属性的类型转换器" class="headerlink" title="数组属性的类型转换器"></a>数组属性的类型转换器</h2><ul>
<li>数组类型的转换器是用于提交的参数为数组的类型的，也就是同时Action中有一个属性为数组。</li>
<li>现在我们要同时输入两个用户的信息，jsp如下:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;form action="http://localhost:8080/web3/login" method="post"&gt;</div><div class="line">&lt;label&gt;请输入用户名和密码(逗号隔开)：&lt;/label&gt;</div><div class="line">&lt;input type="text" name="users"&gt;</div><div class="line">&lt;input type="text" name="users"&gt;</div><div class="line">&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>从上面的代码我们可以看出这里text中有两个name属性相同的表单，这个同时提交上去就是一个数组。</p>
</li>
<li><p>Action类：(定义一个User数组):</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.Action;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginSAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> User[] users;  <span class="comment">//定义数组类型User</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> User[] getUsers() &#123;</div><div class="line">		<span class="keyword">return</span> users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(User[] users)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.users = users;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(getUsers()[<span class="number">0</span>].getUsername());</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>数组转换器:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.apache.struts2.util.StrutsTypeConverter;</div><div class="line"><span class="keyword">import</span> com.user.User;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersConverterStruts</span> <span class="keyword">extends</span> <span class="title">StrutsTypeConverter</span> </span>&#123;</div><div class="line">	<span class="comment">// 将字符串转换复合类型</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">convertFromString</span><span class="params">(Map context, String[] values, Class toClass)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (values.length &gt; <span class="number">1</span>) &#123;</div><div class="line">			User[] results= <span class="keyword">new</span> User[values.length]; <span class="comment">// 创建对象，这里是创建和字符串数组一样的长度</span></div><div class="line">			<span class="comment">// 遍历所有的字符串数组，然后将其填入每一个User对象中</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</div><div class="line">				User user=<span class="keyword">new</span> User();  <span class="comment">//创建user对象</span></div><div class="line">				String[] uservalues = values[i].split(<span class="string">","</span>);</div><div class="line">				user.setUsername(uservalues[<span class="number">0</span>]); <span class="comment">// 将其设置为User的属性</span></div><div class="line">				user.setPassword(uservalues[<span class="number">1</span>]);</div><div class="line">				results[i]=user;   <span class="comment">//将实例化的user对象，填入数组</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> results;</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 这里表示数组中只有一个字符串</span></div><div class="line">			User user = <span class="keyword">new</span> User(); <span class="comment">// 创建对象</span></div><div class="line">			String[] uservalues = values[<span class="number">0</span>].split(<span class="string">","</span>);</div><div class="line">			user.setUsername(uservalues[<span class="number">0</span>]);</div><div class="line">			user.setPassword(uservalues[<span class="number">1</span>]);</div><div class="line">			<span class="keyword">return</span> user;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 将复合类型转换为字符串</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">convertToString</span><span class="params">(Map context, Object values)</span> </span>&#123;</div><div class="line">		<span class="comment">// 只是一个单个的User类型的</span></div><div class="line">		<span class="keyword">if</span> (values <span class="keyword">instanceof</span> User) &#123;</div><div class="line">			User user = (User) values;</div><div class="line">			String username = user.getUsername();</div><div class="line">			String password = user.getPassword();</div><div class="line">			<span class="keyword">return</span> <span class="string">"&lt;"</span> + username + <span class="string">","</span> + password + <span class="string">"&gt;"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// User数组</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (values <span class="keyword">instanceof</span> User[]) &#123;</div><div class="line">			User[] users = (User[]) values;  <span class="comment">//转换为User数组</span></div><div class="line">			String results = <span class="string">"["</span>;</div><div class="line">			<span class="keyword">for</span> (User user : users) &#123;</div><div class="line">				String username = user.getUsername();</div><div class="line">				String password = user.getPassword();</div><div class="line">				results += <span class="string">"&lt;"</span> + username + <span class="string">","</span> + password + <span class="string">"&gt;"</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> results + <span class="string">"]"</span>;   <span class="comment">//返回全部的字符串</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Struts2之类型转换器&quot;&gt;&lt;a href=&quot;#Struts2之类型转换器&quot; class=&quot;headerlink&quot; title=&quot;Struts2之类型转换器&quot;&gt;&lt;/a&gt;Struts2之类型转换器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在我们接收表单的请求参数的时候其实默认的
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts之标签库</title>
    <link href="http://chenjiabing666.github.io/2018/04/12/Struts%E4%B9%8B%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://chenjiabing666.github.io/2018/04/12/Struts之标签库/</id>
    <published>2018-04-11T16:40:06.000Z</published>
    <updated>2018-04-11T16:40:46.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Struts标签库"><a href="#Struts标签库" class="headerlink" title="Struts标签库"></a>Struts标签库</h1><ul>
<li><p>如果想要在jsp页面使用struts2的标签，需要引入标签库</p>
<ul>
<li><code>&lt;%@ taglib uri=&quot;/struts-tags&quot;  prefix=&quot;s&quot;%&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="数据标签"><a href="#数据标签" class="headerlink" title="数据标签"></a>数据标签</h2><ul>
<li>作用: 用于数据的存储和处理</li>
</ul>
<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><ul>
<li><p>action标签是用来在JSP页面中调用Action某个Action类的，该标签有如下的几个属性；</p>
</li>
<li><p>Id<br>该属性用来指定Action的引用id</p>
</li>
<li><p>name<br>该属性是用来指定Action类的映射地址</p>
</li>
<li><p>namespace<br>该属性用来指定Action类所在namespace</p>
</li>
<li><p>executeResult<br>该属性用来指定是否将Action类的处理结果也跳转的那个视图内容包含到本页面中，默认值为false，不包含</p>
</li>
<li><p>ignoreContextParams<br>该属性用来指定是够将请求的参数传入到Action中，默认为false，即是传入</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>调用第一个action<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 调用登录的Action类，name指定&lt;action&gt;标签的name属性值，executeResult为true指示包含Action响应的内容</span></div><div class="line">		namespace指定Action类所在包指定的namespace</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">s:action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">executeResult</span>=<span class="string">"true"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:action</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>调用第二个action<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 调用第二个Action，表示注册页面，ignoreContextParams为true表示不传入参数，那么其中的password和username就不能接收参数了，因此输出为NULL --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">executeResult</span>=<span class="string">"true"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">ignoreContextParams</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><ul>
<li><p>bean标签用来创建一个JavaBean实例，和action标签差不多，就是在jsp页面中调用JavaBean对象，创建一个对象,不过这个对象是存在Stack Context中的，不是值栈中的。</p>
</li>
<li><p>id<br>用来表示创建的JavaBean类的实例，这个是用来在Stack Context中查看状态的,使用标签<s:debug></s:debug></p>
</li>
<li><p>name<br>用来指定JavaBean，指定JavaBean类所在的路径</p>
</li>
<li><p>var<br>这个是id一样的功能，其实可以代替id</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;s:bean name="com.user.User" id="myBean" &gt;</div><div class="line">		&lt;!-- 使用param标签为其赋值 --&gt;</div><div class="line">		&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param name="age" value="22"&gt;&lt;/s:param&gt;</div><div class="line"></div><div class="line">		姓名: &lt;s:property value="username"/&gt;&lt;br&gt;</div><div class="line">		年龄:&lt;s:property value="age"/&gt;</div><div class="line">&lt;/s:bean&gt;</div></pre></td></tr></table></figure>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><ul>
<li><p>date标签用于格式化一个日期，除了格式化输出当前的日期，也可以计算指定的日期和当前日期时刻之间的时差</p>
</li>
<li><p>format<br>可选属性，用于指定格式化的格式，如yyyy/MM/dd-HH:mm:ss</p>
</li>
<li><p>name<br>必填的值，该属性指定格式化日期的值，比如Date对象</p>
</li>
<li><p>nice<br>可选属性，如果为true那么将会输出指定日期和当前日期的时差，默认为false</p>
</li>
<li><p>timezone<br>可选属性，指定格式化所用的时区</p>
</li>
<li><p>var<br>可选属性，如果指定了该属性，该时间对象将放入值栈中，可以使用id代替，但是推荐使用var</p>
</li>
</ul>
<ul>
<li><strong>如果同时指定了nice=true，和format那么format将会失效</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 创建一个日期对象now，表示当前的时间 --&gt;</div><div class="line">	&lt;s:set var="now" value="new java.util.Date()"&gt;&lt;/s:set&gt;</div><div class="line">	&lt;!--  格式化当前的日期--&gt;</div><div class="line">	&lt;s:date name="#now" format="dd/MM/yyyy HH:mm:ss"/&gt;&lt;br&gt;</div></pre></td></tr></table></figure>
<h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><ul>
<li>该标签是辅助标签，用来生成一个超链接，便于查看值栈，和Stack Context中的信息。</li>
</ul>
<h3 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h3><ul>
<li>主要用于在视图上加载国际资源，使用该标签时需要指定一个name属性，该name属性为需要加载的国际化资源文件的basename</li>
</ul>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ul>
<li><p>将指定的jsp文件或者Servlet文件包含在当前的jsp页面，这个相当于<jsp:include>标签。</jsp:include></p>
</li>
<li><p>value<br>指定被包含的jsp或者Servlet文件路径</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;s:include value="success.jsp"&gt;&lt;/s:include&gt;</div></pre></td></tr></table></figure>
<h3 id="param"><a href="#param" class="headerlink" title="param"></a>param</h3><ul>
<li>param标签主要是为其他的标签提供参数的</li>
<li><p>注意value的值是使用的OGNL表达式，一定要注意，如果指定字符串要加单引号或者双引号</p>
</li>
<li><p>name<br>指定要赋值的变量名</p>
</li>
<li><p>value<br>指定变量的值</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;s:bean name="com.user.User" id="myBean" &gt;</div><div class="line">		&lt;!-- 使用param标签为其赋值 --&gt;</div><div class="line">		&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param name="age" value="22"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:bean&gt;</div></pre></td></tr></table></figure>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><ul>
<li>push标签用于将某个值放到ValueStack(值栈)中，从而更简单的访问该值，其实不将其防放置在值栈中也是可以访问，使用#即可。只有一个属性value就是需要放在栈顶的值</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;s:bean name="com.user.User" id="myBean"&gt;</div><div class="line">		&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param name="age" value="22"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:bean&gt;</div><div class="line"></div><div class="line">&lt;%-- 只有在push标签内是，被放到值栈中的对象才存在，一旦出了push标签那么就不存在了 --%&gt;</div><div class="line">	&lt;s:push value="#myBean"&gt;</div><div class="line">		&lt;s:property value="username"/&gt;</div><div class="line">		&lt;s:property value="age"/&gt;</div><div class="line">		&lt;!-- 这个可以看出值栈中有值 --&gt;</div><div class="line">		&lt;s:debug&gt;&lt;/s:debug&gt;</div><div class="line">	&lt;/s:push&gt;</div><div class="line">	&lt;!-- 这个没有myBean对象 --&gt;</div><div class="line">	&lt;s:debug&gt;&lt;/s:debug&gt;</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul>
<li><p>set标签是用来将某一个值放入指定的范围，当然也是相当于创建一个新的变量</p>
</li>
<li><p>id<br>该属性用来指定该元素的引用ID（废弃）</p>
</li>
<li><p>var<br>该属性用来指定创建的新变量的名称</p>
</li>
<li><p>value<br>用来指定变量的值，这个是使用的OGNL表达式</p>
</li>
<li><p>scope<br>该属性用来指定新变量的放置范围，可选值有page,request,session,application和action，如果没有指定该属性，则默认放在Stack Context中</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="x" value="'陈加兵'"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#x"/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>获取指定范围的值,其实相当于在指定的范围内绑定属性值，可以实现数据共享：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="x" value="'陈加兵'" scope="session"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#session.x"/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>其实set的真正的作用是变量放置在指定的范围内，如果一个属性的访问的太繁琐了，比如访问user.name,但是这个值需要频繁的使用，这时就创建一变量存放这个值，并且设定范围:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="x" value="user.name"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#x"/&gt;</div></pre></td></tr></table></figure>
<h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><ul>
<li><p>url标签用于在页面生成一个url地址，该标签的属性如下:</p>
</li>
<li><p>id<br>指定该元素的引用id，如果指定了该属性，那么在Stack Context中就会有这个id，那么就可以使用#来获取它的值</p>
</li>
<li><p>value<br>该属性用来指定生成URL地址，如果不指定该属性，那么action属性指定的Action作为URL地址</p>
</li>
<li><p>action<br>该属性用来指定生成URL地址值的action，如果不指定该属性，那么使用value属性值作为URL地址值</p>
</li>
<li><p>method<br>该属性用来指定使用action的方法</p>
</li>
<li><p>encode<br>该属性用来指定是否需要encode请求参数，默认值为true</p>
</li>
<li><p>includeParams<br>该属性用来指定是否包含请求参数，可选值为：none,get,和all默认的为none</p>
</li>
<li><p>includeContext<br>该属性指定是否需要当前上下文包含在url地址中</p>
</li>
<li><p>anchor<br>该属性指定URL的锚点</p>
</li>
<li><p>Scheme<br>该属性用来指定URL使用的协议(HTTP或者HTTPS)</p>
</li>
<li><p>namespace<br>该属性用来指定命名空间，使用action的时候指定</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;s:url value="success.jsp" includeParams="get" id="myUrl"&gt;</div><div class="line">	&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:url&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;s:url action="login"&gt;&lt;/s:url&gt;</div><div class="line">&lt;hr&gt;</div><div class="line"></div><div class="line">&lt;s:url action="login" namespace="/user" includeParams="get"&gt;</div><div class="line">	&lt;s:param name="username" value="'陈加兵'"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:url&gt;</div><div class="line"></div><div class="line">&lt;hr&gt;</div><div class="line">&lt;!-- 获取值 --&gt;</div><div class="line">&lt;s:property value="#myUrl"/&gt;</div></pre></td></tr></table></figure>
<h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><ul>
<li><p>property标签是用来在页面中输出指定值，该标签有如下属性:</p>
</li>
<li><p>id<br>指定该元素的标识（废弃）</p>
</li>
<li><p>value<br>指定需要输出的特定的值，注意这里使用的OGNL表达式，如果没有指定value属性，那么将会输出值栈中的栈顶的值</p>
</li>
<li><p>escape<br>指定是否转义输出内容中HTML，其默认值为true</p>
</li>
<li><p>default<br>指定一个默认的输出值，如果value中的值为空，那么就会默认输出这个值</p>
</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 转义标签h1，输出内容 --&gt;</div><div class="line">&lt;s:property value=<span class="string">"'&lt;h1&gt;陈加兵&lt;/h1&gt;'"</span> escape=<span class="string">"false"</span>/&gt;</div><div class="line">&lt;!-- 输出Stack Context中的内容，并且指定了默认值 --&gt;</div><div class="line">&lt;s:property value=<span class="string">"#username"</span>  <span class="keyword">default</span>=<span class="string">"输出一个默认值"</span>/&gt;</div><div class="line">&lt;!-- 输出栈顶的值 --&gt;</div><div class="line">&lt;s:property/&gt;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>数据标签最重要的就是<code>set</code>,<code>property</code>,<code>debug</code>,<code>i18n</code>这些标签，其他的了解写即可</li>
</ul>
<h2 id="控制标签"><a href="#控制标签" class="headerlink" title="控制标签"></a>控制标签</h2><ul>
<li>控制标签主要用于条件和循环等流程控制</li>
</ul>
<h3 id="if-elseif-else"><a href="#if-elseif-else" class="headerlink" title="if/elseif/else"></a>if/elseif/else</h3><ul>
<li>其中elseif允许出现多次</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="age" value="22"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:if test="#age&gt;10"&gt;</div><div class="line">	&lt;s:property value="#age+'大于10'" /&gt;</div><div class="line">&lt;/s:if&gt;</div><div class="line">&lt;s:elseif test="#age&gt;20"&gt;</div><div class="line">	&lt;s:property value="#age+'大于20'" /&gt;</div><div class="line">&lt;/s:elseif&gt;</div><div class="line">&lt;s:else&gt;</div><div class="line">	&lt;s:property value="#age+'在10与20之间'" /&gt;</div><div class="line">&lt;/s:else&gt;</div></pre></td></tr></table></figure>
<ul>
<li>并且和或的关系(&amp;&amp;,||)</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;%-- 指定begin,end获取前3个元素--%&gt;</div><div class="line">&lt;s:iterator value="#list" var="item" status="iter"&gt;</div><div class="line">	&lt;s:if test="#iter.isOdd()&amp;&amp;#iter.getIndex()&gt;0"&gt;</div><div class="line">		&lt;s:property value="#item+'---'+#iter.getIndex()"/&gt;</div><div class="line">		&lt;br&gt;</div><div class="line">	&lt;/s:if&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><ul>
<li><p>iterator标签主要用于对集合进行迭代，这里的集合包含list，Set和数组，也可以对Map集合进行迭代输出。</p>
</li>
<li><p>value<br>可选属性，该属性指定迭代的集合，如果没有指定value属性，那么就会迭代ValuStack栈顶的集合。</p>
</li>
<li><p>var<br>可选属性，该属性指定的是迭代的集合中的每一个元素，放在Stack Context中·</p>
</li>
<li><p>status<br>可选属性，该属性指定迭代对象的IteratorStatus实例存放在Stack Context中，通过这个属性可以判断当前迭代元素的属性。例如是否为最后一个，以及当前元素的索引</p>
</li>
<li><p>begin<br>可选属性，指定从迭代对象第几个元素开始迭代</p>
</li>
<li><p>end<br>可选属性，指定迭代到对象的第几个元素结束</p>
</li>
<li><p>step<br>可选属性，指定步长</p>
</li>
</ul>
<ul>
<li>如果迭代元素指定了status，那么就可以调用如下的属性查看迭代元素的当前的属性，可以调用如下的几个方法查看：<ul>
<li>int getCount()   返回当前迭代了几个元素</li>
<li>int getIndex()   返回当前迭代元素的索引</li>
<li>boolean isEven() 当前迭代元素的索引是否为偶数</li>
<li>boolean isFirst() 当前迭代元素是否为第一个元素</li>
<li>boolean isLast()  当前迭代元素是否为最后一个元素</li>
<li>boolean isOdd()  判断当前的迭代元素的索引是否为奇数</li>
</ul>
</li>
</ul>
<ul>
<li>此标签每次进行迭代的时候就会把元素放在值栈的顶部，那么我们都知道<s:property>如果不指定value属性，那么默认的就是从栈顶取元素：</s:property></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;%--指定了value属性，但是其他属性都没有，那么直接可以从栈顶取数据 --%&gt;</div><div class="line">	&lt;s:iterator value="#"&gt;</div><div class="line">		&lt;s:property/&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>指定var属性来获取迭代对象的值:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;%-- 指定var表示当前迭代对象的每一个元素--%&gt;</div><div class="line">	&lt;s:iterator value="#list" var="item"&gt;</div><div class="line">		&lt;%-- 因为var元素是放在Stack Context中，因此可以使用#取值 --%&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>指定begin，end来获取指定范围的值。</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;%-- 指定begin,end获取前3个元素--%&gt;</div><div class="line">	&lt;s:iterator value="#list" var="item" begin="0" end="2"&gt;</div><div class="line">	&lt;%-- 因为var元素是放在Stack Context中，因此可以使用#取值 --%&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<ul>
<li>指定status获取每一个迭代元素的当前状态:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;%-- 指定begin,end获取前3个元素--%&gt;</div><div class="line">	&lt;s:iterator value="#list" var="item" status="iter"&gt;</div><div class="line">		&lt;s:if test="#iter.isOdd()&amp;&amp;#iter.getIndex()&gt;0"&gt;</div><div class="line">			&lt;s:property value="#item+'---'+#iter.getIndex()"/&gt;</div><div class="line">			&lt;br&gt;</div><div class="line">		&lt;/s:if&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<ul>
<li>迭代Map</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="map" value="#&#123;'age':22,'username':'陈加兵' &#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:iterator value="#map" var="item"&gt;</div><div class="line">	获取集合中的key:&lt;s:property value="#item.key"/&gt;</div><div class="line">	获取集合中的值：&lt;s:property value="#item.value"/&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><ul>
<li><p>append标签用于将多个集合拼接起来形成一个新的集合。</p>
</li>
<li><p>var<br>拼接之后形成的新的集合，放在Stack Context中</p>
</li>
<li><p>id<br>这个和var是一样的，两个可以互换使用的，不过推荐使用var</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;%-- 新建一个集合list --%&gt;</div><div class="line">&lt;s:set var="list1" value="&#123;'陈加兵','郑元梅',22,33&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:set var="list2" value="&#123;44,55,6,99&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">&lt;s:append var="list3"&gt;</div><div class="line">	&lt;%-- 使用param标签指定要拼接的集合 --%&gt;</div><div class="line">	&lt;s:param value="#list1"&gt;&lt;/s:param&gt;</div><div class="line">	&lt;s:param value="#list2"&gt;&lt;/s:param&gt;</div><div class="line">&lt;/s:append&gt;</div><div class="line"></div><div class="line">&lt;s:iterator value="#list3" var="item"&gt;</div><div class="line">	&lt;s:property value="#item"/&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><ul>
<li><p>使用这个标签可以将字符串按照指定的分隔符分割成多个子串，临时生成的子串可以使用<s:iterator>标签迭代输出。可以这样理解：这个标签使用指定的的分隔符将字符串分割，然后这些字符串组成一个集合。</s:iterator></p>
</li>
<li><p>val<br>必选属性，该属性指定被解析的字符串</p>
</li>
<li><p>var<br>可选属性，如果指定了该属性，那么生成的Iterator对象将会以这个名称放在Stack Context中，就可以访问这个集合了。</p>
</li>
<li><p>count<br>可选属性，该属性指定生成集合中元素的个数</p>
</li>
<li><p>separator<br>必选属性，这个属性指定分隔符</p>
</li>
<li><p>converter<br>可选属性，该属性指定一个转换器，该转换器负责将集合中的每一个字符串转换成对象，通过该转换器可以将一个字符串解析成对象集合。该属性值必须是org.apache.struts2.util.IteratorGenerator.Convertere</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;%--分隔符为',',并且选取其中的前两个元素 --%&gt;</div><div class="line">	&lt;s:generator separator="," val="'陈加兵,郑元梅,chenjiabing'" var="x" count="2"&gt;&lt;/s:generator&gt;</div><div class="line"></div><div class="line">	&lt;s:iterator value="#x" var="item"&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><ul>
<li>merge这个标签和append的功能是一样的，都是将两个集合拼接在一起，但是append是将一个集合拼接在另外一个集合的末尾，但是merge是将后面一个集合的对应索引的元素添加到前面一个集合的索引所在的位置，也就是后面集合的第一个元素变成了新集合的第二个元素了。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="list1" value="&#123;'陈加兵','郑元梅'&#125;"&gt;&lt;/s:set&gt;</div><div class="line">	&lt;s:set var="list2" value="&#123;1,2&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;s:merge var="list3"&gt;</div><div class="line">		&lt;s:param value="#list1"&gt;&lt;/s:param&gt;</div><div class="line">		&lt;s:param value="#list2"&gt;&lt;/s:param&gt;</div><div class="line">	&lt;/s:merge&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;s:iterator var="item" value="#list3"&gt;</div><div class="line">		&lt;s:property value="#item"/&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="subset"><a href="#subset" class="headerlink" title="subset"></a>subset</h3><ul>
<li><p>subset标签用于取得集合的子集，形成新的集合。</p>
</li>
<li><p>count<br>可选属性，指定选取集合的子集的个数，如果不指定该属性，那么默认的就是截取全部的元素</p>
</li>
<li><p>source<br>可选属性，该属性指定源集合，如果没有指定，那么默认是从栈顶取集合</p>
</li>
<li><p>start<br>可选属性，该属性指定子集从源集合的第几个元素开始截取，默认从第一个开始(即start=0)</p>
</li>
<li><p>decider<br>可选属性，该属性有开发真决定是否选中该元素</p>
</li>
<li><p>var<br>可选属性，如果指定了该属性，那么生成Iterator对象设置成为Page范围内的属性，可以使用#attr.name获取其值，也可以替换成id，但是推荐使用var</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 创建一个集合 --&gt;</div><div class="line">	&lt;s:set var="list1" value="&#123;'陈加兵','郑元梅',1,2,3&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">	&lt;!--  指定变量为x，存储在page中，源集合为list1，截取其中的两个元素，从第二个元素开始截取 --&gt;</div><div class="line">	&lt;s:subset var="x" source="#list1" count="2" start="1"&gt;&lt;/s:subset&gt;</div><div class="line"></div><div class="line">	&lt;!-- 由于x存储在Page中，因此使用#attr.x来获取 --&gt;</div><div class="line">	&lt;s:iterator value="#attr.x" var="item"&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul>
<li><p>主要用于对集合进行排序</p>
</li>
<li><p>comparator<br>必填属性，该属性指定进行排序的实例，必须实现java.util.Comparator接口</p>
</li>
<li><p>source<br>可选属性，这是一个源集合，如果没有指定，那么就拿栈顶的集合进行排序</p>
</li>
<li><p>var<br>可选属性，如果指定了属性，那么生成的Iterator对象设置成Page范围的属性，该属性也可替换成id</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="list" value="&#123;'陈加兵','123459999+','4442555'&#125;"&gt;&lt;/s:set&gt;</div><div class="line">	&lt;!-- 创建一个实例 --&gt;</div><div class="line">	&lt;s:bean name="com.compare.Compare" id="compare"&gt;&lt;/s:bean&gt;</div><div class="line">	&lt;!-- 排序 --&gt;</div><div class="line">	&lt;s:sort comparator="#compare" source="#list" var="x"&gt;&lt;/s:sort&gt;</div><div class="line"></div><div class="line">	&lt;!-- 迭代输出 --&gt;</div><div class="line">	&lt;s:iterator var="item" value="#attr.x"&gt;</div><div class="line">		&lt;s:property value="#item" /&gt;</div><div class="line">	&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Struts标签库&quot;&gt;&lt;a href=&quot;#Struts标签库&quot; class=&quot;headerlink&quot; title=&quot;Struts标签库&quot;&gt;&lt;/a&gt;Struts标签库&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果想要在jsp页面使用struts2的标签，需要引入标签库&lt;/p
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts之OGNL使用</title>
    <link href="http://chenjiabing666.github.io/2018/04/02/Struts%E4%B9%8BOGNL%E4%BD%BF%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/02/Struts之OGNL使用/</id>
    <published>2018-04-02T03:07:39.000Z</published>
    <updated>2018-04-02T03:08:18.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OGNL的使用"><a href="#OGNL的使用" class="headerlink" title="OGNL的使用"></a>OGNL的使用</h1><h2 id="OGNL简介"><a href="#OGNL简介" class="headerlink" title="OGNL简介"></a>OGNL简介</h2><ul>
<li>OGNI是一种对象图导航语言(object graphics navigation language) ,这也是一种表达式语言，这个和EL表达式一样，但是EL表达式只能在JSTL标签库中使用，这个OGNL只能在struts标签库中使用。</li>
</ul>
<h2 id="值栈（valueStack"><a href="#值栈（valueStack" class="headerlink" title="值栈（valueStack)"></a>值栈（valueStack)</h2><ul>
<li><p>值栈就是存储Action的信息，包括其中定义的成员变量和其他的一些自己的属性，比如error,fieldError,如果想要让action中属性在值栈中显示或者获取，一定要为这些属性设置get,set方法</p>
</li>
<li><p>值栈是存储的action的栈，同时可以存储多个action，先执行的先进栈</p>
</li>
<li><p>值栈中的元素是根元素，访问值栈中的元素不需要使用<code>#</code>(#是访问非根元素的值，比如<code>#session.username</code>)</p>
</li>
<li><p>在jsp页面可以使用struts标签库<code>&lt;s:debug/&gt;</code>,查看值栈中的内容</p>
</li>
</ul>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ul>
<li><p>我们新建一个Action类，用表单传递数据请求action，最后action跳转到success.jsp页面，我们在success.jsp使用<code>&lt;s:debug&gt;</code>查看此时值栈中的数据</p>
<ul>
<li>其中的属性必须要有get，set方法</li>
</ul>
</li>
<li><p>LoginAction</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现ModelDriven接口&lt;&gt;指定的泛型为JavaBean类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user;</div><div class="line">	<span class="keyword">private</span> String tips;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTips</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> tips;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTips</span><span class="params">(String tips)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.tips=tips;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"执行execute方法"</span>);</div><div class="line">		System.out.println(<span class="keyword">this</span>.getUser().getName()+<span class="string">"------"</span>+<span class="keyword">this</span>.getUser().getPassword());</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>success.jsp页面</p>
<ul>
<li>其中要引用struts2的标签库</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>此时我们可以看到在值栈中有个user属性，并且有LoginAction</li>
</ul>
<p><img src="http://ono60m7tl.bkt.clouddn.com/valueStack.png" alt="valueStack"></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul>
<li>我们现在先接触一下<code>&lt;s:property value=&quot;&quot;&gt;</code>标签，struts2中的标签在后面再详细讲解，这个标签的意思是输出属性的值<ul>
<li>这个标签中的value属性填写的是OGNL表达式，如果我们要输出一个常量，那么我们必须使用单引号</li>
<li>引用struts2中的标签库<code>&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h3><ul>
<li><p>如果我们仍然使用上面的实例，但是我们要在success.jsp页面中使用OGNL使用显示表单传递过来的值，其中我们还输出自己的一个常量字符串</p>
</li>
<li><p>success.jsp</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"user.name"</span> <span class="attr">default</span>=<span class="string">"如果为null，输出这个字段"</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"user.password"</span> <span class="attr">default</span>=<span class="string">"如果为null，输出这个字段"</span> /&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>输出一个字符串常量: <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"'jack'"</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h3><ul>
<li><p>int  1,2,3</p>
</li>
<li><p>double   1.24d或者1.24</p>
</li>
<li><p>float  1.23f</p>
</li>
<li><p>long  122l 最后一个是字母l</p>
</li>
<li><p>BigDecimal  123b</p>
</li>
<li><p>BigInteger  123h</p>
</li>
<li><p>在其中直接输出即可:<code>&lt;s:property value=&quot;1&quot;/&gt;</code></p>
</li>
</ul>
<h3 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h3><ul>
<li>直接输出即可 <code>&lt;s:property value=&quot;true&quot;/&gt;</code></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>当需要输出一个字符串常量的时候，一定要使用单引号，否则就会默认的将其作为OGNL表达式，输出的就为空</li>
</ul>
<h2 id="集合list"><a href="#集合list" class="headerlink" title="集合list"></a>集合list</h2><ul>
<li>OGNL中的list相当于数组，其中存放的可以是任意类型的数据</li>
<li>读取的时候直接使用数组的形式读取即可，使用索引读取即可</li>
<li>我们的创建形式是使用<code>&lt;s:set&gt;</code>标签，因此这个变量不是值栈中的，需要使用<code>#</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 创建list --&gt;</div><div class="line">&lt;s:set var="list" value="&#123;1,2,3,'jack',true&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#list[0]"/&gt;&lt;br&gt;</div><div class="line">&lt;s:property value="#list[4]"/&gt;</div></pre></td></tr></table></figure>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul>
<li>使用<code>#{}</code>的形式创建，其中存放的是键值对(key-value)的形式</li>
<li>读取的方式有两种<ul>
<li>map[‘key’]</li>
<li>map.key</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="map" value="#&#123;'name':'jack','age':22&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#map['name']"/&gt;</div><div class="line">&lt;s:property value="#map.age"/&gt;</div></pre></td></tr></table></figure>
<h2 id="访问action中的属性值"><a href="#访问action中的属性值" class="headerlink" title="访问action中的属性值"></a>访问action中的属性值</h2><ul>
<li>action都是存放在值栈中，我们可以使用OGNL读取值栈中的数据</li>
<li><p>使用上面的LoginAction类，我们通过表单提交到这个LoginAction中，跳转到success.jsp页面中，那么我们就可以在success.jsp页面中访问LoginAction属性的值(前提是属性必须有get，set方法)</p>
</li>
<li><p>LoginAction中的属性是一个User对象，那么我们既可以获取这个User对象，之后在获取User对象中的数据了，这个相当于链式操作，前提还是有get，set方法</p>
</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 这里的user一定要和LoginAction中的成员变量User的对象字段相同 --&gt;</div><div class="line">User对象中的name属性：&lt;s:property value=<span class="string">"user.name"</span>/&gt;</div><div class="line">User对象中的age属性：&lt;s:property value=<span class="string">"user.age"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id=""><a href="#" class="headerlink" title="#"></a><code>#</code></h3><ul>
<li><p>值栈中的的属性称为是根属性，<code>#</code>访问的是非根属性，就不是值栈中的值，比如#session.username　相当于调用<code>ActionContext.getContext.getSession.getAttribute(&quot;username&quot;)</code></p>
</li>
<li><p>创建Map</p>
</li>
<li><p>过滤和投影</p>
</li>
</ul>
<h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><ul>
<li>在国际化文件中使用OGNL表达式，例如年龄必须在${min}到${max}之间</li>
<li>在Struts配置文件中使用OGNL表达式，例如两个Action之间进行跳转，并且附带参数</li>
</ul>
<h3 id="符号-1"><a href="#符号-1" class="headerlink" title="% 符号"></a>% 符号</h3><ul>
<li>当标签的属性为字符串类型时，计算OGNL表达式的值。</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;s:url value=<span class="string">"#map.name"</span>/&gt;</div><div class="line">&lt;br&gt;</div><div class="line">&lt;s:url value=<span class="string">"%&#123;#map.name&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号 {}"></a>大括号 {}</h3><ul>
<li><p>用来创建一个Map，其中存放的是键值对</p>
</li>
<li><p>创建一个list集合</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:set var="map" value="#&#123;'name':'jack','age':22&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;s:property value="#map['name']"/&gt;</div></pre></td></tr></table></figure>
<h3 id="in-not-in"><a href="#in-not-in" class="headerlink" title="in ,not in"></a>in ,not in</h3><ul>
<li><p>判断某一个值是否存在一个集合中，返回的是布尔值</p>
</li>
<li><p>不过经过自己测试，只有数字类型的可以判断出来，字符串不能判断出来，如果哪位能够测出来，和我说说原因</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 创建一个集合list --&gt;</div><div class="line">	&lt;s:set var="list" value="&#123;1,2,3,'jack','Tom'&#125;"&gt;&lt;/s:set&gt;</div><div class="line">	&lt;s:property value="1 in #list"/&gt;&lt;br&gt;</div><div class="line">	&lt;s:property value="1 not in #list"/&gt;&lt;br&gt;</div><div class="line">	&lt;!-- 没有结果 --&gt;</div><div class="line">	&lt;s:property value=" 'jack' in #list"/&gt;&lt;br&gt;</div></pre></td></tr></table></figure>
<h3 id="-1"><a href="#-1" class="headerlink" title="+"></a>+</h3><ul>
<li>这个和java是一样的，如果两个整数相加就执行整数相加，如果字符串相加就拼接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;s:property value=&quot;2+3&quot;/&gt;</div><div class="line">&lt;s:property value=&quot;&apos;ce&apos;+22&quot;/&gt;</div></pre></td></tr></table></figure>
<h2 id="集合的伪属性"><a href="#集合的伪属性" class="headerlink" title="集合的伪属性"></a>集合的伪属性</h2><blockquote>
<p>集合的伪属性是用来代替java集合API的方法的属性，比如迭代器的使用</p>
</blockquote>
<ul>
<li><p>List</p>
<ul>
<li>list.iterator</li>
<li>list.size</li>
</ul>
</li>
<li><p>Set</p>
<ul>
<li>set.iterator</li>
<li>set.isEmpty</li>
</ul>
</li>
<li><p>Map</p>
<ul>
<li>map.keys （map.keySet）</li>
<li>map.values  (map.values)</li>
</ul>
</li>
<li><p>Iterator</p>
<ul>
<li>Iterator.next</li>
<li>Iterator.hasNext</li>
</ul>
</li>
<li><p>Enumeration</p>
<ul>
<li>enum.next</li>
<li>enum.hasNext</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;%--创建列表 --%&gt;</div><div class="line">&lt;s:set var="list" value="&#123;1,'陈加兵'&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">&lt;%-- 创建Map --%&gt;</div><div class="line">&lt;s:set var="map" value="#&#123;'one':'陈加兵','tow':'郑元梅'&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">&lt;%-- 创建数组 --%&gt;</div><div class="line">&lt;s:set var="number" value="new String[]&#123;'aaa','bbb','ccc']"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;%--  获取list的迭代器对象 --%&gt;</div><div class="line">&lt;s:set var="iter" value="#list.iterator"&gt;&lt;/s:set&gt;</div><div class="line">list的大小:&lt;s:property value="#list.size"/&gt;</div><div class="line">&lt;s:if test="#iter.hasNext"&gt;</div><div class="line">	list中的第一个元素的值:&lt;s:property value="#iter.next"/&gt;</div><div class="line">&lt;/s:if&gt;</div><div class="line">&lt;hr&gt;</div><div class="line"></div><div class="line">&lt;%-- #map.keys返回的是set类型，然后使用迭代器输出即可 --%&gt;</div><div class="line">&lt;s:property value="#map.keys.iterator.next" default="NULL"/&gt;</div><div class="line">&lt;s:property value="#map.values"/&gt;</div></pre></td></tr></table></figure>
<h2 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h2><ul>
<li><p>在OGNL中，投影是对一个集合中对每一个元素调用相同的方法，或者抽取相同的属性，并将一个结果保存为一个新的集合。</p>
</li>
<li><p>下面的例子是将集合list中的元素转换成字符串</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%--创建列表 --%&gt;</div><div class="line">&lt;s:set var="list" value="&#123;1,'陈加兵'&#125;"&gt;&lt;/s:set&gt;</div><div class="line">&lt;%-- 这个&#123;#&#125;首先会取list中的每一个元素然后赋值给tihs，接着调用toString方法转换为字符串 --%&gt;</div><div class="line">&lt;s:property value="#list.&#123;#this.toString()&#125;"/&gt;</div></pre></td></tr></table></figure>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><ul>
<li>在OGNL中使用表达式从集合中选择某一些元素，并将这些元素保存到新的集合中</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%--创建列表 --%&gt;</div><div class="line">&lt;s:set var="list" value="&#123;1,2,3&#125;"&gt;&lt;/s:set&gt;</div><div class="line"></div><div class="line">&lt;%-- 选取大于2的元素组成一个新的集合 --%&gt;</div><div class="line">&lt;s:property value="#list.&#123;?#this&gt;2&#125;"/&gt;</div></pre></td></tr></table></figure>
<h2 id="N-语法"><a href="#N-语法" class="headerlink" title="[N]语法"></a>[N]语法</h2><ul>
<li><p>我们知道一次请求值栈中可以存放两个或者多个action(只需要设置result跳转类型为chain即可完成在action之间的跳转)，那么我们一般取值栈中的值默认是获取栈顶的action，但是如果有多个action呢，此时我们需要获取其他action中的数据，这下就要用到<code>[N]</code>语法了</p>
</li>
<li><p><code>[N].propertyName</code>可以用来指定从值栈中的从上向下数位置N的action的属性值，N从事0开始的。</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>假设我们有两个Action，一个是SimpleAction，一个是LoginAction(上面的，有一个属性为user)，我们在在配置的时候，发出请求给SimpleAction，之后跳转到LoginAction(result的type类型为chain即可），之后跳转到success.jsp，那么此时的值栈中的action就有两个了，栈顶的是SimpleAction，第二个是LoginAction。<ul>
<li>我们想要获取LoginAction属性user的值，在值栈中的位置是第二个，那么此时使用<code>[1].propertName</code></li>
</ul>
</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User对象中的name:&lt;s:property value=<span class="string">"[1].user.name"</span>/&gt;</div><div class="line">User对象中的age：&lt;s:property value=<span class="string">"[1].user.age"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="top-语法"><a href="#top-语法" class="headerlink" title="top 语法"></a>top 语法</h2><ul>
<li>我们知道[N]语法中，如果想要访问栈顶的action属性使用<code>[0].propertyName</code>，我们也可以使用top，直接<code>top.propertyName</code>即可</li>
</ul>
<h2 id="Struts2的命名对象"><a href="#Struts2的命名对象" class="headerlink" title="Struts2的命名对象"></a>Struts2的命名对象</h2><ul>
<li><p>这些对象都不是值栈中的数据，因此需要使用<code>#</code>来获取</p>
</li>
<li><p><code>parameters</code><br>用来访问请求参数，比如<code>#parameters.name</code>, <code># parameters [‘name’]</code>相当与<code>request.getParameters(“name”)</code></p>
</li>
<li><p><code>request</code><br>用来访问request的属性，比如<code>#request.name</code>或者<code># request [‘name’]</code>  相当于request,getAttrubute(“name”)</p>
</li>
<li><p><code>session</code><br>用来访问session属性，例如 <code>#session.name</code>或者<code>#session[‘name’]</code>相当于 session.getAttribute(“name”)</p>
</li>
<li><p><code>application</code><br>用来访问application属性，比如:<code>#application.name</code>相当于application.getAttribute(“name”)</p>
</li>
<li><p><code>attr</code><br>用来访问PageContext，如果PageContext不可用，则一次搜索request,session,application对象</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">	//设置属性</div><div class="line">	request.setAttribute("login","true");</div><div class="line">	session.setAttribute("regist", "false");</div><div class="line">	application.setAttribute("auto", "true");</div><div class="line">%&gt;</div><div class="line"></div><div class="line">获取的请求参数中的name的值:&lt;s:property value="#parameters.name"/&gt;&lt;br&gt;</div><div class="line">获取request中的login属性:&lt;s:property value="#request.login"/&gt;&lt;br&gt;</div><div class="line">获取session中的regist属性:&lt;s:property value="#session.regist"/&gt;&lt;br&gt;</div><div class="line">获取application中的auto属性:&lt;s:property value="#application.auto"/&gt;</div><div class="line">&lt;s:debug&gt;&lt;/s:debug&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OGNL的使用&quot;&gt;&lt;a href=&quot;#OGNL的使用&quot; class=&quot;headerlink&quot; title=&quot;OGNL的使用&quot;&gt;&lt;/a&gt;OGNL的使用&lt;/h1&gt;&lt;h2 id=&quot;OGNL简介&quot;&gt;&lt;a href=&quot;#OGNL简介&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts之配置拦截器</title>
    <link href="http://chenjiabing666.github.io/2018/04/02/Struts%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://chenjiabing666.github.io/2018/04/02/Struts之配置拦截器/</id>
    <published>2018-04-02T03:06:24.000Z</published>
    <updated>2018-04-02T03:07:10.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struts2之配置拦截器"><a href="#struts2之配置拦截器" class="headerlink" title="struts2之配置拦截器"></a>struts2之配置拦截器</h1><h2 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h2><ul>
<li><p>java里的拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行，同时也提供了一种可以提取action中可重用部分的方式。在AOP（Aspect-Oriented Programming）中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。</p>
</li>
<li><p>拦截器是可插拔式的，一旦出现了问题，可以不用改变软件的很多代码就可以实现修复，给维护工作带来方便，其实过滤器也是这样的。</p>
</li>
<li><p>Struts2其实就实现了很多的拦截器，可以在struts-default.xml中看到定义很多的拦截器，其中向类型转换，文件上传都是通过拦截器实现的。</p>
</li>
<li><p>Struts2拦截器实现原理与Servlet过滤器实现原理类似，它以链式执行，对真正要执行的方法（execute（））进行拦截。首先执行Action配置的拦截器，在Action和Result执行之后，拦截器会再次执行（与先前调用的顺序相反），在此链式执行的过程中，每一个拦截器都可以直接返回，从而终止余下的拦截器、Action及Result的执行。</p>
</li>
</ul>
<h2 id="拦截器的作用"><a href="#拦截器的作用" class="headerlink" title="拦截器的作用"></a>拦截器的作用</h2><ul>
<li>拦截器适合封一些通用处理，便于重复利用，比如日志的记录，访问权限的检查，事务处理等，拦截器通过配置方式调用，因此使用方法比较灵活，便于维护和扩展</li>
</ul>
<h2 id="拦截器的配置元素"><a href="#拦截器的配置元素" class="headerlink" title="拦截器的配置元素"></a>拦截器的配置元素</h2><ul>
<li><p><code>&lt;interceptors&gt;</code><br>用来定义拦截器，所有的拦截器和拦截器栈都是在此元素中定义的，可以包含子元素<interceptor>,<interceptor-stack></interceptor-stack></interceptor></p>
</li>
<li><p><code>&lt;Interceptor&gt;</code><br>用来定义拦截器，需要指定两个属性，name属性指定了拦截器的名字，class指定了拦截器的实现的类。这个是在<interceptors>下定义的</interceptors></p>
</li>
<li><p><code>&lt;interceptor-stack&gt;</code><br>用来定义拦截器栈，其中的name属性指定了拦截器栈的名称。另外在此元素下可以指定<interceptor-ref>引入其他的拦截器或者拦截器栈</interceptor-ref></p>
</li>
<li><p><code>&lt;interceptor-ref&gt;</code><br>用来引用其他的拦截器或者拦截器栈，name属性指定了拦截器或者拦截栈的名称</p>
</li>
<li><p><code>&lt;param&gt;</code><br>用来为拦截器指定参数，可以作为<interceptor>或者<interceptor-ref>的子元素。并且可以定义多个。其中的name属性指定了参数的名称</interceptor-ref></interceptor></p>
</li>
<li><p><code>&lt;default-interceptor-ref&gt;</code><br>将某一个拦截器定义为默认拦截器</p>
</li>
</ul>
<h2 id="内建的拦截器"><a href="#内建的拦截器" class="headerlink" title="内建的拦截器"></a>内建的拦截器</h2><ul>
<li><p>struts2中提供了许多内建的拦截器，在struts-core.jar中，我们只需要在struts.xml中引用这个内建的拦截器即可</p>
</li>
<li><p>比如我们在实现文件上传的时候，使用的就是内建的拦截器</p>
</li>
<li><p>内建的拦截器使用的很少，通常我们都是使用自定义的拦截器，比如验证访问权限的拦截器</p>
</li>
</ul>
<h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><ul>
<li>实现自定义的拦截器有两种方法，一种是实现接口，一种是继承</li>
</ul>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul>
<li>我们需要将表单传递过来的数据转换成大写的，再传递给action</li>
</ul>
<h3 id="实现接口-com-opensymphony-xwork2-interceptor-Interceptor"><a href="#实现接口-com-opensymphony-xwork2-interceptor-Interceptor" class="headerlink" title="实现接口(com.opensymphony.xwork2.interceptor.Interceptor)"></a>实现接口(com.opensymphony.xwork2.interceptor.Interceptor)</h3><h4 id="接口中的方法"><a href="#接口中的方法" class="headerlink" title="接口中的方法"></a>接口中的方法</h4><ul>
<li><p><code>void init()</code><br>初始化拦截器执行的方法</p>
</li>
<li><p><code>String intercept(ActionInvocation invocation) throws Exception</code><br>实现拦截器逻辑的主要方法。</p>
<ul>
<li><p><code>ActionInvocation</code>包含了Action的引用，因此使用这个对象可以对Action进行相应的操作，比如可以获取和设置Action类的成员变量</p>
</li>
<li><p><code>ActionInvocation</code>包含了Action的引用，可以调用其中的<code>invoke()</code>方法继续调用下一个拦截器，如果后面没有拦截器了，那么就会执行Action中对应的映射方法，如果有，那么就会继续执行下一个拦截器，直到执行完全部的拦截器才会执行对应的映射方法</p>
</li>
<li><p>invoke()方法将拦截器的作用分成了两个部分，在调用invoke()之前的实在Action方法执行之前的逻辑，在之后的代码是在Action执行result，跳转到指定视图之后执行的逻辑</p>
</li>
<li><p>这个方法返回的是一个字符串，对应的也是结果视图，如果在其中没有调用invoke()方法，那么返回的字符串就作为Action跳转的视图，因此在<result>一定要定义这个对应的视图。如果调用了invoke()方法，那么返回的字符串就会失效，就会以Action中方法返回的字符串为主</result></p>
</li>
</ul>
</li>
<li><p><code>void destroy()</code> 销毁拦截器开启的资源</p>
</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>拦截器类<ul>
<li>这里并没有在init和destroy方法中写什么逻辑，可以根据实际情况来定义其中的逻辑</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.jsnu.struts2.controller.SimpleAction;</div><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionInvocation;</div><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.interceptor.Interceptor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Object object=invocation.getAction();  <span class="comment">//获取当前调用拦截器的Action类的对象</span></div><div class="line">		<span class="comment">//如果不为null，就可以获取其中的属性，否则空指针</span></div><div class="line">		<span class="keyword">if</span> (object!=<span class="keyword">null</span>) &#123;</div><div class="line">			SimpleAction simpleAction=(SimpleAction)object;</div><div class="line">			<span class="comment">//将User属性全部转换成大写字母</span></div><div class="line">			simpleAction.getUser().setName(simpleAction.getUser().getName().toUpperCase());</div><div class="line">			simpleAction.getUser().setPassword(simpleAction.getUser().getPassword().toUpperCase());</div><div class="line">			String result=invocation.invoke();   <span class="comment">//调用下一个拦截器</span></div><div class="line">			System.out.println(<span class="string">"成功跳转视图后执行的逻辑"</span>);</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="继承AbstractInterceptor（推荐）"><a href="#继承AbstractInterceptor（推荐）" class="headerlink" title="继承AbstractInterceptor（推荐）"></a>继承AbstractInterceptor（推荐）</h3><ul>
<li>继承<code>AbstractInterceptor</code>抽象类，里面只有一个抽象方法<code>String intercept(ActionInvocation invocation)</code>，只需要实现这个方法即可，如果你需要初始化和销毁，那么也可以覆盖其中的init()和destroy()方法</li>
<li><p>继承抽象类的方式比实现接口对一个类的更加简洁，对这个类的污染更加小</p>
</li>
<li><p>其中的方法逻辑还是和上面的一样</p>
</li>
<li><p>还是完成上面的需求，把传递的请求参数转换成大写字母</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.jsnu.struts2.controller.SimpleAction;</div><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionInvocation;</div><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.interceptor.AbstractInterceptor;</div><div class="line"><span class="comment">//继承类AbstractInterceptor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInterceptorTest</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Object object = invocation.getAction(); <span class="comment">// 获取当前调用拦截器的Action类的对象</span></div><div class="line">		<span class="comment">// 如果不为null，就可以获取其中的属性，否则空指针</span></div><div class="line">		<span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</div><div class="line">			SimpleAction simpleAction = (SimpleAction) object;</div><div class="line">			<span class="comment">// 将User属性全部转换成大写字母</span></div><div class="line">			simpleAction.getUser().setName(</div><div class="line">					simpleAction.getUser().getName().toUpperCase());</div><div class="line">			simpleAction.getUser().setPassword(</div><div class="line">					simpleAction.getUser().getPassword().toUpperCase());</div><div class="line">			String result = invocation.invoke(); <span class="comment">// 调用下一个拦截器</span></div><div class="line">			System.out.println(<span class="string">"成功跳转视图后执行的逻辑"</span>);</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><ul>
<li><p>因为struts2的很多功能都要依赖内建的拦截器，比如表单传值。这一系列的拦截器都定义在一个拦截器栈中，如果在一个<action>中引用了拦截器，那么这拦截器就会被覆盖，因此一定要在自定义的拦截器<strong>之前</strong>定义默认的拦截器栈<code>&lt;interceptor-ref name=&quot;defaultStack&quot;&gt;&lt;/interceptor-ref&gt;</code></action></p>
</li>
<li><p>配置拦截器只需要在<package>下定义拦截器即可，如果哪个action想要引用拦截器，使用<code>&lt;interceptor-ref &gt;</code>引用已经定义好的拦截器即可</package></p>
</li>
<li><p><strong>一个action中可以引用多个拦截器，在上面配置的拦截器先执行，因此默认的拦截器栈一定要在最上面</strong></p>
</li>
</ul>
<ul>
<li>在struts.xml中配置上面我们自定义的拦截器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--  定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 实现接口的拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.TestInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 继承类的 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.AbstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 在使用了自定的拦截器之后，那么系统默认的拦截器栈将会失去作用，因此这里需要重新指定拦截器栈--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 引用自定义的拦截器，在上面要定义	 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置拦截器栈"><a href="#配置拦截器栈" class="headerlink" title="配置拦截器栈"></a>配置拦截器栈</h2><ul>
<li><p>如果一个action中的需要用到的拦截器很多，或者同时引用几个相同的拦截器的action很多，那么我们此时在action一个一个的引用拦截器效率太低，此时我们就需要将这些拦截器定义在一个拦截器栈中，直接在action中引用了拦截器栈即可。</p>
</li>
<li><p>直接使用<interceptors>标签中使用<interceptor-stack name="">定义即可</interceptor-stack></interceptors></p>
</li>
<li><p>拦截器栈中的拦截器一定要在上面定义过的，否则将会引用出错</p>
</li>
<li><p>拦截器栈中的拦截器引用是有顺序的，在上面的拦截器最先执行</p>
</li>
<li><p>我们把上面自定义的两个拦截器放在拦截器栈中,并在action中引用拦截器栈，注意此时的默认的<code>default-stack</code>还是要放在最上面</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--  定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 实现接口的拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.TestInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 继承类的 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.AbstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 自定拦截器栈，其中引用了上面的两个拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 引用自定义的拦截器，在上面要定义 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 在使用了自定的拦截器之后，那么系统默认的拦截器栈将会失去作用，因此这里需要重新指定拦截器栈--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><ul>
<li>拦截器中还可以包含其他的拦截器栈，那么此时我们就可以将struts2中内建的拦截器放在自己的拦截器栈顶，那么就不用在每个action中引用了，直接引用这个拦截器栈即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--  定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 实现接口的拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.TestInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 继承类的 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.AbstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 自定拦截器栈，其中引用了上面的两个拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 在使用了自定的拦截器之后，那么系统默认的拦截器栈将会失去作用，因此这里需要重新指定拦截器栈--&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line"></div><div class="line">				<span class="comment">&lt;!-- 引用自定义的拦截器，在上面要定义 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="自定义默认的拦截器栈"><a href="#自定义默认的拦截器栈" class="headerlink" title="自定义默认的拦截器栈"></a>自定义默认的拦截器栈</h2><ul>
<li><p>在一个包中定义一个默认的拦截器栈后(使用<default-interceptor-ref>定义)，那么当<action>下没有显式的配置拦截器的时候，那么此时就会默认使用自定义的默认的拦截器或者默认的拦截器栈。</action></default-interceptor-ref></p>
</li>
<li><p>一个包中只能定义一个默认的拦截器，如果想要定义多个拦截器可以使用拦截器栈，定义一个默认的拦截器栈即可解决。</p>
</li>
<li><p>在定义了默认的拦截器之后一定要在每一个action都定义系统默认的拦截器栈defaultStack,前面已经说过如果action定义了拦截器(这里虽然不是显式的定义，但是实际上是定义了),那么就会失去defaultStack的作用，其实我们需要很多defaultStack的功能，因此还是要定义的。</p>
</li>
<li><p>比如登录检查的拦截器，这个是每一个action都需要用到的，那么我们可以设置一个默认的拦截器栈，栈顶引用的是struts2内建的默认的拦截器栈</p>
</li>
<li><p>使用<default-interceptor-ref name=""></default-interceptor-ref> 即可定义</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--  定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 实现接口的拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.TestInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 继承类的 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.AbstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"></div><div class="line">			<span class="comment">&lt;!-- 自定拦截器栈，其中引用了上面的两个拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 在使用了自定的拦截器之后，那么系统默认的拦截器栈将会失去作用，因此这里需要重新指定拦截器栈--&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 引用自定义的拦截器，在上面要定义 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"abstractInterceptorTest"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"testInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 定义默认的拦截器栈，其中引用了上面定义的拦截器栈 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置拦截方法的拦截器"><a href="#配置拦截方法的拦截器" class="headerlink" title="配置拦截方法的拦截器"></a>配置拦截方法的拦截器</h2><ul>
<li><p>一般我们的Action类中有很多的方法，但是我们在使用动态调用的时候会调用其中不同的方法，如果不想Action类中的某个方法不被拦截，此时就需要使用拦截方法的拦截器</p>
</li>
<li><p>其中可以设置拦截的方法，也可以设置不拦截的方法</p>
</li>
</ul>
<h3 id="自定义拦截器类"><a href="#自定义拦截器类" class="headerlink" title="自定义拦截器类"></a>自定义拦截器类</h3><ul>
<li>继承MethodFilterInterceptor</li>
<li>其中的方法doIntercept是在执行其中指定方法之前执行，和前面的逻辑一样，也有invoke方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionInvocation;</div><div class="line"><span class="keyword">import</span> com.opensymphony.xwork2.interceptor.MethodFilterInterceptor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleActionInteceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"拦截方法的拦截器起了作用"</span>);</div><div class="line">		String result=invocation.invoke();</div><div class="line">		System.out.println(<span class="string">"执行之后"</span>);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="struts中配置"><a href="#struts中配置" class="headerlink" title="struts中配置"></a>struts中配置</h3><ul>
<li><code>&lt;param name=&quot;excludeMethods&quot;&gt;login&lt;/param&gt;</code> 用来定义不拦截的方法</li>
<li><p><code>&lt;param name=&quot;includeMethods&quot;&gt;regist&lt;/param&gt;</code> 用来定义拦截的方法，如果有多个使用逗号隔开</p>
</li>
<li><p>这里使用的是动态调用的<code>method</code>的，但是我们也可以使用 <code>action!方法名</code></p>
</li>
<li><p><strong>假设我们的项目名称为web1，并且把method=“”去掉，那么我们开启<code>action!方法名</code>进行调用，具体方法前面有介绍，开启之后，我们在地址栏输入  <code>http://localhost:8080/web1/simple.regist</code>,将会成功被拦截器拦截器，但是我们输入<code>http://localhost:8080/web1/simple.login</code>，拦截器不起作用</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--  定义拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 配置拦截方法的拦截器 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"simpleMethod"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.Interceptor.SimpleActionInteceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span> <span class="attr">method</span>=<span class="string">"regist"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 在使用了自定的拦截器之后，那么系统默认的拦截器栈将会失去作用，因此这里需要重新指定拦截器栈--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"simpleMethod"</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 定义不拦截login方法 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">				<span class="comment">&lt;!-- 定义需要拦截器的方法 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"includeMethods"</span>&gt;</span>regist<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;struts2之配置拦截器&quot;&gt;&lt;a href=&quot;#struts2之配置拦截器&quot; class=&quot;headerlink&quot; title=&quot;struts2之配置拦截器&quot;&gt;&lt;/a&gt;struts2之配置拦截器&lt;/h1&gt;&lt;h2 id=&quot;什么是拦截器&quot;&gt;&lt;a href=&quot;#什么是
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>JDBC干货三</title>
    <link href="http://chenjiabing666.github.io/2018/04/02/JDBC%E5%B9%B2%E8%B4%A7%E4%B8%89/"/>
    <id>http://chenjiabing666.github.io/2018/04/02/JDBC干货三/</id>
    <published>2018-04-02T03:04:31.000Z</published>
    <updated>2018-04-02T03:05:10.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC干货三"><a href="#JDBC干货三" class="headerlink" title="JDBC干货三"></a>JDBC干货三</h1><h2 id="生成get-set方法的快捷键"><a href="#生成get-set方法的快捷键" class="headerlink" title="生成get,set方法的快捷键"></a>生成get,set方法的快捷键</h2><ol>
<li>alt+shift+s</li>
<li>r</li>
<li>alt+a  a松手 alt不松手  按o   最后回车</li>
</ol>
<h2 id="eclipse中生成toString方法的快捷键"><a href="#eclipse中生成toString方法的快捷键" class="headerlink" title="eclipse中生成toString方法的快捷键"></a>eclipse中生成toString方法的快捷键</h2><ul>
<li>alt+shift+o   回车</li>
</ul>
<h2 id="数据库操作和对象的关系"><a href="#数据库操作和对象的关系" class="headerlink" title="数据库操作和对象的关系"></a>数据库操作和对象的关系</h2><ul>
<li><p>因为数据库中查询的数据比较零散，需要通过对象的形式把数据封装起来</p>
</li>
<li><p>这种封装数据的对象通常称为<code>javaBean</code></p>
</li>
<li><p>以后项目开发，基本上有什么表在代码中就会创建相应的对象，表中有什么字段，对象中就有什么属性</p>
</li>
</ul>
<h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><ul>
<li>俗称简单的java对象</li>
</ul>
<p>-具备如下的三个特点</p>
<pre><code>- 私有属性
- 无参构造
- 为属性提供get，set方法
</code></pre><h2 id="Statement和PreparedStatement应用场景"><a href="#Statement和PreparedStatement应用场景" class="headerlink" title="Statement和PreparedStatement应用场景"></a>Statement和PreparedStatement应用场景</h2><ul>
<li>通常DDL使用Statement</li>
<li><p>通常DML 和DQL使用PreparedStatement</p>
</li>
<li><p>只有需要传入参数的就要使用PreparedStatent</p>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li><p>我们将数据库中的表和JavaBean相对应实现了crud操作</p>
</li>
<li><p>使用了PreparedStatement对象操作数据库</p>
</li>
</ul>
<h3 id="JavaBean对象"><a href="#JavaBean对象" class="headerlink" title="JavaBean对象"></a>JavaBean对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">private</span> String title;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> price;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.title = title;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Item [id="</span> + id + <span class="string">", title="</span> + title + <span class="string">", price="</span> + price</div><div class="line">				+ <span class="string">", num="</span> + num + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="crud操作"><a href="#crud操作" class="headerlink" title="crud操作"></a>crud操作</h3><ul>
<li>传入的参数全部都是JavaBean对象</li>
<li><strong>其中的sql语句不能有中的占位符部分不能有空格，否则可能会出现错误</strong></li>
<li>这里使用的是前一篇讲的数据库工具类终结版（使用了DBCP连接池),详情请看前一篇的文章</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 插入数据，传入JavaBean对象作为参数</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">		Connection connection = <span class="keyword">null</span>;</div><div class="line">		PreparedStatement statement = <span class="keyword">null</span>; <span class="comment">// 创建预处理对象</span></div><div class="line">		ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">			String sql = <span class="string">"insert into t_item(id,title,price,num) values(?,?,?,?)"</span>;</div><div class="line">			statement = connection.prepareStatement(sql);</div><div class="line">			statement.setInt(<span class="number">1</span>, item.getId());</div><div class="line">			statement.setString(<span class="number">2</span>, item.getTitle()); <span class="comment">// 为预处理对象中的占位符赋值</span></div><div class="line">			statement.setInt(<span class="number">3</span>, item.getPrice());</div><div class="line">			statement.setInt(<span class="number">4</span>, item.getNum());</div><div class="line">			<span class="keyword">int</span> row = statement.executeUpdate();</div><div class="line">			System.out.println(row);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 查询数据，封装在JavaBean中</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">		ArrayList&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();</div><div class="line">		Connection connection = <span class="keyword">null</span>;</div><div class="line">		PreparedStatement statement = <span class="keyword">null</span>; <span class="comment">// 创建预处理对象</span></div><div class="line">		ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">			String sql = <span class="string">"select * from t_item where price&gt;100"</span>;</div><div class="line">			statement = connection.prepareStatement(sql);</div><div class="line">			resultSet = statement.executeQuery();</div><div class="line">			<span class="keyword">while</span> (resultSet.next()) &#123;</div><div class="line">				String title = resultSet.getString(<span class="string">"title"</span>);</div><div class="line">				<span class="keyword">int</span> price = resultSet.getInt(<span class="string">"price"</span>);</div><div class="line">				<span class="keyword">int</span> num = resultSet.getInt(<span class="string">"num"</span>);</div><div class="line"></div><div class="line">				Item item = <span class="keyword">new</span> Item();</div><div class="line">				item.setNum(num);</div><div class="line">				item.setPrice(price);</div><div class="line">				item.setTitle(title);</div><div class="line">				items.add(item);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> items;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//更新操作，传入JavaBean对象，只需要将要更新的条件封装进去即可</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">		Connection connection = <span class="keyword">null</span>;</div><div class="line">		PreparedStatement statement = <span class="keyword">null</span>; <span class="comment">// 创建预处理对象</span></div><div class="line">		ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">			String sql = <span class="string">"update  t_item set title=?,num=?,price=? where id=?"</span>;</div><div class="line">			statement = connection.prepareStatement(sql);</div><div class="line">			<span class="comment">//设置其中的占位符的值</span></div><div class="line">			statement.setString(<span class="number">1</span>, item.getTitle());</div><div class="line">			statement.setInt(<span class="number">2</span>, item.getNum());</div><div class="line">			statement.setInt(<span class="number">3</span>, item.getPrice());</div><div class="line">			statement.setInt(<span class="number">4</span>, item.getId());</div><div class="line">			<span class="keyword">int</span> row = statement.executeUpdate();</div><div class="line">			System.out.println(row);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 删除的数据，其中参数传入的还是JavaBean对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Item item)</span> </span>&#123;</div><div class="line">		Connection connection = <span class="keyword">null</span>;</div><div class="line">		PreparedStatement statement = <span class="keyword">null</span>; <span class="comment">// 创建预处理对象</span></div><div class="line">		ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">			String sql = <span class="string">"delete from t_item where id=?"</span>;</div><div class="line">			statement = connection.prepareStatement(sql);</div><div class="line">			statement.setInt(<span class="number">1</span>, item.getId());</div><div class="line">			<span class="keyword">int</span> row = statement.executeUpdate();</div><div class="line">			System.out.println(row);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><ul>
<li>因为类似的sql语句执行，每一个次都需要和数据库服务器进行数据交互，多次交互会浪费资源，并且耗时，可以使用批量</li>
</ul>
<h3 id="Statement执行批量操作"><a href="#Statement执行批量操作" class="headerlink" title="Statement执行批量操作"></a>Statement执行批量操作</h3><ul>
<li><p><strong>需要写多个重复的sql语句，只是其中的想用批量的内容不同，比较繁琐</strong><br>-最后将这些sql语句中添加到批量操作中</p>
<ul>
<li><code>statement.addBatch(sql);</code></li>
</ul>
</li>
<li><p>添加到批量操作之后，就开始执行批量方法了</p>
<ul>
<li><code>statement.executeBatch();</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStatement</span><span class="params">()</span> </span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	Statement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">		statement = connection.createStatement(); <span class="comment">// 创建Statement语句对象</span></div><div class="line">		String sql1 = <span class="string">"insert into t_item(id,title) values(100,'asaa')"</span>;</div><div class="line">		String sql2 = <span class="string">"insert into t_item(id,title) values(101,'asaa')"</span>;</div><div class="line">		String sql3 = <span class="string">"insert into t_item(id,title) values(102,'asaa')"</span>;</div><div class="line"></div><div class="line">		<span class="comment">// 添加批量操作</span></div><div class="line">		statement.addBatch(sql1);</div><div class="line">		statement.addBatch(sql2);</div><div class="line">		statement.addBatch(sql3);</div><div class="line">		<span class="comment">// 执行批量操作</span></div><div class="line">		statement.executeBatch();</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><ul>
<li><strong>只需要写一个条sql语句，其中要批量的内容使用占位符即可</strong></li>
<li><p>设置占位符的内容，将其添加到批量中，再重新设置，这样的好处就是减少了重复的sql语句了</p>
<ul>
<li><code>statement.addBatch()</code></li>
</ul>
</li>
<li><p>最后直接执行批量操作即可</p>
<ul>
<li><code>statement.executeBatch();</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreparedStatement</span><span class="params">()</span> </span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">		String sql = <span class="string">"insert into t_item(id,title) values(?,?)"</span>;</div><div class="line"></div><div class="line">		statement = connection.prepareStatement(sql);</div><div class="line">		statement.setInt(<span class="number">1</span>, <span class="number">200</span>);</div><div class="line">		statement.setString(<span class="number">2</span>, <span class="string">"联想电脑"</span>);</div><div class="line">		statement.addBatch(); <span class="comment">// 添加上面的数据到Batch中</span></div><div class="line"></div><div class="line">		statement.setInt(<span class="number">1</span>, <span class="number">201</span>);</div><div class="line">		statement.setString(<span class="number">2</span>, <span class="string">"华硕笔记本"</span>);</div><div class="line">		statement.addBatch(); <span class="comment">// 添加上面的数据到Batch中</span></div><div class="line"></div><div class="line">		statement.setInt(<span class="number">1</span>, <span class="number">202</span>);</div><div class="line">		statement.setString(<span class="number">2</span>, <span class="string">"海尔洗衣机"</span>);</div><div class="line">		statement.addBatch(); <span class="comment">// 添加上面的数据到Batch中</span></div><div class="line"></div><div class="line">		statement.executeBatch(); <span class="comment">// 执行批量操作</span></div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h4><ul>
<li><p>注意：addBatch()其中的数量是有限的，如果存放的批量操作太多，那么会造成内存溢出，因此我们应该当其中批量操作的数量达到一定值的时候先执行一次，然后清除执行完的操作即可(<code>clearBatch()</code>)</p>
</li>
<li><p>批量操作的时候如果批量操作的数量太多的话，肯定会造成内存溢出，这个时候最好的办法就是当数量达到一定数量时候就执行，然后将其中的已经执行完成的清除即可</p>
</li>
<li><p>下面是向表中插入有100条数据，我们每20条插入一次，这样就可以避免内存的溢出</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">		String sql = <span class="string">"insert into t_v(name) values(?)"</span>;</div><div class="line">		statement=connection.prepareStatement(sql);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</div><div class="line">			statement.setString(<span class="number">1</span>, <span class="string">"name"</span>+(i+<span class="number">1</span>));</div><div class="line">			statement.addBatch();</div><div class="line">			<span class="comment">//为了避免内存溢出，当批量操作数量达到一定值时先执行一次，在向其中添加</span></div><div class="line">			<span class="comment">//每二十次添加一次</span></div><div class="line">			<span class="keyword">if</span> (i%<span class="number">20</span>==<span class="number">0</span>) &#123;</div><div class="line">				statement.executeBatch();   <span class="comment">//执行批量操作</span></div><div class="line">				statement.clearBatch();  <span class="comment">//清除已经执行过的</span></div><div class="line">			&#125;</div><div class="line">			statement.executeBatch();   <span class="comment">//为了避免有剩余的，把剩下的执行掉</span></div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul>
<li>要求： 在控制台输入页数(n)，和每页显示的数量(m)</li>
<li><p>分析： 我们知道sql语句中的<code>limit ?,?</code>，第一个参数表示的是跳过的条数，第二个参数是每页显示的条数，那么此时我们限定显示第n页，每页显示m条，那么此时的跳过的条数就是<code>(n-1)*m</code>,因此此时的查询语句就是:     <code>select * from table_name limit (n-1)*m,m;</code></p>
</li>
<li><p>代码如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLimit</span><span class="params">()</span></span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	Scanner scanner=<span class="keyword">new</span> Scanner(System.in);   <span class="comment">//控制台输入</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">		String sql = <span class="string">"select * from t_v limit ?,?"</span>;</div><div class="line">		statement=connection.prepareStatement(sql);</div><div class="line"></div><div class="line">		<span class="comment">// n页，每页m条    limit (n-1)*m m</span></div><div class="line">		System.out.println(<span class="string">"第几页："</span>);</div><div class="line">		<span class="keyword">int</span> n=Integer.parseInt(scanner.nextLine());   <span class="comment">//页数,控制台读取的是字符串，因此这里需要转换</span></div><div class="line">		System.out.println(<span class="string">"每页的条数"</span>);</div><div class="line">		<span class="keyword">int</span> m=Integer.parseInt(scanner.nextLine());   <span class="comment">//每页显示的条数</span></div><div class="line"></div><div class="line">		<span class="comment">//设置占位符</span></div><div class="line">		statement.setInt(<span class="number">1</span>, (n-<span class="number">1</span>)*m);</div><div class="line">		statement.setInt(<span class="number">2</span>, m);</div><div class="line">		<span class="comment">//查询，获取结构集</span></div><div class="line">		resultSet=statement.executeQuery();</div><div class="line">		<span class="comment">//遍历结果集</span></div><div class="line">		<span class="keyword">while</span>(resultSet.next())&#123;</div><div class="line">			<span class="keyword">int</span> id=resultSet.getInt(<span class="string">"id"</span>);   <span class="comment">//获取id</span></div><div class="line">			String name=resultSet.getString(<span class="string">"name"</span>);  <span class="comment">//获取name</span></div><div class="line">			System.out.println(id+<span class="string">"-----"</span>+name+<span class="string">"\t"</span>);   <span class="comment">//制表符输出值</span></div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h3 id="jdbc操作事务"><a href="#jdbc操作事务" class="headerlink" title="jdbc操作事务"></a>jdbc操作事务</h3><ul>
<li><code>connection.setAutoCommit(false)</code>   关闭自动提交  如果不关闭自动提交，那么会每执行一行都会提交一次</li>
<li><code>connection.commit()</code>  提交</li>
<li><code>connection.rollback()</code>  回滚</li>
</ul>
<ul>
<li>转账的实现过程<ul>
<li>创建表：<code>create table user(id int,name,varchar(10),money int);</code></li>
<li>插入数据：<code>insert into user values(1,&#39;超人&#39;,200),(2,&#39;蝙蝠侠&#39;,10000);</code></li>
<li>关闭自动提交 <code>connection.setAutoCommit(false)</code></li>
<li>修改超人的钱(money+3000)</li>
<li>修改蝙蝠侠的钱(money-3000)</li>
<li>查询蝙蝠侠的钱是否大于0，如果小于0，则抛出运行时异常，大于0 提交(commit)</li>
<li>在catch异常的地方把SQLException改成Exception，并且在catch里面回滚</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransaction</span><span class="params">()</span> </span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">		connection.setAutoCommit(<span class="keyword">false</span>); <span class="comment">// 关闭自动提交</span></div><div class="line">		String sql = <span class="string">"update user set money=money+? where id=?"</span>; <span class="comment">// 修改蝙蝠侠和超人钱的sql语句</span></div><div class="line">		String sql_select = <span class="string">"select money from user where id=?"</span>; <span class="comment">// 查询钱</span></div><div class="line"></div><div class="line">		<span class="comment">// 创建更新的预编译对象</span></div><div class="line">		statement = connection.prepareStatement(sql);</div><div class="line"></div><div class="line">		<span class="comment">// 超人+3000</span></div><div class="line">		statement.setInt(<span class="number">1</span>, <span class="number">3000</span>);</div><div class="line">		statement.setInt(<span class="number">2</span>, <span class="number">1</span>);</div><div class="line">		<span class="keyword">int</span> row1 = statement.executeUpdate(); <span class="comment">// 执行更新语句</span></div><div class="line"></div><div class="line">		<span class="comment">// 蝙蝠侠-3000</span></div><div class="line">		statement.setInt(<span class="number">1</span>, -<span class="number">3000</span>);</div><div class="line">		statement.setInt(<span class="number">2</span>, <span class="number">2</span>);</div><div class="line">		<span class="keyword">int</span> row2 = statement.executeUpdate(); <span class="comment">// 执行更新语句</span></div><div class="line"></div><div class="line">		<span class="comment">// 预编译查询sql语句</span></div><div class="line">		statement = connection.prepareStatement(sql_select);</div><div class="line"></div><div class="line">		statement.setInt(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">		resultSet = statement.executeQuery(); <span class="comment">// 执行查询语句</span></div><div class="line">		<span class="keyword">while</span> (resultSet.next()) &#123;</div><div class="line">			<span class="keyword">int</span> money = resultSet.getInt(<span class="string">"money"</span>); <span class="comment">// 获取蝙蝠侠的此时的钱</span></div><div class="line">			<span class="comment">// 如果&lt;0 抛出运行异常</span></div><div class="line">			<span class="keyword">if</span> (money &lt; <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(); <span class="comment">// 手动抛出异常</span></div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果 &gt;0 可以成功提交</span></div><div class="line">				connection.commit(); <span class="comment">// 提交</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection.rollback(); <span class="comment">// 回滚，如果运行出错，那么就回滚到起始点，数据库中就不会生效</span></div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取自增主键的值"><a href="#获取自增主键的值" class="headerlink" title="获取自增主键的值"></a>获取自增主键的值</h2><ul>
<li>为什么获取： 因为某些插入的数据，插入完之后，需要用到数据的主键作为下一条数据外键</li>
</ul>
<h3 id="准备sql"><a href="#准备sql" class="headerlink" title="准备sql"></a>准备sql</h3><ul>
<li>create table t_d(id int primary key auto_increment,name varchar(10));</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuto</span><span class="params">()</span> </span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	Statement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">		String sql=<span class="string">"insert into t_d values(null,'神仙')"</span>;</div><div class="line">		statement=connection.createStatement();</div><div class="line">		<span class="comment">//执行sql，并且标记此时执行需要获取生成的key值</span></div><div class="line">		statement.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);</div><div class="line">		<span class="comment">//得到生成的key值</span></div><div class="line">		resultSet=statement.getGeneratedKeys();</div><div class="line">		<span class="keyword">while</span>(resultSet.next())&#123;</div><div class="line">			<span class="keyword">int</span> id=resultSet.getInt(<span class="number">1</span>);   <span class="comment">//获取第一个值，不能写getInt("id") 因为这里不是查询得到的数据，字段名并不是id</span></div><div class="line">			System.out.println(<span class="string">"自增主键的值为:"</span>+id);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取元数据"><a href="#获取元数据" class="headerlink" title="获取元数据"></a>获取元数据</h2><ul>
<li>数据库元数据： 数据库厂商信息（mysql,oracle) 数据库连接信息，都称为数据库的元数据</li>
<li>表元数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">	Connection connection = <span class="keyword">null</span>;</div><div class="line">	Statement statement = <span class="keyword">null</span>;</div><div class="line">	ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		connection = DBUtils.getConnection(); <span class="comment">// 获取连接</span></div><div class="line">		statement=connection.createStatement();</div><div class="line">		<span class="comment">//得到数据库元数据</span></div><div class="line">		DatabaseMetaData data=connection.getMetaData();</div><div class="line">		System.out.println(data.getDriverName());  <span class="comment">//数据库驱动名字</span></div><div class="line">		System.out.println(data.getDriverVersion());  <span class="comment">//驱动版本</span></div><div class="line">		System.out.println(data.getUserName());  <span class="comment">//用户名</span></div><div class="line">		System.out.println(data.getURL());  <span class="comment">//连接地址</span></div><div class="line">		System.out.println(data.getDatabaseProductName());  <span class="comment">//数据库厂商的名称</span></div><div class="line"></div><div class="line">		String sql=<span class="string">"select * from t_d"</span>;</div><div class="line">		resultSet=statement.executeQuery(sql);</div><div class="line">		<span class="comment">//从结果集中获取表的元数据</span></div><div class="line">		ResultSetMetaData sqldata=resultSet.getMetaData();</div><div class="line">		<span class="keyword">int</span> columcount=sqldata.getColumnCount();  <span class="comment">//获取表字段的数量</span></div><div class="line"></div><div class="line">		<span class="comment">//获取表中每个字段的名称</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;columcount;i++)&#123;</div><div class="line">			String name=sqldata.getColumnName(i+<span class="number">1</span>);</div><div class="line">			System.out.println(<span class="string">"字段名："</span>+name+<span class="string">"\t"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		DBUtils.close(connection, statement, resultSet); <span class="comment">// 关闭资源</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><ul>
<li>在JDBC连接数据的url后面添加如下参数：<ul>
<li>jdbc:mysql://localhost:3306/test?UseUnicode=true&amp;characterEncoding=UTF-8</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JDBC干货三&quot;&gt;&lt;a href=&quot;#JDBC干货三&quot; class=&quot;headerlink&quot; title=&quot;JDBC干货三&quot;&gt;&lt;/a&gt;JDBC干货三&lt;/h1&gt;&lt;h2 id=&quot;生成get-set方法的快捷键&quot;&gt;&lt;a href=&quot;#生成get-set方法的快捷键&quot; c
    
    </summary>
    
      <category term="java学习" scheme="http://chenjiabing666.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JDBC" scheme="http://chenjiabing666.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Struts之获取请求参数</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/Struts%E4%B9%8B%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/Struts之获取请求参数/</id>
    <published>2018-03-30T23:26:35.000Z</published>
    <updated>2018-03-30T23:27:11.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h1><ul>
<li>在Servlet中可以调用HttpServletRequest的getParameter()的方法接收传递过来的请求参数，但是在struts2中对这种方式进行了三种封装</li>
<li>我们一般发出请求都是通过表单传递的，但是在服务端如果获取表单传递过来的值，其中有三种不同的方式</li>
</ul>
<h2 id="属性驱动"><a href="#属性驱动" class="headerlink" title="属性驱动"></a>属性驱动</h2><ul>
<li><p>属性驱动就是将一个Action类作为一个POJO类，在类中定义表单的请求参数的<code>name</code>属性，但是还要为这些成员变量设置get，set方法。因为在获取请求参数的时候自动调用的是set方法，获取参数的时候调用的是get方法。</p>
</li>
<li><p>当表单提交的时候，实际上是提交了表单元素的值，之后会给ACtion类中的属性设置值(set)，因此这里的属性需要添加set方法</p>
</li>
<li><p>当表单请求成功的时候，实际上是先经过Action类，然后跳转到指定的视图，这个过程都是转发(ddispatcher)，因此会保留request域中的键值对，此时在success.jsp页面中使用EL表达式取值即可(get方法),取值使用的是属性的get方法，因此需要添加get方法</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>SimpleAction类，其中定义了属性<ul>
<li><strong>为每一个属性都需要添加get，set方法</strong></li>
<li><strong>表单提交之后会自动调用属性的set方法为其赋值</strong></li>
<li><strong>跳转到指定视图之后，使用EL表达式取值时会调用属性的get方法</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;  <span class="comment">//姓名</span></div><div class="line">	<span class="keyword">private</span> String password;  <span class="comment">//密码</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(name+<span class="string">"----"</span>+password);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml 配置Action</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>index.jsp 提价表单<ul>
<li><strong>input中的属性<code>name</code>对应的是SimpleAction的属性名</strong></li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;%</div><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";</div><div class="line">%&gt;</div><div class="line">&lt;form action="&lt;%=basePath %&gt;simple" method="post"&gt;</div><div class="line">	name:&lt;input type="text" name="name"&gt;</div><div class="line">	password:&lt;input type="text" name="password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp 表单提交成功之后跳转的视图</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;name &#125;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;password &#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h2 id="域驱动"><a href="#域驱动" class="headerlink" title="域驱动"></a>域驱动</h2><ul>
<li><p>域驱动是将表单中name属性抽象出一个JavaBean类成为一个modle，并不是Action类成为modle了，只需要在Action类引用JavaBean的对象即可(作为成员变量，get，set，方法都有)</p>
</li>
<li><p>既然Action类中的成员变量已经是JavaBean的对象了，那么表单的中name属性的设置就要使用OGNL形式的取该对象中的属性了，而不是像属性驱动一样直接设置的属性</p>
</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li>JavaBean实体类<ul>
<li><strong>必须为每一个属性设置get，set方法</strong></li>
<li><strong>必须有无参构造</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * POJO类，model 其中必须为每一个属性设置get，set方法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name; <span class="comment">// 姓名</span></div><div class="line">	<span class="keyword">private</span> String password; <span class="comment">// 密码</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Action类<ul>
<li><strong>JavaBean对象作为其成员变量，必须为这个成员变量设置get,set方法</strong></li>
<li><strong>必须有一个无参构造</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user; <span class="comment">// POJO类对象，必须有set，get方法，和无参构造方法</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(user.getName() + <span class="string">"---&gt;"</span> + user.getPassword());</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml配置同上</li>
</ul>
<ul>
<li>index.jsp 表单提交<ul>
<li>input中的name属性使用OGNL表达式来设置其值</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";</div><div class="line">%&gt;</div><div class="line">&lt;form action="&lt;%=basePath %&gt;simple" method="post"&gt;</div><div class="line">	name:&lt;input type="text" name="user.name"&gt;</div><div class="line">	password:&lt;input type="text" name="user.password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp页面<ul>
<li>此时使用EL表达式取值，也是使用OGNL形式的取值方式</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;requestScope.user.name &#125;&lt;/h1&gt;</div><div class="line">	&lt;h1&gt;$&#123;requestScope.user.password &#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h2 id="模型驱动"><a href="#模型驱动" class="headerlink" title="模型驱动"></a>模型驱动</h2><ul>
<li><p>模型驱动和域驱动比较相似，都是用一个JavaBean类作为model，但是模型驱动必须实现ModelDriven&lt;&gt;这个接口,这个可以指定一个泛型，其中泛型类为JavaBean的类，必须实现的方法是getmodel()方法</p>
</li>
<li><p><code>Type getModel(){}</code>  返回一个Type对象，这个对象是在实现接口的时候定义泛型类(JavaBean类)</p>
</li>
<li><p>使用模型驱动，那么表单中的name属性值就不需要使用OGNL表达式了，而是直接使用属性字段即可，这个和属性驱动一样的</p>
</li>
</ul>
<ul>
<li><p>JavaBean类，这个和上面的一样</p>
</li>
<li><p>Action类，实现了ModelDriver<javabean> 接口</javabean></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现ModelDriven接口&lt;&gt;指定的泛型为JavaBean类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span>,<span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> User user; <span class="comment">// POJO类对象，必须有set，get方法，和无参构造方法</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(user.getName() + <span class="string">"---&gt;"</span> + user.getPassword());</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"调用了getModel方法"</span>);</div><div class="line">		<span class="comment">// 如果对象为空，就创建一个对象，然后返回</span></div><div class="line">		<span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.user = <span class="keyword">new</span> User();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml 同上</li>
</ul>
<ul>
<li>index.jsp  表单提交<ul>
<li><strong>这里name属性值直接使用JavaBean属性即可，必须字段一样</strong></li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action="&lt;%=basePath %&gt;simple" method="post"&gt;</div><div class="line">	name:&lt;input type="text" name="name"&gt;</div><div class="line">	password:&lt;input type="text" name="password"&gt;</div><div class="line">	&lt;input type="submit" value="提交"&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp<ul>
<li>取值仍然使用的是OGNL形式的取值方式</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;requestScope.user.name &#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;$&#123;requestScope.user.password &#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>根据我的经验，在框架整合的基础上，我们必须使得单独的实体类对应一张表，那么此时就需要使得Action类和JavaBean分离，因此我推荐使用第二种方式，第三种方式还需要实现接口，对类的污染比较严重</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;获取请求参数&quot;&gt;&lt;a href=&quot;#获取请求参数&quot; class=&quot;headerlink&quot; title=&quot;获取请求参数&quot;&gt;&lt;/a&gt;获取请求参数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Servlet中可以调用HttpServletRequest的getParameter()的方
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts之Action类访问Servlet_API</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/Struts%E4%B9%8BAction%E7%B1%BB%E8%AE%BF%E9%97%AEServlet-API/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/Struts之Action类访问Servlet-API/</id>
    <published>2018-03-30T23:25:22.000Z</published>
    <updated>2018-03-30T23:25:53.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Action类访问Servlet-API"><a href="#Action类访问Servlet-API" class="headerlink" title="Action类访问Servlet API"></a>Action类访问Servlet API</h1><ul>
<li>Struts2并未直接和Servlet API耦合，这是Struts2的一个改良之处。但是对于web应用控制器而言，不访问Servlet API是不可能，因此下面我们介绍三种方式访问Servlet API</li>
</ul>
<h2 id="ActionContext"><a href="#ActionContext" class="headerlink" title="ActionContext"></a>ActionContext</h2><ul>
<li>使用这个可以获取Servlet中<code>HttpServletRequest</code>,<code>HttpSession</code>,<code>ServletContext</code></li>
</ul>
<h3 id="其中的方法"><a href="#其中的方法" class="headerlink" title="其中的方法"></a>其中的方法</h3><ul>
<li><p><code>static ActionContext getContext()</code>返回一个实例化ActionContext对象，用于调用下面的方法</p>
</li>
<li><p><code>Object get(key)</code>  返回ActionContext中存放的键值对的值  其实这里获取的是Servlet中<code>HttpServletRequest</code>对象的属性</p>
</li>
<li><p><code>Object put(key,value)</code> 向ActionContext中存放键值对,同样该方法用于存放<code>HttpServletRequest</code>的属性</p>
</li>
<li><p><code>Map getSession()</code><br>返回一个Map对象，不过这个模拟了<code>HttpSession</code>的用法，只不过现在向其中存放键值对使用put,获取属性用get</p>
</li>
<li><p><code>Map getApplication()</code><br>返回一个Map对象，不过这个模拟了Servlet中的<code>ServletContext</code>对象的方法。只不过存放和获取属性的方法用的分别是put和get</p>
</li>
<li><p><code>Map getParameters()</code><br>获取所有的请求参数，类似调用HttpServletRequest对象的getParameterMap()方法</p>
</li>
<li><p><code>Map setSession(Map session)</code><br>直接传入一个Map实例，将其中的kay-value转换成session的属性名和属性值</p>
</li>
<li><p><code>Map setApplication(Map application)</code><br>直接传入一个Map实例，将Map实例中的key-value转换成属性名，属性值</p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>如果想要使用这个类，当然需要实例化的对象，其中提供了一个获取对象的静态方法，就是上面方法中的第一个</p>
</li>
<li><p>我们在Action方法中使用这个设置request域，session域中的属性</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">		ActionContext actionContext=ActionContext.getContext();  <span class="comment">//获取实例化对象</span></div><div class="line">		<span class="comment">//向request域中存放键值对</span></div><div class="line">		actionContext.put(<span class="string">"name"</span>, <span class="string">"jack"</span>);</div><div class="line">		<span class="comment">//获取request域中的name值</span></div><div class="line">		System.out.println(actionContext.get(<span class="string">"name"</span>));</div><div class="line"></div><div class="line">		<span class="comment">//向session中存放键值对</span></div><div class="line">		actionContext.getSession().put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//向application中存放键值对</span></div><div class="line">		actionContext.getApplication().put(<span class="string">"a"</span>, <span class="string">"b"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>success.jsp 使用EL表达式获取</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;success&lt;/h1&gt;</div><div class="line">&lt;h1&gt;request域中的name:$&#123;requestScope.name&#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;session域中的password: $&#123;sessionScope.password &#125;&lt;/h1&gt;</div><div class="line">&lt;h1&gt;application域中的a: $&#123;a &#125;&lt;/h1&gt;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>虽说现在可以向各种域中添加属性获取属性，但是我们不可以移除属性，所以说这种方法不如直接使用Servlet API功能更加强大</li>
</ul>
<h2 id="实现接口访问Servlet-API"><a href="#实现接口访问Servlet-API" class="headerlink" title="实现接口访问Servlet API"></a>实现接口访问Servlet API</h2><ul>
<li>实现接口访问对一个Action类的污染实在太严重了，这个是不推荐使用的，可以了解一下</li>
</ul>
<h3 id="可以实现的接口"><a href="#可以实现的接口" class="headerlink" title="可以实现的接口"></a>可以实现的接口</h3><ul>
<li><p><code>ServletContextAware</code><br>实现该接口的Action可以直接访问用户请求的ServletContext实例</p>
</li>
<li><p><code>ServletRequestAware</code><br>实现该接口的Action可以直接访问用户请求的HttpServletRequest实例</p>
</li>
<li><p><code>ServletResponseAware</code><br>实现该接口的Action可以直接访问请求的HttpServletResponse实例</p>
</li>
</ul>
<h2 id="ServletActionContext（推荐）"><a href="#ServletActionContext（推荐）" class="headerlink" title="ServletActionContext（推荐）"></a>ServletActionContext（推荐）</h2><ul>
<li>使用这个类可以直接获取<code>HttpServletRequest</code>，<code>HttpServletResponse</code>等对象，其功能比第一种更加强大，因此推荐使用这种方式获取Servlet API</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p><code>PageContext getPageContext()</code><br>取得web应用的PageContext对象</p>
</li>
<li><p>HttpServletRequest getRequest()<br>获取HttpServletRequest对象</p>
</li>
<li><p><code>HttpServletResponse getResponse()</code><br>获取HttpServletResponse对象</p>
</li>
<li><p><code>ServletContext  getServletContext()</code><br>获取ServletContext对象</p>
</li>
</ul>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul>
<li>我们在Action类中使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//获取Request域的对象</span></div><div class="line">		HttpServletRequest request=ServletActionContext.getRequest();</div><div class="line">		request.setAttribute(<span class="string">"name"</span>, <span class="string">"jack"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取Session域的对象</span></div><div class="line">		HttpSession session=request.getSession();</div><div class="line">		session.setAttribute(<span class="string">"password"</span>, <span class="string">"123456"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//获取Response的对象</span></div><div class="line">		HttpServletResponse response=ServletActionContext.getResponse();</div><div class="line"></div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>直接获取Servlet API中的对象，可以使用的功能更加强大，因此推荐使用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Action类访问Servlet-API&quot;&gt;&lt;a href=&quot;#Action类访问Servlet-API&quot; class=&quot;headerlink&quot; title=&quot;Action类访问Servlet API&quot;&gt;&lt;/a&gt;Action类访问Servlet API&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2之动态调用</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/Struts2%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/Struts2之动态调用/</id>
    <published>2018-03-30T23:22:58.000Z</published>
    <updated>2018-03-30T23:23:29.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态调用"><a href="#动态调用" class="headerlink" title="动态调用"></a>动态调用</h1><h2 id="什么是动态调用"><a href="#什么是动态调用" class="headerlink" title="什么是动态调用"></a>什么是动态调用</h2><ul>
<li>动态调用就是一个Action类对应着多个请求，比如一个Action类中包含许多的方法，实现动态调用就是让这些方法都配上不同的URL请求映射，这个就是动态调用</li>
</ul>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul>
<li>我们知道如果一个Action类只是对应着一个URL请求，那么我们要写很多Action类，但是如果我们使用了动态调用，那么就可以减少很多的重复工作</li>
</ul>
<h2 id="method实现动态调用"><a href="#method实现动态调用" class="headerlink" title="method实现动态调用"></a>method实现动态调用</h2><p>-在struts核心配置文件详解(action)中已经详细讲解了method的用法，使用这个方式可以指定Action类中的不同的方法映射请求，那么就完成了动态调用</p>
<h2 id="action名-方法名"><a href="#action名-方法名" class="headerlink" title="action名!方法名"></a>action名!方法名</h2><ul>
<li>这种方式不推荐使用，要想使用的话还要开启开关，如下<ul>
<li><code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot; /&gt;</code>将这个常量设置<code>true</code>才能使用</li>
</ul>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>创建SimpleAction的类<ul>
<li>这个Action类中有一个login方法，我们的动态调用这个login方法，使用<code>action名!方法名</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//实现登录的action</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"这个是login方法......"</span>);</div><div class="line">		<span class="keyword">return</span> INPUT;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>struts.xml</code>中的配置(在src目录下)<ul>
<li>开启开关</li>
<li>配置SimpleAction这Action类</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 开启开关，否则不能使用!的方式 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 定义这个包下的默认处理类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 这个是SimpleAction的类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="输入地址"><a href="#输入地址" class="headerlink" title="输入地址"></a>输入地址</h3><ul>
<li><p>假设项目的名称为web1，那么在地址栏中输入的url为：<code>http://localhost:8080/web1/simple!login</code>,注意这个感叹号一定是英文的</p>
</li>
<li><p>输入成功之后我们看到可以正确跳转，那么就成功了</p>
</li>
</ul>
<h2 id="通配符的方式"><a href="#通配符的方式" class="headerlink" title="通配符的方式"></a>通配符的方式</h2><ul>
<li><p>使用这种方式首先需要关闭上面开启的开关，当然如果你没有开启，那么就不用配置，因为其中默认就是关闭的</p>
<ul>
<li><code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;false&quot; /&gt;</code></li>
<li>这种方式是官网推荐使用</li>
</ul>
</li>
<li><p>在Servelt设置url的时候也使用过通配符，一般都是使用*来替代的。现在使用通配符也是一样的道理，也是可以使用动态调用的。</p>
</li>
<li><p>这种方式是和method方式配合使用的，在我看来就是<code>method</code>方式，只不过通过通配符传参而已</p>
</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul>
<li>我们还是使用上面的SimpleAction类，仍然是调用其中的login方法，不过struts.xml此时的配置文件改变了</li>
</ul>
<ul>
<li>struts.xml<ul>
<li>关闭开关(默认是关闭的)</li>
<li>定义SimpleAction类的action</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 设置为false，关闭开关，默认是关闭的，因此可以不设置  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 定义action，其中name属性使用一个*的通配符，method=&#123;1&#125;，这个1就是用来接收第一个通配符*的内容</span></div><div class="line">			假设此时输入的Simple_regist ,那么此时&#123;1&#125;=regist</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simple_*"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>此时如果我们的项目名称为让web1，那么输入的url为<code>http://localhost:8080/Struts2/simple_login.action</code>,那么就会调用SimpleAction中的login方法执行</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>推荐使用method和通配符的方式实现动态调用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态调用&quot;&gt;&lt;a href=&quot;#动态调用&quot; class=&quot;headerlink&quot; title=&quot;动态调用&quot;&gt;&lt;/a&gt;动态调用&lt;/h1&gt;&lt;h2 id=&quot;什么是动态调用&quot;&gt;&lt;a href=&quot;#什么是动态调用&quot; class=&quot;headerlink&quot; title=&quot;什么是
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>struts核心配置文件详解(result配置)</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/struts%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3-result%E9%85%8D%E7%BD%AE/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/struts核心配置文件详解-result配置/</id>
    <published>2018-03-30T23:22:03.000Z</published>
    <updated>2018-03-30T23:22:32.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struts核心配置文件详解-result配置"><a href="#struts核心配置文件详解-result配置" class="headerlink" title="struts核心配置文件详解(result配置)"></a>struts核心配置文件详解(result配置)</h1><h2 id="配置处理结果-result"><a href="#配置处理结果-result" class="headerlink" title="配置处理结果(result)"></a>配置处理结果(result)</h2><ul>
<li>我们在包中定义的<code>&lt;result name=&quot;&quot; type=&quot;&quot;&gt;value&lt;/result&gt;</code>,这个是用来根据action方法返回的字符串，跳转到指定的视图或者其他的action。<ul>
<li>name指定的是action方法返回的结果。</li>
<li>type 指定的是跳转的类型，默认的是dispatcher，相当于Servlet中的RequestDispatcher,地址栏中的url不会改变</li>
</ul>
</li>
</ul>
<ul>
<li>如果一个action方法中可能返回的值是多个，比如如果测试成功返回success，测试失败返回input，出现异常返回error，那么此时就需要用到多个<code>&lt;result&gt;</code>标签来定义这些返回值跳转的视图</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol>
<li><p>dispatcher</p>
<ul>
<li><p>表示采用的跳转方式为转发，这个和Servlet中的RequestDispathcher是一个原理，地址栏的url是不会改变的</p>
</li>
<li><p>dispatcher 结果类型是在Action与JSP页面之中的一种默认的跳转发方式，相当于之间的Servlet中的转发(RequestDispatcher)</p>
</li>
</ul>
</li>
<li><p>redirect</p>
<ul>
<li><p>用于跳转到其他的页面，但是这个地址栏的url是改变的</p>
</li>
<li><p>这个结果类型主要用于重定向到指定的视图资源，这个和dispatcher比较相似，但是这个地址改变了。相当于Servlet中的sendirect()这个方法。</p>
</li>
</ul>
</li>
<li><p>chain</p>
<ul>
<li><p>Action链式处理结果类型</p>
</li>
<li><p>很多时候，当一个Action处理完之后并不想转发到视图资源，而是想要跳转到指定的Action继续未完成的处理，这时就需要使用chain，使得两个Action成为链式处理。</p>
</li>
<li><p>范例如下： 其中<result>中的value要写成指定的<action>标签中的name值，如果不是一个包中的，还要引入另外一个包中的action，看上面的内容</action></result></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">class</span>=<span class="string">"com.action.regist"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.action.LoginAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>freemaker</p>
<ul>
<li>用于与FreeMaker整合的结果类型</li>
</ul>
</li>
<li><p>httpheader</p>
<ul>
<li>用于控制特殊的HTTP行为的结果类型</li>
</ul>
</li>
<li><p>redirectAction</p>
<ul>
<li><p>用于直接跳转到其他Action的结果类型</p>
</li>
<li><p>上面说个redirect是用于重定向到指定的视图资源的，那么这个是用于重定向到指定的Action类的，这个和chain类型非常相似，不过一个是重定向，一个是转发，当然其中的request中的内容会丢失。</p>
</li>
</ul>
</li>
<li><p>stream</p>
<ul>
<li>用于浏览器返回一个InputStream的结果类型（一般用于下载）</li>
</ul>
</li>
<li><p>velocity</p>
<ul>
<li>用于与Velocity整合的结果类型</li>
</ul>
</li>
<li><p>xslt</p>
<ul>
<li>用于与XML/XSTL整合的结果类型</li>
</ul>
</li>
<li><p>plainText</p>
<ul>
<li>用于显示某个页面的原始代码的结果类型</li>
</ul>
</li>
</ol>
<h3 id="局部结果"><a href="#局部结果" class="headerlink" title="局部结果"></a>局部结果</h3><ul>
<li>配置局部结果就是在作为<action>的子标签配置，就是上面的配置方式，但是这种局部配置只针对自己的父标签的action起作用。如下：</action></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- name指定了包的名称，extends指定继承的类，namespace指定url路径，这里使用/表示在根路径下就可以直接访问 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置全局结果"><a href="#配置全局结果" class="headerlink" title="配置全局结果"></a>配置全局结果</h3><ul>
<li>当我们需要一个视图可能这个package中action都需要，如果一个action中定义一个这样的result难免有些多余，现在我们使用<global-results>只需要在<package>元素内定义一次即可，一旦有返回值满足即可调用这个视图。比如我们定义一个错误处理的界面，因为这个处理视图是一样的，只需要配置全局result即可。</package></global-results></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">”Login”</span> <span class="attr">extends</span>=<span class="string">”struts-default”</span> <span class="attr">namespace</span>=<span class="string">”/user”</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">global-results</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">!—只要执行action的类返回error就会跳转到error.jsp--!</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”error”</span>&gt;</span>error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">”login”class</span>=<span class="string">”com.action.LoginAction”</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”success”</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>根据上面的配置，如果此时login这个action返回的字符串为error，那么此时的全局配置结果就起作用了，就会跳转到error.jsp页面</p>
</li>
<li><p>但是我们一个action处理错误的页面和特殊，虽然返回的是error，但是我就想跳转到其他的页面，那么可以在这个action的标签下重新定义一个结果，此时的局部结果就会覆盖全局结果</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;struts核心配置文件详解-result配置&quot;&gt;&lt;a href=&quot;#struts核心配置文件详解-result配置&quot; class=&quot;headerlink&quot; title=&quot;struts核心配置文件详解(result配置)&quot;&gt;&lt;/a&gt;struts核心配置文件详解(r
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>struts核心配置文件详解(action配置)</title>
    <link href="http://chenjiabing666.github.io/2018/03/31/struts%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3-action%E9%85%8D%E7%BD%AE/"/>
    <id>http://chenjiabing666.github.io/2018/03/31/struts核心配置文件详解-action配置/</id>
    <published>2018-03-30T23:21:10.000Z</published>
    <updated>2018-03-30T23:21:46.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struts核心配置文件详解-action配置"><a href="#struts核心配置文件详解-action配置" class="headerlink" title="struts核心配置文件详解(action配置)"></a>struts核心配置文件详解(action配置)</h1><h2 id="配置action"><a href="#配置action" class="headerlink" title="配置action"></a>配置action</h2><ul>
<li>前面我们已经说过Action类的三个实现方式，现在我们该说说Action类在struts.xml中的配置问题了</li>
</ul>
<h2 id="指定特定的方法执行-method"><a href="#指定特定的方法执行-method" class="headerlink" title="指定特定的方法执行(method)"></a>指定特定的方法执行(method)</h2><ul>
<li><p>我们知道ActionSupport类实际上相当与一个POJO类，这个和springmvc不同，struts2中的控制层Action类没有和实体类分离，其中可以有很多的方法，我们知道struts2默认调用的<code>execute</code>方法，但是如果我们想要指定其他的方法来处理请求呢，这时我们就需要使用<code>method</code>这个属性了</p>
</li>
<li><p>method: 是<code>&lt;action name=&quot;&quot; class=&quot;&quot; method=&quot;&quot;&gt;</code>标签中的属性,指定的是Action类中的方法名，如果不使用这属性，那么默认的值是<code>execute</code></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--  使用method指定 SimpleAction中的login方法执行这个login.action这个URL --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置默认的处理类"><a href="#配置默认的处理类" class="headerlink" title="配置默认的处理类"></a>配置默认的处理类</h2><ul>
<li><p>上面我们讲解了method的使用方式，但是现在有一个问题，如果一个Action类中有多个处理方法，那么每次定义action都需要在其中指定相同的class属性，如果我们把这个class抽离出来，不用每一个action都写class属性。</p>
</li>
<li><p>只需要在<package>标签内部加上<code>&lt;default-class-ref class=&quot;&quot;&gt;</code>即可，那么这个<package>包下的所有的action没有设置class的是属性的都是使用的这个默认的处理类。</package></package></p>
</li>
<li><p>但是如果<code>&lt;action&gt;</code>标签中指定了<code>class</code>属性，那么会覆盖这个默认的处理类</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 定义这个包下的默认处理类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--  这个action使用的是另外一个处理类，此时的默认处理类对这个action没有作用，被覆盖掉--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"testaction"</span></span></div><div class="line">		<span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.TestAction"</span> &gt;</div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 这个action没有指定class属性，那么就会使用默认处理类的exit方法 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simpleAction"</span> <span class="attr">method</span>=<span class="string">"exit"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--  使用method指定 SimpleAction中的login方法执行这个login.action这个URL，同样的没有指定class，使用默认处理类中的login方法 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span>  <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置默认的处理action"><a href="#配置默认的处理action" class="headerlink" title="配置默认的处理action"></a>配置默认的处理action</h2><p>-如果用户输入的的URL地址在这个<code>&lt;package&gt;</code>下，即是namespace符合，但是在其中没有相应的action的做出响应，可能是地址输错了，此时的我们需要使其跳转到error.jsp页面，给用户一个提示。那么我们这个时候就需要使用默认的action。</p>
<ul>
<li>默认的action的作用就是在用户输入地址没有响应，但是符合<code>&lt;package&gt;</code>下的一个<code>namespace</code>，那么可能是用户输错了，那么我们为了提高友好性，此时需要跳转到error.jsp页面，此时就需要一个默认的action类映射了</li>
</ul>
<p>-直接在<code>&lt;package&gt;</code> 定义即可，其中的<code>name</code>属性指定的package下的已经存在的action的名称</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 指定默认的action，如果在namespace路径下的找不到指定的action来映射请求，那么就会使用package下的默认的action来做出响应</span></div><div class="line">			name： 指定这个package下的action的名字，相当于已经定义好的action</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 定义这个包下的默认处理类 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">default-class-ref</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-class-ref</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--  使用method指定 SimpleAction中的login方法执行这个login.action这个URL，同样的没有指定class，使用默认处理类中的login方法 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span>  <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/jsp/input.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;struts核心配置文件详解-action配置&quot;&gt;&lt;a href=&quot;#struts核心配置文件详解-action配置&quot; class=&quot;headerlink&quot; title=&quot;struts核心配置文件详解(action配置)&quot;&gt;&lt;/a&gt;struts核心配置文件详解(a
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2Action类实现</title>
    <link href="http://chenjiabing666.github.io/2018/03/30/Struts2Action%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://chenjiabing666.github.io/2018/03/30/Struts2Action类实现/</id>
    <published>2018-03-30T04:58:24.000Z</published>
    <updated>2018-03-30T05:00:20.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Action类的实现方式"><a href="#Action类的实现方式" class="headerlink" title="Action类的实现方式"></a>Action类的实现方式</h1><h2 id="Action类的实现方式-1"><a href="#Action类的实现方式-1" class="headerlink" title="Action类的实现方式"></a>Action类的实现方式</h2><ul>
<li><p>如果想要浏览器可以映射到其中的方法，那么必须返回一个String，使用这个值指示需要跳转的视图或者Action</p>
</li>
<li><p>Struts中的Action类实际上可以是一个POJO类，其中也是可以定义许多的方法，但是如果在struts.xml的配置文件中特指调用哪个方法的话，那么就会默认会调用名为execute的方法。后续将会讲如何调用类中其他的方法</p>
</li>
</ul>
<h2 id="普通的pojo类"><a href="#普通的pojo类" class="headerlink" title="普通的pojo类"></a>普通的pojo类</h2><ul>
<li>不需要实现或者继承任何类，只是一个普通的类</li>
<li>这个普通的类中有一个名为execute的方法，返回的一个字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAction</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String  <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"这是一个普通的pojo类"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml  配置跳转的视图</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置跳转到添加学生页面的action --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"simpleAction"</span> <span class="attr">class</span>=<span class="string">"com.jsnu.struts2.controller.SimpleAction"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="继承ActionSupport"><a href="#继承ActionSupport" class="headerlink" title="继承ActionSupport"></a>继承ActionSupport</h2><ul>
<li>在其中封装了execute方法，我们只需要覆盖即可</li>
<li><p>在这个类中还默认的封装了一些静态变量，比如：</p>
<ul>
<li><code>public static final String EOORO=”error”</code></li>
<li><code>public static final String INPUT=”input”</code></li>
<li><code>public static final String LOGIN=”login”</code></li>
<li><code>public static final String NONE=’none’</code></li>
<li><code>public static final String SUCCESS=”success”</code></li>
</ul>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionSupportAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"继承了ActionSupport"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts中配置<ul>
<li>同上</li>
</ul>
</li>
</ul>
<h2 id="实现Action类"><a href="#实现Action类" class="headerlink" title="实现Action类"></a>实现Action类</h2><ul>
<li>实现这个类，同样是还要实现其中的execute方法</li>
<li><p>其中也是和ActionSupport一样，封装了许多的字符串静态变量，我们自己调用即可。同上</p>
</li>
<li><p>实现</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * action类： 这里实现的Action接口</div><div class="line"> * <span class="doctag">@author</span> chenjiabing</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		System.out.println(<span class="string">"cchjemko"</span>);</div><div class="line">		<span class="keyword">return</span> SUCCESS;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>struts.xml配置 同上  只需要改变<action>中的name 和 class即可</action></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Action类的实现方式&quot;&gt;&lt;a href=&quot;#Action类的实现方式&quot; class=&quot;headerlink&quot; title=&quot;Action类的实现方式&quot;&gt;&lt;/a&gt;Action类的实现方式&lt;/h1&gt;&lt;h2 id=&quot;Action类的实现方式-1&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2核心配置文件(package)</title>
    <link href="http://chenjiabing666.github.io/2018/03/30/Struts2%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://chenjiabing666.github.io/2018/03/30/Struts2核心配置文件/</id>
    <published>2018-03-30T04:57:35.000Z</published>
    <updated>2018-03-30T23:20:28.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="struts核心配置文件详解"><a href="#struts核心配置文件详解" class="headerlink" title="struts核心配置文件详解"></a>struts核心配置文件详解</h1><h2 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h2><ul>
<li><p>在核心配置文件中需要配置<code>&lt;package&gt;</code></p>
</li>
<li><p><package>元素可以把逻辑上相关的一组Action、Result、Intercepter等元素封装起来，形成一个独立的模块，package可以继承其他的package，也可以作为父包被其他的package继承</package></p>
</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><code>name</code><ul>
<li>这是一个必填的属性，指定包的名字，便于其他的包引用，因为其他的包可以继承这个包</li>
</ul>
</li>
</ul>
<ul>
<li><code>extends</code> ： 该属性是一个选择属性，表示继承其他的包，但是我们一般都会继承struts-default<ul>
<li>如果我们学到了处理json数据的时候，我们将会继承处理json的包</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>namespace</code> ：该属性是一个可选属性，指定该包的命名空间，默认的是“/”,以为一个配置文件中可能有相同名字的action，如果配置不同的namespace，那么就可以配置相同的action的名字</p>
<ul>
<li><p>namespace配置的是包的命名空间，同一个命名空间里面不能有同名的Action，当然不同的命名空间里面是可以有同名的Action的。类似于Java的包的功能，namespace可以有效的防止action重名的冲突，因为配置了namespace后，在访问action的时候就需要添加namespace来作为action的前缀。如果不配置namespace，表示是默认的namespace，那么访问的时候不需要添加namespace前缀。</p>
</li>
<li><p>比如有一个项目为Web1，在struts.xml的<code>&lt;package namespace = &quot;/student&quot;&gt;</code>,这个包的下面有一个<code>&lt;action name =&quot;add&quot;&gt;</code>,那么我们要访问这个action使用的url为：<br><code>http://localhost:8080/Web1/student/add.action</code></p>
</li>
</ul>
</li>
<li><p><code>abstract</code>：这是一个可选属性，表示这个包是否是抽象的，抽象包不能包含action定义</p>
</li>
</ul>
<h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!—指定了继承自strtus-default这个类，namespace指定了命名空间，那么当其中的action访问的时候要必须使用如下:http:</span>//<span class="attr">localhost:8080</span>/<span class="attr">web1</span>/<span class="attr">user</span>/*<span class="attr">--</span>!&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/user"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="引入另一个包中的action"><a href="#引入另一个包中的action" class="headerlink" title="引入另一个包中的action"></a>引入另一个包中的action</h3><ul>
<li><p>需求： 前面我们都是跳转到指定的视图，但是我们也是可以跳转到指定的action，但是这个要跳转的action和当前的action不是一个包中的。</p>
</li>
<li><p>此时我们就需要在当前包中引入另外一个包中的action，那么我们可以如下设置</p>
<ul>
<li><code>&lt;param name=&quot;namespace&quot;&gt;</code>中的值为另外一个包的namespace</li>
<li><code>&lt;param name=&quot;actionName&quot;&gt;</code>中的值为需要跳转到的action名字</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.action.LoginAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- namespace指定另外一个包中的namespace，actionName指定action的名字 --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>regist<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Regist"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/user"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">class</span>=<span class="string">"com.action.RegistAction"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="包含另外一个包（include"><a href="#包含另外一个包（include" class="headerlink" title="包含另外一个包（include)"></a>包含另外一个包（include)</h3><ul>
<li><p>一个项目中的配置文件中可能需要定义很多个package和action，那么都写在一个xml文件中，不免有些混乱，因此需要使用include包含其他的配置文件，相当于jsp文件中的<code>&lt;jsp:include&gt;</code>,要注意的是配置文件都要放在项目的src目录下</p>
<ul>
<li><code>&lt;include file=”user.xml”&gt;&lt;/include&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="配置处理结果-result"><a href="#配置处理结果-result" class="headerlink" title="配置处理结果(result)"></a>配置处理结果(result)</h2><ul>
<li>我们在包中定义的<code>&lt;result name=&quot;&quot; type=&quot;&quot;&gt;value&lt;/result&gt;</code>,这个是用来根据action方法返回的字符串，跳转到指定的视图或者其他的action。<ul>
<li>name指定的是action方法返回的结果。</li>
<li>type 指定的是跳转的类型，默认的是dispatcher，相当于Servlet中的RequestDispatcher,地址栏中的url不会改变</li>
</ul>
</li>
</ul>
<ul>
<li>如果一个action方法中可能返回的值是多个，比如如果测试成功返回success，测试失败返回input，出现异常返回error，那么此时就需要用到多个<code>&lt;result&gt;</code>标签来定义这些返回值跳转的视图</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol>
<li><p>dispatcher</p>
<ul>
<li><p>表示采用的跳转方式为转发，这个和Servlet中的RequestDispathcher是一个原理，地址栏的url是不会改变的</p>
</li>
<li><p>dispatcher 结果类型是在Action与JSP页面之中的一种默认的跳转发方式，相当于之间的Servlet中的转发(RequestDispatcher)</p>
</li>
</ul>
</li>
<li><p>redirect</p>
<ul>
<li><p>用于跳转到其他的页面，但是这个地址栏的url是改变的</p>
</li>
<li><p>这个结果类型主要用于重定向到指定的视图资源，这个和dispatcher比较相似，但是这个地址改变了。相当于Servlet中的sendirect()这个方法。</p>
</li>
</ul>
</li>
<li><p>chain</p>
<ul>
<li><p>Action链式处理结果类型</p>
</li>
<li><p>很多时候，当一个Action处理完之后并不想转发到视图资源，而是想要跳转到指定的Action继续未完成的处理，这时就需要使用chain，使得两个Action成为链式处理。</p>
</li>
<li><p>范例如下： 其中<result>中的value要写成指定的<action>标签中的name值，如果不是一个包中的，还要引入另外一个包中的action，看上面的内容</action></result></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regist"</span> <span class="attr">class</span>=<span class="string">"com.action.regist"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.action.LoginAction"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>freemaker</p>
<ul>
<li>用于与FreeMaker整合的结果类型</li>
</ul>
</li>
<li><p>httpheader</p>
<ul>
<li>用于控制特殊的HTTP行为的结果类型</li>
</ul>
</li>
<li><p>redirectAction</p>
<ul>
<li><p>用于直接跳转到其他Action的结果类型</p>
</li>
<li><p>上面说个redirect是用于重定向到指定的视图资源的，那么这个是用于重定向到指定的Action类的，这个和chain类型非常相似，不过一个是重定向，一个是转发，当然其中的request中的内容会丢失。</p>
</li>
</ul>
</li>
<li><p>stream</p>
<ul>
<li>用于浏览器返回一个InputStream的结果类型（一般用于下载）</li>
</ul>
</li>
<li><p>velocity</p>
<ul>
<li>用于与Velocity整合的结果类型</li>
</ul>
</li>
<li><p>xslt</p>
<ul>
<li>用于与XML/XSTL整合的结果类型</li>
</ul>
</li>
<li><p>plainText</p>
<ul>
<li>用于显示某个页面的原始代码的结果类型</li>
</ul>
</li>
</ol>
<h3 id="局部结果"><a href="#局部结果" class="headerlink" title="局部结果"></a>局部结果</h3><ul>
<li>配置局部结果就是在作为<action>的子标签配置，就是上面的配置方式，但是这种局部配置只针对自己的父标签的action起作用。如下：</action></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- name指定了包的名称，extends指定继承的类，namespace指定url路径，这里使用/表示在根路径下就可以直接访问 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.controller.LoginAction"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/JSP/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/JSP/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置全局结果"><a href="#配置全局结果" class="headerlink" title="配置全局结果"></a>配置全局结果</h3><ul>
<li>当我们需要一个视图可能这个package中action都需要，如果一个action中定义一个这样的result难免有些多余，现在我们使用<global-results>只需要在<package>元素内定义一次即可，一旦有返回值满足即可调用这个视图。比如我们定义一个错误处理的界面，因为这个处理视图是一样的，只需要配置全局result即可。</package></global-results></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">”Login”</span> <span class="attr">extends</span>=<span class="string">”struts-default”</span> <span class="attr">namespace</span>=<span class="string">”/user”</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">global-results</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">!—只要执行action的类返回error就会跳转到error.jsp--!</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”error”</span>&gt;</span>error.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">”login”class</span>=<span class="string">”com.action.LoginAction”</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">”success”</span>&gt;</span>success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>根据上面的配置，如果此时login这个action返回的字符串为error，那么此时的全局配置结果就起作用了，就会跳转到error.jsp页面</p>
</li>
<li><p>但是我们一个action处理错误的页面和特殊，虽然返回的是error，但是我就想跳转到其他的页面，那么可以在这个action的标签下重新定义一个结果，此时的局部结果就会覆盖全局结果</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;struts核心配置文件详解&quot;&gt;&lt;a href=&quot;#struts核心配置文件详解&quot; class=&quot;headerlink&quot; title=&quot;struts核心配置文件详解&quot;&gt;&lt;/a&gt;struts核心配置文件详解&lt;/h1&gt;&lt;h2 id=&quot;包-package&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/categories/Struts2/"/>
    
    
      <category term="Struts2" scheme="http://chenjiabing666.github.io/tags/Struts2/"/>
    
  </entry>
  
</feed>
